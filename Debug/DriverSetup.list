
DriverSetup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082a4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  0800843c  0800843c  0001843c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008448  08008448  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  08008448  08008448  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008448  08008448  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008448  08008448  00018448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800844c  0800844c  0001844c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08008450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a8  200000fc  0800854c  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009a4  0800854c  000209a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000181d0  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f85  00000000  00000000  000382fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  0003c288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001208  00000000  00000000  0003d640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019dce  00000000  00000000  0003e848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019785  00000000  00000000  00058616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009331c  00000000  00000000  00071d9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001050b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000547c  00000000  00000000  00105108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008424 	.word	0x08008424

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08008424 	.word	0x08008424

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop
 8000a84:	0000      	movs	r0, r0
	...

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8e:	f001 fabb 	bl	8002008 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a92:	f000 f995 	bl	8000dc0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a96:	f000 f8c9 	bl	8000c2c <MX_I2C1_Init>
  MX_I2S2_Init();
 8000a9a:	f000 f8f5 	bl	8000c88 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000a9e:	f000 f921 	bl	8000ce4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000aa2:	f000 f94f 	bl	8000d44 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000aa6:	f007 f887 	bl	8007bb8 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000aaa:	f000 f981 	bl	8000db0 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int16_t buffer[3] = {0, 0, 0};
 8000aae:	2300      	movs	r3, #0
 8000ab0:	803b      	strh	r3, [r7, #0]
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	807b      	strh	r3, [r7, #2]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	80bb      	strh	r3, [r7, #4]
	BSP_ACCELERO_Init();
 8000aba:	f001 f9b7 	bl	8001e2c <BSP_ACCELERO_Init>
	BSP_ACCELERO_GetXYZ(buffer);
 8000abe:	463b      	mov	r3, r7
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 fa75 	bl	8001fb0 <BSP_ACCELERO_GetXYZ>
	double start_acceleration=1;
 8000ac6:	f04f 0200 	mov.w	r2, #0
 8000aca:	4b53      	ldr	r3, [pc, #332]	; (8000c18 <main+0x190>)
 8000acc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double speed=0;
 8000ad0:	f04f 0200 	mov.w	r2, #0
 8000ad4:	f04f 0300 	mov.w	r3, #0
 8000ad8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double height=0;
 8000adc:	f04f 0200 	mov.w	r2, #0
 8000ae0:	f04f 0300 	mov.w	r3, #0
 8000ae4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  while (1)
	  {
		  BSP_ACCELERO_GetXYZ(buffer);
 8000ae8:	463b      	mov	r3, r7
 8000aea:	4618      	mov	r0, r3
 8000aec:	f001 fa60 	bl	8001fb0 <BSP_ACCELERO_GetXYZ>
		  double acceleration=round(((double)buffer[2]/16/1000.0-start_acceleration)*10)/10;
 8000af0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fcc1 	bl	800047c <__aeabi_i2d>
 8000afa:	f04f 0200 	mov.w	r2, #0
 8000afe:	4b47      	ldr	r3, [pc, #284]	; (8000c1c <main+0x194>)
 8000b00:	f7ff fe50 	bl	80007a4 <__aeabi_ddiv>
 8000b04:	4602      	mov	r2, r0
 8000b06:	460b      	mov	r3, r1
 8000b08:	4610      	mov	r0, r2
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f04f 0200 	mov.w	r2, #0
 8000b10:	4b43      	ldr	r3, [pc, #268]	; (8000c20 <main+0x198>)
 8000b12:	f7ff fe47 	bl	80007a4 <__aeabi_ddiv>
 8000b16:	4602      	mov	r2, r0
 8000b18:	460b      	mov	r3, r1
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000b22:	f7ff fb5d 	bl	80001e0 <__aeabi_dsub>
 8000b26:	4602      	mov	r2, r0
 8000b28:	460b      	mov	r3, r1
 8000b2a:	4610      	mov	r0, r2
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f04f 0200 	mov.w	r2, #0
 8000b32:	4b3c      	ldr	r3, [pc, #240]	; (8000c24 <main+0x19c>)
 8000b34:	f7ff fd0c 	bl	8000550 <__aeabi_dmul>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	ec43 2b17 	vmov	d7, r2, r3
 8000b40:	eeb0 0a47 	vmov.f32	s0, s14
 8000b44:	eef0 0a67 	vmov.f32	s1, s15
 8000b48:	f007 fc26 	bl	8008398 <round>
 8000b4c:	ec51 0b10 	vmov	r0, r1, d0
 8000b50:	f04f 0200 	mov.w	r2, #0
 8000b54:	4b33      	ldr	r3, [pc, #204]	; (8000c24 <main+0x19c>)
 8000b56:	f7ff fe25 	bl	80007a4 <__aeabi_ddiv>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		if (acceleration > -0.05 && acceleration < 0.08){
 8000b62:	a329      	add	r3, pc, #164	; (adr r3, 8000c08 <main+0x180>)
 8000b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b6c:	f7ff ff80 	bl	8000a70 <__aeabi_dcmpgt>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d010      	beq.n	8000b98 <main+0x110>
 8000b76:	a326      	add	r3, pc, #152	; (adr r3, 8000c10 <main+0x188>)
 8000b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b80:	f7ff ff58 	bl	8000a34 <__aeabi_dcmplt>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d006      	beq.n	8000b98 <main+0x110>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b90:	4825      	ldr	r0, [pc, #148]	; (8000c28 <main+0x1a0>)
 8000b92:	f001 fe49 	bl	8002828 <HAL_GPIO_WritePin>
 8000b96:	e005      	b.n	8000ba4 <main+0x11c>
		}
		else{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b9e:	4822      	ldr	r0, [pc, #136]	; (8000c28 <main+0x1a0>)
 8000ba0:	f001 fe42 	bl	8002828 <HAL_GPIO_WritePin>
		}
		if (acceleration < -0.05){
 8000ba4:	a318      	add	r3, pc, #96	; (adr r3, 8000c08 <main+0x180>)
 8000ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000baa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000bae:	f7ff ff41 	bl	8000a34 <__aeabi_dcmplt>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d006      	beq.n	8000bc6 <main+0x13e>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bbe:	481a      	ldr	r0, [pc, #104]	; (8000c28 <main+0x1a0>)
 8000bc0:	f001 fe32 	bl	8002828 <HAL_GPIO_WritePin>
 8000bc4:	e005      	b.n	8000bd2 <main+0x14a>
		}
		else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bcc:	4816      	ldr	r0, [pc, #88]	; (8000c28 <main+0x1a0>)
 8000bce:	f001 fe2b 	bl	8002828 <HAL_GPIO_WritePin>
		}
		if (acceleration > 0.08){
 8000bd2:	a30f      	add	r3, pc, #60	; (adr r3, 8000c10 <main+0x188>)
 8000bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000bdc:	f7ff ff48 	bl	8000a70 <__aeabi_dcmpgt>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d006      	beq.n	8000bf4 <main+0x16c>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bec:	480e      	ldr	r0, [pc, #56]	; (8000c28 <main+0x1a0>)
 8000bee:	f001 fe1b 	bl	8002828 <HAL_GPIO_WritePin>
 8000bf2:	e005      	b.n	8000c00 <main+0x178>
		}
		else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bfa:	480b      	ldr	r0, [pc, #44]	; (8000c28 <main+0x1a0>)
 8000bfc:	f001 fe14 	bl	8002828 <HAL_GPIO_WritePin>
		}
		HAL_Delay(50);
 8000c00:	2032      	movs	r0, #50	; 0x32
 8000c02:	f001 fa73 	bl	80020ec <HAL_Delay>
	  {
 8000c06:	e76f      	b.n	8000ae8 <main+0x60>
 8000c08:	9999999a 	.word	0x9999999a
 8000c0c:	bfa99999 	.word	0xbfa99999
 8000c10:	47ae147b 	.word	0x47ae147b
 8000c14:	3fb47ae1 	.word	0x3fb47ae1
 8000c18:	3ff00000 	.word	0x3ff00000
 8000c1c:	40300000 	.word	0x40300000
 8000c20:	408f4000 	.word	0x408f4000
 8000c24:	40240000 	.word	0x40240000
 8000c28:	40020c00 	.word	0x40020c00

08000c2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c32:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <MX_I2C1_Init+0x54>)
 8000c34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c38:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <MX_I2C1_Init+0x58>)
 8000c3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c6a:	f003 f9e5 	bl	8004038 <HAL_I2C_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c74:	f000 f97e 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000118 	.word	0x20000118
 8000c80:	40005400 	.word	0x40005400
 8000c84:	000186a0 	.word	0x000186a0

08000c88 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <MX_I2S2_Init+0x50>)
 8000c8e:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <MX_I2S2_Init+0x54>)
 8000c90:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_I2S2_Init+0x50>)
 8000c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c98:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_I2S2_Init+0x50>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <MX_I2S2_Init+0x50>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_I2S2_Init+0x50>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <MX_I2S2_Init+0x50>)
 8000cae:	4a0c      	ldr	r2, [pc, #48]	; (8000ce0 <MX_I2S2_Init+0x58>)
 8000cb0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_I2S2_Init+0x50>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <MX_I2S2_Init+0x50>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_I2S2_Init+0x50>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <MX_I2S2_Init+0x50>)
 8000cc6:	f004 f9b5 	bl	8005034 <HAL_I2S_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000cd0:	f000 f950 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	2000016c 	.word	0x2000016c
 8000cdc:	40003800 	.word	0x40003800
 8000ce0:	00017700 	.word	0x00017700

08000ce4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <MX_I2S3_Init+0x54>)
 8000cea:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <MX_I2S3_Init+0x58>)
 8000cec:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_I2S3_Init+0x54>)
 8000cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <MX_I2S3_Init+0x54>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_I2S3_Init+0x54>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d02:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <MX_I2S3_Init+0x54>)
 8000d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d08:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_I2S3_Init+0x54>)
 8000d0c:	4a0c      	ldr	r2, [pc, #48]	; (8000d40 <MX_I2S3_Init+0x5c>)
 8000d0e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_I2S3_Init+0x54>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <MX_I2S3_Init+0x54>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_I2S3_Init+0x54>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_I2S3_Init+0x54>)
 8000d24:	f004 f986 	bl	8005034 <HAL_I2S_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000d2e:	f000 f921 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200001b4 	.word	0x200001b4
 8000d3c:	40003c00 	.word	0x40003c00
 8000d40:	00017700 	.word	0x00017700

08000d44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <MX_SPI1_Init+0x64>)
 8000d4a:	4a18      	ldr	r2, [pc, #96]	; (8000dac <MX_SPI1_Init+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <MX_SPI1_Init+0x64>)
 8000d50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d56:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <MX_SPI1_Init+0x64>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <MX_SPI1_Init+0x64>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <MX_SPI1_Init+0x64>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <MX_SPI1_Init+0x64>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <MX_SPI1_Init+0x64>)
 8000d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <MX_SPI1_Init+0x64>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <MX_SPI1_Init+0x64>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <MX_SPI1_Init+0x64>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <MX_SPI1_Init+0x64>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <MX_SPI1_Init+0x64>)
 8000d90:	220a      	movs	r2, #10
 8000d92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d94:	4804      	ldr	r0, [pc, #16]	; (8000da8 <MX_SPI1_Init+0x64>)
 8000d96:	f004 fe6d 	bl	8005a74 <HAL_SPI_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000da0:	f000 f8e8 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200001fc 	.word	0x200001fc
 8000dac:	40013000 	.word	0x40013000

08000db0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 1 */
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08c      	sub	sp, #48	; 0x30
 8000dc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
 8000dda:	4b61      	ldr	r3, [pc, #388]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a60      	ldr	r2, [pc, #384]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000de0:	f043 0310 	orr.w	r3, r3, #16
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b5e      	ldr	r3, [pc, #376]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0310 	and.w	r3, r3, #16
 8000dee:	61bb      	str	r3, [r7, #24]
 8000df0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	4b5a      	ldr	r3, [pc, #360]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a59      	ldr	r2, [pc, #356]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b57      	ldr	r3, [pc, #348]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b53      	ldr	r3, [pc, #332]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a52      	ldr	r2, [pc, #328]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b50      	ldr	r3, [pc, #320]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b4c      	ldr	r3, [pc, #304]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a4b      	ldr	r2, [pc, #300]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b49      	ldr	r3, [pc, #292]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	4b45      	ldr	r3, [pc, #276]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a44      	ldr	r2, [pc, #272]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b42      	ldr	r3, [pc, #264]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b3e      	ldr	r3, [pc, #248]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a3d      	ldr	r2, [pc, #244]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e6c:	f043 0308 	orr.w	r3, r3, #8
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b3b      	ldr	r3, [pc, #236]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2108      	movs	r1, #8
 8000e82:	4838      	ldr	r0, [pc, #224]	; (8000f64 <MX_GPIO_Init+0x1a4>)
 8000e84:	f001 fcd0 	bl	8002828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	4836      	ldr	r0, [pc, #216]	; (8000f68 <MX_GPIO_Init+0x1a8>)
 8000e8e:	f001 fccb 	bl	8002828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e92:	2200      	movs	r2, #0
 8000e94:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000e98:	4834      	ldr	r0, [pc, #208]	; (8000f6c <MX_GPIO_Init+0x1ac>)
 8000e9a:	f001 fcc5 	bl	8002828 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	4619      	mov	r1, r3
 8000eb0:	482c      	ldr	r0, [pc, #176]	; (8000f64 <MX_GPIO_Init+0x1a4>)
 8000eb2:	f001 fa51 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4825      	ldr	r0, [pc, #148]	; (8000f64 <MX_GPIO_Init+0x1a4>)
 8000ece:	f001 fa43 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000ed2:	2332      	movs	r3, #50	; 0x32
 8000ed4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ed6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000eda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	481f      	ldr	r0, [pc, #124]	; (8000f64 <MX_GPIO_Init+0x1a4>)
 8000ee8:	f001 fa36 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000eec:	2301      	movs	r3, #1
 8000eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	4619      	mov	r1, r3
 8000f02:	4819      	ldr	r0, [pc, #100]	; (8000f68 <MX_GPIO_Init+0x1a8>)
 8000f04:	f001 fa28 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f0c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 031c 	add.w	r3, r7, #28
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4814      	ldr	r0, [pc, #80]	; (8000f70 <MX_GPIO_Init+0x1b0>)
 8000f1e:	f001 fa1b 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f22:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000f26:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	4619      	mov	r1, r3
 8000f3a:	480c      	ldr	r0, [pc, #48]	; (8000f6c <MX_GPIO_Init+0x1ac>)
 8000f3c:	f001 fa0c 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000f40:	2320      	movs	r3, #32
 8000f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f44:	2300      	movs	r3, #0
 8000f46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	4619      	mov	r1, r3
 8000f52:	4806      	ldr	r0, [pc, #24]	; (8000f6c <MX_GPIO_Init+0x1ac>)
 8000f54:	f001 fa00 	bl	8002358 <HAL_GPIO_Init>

}
 8000f58:	bf00      	nop
 8000f5a:	3730      	adds	r7, #48	; 0x30
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	40020c00 	.word	0x40020c00
 8000f70:	40020000 	.word	0x40020000

08000f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f78:	b672      	cpsid	i
}
 8000f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <Error_Handler+0x8>
	...

08000f80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <HAL_MspInit+0x4c>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	4a0f      	ldr	r2, [pc, #60]	; (8000fcc <HAL_MspInit+0x4c>)
 8000f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f94:	6453      	str	r3, [r2, #68]	; 0x44
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <HAL_MspInit+0x4c>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	603b      	str	r3, [r7, #0]
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <HAL_MspInit+0x4c>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	4a08      	ldr	r2, [pc, #32]	; (8000fcc <HAL_MspInit+0x4c>)
 8000fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_MspInit+0x4c>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fbe:	2007      	movs	r0, #7
 8000fc0:	f001 f988 	bl	80022d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40023800 	.word	0x40023800

08000fd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a19      	ldr	r2, [pc, #100]	; (8001054 <HAL_I2C_MspInit+0x84>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d12c      	bne.n	800104c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_I2C_MspInit+0x88>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a17      	ldr	r2, [pc, #92]	; (8001058 <HAL_I2C_MspInit+0x88>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_I2C_MspInit+0x88>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800100e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001014:	2312      	movs	r3, #18
 8001016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001018:	2301      	movs	r3, #1
 800101a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001020:	2304      	movs	r3, #4
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	480c      	ldr	r0, [pc, #48]	; (800105c <HAL_I2C_MspInit+0x8c>)
 800102c:	f001 f994 	bl	8002358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <HAL_I2C_MspInit+0x88>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_I2C_MspInit+0x88>)
 800103a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800103e:	6413      	str	r3, [r2, #64]	; 0x40
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <HAL_I2C_MspInit+0x88>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	; 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40005400 	.word	0x40005400
 8001058:	40023800 	.word	0x40023800
 800105c:	40020400 	.word	0x40020400

08001060 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <HAL_I2C_MspDeInit+0x38>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d10e      	bne.n	8001090 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <HAL_I2C_MspDeInit+0x3c>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	4a09      	ldr	r2, [pc, #36]	; (800109c <HAL_I2C_MspDeInit+0x3c>)
 8001078:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800107c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 800107e:	2140      	movs	r1, #64	; 0x40
 8001080:	4807      	ldr	r0, [pc, #28]	; (80010a0 <HAL_I2C_MspDeInit+0x40>)
 8001082:	f001 faed 	bl	8002660 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 8001086:	f44f 7100 	mov.w	r1, #512	; 0x200
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <HAL_I2C_MspDeInit+0x40>)
 800108c:	f001 fae8 	bl	8002660 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40005400 	.word	0x40005400
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020400 	.word	0x40020400

080010a4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08e      	sub	sp, #56	; 0x38
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a59      	ldr	r2, [pc, #356]	; (8001228 <HAL_I2S_MspInit+0x184>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d15b      	bne.n	800117e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
 80010ca:	4b58      	ldr	r3, [pc, #352]	; (800122c <HAL_I2S_MspInit+0x188>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	4a57      	ldr	r2, [pc, #348]	; (800122c <HAL_I2S_MspInit+0x188>)
 80010d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d4:	6413      	str	r3, [r2, #64]	; 0x40
 80010d6:	4b55      	ldr	r3, [pc, #340]	; (800122c <HAL_I2S_MspInit+0x188>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010de:	623b      	str	r3, [r7, #32]
 80010e0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
 80010e6:	4b51      	ldr	r3, [pc, #324]	; (800122c <HAL_I2S_MspInit+0x188>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a50      	ldr	r2, [pc, #320]	; (800122c <HAL_I2S_MspInit+0x188>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b4e      	ldr	r3, [pc, #312]	; (800122c <HAL_I2S_MspInit+0x188>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	61fb      	str	r3, [r7, #28]
 80010fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
 8001102:	4b4a      	ldr	r3, [pc, #296]	; (800122c <HAL_I2S_MspInit+0x188>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a49      	ldr	r2, [pc, #292]	; (800122c <HAL_I2S_MspInit+0x188>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b47      	ldr	r3, [pc, #284]	; (800122c <HAL_I2S_MspInit+0x188>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	61bb      	str	r3, [r7, #24]
 8001118:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800111a:	2304      	movs	r3, #4
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800112a:	2306      	movs	r3, #6
 800112c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001132:	4619      	mov	r1, r3
 8001134:	483e      	ldr	r0, [pc, #248]	; (8001230 <HAL_I2S_MspInit+0x18c>)
 8001136:	f001 f90f 	bl	8002358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800113a:	2308      	movs	r3, #8
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800114a:	2305      	movs	r3, #5
 800114c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001152:	4619      	mov	r1, r3
 8001154:	4836      	ldr	r0, [pc, #216]	; (8001230 <HAL_I2S_MspInit+0x18c>)
 8001156:	f001 f8ff 	bl	8002358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800115a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800116c:	2305      	movs	r3, #5
 800116e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001174:	4619      	mov	r1, r3
 8001176:	482f      	ldr	r0, [pc, #188]	; (8001234 <HAL_I2S_MspInit+0x190>)
 8001178:	f001 f8ee 	bl	8002358 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800117c:	e04f      	b.n	800121e <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a2d      	ldr	r2, [pc, #180]	; (8001238 <HAL_I2S_MspInit+0x194>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d14a      	bne.n	800121e <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	4b27      	ldr	r3, [pc, #156]	; (800122c <HAL_I2S_MspInit+0x188>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	4a26      	ldr	r2, [pc, #152]	; (800122c <HAL_I2S_MspInit+0x188>)
 8001192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001196:	6413      	str	r3, [r2, #64]	; 0x40
 8001198:	4b24      	ldr	r3, [pc, #144]	; (800122c <HAL_I2S_MspInit+0x188>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	4b20      	ldr	r3, [pc, #128]	; (800122c <HAL_I2S_MspInit+0x188>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	4a1f      	ldr	r2, [pc, #124]	; (800122c <HAL_I2S_MspInit+0x188>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6313      	str	r3, [r2, #48]	; 0x30
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <HAL_I2S_MspInit+0x188>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	4b19      	ldr	r3, [pc, #100]	; (800122c <HAL_I2S_MspInit+0x188>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	4a18      	ldr	r2, [pc, #96]	; (800122c <HAL_I2S_MspInit+0x188>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	6313      	str	r3, [r2, #48]	; 0x30
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <HAL_I2S_MspInit+0x188>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80011dc:	2310      	movs	r3, #16
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011ec:	2306      	movs	r3, #6
 80011ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f4:	4619      	mov	r1, r3
 80011f6:	4811      	ldr	r0, [pc, #68]	; (800123c <HAL_I2S_MspInit+0x198>)
 80011f8:	f001 f8ae 	bl	8002358 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80011fc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800120e:	2306      	movs	r3, #6
 8001210:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	; (8001230 <HAL_I2S_MspInit+0x18c>)
 800121a:	f001 f89d 	bl	8002358 <HAL_GPIO_Init>
}
 800121e:	bf00      	nop
 8001220:	3738      	adds	r7, #56	; 0x38
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40003800 	.word	0x40003800
 800122c:	40023800 	.word	0x40023800
 8001230:	40020800 	.word	0x40020800
 8001234:	40020400 	.word	0x40020400
 8001238:	40003c00 	.word	0x40003c00
 800123c:	40020000 	.word	0x40020000

08001240 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <HAL_SPI_MspInit+0x84>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d12b      	bne.n	80012ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <HAL_SPI_MspInit+0x88>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	4a17      	ldr	r2, [pc, #92]	; (80012c8 <HAL_SPI_MspInit+0x88>)
 800126c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001270:	6453      	str	r3, [r2, #68]	; 0x44
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_SPI_MspInit+0x88>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_SPI_MspInit+0x88>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a10      	ldr	r2, [pc, #64]	; (80012c8 <HAL_SPI_MspInit+0x88>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <HAL_SPI_MspInit+0x88>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800129a:	23e0      	movs	r3, #224	; 0xe0
 800129c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012aa:	2305      	movs	r3, #5
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <HAL_SPI_MspInit+0x8c>)
 80012b6:	f001 f84f 	bl	8002358 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	; 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40013000 	.word	0x40013000
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020000 	.word	0x40020000

080012d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <NMI_Handler+0x4>

080012d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <HardFault_Handler+0x4>

080012dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <MemManage_Handler+0x4>

080012e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <BusFault_Handler+0x4>

080012e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <UsageFault_Handler+0x4>

080012ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800131c:	f000 fec6 	bl	80020ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}

08001324 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <OTG_FS_IRQHandler+0x10>)
 800132a:	f001 fd01 	bl	8002d30 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000690 	.word	0x20000690

08001338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <_sbrk+0x5c>)
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <_sbrk+0x60>)
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d102      	bne.n	800135a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <_sbrk+0x64>)
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <_sbrk+0x68>)
 8001358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	429a      	cmp	r2, r3
 8001366:	d207      	bcs.n	8001378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001368:	f006 fed6 	bl	8008118 <__errno>
 800136c:	4603      	mov	r3, r0
 800136e:	220c      	movs	r2, #12
 8001370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
 8001376:	e009      	b.n	800138c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <_sbrk+0x64>)
 8001388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20020000 	.word	0x20020000
 8001398:	00000400 	.word	0x00000400
 800139c:	20000254 	.word	0x20000254
 80013a0:	200009a8 	.word	0x200009a8

080013a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <SystemInit+0x20>)
 80013aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <SystemInit+0x20>)
 80013b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001400 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013cc:	480d      	ldr	r0, [pc, #52]	; (8001404 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ce:	490e      	ldr	r1, [pc, #56]	; (8001408 <LoopFillZerobss+0x1a>)

  ldr r2, =_sidata
 80013d0:	4a0e      	ldr	r2, [pc, #56]	; (800140c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d4:	e002      	b.n	80013dc <LoopCopyDataInit>

080013d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013da:	3304      	adds	r3, #4

080013dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e0:	d3f9      	bcc.n	80013d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e2:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013e4:	4c0b      	ldr	r4, [pc, #44]	; (8001414 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e8:	e001      	b.n	80013ee <LoopFillZerobss>

080013ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ec:	3204      	adds	r2, #4

080013ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f0:	d3fb      	bcc.n	80013ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013f2:	f7ff ffd7 	bl	80013a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013f6:	f006 fe95 	bl	8008124 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013fa:	f7ff fb45 	bl	8000a88 <main>
  bx  lr    
 80013fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001400:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001408:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 800140c:	08008450 	.word	0x08008450
  ldr r2, =_sbss
 8001410:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001414:	200009a4 	.word	0x200009a4

08001418 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001418:	e7fe      	b.n	8001418 <ADC_IRQHandler>

0800141a <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 800141a:	b580      	push	{r7, lr}
 800141c:	b084      	sub	sp, #16
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001424:	2300      	movs	r3, #0
 8001426:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8001428:	f000 fc82 	bl	8001d30 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	461a      	mov	r2, r3
 8001434:	2120      	movs	r1, #32
 8001436:	2032      	movs	r0, #50	; 0x32
 8001438:	f000 fcd2 	bl	8001de0 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 800143c:	2300      	movs	r3, #0
 800143e:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	461a      	mov	r2, r3
 8001444:	2123      	movs	r1, #35	; 0x23
 8001446:	2032      	movs	r0, #50	; 0x32
 8001448:	f000 fcca 	bl	8001de0 <COMPASSACCELERO_IO_Write>
}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001468:	2300      	movs	r3, #0
 800146a:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800146c:	f000 fc60 	bl	8001d30 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 8001470:	210f      	movs	r1, #15
 8001472:	2032      	movs	r0, #50	; 0x32
 8001474:	f000 fcc7 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 8001478:	4603      	mov	r3, r0
 800147a:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 800147c:	79fb      	ldrb	r3, [r7, #7]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800148c:	2124      	movs	r1, #36	; 0x24
 800148e:	2032      	movs	r0, #50	; 0x32
 8001490:	f000 fcb9 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800149e:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	461a      	mov	r2, r3
 80014a4:	2124      	movs	r1, #36	; 0x24
 80014a6:	2032      	movs	r0, #50	; 0x32
 80014a8:	f000 fc9a 	bl	8001de0 <COMPASSACCELERO_IO_Write>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80014be:	2121      	movs	r1, #33	; 0x21
 80014c0:	2032      	movs	r0, #50	; 0x32
 80014c2:	f000 fca0 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 80014c6:	4603      	mov	r3, r0
 80014c8:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	f003 030c 	and.w	r3, r3, #12
 80014d0:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	461a      	mov	r2, r3
 80014de:	2121      	movs	r1, #33	; 0x21
 80014e0:	2032      	movs	r0, #50	; 0x32
 80014e2:	f000 fc7d 	bl	8001de0 <COMPASSACCELERO_IO_Write>
}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b084      	sub	sp, #16
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80014f8:	2121      	movs	r1, #33	; 0x21
 80014fa:	2032      	movs	r0, #50	; 0x32
 80014fc:	f000 fc83 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 8001500:	4603      	mov	r3, r0
 8001502:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	f023 0308 	bic.w	r3, r3, #8
 800150a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800150c:	7bfa      	ldrb	r2, [r7, #15]
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	4313      	orrs	r3, r2
 8001512:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	461a      	mov	r2, r3
 8001518:	2121      	movs	r1, #33	; 0x21
 800151a:	2032      	movs	r0, #50	; 0x32
 800151c:	f000 fc60 	bl	8001de0 <COMPASSACCELERO_IO_Write>
}
 8001520:	bf00      	nop
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8001530:	2300      	movs	r3, #0
 8001532:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8001538:	2301      	movs	r3, #1
 800153a:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 800153c:	2123      	movs	r1, #35	; 0x23
 800153e:	2032      	movs	r0, #50	; 0x32
 8001540:	f000 fc61 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 8001544:	4603      	mov	r3, r0
 8001546:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8001548:	2124      	movs	r1, #36	; 0x24
 800154a:	2032      	movs	r0, #50	; 0x32
 800154c:	f000 fc5b 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 8001550:	4603      	mov	r3, r0
 8001552:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8001554:	2128      	movs	r1, #40	; 0x28
 8001556:	2032      	movs	r0, #50	; 0x32
 8001558:	f000 fc55 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 800155c:	4603      	mov	r3, r0
 800155e:	b25b      	sxtb	r3, r3
 8001560:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8001562:	2129      	movs	r1, #41	; 0x29
 8001564:	2032      	movs	r0, #50	; 0x32
 8001566:	f000 fc4e 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 800156a:	4603      	mov	r3, r0
 800156c:	b25b      	sxtb	r3, r3
 800156e:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8001570:	212a      	movs	r1, #42	; 0x2a
 8001572:	2032      	movs	r0, #50	; 0x32
 8001574:	f000 fc47 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 8001578:	4603      	mov	r3, r0
 800157a:	b25b      	sxtb	r3, r3
 800157c:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 800157e:	212b      	movs	r1, #43	; 0x2b
 8001580:	2032      	movs	r0, #50	; 0x32
 8001582:	f000 fc40 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 8001586:	4603      	mov	r3, r0
 8001588:	b25b      	sxtb	r3, r3
 800158a:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 800158c:	212c      	movs	r1, #44	; 0x2c
 800158e:	2032      	movs	r0, #50	; 0x32
 8001590:	f000 fc39 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 8001594:	4603      	mov	r3, r0
 8001596:	b25b      	sxtb	r3, r3
 8001598:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 800159a:	212d      	movs	r1, #45	; 0x2d
 800159c:	2032      	movs	r0, #50	; 0x32
 800159e:	f000 fc32 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 80015a8:	7d3b      	ldrb	r3, [r7, #20]
 80015aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d123      	bne.n	80015fa <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	77fb      	strb	r3, [r7, #31]
 80015b6:	e01c      	b.n	80015f2 <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 80015b8:	7ffb      	ldrb	r3, [r7, #31]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	3301      	adds	r3, #1
 80015be:	3320      	adds	r3, #32
 80015c0:	443b      	add	r3, r7
 80015c2:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	7ffb      	ldrb	r3, [r7, #31]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	3320      	adds	r3, #32
 80015d2:	443b      	add	r3, r7
 80015d4:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	4413      	add	r3, r2
 80015dc:	b29a      	uxth	r2, r3
 80015de:	7ffb      	ldrb	r3, [r7, #31]
 80015e0:	b212      	sxth	r2, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	3320      	adds	r3, #32
 80015e6:	443b      	add	r3, r7
 80015e8:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80015ec:	7ffb      	ldrb	r3, [r7, #31]
 80015ee:	3301      	adds	r3, #1
 80015f0:	77fb      	strb	r3, [r7, #31]
 80015f2:	7ffb      	ldrb	r3, [r7, #31]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d9df      	bls.n	80015b8 <LSM303AGR_AccReadXYZ+0x90>
 80015f8:	e022      	b.n	8001640 <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	77fb      	strb	r3, [r7, #31]
 80015fe:	e01c      	b.n	800163a <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001600:	7ffb      	ldrb	r3, [r7, #31]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	3320      	adds	r3, #32
 8001606:	443b      	add	r3, r7
 8001608:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800160c:	b29b      	uxth	r3, r3
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	b29a      	uxth	r2, r3
 8001612:	7ffb      	ldrb	r3, [r7, #31]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	3301      	adds	r3, #1
 8001618:	3320      	adds	r3, #32
 800161a:	443b      	add	r3, r7
 800161c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001620:	b29b      	uxth	r3, r3
 8001622:	4413      	add	r3, r2
 8001624:	b29a      	uxth	r2, r3
 8001626:	7ffb      	ldrb	r3, [r7, #31]
 8001628:	b212      	sxth	r2, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	3320      	adds	r3, #32
 800162e:	443b      	add	r3, r7
 8001630:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001634:	7ffb      	ldrb	r3, [r7, #31]
 8001636:	3301      	adds	r3, #1
 8001638:	77fb      	strb	r3, [r7, #31]
 800163a:	7ffb      	ldrb	r3, [r7, #31]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d9df      	bls.n	8001600 <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8001640:	7d3b      	ldrb	r3, [r7, #20]
 8001642:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001646:	2b30      	cmp	r3, #48	; 0x30
 8001648:	d013      	beq.n	8001672 <LSM303AGR_AccReadXYZ+0x14a>
 800164a:	2b30      	cmp	r3, #48	; 0x30
 800164c:	dc14      	bgt.n	8001678 <LSM303AGR_AccReadXYZ+0x150>
 800164e:	2b20      	cmp	r3, #32
 8001650:	d00c      	beq.n	800166c <LSM303AGR_AccReadXYZ+0x144>
 8001652:	2b20      	cmp	r3, #32
 8001654:	dc10      	bgt.n	8001678 <LSM303AGR_AccReadXYZ+0x150>
 8001656:	2b00      	cmp	r3, #0
 8001658:	d002      	beq.n	8001660 <LSM303AGR_AccReadXYZ+0x138>
 800165a:	2b10      	cmp	r3, #16
 800165c:	d003      	beq.n	8001666 <LSM303AGR_AccReadXYZ+0x13e>
 800165e:	e00b      	b.n	8001678 <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8001660:	2301      	movs	r3, #1
 8001662:	77bb      	strb	r3, [r7, #30]
    break;
 8001664:	e008      	b.n	8001678 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 8001666:	2302      	movs	r3, #2
 8001668:	77bb      	strb	r3, [r7, #30]
    break;
 800166a:	e005      	b.n	8001678 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 800166c:	2304      	movs	r3, #4
 800166e:	77bb      	strb	r3, [r7, #30]
    break;
 8001670:	e002      	b.n	8001678 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 8001672:	230c      	movs	r3, #12
 8001674:	77bb      	strb	r3, [r7, #30]
    break;
 8001676:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001678:	2300      	movs	r3, #0
 800167a:	77fb      	strb	r3, [r7, #31]
 800167c:	e014      	b.n	80016a8 <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800167e:	7ffb      	ldrb	r3, [r7, #31]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	3320      	adds	r3, #32
 8001684:	443b      	add	r3, r7
 8001686:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 800168a:	b29a      	uxth	r2, r3
 800168c:	7fbb      	ldrb	r3, [r7, #30]
 800168e:	b29b      	uxth	r3, r3
 8001690:	fb12 f303 	smulbb	r3, r2, r3
 8001694:	b299      	uxth	r1, r3
 8001696:	7ffb      	ldrb	r3, [r7, #31]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	b20a      	sxth	r2, r1
 80016a0:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80016a2:	7ffb      	ldrb	r3, [r7, #31]
 80016a4:	3301      	adds	r3, #1
 80016a6:	77fb      	strb	r3, [r7, #31]
 80016a8:	7ffb      	ldrb	r3, [r7, #31]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d9e7      	bls.n	800167e <LSM303AGR_AccReadXYZ+0x156>
  }
}
 80016ae:	bf00      	nop
 80016b0:	bf00      	nop
 80016b2:	3720      	adds	r7, #32
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 80016c2:	2300      	movs	r3, #0
 80016c4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80016c6:	2121      	movs	r1, #33	; 0x21
 80016c8:	2032      	movs	r0, #50	; 0x32
 80016ca:	f000 fb9c 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 80016ce:	4603      	mov	r3, r0
 80016d0:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	f023 0304 	bic.w	r3, r3, #4
 80016d8:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 80016da:	7bfa      	ldrb	r2, [r7, #15]
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	4313      	orrs	r3, r2
 80016e0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	461a      	mov	r2, r3
 80016e6:	2121      	movs	r1, #33	; 0x21
 80016e8:	2032      	movs	r0, #50	; 0x32
 80016ea:	f000 fb79 	bl	8001de0 <COMPASSACCELERO_IO_Write>
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001700:	2300      	movs	r3, #0
 8001702:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 8001704:	2122      	movs	r1, #34	; 0x22
 8001706:	2032      	movs	r0, #50	; 0x32
 8001708:	f000 fb7d 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 800170c:	4603      	mov	r3, r0
 800170e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 8001710:	7bfa      	ldrb	r2, [r7, #15]
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	4313      	orrs	r3, r2
 8001716:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	461a      	mov	r2, r3
 800171c:	2122      	movs	r1, #34	; 0x22
 800171e:	2032      	movs	r0, #50	; 0x32
 8001720:	f000 fb5e 	bl	8001de0 <COMPASSACCELERO_IO_Write>
}
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001736:	2300      	movs	r3, #0
 8001738:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 800173a:	2138      	movs	r1, #56	; 0x38
 800173c:	2032      	movs	r0, #50	; 0x32
 800173e:	f000 fb62 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 8001742:	4603      	mov	r3, r0
 8001744:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001746:	7bfa      	ldrb	r2, [r7, #15]
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	4313      	orrs	r3, r2
 800174c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	461a      	mov	r2, r3
 8001752:	2138      	movs	r1, #56	; 0x38
 8001754:	2032      	movs	r0, #50	; 0x32
 8001756:	f000 fb43 	bl	8001de0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 800175a:	230a      	movs	r3, #10
 800175c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	461a      	mov	r2, r3
 8001762:	213a      	movs	r1, #58	; 0x3a
 8001764:	2032      	movs	r0, #50	; 0x32
 8001766:	f000 fb3b 	bl	8001de0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 800176a:	2305      	movs	r3, #5
 800176c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	461a      	mov	r2, r3
 8001772:	213b      	movs	r1, #59	; 0x3b
 8001774:	2032      	movs	r0, #50	; 0x32
 8001776:	f000 fb33 	bl	8001de0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	461a      	mov	r2, r3
 800177e:	213c      	movs	r1, #60	; 0x3c
 8001780:	2032      	movs	r0, #50	; 0x32
 8001782:	f000 fb2d 	bl	8001de0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001786:	2332      	movs	r3, #50	; 0x32
 8001788:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	461a      	mov	r2, r3
 800178e:	213d      	movs	r1, #61	; 0x3d
 8001790:	2032      	movs	r0, #50	; 0x32
 8001792:	f000 fb25 	bl	8001de0 <COMPASSACCELERO_IO_Write>
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 800179e:	b580      	push	{r7, lr}
 80017a0:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 80017a2:	f000 faed 	bl	8001d80 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 80017a6:	2080      	movs	r0, #128	; 0x80
 80017a8:	f7ff ffa5 	bl	80016f6 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 80017ac:	2004      	movs	r0, #4
 80017ae:	f7ff ff83 	bl	80016b8 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 80017b2:	2010      	movs	r0, #16
 80017b4:	f7ff ffba 	bl	800172c <LSM303AGR_AccClickITEnable>
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}

080017bc <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80017c6:	2300      	movs	r3, #0
 80017c8:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 80017ca:	f000 fab1 	bl	8001d30 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	461a      	mov	r2, r3
 80017d6:	2120      	movs	r1, #32
 80017d8:	2032      	movs	r0, #50	; 0x32
 80017da:	f000 fb01 	bl	8001de0 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	461a      	mov	r2, r3
 80017e6:	2123      	movs	r1, #35	; 0x23
 80017e8:	2032      	movs	r0, #50	; 0x32
 80017ea:	f000 faf9 	bl	8001de0 <COMPASSACCELERO_IO_Write>
}
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800180a:	2300      	movs	r3, #0
 800180c:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800180e:	f000 fa8f 	bl	8001d30 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8001812:	210f      	movs	r1, #15
 8001814:	2032      	movs	r0, #50	; 0x32
 8001816:	f000 faf6 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 800181e:	79fb      	ldrb	r3, [r7, #7]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800182e:	2124      	movs	r1, #36	; 0x24
 8001830:	2032      	movs	r0, #50	; 0x32
 8001832:	f000 fae8 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001840:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	461a      	mov	r2, r3
 8001846:	2124      	movs	r1, #36	; 0x24
 8001848:	2032      	movs	r0, #50	; 0x32
 800184a:	f000 fac9 	bl	8001de0 <COMPASSACCELERO_IO_Write>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001860:	2121      	movs	r1, #33	; 0x21
 8001862:	2032      	movs	r0, #50	; 0x32
 8001864:	f000 facf 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 8001868:	4603      	mov	r3, r0
 800186a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	4313      	orrs	r3, r2
 800187a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	461a      	mov	r2, r3
 8001880:	2121      	movs	r1, #33	; 0x21
 8001882:	2032      	movs	r0, #50	; 0x32
 8001884:	f000 faac 	bl	8001de0 <COMPASSACCELERO_IO_Write>
}
 8001888:	bf00      	nop
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800189a:	2121      	movs	r1, #33	; 0x21
 800189c:	2032      	movs	r0, #50	; 0x32
 800189e:	f000 fab2 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 80018a2:	4603      	mov	r3, r0
 80018a4:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	f023 0308 	bic.w	r3, r3, #8
 80018ac:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80018ae:	7bfa      	ldrb	r2, [r7, #15]
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	461a      	mov	r2, r3
 80018ba:	2121      	movs	r1, #33	; 0x21
 80018bc:	2032      	movs	r0, #50	; 0x32
 80018be:	f000 fa8f 	bl	8001de0 <COMPASSACCELERO_IO_Write>
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b088      	sub	sp, #32
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 80018d2:	2300      	movs	r3, #0
 80018d4:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 80018da:	2301      	movs	r3, #1
 80018dc:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 80018de:	2123      	movs	r1, #35	; 0x23
 80018e0:	2032      	movs	r0, #50	; 0x32
 80018e2:	f000 fa90 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 80018e6:	4603      	mov	r3, r0
 80018e8:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80018ea:	2124      	movs	r1, #36	; 0x24
 80018ec:	2032      	movs	r0, #50	; 0x32
 80018ee:	f000 fa8a 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 80018f2:	4603      	mov	r3, r0
 80018f4:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 80018f6:	2128      	movs	r1, #40	; 0x28
 80018f8:	2032      	movs	r0, #50	; 0x32
 80018fa:	f000 fa84 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 80018fe:	4603      	mov	r3, r0
 8001900:	b25b      	sxtb	r3, r3
 8001902:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8001904:	2129      	movs	r1, #41	; 0x29
 8001906:	2032      	movs	r0, #50	; 0x32
 8001908:	f000 fa7d 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 800190c:	4603      	mov	r3, r0
 800190e:	b25b      	sxtb	r3, r3
 8001910:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8001912:	212a      	movs	r1, #42	; 0x2a
 8001914:	2032      	movs	r0, #50	; 0x32
 8001916:	f000 fa76 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 800191a:	4603      	mov	r3, r0
 800191c:	b25b      	sxtb	r3, r3
 800191e:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8001920:	212b      	movs	r1, #43	; 0x2b
 8001922:	2032      	movs	r0, #50	; 0x32
 8001924:	f000 fa6f 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 8001928:	4603      	mov	r3, r0
 800192a:	b25b      	sxtb	r3, r3
 800192c:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800192e:	212c      	movs	r1, #44	; 0x2c
 8001930:	2032      	movs	r0, #50	; 0x32
 8001932:	f000 fa68 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 8001936:	4603      	mov	r3, r0
 8001938:	b25b      	sxtb	r3, r3
 800193a:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800193c:	212d      	movs	r1, #45	; 0x2d
 800193e:	2032      	movs	r0, #50	; 0x32
 8001940:	f000 fa61 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 8001944:	4603      	mov	r3, r0
 8001946:	b25b      	sxtb	r3, r3
 8001948:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 800194a:	7d3b      	ldrb	r3, [r7, #20]
 800194c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001950:	2b00      	cmp	r3, #0
 8001952:	d123      	bne.n	800199c <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8001954:	2300      	movs	r3, #0
 8001956:	77fb      	strb	r3, [r7, #31]
 8001958:	e01c      	b.n	8001994 <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800195a:	7ffb      	ldrb	r3, [r7, #31]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	3301      	adds	r3, #1
 8001960:	3320      	adds	r3, #32
 8001962:	443b      	add	r3, r7
 8001964:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001968:	b29b      	uxth	r3, r3
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	b29a      	uxth	r2, r3
 800196e:	7ffb      	ldrb	r3, [r7, #31]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	3320      	adds	r3, #32
 8001974:	443b      	add	r3, r7
 8001976:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800197a:	b29b      	uxth	r3, r3
 800197c:	4413      	add	r3, r2
 800197e:	b29a      	uxth	r2, r3
 8001980:	7ffb      	ldrb	r3, [r7, #31]
 8001982:	b212      	sxth	r2, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	3320      	adds	r3, #32
 8001988:	443b      	add	r3, r7
 800198a:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 800198e:	7ffb      	ldrb	r3, [r7, #31]
 8001990:	3301      	adds	r3, #1
 8001992:	77fb      	strb	r3, [r7, #31]
 8001994:	7ffb      	ldrb	r3, [r7, #31]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d9df      	bls.n	800195a <LSM303DLHC_AccReadXYZ+0x90>
 800199a:	e022      	b.n	80019e2 <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 800199c:	2300      	movs	r3, #0
 800199e:	77fb      	strb	r3, [r7, #31]
 80019a0:	e01c      	b.n	80019dc <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 80019a2:	7ffb      	ldrb	r3, [r7, #31]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	3320      	adds	r3, #32
 80019a8:	443b      	add	r3, r7
 80019aa:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	7ffb      	ldrb	r3, [r7, #31]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	3301      	adds	r3, #1
 80019ba:	3320      	adds	r3, #32
 80019bc:	443b      	add	r3, r7
 80019be:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	4413      	add	r3, r2
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	7ffb      	ldrb	r3, [r7, #31]
 80019ca:	b212      	sxth	r2, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	3320      	adds	r3, #32
 80019d0:	443b      	add	r3, r7
 80019d2:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80019d6:	7ffb      	ldrb	r3, [r7, #31]
 80019d8:	3301      	adds	r3, #1
 80019da:	77fb      	strb	r3, [r7, #31]
 80019dc:	7ffb      	ldrb	r3, [r7, #31]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d9df      	bls.n	80019a2 <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 80019e2:	7d3b      	ldrb	r3, [r7, #20]
 80019e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80019e8:	2b30      	cmp	r3, #48	; 0x30
 80019ea:	d013      	beq.n	8001a14 <LSM303DLHC_AccReadXYZ+0x14a>
 80019ec:	2b30      	cmp	r3, #48	; 0x30
 80019ee:	dc14      	bgt.n	8001a1a <LSM303DLHC_AccReadXYZ+0x150>
 80019f0:	2b20      	cmp	r3, #32
 80019f2:	d00c      	beq.n	8001a0e <LSM303DLHC_AccReadXYZ+0x144>
 80019f4:	2b20      	cmp	r3, #32
 80019f6:	dc10      	bgt.n	8001a1a <LSM303DLHC_AccReadXYZ+0x150>
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d002      	beq.n	8001a02 <LSM303DLHC_AccReadXYZ+0x138>
 80019fc:	2b10      	cmp	r3, #16
 80019fe:	d003      	beq.n	8001a08 <LSM303DLHC_AccReadXYZ+0x13e>
 8001a00:	e00b      	b.n	8001a1a <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001a02:	2301      	movs	r3, #1
 8001a04:	77bb      	strb	r3, [r7, #30]
    break;
 8001a06:	e008      	b.n	8001a1a <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	77bb      	strb	r3, [r7, #30]
    break;
 8001a0c:	e005      	b.n	8001a1a <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8001a0e:	2304      	movs	r3, #4
 8001a10:	77bb      	strb	r3, [r7, #30]
    break;
 8001a12:	e002      	b.n	8001a1a <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8001a14:	230c      	movs	r3, #12
 8001a16:	77bb      	strb	r3, [r7, #30]
    break;
 8001a18:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	77fb      	strb	r3, [r7, #31]
 8001a1e:	e014      	b.n	8001a4a <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001a20:	7ffb      	ldrb	r3, [r7, #31]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	3320      	adds	r3, #32
 8001a26:	443b      	add	r3, r7
 8001a28:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	7fbb      	ldrb	r3, [r7, #30]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	fb12 f303 	smulbb	r3, r2, r3
 8001a36:	b299      	uxth	r1, r3
 8001a38:	7ffb      	ldrb	r3, [r7, #31]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	4413      	add	r3, r2
 8001a40:	b20a      	sxth	r2, r1
 8001a42:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001a44:	7ffb      	ldrb	r3, [r7, #31]
 8001a46:	3301      	adds	r3, #1
 8001a48:	77fb      	strb	r3, [r7, #31]
 8001a4a:	7ffb      	ldrb	r3, [r7, #31]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d9e7      	bls.n	8001a20 <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	3720      	adds	r7, #32
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	4603      	mov	r3, r0
 8001a62:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8001a64:	2300      	movs	r3, #0
 8001a66:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001a68:	2121      	movs	r1, #33	; 0x21
 8001a6a:	2032      	movs	r0, #50	; 0x32
 8001a6c:	f000 f9cb 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 8001a70:	4603      	mov	r3, r0
 8001a72:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	f023 0304 	bic.w	r3, r3, #4
 8001a7a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001a7c:	7bfa      	ldrb	r2, [r7, #15]
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	461a      	mov	r2, r3
 8001a88:	2121      	movs	r1, #33	; 0x21
 8001a8a:	2032      	movs	r0, #50	; 0x32
 8001a8c:	f000 f9a8 	bl	8001de0 <COMPASSACCELERO_IO_Write>
}
 8001a90:	bf00      	nop
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8001aa6:	2122      	movs	r1, #34	; 0x22
 8001aa8:	2032      	movs	r0, #50	; 0x32
 8001aaa:	f000 f9ac 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8001ab2:	7bfa      	ldrb	r2, [r7, #15]
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	461a      	mov	r2, r3
 8001abe:	2122      	movs	r1, #34	; 0x22
 8001ac0:	2032      	movs	r0, #50	; 0x32
 8001ac2:	f000 f98d 	bl	8001de0 <COMPASSACCELERO_IO_Write>
}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b084      	sub	sp, #16
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8001adc:	2138      	movs	r1, #56	; 0x38
 8001ade:	2032      	movs	r0, #50	; 0x32
 8001ae0:	f000 f991 	bl	8001e06 <COMPASSACCELERO_IO_Read>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001ae8:	7bfa      	ldrb	r2, [r7, #15]
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	461a      	mov	r2, r3
 8001af4:	2138      	movs	r1, #56	; 0x38
 8001af6:	2032      	movs	r0, #50	; 0x32
 8001af8:	f000 f972 	bl	8001de0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8001afc:	230a      	movs	r3, #10
 8001afe:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	461a      	mov	r2, r3
 8001b04:	213a      	movs	r1, #58	; 0x3a
 8001b06:	2032      	movs	r0, #50	; 0x32
 8001b08:	f000 f96a 	bl	8001de0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8001b0c:	2305      	movs	r3, #5
 8001b0e:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	461a      	mov	r2, r3
 8001b14:	213b      	movs	r1, #59	; 0x3b
 8001b16:	2032      	movs	r0, #50	; 0x32
 8001b18:	f000 f962 	bl	8001de0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	213c      	movs	r1, #60	; 0x3c
 8001b22:	2032      	movs	r0, #50	; 0x32
 8001b24:	f000 f95c 	bl	8001de0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001b28:	2332      	movs	r3, #50	; 0x32
 8001b2a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	213d      	movs	r1, #61	; 0x3d
 8001b32:	2032      	movs	r0, #50	; 0x32
 8001b34:	f000 f954 	bl	8001de0 <COMPASSACCELERO_IO_Write>
}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8001b44:	f000 f91c 	bl	8001d80 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8001b48:	2080      	movs	r0, #128	; 0x80
 8001b4a:	f7ff ffa5 	bl	8001a98 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8001b4e:	2004      	movs	r0, #4
 8001b50:	f7ff ff83 	bl	8001a5a <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8001b54:	2010      	movs	r0, #16
 8001b56:	f7ff ffba 	bl	8001ace <LSM303DLHC_AccClickITEnable>
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001b64:	4814      	ldr	r0, [pc, #80]	; (8001bb8 <I2Cx_Init+0x58>)
 8001b66:	f002 fefb 	bl	8004960 <HAL_I2C_GetState>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d121      	bne.n	8001bb4 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <I2Cx_Init+0x58>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <I2Cx_Init+0x5c>)
 8001b74:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <I2Cx_Init+0x58>)
 8001b78:	2243      	movs	r2, #67	; 0x43
 8001b7a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <I2Cx_Init+0x58>)
 8001b7e:	4a10      	ldr	r2, [pc, #64]	; (8001bc0 <I2Cx_Init+0x60>)
 8001b80:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b82:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <I2Cx_Init+0x58>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <I2Cx_Init+0x58>)
 8001b8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b8e:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <I2Cx_Init+0x58>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <I2Cx_Init+0x58>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <I2Cx_Init+0x58>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 8001ba2:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <I2Cx_Init+0x58>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8001ba8:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <I2Cx_Init+0x58>)
 8001baa:	f000 f86b 	bl	8001c84 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001bae:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <I2Cx_Init+0x58>)
 8001bb0:	f002 fa42 	bl	8004038 <HAL_I2C_Init>
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000258 	.word	0x20000258
 8001bbc:	40005400 	.word	0x40005400
 8001bc0:	000186a0 	.word	0x000186a0

08001bc4 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af04      	add	r7, sp, #16
 8001bca:	4603      	mov	r3, r0
 8001bcc:	80fb      	strh	r3, [r7, #6]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	717b      	strb	r3, [r7, #5]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8001bda:	797b      	ldrb	r3, [r7, #5]
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <I2Cx_WriteData+0x48>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	88f9      	ldrh	r1, [r7, #6]
 8001be4:	9302      	str	r3, [sp, #8]
 8001be6:	2301      	movs	r3, #1
 8001be8:	9301      	str	r3, [sp, #4]
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	2301      	movs	r3, #1
 8001bf0:	4807      	ldr	r0, [pc, #28]	; (8001c10 <I2Cx_WriteData+0x4c>)
 8001bf2:	f002 fb95 	bl	8004320 <HAL_I2C_Mem_Write>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001c00:	f000 f834 	bl	8001c6c <I2Cx_Error>
  }
}
 8001c04:	bf00      	nop
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	2000006c 	.word	0x2000006c
 8001c10:	20000258 	.word	0x20000258

08001c14 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af04      	add	r7, sp, #16
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	460a      	mov	r2, r1
 8001c1e:	80fb      	strh	r3, [r7, #6]
 8001c20:	4613      	mov	r3, r2
 8001c22:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001c2c:	797b      	ldrb	r3, [r7, #5]
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <I2Cx_ReadData+0x50>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	88f9      	ldrh	r1, [r7, #6]
 8001c36:	9302      	str	r3, [sp, #8]
 8001c38:	2301      	movs	r3, #1
 8001c3a:	9301      	str	r3, [sp, #4]
 8001c3c:	f107 030e 	add.w	r3, r7, #14
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	2301      	movs	r3, #1
 8001c44:	4808      	ldr	r0, [pc, #32]	; (8001c68 <I2Cx_ReadData+0x54>)
 8001c46:	f002 fc65 	bl	8004514 <HAL_I2C_Mem_Read>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001c54:	f000 f80a 	bl	8001c6c <I2Cx_Error>
  }
  return value;
 8001c58:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	2000006c 	.word	0x2000006c
 8001c68:	20000258 	.word	0x20000258

08001c6c <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8001c70:	4803      	ldr	r0, [pc, #12]	; (8001c80 <I2Cx_Error+0x14>)
 8001c72:	f002 fb25 	bl	80042c0 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8001c76:	f7ff ff73 	bl	8001b60 <I2Cx_Init>
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000258 	.word	0x20000258

08001c84 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	; 0x28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <I2Cx_MspInit+0xa4>)
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	4a24      	ldr	r2, [pc, #144]	; (8001d28 <I2Cx_MspInit+0xa4>)
 8001c96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9c:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <I2Cx_MspInit+0xa4>)
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <I2Cx_MspInit+0xa4>)
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	4a1d      	ldr	r2, [pc, #116]	; (8001d28 <I2Cx_MspInit+0xa4>)
 8001cb2:	f043 0302 	orr.w	r3, r3, #2
 8001cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <I2Cx_MspInit+0xa4>)
 8001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 8001cc4:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8001cca:	2312      	movs	r3, #18
 8001ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4812      	ldr	r0, [pc, #72]	; (8001d2c <I2Cx_MspInit+0xa8>)
 8001ce2:	f000 fb39 	bl	8002358 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <I2Cx_MspInit+0xa4>)
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	4a0f      	ldr	r2, [pc, #60]	; (8001d28 <I2Cx_MspInit+0xa4>)
 8001cec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cf0:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <I2Cx_MspInit+0xa4>)
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <I2Cx_MspInit+0xa4>)
 8001cf8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001cfc:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	210f      	movs	r1, #15
 8001d02:	201f      	movs	r0, #31
 8001d04:	f000 faf1 	bl	80022ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001d08:	201f      	movs	r0, #31
 8001d0a:	f000 fb0a 	bl	8002322 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	210f      	movs	r1, #15
 8001d12:	2020      	movs	r0, #32
 8001d14:	f000 fae9 	bl	80022ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8001d18:	2020      	movs	r0, #32
 8001d1a:	f000 fb02 	bl	8002322 <HAL_NVIC_EnableIRQ>
}
 8001d1e:	bf00      	nop
 8001d20:	3728      	adds	r7, #40	; 0x28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40020400 	.word	0x40020400

08001d30 <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <COMPASSACCELERO_IO_Init+0x48>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <COMPASSACCELERO_IO_Init+0x48>)
 8001d40:	f043 0310 	orr.w	r3, r3, #16
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <COMPASSACCELERO_IO_Init+0x48>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8001d52:	2304      	movs	r3, #4
 8001d54:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	4619      	mov	r1, r3
 8001d66:	4805      	ldr	r0, [pc, #20]	; (8001d7c <COMPASSACCELERO_IO_Init+0x4c>)
 8001d68:	f000 faf6 	bl	8002358 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8001d6c:	f7ff fef8 	bl	8001b60 <I2Cx_Init>
}
 8001d70:	bf00      	nop
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40021000 	.word	0x40021000

08001d80 <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	603b      	str	r3, [r7, #0]
 8001d8a:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a12      	ldr	r2, [pc, #72]	; (8001dd8 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8001d90:	f043 0310 	orr.w	r3, r3, #16
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8001da2:	2330      	movs	r3, #48	; 0x30
 8001da4:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8001da6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001daa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001dac:	2302      	movs	r3, #2
 8001dae:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	4619      	mov	r1, r3
 8001db8:	4808      	ldr	r0, [pc, #32]	; (8001ddc <COMPASSACCELERO_IO_ITConfig+0x5c>)
 8001dba:	f000 facd 	bl	8002358 <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	210f      	movs	r1, #15
 8001dc2:	200a      	movs	r0, #10
 8001dc4:	f000 fa91 	bl	80022ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8001dc8:	200a      	movs	r0, #10
 8001dca:	f000 faaa 	bl	8002322 <HAL_NVIC_EnableIRQ>
}
 8001dce:	bf00      	nop
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40021000 	.word	0x40021000

08001de0 <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	80fb      	strh	r3, [r7, #6]
 8001dea:	460b      	mov	r3, r1
 8001dec:	717b      	strb	r3, [r7, #5]
 8001dee:	4613      	mov	r3, r2
 8001df0:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8001df2:	793a      	ldrb	r2, [r7, #4]
 8001df4:	7979      	ldrb	r1, [r7, #5]
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fee3 	bl	8001bc4 <I2Cx_WriteData>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	460a      	mov	r2, r1
 8001e10:	80fb      	strh	r3, [r7, #6]
 8001e12:	4613      	mov	r3, r2
 8001e14:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8001e16:	797a      	ldrb	r2, [r7, #5]
 8001e18:	88fb      	ldrh	r3, [r7, #6]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fef9 	bl	8001c14 <I2Cx_ReadData>
 8001e22:	4603      	mov	r3, r0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8001e36:	2300      	movs	r3, #0
 8001e38:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8001e42:	4b58      	ldr	r3, [pc, #352]	; (8001fa4 <BSP_ACCELERO_Init+0x178>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	4798      	blx	r3
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b33      	cmp	r3, #51	; 0x33
 8001e4c:	d14f      	bne.n	8001eee <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8001e4e:	4b56      	ldr	r3, [pc, #344]	; (8001fa8 <BSP_ACCELERO_Init+0x17c>)
 8001e50:	4a54      	ldr	r2, [pc, #336]	; (8001fa4 <BSP_ACCELERO_Init+0x178>)
 8001e52:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8001e58:	2340      	movs	r3, #64	; 0x40
 8001e5a:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 8001e5c:	2307      	movs	r3, #7
 8001e5e:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 8001e60:	2300      	movs	r3, #0
 8001e62:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8001e64:	2300      	movs	r3, #0
 8001e66:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8001e6c:	2308      	movs	r3, #8
 8001e6e:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8001e70:	7b3a      	ldrb	r2, [r7, #12]
 8001e72:	7b7b      	ldrb	r3, [r7, #13]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8001e78:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	8abb      	ldrh	r3, [r7, #20]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8001e86:	7c3a      	ldrb	r2, [r7, #16]
 8001e88:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	7cbb      	ldrb	r3, [r7, #18]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8001e9c:	b21a      	sxth	r2, r3
 8001e9e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	b21b      	sxth	r3, r3
 8001ea6:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001ea8:	4b3f      	ldr	r3, [pc, #252]	; (8001fa8 <BSP_ACCELERO_Init+0x17c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	8aba      	ldrh	r2, [r7, #20]
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8001eb8:	2310      	movs	r3, #16
 8001eba:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001ec4:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8001ec6:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8001ecc:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8001eda:	4b33      	ldr	r3, [pc, #204]	; (8001fa8 <BSP_ACCELERO_Init+0x17c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	8aba      	ldrh	r2, [r7, #20]
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	4798      	blx	r3

    ret = ACCELERO_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	75fb      	strb	r3, [r7, #23]
 8001eec:	e054      	b.n	8001f98 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 8001eee:	4b2f      	ldr	r3, [pc, #188]	; (8001fac <BSP_ACCELERO_Init+0x180>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	4798      	blx	r3
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b33      	cmp	r3, #51	; 0x33
 8001ef8:	d14e      	bne.n	8001f98 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8001efa:	4b2b      	ldr	r3, [pc, #172]	; (8001fa8 <BSP_ACCELERO_Init+0x17c>)
 8001efc:	4a2b      	ldr	r2, [pc, #172]	; (8001fac <BSP_ACCELERO_Init+0x180>)
 8001efe:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 8001f04:	2340      	movs	r3, #64	; 0x40
 8001f06:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8001f08:	2307      	movs	r3, #7
 8001f0a:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 8001f10:	2300      	movs	r3, #0
 8001f12:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8001f14:	2300      	movs	r3, #0
 8001f16:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8001f18:	2308      	movs	r3, #8
 8001f1a:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8001f1c:	7b3a      	ldrb	r2, [r7, #12]
 8001f1e:	7b7b      	ldrb	r3, [r7, #13]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8001f24:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8001f26:	4313      	orrs	r3, r2
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	8abb      	ldrh	r3, [r7, #20]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8001f32:	7c3a      	ldrb	r2, [r7, #16]
 8001f34:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8001f36:	4313      	orrs	r3, r2
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	7cbb      	ldrb	r3, [r7, #18]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8001f48:	b21a      	sxth	r2, r3
 8001f4a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	b21b      	sxth	r3, r3
 8001f52:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001f54:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <BSP_ACCELERO_Init+0x17c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	8aba      	ldrh	r2, [r7, #20]
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8001f64:	2310      	movs	r3, #16
 8001f66:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001f70:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8001f72:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001f74:	4313      	orrs	r3, r2
 8001f76:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8001f78:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001f80:	4313      	orrs	r3, r2
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8001f86:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <BSP_ACCELERO_Init+0x17c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	8aba      	ldrh	r2, [r7, #20]
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	4610      	mov	r0, r2
 8001f92:	4798      	blx	r3

    ret = ACCELERO_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8001f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000038 	.word	0x20000038
 8001fa8:	200002ac 	.word	0x200002ac
 8001fac:	20000004 	.word	0x20000004

08001fb0 <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 8001fbc:	4b10      	ldr	r3, [pc, #64]	; (8002000 <BSP_ACCELERO_GetXYZ+0x50>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d018      	beq.n	8001ff8 <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <BSP_ACCELERO_GetXYZ+0x50>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <BSP_ACCELERO_GetXYZ+0x50>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0b      	ldr	r2, [pc, #44]	; (8002004 <BSP_ACCELERO_GetXYZ+0x54>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d10e      	bne.n	8001ff8 <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 8001fea:	89fb      	ldrh	r3, [r7, #14]
 8001fec:	425b      	negs	r3, r3
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	b212      	sxth	r2, r2
 8001ff6:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	200002ac 	.word	0x200002ac
 8002004:	20000038 	.word	0x20000038

08002008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800200c:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <HAL_Init+0x40>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0d      	ldr	r2, [pc, #52]	; (8002048 <HAL_Init+0x40>)
 8002012:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002016:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_Init+0x40>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <HAL_Init+0x40>)
 800201e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002022:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <HAL_Init+0x40>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a07      	ldr	r2, [pc, #28]	; (8002048 <HAL_Init+0x40>)
 800202a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002030:	2003      	movs	r0, #3
 8002032:	f000 f94f 	bl	80022d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002036:	2000      	movs	r0, #0
 8002038:	f000 f808 	bl	800204c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800203c:	f7fe ffa0 	bl	8000f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40023c00 	.word	0x40023c00

0800204c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_InitTick+0x54>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_InitTick+0x58>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4619      	mov	r1, r3
 800205e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002062:	fbb3 f3f1 	udiv	r3, r3, r1
 8002066:	fbb2 f3f3 	udiv	r3, r2, r3
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f967 	bl	800233e <HAL_SYSTICK_Config>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e00e      	b.n	8002098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b0f      	cmp	r3, #15
 800207e:	d80a      	bhi.n	8002096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002080:	2200      	movs	r2, #0
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	f000 f92f 	bl	80022ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800208c:	4a06      	ldr	r2, [pc, #24]	; (80020a8 <HAL_InitTick+0x5c>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	e000      	b.n	8002098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000000 	.word	0x20000000
 80020a4:	20000074 	.word	0x20000074
 80020a8:	20000070 	.word	0x20000070

080020ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_IncTick+0x20>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_IncTick+0x24>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4413      	add	r3, r2
 80020bc:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <HAL_IncTick+0x24>)
 80020be:	6013      	str	r3, [r2, #0]
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000074 	.word	0x20000074
 80020d0:	200002b0 	.word	0x200002b0

080020d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return uwTick;
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <HAL_GetTick+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	200002b0 	.word	0x200002b0

080020ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f4:	f7ff ffee 	bl	80020d4 <HAL_GetTick>
 80020f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002104:	d005      	beq.n	8002112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <HAL_Delay+0x44>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4413      	add	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002112:	bf00      	nop
 8002114:	f7ff ffde 	bl	80020d4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	429a      	cmp	r2, r3
 8002122:	d8f7      	bhi.n	8002114 <HAL_Delay+0x28>
  {
  }
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000074 	.word	0x20000074

08002134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002150:	4013      	ands	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800215c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002166:	4a04      	ldr	r2, [pc, #16]	; (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	60d3      	str	r3, [r2, #12]
}
 800216c:	bf00      	nop
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <__NVIC_GetPriorityGrouping+0x18>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	f003 0307 	and.w	r3, r3, #7
}
 800218a:	4618      	mov	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	db0b      	blt.n	80021c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	f003 021f 	and.w	r2, r3, #31
 80021b0:	4907      	ldr	r1, [pc, #28]	; (80021d0 <__NVIC_EnableIRQ+0x38>)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	2001      	movs	r0, #1
 80021ba:	fa00 f202 	lsl.w	r2, r0, r2
 80021be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000e100 	.word	0xe000e100

080021d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	6039      	str	r1, [r7, #0]
 80021de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	db0a      	blt.n	80021fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	490c      	ldr	r1, [pc, #48]	; (8002220 <__NVIC_SetPriority+0x4c>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	0112      	lsls	r2, r2, #4
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	440b      	add	r3, r1
 80021f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021fc:	e00a      	b.n	8002214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4908      	ldr	r1, [pc, #32]	; (8002224 <__NVIC_SetPriority+0x50>)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	3b04      	subs	r3, #4
 800220c:	0112      	lsls	r2, r2, #4
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	440b      	add	r3, r1
 8002212:	761a      	strb	r2, [r3, #24]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000e100 	.word	0xe000e100
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	; 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f1c3 0307 	rsb	r3, r3, #7
 8002242:	2b04      	cmp	r3, #4
 8002244:	bf28      	it	cs
 8002246:	2304      	movcs	r3, #4
 8002248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3304      	adds	r3, #4
 800224e:	2b06      	cmp	r3, #6
 8002250:	d902      	bls.n	8002258 <NVIC_EncodePriority+0x30>
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3b03      	subs	r3, #3
 8002256:	e000      	b.n	800225a <NVIC_EncodePriority+0x32>
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	f04f 32ff 	mov.w	r2, #4294967295
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43da      	mvns	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	401a      	ands	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002270:	f04f 31ff 	mov.w	r1, #4294967295
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	43d9      	mvns	r1, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	4313      	orrs	r3, r2
         );
}
 8002282:	4618      	mov	r0, r3
 8002284:	3724      	adds	r7, #36	; 0x24
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022a0:	d301      	bcc.n	80022a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022a2:	2301      	movs	r3, #1
 80022a4:	e00f      	b.n	80022c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022a6:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <SysTick_Config+0x40>)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ae:	210f      	movs	r1, #15
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295
 80022b4:	f7ff ff8e 	bl	80021d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <SysTick_Config+0x40>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022be:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <SysTick_Config+0x40>)
 80022c0:	2207      	movs	r2, #7
 80022c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	e000e010 	.word	0xe000e010

080022d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ff29 	bl	8002134 <__NVIC_SetPriorityGrouping>
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b086      	sub	sp, #24
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	4603      	mov	r3, r0
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022fc:	f7ff ff3e 	bl	800217c <__NVIC_GetPriorityGrouping>
 8002300:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68b9      	ldr	r1, [r7, #8]
 8002306:	6978      	ldr	r0, [r7, #20]
 8002308:	f7ff ff8e 	bl	8002228 <NVIC_EncodePriority>
 800230c:	4602      	mov	r2, r0
 800230e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002312:	4611      	mov	r1, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff5d 	bl	80021d4 <__NVIC_SetPriority>
}
 800231a:	bf00      	nop
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	4603      	mov	r3, r0
 800232a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800232c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff31 	bl	8002198 <__NVIC_EnableIRQ>
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff ffa2 	bl	8002290 <SysTick_Config>
 800234c:	4603      	mov	r3, r0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002358:	b480      	push	{r7}
 800235a:	b089      	sub	sp, #36	; 0x24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800236a:	2300      	movs	r3, #0
 800236c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	e159      	b.n	8002628 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002374:	2201      	movs	r2, #1
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	4013      	ands	r3, r2
 8002386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	429a      	cmp	r2, r3
 800238e:	f040 8148 	bne.w	8002622 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	2b01      	cmp	r3, #1
 800239c:	d005      	beq.n	80023aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d130      	bne.n	800240c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	2203      	movs	r2, #3
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023e0:	2201      	movs	r2, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	f003 0201 	and.w	r2, r3, #1
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	2b03      	cmp	r3, #3
 8002416:	d017      	beq.n	8002448 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	2203      	movs	r2, #3
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d123      	bne.n	800249c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	08da      	lsrs	r2, r3, #3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3208      	adds	r2, #8
 800245c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	220f      	movs	r2, #15
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	08da      	lsrs	r2, r3, #3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3208      	adds	r2, #8
 8002496:	69b9      	ldr	r1, [r7, #24]
 8002498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	2203      	movs	r2, #3
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0203 	and.w	r2, r3, #3
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 80a2 	beq.w	8002622 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	4b57      	ldr	r3, [pc, #348]	; (8002640 <HAL_GPIO_Init+0x2e8>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	4a56      	ldr	r2, [pc, #344]	; (8002640 <HAL_GPIO_Init+0x2e8>)
 80024e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ec:	6453      	str	r3, [r2, #68]	; 0x44
 80024ee:	4b54      	ldr	r3, [pc, #336]	; (8002640 <HAL_GPIO_Init+0x2e8>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024fa:	4a52      	ldr	r2, [pc, #328]	; (8002644 <HAL_GPIO_Init+0x2ec>)
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	089b      	lsrs	r3, r3, #2
 8002500:	3302      	adds	r3, #2
 8002502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	220f      	movs	r2, #15
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a49      	ldr	r2, [pc, #292]	; (8002648 <HAL_GPIO_Init+0x2f0>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d019      	beq.n	800255a <HAL_GPIO_Init+0x202>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a48      	ldr	r2, [pc, #288]	; (800264c <HAL_GPIO_Init+0x2f4>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d013      	beq.n	8002556 <HAL_GPIO_Init+0x1fe>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a47      	ldr	r2, [pc, #284]	; (8002650 <HAL_GPIO_Init+0x2f8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d00d      	beq.n	8002552 <HAL_GPIO_Init+0x1fa>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a46      	ldr	r2, [pc, #280]	; (8002654 <HAL_GPIO_Init+0x2fc>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d007      	beq.n	800254e <HAL_GPIO_Init+0x1f6>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a45      	ldr	r2, [pc, #276]	; (8002658 <HAL_GPIO_Init+0x300>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d101      	bne.n	800254a <HAL_GPIO_Init+0x1f2>
 8002546:	2304      	movs	r3, #4
 8002548:	e008      	b.n	800255c <HAL_GPIO_Init+0x204>
 800254a:	2307      	movs	r3, #7
 800254c:	e006      	b.n	800255c <HAL_GPIO_Init+0x204>
 800254e:	2303      	movs	r3, #3
 8002550:	e004      	b.n	800255c <HAL_GPIO_Init+0x204>
 8002552:	2302      	movs	r3, #2
 8002554:	e002      	b.n	800255c <HAL_GPIO_Init+0x204>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <HAL_GPIO_Init+0x204>
 800255a:	2300      	movs	r3, #0
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	f002 0203 	and.w	r2, r2, #3
 8002562:	0092      	lsls	r2, r2, #2
 8002564:	4093      	lsls	r3, r2
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800256c:	4935      	ldr	r1, [pc, #212]	; (8002644 <HAL_GPIO_Init+0x2ec>)
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	089b      	lsrs	r3, r3, #2
 8002572:	3302      	adds	r3, #2
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800257a:	4b38      	ldr	r3, [pc, #224]	; (800265c <HAL_GPIO_Init+0x304>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800259e:	4a2f      	ldr	r2, [pc, #188]	; (800265c <HAL_GPIO_Init+0x304>)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025a4:	4b2d      	ldr	r3, [pc, #180]	; (800265c <HAL_GPIO_Init+0x304>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025c8:	4a24      	ldr	r2, [pc, #144]	; (800265c <HAL_GPIO_Init+0x304>)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025ce:	4b23      	ldr	r3, [pc, #140]	; (800265c <HAL_GPIO_Init+0x304>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025f2:	4a1a      	ldr	r2, [pc, #104]	; (800265c <HAL_GPIO_Init+0x304>)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025f8:	4b18      	ldr	r3, [pc, #96]	; (800265c <HAL_GPIO_Init+0x304>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800261c:	4a0f      	ldr	r2, [pc, #60]	; (800265c <HAL_GPIO_Init+0x304>)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3301      	adds	r3, #1
 8002626:	61fb      	str	r3, [r7, #28]
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	2b0f      	cmp	r3, #15
 800262c:	f67f aea2 	bls.w	8002374 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	3724      	adds	r7, #36	; 0x24
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800
 8002644:	40013800 	.word	0x40013800
 8002648:	40020000 	.word	0x40020000
 800264c:	40020400 	.word	0x40020400
 8002650:	40020800 	.word	0x40020800
 8002654:	40020c00 	.word	0x40020c00
 8002658:	40021000 	.word	0x40021000
 800265c:	40013c00 	.word	0x40013c00

08002660 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	e0bb      	b.n	80027f4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800267c:	2201      	movs	r2, #1
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4013      	ands	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	429a      	cmp	r2, r3
 8002694:	f040 80ab 	bne.w	80027ee <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002698:	4a5c      	ldr	r2, [pc, #368]	; (800280c <HAL_GPIO_DeInit+0x1ac>)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	089b      	lsrs	r3, r3, #2
 800269e:	3302      	adds	r3, #2
 80026a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	220f      	movs	r2, #15
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	4013      	ands	r3, r2
 80026b8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a54      	ldr	r2, [pc, #336]	; (8002810 <HAL_GPIO_DeInit+0x1b0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d019      	beq.n	80026f6 <HAL_GPIO_DeInit+0x96>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a53      	ldr	r2, [pc, #332]	; (8002814 <HAL_GPIO_DeInit+0x1b4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d013      	beq.n	80026f2 <HAL_GPIO_DeInit+0x92>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a52      	ldr	r2, [pc, #328]	; (8002818 <HAL_GPIO_DeInit+0x1b8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00d      	beq.n	80026ee <HAL_GPIO_DeInit+0x8e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a51      	ldr	r2, [pc, #324]	; (800281c <HAL_GPIO_DeInit+0x1bc>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d007      	beq.n	80026ea <HAL_GPIO_DeInit+0x8a>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a50      	ldr	r2, [pc, #320]	; (8002820 <HAL_GPIO_DeInit+0x1c0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d101      	bne.n	80026e6 <HAL_GPIO_DeInit+0x86>
 80026e2:	2304      	movs	r3, #4
 80026e4:	e008      	b.n	80026f8 <HAL_GPIO_DeInit+0x98>
 80026e6:	2307      	movs	r3, #7
 80026e8:	e006      	b.n	80026f8 <HAL_GPIO_DeInit+0x98>
 80026ea:	2303      	movs	r3, #3
 80026ec:	e004      	b.n	80026f8 <HAL_GPIO_DeInit+0x98>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e002      	b.n	80026f8 <HAL_GPIO_DeInit+0x98>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <HAL_GPIO_DeInit+0x98>
 80026f6:	2300      	movs	r3, #0
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	f002 0203 	and.w	r2, r2, #3
 80026fe:	0092      	lsls	r2, r2, #2
 8002700:	4093      	lsls	r3, r2
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	429a      	cmp	r2, r3
 8002706:	d132      	bne.n	800276e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002708:	4b46      	ldr	r3, [pc, #280]	; (8002824 <HAL_GPIO_DeInit+0x1c4>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	43db      	mvns	r3, r3
 8002710:	4944      	ldr	r1, [pc, #272]	; (8002824 <HAL_GPIO_DeInit+0x1c4>)
 8002712:	4013      	ands	r3, r2
 8002714:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002716:	4b43      	ldr	r3, [pc, #268]	; (8002824 <HAL_GPIO_DeInit+0x1c4>)
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	43db      	mvns	r3, r3
 800271e:	4941      	ldr	r1, [pc, #260]	; (8002824 <HAL_GPIO_DeInit+0x1c4>)
 8002720:	4013      	ands	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002724:	4b3f      	ldr	r3, [pc, #252]	; (8002824 <HAL_GPIO_DeInit+0x1c4>)
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	43db      	mvns	r3, r3
 800272c:	493d      	ldr	r1, [pc, #244]	; (8002824 <HAL_GPIO_DeInit+0x1c4>)
 800272e:	4013      	ands	r3, r2
 8002730:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002732:	4b3c      	ldr	r3, [pc, #240]	; (8002824 <HAL_GPIO_DeInit+0x1c4>)
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	43db      	mvns	r3, r3
 800273a:	493a      	ldr	r1, [pc, #232]	; (8002824 <HAL_GPIO_DeInit+0x1c4>)
 800273c:	4013      	ands	r3, r2
 800273e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	220f      	movs	r2, #15
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002750:	4a2e      	ldr	r2, [pc, #184]	; (800280c <HAL_GPIO_DeInit+0x1ac>)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	089b      	lsrs	r3, r3, #2
 8002756:	3302      	adds	r3, #2
 8002758:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	43da      	mvns	r2, r3
 8002760:	482a      	ldr	r0, [pc, #168]	; (800280c <HAL_GPIO_DeInit+0x1ac>)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	089b      	lsrs	r3, r3, #2
 8002766:	400a      	ands	r2, r1
 8002768:	3302      	adds	r3, #2
 800276a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	2103      	movs	r1, #3
 8002778:	fa01 f303 	lsl.w	r3, r1, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	401a      	ands	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	08da      	lsrs	r2, r3, #3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3208      	adds	r2, #8
 800278c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	220f      	movs	r2, #15
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	08d2      	lsrs	r2, r2, #3
 80027a4:	4019      	ands	r1, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3208      	adds	r2, #8
 80027aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	2103      	movs	r1, #3
 80027b8:	fa01 f303 	lsl.w	r3, r1, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	401a      	ands	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	2101      	movs	r1, #1
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	fa01 f303 	lsl.w	r3, r1, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	401a      	ands	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	2103      	movs	r1, #3
 80027e2:	fa01 f303 	lsl.w	r3, r1, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	401a      	ands	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	3301      	adds	r3, #1
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	2b0f      	cmp	r3, #15
 80027f8:	f67f af40 	bls.w	800267c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	371c      	adds	r7, #28
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40013800 	.word	0x40013800
 8002810:	40020000 	.word	0x40020000
 8002814:	40020400 	.word	0x40020400
 8002818:	40020800 	.word	0x40020800
 800281c:	40020c00 	.word	0x40020c00
 8002820:	40021000 	.word	0x40021000
 8002824:	40013c00 	.word	0x40013c00

08002828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	807b      	strh	r3, [r7, #2]
 8002834:	4613      	mov	r3, r2
 8002836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002838:	787b      	ldrb	r3, [r7, #1]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800283e:	887a      	ldrh	r2, [r7, #2]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002844:	e003      	b.n	800284e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002846:	887b      	ldrh	r3, [r7, #2]
 8002848:	041a      	lsls	r2, r3, #16
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	619a      	str	r2, [r3, #24]
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800285a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285c:	b08f      	sub	sp, #60	; 0x3c
 800285e:	af0a      	add	r7, sp, #40	; 0x28
 8002860:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e054      	b.n	8002916 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f005 f9ea 	bl	8007c60 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2203      	movs	r2, #3
 8002890:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d102      	bne.n	80028a6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f003 f9dd 	bl	8005c6a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	603b      	str	r3, [r7, #0]
 80028b6:	687e      	ldr	r6, [r7, #4]
 80028b8:	466d      	mov	r5, sp
 80028ba:	f106 0410 	add.w	r4, r6, #16
 80028be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80028ce:	1d33      	adds	r3, r6, #4
 80028d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028d2:	6838      	ldr	r0, [r7, #0]
 80028d4:	f003 f957 	bl	8005b86 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2101      	movs	r1, #1
 80028de:	4618      	mov	r0, r3
 80028e0:	f003 f9d4 	bl	8005c8c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	603b      	str	r3, [r7, #0]
 80028ea:	687e      	ldr	r6, [r7, #4]
 80028ec:	466d      	mov	r5, sp
 80028ee:	f106 0410 	add.w	r4, r6, #16
 80028f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002902:	1d33      	adds	r3, r6, #4
 8002904:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002906:	6838      	ldr	r0, [r7, #0]
 8002908:	f003 fb5c 	bl	8005fc4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800291e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800291e:	b590      	push	{r4, r7, lr}
 8002920:	b089      	sub	sp, #36	; 0x24
 8002922:	af04      	add	r7, sp, #16
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	4608      	mov	r0, r1
 8002928:	4611      	mov	r1, r2
 800292a:	461a      	mov	r2, r3
 800292c:	4603      	mov	r3, r0
 800292e:	70fb      	strb	r3, [r7, #3]
 8002930:	460b      	mov	r3, r1
 8002932:	70bb      	strb	r3, [r7, #2]
 8002934:	4613      	mov	r3, r2
 8002936:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_HCD_HC_Init+0x28>
 8002942:	2302      	movs	r3, #2
 8002944:	e076      	b.n	8002a34 <HAL_HCD_HC_Init+0x116>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800294e:	78fb      	ldrb	r3, [r7, #3]
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	212c      	movs	r1, #44	; 0x2c
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	333d      	adds	r3, #61	; 0x3d
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002960:	78fb      	ldrb	r3, [r7, #3]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	212c      	movs	r1, #44	; 0x2c
 8002966:	fb01 f303 	mul.w	r3, r1, r3
 800296a:	4413      	add	r3, r2
 800296c:	3338      	adds	r3, #56	; 0x38
 800296e:	787a      	ldrb	r2, [r7, #1]
 8002970:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002972:	78fb      	ldrb	r3, [r7, #3]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	212c      	movs	r1, #44	; 0x2c
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	4413      	add	r3, r2
 800297e:	3340      	adds	r3, #64	; 0x40
 8002980:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002982:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	212c      	movs	r1, #44	; 0x2c
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	4413      	add	r3, r2
 8002990:	3339      	adds	r3, #57	; 0x39
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	333f      	adds	r3, #63	; 0x3f
 80029a4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80029a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	78ba      	ldrb	r2, [r7, #2]
 80029ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029b2:	b2d0      	uxtb	r0, r2
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	333a      	adds	r3, #58	; 0x3a
 80029c0:	4602      	mov	r2, r0
 80029c2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80029c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	da09      	bge.n	80029e0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80029cc:	78fb      	ldrb	r3, [r7, #3]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	212c      	movs	r1, #44	; 0x2c
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	333b      	adds	r3, #59	; 0x3b
 80029da:	2201      	movs	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
 80029de:	e008      	b.n	80029f2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	212c      	movs	r1, #44	; 0x2c
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	333b      	adds	r3, #59	; 0x3b
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80029f2:	78fb      	ldrb	r3, [r7, #3]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	212c      	movs	r1, #44	; 0x2c
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	333c      	adds	r3, #60	; 0x3c
 8002a00:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002a04:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6818      	ldr	r0, [r3, #0]
 8002a0a:	787c      	ldrb	r4, [r7, #1]
 8002a0c:	78ba      	ldrb	r2, [r7, #2]
 8002a0e:	78f9      	ldrb	r1, [r7, #3]
 8002a10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a12:	9302      	str	r3, [sp, #8]
 8002a14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a18:	9301      	str	r3, [sp, #4]
 8002a1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	4623      	mov	r3, r4
 8002a22:	f003 fc2b 	bl	800627c <USB_HC_Init>
 8002a26:	4603      	mov	r3, r0
 8002a28:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd90      	pop	{r4, r7, pc}

08002a3c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_HCD_HC_Halt+0x1e>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e00f      	b.n	8002a7a <HAL_HCD_HC_Halt+0x3e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	78fa      	ldrb	r2, [r7, #3]
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f003 fe7b 	bl	8006766 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	4608      	mov	r0, r1
 8002a8e:	4611      	mov	r1, r2
 8002a90:	461a      	mov	r2, r3
 8002a92:	4603      	mov	r3, r0
 8002a94:	70fb      	strb	r3, [r7, #3]
 8002a96:	460b      	mov	r3, r1
 8002a98:	70bb      	strb	r3, [r7, #2]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002a9e:	78fb      	ldrb	r3, [r7, #3]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	212c      	movs	r1, #44	; 0x2c
 8002aa4:	fb01 f303 	mul.w	r3, r1, r3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	333b      	adds	r3, #59	; 0x3b
 8002aac:	78ba      	ldrb	r2, [r7, #2]
 8002aae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	212c      	movs	r1, #44	; 0x2c
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	333f      	adds	r3, #63	; 0x3f
 8002abe:	787a      	ldrb	r2, [r7, #1]
 8002ac0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002ac2:	7c3b      	ldrb	r3, [r7, #16]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d112      	bne.n	8002aee <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	212c      	movs	r1, #44	; 0x2c
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3342      	adds	r3, #66	; 0x42
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002ada:	78fb      	ldrb	r3, [r7, #3]
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	212c      	movs	r1, #44	; 0x2c
 8002ae0:	fb01 f303 	mul.w	r3, r1, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	333d      	adds	r3, #61	; 0x3d
 8002ae8:	7f3a      	ldrb	r2, [r7, #28]
 8002aea:	701a      	strb	r2, [r3, #0]
 8002aec:	e008      	b.n	8002b00 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	3342      	adds	r3, #66	; 0x42
 8002afc:	2202      	movs	r2, #2
 8002afe:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002b00:	787b      	ldrb	r3, [r7, #1]
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	f200 80c6 	bhi.w	8002c94 <HAL_HCD_HC_SubmitRequest+0x210>
 8002b08:	a201      	add	r2, pc, #4	; (adr r2, 8002b10 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0e:	bf00      	nop
 8002b10:	08002b21 	.word	0x08002b21
 8002b14:	08002c81 	.word	0x08002c81
 8002b18:	08002b85 	.word	0x08002b85
 8002b1c:	08002c03 	.word	0x08002c03
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002b20:	7c3b      	ldrb	r3, [r7, #16]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	f040 80b8 	bne.w	8002c98 <HAL_HCD_HC_SubmitRequest+0x214>
 8002b28:	78bb      	ldrb	r3, [r7, #2]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f040 80b4 	bne.w	8002c98 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002b30:	8b3b      	ldrh	r3, [r7, #24]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d108      	bne.n	8002b48 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002b36:	78fb      	ldrb	r3, [r7, #3]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	3355      	adds	r3, #85	; 0x55
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b48:	78fb      	ldrb	r3, [r7, #3]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	212c      	movs	r1, #44	; 0x2c
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	4413      	add	r3, r2
 8002b54:	3355      	adds	r3, #85	; 0x55
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d109      	bne.n	8002b70 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	212c      	movs	r1, #44	; 0x2c
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	3342      	adds	r3, #66	; 0x42
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002b6e:	e093      	b.n	8002c98 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3342      	adds	r3, #66	; 0x42
 8002b7e:	2202      	movs	r2, #2
 8002b80:	701a      	strb	r2, [r3, #0]
      break;
 8002b82:	e089      	b.n	8002c98 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002b84:	78bb      	ldrb	r3, [r7, #2]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d11d      	bne.n	8002bc6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b8a:	78fb      	ldrb	r3, [r7, #3]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	212c      	movs	r1, #44	; 0x2c
 8002b90:	fb01 f303 	mul.w	r3, r1, r3
 8002b94:	4413      	add	r3, r2
 8002b96:	3355      	adds	r3, #85	; 0x55
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d109      	bne.n	8002bb2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b9e:	78fb      	ldrb	r3, [r7, #3]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	212c      	movs	r1, #44	; 0x2c
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	3342      	adds	r3, #66	; 0x42
 8002bac:	2200      	movs	r2, #0
 8002bae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002bb0:	e073      	b.n	8002c9a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3342      	adds	r3, #66	; 0x42
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	701a      	strb	r2, [r3, #0]
      break;
 8002bc4:	e069      	b.n	8002c9a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	212c      	movs	r1, #44	; 0x2c
 8002bcc:	fb01 f303 	mul.w	r3, r1, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3354      	adds	r3, #84	; 0x54
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bda:	78fb      	ldrb	r3, [r7, #3]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	212c      	movs	r1, #44	; 0x2c
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	4413      	add	r3, r2
 8002be6:	3342      	adds	r3, #66	; 0x42
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
      break;
 8002bec:	e055      	b.n	8002c9a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	212c      	movs	r1, #44	; 0x2c
 8002bf4:	fb01 f303 	mul.w	r3, r1, r3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3342      	adds	r3, #66	; 0x42
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	701a      	strb	r2, [r3, #0]
      break;
 8002c00:	e04b      	b.n	8002c9a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002c02:	78bb      	ldrb	r3, [r7, #2]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d11d      	bne.n	8002c44 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c08:	78fb      	ldrb	r3, [r7, #3]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	212c      	movs	r1, #44	; 0x2c
 8002c0e:	fb01 f303 	mul.w	r3, r1, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	3355      	adds	r3, #85	; 0x55
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d109      	bne.n	8002c30 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	212c      	movs	r1, #44	; 0x2c
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	3342      	adds	r3, #66	; 0x42
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c2e:	e034      	b.n	8002c9a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	212c      	movs	r1, #44	; 0x2c
 8002c36:	fb01 f303 	mul.w	r3, r1, r3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3342      	adds	r3, #66	; 0x42
 8002c3e:	2202      	movs	r2, #2
 8002c40:	701a      	strb	r2, [r3, #0]
      break;
 8002c42:	e02a      	b.n	8002c9a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c44:	78fb      	ldrb	r3, [r7, #3]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	212c      	movs	r1, #44	; 0x2c
 8002c4a:	fb01 f303 	mul.w	r3, r1, r3
 8002c4e:	4413      	add	r3, r2
 8002c50:	3354      	adds	r3, #84	; 0x54
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d109      	bne.n	8002c6c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	212c      	movs	r1, #44	; 0x2c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	3342      	adds	r3, #66	; 0x42
 8002c66:	2200      	movs	r2, #0
 8002c68:	701a      	strb	r2, [r3, #0]
      break;
 8002c6a:	e016      	b.n	8002c9a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	3342      	adds	r3, #66	; 0x42
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	701a      	strb	r2, [r3, #0]
      break;
 8002c7e:	e00c      	b.n	8002c9a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3342      	adds	r3, #66	; 0x42
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]
      break;
 8002c92:	e002      	b.n	8002c9a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002c94:	bf00      	nop
 8002c96:	e000      	b.n	8002c9a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002c98:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002c9a:	78fb      	ldrb	r3, [r7, #3]
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	212c      	movs	r1, #44	; 0x2c
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3344      	adds	r3, #68	; 0x44
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	8b3a      	ldrh	r2, [r7, #24]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	202c      	movs	r0, #44	; 0x2c
 8002cb4:	fb00 f303 	mul.w	r3, r0, r3
 8002cb8:	440b      	add	r3, r1
 8002cba:	334c      	adds	r3, #76	; 0x4c
 8002cbc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002cbe:	78fb      	ldrb	r3, [r7, #3]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	212c      	movs	r1, #44	; 0x2c
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	3360      	adds	r3, #96	; 0x60
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002cd0:	78fb      	ldrb	r3, [r7, #3]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	212c      	movs	r1, #44	; 0x2c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	3350      	adds	r3, #80	; 0x50
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	212c      	movs	r1, #44	; 0x2c
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	3339      	adds	r3, #57	; 0x39
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	212c      	movs	r1, #44	; 0x2c
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	3361      	adds	r3, #97	; 0x61
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	78fb      	ldrb	r3, [r7, #3]
 8002d0c:	222c      	movs	r2, #44	; 0x2c
 8002d0e:	fb02 f303 	mul.w	r3, r2, r3
 8002d12:	3338      	adds	r3, #56	; 0x38
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	18d1      	adds	r1, r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	f003 fbce 	bl	80064c0 <USB_HC_StartXfer>
 8002d24:	4603      	mov	r3, r0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop

08002d30 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f003 f8f9 	bl	8005f3e <USB_GetMode>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	f040 80f6 	bne.w	8002f40 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f003 f8dd 	bl	8005f18 <USB_ReadInterrupts>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80ec 	beq.w	8002f3e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f003 f8d4 	bl	8005f18 <USB_ReadInterrupts>
 8002d70:	4603      	mov	r3, r0
 8002d72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d7a:	d104      	bne.n	8002d86 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002d84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f003 f8c4 	bl	8005f18 <USB_ReadInterrupts>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d9a:	d104      	bne.n	8002da6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002da4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f003 f8b4 	bl	8005f18 <USB_ReadInterrupts>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002db6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dba:	d104      	bne.n	8002dc6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002dc4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f003 f8a4 	bl	8005f18 <USB_ReadInterrupts>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d103      	bne.n	8002de2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2202      	movs	r2, #2
 8002de0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f003 f896 	bl	8005f18 <USB_ReadInterrupts>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002df6:	d11c      	bne.n	8002e32 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002e00:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10f      	bne.n	8002e32 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002e12:	2110      	movs	r1, #16
 8002e14:	6938      	ldr	r0, [r7, #16]
 8002e16:	f002 ff85 	bl	8005d24 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002e1a:	6938      	ldr	r0, [r7, #16]
 8002e1c:	f002 ffb6 	bl	8005d8c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2101      	movs	r1, #1
 8002e26:	4618      	mov	r0, r3
 8002e28:	f003 f98c 	bl	8006144 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f004 ff95 	bl	8007d5c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f003 f86e 	bl	8005f18 <USB_ReadInterrupts>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e46:	d102      	bne.n	8002e4e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f001 f882 	bl	8003f52 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f003 f860 	bl	8005f18 <USB_ReadInterrupts>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d106      	bne.n	8002e70 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f004 ff5e 	bl	8007d24 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2208      	movs	r2, #8
 8002e6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f003 f84f 	bl	8005f18 <USB_ReadInterrupts>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	2b10      	cmp	r3, #16
 8002e82:	d101      	bne.n	8002e88 <HAL_HCD_IRQHandler+0x158>
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <HAL_HCD_IRQHandler+0x15a>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d012      	beq.n	8002eb4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699a      	ldr	r2, [r3, #24]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0210 	bic.w	r2, r2, #16
 8002e9c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 ff85 	bl	8003dae <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0210 	orr.w	r2, r2, #16
 8002eb2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f003 f82d 	bl	8005f18 <USB_ReadInterrupts>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ec8:	d13a      	bne.n	8002f40 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f003 fc38 	bl	8006744 <USB_HC_ReadInterrupt>
 8002ed4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	e025      	b.n	8002f28 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d018      	beq.n	8002f22 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f06:	d106      	bne.n	8002f16 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f88f 	bl	8003032 <HCD_HC_IN_IRQHandler>
 8002f14:	e005      	b.n	8002f22 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 fbdd 	bl	80036dc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	3301      	adds	r3, #1
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d3d4      	bcc.n	8002edc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f3a:	615a      	str	r2, [r3, #20]
 8002f3c:	e000      	b.n	8002f40 <HAL_HCD_IRQHandler+0x210>
      return;
 8002f3e:	bf00      	nop
    }
  }
}
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b082      	sub	sp, #8
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_HCD_Start+0x16>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e013      	b.n	8002f84 <HAL_HCD_Start+0x3e>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2101      	movs	r1, #1
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f003 f924 	bl	80061b8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f002 fe67 	bl	8005c48 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_HCD_Stop+0x16>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e00d      	b.n	8002fbe <HAL_HCD_Stop+0x32>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f003 fd12 	bl	80069d8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	212c      	movs	r1, #44	; 0x2c
 8002fd8:	fb01 f303 	mul.w	r3, r1, r3
 8002fdc:	4413      	add	r3, r2
 8002fde:	3360      	adds	r3, #96	; 0x60
 8002fe0:	781b      	ldrb	r3, [r3, #0]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	212c      	movs	r1, #44	; 0x2c
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	4413      	add	r3, r2
 8003006:	3350      	adds	r3, #80	; 0x50
 8003008:	681b      	ldr	r3, [r3, #0]
}
 800300a:	4618      	mov	r0, r3
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f003 f918 	bl	8006258 <USB_GetCurrentFrame>
 8003028:	4603      	mov	r3, r0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b086      	sub	sp, #24
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	460b      	mov	r3, r1
 800303c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4413      	add	r3, r2
 8003054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b04      	cmp	r3, #4
 8003060:	d11a      	bne.n	8003098 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4413      	add	r3, r2
 800306a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306e:	461a      	mov	r2, r3
 8003070:	2304      	movs	r3, #4
 8003072:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	212c      	movs	r1, #44	; 0x2c
 800307a:	fb01 f303 	mul.w	r3, r1, r3
 800307e:	4413      	add	r3, r2
 8003080:	3361      	adds	r3, #97	; 0x61
 8003082:	2206      	movs	r2, #6
 8003084:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	4611      	mov	r1, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f003 fb68 	bl	8006766 <USB_HC_Halt>
 8003096:	e0af      	b.n	80031f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ae:	d11b      	bne.n	80030e8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030bc:	461a      	mov	r2, r3
 80030be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	212c      	movs	r1, #44	; 0x2c
 80030ca:	fb01 f303 	mul.w	r3, r1, r3
 80030ce:	4413      	add	r3, r2
 80030d0:	3361      	adds	r3, #97	; 0x61
 80030d2:	2207      	movs	r2, #7
 80030d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	4611      	mov	r1, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f003 fb40 	bl	8006766 <USB_HC_Halt>
 80030e6:	e087      	b.n	80031f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b20      	cmp	r3, #32
 80030fc:	d109      	bne.n	8003112 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4413      	add	r3, r2
 8003106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310a:	461a      	mov	r2, r3
 800310c:	2320      	movs	r3, #32
 800310e:	6093      	str	r3, [r2, #8]
 8003110:	e072      	b.n	80031f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	4413      	add	r3, r2
 800311a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 0308 	and.w	r3, r3, #8
 8003124:	2b08      	cmp	r3, #8
 8003126:	d11a      	bne.n	800315e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4413      	add	r3, r2
 8003130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003134:	461a      	mov	r2, r3
 8003136:	2308      	movs	r3, #8
 8003138:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	212c      	movs	r1, #44	; 0x2c
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	3361      	adds	r3, #97	; 0x61
 8003148:	2205      	movs	r2, #5
 800314a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	4611      	mov	r1, r2
 8003156:	4618      	mov	r0, r3
 8003158:	f003 fb05 	bl	8006766 <USB_HC_Halt>
 800315c:	e04c      	b.n	80031f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4413      	add	r3, r2
 8003166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003174:	d11b      	bne.n	80031ae <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	015a      	lsls	r2, r3, #5
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4413      	add	r3, r2
 800317e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003182:	461a      	mov	r2, r3
 8003184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003188:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	212c      	movs	r1, #44	; 0x2c
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	4413      	add	r3, r2
 8003196:	3361      	adds	r3, #97	; 0x61
 8003198:	2208      	movs	r2, #8
 800319a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	4611      	mov	r1, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f003 fadd 	bl	8006766 <USB_HC_Halt>
 80031ac:	e024      	b.n	80031f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c0:	2b80      	cmp	r3, #128	; 0x80
 80031c2:	d119      	bne.n	80031f8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d0:	461a      	mov	r2, r3
 80031d2:	2380      	movs	r3, #128	; 0x80
 80031d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	212c      	movs	r1, #44	; 0x2c
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	3361      	adds	r3, #97	; 0x61
 80031e4:	2206      	movs	r2, #6
 80031e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	4611      	mov	r1, r2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f003 fab7 	bl	8006766 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800320a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800320e:	d112      	bne.n	8003236 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	4611      	mov	r1, r2
 800321a:	4618      	mov	r0, r3
 800321c:	f003 faa3 	bl	8006766 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4413      	add	r3, r2
 8003228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322c:	461a      	mov	r2, r3
 800322e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003232:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003234:	e24e      	b.n	80036d4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4413      	add	r3, r2
 800323e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	f040 80df 	bne.w	800340c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d019      	beq.n	800328a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	212c      	movs	r1, #44	; 0x2c
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	4413      	add	r3, r2
 8003262:	3348      	adds	r3, #72	; 0x48
 8003264:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	0159      	lsls	r1, r3, #5
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	440b      	add	r3, r1
 800326e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003278:	1ad2      	subs	r2, r2, r3
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	202c      	movs	r0, #44	; 0x2c
 8003280:	fb00 f303 	mul.w	r3, r0, r3
 8003284:	440b      	add	r3, r1
 8003286:	3350      	adds	r3, #80	; 0x50
 8003288:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	212c      	movs	r1, #44	; 0x2c
 8003290:	fb01 f303 	mul.w	r3, r1, r3
 8003294:	4413      	add	r3, r2
 8003296:	3361      	adds	r3, #97	; 0x61
 8003298:	2201      	movs	r2, #1
 800329a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	212c      	movs	r1, #44	; 0x2c
 80032a2:	fb01 f303 	mul.w	r3, r1, r3
 80032a6:	4413      	add	r3, r2
 80032a8:	335c      	adds	r3, #92	; 0x5c
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ba:	461a      	mov	r2, r3
 80032bc:	2301      	movs	r3, #1
 80032be:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	212c      	movs	r1, #44	; 0x2c
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	333f      	adds	r3, #63	; 0x3f
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d009      	beq.n	80032e8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	212c      	movs	r1, #44	; 0x2c
 80032da:	fb01 f303 	mul.w	r3, r1, r3
 80032de:	4413      	add	r3, r2
 80032e0:	333f      	adds	r3, #63	; 0x3f
 80032e2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d111      	bne.n	800330c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	4611      	mov	r1, r2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f003 fa37 	bl	8006766 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003304:	461a      	mov	r2, r3
 8003306:	2310      	movs	r3, #16
 8003308:	6093      	str	r3, [r2, #8]
 800330a:	e03a      	b.n	8003382 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	212c      	movs	r1, #44	; 0x2c
 8003312:	fb01 f303 	mul.w	r3, r1, r3
 8003316:	4413      	add	r3, r2
 8003318:	333f      	adds	r3, #63	; 0x3f
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b03      	cmp	r3, #3
 800331e:	d009      	beq.n	8003334 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	212c      	movs	r1, #44	; 0x2c
 8003326:	fb01 f303 	mul.w	r3, r1, r3
 800332a:	4413      	add	r3, r2
 800332c:	333f      	adds	r3, #63	; 0x3f
 800332e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003330:	2b01      	cmp	r3, #1
 8003332:	d126      	bne.n	8003382 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4413      	add	r3, r2
 800333c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	0151      	lsls	r1, r2, #5
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	440a      	add	r2, r1
 800334a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800334e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003352:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	212c      	movs	r1, #44	; 0x2c
 800335a:	fb01 f303 	mul.w	r3, r1, r3
 800335e:	4413      	add	r3, r2
 8003360:	3360      	adds	r3, #96	; 0x60
 8003362:	2201      	movs	r2, #1
 8003364:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	b2d9      	uxtb	r1, r3
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	202c      	movs	r0, #44	; 0x2c
 8003370:	fb00 f303 	mul.w	r3, r0, r3
 8003374:	4413      	add	r3, r2
 8003376:	3360      	adds	r3, #96	; 0x60
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f004 fcfb 	bl	8007d78 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d12b      	bne.n	80033e2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	212c      	movs	r1, #44	; 0x2c
 8003390:	fb01 f303 	mul.w	r3, r1, r3
 8003394:	4413      	add	r3, r2
 8003396:	3348      	adds	r3, #72	; 0x48
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	202c      	movs	r0, #44	; 0x2c
 80033a0:	fb00 f202 	mul.w	r2, r0, r2
 80033a4:	440a      	add	r2, r1
 80033a6:	3240      	adds	r2, #64	; 0x40
 80033a8:	8812      	ldrh	r2, [r2, #0]
 80033aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 818e 	beq.w	80036d4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	212c      	movs	r1, #44	; 0x2c
 80033be:	fb01 f303 	mul.w	r3, r1, r3
 80033c2:	4413      	add	r3, r2
 80033c4:	3354      	adds	r3, #84	; 0x54
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	f083 0301 	eor.w	r3, r3, #1
 80033cc:	b2d8      	uxtb	r0, r3
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	212c      	movs	r1, #44	; 0x2c
 80033d4:	fb01 f303 	mul.w	r3, r1, r3
 80033d8:	4413      	add	r3, r2
 80033da:	3354      	adds	r3, #84	; 0x54
 80033dc:	4602      	mov	r2, r0
 80033de:	701a      	strb	r2, [r3, #0]
}
 80033e0:	e178      	b.n	80036d4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	212c      	movs	r1, #44	; 0x2c
 80033e8:	fb01 f303 	mul.w	r3, r1, r3
 80033ec:	4413      	add	r3, r2
 80033ee:	3354      	adds	r3, #84	; 0x54
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	f083 0301 	eor.w	r3, r3, #1
 80033f6:	b2d8      	uxtb	r0, r3
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	212c      	movs	r1, #44	; 0x2c
 80033fe:	fb01 f303 	mul.w	r3, r1, r3
 8003402:	4413      	add	r3, r2
 8003404:	3354      	adds	r3, #84	; 0x54
 8003406:	4602      	mov	r2, r0
 8003408:	701a      	strb	r2, [r3, #0]
}
 800340a:	e163      	b.n	80036d4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4413      	add	r3, r2
 8003414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b02      	cmp	r3, #2
 8003420:	f040 80f6 	bne.w	8003610 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	212c      	movs	r1, #44	; 0x2c
 800342a:	fb01 f303 	mul.w	r3, r1, r3
 800342e:	4413      	add	r3, r2
 8003430:	3361      	adds	r3, #97	; 0x61
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d109      	bne.n	800344c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	212c      	movs	r1, #44	; 0x2c
 800343e:	fb01 f303 	mul.w	r3, r1, r3
 8003442:	4413      	add	r3, r2
 8003444:	3360      	adds	r3, #96	; 0x60
 8003446:	2201      	movs	r2, #1
 8003448:	701a      	strb	r2, [r3, #0]
 800344a:	e0c9      	b.n	80035e0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	212c      	movs	r1, #44	; 0x2c
 8003452:	fb01 f303 	mul.w	r3, r1, r3
 8003456:	4413      	add	r3, r2
 8003458:	3361      	adds	r3, #97	; 0x61
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b05      	cmp	r3, #5
 800345e:	d109      	bne.n	8003474 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	212c      	movs	r1, #44	; 0x2c
 8003466:	fb01 f303 	mul.w	r3, r1, r3
 800346a:	4413      	add	r3, r2
 800346c:	3360      	adds	r3, #96	; 0x60
 800346e:	2205      	movs	r2, #5
 8003470:	701a      	strb	r2, [r3, #0]
 8003472:	e0b5      	b.n	80035e0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	212c      	movs	r1, #44	; 0x2c
 800347a:	fb01 f303 	mul.w	r3, r1, r3
 800347e:	4413      	add	r3, r2
 8003480:	3361      	adds	r3, #97	; 0x61
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b06      	cmp	r3, #6
 8003486:	d009      	beq.n	800349c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	212c      	movs	r1, #44	; 0x2c
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	4413      	add	r3, r2
 8003494:	3361      	adds	r3, #97	; 0x61
 8003496:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003498:	2b08      	cmp	r3, #8
 800349a:	d150      	bne.n	800353e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	212c      	movs	r1, #44	; 0x2c
 80034a2:	fb01 f303 	mul.w	r3, r1, r3
 80034a6:	4413      	add	r3, r2
 80034a8:	335c      	adds	r3, #92	; 0x5c
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	202c      	movs	r0, #44	; 0x2c
 80034b4:	fb00 f303 	mul.w	r3, r0, r3
 80034b8:	440b      	add	r3, r1
 80034ba:	335c      	adds	r3, #92	; 0x5c
 80034bc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	212c      	movs	r1, #44	; 0x2c
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	4413      	add	r3, r2
 80034ca:	335c      	adds	r3, #92	; 0x5c
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d912      	bls.n	80034f8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	212c      	movs	r1, #44	; 0x2c
 80034d8:	fb01 f303 	mul.w	r3, r1, r3
 80034dc:	4413      	add	r3, r2
 80034de:	335c      	adds	r3, #92	; 0x5c
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	212c      	movs	r1, #44	; 0x2c
 80034ea:	fb01 f303 	mul.w	r3, r1, r3
 80034ee:	4413      	add	r3, r2
 80034f0:	3360      	adds	r3, #96	; 0x60
 80034f2:	2204      	movs	r2, #4
 80034f4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034f6:	e073      	b.n	80035e0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	212c      	movs	r1, #44	; 0x2c
 80034fe:	fb01 f303 	mul.w	r3, r1, r3
 8003502:	4413      	add	r3, r2
 8003504:	3360      	adds	r3, #96	; 0x60
 8003506:	2202      	movs	r2, #2
 8003508:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	015a      	lsls	r2, r3, #5
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4413      	add	r3, r2
 8003512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003520:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003528:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4413      	add	r3, r2
 8003532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003536:	461a      	mov	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800353c:	e050      	b.n	80035e0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	212c      	movs	r1, #44	; 0x2c
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	4413      	add	r3, r2
 800354a:	3361      	adds	r3, #97	; 0x61
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b03      	cmp	r3, #3
 8003550:	d122      	bne.n	8003598 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	212c      	movs	r1, #44	; 0x2c
 8003558:	fb01 f303 	mul.w	r3, r1, r3
 800355c:	4413      	add	r3, r2
 800355e:	3360      	adds	r3, #96	; 0x60
 8003560:	2202      	movs	r2, #2
 8003562:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	4413      	add	r3, r2
 800356c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800357a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003582:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	4413      	add	r3, r2
 800358c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003590:	461a      	mov	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	e023      	b.n	80035e0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	212c      	movs	r1, #44	; 0x2c
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	3361      	adds	r3, #97	; 0x61
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b07      	cmp	r3, #7
 80035aa:	d119      	bne.n	80035e0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	212c      	movs	r1, #44	; 0x2c
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	335c      	adds	r3, #92	; 0x5c
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	202c      	movs	r0, #44	; 0x2c
 80035c4:	fb00 f303 	mul.w	r3, r0, r3
 80035c8:	440b      	add	r3, r1
 80035ca:	335c      	adds	r3, #92	; 0x5c
 80035cc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	212c      	movs	r1, #44	; 0x2c
 80035d4:	fb01 f303 	mul.w	r3, r1, r3
 80035d8:	4413      	add	r3, r2
 80035da:	3360      	adds	r3, #96	; 0x60
 80035dc:	2204      	movs	r2, #4
 80035de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ec:	461a      	mov	r2, r3
 80035ee:	2302      	movs	r3, #2
 80035f0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	b2d9      	uxtb	r1, r3
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	202c      	movs	r0, #44	; 0x2c
 80035fc:	fb00 f303 	mul.w	r3, r0, r3
 8003600:	4413      	add	r3, r2
 8003602:	3360      	adds	r3, #96	; 0x60
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f004 fbb5 	bl	8007d78 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800360e:	e061      	b.n	80036d4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4413      	add	r3, r2
 8003618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b10      	cmp	r3, #16
 8003624:	d156      	bne.n	80036d4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	212c      	movs	r1, #44	; 0x2c
 800362c:	fb01 f303 	mul.w	r3, r1, r3
 8003630:	4413      	add	r3, r2
 8003632:	333f      	adds	r3, #63	; 0x3f
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b03      	cmp	r3, #3
 8003638:	d111      	bne.n	800365e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	212c      	movs	r1, #44	; 0x2c
 8003640:	fb01 f303 	mul.w	r3, r1, r3
 8003644:	4413      	add	r3, r2
 8003646:	335c      	adds	r3, #92	; 0x5c
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	4611      	mov	r1, r2
 8003656:	4618      	mov	r0, r3
 8003658:	f003 f885 	bl	8006766 <USB_HC_Halt>
 800365c:	e031      	b.n	80036c2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	212c      	movs	r1, #44	; 0x2c
 8003664:	fb01 f303 	mul.w	r3, r1, r3
 8003668:	4413      	add	r3, r2
 800366a:	333f      	adds	r3, #63	; 0x3f
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d009      	beq.n	8003686 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	212c      	movs	r1, #44	; 0x2c
 8003678:	fb01 f303 	mul.w	r3, r1, r3
 800367c:	4413      	add	r3, r2
 800367e:	333f      	adds	r3, #63	; 0x3f
 8003680:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003682:	2b02      	cmp	r3, #2
 8003684:	d11d      	bne.n	80036c2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	212c      	movs	r1, #44	; 0x2c
 800368c:	fb01 f303 	mul.w	r3, r1, r3
 8003690:	4413      	add	r3, r2
 8003692:	335c      	adds	r3, #92	; 0x5c
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d110      	bne.n	80036c2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	212c      	movs	r1, #44	; 0x2c
 80036a6:	fb01 f303 	mul.w	r3, r1, r3
 80036aa:	4413      	add	r3, r2
 80036ac:	3361      	adds	r3, #97	; 0x61
 80036ae:	2203      	movs	r2, #3
 80036b0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	4611      	mov	r1, r2
 80036bc:	4618      	mov	r0, r3
 80036be:	f003 f852 	bl	8006766 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ce:	461a      	mov	r2, r3
 80036d0:	2310      	movs	r3, #16
 80036d2:	6093      	str	r3, [r2, #8]
}
 80036d4:	bf00      	nop
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b04      	cmp	r3, #4
 800370a:	d11a      	bne.n	8003742 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	4413      	add	r3, r2
 8003714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003718:	461a      	mov	r2, r3
 800371a:	2304      	movs	r3, #4
 800371c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	212c      	movs	r1, #44	; 0x2c
 8003724:	fb01 f303 	mul.w	r3, r1, r3
 8003728:	4413      	add	r3, r2
 800372a:	3361      	adds	r3, #97	; 0x61
 800372c:	2206      	movs	r2, #6
 800372e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	4611      	mov	r1, r2
 800373a:	4618      	mov	r0, r3
 800373c:	f003 f813 	bl	8006766 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003740:	e331      	b.n	8003da6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	015a      	lsls	r2, r3, #5
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	4413      	add	r3, r2
 800374a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 0320 	and.w	r3, r3, #32
 8003754:	2b20      	cmp	r3, #32
 8003756:	d12e      	bne.n	80037b6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	4413      	add	r3, r2
 8003760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003764:	461a      	mov	r2, r3
 8003766:	2320      	movs	r3, #32
 8003768:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	212c      	movs	r1, #44	; 0x2c
 8003770:	fb01 f303 	mul.w	r3, r1, r3
 8003774:	4413      	add	r3, r2
 8003776:	333d      	adds	r3, #61	; 0x3d
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b01      	cmp	r3, #1
 800377c:	f040 8313 	bne.w	8003da6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	212c      	movs	r1, #44	; 0x2c
 8003786:	fb01 f303 	mul.w	r3, r1, r3
 800378a:	4413      	add	r3, r2
 800378c:	333d      	adds	r3, #61	; 0x3d
 800378e:	2200      	movs	r2, #0
 8003790:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	212c      	movs	r1, #44	; 0x2c
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	4413      	add	r3, r2
 800379e:	3360      	adds	r3, #96	; 0x60
 80037a0:	2202      	movs	r2, #2
 80037a2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	4611      	mov	r1, r2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f002 ffd9 	bl	8006766 <USB_HC_Halt>
}
 80037b4:	e2f7      	b.n	8003da6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	015a      	lsls	r2, r3, #5
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037cc:	d112      	bne.n	80037f4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037da:	461a      	mov	r2, r3
 80037dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037e0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	4611      	mov	r1, r2
 80037ec:	4618      	mov	r0, r3
 80037ee:	f002 ffba 	bl	8006766 <USB_HC_Halt>
}
 80037f2:	e2d8      	b.n	8003da6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b01      	cmp	r3, #1
 8003808:	d140      	bne.n	800388c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	212c      	movs	r1, #44	; 0x2c
 8003810:	fb01 f303 	mul.w	r3, r1, r3
 8003814:	4413      	add	r3, r2
 8003816:	335c      	adds	r3, #92	; 0x5c
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	4413      	add	r3, r2
 8003824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382e:	2b40      	cmp	r3, #64	; 0x40
 8003830:	d111      	bne.n	8003856 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	212c      	movs	r1, #44	; 0x2c
 8003838:	fb01 f303 	mul.w	r3, r1, r3
 800383c:	4413      	add	r3, r2
 800383e:	333d      	adds	r3, #61	; 0x3d
 8003840:	2201      	movs	r2, #1
 8003842:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	4413      	add	r3, r2
 800384c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003850:	461a      	mov	r2, r3
 8003852:	2340      	movs	r3, #64	; 0x40
 8003854:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	4413      	add	r3, r2
 800385e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003862:	461a      	mov	r2, r3
 8003864:	2301      	movs	r3, #1
 8003866:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	212c      	movs	r1, #44	; 0x2c
 800386e:	fb01 f303 	mul.w	r3, r1, r3
 8003872:	4413      	add	r3, r2
 8003874:	3361      	adds	r3, #97	; 0x61
 8003876:	2201      	movs	r2, #1
 8003878:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	4611      	mov	r1, r2
 8003884:	4618      	mov	r0, r3
 8003886:	f002 ff6e 	bl	8006766 <USB_HC_Halt>
}
 800388a:	e28c      	b.n	8003da6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	4413      	add	r3, r2
 8003894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389e:	2b40      	cmp	r3, #64	; 0x40
 80038a0:	d12c      	bne.n	80038fc <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	212c      	movs	r1, #44	; 0x2c
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	4413      	add	r3, r2
 80038ae:	3361      	adds	r3, #97	; 0x61
 80038b0:	2204      	movs	r2, #4
 80038b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	212c      	movs	r1, #44	; 0x2c
 80038ba:	fb01 f303 	mul.w	r3, r1, r3
 80038be:	4413      	add	r3, r2
 80038c0:	333d      	adds	r3, #61	; 0x3d
 80038c2:	2201      	movs	r2, #1
 80038c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	212c      	movs	r1, #44	; 0x2c
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	4413      	add	r3, r2
 80038d2:	335c      	adds	r3, #92	; 0x5c
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	4611      	mov	r1, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f002 ff3f 	bl	8006766 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f4:	461a      	mov	r2, r3
 80038f6:	2340      	movs	r3, #64	; 0x40
 80038f8:	6093      	str	r3, [r2, #8]
}
 80038fa:	e254      	b.n	8003da6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	4413      	add	r3, r2
 8003904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b08      	cmp	r3, #8
 8003910:	d11a      	bne.n	8003948 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	4413      	add	r3, r2
 800391a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391e:	461a      	mov	r2, r3
 8003920:	2308      	movs	r3, #8
 8003922:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	212c      	movs	r1, #44	; 0x2c
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	4413      	add	r3, r2
 8003930:	3361      	adds	r3, #97	; 0x61
 8003932:	2205      	movs	r2, #5
 8003934:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	4611      	mov	r1, r2
 8003940:	4618      	mov	r0, r3
 8003942:	f002 ff10 	bl	8006766 <USB_HC_Halt>
}
 8003946:	e22e      	b.n	8003da6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	4413      	add	r3, r2
 8003950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	2b10      	cmp	r3, #16
 800395c:	d140      	bne.n	80039e0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	212c      	movs	r1, #44	; 0x2c
 8003964:	fb01 f303 	mul.w	r3, r1, r3
 8003968:	4413      	add	r3, r2
 800396a:	335c      	adds	r3, #92	; 0x5c
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	212c      	movs	r1, #44	; 0x2c
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	4413      	add	r3, r2
 800397c:	3361      	adds	r3, #97	; 0x61
 800397e:	2203      	movs	r2, #3
 8003980:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	212c      	movs	r1, #44	; 0x2c
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	4413      	add	r3, r2
 800398e:	333d      	adds	r3, #61	; 0x3d
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d112      	bne.n	80039bc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	212c      	movs	r1, #44	; 0x2c
 800399c:	fb01 f303 	mul.w	r3, r1, r3
 80039a0:	4413      	add	r3, r2
 80039a2:	333c      	adds	r3, #60	; 0x3c
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d108      	bne.n	80039bc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	212c      	movs	r1, #44	; 0x2c
 80039b0:	fb01 f303 	mul.w	r3, r1, r3
 80039b4:	4413      	add	r3, r2
 80039b6:	333d      	adds	r3, #61	; 0x3d
 80039b8:	2201      	movs	r2, #1
 80039ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	4611      	mov	r1, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f002 fecd 	bl	8006766 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d8:	461a      	mov	r2, r3
 80039da:	2310      	movs	r3, #16
 80039dc:	6093      	str	r3, [r2, #8]
}
 80039de:	e1e2      	b.n	8003da6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f2:	2b80      	cmp	r3, #128	; 0x80
 80039f4:	d164      	bne.n	8003ac0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d111      	bne.n	8003a22 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	212c      	movs	r1, #44	; 0x2c
 8003a04:	fb01 f303 	mul.w	r3, r1, r3
 8003a08:	4413      	add	r3, r2
 8003a0a:	3361      	adds	r3, #97	; 0x61
 8003a0c:	2206      	movs	r2, #6
 8003a0e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f002 fea3 	bl	8006766 <USB_HC_Halt>
 8003a20:	e044      	b.n	8003aac <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	212c      	movs	r1, #44	; 0x2c
 8003a28:	fb01 f303 	mul.w	r3, r1, r3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	335c      	adds	r3, #92	; 0x5c
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	202c      	movs	r0, #44	; 0x2c
 8003a3a:	fb00 f303 	mul.w	r3, r0, r3
 8003a3e:	440b      	add	r3, r1
 8003a40:	335c      	adds	r3, #92	; 0x5c
 8003a42:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	212c      	movs	r1, #44	; 0x2c
 8003a4a:	fb01 f303 	mul.w	r3, r1, r3
 8003a4e:	4413      	add	r3, r2
 8003a50:	335c      	adds	r3, #92	; 0x5c
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d920      	bls.n	8003a9a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	212c      	movs	r1, #44	; 0x2c
 8003a5e:	fb01 f303 	mul.w	r3, r1, r3
 8003a62:	4413      	add	r3, r2
 8003a64:	335c      	adds	r3, #92	; 0x5c
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	212c      	movs	r1, #44	; 0x2c
 8003a70:	fb01 f303 	mul.w	r3, r1, r3
 8003a74:	4413      	add	r3, r2
 8003a76:	3360      	adds	r3, #96	; 0x60
 8003a78:	2204      	movs	r2, #4
 8003a7a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	b2d9      	uxtb	r1, r3
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	202c      	movs	r0, #44	; 0x2c
 8003a86:	fb00 f303 	mul.w	r3, r0, r3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3360      	adds	r3, #96	; 0x60
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	461a      	mov	r2, r3
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f004 f970 	bl	8007d78 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a98:	e008      	b.n	8003aac <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	212c      	movs	r1, #44	; 0x2c
 8003aa0:	fb01 f303 	mul.w	r3, r1, r3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3360      	adds	r3, #96	; 0x60
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2380      	movs	r3, #128	; 0x80
 8003abc:	6093      	str	r3, [r2, #8]
}
 8003abe:	e172      	b.n	8003da6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad6:	d11b      	bne.n	8003b10 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	212c      	movs	r1, #44	; 0x2c
 8003ade:	fb01 f303 	mul.w	r3, r1, r3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3361      	adds	r3, #97	; 0x61
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	4611      	mov	r1, r2
 8003af4:	4618      	mov	r0, r3
 8003af6:	f002 fe36 	bl	8006766 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b06:	461a      	mov	r2, r3
 8003b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b0c:	6093      	str	r3, [r2, #8]
}
 8003b0e:	e14a      	b.n	8003da6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	f040 813f 	bne.w	8003da6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	212c      	movs	r1, #44	; 0x2c
 8003b2e:	fb01 f303 	mul.w	r3, r1, r3
 8003b32:	4413      	add	r3, r2
 8003b34:	3361      	adds	r3, #97	; 0x61
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d17d      	bne.n	8003c38 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	212c      	movs	r1, #44	; 0x2c
 8003b42:	fb01 f303 	mul.w	r3, r1, r3
 8003b46:	4413      	add	r3, r2
 8003b48:	3360      	adds	r3, #96	; 0x60
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	212c      	movs	r1, #44	; 0x2c
 8003b54:	fb01 f303 	mul.w	r3, r1, r3
 8003b58:	4413      	add	r3, r2
 8003b5a:	333f      	adds	r3, #63	; 0x3f
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d00a      	beq.n	8003b78 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	212c      	movs	r1, #44	; 0x2c
 8003b68:	fb01 f303 	mul.w	r3, r1, r3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	333f      	adds	r3, #63	; 0x3f
 8003b70:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	f040 8100 	bne.w	8003d78 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d113      	bne.n	8003ba8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	212c      	movs	r1, #44	; 0x2c
 8003b86:	fb01 f303 	mul.w	r3, r1, r3
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3355      	adds	r3, #85	; 0x55
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	f083 0301 	eor.w	r3, r3, #1
 8003b94:	b2d8      	uxtb	r0, r3
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	212c      	movs	r1, #44	; 0x2c
 8003b9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3355      	adds	r3, #85	; 0x55
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	f040 80e3 	bne.w	8003d78 <HCD_HC_OUT_IRQHandler+0x69c>
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	212c      	movs	r1, #44	; 0x2c
 8003bb8:	fb01 f303 	mul.w	r3, r1, r3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	334c      	adds	r3, #76	; 0x4c
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 80d8 	beq.w	8003d78 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	212c      	movs	r1, #44	; 0x2c
 8003bce:	fb01 f303 	mul.w	r3, r1, r3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	334c      	adds	r3, #76	; 0x4c
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	202c      	movs	r0, #44	; 0x2c
 8003bde:	fb00 f202 	mul.w	r2, r0, r2
 8003be2:	440a      	add	r2, r1
 8003be4:	3240      	adds	r2, #64	; 0x40
 8003be6:	8812      	ldrh	r2, [r2, #0]
 8003be8:	4413      	add	r3, r2
 8003bea:	3b01      	subs	r3, #1
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	202c      	movs	r0, #44	; 0x2c
 8003bf2:	fb00 f202 	mul.w	r2, r0, r2
 8003bf6:	440a      	add	r2, r1
 8003bf8:	3240      	adds	r2, #64	; 0x40
 8003bfa:	8812      	ldrh	r2, [r2, #0]
 8003bfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 80b5 	beq.w	8003d78 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	212c      	movs	r1, #44	; 0x2c
 8003c14:	fb01 f303 	mul.w	r3, r1, r3
 8003c18:	4413      	add	r3, r2
 8003c1a:	3355      	adds	r3, #85	; 0x55
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	f083 0301 	eor.w	r3, r3, #1
 8003c22:	b2d8      	uxtb	r0, r3
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	212c      	movs	r1, #44	; 0x2c
 8003c2a:	fb01 f303 	mul.w	r3, r1, r3
 8003c2e:	4413      	add	r3, r2
 8003c30:	3355      	adds	r3, #85	; 0x55
 8003c32:	4602      	mov	r2, r0
 8003c34:	701a      	strb	r2, [r3, #0]
 8003c36:	e09f      	b.n	8003d78 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	212c      	movs	r1, #44	; 0x2c
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	4413      	add	r3, r2
 8003c44:	3361      	adds	r3, #97	; 0x61
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d109      	bne.n	8003c60 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	212c      	movs	r1, #44	; 0x2c
 8003c52:	fb01 f303 	mul.w	r3, r1, r3
 8003c56:	4413      	add	r3, r2
 8003c58:	3360      	adds	r3, #96	; 0x60
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	701a      	strb	r2, [r3, #0]
 8003c5e:	e08b      	b.n	8003d78 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	212c      	movs	r1, #44	; 0x2c
 8003c66:	fb01 f303 	mul.w	r3, r1, r3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3361      	adds	r3, #97	; 0x61
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d109      	bne.n	8003c88 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	212c      	movs	r1, #44	; 0x2c
 8003c7a:	fb01 f303 	mul.w	r3, r1, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	3360      	adds	r3, #96	; 0x60
 8003c82:	2202      	movs	r2, #2
 8003c84:	701a      	strb	r2, [r3, #0]
 8003c86:	e077      	b.n	8003d78 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	212c      	movs	r1, #44	; 0x2c
 8003c8e:	fb01 f303 	mul.w	r3, r1, r3
 8003c92:	4413      	add	r3, r2
 8003c94:	3361      	adds	r3, #97	; 0x61
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b05      	cmp	r3, #5
 8003c9a:	d109      	bne.n	8003cb0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	212c      	movs	r1, #44	; 0x2c
 8003ca2:	fb01 f303 	mul.w	r3, r1, r3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3360      	adds	r3, #96	; 0x60
 8003caa:	2205      	movs	r2, #5
 8003cac:	701a      	strb	r2, [r3, #0]
 8003cae:	e063      	b.n	8003d78 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	212c      	movs	r1, #44	; 0x2c
 8003cb6:	fb01 f303 	mul.w	r3, r1, r3
 8003cba:	4413      	add	r3, r2
 8003cbc:	3361      	adds	r3, #97	; 0x61
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b06      	cmp	r3, #6
 8003cc2:	d009      	beq.n	8003cd8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	212c      	movs	r1, #44	; 0x2c
 8003cca:	fb01 f303 	mul.w	r3, r1, r3
 8003cce:	4413      	add	r3, r2
 8003cd0:	3361      	adds	r3, #97	; 0x61
 8003cd2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d14f      	bne.n	8003d78 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	212c      	movs	r1, #44	; 0x2c
 8003cde:	fb01 f303 	mul.w	r3, r1, r3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	335c      	adds	r3, #92	; 0x5c
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	202c      	movs	r0, #44	; 0x2c
 8003cf0:	fb00 f303 	mul.w	r3, r0, r3
 8003cf4:	440b      	add	r3, r1
 8003cf6:	335c      	adds	r3, #92	; 0x5c
 8003cf8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	212c      	movs	r1, #44	; 0x2c
 8003d00:	fb01 f303 	mul.w	r3, r1, r3
 8003d04:	4413      	add	r3, r2
 8003d06:	335c      	adds	r3, #92	; 0x5c
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d912      	bls.n	8003d34 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	212c      	movs	r1, #44	; 0x2c
 8003d14:	fb01 f303 	mul.w	r3, r1, r3
 8003d18:	4413      	add	r3, r2
 8003d1a:	335c      	adds	r3, #92	; 0x5c
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	212c      	movs	r1, #44	; 0x2c
 8003d26:	fb01 f303 	mul.w	r3, r1, r3
 8003d2a:	4413      	add	r3, r2
 8003d2c:	3360      	adds	r3, #96	; 0x60
 8003d2e:	2204      	movs	r2, #4
 8003d30:	701a      	strb	r2, [r3, #0]
 8003d32:	e021      	b.n	8003d78 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	212c      	movs	r1, #44	; 0x2c
 8003d3a:	fb01 f303 	mul.w	r3, r1, r3
 8003d3e:	4413      	add	r3, r2
 8003d40:	3360      	adds	r3, #96	; 0x60
 8003d42:	2202      	movs	r2, #2
 8003d44:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d5c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d64:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d72:	461a      	mov	r2, r3
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	015a      	lsls	r2, r3, #5
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d84:	461a      	mov	r2, r3
 8003d86:	2302      	movs	r3, #2
 8003d88:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	b2d9      	uxtb	r1, r3
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	202c      	movs	r0, #44	; 0x2c
 8003d94:	fb00 f303 	mul.w	r3, r0, r3
 8003d98:	4413      	add	r3, r2
 8003d9a:	3360      	adds	r3, #96	; 0x60
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f003 ffe9 	bl	8007d78 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003da6:	bf00      	nop
 8003da8:	3720      	adds	r7, #32
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b08a      	sub	sp, #40	; 0x28
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	0c5b      	lsrs	r3, r3, #17
 8003dd4:	f003 030f 	and.w	r3, r3, #15
 8003dd8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003de2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d004      	beq.n	8003df4 <HCD_RXQLVL_IRQHandler+0x46>
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b05      	cmp	r3, #5
 8003dee:	f000 80a9 	beq.w	8003f44 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003df2:	e0aa      	b.n	8003f4a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 80a6 	beq.w	8003f48 <HCD_RXQLVL_IRQHandler+0x19a>
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	212c      	movs	r1, #44	; 0x2c
 8003e02:	fb01 f303 	mul.w	r3, r1, r3
 8003e06:	4413      	add	r3, r2
 8003e08:	3344      	adds	r3, #68	; 0x44
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 809b 	beq.w	8003f48 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	212c      	movs	r1, #44	; 0x2c
 8003e18:	fb01 f303 	mul.w	r3, r1, r3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	3350      	adds	r3, #80	; 0x50
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	441a      	add	r2, r3
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	202c      	movs	r0, #44	; 0x2c
 8003e2c:	fb00 f303 	mul.w	r3, r0, r3
 8003e30:	440b      	add	r3, r1
 8003e32:	334c      	adds	r3, #76	; 0x4c
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d87a      	bhi.n	8003f30 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	212c      	movs	r1, #44	; 0x2c
 8003e44:	fb01 f303 	mul.w	r3, r1, r3
 8003e48:	4413      	add	r3, r2
 8003e4a:	3344      	adds	r3, #68	; 0x44
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	b292      	uxth	r2, r2
 8003e52:	4619      	mov	r1, r3
 8003e54:	f002 f808 	bl	8005e68 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	212c      	movs	r1, #44	; 0x2c
 8003e5e:	fb01 f303 	mul.w	r3, r1, r3
 8003e62:	4413      	add	r3, r2
 8003e64:	3344      	adds	r3, #68	; 0x44
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	441a      	add	r2, r3
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	202c      	movs	r0, #44	; 0x2c
 8003e72:	fb00 f303 	mul.w	r3, r0, r3
 8003e76:	440b      	add	r3, r1
 8003e78:	3344      	adds	r3, #68	; 0x44
 8003e7a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	212c      	movs	r1, #44	; 0x2c
 8003e82:	fb01 f303 	mul.w	r3, r1, r3
 8003e86:	4413      	add	r3, r2
 8003e88:	3350      	adds	r3, #80	; 0x50
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	441a      	add	r2, r3
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	202c      	movs	r0, #44	; 0x2c
 8003e96:	fb00 f303 	mul.w	r3, r0, r3
 8003e9a:	440b      	add	r3, r1
 8003e9c:	3350      	adds	r3, #80	; 0x50
 8003e9e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	0cdb      	lsrs	r3, r3, #19
 8003eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eb4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	212c      	movs	r1, #44	; 0x2c
 8003ebc:	fb01 f303 	mul.w	r3, r1, r3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3340      	adds	r3, #64	; 0x40
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d13c      	bne.n	8003f48 <HCD_RXQLVL_IRQHandler+0x19a>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d039      	beq.n	8003f48 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003eea:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ef2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f00:	461a      	mov	r2, r3
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	212c      	movs	r1, #44	; 0x2c
 8003f0c:	fb01 f303 	mul.w	r3, r1, r3
 8003f10:	4413      	add	r3, r2
 8003f12:	3354      	adds	r3, #84	; 0x54
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	f083 0301 	eor.w	r3, r3, #1
 8003f1a:	b2d8      	uxtb	r0, r3
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	212c      	movs	r1, #44	; 0x2c
 8003f22:	fb01 f303 	mul.w	r3, r1, r3
 8003f26:	4413      	add	r3, r2
 8003f28:	3354      	adds	r3, #84	; 0x54
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	701a      	strb	r2, [r3, #0]
      break;
 8003f2e:	e00b      	b.n	8003f48 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	212c      	movs	r1, #44	; 0x2c
 8003f36:	fb01 f303 	mul.w	r3, r1, r3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3360      	adds	r3, #96	; 0x60
 8003f3e:	2204      	movs	r2, #4
 8003f40:	701a      	strb	r2, [r3, #0]
      break;
 8003f42:	e001      	b.n	8003f48 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003f44:	bf00      	nop
 8003f46:	e000      	b.n	8003f4a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003f48:	bf00      	nop
  }
}
 8003f4a:	bf00      	nop
 8003f4c:	3728      	adds	r7, #40	; 0x28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b086      	sub	sp, #24
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003f7e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d10b      	bne.n	8003fa2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d102      	bne.n	8003f9a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f003 fed3 	bl	8007d40 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f043 0302 	orr.w	r3, r3, #2
 8003fa0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d132      	bne.n	8004012 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f043 0308 	orr.w	r3, r3, #8
 8003fb2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d126      	bne.n	800400c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d113      	bne.n	8003fee <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003fcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fd0:	d106      	bne.n	8003fe0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2102      	movs	r1, #2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f002 f8b3 	bl	8006144 <USB_InitFSLSPClkSel>
 8003fde:	e011      	b.n	8004004 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f002 f8ac 	bl	8006144 <USB_InitFSLSPClkSel>
 8003fec:	e00a      	b.n	8004004 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d106      	bne.n	8004004 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004002:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f003 fec5 	bl	8007d94 <HAL_HCD_PortEnabled_Callback>
 800400a:	e002      	b.n	8004012 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f003 fecf 	bl	8007db0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b20      	cmp	r3, #32
 800401a:	d103      	bne.n	8004024 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f043 0320 	orr.w	r3, r3, #32
 8004022:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800402a:	461a      	mov	r2, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	6013      	str	r3, [r2, #0]
}
 8004030:	bf00      	nop
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e12b      	b.n	80042a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7fc ffb6 	bl	8000fd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2224      	movs	r2, #36	; 0x24
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0201 	bic.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800408a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800409a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800409c:	f001 fc76 	bl	800598c <HAL_RCC_GetPCLK1Freq>
 80040a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	4a81      	ldr	r2, [pc, #516]	; (80042ac <HAL_I2C_Init+0x274>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d807      	bhi.n	80040bc <HAL_I2C_Init+0x84>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4a80      	ldr	r2, [pc, #512]	; (80042b0 <HAL_I2C_Init+0x278>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	bf94      	ite	ls
 80040b4:	2301      	movls	r3, #1
 80040b6:	2300      	movhi	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	e006      	b.n	80040ca <HAL_I2C_Init+0x92>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4a7d      	ldr	r2, [pc, #500]	; (80042b4 <HAL_I2C_Init+0x27c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	bf94      	ite	ls
 80040c4:	2301      	movls	r3, #1
 80040c6:	2300      	movhi	r3, #0
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e0e7      	b.n	80042a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4a78      	ldr	r2, [pc, #480]	; (80042b8 <HAL_I2C_Init+0x280>)
 80040d6:	fba2 2303 	umull	r2, r3, r2, r3
 80040da:	0c9b      	lsrs	r3, r3, #18
 80040dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	4a6a      	ldr	r2, [pc, #424]	; (80042ac <HAL_I2C_Init+0x274>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d802      	bhi.n	800410c <HAL_I2C_Init+0xd4>
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	3301      	adds	r3, #1
 800410a:	e009      	b.n	8004120 <HAL_I2C_Init+0xe8>
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004112:	fb02 f303 	mul.w	r3, r2, r3
 8004116:	4a69      	ldr	r2, [pc, #420]	; (80042bc <HAL_I2C_Init+0x284>)
 8004118:	fba2 2303 	umull	r2, r3, r2, r3
 800411c:	099b      	lsrs	r3, r3, #6
 800411e:	3301      	adds	r3, #1
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6812      	ldr	r2, [r2, #0]
 8004124:	430b      	orrs	r3, r1
 8004126:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004132:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	495c      	ldr	r1, [pc, #368]	; (80042ac <HAL_I2C_Init+0x274>)
 800413c:	428b      	cmp	r3, r1
 800413e:	d819      	bhi.n	8004174 <HAL_I2C_Init+0x13c>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	1e59      	subs	r1, r3, #1
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	fbb1 f3f3 	udiv	r3, r1, r3
 800414e:	1c59      	adds	r1, r3, #1
 8004150:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004154:	400b      	ands	r3, r1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_I2C_Init+0x138>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	1e59      	subs	r1, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	fbb1 f3f3 	udiv	r3, r1, r3
 8004168:	3301      	adds	r3, #1
 800416a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800416e:	e051      	b.n	8004214 <HAL_I2C_Init+0x1dc>
 8004170:	2304      	movs	r3, #4
 8004172:	e04f      	b.n	8004214 <HAL_I2C_Init+0x1dc>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d111      	bne.n	80041a0 <HAL_I2C_Init+0x168>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	1e58      	subs	r0, r3, #1
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6859      	ldr	r1, [r3, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	440b      	add	r3, r1
 800418a:	fbb0 f3f3 	udiv	r3, r0, r3
 800418e:	3301      	adds	r3, #1
 8004190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004194:	2b00      	cmp	r3, #0
 8004196:	bf0c      	ite	eq
 8004198:	2301      	moveq	r3, #1
 800419a:	2300      	movne	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	e012      	b.n	80041c6 <HAL_I2C_Init+0x18e>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	1e58      	subs	r0, r3, #1
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6859      	ldr	r1, [r3, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	0099      	lsls	r1, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b6:	3301      	adds	r3, #1
 80041b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041bc:	2b00      	cmp	r3, #0
 80041be:	bf0c      	ite	eq
 80041c0:	2301      	moveq	r3, #1
 80041c2:	2300      	movne	r3, #0
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_I2C_Init+0x196>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e022      	b.n	8004214 <HAL_I2C_Init+0x1dc>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10e      	bne.n	80041f4 <HAL_I2C_Init+0x1bc>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	1e58      	subs	r0, r3, #1
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6859      	ldr	r1, [r3, #4]
 80041de:	460b      	mov	r3, r1
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	440b      	add	r3, r1
 80041e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80041e8:	3301      	adds	r3, #1
 80041ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041f2:	e00f      	b.n	8004214 <HAL_I2C_Init+0x1dc>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	1e58      	subs	r0, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6859      	ldr	r1, [r3, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	440b      	add	r3, r1
 8004202:	0099      	lsls	r1, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	fbb0 f3f3 	udiv	r3, r0, r3
 800420a:	3301      	adds	r3, #1
 800420c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004210:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	6809      	ldr	r1, [r1, #0]
 8004218:	4313      	orrs	r3, r2
 800421a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	69da      	ldr	r2, [r3, #28]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004242:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6911      	ldr	r1, [r2, #16]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	68d2      	ldr	r2, [r2, #12]
 800424e:	4311      	orrs	r1, r2
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6812      	ldr	r2, [r2, #0]
 8004254:	430b      	orrs	r3, r1
 8004256:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	695a      	ldr	r2, [r3, #20]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0201 	orr.w	r2, r2, #1
 8004282:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2220      	movs	r2, #32
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	000186a0 	.word	0x000186a0
 80042b0:	001e847f 	.word	0x001e847f
 80042b4:	003d08ff 	.word	0x003d08ff
 80042b8:	431bde83 	.word	0x431bde83
 80042bc:	10624dd3 	.word	0x10624dd3

080042c0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e021      	b.n	8004316 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2224      	movs	r2, #36	; 0x24
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0201 	bic.w	r2, r2, #1
 80042e8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7fc feb8 	bl	8001060 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af02      	add	r7, sp, #8
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	4608      	mov	r0, r1
 800432a:	4611      	mov	r1, r2
 800432c:	461a      	mov	r2, r3
 800432e:	4603      	mov	r3, r0
 8004330:	817b      	strh	r3, [r7, #10]
 8004332:	460b      	mov	r3, r1
 8004334:	813b      	strh	r3, [r7, #8]
 8004336:	4613      	mov	r3, r2
 8004338:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800433a:	f7fd fecb 	bl	80020d4 <HAL_GetTick>
 800433e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b20      	cmp	r3, #32
 800434a:	f040 80d9 	bne.w	8004500 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	2319      	movs	r3, #25
 8004354:	2201      	movs	r2, #1
 8004356:	496d      	ldr	r1, [pc, #436]	; (800450c <HAL_I2C_Mem_Write+0x1ec>)
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 fc8d 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004364:	2302      	movs	r3, #2
 8004366:	e0cc      	b.n	8004502 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <HAL_I2C_Mem_Write+0x56>
 8004372:	2302      	movs	r3, #2
 8004374:	e0c5      	b.n	8004502 <HAL_I2C_Mem_Write+0x1e2>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b01      	cmp	r3, #1
 800438a:	d007      	beq.n	800439c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0201 	orr.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2221      	movs	r2, #33	; 0x21
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2240      	movs	r2, #64	; 0x40
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a3a      	ldr	r2, [r7, #32]
 80043c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80043cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4a4d      	ldr	r2, [pc, #308]	; (8004510 <HAL_I2C_Mem_Write+0x1f0>)
 80043dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043de:	88f8      	ldrh	r0, [r7, #6]
 80043e0:	893a      	ldrh	r2, [r7, #8]
 80043e2:	8979      	ldrh	r1, [r7, #10]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	9301      	str	r3, [sp, #4]
 80043e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	4603      	mov	r3, r0
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 fac4 	bl	800497c <I2C_RequestMemoryWrite>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d052      	beq.n	80044a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e081      	b.n	8004502 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 fd0e 	bl	8004e24 <I2C_WaitOnTXEFlagUntilTimeout>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00d      	beq.n	800442a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	2b04      	cmp	r3, #4
 8004414:	d107      	bne.n	8004426 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004424:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e06b      	b.n	8004502 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	781a      	ldrb	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b04      	cmp	r3, #4
 8004466:	d11b      	bne.n	80044a0 <HAL_I2C_Mem_Write+0x180>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800446c:	2b00      	cmp	r3, #0
 800446e:	d017      	beq.n	80044a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	781a      	ldrb	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448a:	3b01      	subs	r3, #1
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004496:	b29b      	uxth	r3, r3
 8004498:	3b01      	subs	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1aa      	bne.n	80043fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 fcfa 	bl	8004ea6 <I2C_WaitOnBTFFlagUntilTimeout>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00d      	beq.n	80044d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d107      	bne.n	80044d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e016      	b.n	8004502 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	e000      	b.n	8004502 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004500:	2302      	movs	r3, #2
  }
}
 8004502:	4618      	mov	r0, r3
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	00100002 	.word	0x00100002
 8004510:	ffff0000 	.word	0xffff0000

08004514 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b08c      	sub	sp, #48	; 0x30
 8004518:	af02      	add	r7, sp, #8
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	4608      	mov	r0, r1
 800451e:	4611      	mov	r1, r2
 8004520:	461a      	mov	r2, r3
 8004522:	4603      	mov	r3, r0
 8004524:	817b      	strh	r3, [r7, #10]
 8004526:	460b      	mov	r3, r1
 8004528:	813b      	strh	r3, [r7, #8]
 800452a:	4613      	mov	r3, r2
 800452c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800452e:	f7fd fdd1 	bl	80020d4 <HAL_GetTick>
 8004532:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b20      	cmp	r3, #32
 800453e:	f040 8208 	bne.w	8004952 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	2319      	movs	r3, #25
 8004548:	2201      	movs	r2, #1
 800454a:	497b      	ldr	r1, [pc, #492]	; (8004738 <HAL_I2C_Mem_Read+0x224>)
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 fb93 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004558:	2302      	movs	r3, #2
 800455a:	e1fb      	b.n	8004954 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004562:	2b01      	cmp	r3, #1
 8004564:	d101      	bne.n	800456a <HAL_I2C_Mem_Read+0x56>
 8004566:	2302      	movs	r3, #2
 8004568:	e1f4      	b.n	8004954 <HAL_I2C_Mem_Read+0x440>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b01      	cmp	r3, #1
 800457e:	d007      	beq.n	8004590 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800459e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2222      	movs	r2, #34	; 0x22
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2240      	movs	r2, #64	; 0x40
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80045c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4a5b      	ldr	r2, [pc, #364]	; (800473c <HAL_I2C_Mem_Read+0x228>)
 80045d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045d2:	88f8      	ldrh	r0, [r7, #6]
 80045d4:	893a      	ldrh	r2, [r7, #8]
 80045d6:	8979      	ldrh	r1, [r7, #10]
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	4603      	mov	r3, r0
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 fa60 	bl	8004aa8 <I2C_RequestMemoryRead>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e1b0      	b.n	8004954 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d113      	bne.n	8004622 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045fa:	2300      	movs	r3, #0
 80045fc:	623b      	str	r3, [r7, #32]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	623b      	str	r3, [r7, #32]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	623b      	str	r3, [r7, #32]
 800460e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	e184      	b.n	800492c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004626:	2b01      	cmp	r3, #1
 8004628:	d11b      	bne.n	8004662 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004638:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800463a:	2300      	movs	r3, #0
 800463c:	61fb      	str	r3, [r7, #28]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	61fb      	str	r3, [r7, #28]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	61fb      	str	r3, [r7, #28]
 800464e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	e164      	b.n	800492c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004666:	2b02      	cmp	r3, #2
 8004668:	d11b      	bne.n	80046a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004678:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004688:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800468a:	2300      	movs	r3, #0
 800468c:	61bb      	str	r3, [r7, #24]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	61bb      	str	r3, [r7, #24]
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	e144      	b.n	800492c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046a2:	2300      	movs	r3, #0
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80046b8:	e138      	b.n	800492c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046be:	2b03      	cmp	r3, #3
 80046c0:	f200 80f1 	bhi.w	80048a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d123      	bne.n	8004714 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 fc29 	bl	8004f28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e139      	b.n	8004954 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691a      	ldr	r2, [r3, #16]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004712:	e10b      	b.n	800492c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004718:	2b02      	cmp	r3, #2
 800471a:	d14e      	bne.n	80047ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004722:	2200      	movs	r2, #0
 8004724:	4906      	ldr	r1, [pc, #24]	; (8004740 <HAL_I2C_Mem_Read+0x22c>)
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 faa6 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d008      	beq.n	8004744 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e10e      	b.n	8004954 <HAL_I2C_Mem_Read+0x440>
 8004736:	bf00      	nop
 8004738:	00100002 	.word	0x00100002
 800473c:	ffff0000 	.word	0xffff0000
 8004740:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004752:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477c:	b29b      	uxth	r3, r3
 800477e:	3b01      	subs	r3, #1
 8004780:	b29a      	uxth	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	b2d2      	uxtb	r2, r2
 8004792:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a2:	3b01      	subs	r3, #1
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	3b01      	subs	r3, #1
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047b8:	e0b8      	b.n	800492c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c0:	2200      	movs	r2, #0
 80047c2:	4966      	ldr	r1, [pc, #408]	; (800495c <HAL_I2C_Mem_Read+0x448>)
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 fa57 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0bf      	b.n	8004954 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004800:	3b01      	subs	r3, #1
 8004802:	b29a      	uxth	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481c:	2200      	movs	r2, #0
 800481e:	494f      	ldr	r1, [pc, #316]	; (800495c <HAL_I2C_Mem_Read+0x448>)
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 fa29 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e091      	b.n	8004954 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800483e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691a      	ldr	r2, [r3, #16]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489a:	b29b      	uxth	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048a4:	e042      	b.n	800492c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 fb3c 	bl	8004f28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e04c      	b.n	8004954 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b29a      	uxth	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d118      	bne.n	800492c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004916:	3b01      	subs	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004930:	2b00      	cmp	r3, #0
 8004932:	f47f aec2 	bne.w	80046ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	e000      	b.n	8004954 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004952:	2302      	movs	r3, #2
  }
}
 8004954:	4618      	mov	r0, r3
 8004956:	3728      	adds	r7, #40	; 0x28
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	00010004 	.word	0x00010004

08004960 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800496e:	b2db      	uxtb	r3, r3
}
 8004970:	4618      	mov	r0, r3
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b088      	sub	sp, #32
 8004980:	af02      	add	r7, sp, #8
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	4608      	mov	r0, r1
 8004986:	4611      	mov	r1, r2
 8004988:	461a      	mov	r2, r3
 800498a:	4603      	mov	r3, r0
 800498c:	817b      	strh	r3, [r7, #10]
 800498e:	460b      	mov	r3, r1
 8004990:	813b      	strh	r3, [r7, #8]
 8004992:	4613      	mov	r3, r2
 8004994:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 f960 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00d      	beq.n	80049da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049cc:	d103      	bne.n	80049d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e05f      	b.n	8004a9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049da:	897b      	ldrh	r3, [r7, #10]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	461a      	mov	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	6a3a      	ldr	r2, [r7, #32]
 80049ee:	492d      	ldr	r1, [pc, #180]	; (8004aa4 <I2C_RequestMemoryWrite+0x128>)
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 f998 	bl	8004d26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e04c      	b.n	8004a9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a00:	2300      	movs	r3, #0
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a18:	6a39      	ldr	r1, [r7, #32]
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 fa02 	bl	8004e24 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00d      	beq.n	8004a42 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d107      	bne.n	8004a3e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e02b      	b.n	8004a9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a42:	88fb      	ldrh	r3, [r7, #6]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d105      	bne.n	8004a54 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a48:	893b      	ldrh	r3, [r7, #8]
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	611a      	str	r2, [r3, #16]
 8004a52:	e021      	b.n	8004a98 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a54:	893b      	ldrh	r3, [r7, #8]
 8004a56:	0a1b      	lsrs	r3, r3, #8
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a64:	6a39      	ldr	r1, [r7, #32]
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 f9dc 	bl	8004e24 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00d      	beq.n	8004a8e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d107      	bne.n	8004a8a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e005      	b.n	8004a9a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a8e:	893b      	ldrh	r3, [r7, #8]
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	00010002 	.word	0x00010002

08004aa8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	4608      	mov	r0, r1
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	817b      	strh	r3, [r7, #10]
 8004aba:	460b      	mov	r3, r1
 8004abc:	813b      	strh	r3, [r7, #8]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ad0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ae0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 f8c2 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00d      	beq.n	8004b16 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b08:	d103      	bne.n	8004b12 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e0aa      	b.n	8004c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b16:	897b      	ldrh	r3, [r7, #10]
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	6a3a      	ldr	r2, [r7, #32]
 8004b2a:	4952      	ldr	r1, [pc, #328]	; (8004c74 <I2C_RequestMemoryRead+0x1cc>)
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f000 f8fa 	bl	8004d26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e097      	b.n	8004c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b54:	6a39      	ldr	r1, [r7, #32]
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f964 	bl	8004e24 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00d      	beq.n	8004b7e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d107      	bne.n	8004b7a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e076      	b.n	8004c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b7e:	88fb      	ldrh	r3, [r7, #6]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d105      	bne.n	8004b90 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b84:	893b      	ldrh	r3, [r7, #8]
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	611a      	str	r2, [r3, #16]
 8004b8e:	e021      	b.n	8004bd4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b90:	893b      	ldrh	r3, [r7, #8]
 8004b92:	0a1b      	lsrs	r3, r3, #8
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba0:	6a39      	ldr	r1, [r7, #32]
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 f93e 	bl	8004e24 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00d      	beq.n	8004bca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d107      	bne.n	8004bc6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e050      	b.n	8004c6c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bca:	893b      	ldrh	r3, [r7, #8]
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd6:	6a39      	ldr	r1, [r7, #32]
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f923 	bl	8004e24 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00d      	beq.n	8004c00 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d107      	bne.n	8004bfc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bfa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e035      	b.n	8004c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c0e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 f82b 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00d      	beq.n	8004c44 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c36:	d103      	bne.n	8004c40 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e013      	b.n	8004c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c44:	897b      	ldrh	r3, [r7, #10]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	f043 0301 	orr.w	r3, r3, #1
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	6a3a      	ldr	r2, [r7, #32]
 8004c58:	4906      	ldr	r1, [pc, #24]	; (8004c74 <I2C_RequestMemoryRead+0x1cc>)
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 f863 	bl	8004d26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	00010002 	.word	0x00010002

08004c78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	4613      	mov	r3, r2
 8004c86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c88:	e025      	b.n	8004cd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d021      	beq.n	8004cd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c92:	f7fd fa1f 	bl	80020d4 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d302      	bcc.n	8004ca8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d116      	bne.n	8004cd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	f043 0220 	orr.w	r2, r3, #32
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e023      	b.n	8004d1e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	0c1b      	lsrs	r3, r3, #16
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d10d      	bne.n	8004cfc <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	43da      	mvns	r2, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	4013      	ands	r3, r2
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	bf0c      	ite	eq
 8004cf2:	2301      	moveq	r3, #1
 8004cf4:	2300      	movne	r3, #0
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	e00c      	b.n	8004d16 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	43da      	mvns	r2, r3
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	4013      	ands	r3, r2
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	bf0c      	ite	eq
 8004d0e:	2301      	moveq	r3, #1
 8004d10:	2300      	movne	r3, #0
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	461a      	mov	r2, r3
 8004d16:	79fb      	ldrb	r3, [r7, #7]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d0b6      	beq.n	8004c8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b084      	sub	sp, #16
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	60f8      	str	r0, [r7, #12]
 8004d2e:	60b9      	str	r1, [r7, #8]
 8004d30:	607a      	str	r2, [r7, #4]
 8004d32:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d34:	e051      	b.n	8004dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d44:	d123      	bne.n	8004d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d54:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d5e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	f043 0204 	orr.w	r2, r3, #4
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e046      	b.n	8004e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d94:	d021      	beq.n	8004dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d96:	f7fd f99d 	bl	80020d4 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d302      	bcc.n	8004dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d116      	bne.n	8004dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	f043 0220 	orr.w	r2, r3, #32
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e020      	b.n	8004e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	0c1b      	lsrs	r3, r3, #16
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d10c      	bne.n	8004dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	43da      	mvns	r2, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4013      	ands	r3, r2
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	bf14      	ite	ne
 8004df6:	2301      	movne	r3, #1
 8004df8:	2300      	moveq	r3, #0
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	e00b      	b.n	8004e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	43da      	mvns	r2, r3
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	bf14      	ite	ne
 8004e10:	2301      	movne	r3, #1
 8004e12:	2300      	moveq	r3, #0
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d18d      	bne.n	8004d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e30:	e02d      	b.n	8004e8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 f8ce 	bl	8004fd4 <I2C_IsAcknowledgeFailed>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e02d      	b.n	8004e9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e48:	d021      	beq.n	8004e8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e4a:	f7fd f943 	bl	80020d4 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d302      	bcc.n	8004e60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d116      	bne.n	8004e8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	f043 0220 	orr.w	r2, r3, #32
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e007      	b.n	8004e9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e98:	2b80      	cmp	r3, #128	; 0x80
 8004e9a:	d1ca      	bne.n	8004e32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004eb2:	e02d      	b.n	8004f10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f000 f88d 	bl	8004fd4 <I2C_IsAcknowledgeFailed>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e02d      	b.n	8004f20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eca:	d021      	beq.n	8004f10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ecc:	f7fd f902 	bl	80020d4 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d302      	bcc.n	8004ee2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d116      	bne.n	8004f10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efc:	f043 0220 	orr.w	r2, r3, #32
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e007      	b.n	8004f20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d1ca      	bne.n	8004eb4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f34:	e042      	b.n	8004fbc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	f003 0310 	and.w	r3, r3, #16
 8004f40:	2b10      	cmp	r3, #16
 8004f42:	d119      	bne.n	8004f78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f06f 0210 	mvn.w	r2, #16
 8004f4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e029      	b.n	8004fcc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f78:	f7fd f8ac 	bl	80020d4 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d302      	bcc.n	8004f8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d116      	bne.n	8004fbc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa8:	f043 0220 	orr.w	r2, r3, #32
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e007      	b.n	8004fcc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	d1b5      	bne.n	8004f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fea:	d11b      	bne.n	8005024 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ff4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	f043 0204 	orr.w	r2, r3, #4
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
	...

08005034 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b088      	sub	sp, #32
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e128      	b.n	8005298 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d109      	bne.n	8005066 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a90      	ldr	r2, [pc, #576]	; (80052a0 <HAL_I2S_Init+0x26c>)
 800505e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7fc f81f 	bl	80010a4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2202      	movs	r2, #2
 800506a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6812      	ldr	r2, [r2, #0]
 8005078:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800507c:	f023 030f 	bic.w	r3, r3, #15
 8005080:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2202      	movs	r2, #2
 8005088:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d060      	beq.n	8005154 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d102      	bne.n	80050a0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800509a:	2310      	movs	r3, #16
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	e001      	b.n	80050a4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80050a0:	2320      	movs	r3, #32
 80050a2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d802      	bhi.n	80050b2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80050b2:	2001      	movs	r0, #1
 80050b4:	f000 fc7e 	bl	80059b4 <HAL_RCCEx_GetPeriphCLKFreq>
 80050b8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c2:	d125      	bne.n	8005110 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d010      	beq.n	80050ee <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80050d6:	4613      	mov	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	461a      	mov	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e8:	3305      	adds	r3, #5
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	e01f      	b.n	800512e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	461a      	mov	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	fbb2 f3f3 	udiv	r3, r2, r3
 800510a:	3305      	adds	r3, #5
 800510c:	613b      	str	r3, [r7, #16]
 800510e:	e00e      	b.n	800512e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	fbb2 f2f3 	udiv	r2, r2, r3
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	461a      	mov	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	fbb2 f3f3 	udiv	r3, r2, r3
 800512a:	3305      	adds	r3, #5
 800512c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	4a5c      	ldr	r2, [pc, #368]	; (80052a4 <HAL_I2S_Init+0x270>)
 8005132:	fba2 2303 	umull	r2, r3, r2, r3
 8005136:	08db      	lsrs	r3, r3, #3
 8005138:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	085b      	lsrs	r3, r3, #1
 800514a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	021b      	lsls	r3, r3, #8
 8005150:	61bb      	str	r3, [r7, #24]
 8005152:	e003      	b.n	800515c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005154:	2302      	movs	r3, #2
 8005156:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005158:	2300      	movs	r3, #0
 800515a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d902      	bls.n	8005168 <HAL_I2S_Init+0x134>
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	2bff      	cmp	r3, #255	; 0xff
 8005166:	d907      	bls.n	8005178 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516c:	f043 0210 	orr.w	r2, r3, #16
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e08f      	b.n	8005298 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691a      	ldr	r2, [r3, #16]
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	ea42 0103 	orr.w	r1, r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69fa      	ldr	r2, [r7, #28]
 8005188:	430a      	orrs	r2, r1
 800518a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005196:	f023 030f 	bic.w	r3, r3, #15
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	6851      	ldr	r1, [r2, #4]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6892      	ldr	r2, [r2, #8]
 80051a2:	4311      	orrs	r1, r2
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	68d2      	ldr	r2, [r2, #12]
 80051a8:	4311      	orrs	r1, r2
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6992      	ldr	r2, [r2, #24]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	431a      	orrs	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051ba:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d161      	bne.n	8005288 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a38      	ldr	r2, [pc, #224]	; (80052a8 <HAL_I2S_Init+0x274>)
 80051c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a37      	ldr	r2, [pc, #220]	; (80052ac <HAL_I2S_Init+0x278>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d101      	bne.n	80051d8 <HAL_I2S_Init+0x1a4>
 80051d4:	4b36      	ldr	r3, [pc, #216]	; (80052b0 <HAL_I2S_Init+0x27c>)
 80051d6:	e001      	b.n	80051dc <HAL_I2S_Init+0x1a8>
 80051d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6812      	ldr	r2, [r2, #0]
 80051e2:	4932      	ldr	r1, [pc, #200]	; (80052ac <HAL_I2S_Init+0x278>)
 80051e4:	428a      	cmp	r2, r1
 80051e6:	d101      	bne.n	80051ec <HAL_I2S_Init+0x1b8>
 80051e8:	4a31      	ldr	r2, [pc, #196]	; (80052b0 <HAL_I2S_Init+0x27c>)
 80051ea:	e001      	b.n	80051f0 <HAL_I2S_Init+0x1bc>
 80051ec:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80051f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80051f4:	f023 030f 	bic.w	r3, r3, #15
 80051f8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a2b      	ldr	r2, [pc, #172]	; (80052ac <HAL_I2S_Init+0x278>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d101      	bne.n	8005208 <HAL_I2S_Init+0x1d4>
 8005204:	4b2a      	ldr	r3, [pc, #168]	; (80052b0 <HAL_I2S_Init+0x27c>)
 8005206:	e001      	b.n	800520c <HAL_I2S_Init+0x1d8>
 8005208:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800520c:	2202      	movs	r2, #2
 800520e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a25      	ldr	r2, [pc, #148]	; (80052ac <HAL_I2S_Init+0x278>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d101      	bne.n	800521e <HAL_I2S_Init+0x1ea>
 800521a:	4b25      	ldr	r3, [pc, #148]	; (80052b0 <HAL_I2S_Init+0x27c>)
 800521c:	e001      	b.n	8005222 <HAL_I2S_Init+0x1ee>
 800521e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800522e:	d003      	beq.n	8005238 <HAL_I2S_Init+0x204>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d103      	bne.n	8005240 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800523c:	613b      	str	r3, [r7, #16]
 800523e:	e001      	b.n	8005244 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005240:	2300      	movs	r3, #0
 8005242:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800524e:	4313      	orrs	r3, r2
 8005250:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005258:	4313      	orrs	r3, r2
 800525a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005262:	4313      	orrs	r3, r2
 8005264:	b29a      	uxth	r2, r3
 8005266:	897b      	ldrh	r3, [r7, #10]
 8005268:	4313      	orrs	r3, r2
 800526a:	b29b      	uxth	r3, r3
 800526c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005270:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a0d      	ldr	r2, [pc, #52]	; (80052ac <HAL_I2S_Init+0x278>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d101      	bne.n	8005280 <HAL_I2S_Init+0x24c>
 800527c:	4b0c      	ldr	r3, [pc, #48]	; (80052b0 <HAL_I2S_Init+0x27c>)
 800527e:	e001      	b.n	8005284 <HAL_I2S_Init+0x250>
 8005280:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005284:	897a      	ldrh	r2, [r7, #10]
 8005286:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3720      	adds	r7, #32
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	080053ab 	.word	0x080053ab
 80052a4:	cccccccd 	.word	0xcccccccd
 80052a8:	080054c1 	.word	0x080054c1
 80052ac:	40003800 	.word	0x40003800
 80052b0:	40003400 	.word	0x40003400

080052b4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	881a      	ldrh	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	1c9a      	adds	r2, r3, #2
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005312:	b29b      	uxth	r3, r3
 8005314:	3b01      	subs	r3, #1
 8005316:	b29a      	uxth	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005320:	b29b      	uxth	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10e      	bne.n	8005344 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005334:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7ff ffb8 	bl	80052b4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005344:	bf00      	nop
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	b292      	uxth	r2, r2
 8005360:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005366:	1c9a      	adds	r2, r3, #2
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005370:	b29b      	uxth	r3, r3
 8005372:	3b01      	subs	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800537e:	b29b      	uxth	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10e      	bne.n	80053a2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005392:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7ff ff93 	bl	80052c8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80053a2:	bf00      	nop
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b086      	sub	sp, #24
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d13a      	bne.n	800543c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d109      	bne.n	80053e4 <I2S_IRQHandler+0x3a>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053da:	2b40      	cmp	r3, #64	; 0x40
 80053dc:	d102      	bne.n	80053e4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7ff ffb4 	bl	800534c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	d126      	bne.n	800543c <I2S_IRQHandler+0x92>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f003 0320 	and.w	r3, r3, #32
 80053f8:	2b20      	cmp	r3, #32
 80053fa:	d11f      	bne.n	800543c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800540a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800540c:	2300      	movs	r3, #0
 800540e:	613b      	str	r3, [r7, #16]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	613b      	str	r3, [r7, #16]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	613b      	str	r3, [r7, #16]
 8005420:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542e:	f043 0202 	orr.w	r2, r3, #2
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7ff ff50 	bl	80052dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b03      	cmp	r3, #3
 8005446:	d136      	bne.n	80054b6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b02      	cmp	r3, #2
 8005450:	d109      	bne.n	8005466 <I2S_IRQHandler+0xbc>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545c:	2b80      	cmp	r3, #128	; 0x80
 800545e:	d102      	bne.n	8005466 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7ff ff45 	bl	80052f0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f003 0308 	and.w	r3, r3, #8
 800546c:	2b08      	cmp	r3, #8
 800546e:	d122      	bne.n	80054b6 <I2S_IRQHandler+0x10c>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b20      	cmp	r3, #32
 800547c:	d11b      	bne.n	80054b6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800548c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a8:	f043 0204 	orr.w	r2, r3, #4
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff ff13 	bl	80052dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80054b6:	bf00      	nop
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b088      	sub	sp, #32
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a92      	ldr	r2, [pc, #584]	; (8005720 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d101      	bne.n	80054de <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80054da:	4b92      	ldr	r3, [pc, #584]	; (8005724 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80054dc:	e001      	b.n	80054e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80054de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a8b      	ldr	r2, [pc, #556]	; (8005720 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d101      	bne.n	80054fc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80054f8:	4b8a      	ldr	r3, [pc, #552]	; (8005724 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80054fa:	e001      	b.n	8005500 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80054fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800550c:	d004      	beq.n	8005518 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	f040 8099 	bne.w	800564a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b02      	cmp	r3, #2
 8005520:	d107      	bne.n	8005532 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f925 	bl	800577c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b01      	cmp	r3, #1
 800553a:	d107      	bne.n	800554c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	d002      	beq.n	800554c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f9c8 	bl	80058dc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005552:	2b40      	cmp	r3, #64	; 0x40
 8005554:	d13a      	bne.n	80055cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f003 0320 	and.w	r3, r3, #32
 800555c:	2b00      	cmp	r3, #0
 800555e:	d035      	beq.n	80055cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a6e      	ldr	r2, [pc, #440]	; (8005720 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d101      	bne.n	800556e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800556a:	4b6e      	ldr	r3, [pc, #440]	; (8005724 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800556c:	e001      	b.n	8005572 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800556e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4969      	ldr	r1, [pc, #420]	; (8005720 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800557a:	428b      	cmp	r3, r1
 800557c:	d101      	bne.n	8005582 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800557e:	4b69      	ldr	r3, [pc, #420]	; (8005724 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005580:	e001      	b.n	8005586 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005582:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005586:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800558a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800559a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800559c:	2300      	movs	r3, #0
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055be:	f043 0202 	orr.w	r2, r3, #2
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7ff fe88 	bl	80052dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b08      	cmp	r3, #8
 80055d4:	f040 80c3 	bne.w	800575e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 80bd 	beq.w	800575e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80055f2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a49      	ldr	r2, [pc, #292]	; (8005720 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d101      	bne.n	8005602 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80055fe:	4b49      	ldr	r3, [pc, #292]	; (8005724 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005600:	e001      	b.n	8005606 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005602:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4944      	ldr	r1, [pc, #272]	; (8005720 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800560e:	428b      	cmp	r3, r1
 8005610:	d101      	bne.n	8005616 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005612:	4b44      	ldr	r3, [pc, #272]	; (8005724 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005614:	e001      	b.n	800561a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005616:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800561a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800561e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005620:	2300      	movs	r3, #0
 8005622:	60bb      	str	r3, [r7, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	60bb      	str	r3, [r7, #8]
 800562c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563a:	f043 0204 	orr.w	r2, r3, #4
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7ff fe4a 	bl	80052dc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005648:	e089      	b.n	800575e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b02      	cmp	r3, #2
 8005652:	d107      	bne.n	8005664 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f8be 	bl	80057e0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b01      	cmp	r3, #1
 800566c:	d107      	bne.n	800567e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f8fd 	bl	8005878 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005684:	2b40      	cmp	r3, #64	; 0x40
 8005686:	d12f      	bne.n	80056e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b00      	cmp	r3, #0
 8005690:	d02a      	beq.n	80056e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80056a0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a1e      	ldr	r2, [pc, #120]	; (8005720 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d101      	bne.n	80056b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80056ac:	4b1d      	ldr	r3, [pc, #116]	; (8005724 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056ae:	e001      	b.n	80056b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80056b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4919      	ldr	r1, [pc, #100]	; (8005720 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056bc:	428b      	cmp	r3, r1
 80056be:	d101      	bne.n	80056c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80056c0:	4b18      	ldr	r3, [pc, #96]	; (8005724 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056c2:	e001      	b.n	80056c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80056c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056cc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056da:	f043 0202 	orr.w	r2, r3, #2
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7ff fdfa 	bl	80052dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	f003 0308 	and.w	r3, r3, #8
 80056ee:	2b08      	cmp	r3, #8
 80056f0:	d136      	bne.n	8005760 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f003 0320 	and.w	r3, r3, #32
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d031      	beq.n	8005760 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a07      	ldr	r2, [pc, #28]	; (8005720 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d101      	bne.n	800570a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005706:	4b07      	ldr	r3, [pc, #28]	; (8005724 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005708:	e001      	b.n	800570e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800570a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4902      	ldr	r1, [pc, #8]	; (8005720 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005716:	428b      	cmp	r3, r1
 8005718:	d106      	bne.n	8005728 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800571a:	4b02      	ldr	r3, [pc, #8]	; (8005724 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800571c:	e006      	b.n	800572c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800571e:	bf00      	nop
 8005720:	40003800 	.word	0x40003800
 8005724:	40003400 	.word	0x40003400
 8005728:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800572c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005730:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005740:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574e:	f043 0204 	orr.w	r2, r3, #4
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff fdc0 	bl	80052dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800575c:	e000      	b.n	8005760 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800575e:	bf00      	nop
}
 8005760:	bf00      	nop
 8005762:	3720      	adds	r7, #32
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	1c99      	adds	r1, r3, #2
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	6251      	str	r1, [r2, #36]	; 0x24
 800578e:	881a      	ldrh	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579a:	b29b      	uxth	r3, r3
 800579c:	3b01      	subs	r3, #1
 800579e:	b29a      	uxth	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d113      	bne.n	80057d6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d106      	bne.n	80057d6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f7ff ffc9 	bl	8005768 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80057d6:	bf00      	nop
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
	...

080057e0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	1c99      	adds	r1, r3, #2
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	6251      	str	r1, [r2, #36]	; 0x24
 80057f2:	8819      	ldrh	r1, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a1d      	ldr	r2, [pc, #116]	; (8005870 <I2SEx_TxISR_I2SExt+0x90>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d101      	bne.n	8005802 <I2SEx_TxISR_I2SExt+0x22>
 80057fe:	4b1d      	ldr	r3, [pc, #116]	; (8005874 <I2SEx_TxISR_I2SExt+0x94>)
 8005800:	e001      	b.n	8005806 <I2SEx_TxISR_I2SExt+0x26>
 8005802:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005806:	460a      	mov	r2, r1
 8005808:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800580e:	b29b      	uxth	r3, r3
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581c:	b29b      	uxth	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d121      	bne.n	8005866 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a12      	ldr	r2, [pc, #72]	; (8005870 <I2SEx_TxISR_I2SExt+0x90>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d101      	bne.n	8005830 <I2SEx_TxISR_I2SExt+0x50>
 800582c:	4b11      	ldr	r3, [pc, #68]	; (8005874 <I2SEx_TxISR_I2SExt+0x94>)
 800582e:	e001      	b.n	8005834 <I2SEx_TxISR_I2SExt+0x54>
 8005830:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	490d      	ldr	r1, [pc, #52]	; (8005870 <I2SEx_TxISR_I2SExt+0x90>)
 800583c:	428b      	cmp	r3, r1
 800583e:	d101      	bne.n	8005844 <I2SEx_TxISR_I2SExt+0x64>
 8005840:	4b0c      	ldr	r3, [pc, #48]	; (8005874 <I2SEx_TxISR_I2SExt+0x94>)
 8005842:	e001      	b.n	8005848 <I2SEx_TxISR_I2SExt+0x68>
 8005844:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005848:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800584c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d106      	bne.n	8005866 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f7ff ff81 	bl	8005768 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005866:	bf00      	nop
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	40003800 	.word	0x40003800
 8005874:	40003400 	.word	0x40003400

08005878 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68d8      	ldr	r0, [r3, #12]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588a:	1c99      	adds	r1, r3, #2
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005890:	b282      	uxth	r2, r0
 8005892:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005898:	b29b      	uxth	r3, r3
 800589a:	3b01      	subs	r3, #1
 800589c:	b29a      	uxth	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d113      	bne.n	80058d4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80058ba:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d106      	bne.n	80058d4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7ff ff4a 	bl	8005768 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80058d4:	bf00      	nop
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a20      	ldr	r2, [pc, #128]	; (800596c <I2SEx_RxISR_I2SExt+0x90>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d101      	bne.n	80058f2 <I2SEx_RxISR_I2SExt+0x16>
 80058ee:	4b20      	ldr	r3, [pc, #128]	; (8005970 <I2SEx_RxISR_I2SExt+0x94>)
 80058f0:	e001      	b.n	80058f6 <I2SEx_RxISR_I2SExt+0x1a>
 80058f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058f6:	68d8      	ldr	r0, [r3, #12]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	1c99      	adds	r1, r3, #2
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005902:	b282      	uxth	r2, r0
 8005904:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800590a:	b29b      	uxth	r3, r3
 800590c:	3b01      	subs	r3, #1
 800590e:	b29a      	uxth	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d121      	bne.n	8005962 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a12      	ldr	r2, [pc, #72]	; (800596c <I2SEx_RxISR_I2SExt+0x90>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d101      	bne.n	800592c <I2SEx_RxISR_I2SExt+0x50>
 8005928:	4b11      	ldr	r3, [pc, #68]	; (8005970 <I2SEx_RxISR_I2SExt+0x94>)
 800592a:	e001      	b.n	8005930 <I2SEx_RxISR_I2SExt+0x54>
 800592c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	490d      	ldr	r1, [pc, #52]	; (800596c <I2SEx_RxISR_I2SExt+0x90>)
 8005938:	428b      	cmp	r3, r1
 800593a:	d101      	bne.n	8005940 <I2SEx_RxISR_I2SExt+0x64>
 800593c:	4b0c      	ldr	r3, [pc, #48]	; (8005970 <I2SEx_RxISR_I2SExt+0x94>)
 800593e:	e001      	b.n	8005944 <I2SEx_RxISR_I2SExt+0x68>
 8005940:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005944:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005948:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594e:	b29b      	uxth	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d106      	bne.n	8005962 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff ff03 	bl	8005768 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005962:	bf00      	nop
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	40003800 	.word	0x40003800
 8005970:	40003400 	.word	0x40003400

08005974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005974:	b480      	push	{r7}
 8005976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005978:	4b03      	ldr	r3, [pc, #12]	; (8005988 <HAL_RCC_GetHCLKFreq+0x14>)
 800597a:	681b      	ldr	r3, [r3, #0]
}
 800597c:	4618      	mov	r0, r3
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	20000000 	.word	0x20000000

0800598c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005990:	f7ff fff0 	bl	8005974 <HAL_RCC_GetHCLKFreq>
 8005994:	4602      	mov	r2, r0
 8005996:	4b05      	ldr	r3, [pc, #20]	; (80059ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	0a9b      	lsrs	r3, r3, #10
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	4903      	ldr	r1, [pc, #12]	; (80059b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059a2:	5ccb      	ldrb	r3, [r1, r3]
 80059a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	40023800 	.word	0x40023800
 80059b0:	08008440 	.word	0x08008440

080059b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80059c4:	2300      	movs	r3, #0
 80059c6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d140      	bne.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80059d2:	4b24      	ldr	r3, [pc, #144]	; (8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059da:	60fb      	str	r3, [r7, #12]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d005      	beq.n	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d131      	bne.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80059e8:	4b1f      	ldr	r3, [pc, #124]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80059ea:	617b      	str	r3, [r7, #20]
          break;
 80059ec:	e031      	b.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80059ee:	4b1d      	ldr	r3, [pc, #116]	; (8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059fa:	d109      	bne.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80059fc:	4b19      	ldr	r3, [pc, #100]	; (8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a06:	4a19      	ldr	r2, [pc, #100]	; (8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0c:	613b      	str	r3, [r7, #16]
 8005a0e:	e008      	b.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005a10:	4b14      	ldr	r3, [pc, #80]	; (8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a1a:	4a15      	ldr	r2, [pc, #84]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a20:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005a22:	4b10      	ldr	r3, [pc, #64]	; (8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a28:	099b      	lsrs	r3, r3, #6
 8005a2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	fb02 f303 	mul.w	r3, r2, r3
 8005a34:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005a36:	4b0b      	ldr	r3, [pc, #44]	; (8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a3c:	0f1b      	lsrs	r3, r3, #28
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a48:	617b      	str	r3, [r7, #20]
          break;
 8005a4a:	e002      	b.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	617b      	str	r3, [r7, #20]
          break;
 8005a50:	bf00      	nop
        }
      }
      break;
 8005a52:	bf00      	nop
    }
  }
  return frequency;
 8005a54:	697b      	ldr	r3, [r7, #20]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	371c      	adds	r7, #28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	40023800 	.word	0x40023800
 8005a68:	00bb8000 	.word	0x00bb8000
 8005a6c:	007a1200 	.word	0x007a1200
 8005a70:	00f42400 	.word	0x00f42400

08005a74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e07b      	b.n	8005b7e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d108      	bne.n	8005aa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a96:	d009      	beq.n	8005aac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	61da      	str	r2, [r3, #28]
 8005a9e:	e005      	b.n	8005aac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d106      	bne.n	8005acc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fb fbba 	bl	8001240 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ae2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005af4:	431a      	orrs	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005afe:	431a      	orrs	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b30:	ea42 0103 	orr.w	r1, r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	0c1b      	lsrs	r3, r3, #16
 8005b4a:	f003 0104 	and.w	r1, r3, #4
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	f003 0210 	and.w	r2, r3, #16
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69da      	ldr	r2, [r3, #28]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b86:	b084      	sub	sp, #16
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	f107 001c 	add.w	r0, r7, #28
 8005b94:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d122      	bne.n	8005be4 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d105      	bne.n	8005bd8 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f9bf 	bl	8005f5c <USB_CoreReset>
 8005bde:	4603      	mov	r3, r0
 8005be0:	73fb      	strb	r3, [r7, #15]
 8005be2:	e01a      	b.n	8005c1a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f9b3 	bl	8005f5c <USB_CoreReset>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d106      	bne.n	8005c0e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	639a      	str	r2, [r3, #56]	; 0x38
 8005c0c:	e005      	b.n	8005c1a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d10b      	bne.n	8005c38 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f043 0206 	orr.w	r2, r3, #6
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f043 0220 	orr.w	r2, r3, #32
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c44:	b004      	add	sp, #16
 8005c46:	4770      	bx	lr

08005c48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f043 0201 	orr.w	r2, r3, #1
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f023 0201 	bic.w	r2, r3, #1
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ca8:	78fb      	ldrb	r3, [r7, #3]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d115      	bne.n	8005cda <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005cba:	2001      	movs	r0, #1
 8005cbc:	f7fc fa16 	bl	80020ec <HAL_Delay>
      ms++;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f939 	bl	8005f3e <USB_GetMode>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d01e      	beq.n	8005d10 <USB_SetCurrentMode+0x84>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b31      	cmp	r3, #49	; 0x31
 8005cd6:	d9f0      	bls.n	8005cba <USB_SetCurrentMode+0x2e>
 8005cd8:	e01a      	b.n	8005d10 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005cda:	78fb      	ldrb	r3, [r7, #3]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d115      	bne.n	8005d0c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005cec:	2001      	movs	r0, #1
 8005cee:	f7fc f9fd 	bl	80020ec <HAL_Delay>
      ms++;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f920 	bl	8005f3e <USB_GetMode>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d005      	beq.n	8005d10 <USB_SetCurrentMode+0x84>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2b31      	cmp	r3, #49	; 0x31
 8005d08:	d9f0      	bls.n	8005cec <USB_SetCurrentMode+0x60>
 8005d0a:	e001      	b.n	8005d10 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e005      	b.n	8005d1c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b32      	cmp	r3, #50	; 0x32
 8005d14:	d101      	bne.n	8005d1a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e000      	b.n	8005d1c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	3301      	adds	r3, #1
 8005d36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4a13      	ldr	r2, [pc, #76]	; (8005d88 <USB_FlushTxFifo+0x64>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d901      	bls.n	8005d44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e01b      	b.n	8005d7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	daf2      	bge.n	8005d32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	019b      	lsls	r3, r3, #6
 8005d54:	f043 0220 	orr.w	r2, r3, #32
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4a08      	ldr	r2, [pc, #32]	; (8005d88 <USB_FlushTxFifo+0x64>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d901      	bls.n	8005d6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e006      	b.n	8005d7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	f003 0320 	and.w	r3, r3, #32
 8005d76:	2b20      	cmp	r3, #32
 8005d78:	d0f0      	beq.n	8005d5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	00030d40 	.word	0x00030d40

08005d8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4a11      	ldr	r2, [pc, #68]	; (8005de8 <USB_FlushRxFifo+0x5c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d901      	bls.n	8005daa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e018      	b.n	8005ddc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	daf2      	bge.n	8005d98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2210      	movs	r2, #16
 8005dba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4a08      	ldr	r2, [pc, #32]	; (8005de8 <USB_FlushRxFifo+0x5c>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d901      	bls.n	8005dce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e006      	b.n	8005ddc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f003 0310 	and.w	r3, r3, #16
 8005dd6:	2b10      	cmp	r3, #16
 8005dd8:	d0f0      	beq.n	8005dbc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	00030d40 	.word	0x00030d40

08005dec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b089      	sub	sp, #36	; 0x24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	4611      	mov	r1, r2
 8005df8:	461a      	mov	r2, r3
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	71fb      	strb	r3, [r7, #7]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d123      	bne.n	8005e5a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e12:	88bb      	ldrh	r3, [r7, #4]
 8005e14:	3303      	adds	r3, #3
 8005e16:	089b      	lsrs	r3, r3, #2
 8005e18:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	61bb      	str	r3, [r7, #24]
 8005e1e:	e018      	b.n	8005e52 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e20:	79fb      	ldrb	r3, [r7, #7]
 8005e22:	031a      	lsls	r2, r3, #12
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	3301      	adds	r3, #1
 8005e38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	3301      	adds	r3, #1
 8005e44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	61bb      	str	r3, [r7, #24]
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d3e2      	bcc.n	8005e20 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3724      	adds	r7, #36	; 0x24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b08b      	sub	sp, #44	; 0x2c
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	4613      	mov	r3, r2
 8005e74:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e7e:	88fb      	ldrh	r3, [r7, #6]
 8005e80:	089b      	lsrs	r3, r3, #2
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e86:	88fb      	ldrh	r3, [r7, #6]
 8005e88:	f003 0303 	and.w	r3, r3, #3
 8005e8c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e8e:	2300      	movs	r3, #0
 8005e90:	623b      	str	r3, [r7, #32]
 8005e92:	e014      	b.n	8005ebe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	3301      	adds	r3, #1
 8005eb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	623b      	str	r3, [r7, #32]
 8005ebe:	6a3a      	ldr	r2, [r7, #32]
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d3e6      	bcc.n	8005e94 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ec6:	8bfb      	ldrh	r3, [r7, #30]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d01e      	beq.n	8005f0a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f107 0310 	add.w	r3, r7, #16
 8005edc:	6812      	ldr	r2, [r2, #0]
 8005ede:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	701a      	strb	r2, [r3, #0]
      i++;
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	3301      	adds	r3, #1
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005efe:	8bfb      	ldrh	r3, [r7, #30]
 8005f00:	3b01      	subs	r3, #1
 8005f02:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f04:	8bfb      	ldrh	r3, [r7, #30]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1ea      	bne.n	8005ee0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	372c      	adds	r7, #44	; 0x2c
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f30:	68fb      	ldr	r3, [r7, #12]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
	...

08005f5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f64:	2300      	movs	r3, #0
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4a13      	ldr	r2, [pc, #76]	; (8005fc0 <USB_CoreReset+0x64>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d901      	bls.n	8005f7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e01b      	b.n	8005fb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	daf2      	bge.n	8005f68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f82:	2300      	movs	r3, #0
 8005f84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	f043 0201 	orr.w	r2, r3, #1
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	3301      	adds	r3, #1
 8005f96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4a09      	ldr	r2, [pc, #36]	; (8005fc0 <USB_CoreReset+0x64>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d901      	bls.n	8005fa4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e006      	b.n	8005fb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d0f0      	beq.n	8005f92 <USB_CoreReset+0x36>

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	00030d40 	.word	0x00030d40

08005fc4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fc4:	b084      	sub	sp, #16
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b086      	sub	sp, #24
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005fd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006006:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006016:	2b00      	cmp	r3, #0
 8006018:	d018      	beq.n	800604c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800601a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601c:	2b01      	cmp	r3, #1
 800601e:	d10a      	bne.n	8006036 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800602e:	f043 0304 	orr.w	r3, r3, #4
 8006032:	6013      	str	r3, [r2, #0]
 8006034:	e014      	b.n	8006060 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006044:	f023 0304 	bic.w	r3, r3, #4
 8006048:	6013      	str	r3, [r2, #0]
 800604a:	e009      	b.n	8006060 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800605a:	f023 0304 	bic.w	r3, r3, #4
 800605e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006060:	2110      	movs	r1, #16
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7ff fe5e 	bl	8005d24 <USB_FlushTxFifo>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7ff fe8a 	bl	8005d8c <USB_FlushRxFifo>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006082:	2300      	movs	r3, #0
 8006084:	613b      	str	r3, [r7, #16]
 8006086:	e015      	b.n	80060b4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4413      	add	r3, r2
 8006090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006094:	461a      	mov	r2, r3
 8006096:	f04f 33ff 	mov.w	r3, #4294967295
 800609a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a8:	461a      	mov	r2, r3
 80060aa:	2300      	movs	r3, #0
 80060ac:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	3301      	adds	r3, #1
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d3e5      	bcc.n	8006088 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f04f 32ff 	mov.w	r2, #4294967295
 80060c8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00b      	beq.n	80060ee <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060dc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a13      	ldr	r2, [pc, #76]	; (8006130 <USB_HostInit+0x16c>)
 80060e2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a13      	ldr	r2, [pc, #76]	; (8006134 <USB_HostInit+0x170>)
 80060e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80060ec:	e009      	b.n	8006102 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2280      	movs	r2, #128	; 0x80
 80060f2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a10      	ldr	r2, [pc, #64]	; (8006138 <USB_HostInit+0x174>)
 80060f8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a0f      	ldr	r2, [pc, #60]	; (800613c <USB_HostInit+0x178>)
 80060fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	2b00      	cmp	r3, #0
 8006106:	d105      	bne.n	8006114 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	f043 0210 	orr.w	r2, r3, #16
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	699a      	ldr	r2, [r3, #24]
 8006118:	4b09      	ldr	r3, [pc, #36]	; (8006140 <USB_HostInit+0x17c>)
 800611a:	4313      	orrs	r3, r2
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006120:	7dfb      	ldrb	r3, [r7, #23]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3718      	adds	r7, #24
 8006126:	46bd      	mov	sp, r7
 8006128:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800612c:	b004      	add	sp, #16
 800612e:	4770      	bx	lr
 8006130:	01000200 	.word	0x01000200
 8006134:	00e00300 	.word	0x00e00300
 8006138:	00600080 	.word	0x00600080
 800613c:	004000e0 	.word	0x004000e0
 8006140:	a3200008 	.word	0xa3200008

08006144 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006162:	f023 0303 	bic.w	r3, r3, #3
 8006166:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	f003 0303 	and.w	r3, r3, #3
 8006176:	68f9      	ldr	r1, [r7, #12]
 8006178:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800617c:	4313      	orrs	r3, r2
 800617e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006180:	78fb      	ldrb	r3, [r7, #3]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d107      	bne.n	8006196 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800618c:	461a      	mov	r2, r3
 800618e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006192:	6053      	str	r3, [r2, #4]
 8006194:	e009      	b.n	80061aa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006196:	78fb      	ldrb	r3, [r7, #3]
 8006198:	2b02      	cmp	r3, #2
 800619a:	d106      	bne.n	80061aa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061a2:	461a      	mov	r2, r3
 80061a4:	f241 7370 	movw	r3, #6000	; 0x1770
 80061a8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	460b      	mov	r3, r1
 80061c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80061c8:	2300      	movs	r3, #0
 80061ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80061dc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d109      	bne.n	80061fc <USB_DriveVbus+0x44>
 80061e8:	78fb      	ldrb	r3, [r7, #3]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d106      	bne.n	80061fc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80061f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061fa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006206:	d109      	bne.n	800621c <USB_DriveVbus+0x64>
 8006208:	78fb      	ldrb	r3, [r7, #3]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d106      	bne.n	800621c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006216:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800621a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800622a:	b480      	push	{r7}
 800622c:	b085      	sub	sp, #20
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	0c5b      	lsrs	r3, r3, #17
 8006248:	f003 0303 	and.w	r3, r3, #3
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	b29b      	uxth	r3, r3
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
	...

0800627c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b088      	sub	sp, #32
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	4608      	mov	r0, r1
 8006286:	4611      	mov	r1, r2
 8006288:	461a      	mov	r2, r3
 800628a:	4603      	mov	r3, r0
 800628c:	70fb      	strb	r3, [r7, #3]
 800628e:	460b      	mov	r3, r1
 8006290:	70bb      	strb	r3, [r7, #2]
 8006292:	4613      	mov	r3, r2
 8006294:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800629e:	78fb      	ldrb	r3, [r7, #3]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062aa:	461a      	mov	r2, r3
 80062ac:	f04f 33ff 	mov.w	r3, #4294967295
 80062b0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80062b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	d87e      	bhi.n	80063b8 <USB_HC_Init+0x13c>
 80062ba:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <USB_HC_Init+0x44>)
 80062bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c0:	080062d1 	.word	0x080062d1
 80062c4:	0800637b 	.word	0x0800637b
 80062c8:	080062d1 	.word	0x080062d1
 80062cc:	0800633d 	.word	0x0800633d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062d0:	78fb      	ldrb	r3, [r7, #3]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062dc:	461a      	mov	r2, r3
 80062de:	f240 439d 	movw	r3, #1181	; 0x49d
 80062e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80062e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	da10      	bge.n	800630e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80062ec:	78fb      	ldrb	r3, [r7, #3]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	78fa      	ldrb	r2, [r7, #3]
 80062fc:	0151      	lsls	r1, r2, #5
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	440a      	add	r2, r1
 8006302:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800630a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800630c:	e057      	b.n	80063be <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006316:	2b00      	cmp	r3, #0
 8006318:	d051      	beq.n	80063be <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800631a:	78fb      	ldrb	r3, [r7, #3]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	4413      	add	r3, r2
 8006322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	78fa      	ldrb	r2, [r7, #3]
 800632a:	0151      	lsls	r1, r2, #5
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	440a      	add	r2, r1
 8006330:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006334:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006338:	60d3      	str	r3, [r2, #12]
      break;
 800633a:	e040      	b.n	80063be <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800633c:	78fb      	ldrb	r3, [r7, #3]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	4413      	add	r3, r2
 8006344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006348:	461a      	mov	r2, r3
 800634a:	f240 639d 	movw	r3, #1693	; 0x69d
 800634e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006350:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006354:	2b00      	cmp	r3, #0
 8006356:	da34      	bge.n	80063c2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006358:	78fb      	ldrb	r3, [r7, #3]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	4413      	add	r3, r2
 8006360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	78fa      	ldrb	r2, [r7, #3]
 8006368:	0151      	lsls	r1, r2, #5
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	440a      	add	r2, r1
 800636e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006376:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006378:	e023      	b.n	80063c2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800637a:	78fb      	ldrb	r3, [r7, #3]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	4413      	add	r3, r2
 8006382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006386:	461a      	mov	r2, r3
 8006388:	f240 2325 	movw	r3, #549	; 0x225
 800638c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800638e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006392:	2b00      	cmp	r3, #0
 8006394:	da17      	bge.n	80063c6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006396:	78fb      	ldrb	r3, [r7, #3]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	4413      	add	r3, r2
 800639e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	78fa      	ldrb	r2, [r7, #3]
 80063a6:	0151      	lsls	r1, r2, #5
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	440a      	add	r2, r1
 80063ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063b0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80063b4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80063b6:	e006      	b.n	80063c6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	77fb      	strb	r3, [r7, #31]
      break;
 80063bc:	e004      	b.n	80063c8 <USB_HC_Init+0x14c>
      break;
 80063be:	bf00      	nop
 80063c0:	e002      	b.n	80063c8 <USB_HC_Init+0x14c>
      break;
 80063c2:	bf00      	nop
 80063c4:	e000      	b.n	80063c8 <USB_HC_Init+0x14c>
      break;
 80063c6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80063c8:	78fb      	ldrb	r3, [r7, #3]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	78fa      	ldrb	r2, [r7, #3]
 80063d8:	0151      	lsls	r1, r2, #5
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	440a      	add	r2, r1
 80063de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063e2:	f043 0302 	orr.w	r3, r3, #2
 80063e6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063ee:	699a      	ldr	r2, [r3, #24]
 80063f0:	78fb      	ldrb	r3, [r7, #3]
 80063f2:	f003 030f 	and.w	r3, r3, #15
 80063f6:	2101      	movs	r1, #1
 80063f8:	fa01 f303 	lsl.w	r3, r1, r3
 80063fc:	6939      	ldr	r1, [r7, #16]
 80063fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006402:	4313      	orrs	r3, r2
 8006404:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006412:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006416:	2b00      	cmp	r3, #0
 8006418:	da03      	bge.n	8006422 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800641a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800641e:	61bb      	str	r3, [r7, #24]
 8006420:	e001      	b.n	8006426 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006422:	2300      	movs	r3, #0
 8006424:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7ff feff 	bl	800622a <USB_GetHostSpeed>
 800642c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800642e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006432:	2b02      	cmp	r3, #2
 8006434:	d106      	bne.n	8006444 <USB_HC_Init+0x1c8>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b02      	cmp	r3, #2
 800643a:	d003      	beq.n	8006444 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800643c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006440:	617b      	str	r3, [r7, #20]
 8006442:	e001      	b.n	8006448 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006444:	2300      	movs	r3, #0
 8006446:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006448:	787b      	ldrb	r3, [r7, #1]
 800644a:	059b      	lsls	r3, r3, #22
 800644c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006450:	78bb      	ldrb	r3, [r7, #2]
 8006452:	02db      	lsls	r3, r3, #11
 8006454:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006458:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800645a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800645e:	049b      	lsls	r3, r3, #18
 8006460:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006464:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006466:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006468:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800646c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006472:	78fb      	ldrb	r3, [r7, #3]
 8006474:	0159      	lsls	r1, r3, #5
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	440b      	add	r3, r1
 800647a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006484:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006486:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800648a:	2b03      	cmp	r3, #3
 800648c:	d003      	beq.n	8006496 <USB_HC_Init+0x21a>
 800648e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006492:	2b01      	cmp	r3, #1
 8006494:	d10f      	bne.n	80064b6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006496:	78fb      	ldrb	r3, [r7, #3]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	4413      	add	r3, r2
 800649e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	78fa      	ldrb	r2, [r7, #3]
 80064a6:	0151      	lsls	r1, r2, #5
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	440a      	add	r2, r1
 80064ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064b4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80064b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3720      	adds	r7, #32
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b08c      	sub	sp, #48	; 0x30
 80064c4:	af02      	add	r7, sp, #8
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	4613      	mov	r3, r2
 80064cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	785b      	ldrb	r3, [r3, #1]
 80064d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80064d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064dc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d02d      	beq.n	8006546 <USB_HC_StartXfer+0x86>
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	791b      	ldrb	r3, [r3, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d129      	bne.n	8006546 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80064f2:	79fb      	ldrb	r3, [r7, #7]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d117      	bne.n	8006528 <USB_HC_StartXfer+0x68>
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	79db      	ldrb	r3, [r3, #7]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d003      	beq.n	8006508 <USB_HC_StartXfer+0x48>
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	79db      	ldrb	r3, [r3, #7]
 8006504:	2b02      	cmp	r3, #2
 8006506:	d10f      	bne.n	8006528 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	4413      	add	r3, r2
 8006510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	69fa      	ldr	r2, [r7, #28]
 8006518:	0151      	lsls	r1, r2, #5
 800651a:	6a3a      	ldr	r2, [r7, #32]
 800651c:	440a      	add	r2, r1
 800651e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006526:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006528:	79fb      	ldrb	r3, [r7, #7]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10b      	bne.n	8006546 <USB_HC_StartXfer+0x86>
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	795b      	ldrb	r3, [r3, #5]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d107      	bne.n	8006546 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	785b      	ldrb	r3, [r3, #1]
 800653a:	4619      	mov	r1, r3
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 fa0f 	bl	8006960 <USB_DoPing>
      return HAL_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	e0f8      	b.n	8006738 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d018      	beq.n	8006580 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	8912      	ldrh	r2, [r2, #8]
 8006556:	4413      	add	r3, r2
 8006558:	3b01      	subs	r3, #1
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	8912      	ldrh	r2, [r2, #8]
 800655e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006562:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006564:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006566:	8b7b      	ldrh	r3, [r7, #26]
 8006568:	429a      	cmp	r2, r3
 800656a:	d90b      	bls.n	8006584 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800656c:	8b7b      	ldrh	r3, [r7, #26]
 800656e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006570:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	8912      	ldrh	r2, [r2, #8]
 8006576:	fb03 f202 	mul.w	r2, r3, r2
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	611a      	str	r2, [r3, #16]
 800657e:	e001      	b.n	8006584 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006580:	2301      	movs	r3, #1
 8006582:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	78db      	ldrb	r3, [r3, #3]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d007      	beq.n	800659c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800658c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	8912      	ldrh	r2, [r2, #8]
 8006592:	fb03 f202 	mul.w	r2, r3, r2
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	611a      	str	r2, [r3, #16]
 800659a:	e003      	b.n	80065a4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	695a      	ldr	r2, [r3, #20]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065ae:	04d9      	lsls	r1, r3, #19
 80065b0:	4b63      	ldr	r3, [pc, #396]	; (8006740 <USB_HC_StartXfer+0x280>)
 80065b2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065b4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	7a9b      	ldrb	r3, [r3, #10]
 80065ba:	075b      	lsls	r3, r3, #29
 80065bc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065c0:	69f9      	ldr	r1, [r7, #28]
 80065c2:	0148      	lsls	r0, r1, #5
 80065c4:	6a39      	ldr	r1, [r7, #32]
 80065c6:	4401      	add	r1, r0
 80065c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065cc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065ce:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80065d0:	79fb      	ldrb	r3, [r7, #7]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d009      	beq.n	80065ea <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	68d9      	ldr	r1, [r3, #12]
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e6:	460a      	mov	r2, r1
 80065e8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	bf0c      	ite	eq
 80065fa:	2301      	moveq	r3, #1
 80065fc:	2300      	movne	r3, #0
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	4413      	add	r3, r2
 800660a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	69fa      	ldr	r2, [r7, #28]
 8006612:	0151      	lsls	r1, r2, #5
 8006614:	6a3a      	ldr	r2, [r7, #32]
 8006616:	440a      	add	r2, r1
 8006618:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800661c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006620:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	4413      	add	r3, r2
 800662a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	7e7b      	ldrb	r3, [r7, #25]
 8006632:	075b      	lsls	r3, r3, #29
 8006634:	69f9      	ldr	r1, [r7, #28]
 8006636:	0148      	lsls	r0, r1, #5
 8006638:	6a39      	ldr	r1, [r7, #32]
 800663a:	4401      	add	r1, r0
 800663c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006640:	4313      	orrs	r3, r2
 8006642:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	4413      	add	r3, r2
 800664c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800665a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	78db      	ldrb	r3, [r3, #3]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d004      	beq.n	800666e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800666a:	613b      	str	r3, [r7, #16]
 800666c:	e003      	b.n	8006676 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006674:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800667c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	4413      	add	r3, r2
 8006686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800668a:	461a      	mov	r2, r3
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006690:	79fb      	ldrb	r3, [r7, #7]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	e04e      	b.n	8006738 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	78db      	ldrb	r3, [r3, #3]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d149      	bne.n	8006736 <USB_HC_StartXfer+0x276>
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d045      	beq.n	8006736 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	79db      	ldrb	r3, [r3, #7]
 80066ae:	2b03      	cmp	r3, #3
 80066b0:	d830      	bhi.n	8006714 <USB_HC_StartXfer+0x254>
 80066b2:	a201      	add	r2, pc, #4	; (adr r2, 80066b8 <USB_HC_StartXfer+0x1f8>)
 80066b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b8:	080066c9 	.word	0x080066c9
 80066bc:	080066ed 	.word	0x080066ed
 80066c0:	080066c9 	.word	0x080066c9
 80066c4:	080066ed 	.word	0x080066ed
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	3303      	adds	r3, #3
 80066ce:	089b      	lsrs	r3, r3, #2
 80066d0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80066d2:	8afa      	ldrh	r2, [r7, #22]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d8:	b29b      	uxth	r3, r3
 80066da:	429a      	cmp	r2, r3
 80066dc:	d91c      	bls.n	8006718 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	f043 0220 	orr.w	r2, r3, #32
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	619a      	str	r2, [r3, #24]
        }
        break;
 80066ea:	e015      	b.n	8006718 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	3303      	adds	r3, #3
 80066f2:	089b      	lsrs	r3, r3, #2
 80066f4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80066f6:	8afa      	ldrh	r2, [r7, #22]
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	b29b      	uxth	r3, r3
 8006702:	429a      	cmp	r2, r3
 8006704:	d90a      	bls.n	800671c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	619a      	str	r2, [r3, #24]
        }
        break;
 8006712:	e003      	b.n	800671c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006714:	bf00      	nop
 8006716:	e002      	b.n	800671e <USB_HC_StartXfer+0x25e>
        break;
 8006718:	bf00      	nop
 800671a:	e000      	b.n	800671e <USB_HC_StartXfer+0x25e>
        break;
 800671c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	68d9      	ldr	r1, [r3, #12]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	785a      	ldrb	r2, [r3, #1]
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	b29b      	uxth	r3, r3
 800672c:	2000      	movs	r0, #0
 800672e:	9000      	str	r0, [sp, #0]
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f7ff fb5b 	bl	8005dec <USB_WritePacket>
  }

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3728      	adds	r7, #40	; 0x28
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	1ff80000 	.word	0x1ff80000

08006744 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	b29b      	uxth	r3, r3
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006766:	b480      	push	{r7}
 8006768:	b089      	sub	sp, #36	; 0x24
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	460b      	mov	r3, r1
 8006770:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006776:	78fb      	ldrb	r3, [r7, #3]
 8006778:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800677a:	2300      	movs	r3, #0
 800677c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	4413      	add	r3, r2
 8006786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	0c9b      	lsrs	r3, r3, #18
 800678e:	f003 0303 	and.w	r3, r3, #3
 8006792:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	4413      	add	r3, r2
 800679c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	0fdb      	lsrs	r3, r3, #31
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 0320 	and.w	r3, r3, #32
 80067b2:	2b20      	cmp	r3, #32
 80067b4:	d104      	bne.n	80067c0 <USB_HC_Halt+0x5a>
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	e0c8      	b.n	8006952 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <USB_HC_Halt+0x66>
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d163      	bne.n	8006894 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	015a      	lsls	r2, r3, #5
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	0151      	lsls	r1, r2, #5
 80067de:	69fa      	ldr	r2, [r7, #28]
 80067e0:	440a      	add	r2, r1
 80067e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067ea:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f003 0320 	and.w	r3, r3, #32
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f040 80ab 	bne.w	8006950 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d133      	bne.n	800686e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	4413      	add	r3, r2
 800680e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	0151      	lsls	r1, r2, #5
 8006818:	69fa      	ldr	r2, [r7, #28]
 800681a:	440a      	add	r2, r1
 800681c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006820:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006824:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	4413      	add	r3, r2
 800682e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	69ba      	ldr	r2, [r7, #24]
 8006836:	0151      	lsls	r1, r2, #5
 8006838:	69fa      	ldr	r2, [r7, #28]
 800683a:	440a      	add	r2, r1
 800683c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006840:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006844:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3301      	adds	r3, #1
 800684a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006852:	d81d      	bhi.n	8006890 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	4413      	add	r3, r2
 800685c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006866:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800686a:	d0ec      	beq.n	8006846 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800686c:	e070      	b.n	8006950 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	4413      	add	r3, r2
 8006876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	69ba      	ldr	r2, [r7, #24]
 800687e:	0151      	lsls	r1, r2, #5
 8006880:	69fa      	ldr	r2, [r7, #28]
 8006882:	440a      	add	r2, r1
 8006884:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006888:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800688c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800688e:	e05f      	b.n	8006950 <USB_HC_Halt+0x1ea>
            break;
 8006890:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006892:	e05d      	b.n	8006950 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	4413      	add	r3, r2
 800689c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	0151      	lsls	r1, r2, #5
 80068a6:	69fa      	ldr	r2, [r7, #28]
 80068a8:	440a      	add	r2, r1
 80068aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068b2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d133      	bne.n	800692c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	69ba      	ldr	r2, [r7, #24]
 80068d4:	0151      	lsls	r1, r2, #5
 80068d6:	69fa      	ldr	r2, [r7, #28]
 80068d8:	440a      	add	r2, r1
 80068da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	0151      	lsls	r1, r2, #5
 80068f6:	69fa      	ldr	r2, [r7, #28]
 80068f8:	440a      	add	r2, r1
 80068fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006902:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	3301      	adds	r3, #1
 8006908:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006910:	d81d      	bhi.n	800694e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	4413      	add	r3, r2
 800691a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006924:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006928:	d0ec      	beq.n	8006904 <USB_HC_Halt+0x19e>
 800692a:	e011      	b.n	8006950 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	4413      	add	r3, r2
 8006934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	0151      	lsls	r1, r2, #5
 800693e:	69fa      	ldr	r2, [r7, #28]
 8006940:	440a      	add	r2, r1
 8006942:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006946:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800694a:	6013      	str	r3, [r2, #0]
 800694c:	e000      	b.n	8006950 <USB_HC_Halt+0x1ea>
          break;
 800694e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3724      	adds	r7, #36	; 0x24
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
	...

08006960 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006960:	b480      	push	{r7}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	460b      	mov	r3, r1
 800696a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006970:	78fb      	ldrb	r3, [r7, #3]
 8006972:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006974:	2301      	movs	r3, #1
 8006976:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	04da      	lsls	r2, r3, #19
 800697c:	4b15      	ldr	r3, [pc, #84]	; (80069d4 <USB_DoPing+0x74>)
 800697e:	4013      	ands	r3, r2
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	0151      	lsls	r1, r2, #5
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	440a      	add	r2, r1
 8006988:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800698c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006990:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	4413      	add	r3, r2
 800699a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069a8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069b0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069be:	461a      	mov	r2, r3
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	371c      	adds	r7, #28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	1ff80000 	.word	0x1ff80000

080069d8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f7ff f93c 	bl	8005c6a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069f2:	2110      	movs	r1, #16
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7ff f995 	bl	8005d24 <USB_FlushTxFifo>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7ff f9c1 	bl	8005d8c <USB_FlushRxFifo>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006a14:	2300      	movs	r3, #0
 8006a16:	61bb      	str	r3, [r7, #24]
 8006a18:	e01f      	b.n	8006a5a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a30:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a38:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a40:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a4e:	461a      	mov	r2, r3
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	3301      	adds	r3, #1
 8006a58:	61bb      	str	r3, [r7, #24]
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	2b0f      	cmp	r3, #15
 8006a5e:	d9dc      	bls.n	8006a1a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006a60:	2300      	movs	r3, #0
 8006a62:	61bb      	str	r3, [r7, #24]
 8006a64:	e034      	b.n	8006ad0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a7c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a84:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a8c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aac:	d80c      	bhi.n	8006ac8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ac0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ac4:	d0ec      	beq.n	8006aa0 <USB_StopHost+0xc8>
 8006ac6:	e000      	b.n	8006aca <USB_StopHost+0xf2>
        break;
 8006ac8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	3301      	adds	r3, #1
 8006ace:	61bb      	str	r3, [r7, #24]
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	2b0f      	cmp	r3, #15
 8006ad4:	d9c7      	bls.n	8006a66 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006adc:	461a      	mov	r2, r3
 8006ade:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8006aea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7ff f8ab 	bl	8005c48 <USB_EnableGlobalInt>

  return ret;
 8006af2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3720      	adds	r7, #32
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006afc:	b590      	push	{r4, r7, lr}
 8006afe:	b089      	sub	sp, #36	; 0x24
 8006b00:	af04      	add	r7, sp, #16
 8006b02:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006b04:	2301      	movs	r3, #1
 8006b06:	2202      	movs	r2, #2
 8006b08:	2102      	movs	r1, #2
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fc66 	bl	80073dc <USBH_FindInterface>
 8006b10:	4603      	mov	r3, r0
 8006b12:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
 8006b16:	2bff      	cmp	r3, #255	; 0xff
 8006b18:	d002      	beq.n	8006b20 <USBH_CDC_InterfaceInit+0x24>
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d901      	bls.n	8006b24 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006b20:	2302      	movs	r3, #2
 8006b22:	e13d      	b.n	8006da0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	4619      	mov	r1, r3
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fc3b 	bl	80073a4 <USBH_SelectInterface>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006b32:	7bbb      	ldrb	r3, [r7, #14]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d001      	beq.n	8006b3c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006b38:	2302      	movs	r3, #2
 8006b3a:	e131      	b.n	8006da0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006b42:	2050      	movs	r0, #80	; 0x50
 8006b44:	f001 fb12 	bl	800816c <malloc>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d101      	bne.n	8006b60 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	e11f      	b.n	8006da0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006b60:	2250      	movs	r2, #80	; 0x50
 8006b62:	2100      	movs	r1, #0
 8006b64:	68b8      	ldr	r0, [r7, #8]
 8006b66:	f001 fb11 	bl	800818c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	211a      	movs	r1, #26
 8006b70:	fb01 f303 	mul.w	r3, r1, r3
 8006b74:	4413      	add	r3, r2
 8006b76:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	b25b      	sxtb	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	da15      	bge.n	8006bae <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	211a      	movs	r1, #26
 8006b88:	fb01 f303 	mul.w	r3, r1, r3
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b92:	781a      	ldrb	r2, [r3, #0]
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	211a      	movs	r1, #26
 8006b9e:	fb01 f303 	mul.w	r3, r1, r3
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ba8:	881a      	ldrh	r2, [r3, #0]
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	785b      	ldrb	r3, [r3, #1]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 ff9c 	bl	8007af2 <USBH_AllocPipe>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	7819      	ldrb	r1, [r3, #0]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	7858      	ldrb	r0, [r3, #1]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	8952      	ldrh	r2, [r2, #10]
 8006bda:	9202      	str	r2, [sp, #8]
 8006bdc:	2203      	movs	r2, #3
 8006bde:	9201      	str	r2, [sp, #4]
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	4623      	mov	r3, r4
 8006be4:	4602      	mov	r2, r0
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 ff54 	bl	8007a94 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f001 fa17 	bl	8008028 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	210a      	movs	r1, #10
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fbeb 	bl	80073dc <USBH_FindInterface>
 8006c06:	4603      	mov	r3, r0
 8006c08:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
 8006c0c:	2bff      	cmp	r3, #255	; 0xff
 8006c0e:	d002      	beq.n	8006c16 <USBH_CDC_InterfaceInit+0x11a>
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d901      	bls.n	8006c1a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006c16:	2302      	movs	r3, #2
 8006c18:	e0c2      	b.n	8006da0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006c1a:	7bfb      	ldrb	r3, [r7, #15]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	211a      	movs	r1, #26
 8006c20:	fb01 f303 	mul.w	r3, r1, r3
 8006c24:	4413      	add	r3, r2
 8006c26:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	b25b      	sxtb	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	da16      	bge.n	8006c60 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	211a      	movs	r1, #26
 8006c38:	fb01 f303 	mul.w	r3, r1, r3
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c42:	781a      	ldrb	r2, [r3, #0]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	211a      	movs	r1, #26
 8006c4e:	fb01 f303 	mul.w	r3, r1, r3
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c58:	881a      	ldrh	r2, [r3, #0]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	835a      	strh	r2, [r3, #26]
 8006c5e:	e015      	b.n	8006c8c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	211a      	movs	r1, #26
 8006c66:	fb01 f303 	mul.w	r3, r1, r3
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c70:	781a      	ldrb	r2, [r3, #0]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	211a      	movs	r1, #26
 8006c7c:	fb01 f303 	mul.w	r3, r1, r3
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c86:	881a      	ldrh	r2, [r3, #0]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	211a      	movs	r1, #26
 8006c92:	fb01 f303 	mul.w	r3, r1, r3
 8006c96:	4413      	add	r3, r2
 8006c98:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	b25b      	sxtb	r3, r3
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	da16      	bge.n	8006cd2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	211a      	movs	r1, #26
 8006caa:	fb01 f303 	mul.w	r3, r1, r3
 8006cae:	4413      	add	r3, r2
 8006cb0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006cb4:	781a      	ldrb	r2, [r3, #0]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006cba:	7bfb      	ldrb	r3, [r7, #15]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	211a      	movs	r1, #26
 8006cc0:	fb01 f303 	mul.w	r3, r1, r3
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006cca:	881a      	ldrh	r2, [r3, #0]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	835a      	strh	r2, [r3, #26]
 8006cd0:	e015      	b.n	8006cfe <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	211a      	movs	r1, #26
 8006cd8:	fb01 f303 	mul.w	r3, r1, r3
 8006cdc:	4413      	add	r3, r2
 8006cde:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ce2:	781a      	ldrb	r2, [r3, #0]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	211a      	movs	r1, #26
 8006cee:	fb01 f303 	mul.w	r3, r1, r3
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006cf8:	881a      	ldrh	r2, [r3, #0]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	7b9b      	ldrb	r3, [r3, #14]
 8006d02:	4619      	mov	r1, r3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fef4 	bl	8007af2 <USBH_AllocPipe>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	7bdb      	ldrb	r3, [r3, #15]
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 feea 	bl	8007af2 <USBH_AllocPipe>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	461a      	mov	r2, r3
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	7b59      	ldrb	r1, [r3, #13]
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	7b98      	ldrb	r0, [r3, #14]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	8b12      	ldrh	r2, [r2, #24]
 8006d3e:	9202      	str	r2, [sp, #8]
 8006d40:	2202      	movs	r2, #2
 8006d42:	9201      	str	r2, [sp, #4]
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	4623      	mov	r3, r4
 8006d48:	4602      	mov	r2, r0
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fea2 	bl	8007a94 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	7b19      	ldrb	r1, [r3, #12]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	7bd8      	ldrb	r0, [r3, #15]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	8b52      	ldrh	r2, [r2, #26]
 8006d68:	9202      	str	r2, [sp, #8]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	9201      	str	r2, [sp, #4]
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	4623      	mov	r3, r4
 8006d72:	4602      	mov	r2, r0
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 fe8d 	bl	8007a94 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	7b5b      	ldrb	r3, [r3, #13]
 8006d86:	2200      	movs	r2, #0
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f001 f94c 	bl	8008028 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	7b1b      	ldrb	r3, [r3, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f001 f945 	bl	8008028 <USBH_LL_SetToggle>

  return USBH_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd90      	pop	{r4, r7, pc}

08006da8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006db6:	69db      	ldr	r3, [r3, #28]
 8006db8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00e      	beq.n	8006de0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fe82 	bl	8007ad2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fead 	bl	8007b34 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	7b1b      	ldrb	r3, [r3, #12]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00e      	beq.n	8006e06 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	7b1b      	ldrb	r3, [r3, #12]
 8006dec:	4619      	mov	r1, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fe6f 	bl	8007ad2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	7b1b      	ldrb	r3, [r3, #12]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fe9a 	bl	8007b34 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	7b5b      	ldrb	r3, [r3, #13]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00e      	beq.n	8006e2c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	7b5b      	ldrb	r3, [r3, #13]
 8006e12:	4619      	mov	r1, r3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fe5c 	bl	8007ad2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	7b5b      	ldrb	r3, [r3, #13]
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fe87 	bl	8007b34 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e32:	69db      	ldr	r3, [r3, #28]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00b      	beq.n	8006e50 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f001 f99b 	bl	800817c <free>
    phost->pActiveClass->pData = 0U;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	3340      	adds	r3, #64	; 0x40
 8006e70:	4619      	mov	r1, r3
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f8b1 	bl	8006fda <GetLineCoding>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006e7c:	7afb      	ldrb	r3, [r7, #11]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d105      	bne.n	8006e8e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e88:	2102      	movs	r1, #2
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006e8e:	7afb      	ldrb	r3, [r7, #11]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eae:	69db      	ldr	r3, [r3, #28]
 8006eb0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006eb8:	2b04      	cmp	r3, #4
 8006eba:	d877      	bhi.n	8006fac <USBH_CDC_Process+0x114>
 8006ebc:	a201      	add	r2, pc, #4	; (adr r2, 8006ec4 <USBH_CDC_Process+0x2c>)
 8006ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec2:	bf00      	nop
 8006ec4:	08006ed9 	.word	0x08006ed9
 8006ec8:	08006edf 	.word	0x08006edf
 8006ecc:	08006f0f 	.word	0x08006f0f
 8006ed0:	08006f83 	.word	0x08006f83
 8006ed4:	08006f91 	.word	0x08006f91
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	73fb      	strb	r3, [r7, #15]
      break;
 8006edc:	e06d      	b.n	8006fba <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f897 	bl	8007018 <SetLineCoding>
 8006eea:	4603      	mov	r3, r0
 8006eec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006eee:	7bbb      	ldrb	r3, [r7, #14]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d104      	bne.n	8006efe <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006efc:	e058      	b.n	8006fb0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006efe:	7bbb      	ldrb	r3, [r7, #14]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d055      	beq.n	8006fb0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2204      	movs	r2, #4
 8006f08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006f0c:	e050      	b.n	8006fb0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	3340      	adds	r3, #64	; 0x40
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f860 	bl	8006fda <GetLineCoding>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f1e:	7bbb      	ldrb	r3, [r7, #14]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d126      	bne.n	8006f72 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f36:	791b      	ldrb	r3, [r3, #4]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d13b      	bne.n	8006fb4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f46:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d133      	bne.n	8006fb4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f56:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d12b      	bne.n	8006fb4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f64:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d124      	bne.n	8006fb4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f958 	bl	8007220 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006f70:	e020      	b.n	8006fb4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006f72:	7bbb      	ldrb	r3, [r7, #14]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d01d      	beq.n	8006fb4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	2204      	movs	r2, #4
 8006f7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006f80:	e018      	b.n	8006fb4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f867 	bl	8007056 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f8da 	bl	8007142 <CDC_ProcessReception>
      break;
 8006f8e:	e014      	b.n	8006fba <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006f90:	2100      	movs	r1, #0
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fb08 	bl	80075a8 <USBH_ClrFeature>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f9c:	7bbb      	ldrb	r3, [r7, #14]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10a      	bne.n	8006fb8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006faa:	e005      	b.n	8006fb8 <USBH_CDC_Process+0x120>

    default:
      break;
 8006fac:	bf00      	nop
 8006fae:	e004      	b.n	8006fba <USBH_CDC_Process+0x122>
      break;
 8006fb0:	bf00      	nop
 8006fb2:	e002      	b.n	8006fba <USBH_CDC_Process+0x122>
      break;
 8006fb4:	bf00      	nop
 8006fb6:	e000      	b.n	8006fba <USBH_CDC_Process+0x122>
      break;
 8006fb8:	bf00      	nop

  }

  return status;
 8006fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b082      	sub	sp, #8
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	22a1      	movs	r2, #161	; 0xa1
 8006fe8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2221      	movs	r2, #33	; 0x21
 8006fee:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2207      	movs	r2, #7
 8007000:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2207      	movs	r2, #7
 8007006:	4619      	mov	r1, r3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 faf1 	bl	80075f0 <USBH_CtlReq>
 800700e:	4603      	mov	r3, r0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2221      	movs	r2, #33	; 0x21
 8007026:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2220      	movs	r2, #32
 800702c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2207      	movs	r2, #7
 800703e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	2207      	movs	r2, #7
 8007044:	4619      	mov	r1, r3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fad2 	bl	80075f0 <USBH_CtlReq>
 800704c:	4603      	mov	r3, r0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b086      	sub	sp, #24
 800705a:	af02      	add	r7, sp, #8
 800705c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007068:	2300      	movs	r3, #0
 800706a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007072:	2b01      	cmp	r3, #1
 8007074:	d002      	beq.n	800707c <CDC_ProcessTransmission+0x26>
 8007076:	2b02      	cmp	r3, #2
 8007078:	d023      	beq.n	80070c2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800707a:	e05e      	b.n	800713a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	8b12      	ldrh	r2, [r2, #24]
 8007084:	4293      	cmp	r3, r2
 8007086:	d90b      	bls.n	80070a0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	69d9      	ldr	r1, [r3, #28]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	8b1a      	ldrh	r2, [r3, #24]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	7b5b      	ldrb	r3, [r3, #13]
 8007094:	2001      	movs	r0, #1
 8007096:	9000      	str	r0, [sp, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fcb8 	bl	8007a0e <USBH_BulkSendData>
 800709e:	e00b      	b.n	80070b8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	7b5b      	ldrb	r3, [r3, #13]
 80070ae:	2001      	movs	r0, #1
 80070b0:	9000      	str	r0, [sp, #0]
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fcab 	bl	8007a0e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2202      	movs	r2, #2
 80070bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80070c0:	e03b      	b.n	800713a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	7b5b      	ldrb	r3, [r3, #13]
 80070c6:	4619      	mov	r1, r3
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 ff83 	bl	8007fd4 <USBH_LL_GetURBState>
 80070ce:	4603      	mov	r3, r0
 80070d0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80070d2:	7afb      	ldrb	r3, [r7, #11]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d128      	bne.n	800712a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	8b12      	ldrh	r2, [r2, #24]
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d90e      	bls.n	8007102 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	8b12      	ldrh	r2, [r2, #24]
 80070ec:	1a9a      	subs	r2, r3, r2
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	8b12      	ldrh	r2, [r2, #24]
 80070fa:	441a      	add	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	61da      	str	r2, [r3, #28]
 8007100:	e002      	b.n	8007108 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	2b00      	cmp	r3, #0
 800710e:	d004      	beq.n	800711a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007118:	e00e      	b.n	8007138 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f868 	bl	80071f8 <USBH_CDC_TransmitCallback>
      break;
 8007128:	e006      	b.n	8007138 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800712a:	7afb      	ldrb	r3, [r7, #11]
 800712c:	2b02      	cmp	r3, #2
 800712e:	d103      	bne.n	8007138 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007138:	bf00      	nop
  }
}
 800713a:	bf00      	nop
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b086      	sub	sp, #24
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007154:	2300      	movs	r3, #0
 8007156:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800715e:	2b03      	cmp	r3, #3
 8007160:	d002      	beq.n	8007168 <CDC_ProcessReception+0x26>
 8007162:	2b04      	cmp	r3, #4
 8007164:	d00e      	beq.n	8007184 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007166:	e043      	b.n	80071f0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	6a19      	ldr	r1, [r3, #32]
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	8b5a      	ldrh	r2, [r3, #26]
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	7b1b      	ldrb	r3, [r3, #12]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fc6f 	bl	8007a58 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	2204      	movs	r2, #4
 800717e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007182:	e035      	b.n	80071f0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	7b1b      	ldrb	r3, [r3, #12]
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 ff22 	bl	8007fd4 <USBH_LL_GetURBState>
 8007190:	4603      	mov	r3, r0
 8007192:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007194:	7cfb      	ldrb	r3, [r7, #19]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d129      	bne.n	80071ee <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	7b1b      	ldrb	r3, [r3, #12]
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fe85 	bl	8007eb0 <USBH_LL_GetLastXferSize>
 80071a6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d016      	beq.n	80071e0 <CDC_ProcessReception+0x9e>
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	8b5b      	ldrh	r3, [r3, #26]
 80071b6:	461a      	mov	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d910      	bls.n	80071e0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	1ad2      	subs	r2, r2, r3
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	6a1a      	ldr	r2, [r3, #32]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	441a      	add	r2, r3
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	2203      	movs	r2, #3
 80071da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80071de:	e006      	b.n	80071ee <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f80f 	bl	800720c <USBH_CDC_ReceiveCallback>
      break;
 80071ee:	bf00      	nop
  }
}
 80071f0:	bf00      	nop
 80071f2:	3718      	adds	r7, #24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	4613      	mov	r3, r2
 8007240:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007248:	2302      	movs	r3, #2
 800724a:	e029      	b.n	80072a0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	79fa      	ldrb	r2, [r7, #7]
 8007250:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 f81f 	bl	80072a8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d003      	beq.n	8007298 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 fd97 	bl	8007dcc <USBH_LL_Init>

  return USBH_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80072b4:	2300      	movs	r3, #0
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	e009      	b.n	80072ce <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	33e0      	adds	r3, #224	; 0xe0
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	2200      	movs	r2, #0
 80072c6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	3301      	adds	r3, #1
 80072cc:	60fb      	str	r3, [r7, #12]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2b0f      	cmp	r3, #15
 80072d2:	d9f2      	bls.n	80072ba <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80072d4:	2300      	movs	r3, #0
 80072d6:	60fb      	str	r3, [r7, #12]
 80072d8:	e009      	b.n	80072ee <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80072e4:	2200      	movs	r2, #0
 80072e6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	3301      	adds	r3, #1
 80072ec:	60fb      	str	r3, [r7, #12]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072f4:	d3f1      	bcc.n	80072da <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2240      	movs	r2, #64	; 0x40
 800731a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d016      	beq.n	8007392 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10e      	bne.n	800738c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007374:	1c59      	adds	r1, r3, #1
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	33de      	adds	r3, #222	; 0xde
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	73fb      	strb	r3, [r7, #15]
 800738a:	e004      	b.n	8007396 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800738c:	2302      	movs	r3, #2
 800738e:	73fb      	strb	r3, [r7, #15]
 8007390:	e001      	b.n	8007396 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007392:	2302      	movs	r3, #2
 8007394:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007396:	7bfb      	ldrb	r3, [r7, #15]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	460b      	mov	r3, r1
 80073ae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80073ba:	78fa      	ldrb	r2, [r7, #3]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d204      	bcs.n	80073ca <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	78fa      	ldrb	r2, [r7, #3]
 80073c4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80073c8:	e001      	b.n	80073ce <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80073ca:	2302      	movs	r3, #2
 80073cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	4608      	mov	r0, r1
 80073e6:	4611      	mov	r1, r2
 80073e8:	461a      	mov	r2, r3
 80073ea:	4603      	mov	r3, r0
 80073ec:	70fb      	strb	r3, [r7, #3]
 80073ee:	460b      	mov	r3, r1
 80073f0:	70bb      	strb	r3, [r7, #2]
 80073f2:	4613      	mov	r3, r2
 80073f4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80073f6:	2300      	movs	r3, #0
 80073f8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80073fa:	2300      	movs	r3, #0
 80073fc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007404:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007406:	e025      	b.n	8007454 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007408:	7dfb      	ldrb	r3, [r7, #23]
 800740a:	221a      	movs	r2, #26
 800740c:	fb02 f303 	mul.w	r3, r2, r3
 8007410:	3308      	adds	r3, #8
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	4413      	add	r3, r2
 8007416:	3302      	adds	r3, #2
 8007418:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	795b      	ldrb	r3, [r3, #5]
 800741e:	78fa      	ldrb	r2, [r7, #3]
 8007420:	429a      	cmp	r2, r3
 8007422:	d002      	beq.n	800742a <USBH_FindInterface+0x4e>
 8007424:	78fb      	ldrb	r3, [r7, #3]
 8007426:	2bff      	cmp	r3, #255	; 0xff
 8007428:	d111      	bne.n	800744e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800742e:	78ba      	ldrb	r2, [r7, #2]
 8007430:	429a      	cmp	r2, r3
 8007432:	d002      	beq.n	800743a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007434:	78bb      	ldrb	r3, [r7, #2]
 8007436:	2bff      	cmp	r3, #255	; 0xff
 8007438:	d109      	bne.n	800744e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800743e:	787a      	ldrb	r2, [r7, #1]
 8007440:	429a      	cmp	r2, r3
 8007442:	d002      	beq.n	800744a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007444:	787b      	ldrb	r3, [r7, #1]
 8007446:	2bff      	cmp	r3, #255	; 0xff
 8007448:	d101      	bne.n	800744e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800744a:	7dfb      	ldrb	r3, [r7, #23]
 800744c:	e006      	b.n	800745c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800744e:	7dfb      	ldrb	r3, [r7, #23]
 8007450:	3301      	adds	r3, #1
 8007452:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007454:	7dfb      	ldrb	r3, [r7, #23]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d9d6      	bls.n	8007408 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800745a:	23ff      	movs	r3, #255	; 0xff
}
 800745c:	4618      	mov	r0, r3
 800745e:	371c      	adds	r7, #28
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fce7 	bl	8007e44 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007476:	2101      	movs	r1, #1
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fdbe 	bl	8007ffa <USBH_LL_DriverVBUS>

  return USBH_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b082      	sub	sp, #8
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80074b4:	1c5a      	adds	r2, r3, #1
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f804 	bl	80074ca <USBH_HandleSof>
}
 80074c2:	bf00      	nop
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b082      	sub	sp, #8
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b0b      	cmp	r3, #11
 80074da:	d10a      	bne.n	80074f2 <USBH_HandleSof+0x28>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d005      	beq.n	80074f2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	4798      	blx	r3
  }
}
 80074f2:	bf00      	nop
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800750a:	bf00      	nop
}
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007516:	b480      	push	{r7}
 8007518:	b083      	sub	sp, #12
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007526:	bf00      	nop
}
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007532:	b480      	push	{r7}
 8007534:	b083      	sub	sp, #12
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fc7a 	bl	8007e7a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	791b      	ldrb	r3, [r3, #4]
 800758a:	4619      	mov	r1, r3
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fad1 	bl	8007b34 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	795b      	ldrb	r3, [r3, #5]
 8007596:	4619      	mov	r1, r3
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 facb 	bl	8007b34 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	460b      	mov	r3, r1
 80075b2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	789b      	ldrb	r3, [r3, #2]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d10f      	bne.n	80075dc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2202      	movs	r2, #2
 80075c0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80075ce:	78fb      	ldrb	r3, [r7, #3]
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80075dc:	2200      	movs	r2, #0
 80075de:	2100      	movs	r1, #0
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f805 	bl	80075f0 <USBH_CtlReq>
 80075e6:	4603      	mov	r3, r0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b086      	sub	sp, #24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	4613      	mov	r3, r2
 80075fc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80075fe:	2301      	movs	r3, #1
 8007600:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	789b      	ldrb	r3, [r3, #2]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d002      	beq.n	8007610 <USBH_CtlReq+0x20>
 800760a:	2b02      	cmp	r3, #2
 800760c:	d00f      	beq.n	800762e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800760e:	e027      	b.n	8007660 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	88fa      	ldrh	r2, [r7, #6]
 800761a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2201      	movs	r2, #1
 8007620:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2202      	movs	r2, #2
 8007626:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007628:	2301      	movs	r3, #1
 800762a:	75fb      	strb	r3, [r7, #23]
      break;
 800762c:	e018      	b.n	8007660 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 f81c 	bl	800766c <USBH_HandleControl>
 8007634:	4603      	mov	r3, r0
 8007636:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007638:	7dfb      	ldrb	r3, [r7, #23]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d002      	beq.n	8007644 <USBH_CtlReq+0x54>
 800763e:	7dfb      	ldrb	r3, [r7, #23]
 8007640:	2b03      	cmp	r3, #3
 8007642:	d106      	bne.n	8007652 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2201      	movs	r2, #1
 8007648:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	761a      	strb	r2, [r3, #24]
      break;
 8007650:	e005      	b.n	800765e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007652:	7dfb      	ldrb	r3, [r7, #23]
 8007654:	2b02      	cmp	r3, #2
 8007656:	d102      	bne.n	800765e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2201      	movs	r2, #1
 800765c:	709a      	strb	r2, [r3, #2]
      break;
 800765e:	bf00      	nop
  }
  return status;
 8007660:	7dfb      	ldrb	r3, [r7, #23]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3718      	adds	r7, #24
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
	...

0800766c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af02      	add	r7, sp, #8
 8007672:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007674:	2301      	movs	r3, #1
 8007676:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007678:	2300      	movs	r3, #0
 800767a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	7e1b      	ldrb	r3, [r3, #24]
 8007680:	3b01      	subs	r3, #1
 8007682:	2b0a      	cmp	r3, #10
 8007684:	f200 8156 	bhi.w	8007934 <USBH_HandleControl+0x2c8>
 8007688:	a201      	add	r2, pc, #4	; (adr r2, 8007690 <USBH_HandleControl+0x24>)
 800768a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768e:	bf00      	nop
 8007690:	080076bd 	.word	0x080076bd
 8007694:	080076d7 	.word	0x080076d7
 8007698:	08007741 	.word	0x08007741
 800769c:	08007767 	.word	0x08007767
 80076a0:	0800779f 	.word	0x0800779f
 80076a4:	080077c9 	.word	0x080077c9
 80076a8:	0800781b 	.word	0x0800781b
 80076ac:	0800783d 	.word	0x0800783d
 80076b0:	08007879 	.word	0x08007879
 80076b4:	0800789f 	.word	0x0800789f
 80076b8:	080078dd 	.word	0x080078dd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f103 0110 	add.w	r1, r3, #16
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	795b      	ldrb	r3, [r3, #5]
 80076c6:	461a      	mov	r2, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f943 	bl	8007954 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2202      	movs	r2, #2
 80076d2:	761a      	strb	r2, [r3, #24]
      break;
 80076d4:	e139      	b.n	800794a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	795b      	ldrb	r3, [r3, #5]
 80076da:	4619      	mov	r1, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fc79 	bl	8007fd4 <USBH_LL_GetURBState>
 80076e2:	4603      	mov	r3, r0
 80076e4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80076e6:	7bbb      	ldrb	r3, [r7, #14]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d11e      	bne.n	800772a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	7c1b      	ldrb	r3, [r3, #16]
 80076f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80076f4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	8adb      	ldrh	r3, [r3, #22]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00a      	beq.n	8007714 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80076fe:	7b7b      	ldrb	r3, [r7, #13]
 8007700:	2b80      	cmp	r3, #128	; 0x80
 8007702:	d103      	bne.n	800770c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2203      	movs	r2, #3
 8007708:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800770a:	e115      	b.n	8007938 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2205      	movs	r2, #5
 8007710:	761a      	strb	r2, [r3, #24]
      break;
 8007712:	e111      	b.n	8007938 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007714:	7b7b      	ldrb	r3, [r7, #13]
 8007716:	2b80      	cmp	r3, #128	; 0x80
 8007718:	d103      	bne.n	8007722 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2209      	movs	r2, #9
 800771e:	761a      	strb	r2, [r3, #24]
      break;
 8007720:	e10a      	b.n	8007938 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2207      	movs	r2, #7
 8007726:	761a      	strb	r2, [r3, #24]
      break;
 8007728:	e106      	b.n	8007938 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800772a:	7bbb      	ldrb	r3, [r7, #14]
 800772c:	2b04      	cmp	r3, #4
 800772e:	d003      	beq.n	8007738 <USBH_HandleControl+0xcc>
 8007730:	7bbb      	ldrb	r3, [r7, #14]
 8007732:	2b02      	cmp	r3, #2
 8007734:	f040 8100 	bne.w	8007938 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	220b      	movs	r2, #11
 800773c:	761a      	strb	r2, [r3, #24]
      break;
 800773e:	e0fb      	b.n	8007938 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007746:	b29a      	uxth	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6899      	ldr	r1, [r3, #8]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	899a      	ldrh	r2, [r3, #12]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	791b      	ldrb	r3, [r3, #4]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f93a 	bl	80079d2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2204      	movs	r2, #4
 8007762:	761a      	strb	r2, [r3, #24]
      break;
 8007764:	e0f1      	b.n	800794a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	791b      	ldrb	r3, [r3, #4]
 800776a:	4619      	mov	r1, r3
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fc31 	bl	8007fd4 <USBH_LL_GetURBState>
 8007772:	4603      	mov	r3, r0
 8007774:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007776:	7bbb      	ldrb	r3, [r7, #14]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d102      	bne.n	8007782 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2209      	movs	r2, #9
 8007780:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007782:	7bbb      	ldrb	r3, [r7, #14]
 8007784:	2b05      	cmp	r3, #5
 8007786:	d102      	bne.n	800778e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007788:	2303      	movs	r3, #3
 800778a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800778c:	e0d6      	b.n	800793c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800778e:	7bbb      	ldrb	r3, [r7, #14]
 8007790:	2b04      	cmp	r3, #4
 8007792:	f040 80d3 	bne.w	800793c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	220b      	movs	r2, #11
 800779a:	761a      	strb	r2, [r3, #24]
      break;
 800779c:	e0ce      	b.n	800793c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6899      	ldr	r1, [r3, #8]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	899a      	ldrh	r2, [r3, #12]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	795b      	ldrb	r3, [r3, #5]
 80077aa:	2001      	movs	r0, #1
 80077ac:	9000      	str	r0, [sp, #0]
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f8ea 	bl	8007988 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2206      	movs	r2, #6
 80077c4:	761a      	strb	r2, [r3, #24]
      break;
 80077c6:	e0c0      	b.n	800794a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	795b      	ldrb	r3, [r3, #5]
 80077cc:	4619      	mov	r1, r3
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fc00 	bl	8007fd4 <USBH_LL_GetURBState>
 80077d4:	4603      	mov	r3, r0
 80077d6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80077d8:	7bbb      	ldrb	r3, [r7, #14]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d103      	bne.n	80077e6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2207      	movs	r2, #7
 80077e2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80077e4:	e0ac      	b.n	8007940 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80077e6:	7bbb      	ldrb	r3, [r7, #14]
 80077e8:	2b05      	cmp	r3, #5
 80077ea:	d105      	bne.n	80077f8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	220c      	movs	r2, #12
 80077f0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80077f2:	2303      	movs	r3, #3
 80077f4:	73fb      	strb	r3, [r7, #15]
      break;
 80077f6:	e0a3      	b.n	8007940 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80077f8:	7bbb      	ldrb	r3, [r7, #14]
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d103      	bne.n	8007806 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2205      	movs	r2, #5
 8007802:	761a      	strb	r2, [r3, #24]
      break;
 8007804:	e09c      	b.n	8007940 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	2b04      	cmp	r3, #4
 800780a:	f040 8099 	bne.w	8007940 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	220b      	movs	r2, #11
 8007812:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007814:	2302      	movs	r3, #2
 8007816:	73fb      	strb	r3, [r7, #15]
      break;
 8007818:	e092      	b.n	8007940 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	791b      	ldrb	r3, [r3, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	2100      	movs	r1, #0
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f8d5 	bl	80079d2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800782e:	b29a      	uxth	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2208      	movs	r2, #8
 8007838:	761a      	strb	r2, [r3, #24]

      break;
 800783a:	e086      	b.n	800794a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	791b      	ldrb	r3, [r3, #4]
 8007840:	4619      	mov	r1, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fbc6 	bl	8007fd4 <USBH_LL_GetURBState>
 8007848:	4603      	mov	r3, r0
 800784a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800784c:	7bbb      	ldrb	r3, [r7, #14]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d105      	bne.n	800785e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	220d      	movs	r2, #13
 8007856:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007858:	2300      	movs	r3, #0
 800785a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800785c:	e072      	b.n	8007944 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800785e:	7bbb      	ldrb	r3, [r7, #14]
 8007860:	2b04      	cmp	r3, #4
 8007862:	d103      	bne.n	800786c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	220b      	movs	r2, #11
 8007868:	761a      	strb	r2, [r3, #24]
      break;
 800786a:	e06b      	b.n	8007944 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800786c:	7bbb      	ldrb	r3, [r7, #14]
 800786e:	2b05      	cmp	r3, #5
 8007870:	d168      	bne.n	8007944 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007872:	2303      	movs	r3, #3
 8007874:	73fb      	strb	r3, [r7, #15]
      break;
 8007876:	e065      	b.n	8007944 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	795b      	ldrb	r3, [r3, #5]
 800787c:	2201      	movs	r2, #1
 800787e:	9200      	str	r2, [sp, #0]
 8007880:	2200      	movs	r2, #0
 8007882:	2100      	movs	r1, #0
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f87f 	bl	8007988 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007890:	b29a      	uxth	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	220a      	movs	r2, #10
 800789a:	761a      	strb	r2, [r3, #24]
      break;
 800789c:	e055      	b.n	800794a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	795b      	ldrb	r3, [r3, #5]
 80078a2:	4619      	mov	r1, r3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fb95 	bl	8007fd4 <USBH_LL_GetURBState>
 80078aa:	4603      	mov	r3, r0
 80078ac:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d105      	bne.n	80078c0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	220d      	movs	r2, #13
 80078bc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80078be:	e043      	b.n	8007948 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d103      	bne.n	80078ce <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2209      	movs	r2, #9
 80078ca:	761a      	strb	r2, [r3, #24]
      break;
 80078cc:	e03c      	b.n	8007948 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	2b04      	cmp	r3, #4
 80078d2:	d139      	bne.n	8007948 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	220b      	movs	r2, #11
 80078d8:	761a      	strb	r2, [r3, #24]
      break;
 80078da:	e035      	b.n	8007948 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	7e5b      	ldrb	r3, [r3, #25]
 80078e0:	3301      	adds	r3, #1
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	765a      	strb	r2, [r3, #25]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	7e5b      	ldrb	r3, [r3, #25]
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d806      	bhi.n	80078fe <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80078fc:	e025      	b.n	800794a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007904:	2106      	movs	r1, #6
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	795b      	ldrb	r3, [r3, #5]
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f90c 	bl	8007b34 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	791b      	ldrb	r3, [r3, #4]
 8007920:	4619      	mov	r1, r3
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f906 	bl	8007b34 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800792e:	2302      	movs	r3, #2
 8007930:	73fb      	strb	r3, [r7, #15]
      break;
 8007932:	e00a      	b.n	800794a <USBH_HandleControl+0x2de>

    default:
      break;
 8007934:	bf00      	nop
 8007936:	e008      	b.n	800794a <USBH_HandleControl+0x2de>
      break;
 8007938:	bf00      	nop
 800793a:	e006      	b.n	800794a <USBH_HandleControl+0x2de>
      break;
 800793c:	bf00      	nop
 800793e:	e004      	b.n	800794a <USBH_HandleControl+0x2de>
      break;
 8007940:	bf00      	nop
 8007942:	e002      	b.n	800794a <USBH_HandleControl+0x2de>
      break;
 8007944:	bf00      	nop
 8007946:	e000      	b.n	800794a <USBH_HandleControl+0x2de>
      break;
 8007948:	bf00      	nop
  }

  return status;
 800794a:	7bfb      	ldrb	r3, [r7, #15]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b088      	sub	sp, #32
 8007958:	af04      	add	r7, sp, #16
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	4613      	mov	r3, r2
 8007960:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007962:	79f9      	ldrb	r1, [r7, #7]
 8007964:	2300      	movs	r3, #0
 8007966:	9303      	str	r3, [sp, #12]
 8007968:	2308      	movs	r3, #8
 800796a:	9302      	str	r3, [sp, #8]
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	9301      	str	r3, [sp, #4]
 8007970:	2300      	movs	r3, #0
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	2300      	movs	r3, #0
 8007976:	2200      	movs	r2, #0
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 fafa 	bl	8007f72 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b088      	sub	sp, #32
 800798c:	af04      	add	r7, sp, #16
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	4611      	mov	r1, r2
 8007994:	461a      	mov	r2, r3
 8007996:	460b      	mov	r3, r1
 8007998:	80fb      	strh	r3, [r7, #6]
 800799a:	4613      	mov	r3, r2
 800799c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80079a8:	2300      	movs	r3, #0
 80079aa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80079ac:	7979      	ldrb	r1, [r7, #5]
 80079ae:	7e3b      	ldrb	r3, [r7, #24]
 80079b0:	9303      	str	r3, [sp, #12]
 80079b2:	88fb      	ldrh	r3, [r7, #6]
 80079b4:	9302      	str	r3, [sp, #8]
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	9301      	str	r3, [sp, #4]
 80079ba:	2301      	movs	r3, #1
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	2300      	movs	r3, #0
 80079c0:	2200      	movs	r2, #0
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f000 fad5 	bl	8007f72 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b088      	sub	sp, #32
 80079d6:	af04      	add	r7, sp, #16
 80079d8:	60f8      	str	r0, [r7, #12]
 80079da:	60b9      	str	r1, [r7, #8]
 80079dc:	4611      	mov	r1, r2
 80079de:	461a      	mov	r2, r3
 80079e0:	460b      	mov	r3, r1
 80079e2:	80fb      	strh	r3, [r7, #6]
 80079e4:	4613      	mov	r3, r2
 80079e6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80079e8:	7979      	ldrb	r1, [r7, #5]
 80079ea:	2300      	movs	r3, #0
 80079ec:	9303      	str	r3, [sp, #12]
 80079ee:	88fb      	ldrh	r3, [r7, #6]
 80079f0:	9302      	str	r3, [sp, #8]
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	9301      	str	r3, [sp, #4]
 80079f6:	2301      	movs	r3, #1
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	2300      	movs	r3, #0
 80079fc:	2201      	movs	r2, #1
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f000 fab7 	bl	8007f72 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007a04:	2300      	movs	r3, #0

}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b088      	sub	sp, #32
 8007a12:	af04      	add	r7, sp, #16
 8007a14:	60f8      	str	r0, [r7, #12]
 8007a16:	60b9      	str	r1, [r7, #8]
 8007a18:	4611      	mov	r1, r2
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	80fb      	strh	r3, [r7, #6]
 8007a20:	4613      	mov	r3, r2
 8007a22:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a32:	7979      	ldrb	r1, [r7, #5]
 8007a34:	7e3b      	ldrb	r3, [r7, #24]
 8007a36:	9303      	str	r3, [sp, #12]
 8007a38:	88fb      	ldrh	r3, [r7, #6]
 8007a3a:	9302      	str	r3, [sp, #8]
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	9301      	str	r3, [sp, #4]
 8007a40:	2301      	movs	r3, #1
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	2302      	movs	r3, #2
 8007a46:	2200      	movs	r2, #0
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f000 fa92 	bl	8007f72 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b088      	sub	sp, #32
 8007a5c:	af04      	add	r7, sp, #16
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	4611      	mov	r1, r2
 8007a64:	461a      	mov	r2, r3
 8007a66:	460b      	mov	r3, r1
 8007a68:	80fb      	strh	r3, [r7, #6]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a6e:	7979      	ldrb	r1, [r7, #5]
 8007a70:	2300      	movs	r3, #0
 8007a72:	9303      	str	r3, [sp, #12]
 8007a74:	88fb      	ldrh	r3, [r7, #6]
 8007a76:	9302      	str	r3, [sp, #8]
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	9301      	str	r3, [sp, #4]
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	2302      	movs	r3, #2
 8007a82:	2201      	movs	r2, #1
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f000 fa74 	bl	8007f72 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af04      	add	r7, sp, #16
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	4608      	mov	r0, r1
 8007a9e:	4611      	mov	r1, r2
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	70fb      	strb	r3, [r7, #3]
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	70bb      	strb	r3, [r7, #2]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007aae:	7878      	ldrb	r0, [r7, #1]
 8007ab0:	78ba      	ldrb	r2, [r7, #2]
 8007ab2:	78f9      	ldrb	r1, [r7, #3]
 8007ab4:	8b3b      	ldrh	r3, [r7, #24]
 8007ab6:	9302      	str	r3, [sp, #8]
 8007ab8:	7d3b      	ldrb	r3, [r7, #20]
 8007aba:	9301      	str	r3, [sp, #4]
 8007abc:	7c3b      	ldrb	r3, [r7, #16]
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fa07 	bl	8007ed6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b082      	sub	sp, #8
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	460b      	mov	r3, r1
 8007adc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007ade:	78fb      	ldrb	r3, [r7, #3]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fa26 	bl	8007f34 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b084      	sub	sp, #16
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
 8007afa:	460b      	mov	r3, r1
 8007afc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f836 	bl	8007b70 <USBH_GetFreePipe>
 8007b04:	4603      	mov	r3, r0
 8007b06:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007b08:	89fb      	ldrh	r3, [r7, #14]
 8007b0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d00a      	beq.n	8007b28 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007b12:	78fa      	ldrb	r2, [r7, #3]
 8007b14:	89fb      	ldrh	r3, [r7, #14]
 8007b16:	f003 030f 	and.w	r3, r3, #15
 8007b1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b1e:	6879      	ldr	r1, [r7, #4]
 8007b20:	33e0      	adds	r3, #224	; 0xe0
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	440b      	add	r3, r1
 8007b26:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007b28:	89fb      	ldrh	r3, [r7, #14]
 8007b2a:	b2db      	uxtb	r3, r3
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	2b0f      	cmp	r3, #15
 8007b44:	d80d      	bhi.n	8007b62 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007b46:	78fb      	ldrb	r3, [r7, #3]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	33e0      	adds	r3, #224	; 0xe0
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	78fb      	ldrb	r3, [r7, #3]
 8007b54:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007b58:	6879      	ldr	r1, [r7, #4]
 8007b5a:	33e0      	adds	r3, #224	; 0xe0
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	440b      	add	r3, r1
 8007b60:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	73fb      	strb	r3, [r7, #15]
 8007b80:	e00f      	b.n	8007ba2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007b82:	7bfb      	ldrb	r3, [r7, #15]
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	33e0      	adds	r3, #224	; 0xe0
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	4413      	add	r3, r2
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d102      	bne.n	8007b9c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	e007      	b.n	8007bac <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007b9c:	7bfb      	ldrb	r3, [r7, #15]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	73fb      	strb	r3, [r7, #15]
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
 8007ba4:	2b0f      	cmp	r3, #15
 8007ba6:	d9ec      	bls.n	8007b82 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007ba8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	490e      	ldr	r1, [pc, #56]	; (8007bf8 <MX_USB_HOST_Init+0x40>)
 8007bc0:	480e      	ldr	r0, [pc, #56]	; (8007bfc <MX_USB_HOST_Init+0x44>)
 8007bc2:	f7ff fb37 	bl	8007234 <USBH_Init>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d001      	beq.n	8007bd0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007bcc:	f7f9 f9d2 	bl	8000f74 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007bd0:	490b      	ldr	r1, [pc, #44]	; (8007c00 <MX_USB_HOST_Init+0x48>)
 8007bd2:	480a      	ldr	r0, [pc, #40]	; (8007bfc <MX_USB_HOST_Init+0x44>)
 8007bd4:	f7ff fbbc 	bl	8007350 <USBH_RegisterClass>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d001      	beq.n	8007be2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007bde:	f7f9 f9c9 	bl	8000f74 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007be2:	4806      	ldr	r0, [pc, #24]	; (8007bfc <MX_USB_HOST_Init+0x44>)
 8007be4:	f7ff fc40 	bl	8007468 <USBH_Start>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d001      	beq.n	8007bf2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007bee:	f7f9 f9c1 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007bf2:	bf00      	nop
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	08007c05 	.word	0x08007c05
 8007bfc:	200002b4 	.word	0x200002b4
 8007c00:	20000078 	.word	0x20000078

08007c04 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007c10:	78fb      	ldrb	r3, [r7, #3]
 8007c12:	3b01      	subs	r3, #1
 8007c14:	2b04      	cmp	r3, #4
 8007c16:	d819      	bhi.n	8007c4c <USBH_UserProcess+0x48>
 8007c18:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <USBH_UserProcess+0x1c>)
 8007c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1e:	bf00      	nop
 8007c20:	08007c4d 	.word	0x08007c4d
 8007c24:	08007c3d 	.word	0x08007c3d
 8007c28:	08007c4d 	.word	0x08007c4d
 8007c2c:	08007c45 	.word	0x08007c45
 8007c30:	08007c35 	.word	0x08007c35
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007c34:	4b09      	ldr	r3, [pc, #36]	; (8007c5c <USBH_UserProcess+0x58>)
 8007c36:	2203      	movs	r2, #3
 8007c38:	701a      	strb	r2, [r3, #0]
  break;
 8007c3a:	e008      	b.n	8007c4e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007c3c:	4b07      	ldr	r3, [pc, #28]	; (8007c5c <USBH_UserProcess+0x58>)
 8007c3e:	2202      	movs	r2, #2
 8007c40:	701a      	strb	r2, [r3, #0]
  break;
 8007c42:	e004      	b.n	8007c4e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007c44:	4b05      	ldr	r3, [pc, #20]	; (8007c5c <USBH_UserProcess+0x58>)
 8007c46:	2201      	movs	r2, #1
 8007c48:	701a      	strb	r2, [r3, #0]
  break;
 8007c4a:	e000      	b.n	8007c4e <USBH_UserProcess+0x4a>

  default:
  break;
 8007c4c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007c4e:	bf00      	nop
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	2000068c 	.word	0x2000068c

08007c60 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b08a      	sub	sp, #40	; 0x28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c68:	f107 0314 	add.w	r3, r7, #20
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	601a      	str	r2, [r3, #0]
 8007c70:	605a      	str	r2, [r3, #4]
 8007c72:	609a      	str	r2, [r3, #8]
 8007c74:	60da      	str	r2, [r3, #12]
 8007c76:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c80:	d147      	bne.n	8007d12 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c82:	2300      	movs	r3, #0
 8007c84:	613b      	str	r3, [r7, #16]
 8007c86:	4b25      	ldr	r3, [pc, #148]	; (8007d1c <HAL_HCD_MspInit+0xbc>)
 8007c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8a:	4a24      	ldr	r2, [pc, #144]	; (8007d1c <HAL_HCD_MspInit+0xbc>)
 8007c8c:	f043 0301 	orr.w	r3, r3, #1
 8007c90:	6313      	str	r3, [r2, #48]	; 0x30
 8007c92:	4b22      	ldr	r3, [pc, #136]	; (8007d1c <HAL_HCD_MspInit+0xbc>)
 8007c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	613b      	str	r3, [r7, #16]
 8007c9c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007c9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007cac:	f107 0314 	add.w	r3, r7, #20
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	481b      	ldr	r0, [pc, #108]	; (8007d20 <HAL_HCD_MspInit+0xc0>)
 8007cb4:	f7fa fb50 	bl	8002358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007cb8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007cca:	230a      	movs	r3, #10
 8007ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cce:	f107 0314 	add.w	r3, r7, #20
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	4812      	ldr	r0, [pc, #72]	; (8007d20 <HAL_HCD_MspInit+0xc0>)
 8007cd6:	f7fa fb3f 	bl	8002358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007cda:	4b10      	ldr	r3, [pc, #64]	; (8007d1c <HAL_HCD_MspInit+0xbc>)
 8007cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cde:	4a0f      	ldr	r2, [pc, #60]	; (8007d1c <HAL_HCD_MspInit+0xbc>)
 8007ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ce4:	6353      	str	r3, [r2, #52]	; 0x34
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	60fb      	str	r3, [r7, #12]
 8007cea:	4b0c      	ldr	r3, [pc, #48]	; (8007d1c <HAL_HCD_MspInit+0xbc>)
 8007cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cee:	4a0b      	ldr	r2, [pc, #44]	; (8007d1c <HAL_HCD_MspInit+0xbc>)
 8007cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8007cf6:	4b09      	ldr	r3, [pc, #36]	; (8007d1c <HAL_HCD_MspInit+0xbc>)
 8007cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cfe:	60fb      	str	r3, [r7, #12]
 8007d00:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d02:	2200      	movs	r2, #0
 8007d04:	2100      	movs	r1, #0
 8007d06:	2043      	movs	r0, #67	; 0x43
 8007d08:	f7fa faef 	bl	80022ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d0c:	2043      	movs	r0, #67	; 0x43
 8007d0e:	f7fa fb08 	bl	8002322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d12:	bf00      	nop
 8007d14:	3728      	adds	r7, #40	; 0x28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	40023800 	.word	0x40023800
 8007d20:	40020000 	.word	0x40020000

08007d24 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7ff fbb7 	bl	80074a6 <USBH_LL_IncTimer>
}
 8007d38:	bf00      	nop
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7ff fbef 	bl	8007532 <USBH_LL_Connect>
}
 8007d54:	bf00      	nop
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7ff fbf8 	bl	8007560 <USBH_LL_Disconnect>
}
 8007d70:	bf00      	nop
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	460b      	mov	r3, r1
 8007d82:	70fb      	strb	r3, [r7, #3]
 8007d84:	4613      	mov	r3, r2
 8007d86:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7ff fba9 	bl	80074fa <USBH_LL_PortEnabled>
}
 8007da8:	bf00      	nop
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7ff fba9 	bl	8007516 <USBH_LL_PortDisabled>
}
 8007dc4:	bf00      	nop
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d12a      	bne.n	8007e34 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007dde:	4a18      	ldr	r2, [pc, #96]	; (8007e40 <USBH_LL_Init+0x74>)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a15      	ldr	r2, [pc, #84]	; (8007e40 <USBH_LL_Init+0x74>)
 8007dea:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007dee:	4b14      	ldr	r3, [pc, #80]	; (8007e40 <USBH_LL_Init+0x74>)
 8007df0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007df4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007df6:	4b12      	ldr	r3, [pc, #72]	; (8007e40 <USBH_LL_Init+0x74>)
 8007df8:	2208      	movs	r2, #8
 8007dfa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007dfc:	4b10      	ldr	r3, [pc, #64]	; (8007e40 <USBH_LL_Init+0x74>)
 8007dfe:	2201      	movs	r2, #1
 8007e00:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007e02:	4b0f      	ldr	r3, [pc, #60]	; (8007e40 <USBH_LL_Init+0x74>)
 8007e04:	2200      	movs	r2, #0
 8007e06:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007e08:	4b0d      	ldr	r3, [pc, #52]	; (8007e40 <USBH_LL_Init+0x74>)
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007e0e:	4b0c      	ldr	r3, [pc, #48]	; (8007e40 <USBH_LL_Init+0x74>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007e14:	480a      	ldr	r0, [pc, #40]	; (8007e40 <USBH_LL_Init+0x74>)
 8007e16:	f7fa fd20 	bl	800285a <HAL_HCD_Init>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007e20:	f7f9 f8a8 	bl	8000f74 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007e24:	4806      	ldr	r0, [pc, #24]	; (8007e40 <USBH_LL_Init+0x74>)
 8007e26:	f7fb f8f6 	bl	8003016 <HAL_HCD_GetCurrentFrame>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7ff fb2a 	bl	8007488 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	20000690 	.word	0x20000690

08007e44 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fb f873 	bl	8002f46 <HAL_HCD_Start>
 8007e60:	4603      	mov	r3, r0
 8007e62:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007e64:	7bfb      	ldrb	r3, [r7, #15]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 f90e 	bl	8008088 <USBH_Get_USB_Status>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e70:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fb f87b 	bl	8002f8c <HAL_HCD_Stop>
 8007e96:	4603      	mov	r3, r0
 8007e98:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 f8f3 	bl	8008088 <USBH_Get_USB_Status>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ea6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ec2:	78fa      	ldrb	r2, [r7, #3]
 8007ec4:	4611      	mov	r1, r2
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fb f891 	bl	8002fee <HAL_HCD_HC_GetXferCount>
 8007ecc:	4603      	mov	r3, r0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007ed6:	b590      	push	{r4, r7, lr}
 8007ed8:	b089      	sub	sp, #36	; 0x24
 8007eda:	af04      	add	r7, sp, #16
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	4608      	mov	r0, r1
 8007ee0:	4611      	mov	r1, r2
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	70fb      	strb	r3, [r7, #3]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	70bb      	strb	r3, [r7, #2]
 8007eec:	4613      	mov	r3, r2
 8007eee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007efe:	787c      	ldrb	r4, [r7, #1]
 8007f00:	78ba      	ldrb	r2, [r7, #2]
 8007f02:	78f9      	ldrb	r1, [r7, #3]
 8007f04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f06:	9302      	str	r3, [sp, #8]
 8007f08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007f0c:	9301      	str	r3, [sp, #4]
 8007f0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	4623      	mov	r3, r4
 8007f16:	f7fa fd02 	bl	800291e <HAL_HCD_HC_Init>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f000 f8b1 	bl	8008088 <USBH_Get_USB_Status>
 8007f26:	4603      	mov	r3, r0
 8007f28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd90      	pop	{r4, r7, pc}

08007f34 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f40:	2300      	movs	r3, #0
 8007f42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f4e:	78fa      	ldrb	r2, [r7, #3]
 8007f50:	4611      	mov	r1, r2
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fa fd72 	bl	8002a3c <HAL_HCD_HC_Halt>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 f892 	bl	8008088 <USBH_Get_USB_Status>
 8007f64:	4603      	mov	r3, r0
 8007f66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f68:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007f72:	b590      	push	{r4, r7, lr}
 8007f74:	b089      	sub	sp, #36	; 0x24
 8007f76:	af04      	add	r7, sp, #16
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	4608      	mov	r0, r1
 8007f7c:	4611      	mov	r1, r2
 8007f7e:	461a      	mov	r2, r3
 8007f80:	4603      	mov	r3, r0
 8007f82:	70fb      	strb	r3, [r7, #3]
 8007f84:	460b      	mov	r3, r1
 8007f86:	70bb      	strb	r3, [r7, #2]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007f9a:	787c      	ldrb	r4, [r7, #1]
 8007f9c:	78ba      	ldrb	r2, [r7, #2]
 8007f9e:	78f9      	ldrb	r1, [r7, #3]
 8007fa0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007fa4:	9303      	str	r3, [sp, #12]
 8007fa6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007fa8:	9302      	str	r3, [sp, #8]
 8007faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fac:	9301      	str	r3, [sp, #4]
 8007fae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	4623      	mov	r3, r4
 8007fb6:	f7fa fd65 	bl	8002a84 <HAL_HCD_HC_SubmitRequest>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 f861 	bl	8008088 <USBH_Get_USB_Status>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fca:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd90      	pop	{r4, r7, pc}

08007fd4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fe6:	78fa      	ldrb	r2, [r7, #3]
 8007fe8:	4611      	mov	r1, r2
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fa ffeb 	bl	8002fc6 <HAL_HCD_HC_GetURBState>
 8007ff0:	4603      	mov	r3, r0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	460b      	mov	r3, r1
 8008004:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800800c:	2b01      	cmp	r3, #1
 800800e:	d103      	bne.n	8008018 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008010:	78fb      	ldrb	r3, [r7, #3]
 8008012:	4618      	mov	r0, r3
 8008014:	f000 f864 	bl	80080e0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008018:	20c8      	movs	r0, #200	; 0xc8
 800801a:	f7fa f867 	bl	80020ec <HAL_Delay>
  return USBH_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	70fb      	strb	r3, [r7, #3]
 8008034:	4613      	mov	r3, r2
 8008036:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800803e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008040:	78fb      	ldrb	r3, [r7, #3]
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	212c      	movs	r1, #44	; 0x2c
 8008046:	fb01 f303 	mul.w	r3, r1, r3
 800804a:	4413      	add	r3, r2
 800804c:	333b      	adds	r3, #59	; 0x3b
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d009      	beq.n	8008068 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008054:	78fb      	ldrb	r3, [r7, #3]
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	212c      	movs	r1, #44	; 0x2c
 800805a:	fb01 f303 	mul.w	r3, r1, r3
 800805e:	4413      	add	r3, r2
 8008060:	3354      	adds	r3, #84	; 0x54
 8008062:	78ba      	ldrb	r2, [r7, #2]
 8008064:	701a      	strb	r2, [r3, #0]
 8008066:	e008      	b.n	800807a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008068:	78fb      	ldrb	r3, [r7, #3]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	212c      	movs	r1, #44	; 0x2c
 800806e:	fb01 f303 	mul.w	r3, r1, r3
 8008072:	4413      	add	r3, r2
 8008074:	3355      	adds	r3, #85	; 0x55
 8008076:	78ba      	ldrb	r2, [r7, #2]
 8008078:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3714      	adds	r7, #20
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	4603      	mov	r3, r0
 8008090:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008096:	79fb      	ldrb	r3, [r7, #7]
 8008098:	2b03      	cmp	r3, #3
 800809a:	d817      	bhi.n	80080cc <USBH_Get_USB_Status+0x44>
 800809c:	a201      	add	r2, pc, #4	; (adr r2, 80080a4 <USBH_Get_USB_Status+0x1c>)
 800809e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a2:	bf00      	nop
 80080a4:	080080b5 	.word	0x080080b5
 80080a8:	080080bb 	.word	0x080080bb
 80080ac:	080080c1 	.word	0x080080c1
 80080b0:	080080c7 	.word	0x080080c7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	73fb      	strb	r3, [r7, #15]
    break;
 80080b8:	e00b      	b.n	80080d2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80080ba:	2302      	movs	r3, #2
 80080bc:	73fb      	strb	r3, [r7, #15]
    break;
 80080be:	e008      	b.n	80080d2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80080c0:	2301      	movs	r3, #1
 80080c2:	73fb      	strb	r3, [r7, #15]
    break;
 80080c4:	e005      	b.n	80080d2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80080c6:	2302      	movs	r3, #2
 80080c8:	73fb      	strb	r3, [r7, #15]
    break;
 80080ca:	e002      	b.n	80080d2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80080cc:	2302      	movs	r3, #2
 80080ce:	73fb      	strb	r3, [r7, #15]
    break;
 80080d0:	bf00      	nop
  }
  return usb_status;
 80080d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	4603      	mov	r3, r0
 80080e8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80080ea:	79fb      	ldrb	r3, [r7, #7]
 80080ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80080ee:	79fb      	ldrb	r3, [r7, #7]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d102      	bne.n	80080fa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80080f4:	2300      	movs	r3, #0
 80080f6:	73fb      	strb	r3, [r7, #15]
 80080f8:	e001      	b.n	80080fe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80080fa:	2301      	movs	r3, #1
 80080fc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
 8008100:	461a      	mov	r2, r3
 8008102:	2101      	movs	r1, #1
 8008104:	4803      	ldr	r0, [pc, #12]	; (8008114 <MX_DriverVbusFS+0x34>)
 8008106:	f7fa fb8f 	bl	8002828 <HAL_GPIO_WritePin>
}
 800810a:	bf00      	nop
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	40020800 	.word	0x40020800

08008118 <__errno>:
 8008118:	4b01      	ldr	r3, [pc, #4]	; (8008120 <__errno+0x8>)
 800811a:	6818      	ldr	r0, [r3, #0]
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	20000098 	.word	0x20000098

08008124 <__libc_init_array>:
 8008124:	b570      	push	{r4, r5, r6, lr}
 8008126:	4d0d      	ldr	r5, [pc, #52]	; (800815c <__libc_init_array+0x38>)
 8008128:	4c0d      	ldr	r4, [pc, #52]	; (8008160 <__libc_init_array+0x3c>)
 800812a:	1b64      	subs	r4, r4, r5
 800812c:	10a4      	asrs	r4, r4, #2
 800812e:	2600      	movs	r6, #0
 8008130:	42a6      	cmp	r6, r4
 8008132:	d109      	bne.n	8008148 <__libc_init_array+0x24>
 8008134:	4d0b      	ldr	r5, [pc, #44]	; (8008164 <__libc_init_array+0x40>)
 8008136:	4c0c      	ldr	r4, [pc, #48]	; (8008168 <__libc_init_array+0x44>)
 8008138:	f000 f974 	bl	8008424 <_init>
 800813c:	1b64      	subs	r4, r4, r5
 800813e:	10a4      	asrs	r4, r4, #2
 8008140:	2600      	movs	r6, #0
 8008142:	42a6      	cmp	r6, r4
 8008144:	d105      	bne.n	8008152 <__libc_init_array+0x2e>
 8008146:	bd70      	pop	{r4, r5, r6, pc}
 8008148:	f855 3b04 	ldr.w	r3, [r5], #4
 800814c:	4798      	blx	r3
 800814e:	3601      	adds	r6, #1
 8008150:	e7ee      	b.n	8008130 <__libc_init_array+0xc>
 8008152:	f855 3b04 	ldr.w	r3, [r5], #4
 8008156:	4798      	blx	r3
 8008158:	3601      	adds	r6, #1
 800815a:	e7f2      	b.n	8008142 <__libc_init_array+0x1e>
 800815c:	08008448 	.word	0x08008448
 8008160:	08008448 	.word	0x08008448
 8008164:	08008448 	.word	0x08008448
 8008168:	0800844c 	.word	0x0800844c

0800816c <malloc>:
 800816c:	4b02      	ldr	r3, [pc, #8]	; (8008178 <malloc+0xc>)
 800816e:	4601      	mov	r1, r0
 8008170:	6818      	ldr	r0, [r3, #0]
 8008172:	f000 b87f 	b.w	8008274 <_malloc_r>
 8008176:	bf00      	nop
 8008178:	20000098 	.word	0x20000098

0800817c <free>:
 800817c:	4b02      	ldr	r3, [pc, #8]	; (8008188 <free+0xc>)
 800817e:	4601      	mov	r1, r0
 8008180:	6818      	ldr	r0, [r3, #0]
 8008182:	f000 b80b 	b.w	800819c <_free_r>
 8008186:	bf00      	nop
 8008188:	20000098 	.word	0x20000098

0800818c <memset>:
 800818c:	4402      	add	r2, r0
 800818e:	4603      	mov	r3, r0
 8008190:	4293      	cmp	r3, r2
 8008192:	d100      	bne.n	8008196 <memset+0xa>
 8008194:	4770      	bx	lr
 8008196:	f803 1b01 	strb.w	r1, [r3], #1
 800819a:	e7f9      	b.n	8008190 <memset+0x4>

0800819c <_free_r>:
 800819c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800819e:	2900      	cmp	r1, #0
 80081a0:	d044      	beq.n	800822c <_free_r+0x90>
 80081a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081a6:	9001      	str	r0, [sp, #4]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f1a1 0404 	sub.w	r4, r1, #4
 80081ae:	bfb8      	it	lt
 80081b0:	18e4      	addlt	r4, r4, r3
 80081b2:	f000 f8e3 	bl	800837c <__malloc_lock>
 80081b6:	4a1e      	ldr	r2, [pc, #120]	; (8008230 <_free_r+0x94>)
 80081b8:	9801      	ldr	r0, [sp, #4]
 80081ba:	6813      	ldr	r3, [r2, #0]
 80081bc:	b933      	cbnz	r3, 80081cc <_free_r+0x30>
 80081be:	6063      	str	r3, [r4, #4]
 80081c0:	6014      	str	r4, [r2, #0]
 80081c2:	b003      	add	sp, #12
 80081c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081c8:	f000 b8de 	b.w	8008388 <__malloc_unlock>
 80081cc:	42a3      	cmp	r3, r4
 80081ce:	d908      	bls.n	80081e2 <_free_r+0x46>
 80081d0:	6825      	ldr	r5, [r4, #0]
 80081d2:	1961      	adds	r1, r4, r5
 80081d4:	428b      	cmp	r3, r1
 80081d6:	bf01      	itttt	eq
 80081d8:	6819      	ldreq	r1, [r3, #0]
 80081da:	685b      	ldreq	r3, [r3, #4]
 80081dc:	1949      	addeq	r1, r1, r5
 80081de:	6021      	streq	r1, [r4, #0]
 80081e0:	e7ed      	b.n	80081be <_free_r+0x22>
 80081e2:	461a      	mov	r2, r3
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	b10b      	cbz	r3, 80081ec <_free_r+0x50>
 80081e8:	42a3      	cmp	r3, r4
 80081ea:	d9fa      	bls.n	80081e2 <_free_r+0x46>
 80081ec:	6811      	ldr	r1, [r2, #0]
 80081ee:	1855      	adds	r5, r2, r1
 80081f0:	42a5      	cmp	r5, r4
 80081f2:	d10b      	bne.n	800820c <_free_r+0x70>
 80081f4:	6824      	ldr	r4, [r4, #0]
 80081f6:	4421      	add	r1, r4
 80081f8:	1854      	adds	r4, r2, r1
 80081fa:	42a3      	cmp	r3, r4
 80081fc:	6011      	str	r1, [r2, #0]
 80081fe:	d1e0      	bne.n	80081c2 <_free_r+0x26>
 8008200:	681c      	ldr	r4, [r3, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	6053      	str	r3, [r2, #4]
 8008206:	4421      	add	r1, r4
 8008208:	6011      	str	r1, [r2, #0]
 800820a:	e7da      	b.n	80081c2 <_free_r+0x26>
 800820c:	d902      	bls.n	8008214 <_free_r+0x78>
 800820e:	230c      	movs	r3, #12
 8008210:	6003      	str	r3, [r0, #0]
 8008212:	e7d6      	b.n	80081c2 <_free_r+0x26>
 8008214:	6825      	ldr	r5, [r4, #0]
 8008216:	1961      	adds	r1, r4, r5
 8008218:	428b      	cmp	r3, r1
 800821a:	bf04      	itt	eq
 800821c:	6819      	ldreq	r1, [r3, #0]
 800821e:	685b      	ldreq	r3, [r3, #4]
 8008220:	6063      	str	r3, [r4, #4]
 8008222:	bf04      	itt	eq
 8008224:	1949      	addeq	r1, r1, r5
 8008226:	6021      	streq	r1, [r4, #0]
 8008228:	6054      	str	r4, [r2, #4]
 800822a:	e7ca      	b.n	80081c2 <_free_r+0x26>
 800822c:	b003      	add	sp, #12
 800822e:	bd30      	pop	{r4, r5, pc}
 8008230:	20000994 	.word	0x20000994

08008234 <sbrk_aligned>:
 8008234:	b570      	push	{r4, r5, r6, lr}
 8008236:	4e0e      	ldr	r6, [pc, #56]	; (8008270 <sbrk_aligned+0x3c>)
 8008238:	460c      	mov	r4, r1
 800823a:	6831      	ldr	r1, [r6, #0]
 800823c:	4605      	mov	r5, r0
 800823e:	b911      	cbnz	r1, 8008246 <sbrk_aligned+0x12>
 8008240:	f000 f88c 	bl	800835c <_sbrk_r>
 8008244:	6030      	str	r0, [r6, #0]
 8008246:	4621      	mov	r1, r4
 8008248:	4628      	mov	r0, r5
 800824a:	f000 f887 	bl	800835c <_sbrk_r>
 800824e:	1c43      	adds	r3, r0, #1
 8008250:	d00a      	beq.n	8008268 <sbrk_aligned+0x34>
 8008252:	1cc4      	adds	r4, r0, #3
 8008254:	f024 0403 	bic.w	r4, r4, #3
 8008258:	42a0      	cmp	r0, r4
 800825a:	d007      	beq.n	800826c <sbrk_aligned+0x38>
 800825c:	1a21      	subs	r1, r4, r0
 800825e:	4628      	mov	r0, r5
 8008260:	f000 f87c 	bl	800835c <_sbrk_r>
 8008264:	3001      	adds	r0, #1
 8008266:	d101      	bne.n	800826c <sbrk_aligned+0x38>
 8008268:	f04f 34ff 	mov.w	r4, #4294967295
 800826c:	4620      	mov	r0, r4
 800826e:	bd70      	pop	{r4, r5, r6, pc}
 8008270:	20000998 	.word	0x20000998

08008274 <_malloc_r>:
 8008274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008278:	1ccd      	adds	r5, r1, #3
 800827a:	f025 0503 	bic.w	r5, r5, #3
 800827e:	3508      	adds	r5, #8
 8008280:	2d0c      	cmp	r5, #12
 8008282:	bf38      	it	cc
 8008284:	250c      	movcc	r5, #12
 8008286:	2d00      	cmp	r5, #0
 8008288:	4607      	mov	r7, r0
 800828a:	db01      	blt.n	8008290 <_malloc_r+0x1c>
 800828c:	42a9      	cmp	r1, r5
 800828e:	d905      	bls.n	800829c <_malloc_r+0x28>
 8008290:	230c      	movs	r3, #12
 8008292:	603b      	str	r3, [r7, #0]
 8008294:	2600      	movs	r6, #0
 8008296:	4630      	mov	r0, r6
 8008298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800829c:	4e2e      	ldr	r6, [pc, #184]	; (8008358 <_malloc_r+0xe4>)
 800829e:	f000 f86d 	bl	800837c <__malloc_lock>
 80082a2:	6833      	ldr	r3, [r6, #0]
 80082a4:	461c      	mov	r4, r3
 80082a6:	bb34      	cbnz	r4, 80082f6 <_malloc_r+0x82>
 80082a8:	4629      	mov	r1, r5
 80082aa:	4638      	mov	r0, r7
 80082ac:	f7ff ffc2 	bl	8008234 <sbrk_aligned>
 80082b0:	1c43      	adds	r3, r0, #1
 80082b2:	4604      	mov	r4, r0
 80082b4:	d14d      	bne.n	8008352 <_malloc_r+0xde>
 80082b6:	6834      	ldr	r4, [r6, #0]
 80082b8:	4626      	mov	r6, r4
 80082ba:	2e00      	cmp	r6, #0
 80082bc:	d140      	bne.n	8008340 <_malloc_r+0xcc>
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	4631      	mov	r1, r6
 80082c2:	4638      	mov	r0, r7
 80082c4:	eb04 0803 	add.w	r8, r4, r3
 80082c8:	f000 f848 	bl	800835c <_sbrk_r>
 80082cc:	4580      	cmp	r8, r0
 80082ce:	d13a      	bne.n	8008346 <_malloc_r+0xd2>
 80082d0:	6821      	ldr	r1, [r4, #0]
 80082d2:	3503      	adds	r5, #3
 80082d4:	1a6d      	subs	r5, r5, r1
 80082d6:	f025 0503 	bic.w	r5, r5, #3
 80082da:	3508      	adds	r5, #8
 80082dc:	2d0c      	cmp	r5, #12
 80082de:	bf38      	it	cc
 80082e0:	250c      	movcc	r5, #12
 80082e2:	4629      	mov	r1, r5
 80082e4:	4638      	mov	r0, r7
 80082e6:	f7ff ffa5 	bl	8008234 <sbrk_aligned>
 80082ea:	3001      	adds	r0, #1
 80082ec:	d02b      	beq.n	8008346 <_malloc_r+0xd2>
 80082ee:	6823      	ldr	r3, [r4, #0]
 80082f0:	442b      	add	r3, r5
 80082f2:	6023      	str	r3, [r4, #0]
 80082f4:	e00e      	b.n	8008314 <_malloc_r+0xa0>
 80082f6:	6822      	ldr	r2, [r4, #0]
 80082f8:	1b52      	subs	r2, r2, r5
 80082fa:	d41e      	bmi.n	800833a <_malloc_r+0xc6>
 80082fc:	2a0b      	cmp	r2, #11
 80082fe:	d916      	bls.n	800832e <_malloc_r+0xba>
 8008300:	1961      	adds	r1, r4, r5
 8008302:	42a3      	cmp	r3, r4
 8008304:	6025      	str	r5, [r4, #0]
 8008306:	bf18      	it	ne
 8008308:	6059      	strne	r1, [r3, #4]
 800830a:	6863      	ldr	r3, [r4, #4]
 800830c:	bf08      	it	eq
 800830e:	6031      	streq	r1, [r6, #0]
 8008310:	5162      	str	r2, [r4, r5]
 8008312:	604b      	str	r3, [r1, #4]
 8008314:	4638      	mov	r0, r7
 8008316:	f104 060b 	add.w	r6, r4, #11
 800831a:	f000 f835 	bl	8008388 <__malloc_unlock>
 800831e:	f026 0607 	bic.w	r6, r6, #7
 8008322:	1d23      	adds	r3, r4, #4
 8008324:	1af2      	subs	r2, r6, r3
 8008326:	d0b6      	beq.n	8008296 <_malloc_r+0x22>
 8008328:	1b9b      	subs	r3, r3, r6
 800832a:	50a3      	str	r3, [r4, r2]
 800832c:	e7b3      	b.n	8008296 <_malloc_r+0x22>
 800832e:	6862      	ldr	r2, [r4, #4]
 8008330:	42a3      	cmp	r3, r4
 8008332:	bf0c      	ite	eq
 8008334:	6032      	streq	r2, [r6, #0]
 8008336:	605a      	strne	r2, [r3, #4]
 8008338:	e7ec      	b.n	8008314 <_malloc_r+0xa0>
 800833a:	4623      	mov	r3, r4
 800833c:	6864      	ldr	r4, [r4, #4]
 800833e:	e7b2      	b.n	80082a6 <_malloc_r+0x32>
 8008340:	4634      	mov	r4, r6
 8008342:	6876      	ldr	r6, [r6, #4]
 8008344:	e7b9      	b.n	80082ba <_malloc_r+0x46>
 8008346:	230c      	movs	r3, #12
 8008348:	603b      	str	r3, [r7, #0]
 800834a:	4638      	mov	r0, r7
 800834c:	f000 f81c 	bl	8008388 <__malloc_unlock>
 8008350:	e7a1      	b.n	8008296 <_malloc_r+0x22>
 8008352:	6025      	str	r5, [r4, #0]
 8008354:	e7de      	b.n	8008314 <_malloc_r+0xa0>
 8008356:	bf00      	nop
 8008358:	20000994 	.word	0x20000994

0800835c <_sbrk_r>:
 800835c:	b538      	push	{r3, r4, r5, lr}
 800835e:	4d06      	ldr	r5, [pc, #24]	; (8008378 <_sbrk_r+0x1c>)
 8008360:	2300      	movs	r3, #0
 8008362:	4604      	mov	r4, r0
 8008364:	4608      	mov	r0, r1
 8008366:	602b      	str	r3, [r5, #0]
 8008368:	f7f8 ffe6 	bl	8001338 <_sbrk>
 800836c:	1c43      	adds	r3, r0, #1
 800836e:	d102      	bne.n	8008376 <_sbrk_r+0x1a>
 8008370:	682b      	ldr	r3, [r5, #0]
 8008372:	b103      	cbz	r3, 8008376 <_sbrk_r+0x1a>
 8008374:	6023      	str	r3, [r4, #0]
 8008376:	bd38      	pop	{r3, r4, r5, pc}
 8008378:	2000099c 	.word	0x2000099c

0800837c <__malloc_lock>:
 800837c:	4801      	ldr	r0, [pc, #4]	; (8008384 <__malloc_lock+0x8>)
 800837e:	f000 b809 	b.w	8008394 <__retarget_lock_acquire_recursive>
 8008382:	bf00      	nop
 8008384:	200009a0 	.word	0x200009a0

08008388 <__malloc_unlock>:
 8008388:	4801      	ldr	r0, [pc, #4]	; (8008390 <__malloc_unlock+0x8>)
 800838a:	f000 b804 	b.w	8008396 <__retarget_lock_release_recursive>
 800838e:	bf00      	nop
 8008390:	200009a0 	.word	0x200009a0

08008394 <__retarget_lock_acquire_recursive>:
 8008394:	4770      	bx	lr

08008396 <__retarget_lock_release_recursive>:
 8008396:	4770      	bx	lr

08008398 <round>:
 8008398:	ec51 0b10 	vmov	r0, r1, d0
 800839c:	b570      	push	{r4, r5, r6, lr}
 800839e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80083a2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80083a6:	2c13      	cmp	r4, #19
 80083a8:	ee10 2a10 	vmov	r2, s0
 80083ac:	460b      	mov	r3, r1
 80083ae:	dc19      	bgt.n	80083e4 <round+0x4c>
 80083b0:	2c00      	cmp	r4, #0
 80083b2:	da09      	bge.n	80083c8 <round+0x30>
 80083b4:	3401      	adds	r4, #1
 80083b6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80083ba:	d103      	bne.n	80083c4 <round+0x2c>
 80083bc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80083c0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80083c4:	2200      	movs	r2, #0
 80083c6:	e028      	b.n	800841a <round+0x82>
 80083c8:	4d15      	ldr	r5, [pc, #84]	; (8008420 <round+0x88>)
 80083ca:	4125      	asrs	r5, r4
 80083cc:	ea01 0605 	and.w	r6, r1, r5
 80083d0:	4332      	orrs	r2, r6
 80083d2:	d00e      	beq.n	80083f2 <round+0x5a>
 80083d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80083d8:	fa42 f404 	asr.w	r4, r2, r4
 80083dc:	4423      	add	r3, r4
 80083de:	ea23 0305 	bic.w	r3, r3, r5
 80083e2:	e7ef      	b.n	80083c4 <round+0x2c>
 80083e4:	2c33      	cmp	r4, #51	; 0x33
 80083e6:	dd07      	ble.n	80083f8 <round+0x60>
 80083e8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80083ec:	d101      	bne.n	80083f2 <round+0x5a>
 80083ee:	f7f7 fef9 	bl	80001e4 <__adddf3>
 80083f2:	ec41 0b10 	vmov	d0, r0, r1
 80083f6:	bd70      	pop	{r4, r5, r6, pc}
 80083f8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80083fc:	f04f 35ff 	mov.w	r5, #4294967295
 8008400:	40f5      	lsrs	r5, r6
 8008402:	4228      	tst	r0, r5
 8008404:	d0f5      	beq.n	80083f2 <round+0x5a>
 8008406:	2101      	movs	r1, #1
 8008408:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800840c:	fa01 f404 	lsl.w	r4, r1, r4
 8008410:	1912      	adds	r2, r2, r4
 8008412:	bf28      	it	cs
 8008414:	185b      	addcs	r3, r3, r1
 8008416:	ea22 0205 	bic.w	r2, r2, r5
 800841a:	4619      	mov	r1, r3
 800841c:	4610      	mov	r0, r2
 800841e:	e7e8      	b.n	80083f2 <round+0x5a>
 8008420:	000fffff 	.word	0x000fffff

08008424 <_init>:
 8008424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008426:	bf00      	nop
 8008428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800842a:	bc08      	pop	{r3}
 800842c:	469e      	mov	lr, r3
 800842e:	4770      	bx	lr

08008430 <_fini>:
 8008430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008432:	bf00      	nop
 8008434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008436:	bc08      	pop	{r3}
 8008438:	469e      	mov	lr, r3
 800843a:	4770      	bx	lr
