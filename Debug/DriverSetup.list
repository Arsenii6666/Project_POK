
DriverSetup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f060  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0800f1f8  0800f1f8  0001f1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f35c  0800f35c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f35c  0800f35c  0001f35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f364  0800f364  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f364  0800f364  0001f364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f368  0800f368  0001f368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800f36c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d70  200000fc  0800f468  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  20001e6c  0800f468  00021e6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fe12  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053eb  00000000  00000000  0003ff3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  00045330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c0  00000000  00000000  00046a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d628  00000000  00000000  00047ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002240c  00000000  00000000  00065518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009546b  00000000  00000000  00087924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011cd8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ea8  00000000  00000000  0011cde0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800f1e0 	.word	0x0800f1e0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	0800f1e0 	.word	0x0800f1e0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af02      	add	r7, sp, #8
 80004e2:	4603      	mov	r3, r0
 80004e4:	6039      	str	r1, [r7, #0]
 80004e6:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004f2:	f107 020c 	add.w	r2, r7, #12
 80004f6:	2364      	movs	r3, #100	; 0x64
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2302      	movs	r3, #2
 80004fc:	2194      	movs	r1, #148	; 0x94
 80004fe:	4803      	ldr	r0, [pc, #12]	; (800050c <write_register+0x30>)
 8000500:	f004 fcc0 	bl	8004e84 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8000504:	bf00      	nop
 8000506:	3710      	adds	r7, #16
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000118 	.word	0x20000118

08000510 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af02      	add	r7, sp, #8
 8000516:	4603      	mov	r3, r0
 8000518:	6039      	str	r1, [r7, #0]
 800051a:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000520:	f107 020c 	add.w	r2, r7, #12
 8000524:	2364      	movs	r3, #100	; 0x64
 8000526:	9300      	str	r3, [sp, #0]
 8000528:	2301      	movs	r3, #1
 800052a:	2194      	movs	r1, #148	; 0x94
 800052c:	4807      	ldr	r0, [pc, #28]	; (800054c <read_register+0x3c>)
 800052e:	f004 fca9 	bl	8004e84 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000532:	2364      	movs	r3, #100	; 0x64
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2301      	movs	r3, #1
 8000538:	683a      	ldr	r2, [r7, #0]
 800053a:	2194      	movs	r1, #148	; 0x94
 800053c:	4803      	ldr	r0, [pc, #12]	; (800054c <read_register+0x3c>)
 800053e:	f004 fd9f 	bl	8005080 <HAL_I2C_Master_Receive>
}
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000118 	.word	0x20000118

08000550 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000550:	b084      	sub	sp, #16
 8000552:	b580      	push	{r7, lr}
 8000554:	b082      	sub	sp, #8
 8000556:	af00      	add	r7, sp, #0
 8000558:	f107 0c10 	add.w	ip, r7, #16
 800055c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000560:	4b7b      	ldr	r3, [pc, #492]	; (8000750 <CS43_Init+0x200>)
 8000562:	2200      	movs	r2, #0
 8000564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000568:	4b79      	ldr	r3, [pc, #484]	; (8000750 <CS43_Init+0x200>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	69da      	ldr	r2, [r3, #28]
 800056e:	4b78      	ldr	r3, [pc, #480]	; (8000750 <CS43_Init+0x200>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000576:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000578:	2201      	movs	r2, #1
 800057a:	2110      	movs	r1, #16
 800057c:	4875      	ldr	r0, [pc, #468]	; (8000754 <CS43_Init+0x204>)
 800057e:	f002 fec5 	bl	800330c <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000582:	4b75      	ldr	r3, [pc, #468]	; (8000758 <CS43_Init+0x208>)
 8000584:	4618      	mov	r0, r3
 8000586:	f107 0310 	add.w	r3, r7, #16
 800058a:	2254      	movs	r2, #84	; 0x54
 800058c:	4619      	mov	r1, r3
 800058e:	f00e fd13 	bl	800efb8 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000592:	2301      	movs	r3, #1
 8000594:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	4619      	mov	r1, r3
 800059a:	2002      	movs	r0, #2
 800059c:	f7ff ff9e 	bl	80004dc <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80005a4:	797b      	ldrb	r3, [r7, #5]
 80005a6:	f043 0320 	orr.w	r3, r3, #32
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80005ae:	797b      	ldrb	r3, [r7, #5]
 80005b0:	f043 030c 	orr.w	r3, r3, #12
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005b8:	797b      	ldrb	r3, [r7, #5]
 80005ba:	f043 0303 	orr.w	r3, r3, #3
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	3301      	adds	r3, #1
 80005c6:	4619      	mov	r1, r3
 80005c8:	2004      	movs	r0, #4
 80005ca:	f7ff ff87 	bl	80004dc <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005ce:	2380      	movs	r3, #128	; 0x80
 80005d0:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	3301      	adds	r3, #1
 80005d6:	4619      	mov	r1, r3
 80005d8:	2005      	movs	r0, #5
 80005da:	f7ff ff7f 	bl	80004dc <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	4619      	mov	r1, r3
 80005e2:	2006      	movs	r0, #6
 80005e4:	f7ff ff94 	bl	8000510 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005e8:	797b      	ldrb	r3, [r7, #5]
 80005ea:	f003 0320 	and.w	r3, r3, #32
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 80005f2:	797b      	ldrb	r3, [r7, #5]
 80005f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005fc:	797b      	ldrb	r3, [r7, #5]
 80005fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000602:	b2db      	uxtb	r3, r3
 8000604:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000606:	797b      	ldrb	r3, [r7, #5]
 8000608:	f023 0310 	bic.w	r3, r3, #16
 800060c:	b2db      	uxtb	r3, r3
 800060e:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000610:	797b      	ldrb	r3, [r7, #5]
 8000612:	f023 0304 	bic.w	r3, r3, #4
 8000616:	b2db      	uxtb	r3, r3
 8000618:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 800061a:	797b      	ldrb	r3, [r7, #5]
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	b2db      	uxtb	r3, r3
 8000622:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000624:	797b      	ldrb	r3, [r7, #5]
 8000626:	f043 0303 	orr.w	r3, r3, #3
 800062a:	b2db      	uxtb	r3, r3
 800062c:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	3301      	adds	r3, #1
 8000632:	4619      	mov	r1, r3
 8000634:	2006      	movs	r0, #6
 8000636:	f7ff ff51 	bl	80004dc <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	3301      	adds	r3, #1
 800063e:	4619      	mov	r1, r3
 8000640:	2008      	movs	r0, #8
 8000642:	f7ff ff65 	bl	8000510 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000646:	797b      	ldrb	r3, [r7, #5]
 8000648:	f023 030f 	bic.w	r3, r3, #15
 800064c:	b2db      	uxtb	r3, r3
 800064e:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000650:	797b      	ldrb	r3, [r7, #5]
 8000652:	f043 0301 	orr.w	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	3301      	adds	r3, #1
 800065e:	4619      	mov	r1, r3
 8000660:	2008      	movs	r0, #8
 8000662:	f7ff ff3b 	bl	80004dc <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	3301      	adds	r3, #1
 800066a:	4619      	mov	r1, r3
 800066c:	2009      	movs	r0, #9
 800066e:	f7ff ff4f 	bl	8000510 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000672:	797b      	ldrb	r3, [r7, #5]
 8000674:	f023 030f 	bic.w	r3, r3, #15
 8000678:	b2db      	uxtb	r3, r3
 800067a:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 800067c:	797b      	ldrb	r3, [r7, #5]
 800067e:	f043 0301 	orr.w	r3, r3, #1
 8000682:	b2db      	uxtb	r3, r3
 8000684:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	3301      	adds	r3, #1
 800068a:	4619      	mov	r1, r3
 800068c:	2009      	movs	r0, #9
 800068e:	f7ff ff25 	bl	80004dc <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	3301      	adds	r3, #1
 8000696:	4619      	mov	r1, r3
 8000698:	200e      	movs	r0, #14
 800069a:	f7ff ff39 	bl	8000510 <read_register>
	if(outputMode == MODE_ANALOG)
 800069e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	d119      	bne.n	80006da <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80006a6:	797b      	ldrb	r3, [r7, #5]
 80006a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006ba:	797b      	ldrb	r3, [r7, #5]
 80006bc:	f023 0320 	bic.w	r3, r3, #32
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006c4:	797b      	ldrb	r3, [r7, #5]
 80006c6:	f023 0310 	bic.w	r3, r3, #16
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006ce:	797b      	ldrb	r3, [r7, #5]
 80006d0:	f023 0308 	bic.w	r3, r3, #8
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	717b      	strb	r3, [r7, #5]
 80006d8:	e005      	b.n	80006e6 <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 80006da:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d101      	bne.n	80006e6 <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 80006e2:	2302      	movs	r3, #2
 80006e4:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	3301      	adds	r3, #1
 80006ea:	4619      	mov	r1, r3
 80006ec:	200e      	movs	r0, #14
 80006ee:	f7ff fef5 	bl	80004dc <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	3301      	adds	r3, #1
 80006f6:	4619      	mov	r1, r3
 80006f8:	200f      	movs	r0, #15
 80006fa:	f7ff ff09 	bl	8000510 <read_register>
	iData[1] = 0x00;
 80006fe:	2300      	movs	r3, #0
 8000700:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	3301      	adds	r3, #1
 8000706:	4619      	mov	r1, r3
 8000708:	200f      	movs	r0, #15
 800070a:	f7ff fee7 	bl	80004dc <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	3301      	adds	r3, #1
 8000716:	4619      	mov	r1, r3
 8000718:	2014      	movs	r0, #20
 800071a:	f7ff fedf 	bl	80004dc <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	3301      	adds	r3, #1
 8000722:	4619      	mov	r1, r3
 8000724:	2015      	movs	r0, #21
 8000726:	f7ff fed9 	bl	80004dc <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	3301      	adds	r3, #1
 800072e:	4619      	mov	r1, r3
 8000730:	201a      	movs	r0, #26
 8000732:	f7ff fed3 	bl	80004dc <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	3301      	adds	r3, #1
 800073a:	4619      	mov	r1, r3
 800073c:	201b      	movs	r0, #27
 800073e:	f7ff fecd 	bl	80004dc <write_register>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800074c:	b004      	add	sp, #16
 800074e:	4770      	bx	lr
 8000750:	20001408 	.word	0x20001408
 8000754:	40020c00 	.word	0x40020c00
 8000758:	20000118 	.word	0x20000118

0800075c <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b03      	cmp	r3, #3
 800076a:	d82b      	bhi.n	80007c4 <CS43_Enable_RightLeft+0x68>
 800076c:	a201      	add	r2, pc, #4	; (adr r2, 8000774 <CS43_Enable_RightLeft+0x18>)
 800076e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000772:	bf00      	nop
 8000774:	08000785 	.word	0x08000785
 8000778:	08000795 	.word	0x08000795
 800077c:	080007a5 	.word	0x080007a5
 8000780:	080007b5 	.word	0x080007b5
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000784:	23c0      	movs	r3, #192	; 0xc0
 8000786:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000788:	7b7b      	ldrb	r3, [r7, #13]
 800078a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800078e:	b2db      	uxtb	r3, r3
 8000790:	737b      	strb	r3, [r7, #13]
			break;
 8000792:	e018      	b.n	80007c6 <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000798:	7b7b      	ldrb	r3, [r7, #13]
 800079a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	737b      	strb	r3, [r7, #13]
			break;
 80007a2:	e010      	b.n	80007c6 <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007a4:	23c0      	movs	r3, #192	; 0xc0
 80007a6:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007a8:	7b7b      	ldrb	r3, [r7, #13]
 80007aa:	f043 0320 	orr.w	r3, r3, #32
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	737b      	strb	r3, [r7, #13]
			break;
 80007b2:	e008      	b.n	80007c6 <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007b4:	2380      	movs	r3, #128	; 0x80
 80007b6:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007b8:	7b7b      	ldrb	r3, [r7, #13]
 80007ba:	f043 0320 	orr.w	r3, r3, #32
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	737b      	strb	r3, [r7, #13]
			break;
 80007c2:	e000      	b.n	80007c6 <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 80007c4:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007c6:	7b7b      	ldrb	r3, [r7, #13]
 80007c8:	f043 030c 	orr.w	r3, r3, #12
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007d0:	7b7b      	ldrb	r3, [r7, #13]
 80007d2:	f043 0303 	orr.w	r3, r3, #3
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	3301      	adds	r3, #1
 80007e0:	4619      	mov	r1, r3
 80007e2:	2004      	movs	r0, #4
 80007e4:	f7ff fe7a 	bl	80004dc <write_register>
}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	3319      	adds	r3, #25
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	3301      	adds	r3, #1
 8000808:	4619      	mov	r1, r3
 800080a:	2020      	movs	r0, #32
 800080c:	f7ff fe66 	bl	80004dc <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	3301      	adds	r3, #1
 8000816:	4619      	mov	r1, r3
 8000818:	2021      	movs	r0, #33	; 0x21
 800081a:	f7ff fe5f 	bl	80004dc <write_register>
}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b084      	sub	sp, #16
 800082a:	af00      	add	r7, sp, #0
 800082c:	4603      	mov	r3, r0
 800082e:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d019      	beq.n	800086a <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 8000836:	23ff      	movs	r3, #255	; 0xff
 8000838:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	3301      	adds	r3, #1
 8000840:	4619      	mov	r1, r3
 8000842:	2004      	movs	r0, #4
 8000844:	f7ff fe4a 	bl	80004dc <write_register>
    iData[1] = 0x01;
 8000848:	2301      	movs	r3, #1
 800084a:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	3301      	adds	r3, #1
 8000852:	4619      	mov	r1, r3
 8000854:	2022      	movs	r0, #34	; 0x22
 8000856:	f7ff fe41 	bl	80004dc <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	3301      	adds	r3, #1
 8000860:	4619      	mov	r1, r3
 8000862:	2023      	movs	r0, #35	; 0x23
 8000864:	f7ff fe3a 	bl	80004dc <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 8000868:	e018      	b.n	800089c <CS43_SetMute+0x76>
    iData[1] = 0x00;
 800086a:	2300      	movs	r3, #0
 800086c:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	3301      	adds	r3, #1
 8000874:	4619      	mov	r1, r3
 8000876:	2022      	movs	r0, #34	; 0x22
 8000878:	f7ff fe30 	bl	80004dc <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	3301      	adds	r3, #1
 8000882:	4619      	mov	r1, r3
 8000884:	2023      	movs	r0, #35	; 0x23
 8000886:	f7ff fe29 	bl	80004dc <write_register>
    iData[1] = 0xAF;
 800088a:	23af      	movs	r3, #175	; 0xaf
 800088c:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	3301      	adds	r3, #1
 8000894:	4619      	mov	r1, r3
 8000896:	2004      	movs	r0, #4
 8000898:	f7ff fe20 	bl	80004dc <write_register>
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff ffbb 	bl	8000826 <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80008b0:	2399      	movs	r3, #153	; 0x99
 80008b2:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	3301      	adds	r3, #1
 80008b8:	4619      	mov	r1, r3
 80008ba:	2000      	movs	r0, #0
 80008bc:	f7ff fe0e 	bl	80004dc <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	3301      	adds	r3, #1
 80008c8:	4619      	mov	r1, r3
 80008ca:	2047      	movs	r0, #71	; 0x47
 80008cc:	f7ff fe06 	bl	80004dc <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	3301      	adds	r3, #1
 80008d4:	4619      	mov	r1, r3
 80008d6:	2032      	movs	r0, #50	; 0x32
 80008d8:	f7ff fe1a 	bl	8000510 <read_register>
	iData[1] |= 0x80;
 80008dc:	797b      	ldrb	r3, [r7, #5]
 80008de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	3301      	adds	r3, #1
 80008ea:	4619      	mov	r1, r3
 80008ec:	2032      	movs	r0, #50	; 0x32
 80008ee:	f7ff fdf5 	bl	80004dc <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	3301      	adds	r3, #1
 80008f6:	4619      	mov	r1, r3
 80008f8:	2032      	movs	r0, #50	; 0x32
 80008fa:	f7ff fe09 	bl	8000510 <read_register>
	iData[1] &= ~(0x80);
 80008fe:	797b      	ldrb	r3, [r7, #5]
 8000900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000904:	b2db      	uxtb	r3, r3
 8000906:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	3301      	adds	r3, #1
 800090c:	4619      	mov	r1, r3
 800090e:	2032      	movs	r0, #50	; 0x32
 8000910:	f7ff fde4 	bl	80004dc <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000914:	2300      	movs	r3, #0
 8000916:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	3301      	adds	r3, #1
 800091c:	4619      	mov	r1, r3
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff fddc 	bl	80004dc <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8000924:	239e      	movs	r3, #158	; 0x9e
 8000926:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	3301      	adds	r3, #1
 800092c:	4619      	mov	r1, r3
 800092e:	2002      	movs	r0, #2
 8000930:	f7ff fdd4 	bl	80004dc <write_register>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <CS43_Stop>:

void CS43_Stop(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(1);
 8000942:	2001      	movs	r0, #1
 8000944:	f7ff ff6f 	bl	8000826 <CS43_SetMute>
  iData[1] = 0x04;
 8000948:	2304      	movs	r3, #4
 800094a:	717b      	strb	r3, [r7, #5]
  write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	3301      	adds	r3, #1
 8000950:	4619      	mov	r1, r3
 8000952:	200e      	movs	r0, #14
 8000954:	f7ff fdc2 	bl	80004dc <write_register>
	iData[1] = 0x9F;
 8000958:	239f      	movs	r3, #159	; 0x9f
 800095a:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	3301      	adds	r3, #1
 8000960:	4619      	mov	r1, r3
 8000962:	2002      	movs	r0, #2
 8000964:	f7ff fdba 	bl	80004dc <write_register>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8000978:	2300      	movs	r3, #0
 800097a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800097e:	23ff      	movs	r3, #255	; 0xff
 8000980:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  for(index = 0; index < 8; index++)
 8000984:	2300      	movs	r3, #0
 8000986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800098a:	e010      	b.n	80009ae <audioI2S_pllClockConfig+0x3e>
  {
    if(I2SFreq[index] == audioFreq)
 800098c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000990:	4a20      	ldr	r2, [pc, #128]	; (8000a14 <audioI2S_pllClockConfig+0xa4>)
 8000992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	429a      	cmp	r2, r3
 800099a:	d103      	bne.n	80009a4 <audioI2S_pllClockConfig+0x34>
    {
      freqindex = index;
 800099c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(index = 0; index < 8; index++)
 80009a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009a8:	3301      	adds	r3, #1
 80009aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009b2:	2b07      	cmp	r3, #7
 80009b4:	d9ea      	bls.n	800098c <audioI2S_pllClockConfig+0x1c>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	4618      	mov	r0, r3
 80009bc:	f007 fa7a 	bl	8007eb4 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 80009c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80009c4:	f003 0307 	and.w	r3, r3, #7
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d113      	bne.n	80009f4 <audioI2S_pllClockConfig+0x84>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009cc:	2301      	movs	r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80009d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80009d4:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <audioI2S_pllClockConfig+0xa8>)
 80009d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009da:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80009dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80009e0:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <audioI2S_pllClockConfig+0xac>)
 80009e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e6:	61bb      	str	r3, [r7, #24]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	4618      	mov	r0, r3
 80009ee:	f007 f971 	bl	8007cd4 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 80009f2:	e00b      	b.n	8000a0c <audioI2S_pllClockConfig+0x9c>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009f4:	2301      	movs	r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80009f8:	f44f 7381 	mov.w	r3, #258	; 0x102
 80009fc:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80009fe:	2303      	movs	r3, #3
 8000a00:	61bb      	str	r3, [r7, #24]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	4618      	mov	r0, r3
 8000a08:	f007 f964 	bl	8007cd4 <HAL_RCCEx_PeriphCLKConfig>
}
 8000a0c:	bf00      	nop
 8000a0e:	3728      	adds	r7, #40	; 0x28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	0800f248 	.word	0x0800f248
 8000a18:	0800f268 	.word	0x0800f268
 8000a1c:	0800f288 	.word	0x0800f288

08000a20 <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <I2S3_freqUpdate+0x80>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a1d      	ldr	r2, [pc, #116]	; (8000aa4 <I2S3_freqUpdate+0x84>)
 8000a2e:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <I2S3_freqUpdate+0x80>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	69da      	ldr	r2, [r3, #28]
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <I2S3_freqUpdate+0x80>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a42:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <I2S3_freqUpdate+0x80>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <I2S3_freqUpdate+0x80>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2200      	movs	r2, #0
 8000a52:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <I2S3_freqUpdate+0x80>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <I2S3_freqUpdate+0x80>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <I2S3_freqUpdate+0x80>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a6c:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <I2S3_freqUpdate+0x80>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a76:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <I2S3_freqUpdate+0x80>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <I2S3_freqUpdate+0x80>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f005 fcfb 	bl	8006480 <HAL_I2S_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <I2S3_freqUpdate+0x74>
  {
    return false;
 8000a90:	2300      	movs	r3, #0
 8000a92:	e000      	b.n	8000a96 <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8000a94:	2301      	movs	r3, #1
  }
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000016c 	.word	0x2000016c
 8000aa4:	40003c00 	.word	0x40003c00

08000aa8 <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 8000ab0:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <audioI2S_setHandle+0x1c>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	2000016c 	.word	0x2000016c

08000ac8 <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ff4d 	bl	8000970 <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff ffa2 	bl	8000a20 <I2S3_freqUpdate>
  return true;
 8000adc:	2301      	movs	r3, #1
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 8000af2:	f7ff fed7 	bl	80008a4 <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <audioI2S_play+0x38>)
 8000af8:	6818      	ldr	r0, [r3, #0]
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000b00:	d203      	bcs.n	8000b0a <audioI2S_play+0x22>
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	085b      	lsrs	r3, r3, #1
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	e001      	b.n	8000b0e <audioI2S_play+0x26>
 8000b0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b0e:	461a      	mov	r2, r3
 8000b10:	6879      	ldr	r1, [r7, #4]
 8000b12:	f005 fdf5 	bl	8006700 <HAL_I2S_Transmit_DMA>
  return true;
 8000b16:	2301      	movs	r3, #1
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000016c 	.word	0x2000016c

08000b24 <audioI2S_stop>:

/**
 * @brief Stop audio
 */
void audioI2S_stop(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000b28:	f7ff ff08 	bl	800093c <CS43_Stop>
  HAL_I2S_DMAStop(hAudioI2S);
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <audioI2S_stop+0x18>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f005 fe8d 	bl	8006850 <HAL_I2S_DMAStop>
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2000016c 	.word	0x2000016c

08000b40 <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <HAL_I2S_TxCpltCallback+0x20>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d101      	bne.n	8000b56 <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 8000b52:	f000 f91d 	bl	8000d90 <audioI2S_fullTransfer_Callback>
  }
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40003c00 	.word	0x40003c00

08000b64 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d101      	bne.n	8000b7a <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8000b76:	f000 f8ff 	bl	8000d78 <audioI2S_halfTransfer_Callback>
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40003c00 	.word	0x40003c00

08000b88 <wavPlayer_reset>:
  PLAYER_CONTROL_EndOfFile,
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <wavPlayer_reset+0x1c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <wavPlayer_reset+0x20>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200013a4 	.word	0x200013a4
 8000ba8:	200013ac 	.word	0x200013ac

08000bac <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08e      	sub	sp, #56	; 0x38
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <wavPlayer_fileSelect+0x48>)
 8000bbe:	f00d f8a5 	bl	800dd0c <f_open>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <wavPlayer_fileSelect+0x20>
  {
    return false;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e00e      	b.n	8000bea <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8000bcc:	f107 0308 	add.w	r3, r7, #8
 8000bd0:	f107 010c 	add.w	r1, r7, #12
 8000bd4:	222c      	movs	r2, #44	; 0x2c
 8000bd6:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <wavPlayer_fileSelect+0x48>)
 8000bd8:	f00d fa56 	bl	800e088 <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	4a06      	ldr	r2, [pc, #24]	; (8000bf8 <wavPlayer_fileSelect+0x4c>)
 8000be0:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 8000be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be4:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <wavPlayer_fileSelect+0x50>)
 8000be6:	6013      	str	r3, [r2, #0]
  return true;
 8000be8:	2301      	movs	r3, #1
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3738      	adds	r7, #56	; 0x38
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000170 	.word	0x20000170
 8000bf8:	200003a0 	.word	0x200003a0
 8000bfc:	200013a8 	.word	0x200013a8

08000c00 <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  isFinished = false;
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <wavPlayer_play+0x48>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <wavPlayer_play+0x4c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ff5a 	bl	8000ac8 <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 8000c14:	2100      	movs	r1, #0
 8000c16:	480e      	ldr	r0, [pc, #56]	; (8000c50 <wavPlayer_play+0x50>)
 8000c18:	f00d fc1d 	bl	800e456 <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <wavPlayer_play+0x54>)
 8000c1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c22:	490d      	ldr	r1, [pc, #52]	; (8000c58 <wavPlayer_play+0x58>)
 8000c24:	480a      	ldr	r0, [pc, #40]	; (8000c50 <wavPlayer_play+0x50>)
 8000c26:	f00d fa2f 	bl	800e088 <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <wavPlayer_play+0x5c>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <wavPlayer_play+0x54>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <wavPlayer_play+0x60>)
 8000c36:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 8000c38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c3c:	4806      	ldr	r0, [pc, #24]	; (8000c58 <wavPlayer_play+0x58>)
 8000c3e:	f7ff ff53 	bl	8000ae8 <audioI2S_play>
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200013b0 	.word	0x200013b0
 8000c4c:	200013a8 	.word	0x200013a8
 8000c50:	20000170 	.word	0x20000170
 8000c54:	200013ac 	.word	0x200013ac
 8000c58:	200003a4 	.word	0x200003a4
 8000c5c:	200003a0 	.word	0x200003a0
 8000c60:	200013a4 	.word	0x200013a4

08000c64 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 8000c68:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <wavPlayer_process+0xc8>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	d859      	bhi.n	8000d26 <wavPlayer_process+0xc2>
 8000c72:	a201      	add	r2, pc, #4	; (adr r2, 8000c78 <wavPlayer_process+0x14>)
 8000c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c78:	08000d25 	.word	0x08000d25
 8000c7c:	08000c89 	.word	0x08000c89
 8000c80:	08000ccb 	.word	0x08000ccb
 8000c84:	08000d0d 	.word	0x08000d0d
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 8000c88:	4b29      	ldr	r3, [pc, #164]	; (8000d30 <wavPlayer_process+0xcc>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000c8e:	4b27      	ldr	r3, [pc, #156]	; (8000d2c <wavPlayer_process+0xc8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000c94:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <wavPlayer_process+0xcc>)
 8000c96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c9a:	4926      	ldr	r1, [pc, #152]	; (8000d34 <wavPlayer_process+0xd0>)
 8000c9c:	4826      	ldr	r0, [pc, #152]	; (8000d38 <wavPlayer_process+0xd4>)
 8000c9e:	f00d f9f3 	bl	800e088 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000ca2:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <wavPlayer_process+0xd8>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000caa:	d907      	bls.n	8000cbc <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 8000cac:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <wavPlayer_process+0xd8>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <wavPlayer_process+0xcc>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	4a21      	ldr	r2, [pc, #132]	; (8000d3c <wavPlayer_process+0xd8>)
 8000cb8:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000cba:	e034      	b.n	8000d26 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <wavPlayer_process+0xd8>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <wavPlayer_process+0xc8>)
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	701a      	strb	r2, [r3, #0]
    break;
 8000cc8:	e02d      	b.n	8000d26 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <wavPlayer_process+0xcc>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <wavPlayer_process+0xc8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000cd6:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <wavPlayer_process+0xcc>)
 8000cd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cdc:	4918      	ldr	r1, [pc, #96]	; (8000d40 <wavPlayer_process+0xdc>)
 8000cde:	4816      	ldr	r0, [pc, #88]	; (8000d38 <wavPlayer_process+0xd4>)
 8000ce0:	f00d f9d2 	bl	800e088 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <wavPlayer_process+0xd8>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cec:	d907      	bls.n	8000cfe <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <wavPlayer_process+0xd8>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <wavPlayer_process+0xcc>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <wavPlayer_process+0xd8>)
 8000cfa:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000cfc:	e013      	b.n	8000d26 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <wavPlayer_process+0xd8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <wavPlayer_process+0xc8>)
 8000d06:	2203      	movs	r2, #3
 8000d08:	701a      	strb	r2, [r3, #0]
    break;
 8000d0a:	e00c      	b.n	8000d26 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 8000d0c:	480a      	ldr	r0, [pc, #40]	; (8000d38 <wavPlayer_process+0xd4>)
 8000d0e:	f00d fb78 	bl	800e402 <f_close>
    wavPlayer_reset();
 8000d12:	f7ff ff39 	bl	8000b88 <wavPlayer_reset>
    isFinished = true;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <wavPlayer_process+0xe0>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <wavPlayer_process+0xc8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
    break;
 8000d22:	e000      	b.n	8000d26 <wavPlayer_process+0xc2>
    break;
 8000d24:	bf00      	nop
  }
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200013b1 	.word	0x200013b1
 8000d30:	200013ac 	.word	0x200013ac
 8000d34:	200003a4 	.word	0x200003a4
 8000d38:	20000170 	.word	0x20000170
 8000d3c:	200013a4 	.word	0x200013a4
 8000d40:	20000ba4 	.word	0x20000ba4
 8000d44:	200013b0 	.word	0x200013b0

08000d48 <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  audioI2S_stop();
 8000d4c:	f7ff feea 	bl	8000b24 <audioI2S_stop>
  isFinished = true;
 8000d50:	4b02      	ldr	r3, [pc, #8]	; (8000d5c <wavPlayer_stop+0x14>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	701a      	strb	r2, [r3, #0]
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200013b0 	.word	0x200013b0

08000d60 <wavPlayer_isFinished>:

/**
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return isFinished;
 8000d64:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <wavPlayer_isFinished+0x14>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	200013b0 	.word	0x200013b0

08000d78 <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8000d7c:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <audioI2S_halfTransfer_Callback+0x14>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	701a      	strb	r2, [r3, #0]
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	200013b1 	.word	0x200013b1

08000d90 <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <audioI2S_fullTransfer_Callback+0x14>)
 8000d96:	2202      	movs	r2, #2
 8000d98:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	200013b1 	.word	0x200013b1

08000da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b0a5      	sub	sp, #148	; 0x94
 8000dac:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dae:	f001 faa5 	bl	80022fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db2:	f000 f89f 	bl	8000ef4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db6:	f000 f981 	bl	80010bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000dba:	f000 f95f 	bl	800107c <MX_DMA_Init>
  MX_I2C1_Init();
 8000dbe:	f000 f901 	bl	8000fc4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000dc2:	f000 f92d 	bl	8001020 <MX_I2S3_Init>
//  MX_SPI1_Init();
  MX_USB_HOST_Init();
 8000dc6:	f00d fdab 	bl	800e920 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8000dca:	f008 f8fb 	bl	8008fc4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  CS43_Init(hi2c1, MODE_I2S);
 8000dce:	4c40      	ldr	r4, [pc, #256]	; (8000ed0 <main+0x128>)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	9311      	str	r3, [sp, #68]	; 0x44
 8000dd4:	4668      	mov	r0, sp
 8000dd6:	f104 0310 	add.w	r3, r4, #16
 8000dda:	2244      	movs	r2, #68	; 0x44
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f00e f8eb 	bl	800efb8 <memcpy>
 8000de2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000de6:	f7ff fbb3 	bl	8000550 <CS43_Init>
  CS43_SetVolume(180);
 8000dea:	20b4      	movs	r0, #180	; 0xb4
 8000dec:	f7ff fd00 	bl	80007f0 <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000df0:	2003      	movs	r0, #3
 8000df2:	f7ff fcb3 	bl	800075c <CS43_Enable_RightLeft>
  audioI2S_setHandle(&hi2s3);
 8000df6:	4837      	ldr	r0, [pc, #220]	; (8000ed4 <main+0x12c>)
 8000df8:	f7ff fe56 	bl	8000aa8 <audioI2S_setHandle>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int16_t buffer[3] = {0, 0, 0};
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	823b      	strh	r3, [r7, #16]
 8000e00:	2300      	movs	r3, #0
 8000e02:	827b      	strh	r3, [r7, #18]
 8000e04:	2300      	movs	r3, #0
 8000e06:	82bb      	strh	r3, [r7, #20]
	BSP_ACCELERO_Init();
 8000e08:	f001 f98a 	bl	8002120 <BSP_ACCELERO_Init>
	BSP_ACCELERO_GetXYZ(buffer);
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4618      	mov	r0, r3
 8000e12:	f001 fa47 	bl	80022a4 <BSP_ACCELERO_GetXYZ>
	double start_acceleration=1;
 8000e16:	f04f 0200 	mov.w	r2, #0
 8000e1a:	4b2f      	ldr	r3, [pc, #188]	; (8000ed8 <main+0x130>)
 8000e1c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double bound=0.2;
 8000e20:	a329      	add	r3, pc, #164	; (adr r3, 8000ec8 <main+0x120>)
 8000e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e26:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	int count1=0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int count2=0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
	int goDown=1;
 8000e32:	2301      	movs	r3, #1
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
	int state=0;	//1 - ground, 2 - rising, 3 - max height, 4 -
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
	int array[]={0,0,0};
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
	size_t i = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
	const char* FILENAME = "a.wav";
 8000e4a:	4b24      	ldr	r3, [pc, #144]	; (8000edc <main+0x134>)
 8000e4c:	61bb      	str	r3, [r7, #24]
	int isUSBMounted = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	647b      	str	r3, [r7, #68]	; 0x44
//		i += 1;
//
//		HAL_Delay(200);

    /* USER CODE END WHILE */
	if (Appli_state != APPLICATION_READY){
 8000e52:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <main+0x138>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d001      	beq.n	8000e5e <main+0xb6>
    MX_USB_HOST_Process();}
 8000e5a:	f00d fd87 	bl	800e96c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(Appli_state == APPLICATION_READY)
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <main+0x138>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d1f5      	bne.n	8000e52 <main+0xaa>
            {
              if(!isUSBMounted)
 8000e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d106      	bne.n	8000e7a <main+0xd2>
              {
                f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	491d      	ldr	r1, [pc, #116]	; (8000ee4 <main+0x13c>)
 8000e70:	481d      	ldr	r0, [pc, #116]	; (8000ee8 <main+0x140>)
 8000e72:	f00c ff05 	bl	800dc80 <f_mount>
                isUSBMounted = 1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	647b      	str	r3, [r7, #68]	; 0x44
              }
              if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	481b      	ldr	r0, [pc, #108]	; (8000eec <main+0x144>)
 8000e7e:	f002 fa2d 	bl	80032dc <HAL_GPIO_ReadPin>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0e4      	beq.n	8000e52 <main+0xaa>
              {
            	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8e:	4818      	ldr	r0, [pc, #96]	; (8000ef0 <main+0x148>)
 8000e90:	f002 fa3c 	bl	800330c <HAL_GPIO_WritePin>
                HAL_Delay(500);
 8000e94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e98:	f001 faa2 	bl	80023e0 <HAL_Delay>
                wavPlayer_fileSelect(FILENAME);
 8000e9c:	69b8      	ldr	r0, [r7, #24]
 8000e9e:	f7ff fe85 	bl	8000bac <wavPlayer_fileSelect>
                wavPlayer_play();
 8000ea2:	f7ff fead 	bl	8000c00 <wavPlayer_play>

                while(!wavPlayer_isFinished())
 8000ea6:	e001      	b.n	8000eac <main+0x104>
                {
                  wavPlayer_process();
 8000ea8:	f7ff fedc 	bl	8000c64 <wavPlayer_process>
                while(!wavPlayer_isFinished())
 8000eac:	f7ff ff58 	bl	8000d60 <wavPlayer_isFinished>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	f083 0301 	eor.w	r3, r3, #1
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1f5      	bne.n	8000ea8 <main+0x100>
                }
                wavPlayer_stop();
 8000ebc:	f7ff ff44 	bl	8000d48 <wavPlayer_stop>
	if (Appli_state != APPLICATION_READY){
 8000ec0:	e7c7      	b.n	8000e52 <main+0xaa>
 8000ec2:	bf00      	nop
 8000ec4:	f3af 8000 	nop.w
 8000ec8:	9999999a 	.word	0x9999999a
 8000ecc:	3fc99999 	.word	0x3fc99999
 8000ed0:	200013b4 	.word	0x200013b4
 8000ed4:	20001408 	.word	0x20001408
 8000ed8:	3ff00000 	.word	0x3ff00000
 8000edc:	0800f1f8 	.word	0x0800f1f8
 8000ee0:	20001b54 	.word	0x20001b54
 8000ee4:	20001514 	.word	0x20001514
 8000ee8:	20001518 	.word	0x20001518
 8000eec:	40020000 	.word	0x40020000
 8000ef0:	40020c00 	.word	0x40020c00

08000ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b094      	sub	sp, #80	; 0x50
 8000ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efa:	f107 0320 	add.w	r3, r7, #32
 8000efe:	2230      	movs	r2, #48	; 0x30
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f00e f866 	bl	800efd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	4b27      	ldr	r3, [pc, #156]	; (8000fbc <SystemClock_Config+0xc8>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	4a26      	ldr	r2, [pc, #152]	; (8000fbc <SystemClock_Config+0xc8>)
 8000f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f26:	6413      	str	r3, [r2, #64]	; 0x40
 8000f28:	4b24      	ldr	r3, [pc, #144]	; (8000fbc <SystemClock_Config+0xc8>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f34:	2300      	movs	r3, #0
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <SystemClock_Config+0xcc>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a20      	ldr	r2, [pc, #128]	; (8000fc0 <SystemClock_Config+0xcc>)
 8000f3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <SystemClock_Config+0xcc>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f50:	2301      	movs	r3, #1
 8000f52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f64:	2304      	movs	r3, #4
 8000f66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f68:	23c0      	movs	r3, #192	; 0xc0
 8000f6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000f70:	2308      	movs	r3, #8
 8000f72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f74:	f107 0320 	add.w	r3, r7, #32
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f006 fa27 	bl	80073cc <HAL_RCC_OscConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f84:	f000 f9a4 	bl	80012d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f88:	230f      	movs	r3, #15
 8000f8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f94:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	2103      	movs	r1, #3
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f006 fc89 	bl	80078bc <HAL_RCC_ClockConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fb0:	f000 f98e 	bl	80012d0 <Error_Handler>
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	3750      	adds	r7, #80	; 0x50
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40007000 	.word	0x40007000

08000fc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <MX_I2C1_Init+0x50>)
 8000fca:	4a13      	ldr	r2, [pc, #76]	; (8001018 <MX_I2C1_Init+0x54>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_I2C1_Init+0x50>)
 8000fd0:	4a12      	ldr	r2, [pc, #72]	; (800101c <MX_I2C1_Init+0x58>)
 8000fd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_I2C1_Init+0x50>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <MX_I2C1_Init+0x50>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <MX_I2C1_Init+0x50>)
 8000fe2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fe6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <MX_I2C1_Init+0x50>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MX_I2C1_Init+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <MX_I2C1_Init+0x50>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <MX_I2C1_Init+0x50>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001000:	4804      	ldr	r0, [pc, #16]	; (8001014 <MX_I2C1_Init+0x50>)
 8001002:	f003 fdcb 	bl	8004b9c <HAL_I2C_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800100c:	f000 f960 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200013b4 	.word	0x200013b4
 8001018:	40005400 	.word	0x40005400
 800101c:	000186a0 	.word	0x000186a0

08001020 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <MX_I2S3_Init+0x54>)
 8001026:	4a14      	ldr	r2, [pc, #80]	; (8001078 <MX_I2S3_Init+0x58>)
 8001028:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800102a:	4b12      	ldr	r3, [pc, #72]	; (8001074 <MX_I2S3_Init+0x54>)
 800102c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001030:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <MX_I2S3_Init+0x54>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_I2S3_Init+0x54>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800103e:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <MX_I2S3_Init+0x54>)
 8001040:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001044:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <MX_I2S3_Init+0x54>)
 8001048:	f64a 4244 	movw	r2, #44100	; 0xac44
 800104c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_I2S3_Init+0x54>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <MX_I2S3_Init+0x54>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_I2S3_Init+0x54>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <MX_I2S3_Init+0x54>)
 8001062:	f005 fa0d 	bl	8006480 <HAL_I2S_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 800106c:	f000 f930 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20001408 	.word	0x20001408
 8001078:	40003c00 	.word	0x40003c00

0800107c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_DMA_Init+0x3c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <MX_DMA_Init+0x3c>)
 800108c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_DMA_Init+0x3c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2010      	movs	r0, #16
 80010a4:	f001 fa9b 	bl	80025de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80010a8:	2010      	movs	r0, #16
 80010aa:	f001 fab4 	bl	8002616 <HAL_NVIC_EnableIRQ>

}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800

080010bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08c      	sub	sp, #48	; 0x30
 80010c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
 80010d6:	4b78      	ldr	r3, [pc, #480]	; (80012b8 <MX_GPIO_Init+0x1fc>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a77      	ldr	r2, [pc, #476]	; (80012b8 <MX_GPIO_Init+0x1fc>)
 80010dc:	f043 0310 	orr.w	r3, r3, #16
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b75      	ldr	r3, [pc, #468]	; (80012b8 <MX_GPIO_Init+0x1fc>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	61bb      	str	r3, [r7, #24]
 80010ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	4b71      	ldr	r3, [pc, #452]	; (80012b8 <MX_GPIO_Init+0x1fc>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a70      	ldr	r2, [pc, #448]	; (80012b8 <MX_GPIO_Init+0x1fc>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b6e      	ldr	r3, [pc, #440]	; (80012b8 <MX_GPIO_Init+0x1fc>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	4b6a      	ldr	r3, [pc, #424]	; (80012b8 <MX_GPIO_Init+0x1fc>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a69      	ldr	r2, [pc, #420]	; (80012b8 <MX_GPIO_Init+0x1fc>)
 8001114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b67      	ldr	r3, [pc, #412]	; (80012b8 <MX_GPIO_Init+0x1fc>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b63      	ldr	r3, [pc, #396]	; (80012b8 <MX_GPIO_Init+0x1fc>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a62      	ldr	r2, [pc, #392]	; (80012b8 <MX_GPIO_Init+0x1fc>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b60      	ldr	r3, [pc, #384]	; (80012b8 <MX_GPIO_Init+0x1fc>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	4b5c      	ldr	r3, [pc, #368]	; (80012b8 <MX_GPIO_Init+0x1fc>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a5b      	ldr	r2, [pc, #364]	; (80012b8 <MX_GPIO_Init+0x1fc>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b59      	ldr	r3, [pc, #356]	; (80012b8 <MX_GPIO_Init+0x1fc>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4b55      	ldr	r3, [pc, #340]	; (80012b8 <MX_GPIO_Init+0x1fc>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a54      	ldr	r2, [pc, #336]	; (80012b8 <MX_GPIO_Init+0x1fc>)
 8001168:	f043 0308 	orr.w	r3, r3, #8
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b52      	ldr	r3, [pc, #328]	; (80012b8 <MX_GPIO_Init+0x1fc>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	2108      	movs	r1, #8
 800117e:	484f      	ldr	r0, [pc, #316]	; (80012bc <MX_GPIO_Init+0x200>)
 8001180:	f002 f8c4 	bl	800330c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	2101      	movs	r1, #1
 8001188:	484d      	ldr	r0, [pc, #308]	; (80012c0 <MX_GPIO_Init+0x204>)
 800118a:	f002 f8bf 	bl	800330c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800118e:	2201      	movs	r2, #1
 8001190:	2102      	movs	r1, #2
 8001192:	484b      	ldr	r0, [pc, #300]	; (80012c0 <MX_GPIO_Init+0x204>)
 8001194:	f002 f8ba 	bl	800330c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001198:	2200      	movs	r2, #0
 800119a:	f24f 0110 	movw	r1, #61456	; 0xf010
 800119e:	4849      	ldr	r0, [pc, #292]	; (80012c4 <MX_GPIO_Init+0x208>)
 80011a0:	f002 f8b4 	bl	800330c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80011a4:	2304      	movs	r3, #4
 80011a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	4841      	ldr	r0, [pc, #260]	; (80012bc <MX_GPIO_Init+0x200>)
 80011b8:	f001 fe28 	bl	8002e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80011bc:	2308      	movs	r3, #8
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	483a      	ldr	r0, [pc, #232]	; (80012bc <MX_GPIO_Init+0x200>)
 80011d4:	f001 fe1a 	bl	8002e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80011d8:	2332      	movs	r3, #50	; 0x32
 80011da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011dc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80011e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	4619      	mov	r1, r3
 80011ec:	4833      	ldr	r0, [pc, #204]	; (80012bc <MX_GPIO_Init+0x200>)
 80011ee:	f001 fe0d 	bl	8002e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC1 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_1;
 80011f2:	2303      	movs	r3, #3
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	4619      	mov	r1, r3
 8001208:	482d      	ldr	r0, [pc, #180]	; (80012c0 <MX_GPIO_Init+0x204>)
 800120a:	f001 fdff 	bl	8002e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800120e:	2308      	movs	r3, #8
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800121e:	2305      	movs	r3, #5
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	4619      	mov	r1, r3
 8001228:	4825      	ldr	r0, [pc, #148]	; (80012c0 <MX_GPIO_Init+0x204>)
 800122a:	f001 fdef 	bl	8002e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800122e:	2301      	movs	r3, #1
 8001230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001232:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001236:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	4821      	ldr	r0, [pc, #132]	; (80012c8 <MX_GPIO_Init+0x20c>)
 8001244:	f001 fde2 	bl	8002e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001248:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800124c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800125a:	2305      	movs	r3, #5
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	4619      	mov	r1, r3
 8001264:	4819      	ldr	r0, [pc, #100]	; (80012cc <MX_GPIO_Init+0x210>)
 8001266:	f001 fdd1 	bl	8002e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800126a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800126e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001270:	2301      	movs	r3, #1
 8001272:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	4619      	mov	r1, r3
 8001282:	4810      	ldr	r0, [pc, #64]	; (80012c4 <MX_GPIO_Init+0x208>)
 8001284:	f001 fdc2 	bl	8002e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001288:	2320      	movs	r3, #32
 800128a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	4619      	mov	r1, r3
 800129a:	480a      	ldr	r0, [pc, #40]	; (80012c4 <MX_GPIO_Init+0x208>)
 800129c:	f001 fdb6 	bl	8002e0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	2006      	movs	r0, #6
 80012a6:	f001 f99a 	bl	80025de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80012aa:	2006      	movs	r0, #6
 80012ac:	f001 f9b3 	bl	8002616 <HAL_NVIC_EnableIRQ>

}
 80012b0:	bf00      	nop
 80012b2:	3730      	adds	r7, #48	; 0x30
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020c00 	.word	0x40020c00
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40020400 	.word	0x40020400

080012d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d4:	b672      	cpsid	i
}
 80012d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <Error_Handler+0x8>
	...

080012dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	4b14      	ldr	r3, [pc, #80]	; (8001338 <HAL_MspInit+0x5c>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	4a13      	ldr	r2, [pc, #76]	; (8001338 <HAL_MspInit+0x5c>)
 80012ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f0:	6453      	str	r3, [r2, #68]	; 0x44
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_MspInit+0x5c>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <HAL_MspInit+0x5c>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	4a0c      	ldr	r2, [pc, #48]	; (8001338 <HAL_MspInit+0x5c>)
 8001308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130c:	6413      	str	r3, [r2, #64]	; 0x40
 800130e:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <HAL_MspInit+0x5c>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800131a:	2007      	movs	r0, #7
 800131c:	f001 f954 	bl	80025c8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	2005      	movs	r0, #5
 8001326:	f001 f95a 	bl	80025de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800132a:	2005      	movs	r0, #5
 800132c:	f001 f973 	bl	8002616 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800

0800133c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a19      	ldr	r2, [pc, #100]	; (80013c0 <HAL_I2C_MspInit+0x84>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d12c      	bne.n	80013b8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <HAL_I2C_MspInit+0x88>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <HAL_I2C_MspInit+0x88>)
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_I2C_MspInit+0x88>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800137a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800137e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001380:	2312      	movs	r3, #18
 8001382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001384:	2301      	movs	r3, #1
 8001386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800138c:	2304      	movs	r3, #4
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4619      	mov	r1, r3
 8001396:	480c      	ldr	r0, [pc, #48]	; (80013c8 <HAL_I2C_MspInit+0x8c>)
 8001398:	f001 fd38 	bl	8002e0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_I2C_MspInit+0x88>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_I2C_MspInit+0x88>)
 80013a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013aa:	6413      	str	r3, [r2, #64]	; 0x40
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <HAL_I2C_MspInit+0x88>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013b8:	bf00      	nop
 80013ba:	3728      	adds	r7, #40	; 0x28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40005400 	.word	0x40005400
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020400 	.word	0x40020400

080013cc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <HAL_I2C_MspDeInit+0x38>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d10e      	bne.n	80013fc <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_I2C_MspDeInit+0x3c>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a09      	ldr	r2, [pc, #36]	; (8001408 <HAL_I2C_MspDeInit+0x3c>)
 80013e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 80013ea:	2140      	movs	r1, #64	; 0x40
 80013ec:	4807      	ldr	r0, [pc, #28]	; (800140c <HAL_I2C_MspDeInit+0x40>)
 80013ee:	f001 fe91 	bl	8003114 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 80013f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_I2C_MspDeInit+0x40>)
 80013f8:	f001 fe8c 	bl	8003114 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40005400 	.word	0x40005400
 8001408:	40023800 	.word	0x40023800
 800140c:	40020400 	.word	0x40020400

08001410 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b090      	sub	sp, #64	; 0x40
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
 8001438:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI3)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a4f      	ldr	r2, [pc, #316]	; (800157c <HAL_I2S_MspInit+0x16c>)
 8001440:	4293      	cmp	r3, r2
 8001442:	f040 8096 	bne.w	8001572 <HAL_I2S_MspInit+0x162>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001446:	2301      	movs	r3, #1
 8001448:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800144a:	23c8      	movs	r3, #200	; 0xc8
 800144c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 800144e:	2308      	movs	r3, #8
 8001450:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001452:	2302      	movs	r3, #2
 8001454:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4618      	mov	r0, r3
 800145c:	f006 fc3a 	bl	8007cd4 <HAL_RCCEx_PeriphCLKConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8001466:	f7ff ff33 	bl	80012d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	4b44      	ldr	r3, [pc, #272]	; (8001580 <HAL_I2S_MspInit+0x170>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a43      	ldr	r2, [pc, #268]	; (8001580 <HAL_I2S_MspInit+0x170>)
 8001474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b41      	ldr	r3, [pc, #260]	; (8001580 <HAL_I2S_MspInit+0x170>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <HAL_I2S_MspInit+0x170>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a3c      	ldr	r2, [pc, #240]	; (8001580 <HAL_I2S_MspInit+0x170>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b3a      	ldr	r3, [pc, #232]	; (8001580 <HAL_I2S_MspInit+0x170>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	4b36      	ldr	r3, [pc, #216]	; (8001580 <HAL_I2S_MspInit+0x170>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a35      	ldr	r2, [pc, #212]	; (8001580 <HAL_I2S_MspInit+0x170>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b33      	ldr	r3, [pc, #204]	; (8001580 <HAL_I2S_MspInit+0x170>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80014be:	2310      	movs	r3, #16
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014ce:	2306      	movs	r3, #6
 80014d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d6:	4619      	mov	r1, r3
 80014d8:	482a      	ldr	r0, [pc, #168]	; (8001584 <HAL_I2S_MspInit+0x174>)
 80014da:	f001 fc97 	bl	8002e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80014de:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014f0:	2306      	movs	r3, #6
 80014f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f8:	4619      	mov	r1, r3
 80014fa:	4823      	ldr	r0, [pc, #140]	; (8001588 <HAL_I2S_MspInit+0x178>)
 80014fc:	f001 fc86 	bl	8002e0c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001500:	4b22      	ldr	r3, [pc, #136]	; (800158c <HAL_I2S_MspInit+0x17c>)
 8001502:	4a23      	ldr	r2, [pc, #140]	; (8001590 <HAL_I2S_MspInit+0x180>)
 8001504:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <HAL_I2S_MspInit+0x17c>)
 8001508:	2200      	movs	r2, #0
 800150a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <HAL_I2S_MspInit+0x17c>)
 800150e:	2240      	movs	r2, #64	; 0x40
 8001510:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001512:	4b1e      	ldr	r3, [pc, #120]	; (800158c <HAL_I2S_MspInit+0x17c>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <HAL_I2S_MspInit+0x17c>)
 800151a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800151e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001520:	4b1a      	ldr	r3, [pc, #104]	; (800158c <HAL_I2S_MspInit+0x17c>)
 8001522:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001526:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001528:	4b18      	ldr	r3, [pc, #96]	; (800158c <HAL_I2S_MspInit+0x17c>)
 800152a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800152e:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <HAL_I2S_MspInit+0x17c>)
 8001532:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001536:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <HAL_I2S_MspInit+0x17c>)
 800153a:	2200      	movs	r2, #0
 800153c:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <HAL_I2S_MspInit+0x17c>)
 8001540:	2204      	movs	r2, #4
 8001542:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <HAL_I2S_MspInit+0x17c>)
 8001546:	2203      	movs	r2, #3
 8001548:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <HAL_I2S_MspInit+0x17c>)
 800154c:	2200      	movs	r2, #0
 800154e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_I2S_MspInit+0x17c>)
 8001552:	2200      	movs	r2, #0
 8001554:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001556:	480d      	ldr	r0, [pc, #52]	; (800158c <HAL_I2S_MspInit+0x17c>)
 8001558:	f001 f878 	bl	800264c <HAL_DMA_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 8001562:	f7ff feb5 	bl	80012d0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a08      	ldr	r2, [pc, #32]	; (800158c <HAL_I2S_MspInit+0x17c>)
 800156a:	639a      	str	r2, [r3, #56]	; 0x38
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_I2S_MspInit+0x17c>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001572:	bf00      	nop
 8001574:	3740      	adds	r7, #64	; 0x40
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40003c00 	.word	0x40003c00
 8001580:	40023800 	.word	0x40023800
 8001584:	40020000 	.word	0x40020000
 8001588:	40020800 	.word	0x40020800
 800158c:	20001450 	.word	0x20001450
 8001590:	40026088 	.word	0x40026088

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <NMI_Handler+0x4>

0800159a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <HardFault_Handler+0x4>

080015a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <MemManage_Handler+0x4>

080015a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <BusFault_Handler+0x4>

080015ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <UsageFault_Handler+0x4>

080015b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e0:	f000 fede 	bl	80023a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80015fa:	2001      	movs	r0, #1
 80015fc:	f001 fea0 	bl	8003340 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <DMA1_Stream5_IRQHandler+0x10>)
 800160a:	f001 f995 	bl	8002938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20001450 	.word	0x20001450

08001618 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <OTG_FS_IRQHandler+0x10>)
 800161e:	f002 f91d 	bl	800385c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20001b58 	.word	0x20001b58

0800162c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001634:	4a14      	ldr	r2, [pc, #80]	; (8001688 <_sbrk+0x5c>)
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <_sbrk+0x60>)
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <_sbrk+0x64>)
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <_sbrk+0x68>)
 800164c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	429a      	cmp	r2, r3
 800165a:	d207      	bcs.n	800166c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800165c:	f00d fc72 	bl	800ef44 <__errno>
 8001660:	4603      	mov	r3, r0
 8001662:	220c      	movs	r2, #12
 8001664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	e009      	b.n	8001680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	4a05      	ldr	r2, [pc, #20]	; (8001690 <_sbrk+0x64>)
 800167c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20020000 	.word	0x20020000
 800168c:	00002000 	.word	0x00002000
 8001690:	200014b0 	.word	0x200014b0
 8001694:	20001e70 	.word	0x20001e70

08001698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <SystemInit+0x20>)
 800169e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <SystemInit+0x20>)
 80016a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c0:	480d      	ldr	r0, [pc, #52]	; (80016f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016c2:	490e      	ldr	r1, [pc, #56]	; (80016fc <LoopFillZerobss+0x1a>)

  ldr r2, =_sidata
 80016c4:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c8:	e002      	b.n	80016d0 <LoopCopyDataInit>

080016ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ce:	3304      	adds	r3, #4

080016d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d4:	d3f9      	bcc.n	80016ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d6:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016d8:	4c0b      	ldr	r4, [pc, #44]	; (8001708 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016dc:	e001      	b.n	80016e2 <LoopFillZerobss>

080016de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e0:	3204      	adds	r2, #4

080016e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e4:	d3fb      	bcc.n	80016de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016e6:	f7ff ffd7 	bl	8001698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ea:	f00d fc31 	bl	800ef50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ee:	f7ff fb5b 	bl	8000da8 <main>
  bx  lr    
 80016f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016fc:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001700:	0800f36c 	.word	0x0800f36c
  ldr r2, =_sbss
 8001704:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001708:	20001e6c 	.word	0x20001e6c

0800170c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800170c:	e7fe      	b.n	800170c <ADC_IRQHandler>

0800170e <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 800170e:	b580      	push	{r7, lr}
 8001710:	b084      	sub	sp, #16
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 800171c:	f000 fc82 	bl	8002024 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	461a      	mov	r2, r3
 8001728:	2120      	movs	r1, #32
 800172a:	2032      	movs	r0, #50	; 0x32
 800172c:	f000 fcd2 	bl	80020d4 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8001730:	2300      	movs	r3, #0
 8001732:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	461a      	mov	r2, r3
 8001738:	2123      	movs	r1, #35	; 0x23
 800173a:	2032      	movs	r0, #50	; 0x32
 800173c:	f000 fcca 	bl	80020d4 <COMPASSACCELERO_IO_Write>
}
 8001740:	bf00      	nop
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800175c:	2300      	movs	r3, #0
 800175e:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8001760:	f000 fc60 	bl	8002024 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 8001764:	210f      	movs	r1, #15
 8001766:	2032      	movs	r0, #50	; 0x32
 8001768:	f000 fcc7 	bl	80020fa <COMPASSACCELERO_IO_Read>
 800176c:	4603      	mov	r3, r0
 800176e:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8001770:	79fb      	ldrb	r3, [r7, #7]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8001780:	2124      	movs	r1, #36	; 0x24
 8001782:	2032      	movs	r0, #50	; 0x32
 8001784:	f000 fcb9 	bl	80020fa <COMPASSACCELERO_IO_Read>
 8001788:	4603      	mov	r3, r0
 800178a:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001792:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	461a      	mov	r2, r3
 8001798:	2124      	movs	r1, #36	; 0x24
 800179a:	2032      	movs	r0, #50	; 0x32
 800179c:	f000 fc9a 	bl	80020d4 <COMPASSACCELERO_IO_Write>
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80017b2:	2121      	movs	r1, #33	; 0x21
 80017b4:	2032      	movs	r0, #50	; 0x32
 80017b6:	f000 fca0 	bl	80020fa <COMPASSACCELERO_IO_Read>
 80017ba:	4603      	mov	r3, r0
 80017bc:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 80017c6:	7bfa      	ldrb	r2, [r7, #15]
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	461a      	mov	r2, r3
 80017d2:	2121      	movs	r1, #33	; 0x21
 80017d4:	2032      	movs	r0, #50	; 0x32
 80017d6:	f000 fc7d 	bl	80020d4 <COMPASSACCELERO_IO_Write>
}
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b084      	sub	sp, #16
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80017ec:	2121      	movs	r1, #33	; 0x21
 80017ee:	2032      	movs	r0, #50	; 0x32
 80017f0:	f000 fc83 	bl	80020fa <COMPASSACCELERO_IO_Read>
 80017f4:	4603      	mov	r3, r0
 80017f6:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	f023 0308 	bic.w	r3, r3, #8
 80017fe:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001800:	7bfa      	ldrb	r2, [r7, #15]
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	4313      	orrs	r3, r2
 8001806:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	461a      	mov	r2, r3
 800180c:	2121      	movs	r1, #33	; 0x21
 800180e:	2032      	movs	r0, #50	; 0x32
 8001810:	f000 fc60 	bl	80020d4 <COMPASSACCELERO_IO_Write>
}
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8001824:	2300      	movs	r3, #0
 8001826:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 800182c:	2301      	movs	r3, #1
 800182e:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8001830:	2123      	movs	r1, #35	; 0x23
 8001832:	2032      	movs	r0, #50	; 0x32
 8001834:	f000 fc61 	bl	80020fa <COMPASSACCELERO_IO_Read>
 8001838:	4603      	mov	r3, r0
 800183a:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800183c:	2124      	movs	r1, #36	; 0x24
 800183e:	2032      	movs	r0, #50	; 0x32
 8001840:	f000 fc5b 	bl	80020fa <COMPASSACCELERO_IO_Read>
 8001844:	4603      	mov	r3, r0
 8001846:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8001848:	2128      	movs	r1, #40	; 0x28
 800184a:	2032      	movs	r0, #50	; 0x32
 800184c:	f000 fc55 	bl	80020fa <COMPASSACCELERO_IO_Read>
 8001850:	4603      	mov	r3, r0
 8001852:	b25b      	sxtb	r3, r3
 8001854:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8001856:	2129      	movs	r1, #41	; 0x29
 8001858:	2032      	movs	r0, #50	; 0x32
 800185a:	f000 fc4e 	bl	80020fa <COMPASSACCELERO_IO_Read>
 800185e:	4603      	mov	r3, r0
 8001860:	b25b      	sxtb	r3, r3
 8001862:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8001864:	212a      	movs	r1, #42	; 0x2a
 8001866:	2032      	movs	r0, #50	; 0x32
 8001868:	f000 fc47 	bl	80020fa <COMPASSACCELERO_IO_Read>
 800186c:	4603      	mov	r3, r0
 800186e:	b25b      	sxtb	r3, r3
 8001870:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 8001872:	212b      	movs	r1, #43	; 0x2b
 8001874:	2032      	movs	r0, #50	; 0x32
 8001876:	f000 fc40 	bl	80020fa <COMPASSACCELERO_IO_Read>
 800187a:	4603      	mov	r3, r0
 800187c:	b25b      	sxtb	r3, r3
 800187e:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 8001880:	212c      	movs	r1, #44	; 0x2c
 8001882:	2032      	movs	r0, #50	; 0x32
 8001884:	f000 fc39 	bl	80020fa <COMPASSACCELERO_IO_Read>
 8001888:	4603      	mov	r3, r0
 800188a:	b25b      	sxtb	r3, r3
 800188c:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 800188e:	212d      	movs	r1, #45	; 0x2d
 8001890:	2032      	movs	r0, #50	; 0x32
 8001892:	f000 fc32 	bl	80020fa <COMPASSACCELERO_IO_Read>
 8001896:	4603      	mov	r3, r0
 8001898:	b25b      	sxtb	r3, r3
 800189a:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 800189c:	7d3b      	ldrb	r3, [r7, #20]
 800189e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d123      	bne.n	80018ee <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	77fb      	strb	r3, [r7, #31]
 80018aa:	e01c      	b.n	80018e6 <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 80018ac:	7ffb      	ldrb	r3, [r7, #31]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	3301      	adds	r3, #1
 80018b2:	3320      	adds	r3, #32
 80018b4:	443b      	add	r3, r7
 80018b6:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	021b      	lsls	r3, r3, #8
 80018be:	b29a      	uxth	r2, r3
 80018c0:	7ffb      	ldrb	r3, [r7, #31]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	3320      	adds	r3, #32
 80018c6:	443b      	add	r3, r7
 80018c8:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	7ffb      	ldrb	r3, [r7, #31]
 80018d4:	b212      	sxth	r2, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	3320      	adds	r3, #32
 80018da:	443b      	add	r3, r7
 80018dc:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80018e0:	7ffb      	ldrb	r3, [r7, #31]
 80018e2:	3301      	adds	r3, #1
 80018e4:	77fb      	strb	r3, [r7, #31]
 80018e6:	7ffb      	ldrb	r3, [r7, #31]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d9df      	bls.n	80018ac <LSM303AGR_AccReadXYZ+0x90>
 80018ec:	e022      	b.n	8001934 <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	77fb      	strb	r3, [r7, #31]
 80018f2:	e01c      	b.n	800192e <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 80018f4:	7ffb      	ldrb	r3, [r7, #31]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	3320      	adds	r3, #32
 80018fa:	443b      	add	r3, r7
 80018fc:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001900:	b29b      	uxth	r3, r3
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	b29a      	uxth	r2, r3
 8001906:	7ffb      	ldrb	r3, [r7, #31]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	3301      	adds	r3, #1
 800190c:	3320      	adds	r3, #32
 800190e:	443b      	add	r3, r7
 8001910:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001914:	b29b      	uxth	r3, r3
 8001916:	4413      	add	r3, r2
 8001918:	b29a      	uxth	r2, r3
 800191a:	7ffb      	ldrb	r3, [r7, #31]
 800191c:	b212      	sxth	r2, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	3320      	adds	r3, #32
 8001922:	443b      	add	r3, r7
 8001924:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001928:	7ffb      	ldrb	r3, [r7, #31]
 800192a:	3301      	adds	r3, #1
 800192c:	77fb      	strb	r3, [r7, #31]
 800192e:	7ffb      	ldrb	r3, [r7, #31]
 8001930:	2b02      	cmp	r3, #2
 8001932:	d9df      	bls.n	80018f4 <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8001934:	7d3b      	ldrb	r3, [r7, #20]
 8001936:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800193a:	2b30      	cmp	r3, #48	; 0x30
 800193c:	d013      	beq.n	8001966 <LSM303AGR_AccReadXYZ+0x14a>
 800193e:	2b30      	cmp	r3, #48	; 0x30
 8001940:	dc14      	bgt.n	800196c <LSM303AGR_AccReadXYZ+0x150>
 8001942:	2b20      	cmp	r3, #32
 8001944:	d00c      	beq.n	8001960 <LSM303AGR_AccReadXYZ+0x144>
 8001946:	2b20      	cmp	r3, #32
 8001948:	dc10      	bgt.n	800196c <LSM303AGR_AccReadXYZ+0x150>
 800194a:	2b00      	cmp	r3, #0
 800194c:	d002      	beq.n	8001954 <LSM303AGR_AccReadXYZ+0x138>
 800194e:	2b10      	cmp	r3, #16
 8001950:	d003      	beq.n	800195a <LSM303AGR_AccReadXYZ+0x13e>
 8001952:	e00b      	b.n	800196c <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8001954:	2301      	movs	r3, #1
 8001956:	77bb      	strb	r3, [r7, #30]
    break;
 8001958:	e008      	b.n	800196c <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 800195a:	2302      	movs	r3, #2
 800195c:	77bb      	strb	r3, [r7, #30]
    break;
 800195e:	e005      	b.n	800196c <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 8001960:	2304      	movs	r3, #4
 8001962:	77bb      	strb	r3, [r7, #30]
    break;
 8001964:	e002      	b.n	800196c <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 8001966:	230c      	movs	r3, #12
 8001968:	77bb      	strb	r3, [r7, #30]
    break;
 800196a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800196c:	2300      	movs	r3, #0
 800196e:	77fb      	strb	r3, [r7, #31]
 8001970:	e014      	b.n	800199c <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001972:	7ffb      	ldrb	r3, [r7, #31]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	3320      	adds	r3, #32
 8001978:	443b      	add	r3, r7
 800197a:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 800197e:	b29a      	uxth	r2, r3
 8001980:	7fbb      	ldrb	r3, [r7, #30]
 8001982:	b29b      	uxth	r3, r3
 8001984:	fb12 f303 	smulbb	r3, r2, r3
 8001988:	b299      	uxth	r1, r3
 800198a:	7ffb      	ldrb	r3, [r7, #31]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	b20a      	sxth	r2, r1
 8001994:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001996:	7ffb      	ldrb	r3, [r7, #31]
 8001998:	3301      	adds	r3, #1
 800199a:	77fb      	strb	r3, [r7, #31]
 800199c:	7ffb      	ldrb	r3, [r7, #31]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d9e7      	bls.n	8001972 <LSM303AGR_AccReadXYZ+0x156>
  }
}
 80019a2:	bf00      	nop
 80019a4:	bf00      	nop
 80019a6:	3720      	adds	r7, #32
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 80019b6:	2300      	movs	r3, #0
 80019b8:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80019ba:	2121      	movs	r1, #33	; 0x21
 80019bc:	2032      	movs	r0, #50	; 0x32
 80019be:	f000 fb9c 	bl	80020fa <COMPASSACCELERO_IO_Read>
 80019c2:	4603      	mov	r3, r0
 80019c4:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	f023 0304 	bic.w	r3, r3, #4
 80019cc:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 80019ce:	7bfa      	ldrb	r2, [r7, #15]
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	461a      	mov	r2, r3
 80019da:	2121      	movs	r1, #33	; 0x21
 80019dc:	2032      	movs	r0, #50	; 0x32
 80019de:	f000 fb79 	bl	80020d4 <COMPASSACCELERO_IO_Write>
}
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b084      	sub	sp, #16
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80019f4:	2300      	movs	r3, #0
 80019f6:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 80019f8:	2122      	movs	r1, #34	; 0x22
 80019fa:	2032      	movs	r0, #50	; 0x32
 80019fc:	f000 fb7d 	bl	80020fa <COMPASSACCELERO_IO_Read>
 8001a00:	4603      	mov	r3, r0
 8001a02:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 8001a04:	7bfa      	ldrb	r2, [r7, #15]
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	2122      	movs	r1, #34	; 0x22
 8001a12:	2032      	movs	r0, #50	; 0x32
 8001a14:	f000 fb5e 	bl	80020d4 <COMPASSACCELERO_IO_Write>
}
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 8001a2e:	2138      	movs	r1, #56	; 0x38
 8001a30:	2032      	movs	r0, #50	; 0x32
 8001a32:	f000 fb62 	bl	80020fa <COMPASSACCELERO_IO_Read>
 8001a36:	4603      	mov	r3, r0
 8001a38:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001a3a:	7bfa      	ldrb	r2, [r7, #15]
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	461a      	mov	r2, r3
 8001a46:	2138      	movs	r1, #56	; 0x38
 8001a48:	2032      	movs	r0, #50	; 0x32
 8001a4a:	f000 fb43 	bl	80020d4 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8001a4e:	230a      	movs	r3, #10
 8001a50:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	461a      	mov	r2, r3
 8001a56:	213a      	movs	r1, #58	; 0x3a
 8001a58:	2032      	movs	r0, #50	; 0x32
 8001a5a:	f000 fb3b 	bl	80020d4 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8001a5e:	2305      	movs	r3, #5
 8001a60:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	461a      	mov	r2, r3
 8001a66:	213b      	movs	r1, #59	; 0x3b
 8001a68:	2032      	movs	r0, #50	; 0x32
 8001a6a:	f000 fb33 	bl	80020d4 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	461a      	mov	r2, r3
 8001a72:	213c      	movs	r1, #60	; 0x3c
 8001a74:	2032      	movs	r0, #50	; 0x32
 8001a76:	f000 fb2d 	bl	80020d4 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001a7a:	2332      	movs	r3, #50	; 0x32
 8001a7c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	461a      	mov	r2, r3
 8001a82:	213d      	movs	r1, #61	; 0x3d
 8001a84:	2032      	movs	r0, #50	; 0x32
 8001a86:	f000 fb25 	bl	80020d4 <COMPASSACCELERO_IO_Write>
}
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 8001a92:	b580      	push	{r7, lr}
 8001a94:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8001a96:	f000 faed 	bl	8002074 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8001a9a:	2080      	movs	r0, #128	; 0x80
 8001a9c:	f7ff ffa5 	bl	80019ea <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8001aa0:	2004      	movs	r0, #4
 8001aa2:	f7ff ff83 	bl	80019ac <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 8001aa6:	2010      	movs	r0, #16
 8001aa8:	f7ff ffba 	bl	8001a20 <LSM303AGR_AccClickITEnable>
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001aba:	2300      	movs	r3, #0
 8001abc:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8001abe:	f000 fab1 	bl	8002024 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	2120      	movs	r1, #32
 8001acc:	2032      	movs	r0, #50	; 0x32
 8001ace:	f000 fb01 	bl	80020d4 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	2123      	movs	r1, #35	; 0x23
 8001adc:	2032      	movs	r0, #50	; 0x32
 8001ade:	f000 faf9 	bl	80020d4 <COMPASSACCELERO_IO_Write>
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001afe:	2300      	movs	r3, #0
 8001b00:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8001b02:	f000 fa8f 	bl	8002024 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8001b06:	210f      	movs	r1, #15
 8001b08:	2032      	movs	r0, #50	; 0x32
 8001b0a:	f000 faf6 	bl	80020fa <COMPASSACCELERO_IO_Read>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8001b12:	79fb      	ldrb	r3, [r7, #7]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001b22:	2124      	movs	r1, #36	; 0x24
 8001b24:	2032      	movs	r0, #50	; 0x32
 8001b26:	f000 fae8 	bl	80020fa <COMPASSACCELERO_IO_Read>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b34:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	2124      	movs	r1, #36	; 0x24
 8001b3c:	2032      	movs	r0, #50	; 0x32
 8001b3e:	f000 fac9 	bl	80020d4 <COMPASSACCELERO_IO_Write>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b084      	sub	sp, #16
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	4603      	mov	r3, r0
 8001b52:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001b54:	2121      	movs	r1, #33	; 0x21
 8001b56:	2032      	movs	r0, #50	; 0x32
 8001b58:	f000 facf 	bl	80020fa <COMPASSACCELERO_IO_Read>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8001b68:	7bfa      	ldrb	r2, [r7, #15]
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	461a      	mov	r2, r3
 8001b74:	2121      	movs	r1, #33	; 0x21
 8001b76:	2032      	movs	r0, #50	; 0x32
 8001b78:	f000 faac 	bl	80020d4 <COMPASSACCELERO_IO_Write>
}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001b8e:	2121      	movs	r1, #33	; 0x21
 8001b90:	2032      	movs	r0, #50	; 0x32
 8001b92:	f000 fab2 	bl	80020fa <COMPASSACCELERO_IO_Read>
 8001b96:	4603      	mov	r3, r0
 8001b98:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	f023 0308 	bic.w	r3, r3, #8
 8001ba0:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001ba2:	7bfa      	ldrb	r2, [r7, #15]
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	461a      	mov	r2, r3
 8001bae:	2121      	movs	r1, #33	; 0x21
 8001bb0:	2032      	movs	r0, #50	; 0x32
 8001bb2:	f000 fa8f 	bl	80020d4 <COMPASSACCELERO_IO_Write>
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b088      	sub	sp, #32
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8001bd2:	2123      	movs	r1, #35	; 0x23
 8001bd4:	2032      	movs	r0, #50	; 0x32
 8001bd6:	f000 fa90 	bl	80020fa <COMPASSACCELERO_IO_Read>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001bde:	2124      	movs	r1, #36	; 0x24
 8001be0:	2032      	movs	r0, #50	; 0x32
 8001be2:	f000 fa8a 	bl	80020fa <COMPASSACCELERO_IO_Read>
 8001be6:	4603      	mov	r3, r0
 8001be8:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8001bea:	2128      	movs	r1, #40	; 0x28
 8001bec:	2032      	movs	r0, #50	; 0x32
 8001bee:	f000 fa84 	bl	80020fa <COMPASSACCELERO_IO_Read>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	b25b      	sxtb	r3, r3
 8001bf6:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8001bf8:	2129      	movs	r1, #41	; 0x29
 8001bfa:	2032      	movs	r0, #50	; 0x32
 8001bfc:	f000 fa7d 	bl	80020fa <COMPASSACCELERO_IO_Read>
 8001c00:	4603      	mov	r3, r0
 8001c02:	b25b      	sxtb	r3, r3
 8001c04:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8001c06:	212a      	movs	r1, #42	; 0x2a
 8001c08:	2032      	movs	r0, #50	; 0x32
 8001c0a:	f000 fa76 	bl	80020fa <COMPASSACCELERO_IO_Read>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	b25b      	sxtb	r3, r3
 8001c12:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8001c14:	212b      	movs	r1, #43	; 0x2b
 8001c16:	2032      	movs	r0, #50	; 0x32
 8001c18:	f000 fa6f 	bl	80020fa <COMPASSACCELERO_IO_Read>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	b25b      	sxtb	r3, r3
 8001c20:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8001c22:	212c      	movs	r1, #44	; 0x2c
 8001c24:	2032      	movs	r0, #50	; 0x32
 8001c26:	f000 fa68 	bl	80020fa <COMPASSACCELERO_IO_Read>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	b25b      	sxtb	r3, r3
 8001c2e:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8001c30:	212d      	movs	r1, #45	; 0x2d
 8001c32:	2032      	movs	r0, #50	; 0x32
 8001c34:	f000 fa61 	bl	80020fa <COMPASSACCELERO_IO_Read>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	b25b      	sxtb	r3, r3
 8001c3c:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8001c3e:	7d3b      	ldrb	r3, [r7, #20]
 8001c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d123      	bne.n	8001c90 <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	77fb      	strb	r3, [r7, #31]
 8001c4c:	e01c      	b.n	8001c88 <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8001c4e:	7ffb      	ldrb	r3, [r7, #31]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	3301      	adds	r3, #1
 8001c54:	3320      	adds	r3, #32
 8001c56:	443b      	add	r3, r7
 8001c58:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	021b      	lsls	r3, r3, #8
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	7ffb      	ldrb	r3, [r7, #31]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	3320      	adds	r3, #32
 8001c68:	443b      	add	r3, r7
 8001c6a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	4413      	add	r3, r2
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	7ffb      	ldrb	r3, [r7, #31]
 8001c76:	b212      	sxth	r2, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	3320      	adds	r3, #32
 8001c7c:	443b      	add	r3, r7
 8001c7e:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001c82:	7ffb      	ldrb	r3, [r7, #31]
 8001c84:	3301      	adds	r3, #1
 8001c86:	77fb      	strb	r3, [r7, #31]
 8001c88:	7ffb      	ldrb	r3, [r7, #31]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d9df      	bls.n	8001c4e <LSM303DLHC_AccReadXYZ+0x90>
 8001c8e:	e022      	b.n	8001cd6 <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8001c90:	2300      	movs	r3, #0
 8001c92:	77fb      	strb	r3, [r7, #31]
 8001c94:	e01c      	b.n	8001cd0 <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001c96:	7ffb      	ldrb	r3, [r7, #31]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	3320      	adds	r3, #32
 8001c9c:	443b      	add	r3, r7
 8001c9e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	7ffb      	ldrb	r3, [r7, #31]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	3301      	adds	r3, #1
 8001cae:	3320      	adds	r3, #32
 8001cb0:	443b      	add	r3, r7
 8001cb2:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	4413      	add	r3, r2
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	7ffb      	ldrb	r3, [r7, #31]
 8001cbe:	b212      	sxth	r2, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	3320      	adds	r3, #32
 8001cc4:	443b      	add	r3, r7
 8001cc6:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001cca:	7ffb      	ldrb	r3, [r7, #31]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	77fb      	strb	r3, [r7, #31]
 8001cd0:	7ffb      	ldrb	r3, [r7, #31]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d9df      	bls.n	8001c96 <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8001cd6:	7d3b      	ldrb	r3, [r7, #20]
 8001cd8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001cdc:	2b30      	cmp	r3, #48	; 0x30
 8001cde:	d013      	beq.n	8001d08 <LSM303DLHC_AccReadXYZ+0x14a>
 8001ce0:	2b30      	cmp	r3, #48	; 0x30
 8001ce2:	dc14      	bgt.n	8001d0e <LSM303DLHC_AccReadXYZ+0x150>
 8001ce4:	2b20      	cmp	r3, #32
 8001ce6:	d00c      	beq.n	8001d02 <LSM303DLHC_AccReadXYZ+0x144>
 8001ce8:	2b20      	cmp	r3, #32
 8001cea:	dc10      	bgt.n	8001d0e <LSM303DLHC_AccReadXYZ+0x150>
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <LSM303DLHC_AccReadXYZ+0x138>
 8001cf0:	2b10      	cmp	r3, #16
 8001cf2:	d003      	beq.n	8001cfc <LSM303DLHC_AccReadXYZ+0x13e>
 8001cf4:	e00b      	b.n	8001d0e <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	77bb      	strb	r3, [r7, #30]
    break;
 8001cfa:	e008      	b.n	8001d0e <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	77bb      	strb	r3, [r7, #30]
    break;
 8001d00:	e005      	b.n	8001d0e <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8001d02:	2304      	movs	r3, #4
 8001d04:	77bb      	strb	r3, [r7, #30]
    break;
 8001d06:	e002      	b.n	8001d0e <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8001d08:	230c      	movs	r3, #12
 8001d0a:	77bb      	strb	r3, [r7, #30]
    break;
 8001d0c:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	77fb      	strb	r3, [r7, #31]
 8001d12:	e014      	b.n	8001d3e <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001d14:	7ffb      	ldrb	r3, [r7, #31]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	3320      	adds	r3, #32
 8001d1a:	443b      	add	r3, r7
 8001d1c:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	7fbb      	ldrb	r3, [r7, #30]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	fb12 f303 	smulbb	r3, r2, r3
 8001d2a:	b299      	uxth	r1, r3
 8001d2c:	7ffb      	ldrb	r3, [r7, #31]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	4413      	add	r3, r2
 8001d34:	b20a      	sxth	r2, r1
 8001d36:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001d38:	7ffb      	ldrb	r3, [r7, #31]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	77fb      	strb	r3, [r7, #31]
 8001d3e:	7ffb      	ldrb	r3, [r7, #31]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d9e7      	bls.n	8001d14 <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	3720      	adds	r7, #32
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001d5c:	2121      	movs	r1, #33	; 0x21
 8001d5e:	2032      	movs	r0, #50	; 0x32
 8001d60:	f000 f9cb 	bl	80020fa <COMPASSACCELERO_IO_Read>
 8001d64:	4603      	mov	r3, r0
 8001d66:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
 8001d6a:	f023 0304 	bic.w	r3, r3, #4
 8001d6e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001d70:	7bfa      	ldrb	r2, [r7, #15]
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	2121      	movs	r1, #33	; 0x21
 8001d7e:	2032      	movs	r0, #50	; 0x32
 8001d80:	f000 f9a8 	bl	80020d4 <COMPASSACCELERO_IO_Write>
}
 8001d84:	bf00      	nop
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001d96:	2300      	movs	r3, #0
 8001d98:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8001d9a:	2122      	movs	r1, #34	; 0x22
 8001d9c:	2032      	movs	r0, #50	; 0x32
 8001d9e:	f000 f9ac 	bl	80020fa <COMPASSACCELERO_IO_Read>
 8001da2:	4603      	mov	r3, r0
 8001da4:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
 8001db0:	461a      	mov	r2, r3
 8001db2:	2122      	movs	r1, #34	; 0x22
 8001db4:	2032      	movs	r0, #50	; 0x32
 8001db6:	f000 f98d 	bl	80020d4 <COMPASSACCELERO_IO_Write>
}
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8001dd0:	2138      	movs	r1, #56	; 0x38
 8001dd2:	2032      	movs	r0, #50	; 0x32
 8001dd4:	f000 f991 	bl	80020fa <COMPASSACCELERO_IO_Read>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001ddc:	7bfa      	ldrb	r2, [r7, #15]
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	461a      	mov	r2, r3
 8001de8:	2138      	movs	r1, #56	; 0x38
 8001dea:	2032      	movs	r0, #50	; 0x32
 8001dec:	f000 f972 	bl	80020d4 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8001df0:	230a      	movs	r3, #10
 8001df2:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	461a      	mov	r2, r3
 8001df8:	213a      	movs	r1, #58	; 0x3a
 8001dfa:	2032      	movs	r0, #50	; 0x32
 8001dfc:	f000 f96a 	bl	80020d4 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8001e00:	2305      	movs	r3, #5
 8001e02:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	461a      	mov	r2, r3
 8001e08:	213b      	movs	r1, #59	; 0x3b
 8001e0a:	2032      	movs	r0, #50	; 0x32
 8001e0c:	f000 f962 	bl	80020d4 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	461a      	mov	r2, r3
 8001e14:	213c      	movs	r1, #60	; 0x3c
 8001e16:	2032      	movs	r0, #50	; 0x32
 8001e18:	f000 f95c 	bl	80020d4 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001e1c:	2332      	movs	r3, #50	; 0x32
 8001e1e:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	461a      	mov	r2, r3
 8001e24:	213d      	movs	r1, #61	; 0x3d
 8001e26:	2032      	movs	r0, #50	; 0x32
 8001e28:	f000 f954 	bl	80020d4 <COMPASSACCELERO_IO_Write>
}
 8001e2c:	bf00      	nop
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8001e38:	f000 f91c 	bl	8002074 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8001e3c:	2080      	movs	r0, #128	; 0x80
 8001e3e:	f7ff ffa5 	bl	8001d8c <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8001e42:	2004      	movs	r0, #4
 8001e44:	f7ff ff83 	bl	8001d4e <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8001e48:	2010      	movs	r0, #16
 8001e4a:	f7ff ffba 	bl	8001dc2 <LSM303DLHC_AccClickITEnable>
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001e58:	4814      	ldr	r0, [pc, #80]	; (8001eac <I2Cx_Init+0x58>)
 8001e5a:	f003 fe57 	bl	8005b0c <HAL_I2C_GetState>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d121      	bne.n	8001ea8 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <I2Cx_Init+0x58>)
 8001e66:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <I2Cx_Init+0x5c>)
 8001e68:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <I2Cx_Init+0x58>)
 8001e6c:	2243      	movs	r2, #67	; 0x43
 8001e6e:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8001e70:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <I2Cx_Init+0x58>)
 8001e72:	4a10      	ldr	r2, [pc, #64]	; (8001eb4 <I2Cx_Init+0x60>)
 8001e74:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e76:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <I2Cx_Init+0x58>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <I2Cx_Init+0x58>)
 8001e7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e82:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <I2Cx_Init+0x58>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <I2Cx_Init+0x58>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <I2Cx_Init+0x58>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 8001e96:	4b05      	ldr	r3, [pc, #20]	; (8001eac <I2Cx_Init+0x58>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8001e9c:	4803      	ldr	r0, [pc, #12]	; (8001eac <I2Cx_Init+0x58>)
 8001e9e:	f000 f86b 	bl	8001f78 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001ea2:	4802      	ldr	r0, [pc, #8]	; (8001eac <I2Cx_Init+0x58>)
 8001ea4:	f002 fe7a 	bl	8004b9c <HAL_I2C_Init>
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	200014b4 	.word	0x200014b4
 8001eb0:	40005400 	.word	0x40005400
 8001eb4:	000186a0 	.word	0x000186a0

08001eb8 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af04      	add	r7, sp, #16
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	80fb      	strh	r3, [r7, #6]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	717b      	strb	r3, [r7, #5]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8001ece:	797b      	ldrb	r3, [r7, #5]
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <I2Cx_WriteData+0x48>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	88f9      	ldrh	r1, [r7, #6]
 8001ed8:	9302      	str	r3, [sp, #8]
 8001eda:	2301      	movs	r3, #1
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	4807      	ldr	r0, [pc, #28]	; (8001f04 <I2Cx_WriteData+0x4c>)
 8001ee6:	f003 faf1 	bl	80054cc <HAL_I2C_Mem_Write>
 8001eea:	4603      	mov	r3, r0
 8001eec:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001ef4:	f000 f834 	bl	8001f60 <I2Cx_Error>
  }
}
 8001ef8:	bf00      	nop
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	2000006c 	.word	0x2000006c
 8001f04:	200014b4 	.word	0x200014b4

08001f08 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af04      	add	r7, sp, #16
 8001f0e:	4603      	mov	r3, r0
 8001f10:	460a      	mov	r2, r1
 8001f12:	80fb      	strh	r3, [r7, #6]
 8001f14:	4613      	mov	r3, r2
 8001f16:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001f20:	797b      	ldrb	r3, [r7, #5]
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <I2Cx_ReadData+0x50>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	88f9      	ldrh	r1, [r7, #6]
 8001f2a:	9302      	str	r3, [sp, #8]
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	f107 030e 	add.w	r3, r7, #14
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	2301      	movs	r3, #1
 8001f38:	4808      	ldr	r0, [pc, #32]	; (8001f5c <I2Cx_ReadData+0x54>)
 8001f3a:	f003 fbc1 	bl	80056c0 <HAL_I2C_Mem_Read>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001f48:	f000 f80a 	bl	8001f60 <I2Cx_Error>
  }
  return value;
 8001f4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	2000006c 	.word	0x2000006c
 8001f5c:	200014b4 	.word	0x200014b4

08001f60 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8001f64:	4803      	ldr	r0, [pc, #12]	; (8001f74 <I2Cx_Error+0x14>)
 8001f66:	f002 ff5d 	bl	8004e24 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8001f6a:	f7ff ff73 	bl	8001e54 <I2Cx_Init>
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	200014b4 	.word	0x200014b4

08001f78 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	; 0x28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8001f80:	2300      	movs	r3, #0
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	4b25      	ldr	r3, [pc, #148]	; (800201c <I2Cx_MspInit+0xa4>)
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	4a24      	ldr	r2, [pc, #144]	; (800201c <I2Cx_MspInit+0xa4>)
 8001f8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f90:	4b22      	ldr	r3, [pc, #136]	; (800201c <I2Cx_MspInit+0xa4>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	; (800201c <I2Cx_MspInit+0xa4>)
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	4a1d      	ldr	r2, [pc, #116]	; (800201c <I2Cx_MspInit+0xa4>)
 8001fa6:	f043 0302 	orr.w	r3, r3, #2
 8001faa:	6313      	str	r3, [r2, #48]	; 0x30
 8001fac:	4b1b      	ldr	r3, [pc, #108]	; (800201c <I2Cx_MspInit+0xa4>)
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 8001fb8:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8001fbe:	2312      	movs	r3, #18
 8001fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8001fca:	2304      	movs	r3, #4
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4812      	ldr	r0, [pc, #72]	; (8002020 <I2Cx_MspInit+0xa8>)
 8001fd6:	f000 ff19 	bl	8002e0c <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <I2Cx_MspInit+0xa4>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	4a0f      	ldr	r2, [pc, #60]	; (800201c <I2Cx_MspInit+0xa4>)
 8001fe0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fe4:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <I2Cx_MspInit+0xa4>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4a0c      	ldr	r2, [pc, #48]	; (800201c <I2Cx_MspInit+0xa4>)
 8001fec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ff0:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	210f      	movs	r1, #15
 8001ff6:	201f      	movs	r0, #31
 8001ff8:	f000 faf1 	bl	80025de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001ffc:	201f      	movs	r0, #31
 8001ffe:	f000 fb0a 	bl	8002616 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002002:	2200      	movs	r2, #0
 8002004:	210f      	movs	r1, #15
 8002006:	2020      	movs	r0, #32
 8002008:	f000 fae9 	bl	80025de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 800200c:	2020      	movs	r0, #32
 800200e:	f000 fb02 	bl	8002616 <HAL_NVIC_EnableIRQ>
}
 8002012:	bf00      	nop
 8002014:	3728      	adds	r7, #40	; 0x28
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800
 8002020:	40020400 	.word	0x40020400

08002024 <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	603b      	str	r3, [r7, #0]
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <COMPASSACCELERO_IO_Init+0x48>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a0e      	ldr	r2, [pc, #56]	; (800206c <COMPASSACCELERO_IO_Init+0x48>)
 8002034:	f043 0310 	orr.w	r3, r3, #16
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <COMPASSACCELERO_IO_Init+0x48>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8002046:	2304      	movs	r3, #4
 8002048:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002052:	2302      	movs	r3, #2
 8002054:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	4619      	mov	r1, r3
 800205a:	4805      	ldr	r0, [pc, #20]	; (8002070 <COMPASSACCELERO_IO_Init+0x4c>)
 800205c:	f000 fed6 	bl	8002e0c <HAL_GPIO_Init>
  
  I2Cx_Init();
 8002060:	f7ff fef8 	bl	8001e54 <I2Cx_Init>
}
 8002064:	bf00      	nop
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40023800 	.word	0x40023800
 8002070:	40021000 	.word	0x40021000

08002074 <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	603b      	str	r3, [r7, #0]
 800207e:	4b13      	ldr	r3, [pc, #76]	; (80020cc <COMPASSACCELERO_IO_ITConfig+0x58>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a12      	ldr	r2, [pc, #72]	; (80020cc <COMPASSACCELERO_IO_ITConfig+0x58>)
 8002084:	f043 0310 	orr.w	r3, r3, #16
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <COMPASSACCELERO_IO_ITConfig+0x58>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8002096:	2330      	movs	r3, #48	; 0x30
 8002098:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800209a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800209e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80020a0:	2302      	movs	r3, #2
 80020a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	4619      	mov	r1, r3
 80020ac:	4808      	ldr	r0, [pc, #32]	; (80020d0 <COMPASSACCELERO_IO_ITConfig+0x5c>)
 80020ae:	f000 fead 	bl	8002e0c <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 80020b2:	2200      	movs	r2, #0
 80020b4:	210f      	movs	r1, #15
 80020b6:	200a      	movs	r0, #10
 80020b8:	f000 fa91 	bl	80025de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 80020bc:	200a      	movs	r0, #10
 80020be:	f000 faaa 	bl	8002616 <HAL_NVIC_EnableIRQ>
}
 80020c2:	bf00      	nop
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40021000 	.word	0x40021000

080020d4 <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	80fb      	strh	r3, [r7, #6]
 80020de:	460b      	mov	r3, r1
 80020e0:	717b      	strb	r3, [r7, #5]
 80020e2:	4613      	mov	r3, r2
 80020e4:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 80020e6:	793a      	ldrb	r2, [r7, #4]
 80020e8:	7979      	ldrb	r1, [r7, #5]
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fee3 	bl	8001eb8 <I2Cx_WriteData>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	460a      	mov	r2, r1
 8002104:	80fb      	strh	r3, [r7, #6]
 8002106:	4613      	mov	r3, r2
 8002108:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 800210a:	797a      	ldrb	r2, [r7, #5]
 800210c:	88fb      	ldrh	r3, [r7, #6]
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fef9 	bl	8001f08 <I2Cx_ReadData>
 8002116:	4603      	mov	r3, r0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 800212a:	2300      	movs	r3, #0
 800212c:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8002136:	4b58      	ldr	r3, [pc, #352]	; (8002298 <BSP_ACCELERO_Init+0x178>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	4798      	blx	r3
 800213c:	4603      	mov	r3, r0
 800213e:	2b33      	cmp	r3, #51	; 0x33
 8002140:	d14f      	bne.n	80021e2 <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8002142:	4b56      	ldr	r3, [pc, #344]	; (800229c <BSP_ACCELERO_Init+0x17c>)
 8002144:	4a54      	ldr	r2, [pc, #336]	; (8002298 <BSP_ACCELERO_Init+0x178>)
 8002146:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8002148:	2300      	movs	r3, #0
 800214a:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 800214c:	2340      	movs	r3, #64	; 0x40
 800214e:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 8002150:	2307      	movs	r3, #7
 8002152:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 8002154:	2300      	movs	r3, #0
 8002156:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8002158:	2300      	movs	r3, #0
 800215a:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 800215c:	2300      	movs	r3, #0
 800215e:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8002160:	2308      	movs	r3, #8
 8002162:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002164:	7b3a      	ldrb	r2, [r7, #12]
 8002166:	7b7b      	ldrb	r3, [r7, #13]
 8002168:	4313      	orrs	r3, r2
 800216a:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 800216c:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800216e:	4313      	orrs	r3, r2
 8002170:	b2db      	uxtb	r3, r3
 8002172:	b29a      	uxth	r2, r3
 8002174:	8abb      	ldrh	r3, [r7, #20]
 8002176:	4313      	orrs	r3, r2
 8002178:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 800217a:	7c3a      	ldrb	r2, [r7, #16]
 800217c:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 800217e:	4313      	orrs	r3, r2
 8002180:	b2da      	uxtb	r2, r3
 8002182:	7cbb      	ldrb	r3, [r7, #18]
 8002184:	4313      	orrs	r3, r2
 8002186:	b2da      	uxtb	r2, r3
 8002188:	7bfb      	ldrb	r3, [r7, #15]
 800218a:	4313      	orrs	r3, r2
 800218c:	b2db      	uxtb	r3, r3
 800218e:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002190:	b21a      	sxth	r2, r3
 8002192:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002196:	4313      	orrs	r3, r2
 8002198:	b21b      	sxth	r3, r3
 800219a:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800219c:	4b3f      	ldr	r3, [pc, #252]	; (800229c <BSP_ACCELERO_Init+0x17c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	8aba      	ldrh	r2, [r7, #20]
 80021a4:	4610      	mov	r0, r2
 80021a6:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 80021ac:	2310      	movs	r3, #16
 80021ae:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80021b8:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 80021ba:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80021bc:	4313      	orrs	r3, r2
 80021be:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 80021c0:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 80021c6:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80021c8:	4313      	orrs	r3, r2
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 80021ce:	4b33      	ldr	r3, [pc, #204]	; (800229c <BSP_ACCELERO_Init+0x17c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	8aba      	ldrh	r2, [r7, #20]
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	4610      	mov	r0, r2
 80021da:	4798      	blx	r3

    ret = ACCELERO_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	75fb      	strb	r3, [r7, #23]
 80021e0:	e054      	b.n	800228c <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 80021e2:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <BSP_ACCELERO_Init+0x180>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	4798      	blx	r3
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b33      	cmp	r3, #51	; 0x33
 80021ec:	d14e      	bne.n	800228c <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 80021ee:	4b2b      	ldr	r3, [pc, #172]	; (800229c <BSP_ACCELERO_Init+0x17c>)
 80021f0:	4a2b      	ldr	r2, [pc, #172]	; (80022a0 <BSP_ACCELERO_Init+0x180>)
 80021f2:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 80021f8:	2340      	movs	r3, #64	; 0x40
 80021fa:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 80021fc:	2307      	movs	r3, #7
 80021fe:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8002200:	2300      	movs	r3, #0
 8002202:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 8002204:	2300      	movs	r3, #0
 8002206:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8002208:	2300      	movs	r3, #0
 800220a:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 800220c:	2308      	movs	r3, #8
 800220e:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002210:	7b3a      	ldrb	r2, [r7, #12]
 8002212:	7b7b      	ldrb	r3, [r7, #13]
 8002214:	4313      	orrs	r3, r2
 8002216:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8002218:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800221a:	4313      	orrs	r3, r2
 800221c:	b2db      	uxtb	r3, r3
 800221e:	b29a      	uxth	r2, r3
 8002220:	8abb      	ldrh	r3, [r7, #20]
 8002222:	4313      	orrs	r3, r2
 8002224:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002226:	7c3a      	ldrb	r2, [r7, #16]
 8002228:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 800222a:	4313      	orrs	r3, r2
 800222c:	b2da      	uxtb	r2, r3
 800222e:	7cbb      	ldrb	r3, [r7, #18]
 8002230:	4313      	orrs	r3, r2
 8002232:	b2da      	uxtb	r2, r3
 8002234:	7bfb      	ldrb	r3, [r7, #15]
 8002236:	4313      	orrs	r3, r2
 8002238:	b2db      	uxtb	r3, r3
 800223a:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 800223c:	b21a      	sxth	r2, r3
 800223e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002242:	4313      	orrs	r3, r2
 8002244:	b21b      	sxth	r3, r3
 8002246:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002248:	4b14      	ldr	r3, [pc, #80]	; (800229c <BSP_ACCELERO_Init+0x17c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	8aba      	ldrh	r2, [r7, #20]
 8002250:	4610      	mov	r0, r2
 8002252:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8002258:	2310      	movs	r3, #16
 800225a:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8002260:	2300      	movs	r3, #0
 8002262:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002264:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8002266:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002268:	4313      	orrs	r3, r2
 800226a:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 800226c:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800226e:	4313      	orrs	r3, r2
 8002270:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8002272:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002274:	4313      	orrs	r3, r2
 8002276:	b2db      	uxtb	r3, r3
 8002278:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <BSP_ACCELERO_Init+0x17c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	8aba      	ldrh	r2, [r7, #20]
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	4610      	mov	r0, r2
 8002286:	4798      	blx	r3

    ret = ACCELERO_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800228c:	7dfb      	ldrb	r3, [r7, #23]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000038 	.word	0x20000038
 800229c:	20001508 	.word	0x20001508
 80022a0:	20000004 	.word	0x20000004

080022a4 <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 80022b0:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <BSP_ACCELERO_GetXYZ+0x50>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d018      	beq.n	80022ec <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 80022ba:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <BSP_ACCELERO_GetXYZ+0x50>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <BSP_ACCELERO_GetXYZ+0x50>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0b      	ldr	r2, [pc, #44]	; (80022f8 <BSP_ACCELERO_GetXYZ+0x54>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d10e      	bne.n	80022ec <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 80022de:	89fb      	ldrh	r3, [r7, #14]
 80022e0:	425b      	negs	r3, r3
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3302      	adds	r3, #2
 80022e8:	b212      	sxth	r2, r2
 80022ea:	801a      	strh	r2, [r3, #0]
    }
  }
}
 80022ec:	bf00      	nop
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20001508 	.word	0x20001508
 80022f8:	20000038 	.word	0x20000038

080022fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002300:	4b0e      	ldr	r3, [pc, #56]	; (800233c <HAL_Init+0x40>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0d      	ldr	r2, [pc, #52]	; (800233c <HAL_Init+0x40>)
 8002306:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800230a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_Init+0x40>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0a      	ldr	r2, [pc, #40]	; (800233c <HAL_Init+0x40>)
 8002312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002316:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_Init+0x40>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a07      	ldr	r2, [pc, #28]	; (800233c <HAL_Init+0x40>)
 800231e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002322:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002324:	2003      	movs	r0, #3
 8002326:	f000 f94f 	bl	80025c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800232a:	2000      	movs	r0, #0
 800232c:	f000 f808 	bl	8002340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002330:	f7fe ffd4 	bl	80012dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023c00 	.word	0x40023c00

08002340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_InitTick+0x54>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_InitTick+0x58>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4619      	mov	r1, r3
 8002352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002356:	fbb3 f3f1 	udiv	r3, r3, r1
 800235a:	fbb2 f3f3 	udiv	r3, r2, r3
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f967 	bl	8002632 <HAL_SYSTICK_Config>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e00e      	b.n	800238c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b0f      	cmp	r3, #15
 8002372:	d80a      	bhi.n	800238a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002374:	2200      	movs	r2, #0
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	f000 f92f 	bl	80025de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002380:	4a06      	ldr	r2, [pc, #24]	; (800239c <HAL_InitTick+0x5c>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	e000      	b.n	800238c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20000000 	.word	0x20000000
 8002398:	20000074 	.word	0x20000074
 800239c:	20000070 	.word	0x20000070

080023a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_IncTick+0x20>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_IncTick+0x24>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <HAL_IncTick+0x24>)
 80023b2:	6013      	str	r3, [r2, #0]
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000074 	.word	0x20000074
 80023c4:	2000150c 	.word	0x2000150c

080023c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return uwTick;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <HAL_GetTick+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	2000150c 	.word	0x2000150c

080023e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023e8:	f7ff ffee 	bl	80023c8 <HAL_GetTick>
 80023ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f8:	d005      	beq.n	8002406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023fa:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <HAL_Delay+0x44>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4413      	add	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002406:	bf00      	nop
 8002408:	f7ff ffde 	bl	80023c8 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	429a      	cmp	r2, r3
 8002416:	d8f7      	bhi.n	8002408 <HAL_Delay+0x28>
  {
  }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000074 	.word	0x20000074

08002428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <__NVIC_SetPriorityGrouping+0x44>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002444:	4013      	ands	r3, r2
 8002446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245a:	4a04      	ldr	r2, [pc, #16]	; (800246c <__NVIC_SetPriorityGrouping+0x44>)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	60d3      	str	r3, [r2, #12]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002474:	4b04      	ldr	r3, [pc, #16]	; (8002488 <__NVIC_GetPriorityGrouping+0x18>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	f003 0307 	and.w	r3, r3, #7
}
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	2b00      	cmp	r3, #0
 800249c:	db0b      	blt.n	80024b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	f003 021f 	and.w	r2, r3, #31
 80024a4:	4907      	ldr	r1, [pc, #28]	; (80024c4 <__NVIC_EnableIRQ+0x38>)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2001      	movs	r0, #1
 80024ae:	fa00 f202 	lsl.w	r2, r0, r2
 80024b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	e000e100 	.word	0xe000e100

080024c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	db0a      	blt.n	80024f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	490c      	ldr	r1, [pc, #48]	; (8002514 <__NVIC_SetPriority+0x4c>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	0112      	lsls	r2, r2, #4
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	440b      	add	r3, r1
 80024ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f0:	e00a      	b.n	8002508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4908      	ldr	r1, [pc, #32]	; (8002518 <__NVIC_SetPriority+0x50>)
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	3b04      	subs	r3, #4
 8002500:	0112      	lsls	r2, r2, #4
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	440b      	add	r3, r1
 8002506:	761a      	strb	r2, [r3, #24]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000e100 	.word	0xe000e100
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f1c3 0307 	rsb	r3, r3, #7
 8002536:	2b04      	cmp	r3, #4
 8002538:	bf28      	it	cs
 800253a:	2304      	movcs	r3, #4
 800253c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3304      	adds	r3, #4
 8002542:	2b06      	cmp	r3, #6
 8002544:	d902      	bls.n	800254c <NVIC_EncodePriority+0x30>
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3b03      	subs	r3, #3
 800254a:	e000      	b.n	800254e <NVIC_EncodePriority+0x32>
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	f04f 32ff 	mov.w	r2, #4294967295
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43da      	mvns	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	401a      	ands	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002564:	f04f 31ff 	mov.w	r1, #4294967295
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	43d9      	mvns	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	4313      	orrs	r3, r2
         );
}
 8002576:	4618      	mov	r0, r3
 8002578:	3724      	adds	r7, #36	; 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3b01      	subs	r3, #1
 8002590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002594:	d301      	bcc.n	800259a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002596:	2301      	movs	r3, #1
 8002598:	e00f      	b.n	80025ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259a:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <SysTick_Config+0x40>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3b01      	subs	r3, #1
 80025a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a2:	210f      	movs	r1, #15
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295
 80025a8:	f7ff ff8e 	bl	80024c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <SysTick_Config+0x40>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b2:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <SysTick_Config+0x40>)
 80025b4:	2207      	movs	r2, #7
 80025b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	e000e010 	.word	0xe000e010

080025c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff ff29 	bl	8002428 <__NVIC_SetPriorityGrouping>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025de:	b580      	push	{r7, lr}
 80025e0:	b086      	sub	sp, #24
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	4603      	mov	r3, r0
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
 80025ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f0:	f7ff ff3e 	bl	8002470 <__NVIC_GetPriorityGrouping>
 80025f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	6978      	ldr	r0, [r7, #20]
 80025fc:	f7ff ff8e 	bl	800251c <NVIC_EncodePriority>
 8002600:	4602      	mov	r2, r0
 8002602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff5d 	bl	80024c8 <__NVIC_SetPriority>
}
 800260e:	bf00      	nop
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	4603      	mov	r3, r0
 800261e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff31 	bl	800248c <__NVIC_EnableIRQ>
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff ffa2 	bl	8002584 <SysTick_Config>
 8002640:	4603      	mov	r3, r0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002658:	f7ff feb6 	bl	80023c8 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e099      	b.n	800279c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2202      	movs	r2, #2
 800266c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0201 	bic.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002688:	e00f      	b.n	80026aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800268a:	f7ff fe9d 	bl	80023c8 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b05      	cmp	r3, #5
 8002696:	d908      	bls.n	80026aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2220      	movs	r2, #32
 800269c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2203      	movs	r2, #3
 80026a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e078      	b.n	800279c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1e8      	bne.n	800268a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	4b38      	ldr	r3, [pc, #224]	; (80027a4 <HAL_DMA_Init+0x158>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	2b04      	cmp	r3, #4
 8002702:	d107      	bne.n	8002714 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	4313      	orrs	r3, r2
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f023 0307 	bic.w	r3, r3, #7
 800272a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	4313      	orrs	r3, r2
 8002734:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	2b04      	cmp	r3, #4
 800273c:	d117      	bne.n	800276e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4313      	orrs	r3, r2
 8002746:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00e      	beq.n	800276e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 fadf 	bl	8002d14 <DMA_CheckFifoParam>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2240      	movs	r2, #64	; 0x40
 8002760:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800276a:	2301      	movs	r3, #1
 800276c:	e016      	b.n	800279c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fa96 	bl	8002ca8 <DMA_CalcBaseAndBitshift>
 800277c:	4603      	mov	r3, r0
 800277e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	223f      	movs	r2, #63	; 0x3f
 8002786:	409a      	lsls	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	f010803f 	.word	0xf010803f

080027a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_DMA_Start_IT+0x26>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e040      	b.n	8002850 <HAL_DMA_Start_IT+0xa8>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d12f      	bne.n	8002842 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2202      	movs	r2, #2
 80027e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68b9      	ldr	r1, [r7, #8]
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 fa28 	bl	8002c4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002800:	223f      	movs	r2, #63	; 0x3f
 8002802:	409a      	lsls	r2, r3
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0216 	orr.w	r2, r2, #22
 8002816:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	2b00      	cmp	r3, #0
 800281e:	d007      	beq.n	8002830 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0208 	orr.w	r2, r2, #8
 800282e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	e005      	b.n	800284e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800284a:	2302      	movs	r3, #2
 800284c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800284e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002864:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002866:	f7ff fdaf 	bl	80023c8 <HAL_GetTick>
 800286a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d008      	beq.n	800288a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e052      	b.n	8002930 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0216 	bic.w	r2, r2, #22
 8002898:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d103      	bne.n	80028ba <HAL_DMA_Abort+0x62>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d007      	beq.n	80028ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0208 	bic.w	r2, r2, #8
 80028c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0201 	bic.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028da:	e013      	b.n	8002904 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028dc:	f7ff fd74 	bl	80023c8 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d90c      	bls.n	8002904 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2220      	movs	r2, #32
 80028ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2203      	movs	r2, #3
 80028f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e015      	b.n	8002930 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1e4      	bne.n	80028dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	223f      	movs	r2, #63	; 0x3f
 8002918:	409a      	lsls	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002944:	4b8e      	ldr	r3, [pc, #568]	; (8002b80 <HAL_DMA_IRQHandler+0x248>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a8e      	ldr	r2, [pc, #568]	; (8002b84 <HAL_DMA_IRQHandler+0x24c>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	0a9b      	lsrs	r3, r3, #10
 8002950:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002956:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002962:	2208      	movs	r2, #8
 8002964:	409a      	lsls	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d01a      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d013      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0204 	bic.w	r2, r2, #4
 800298a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002990:	2208      	movs	r2, #8
 8002992:	409a      	lsls	r2, r3
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	f043 0201 	orr.w	r2, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a8:	2201      	movs	r2, #1
 80029aa:	409a      	lsls	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d012      	beq.n	80029da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00b      	beq.n	80029da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c6:	2201      	movs	r2, #1
 80029c8:	409a      	lsls	r2, r3
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d2:	f043 0202 	orr.w	r2, r3, #2
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029de:	2204      	movs	r2, #4
 80029e0:	409a      	lsls	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4013      	ands	r3, r2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d012      	beq.n	8002a10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00b      	beq.n	8002a10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fc:	2204      	movs	r2, #4
 80029fe:	409a      	lsls	r2, r3
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a08:	f043 0204 	orr.w	r2, r3, #4
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a14:	2210      	movs	r2, #16
 8002a16:	409a      	lsls	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d043      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d03c      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a32:	2210      	movs	r2, #16
 8002a34:	409a      	lsls	r2, r3
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d018      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d108      	bne.n	8002a68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d024      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	4798      	blx	r3
 8002a66:	e01f      	b.n	8002aa8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d01b      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	4798      	blx	r3
 8002a78:	e016      	b.n	8002aa8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d107      	bne.n	8002a98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0208 	bic.w	r2, r2, #8
 8002a96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aac:	2220      	movs	r2, #32
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 808f 	beq.w	8002bd8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 8087 	beq.w	8002bd8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ace:	2220      	movs	r2, #32
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b05      	cmp	r3, #5
 8002ae0:	d136      	bne.n	8002b50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0216 	bic.w	r2, r2, #22
 8002af0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d103      	bne.n	8002b12 <HAL_DMA_IRQHandler+0x1da>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d007      	beq.n	8002b22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0208 	bic.w	r2, r2, #8
 8002b20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b26:	223f      	movs	r2, #63	; 0x3f
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d07e      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	4798      	blx	r3
        }
        return;
 8002b4e:	e079      	b.n	8002c44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d01d      	beq.n	8002b9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10d      	bne.n	8002b88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d031      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	4798      	blx	r3
 8002b7c:	e02c      	b.n	8002bd8 <HAL_DMA_IRQHandler+0x2a0>
 8002b7e:	bf00      	nop
 8002b80:	20000000 	.word	0x20000000
 8002b84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d023      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	4798      	blx	r3
 8002b98:	e01e      	b.n	8002bd8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10f      	bne.n	8002bc8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0210 	bic.w	r2, r2, #16
 8002bb6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d032      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d022      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2205      	movs	r2, #5
 8002bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0201 	bic.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	3301      	adds	r3, #1
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d307      	bcc.n	8002c20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f2      	bne.n	8002c04 <HAL_DMA_IRQHandler+0x2cc>
 8002c1e:	e000      	b.n	8002c22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	4798      	blx	r3
 8002c42:	e000      	b.n	8002c46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c44:	bf00      	nop
    }
  }
}
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
 8002c58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b40      	cmp	r3, #64	; 0x40
 8002c78:	d108      	bne.n	8002c8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c8a:	e007      	b.n	8002c9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	60da      	str	r2, [r3, #12]
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	3b10      	subs	r3, #16
 8002cb8:	4a14      	ldr	r2, [pc, #80]	; (8002d0c <DMA_CalcBaseAndBitshift+0x64>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	091b      	lsrs	r3, r3, #4
 8002cc0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cc2:	4a13      	ldr	r2, [pc, #76]	; (8002d10 <DMA_CalcBaseAndBitshift+0x68>)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d909      	bls.n	8002cea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cde:	f023 0303 	bic.w	r3, r3, #3
 8002ce2:	1d1a      	adds	r2, r3, #4
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	659a      	str	r2, [r3, #88]	; 0x58
 8002ce8:	e007      	b.n	8002cfa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cf2:	f023 0303 	bic.w	r3, r3, #3
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	aaaaaaab 	.word	0xaaaaaaab
 8002d10:	0800f2c0 	.word	0x0800f2c0

08002d14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d11f      	bne.n	8002d6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d856      	bhi.n	8002de2 <DMA_CheckFifoParam+0xce>
 8002d34:	a201      	add	r2, pc, #4	; (adr r2, 8002d3c <DMA_CheckFifoParam+0x28>)
 8002d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3a:	bf00      	nop
 8002d3c:	08002d4d 	.word	0x08002d4d
 8002d40:	08002d5f 	.word	0x08002d5f
 8002d44:	08002d4d 	.word	0x08002d4d
 8002d48:	08002de3 	.word	0x08002de3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d046      	beq.n	8002de6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d5c:	e043      	b.n	8002de6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d66:	d140      	bne.n	8002dea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d6c:	e03d      	b.n	8002dea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d76:	d121      	bne.n	8002dbc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d837      	bhi.n	8002dee <DMA_CheckFifoParam+0xda>
 8002d7e:	a201      	add	r2, pc, #4	; (adr r2, 8002d84 <DMA_CheckFifoParam+0x70>)
 8002d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d84:	08002d95 	.word	0x08002d95
 8002d88:	08002d9b 	.word	0x08002d9b
 8002d8c:	08002d95 	.word	0x08002d95
 8002d90:	08002dad 	.word	0x08002dad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
      break;
 8002d98:	e030      	b.n	8002dfc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d025      	beq.n	8002df2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002daa:	e022      	b.n	8002df2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002db4:	d11f      	bne.n	8002df6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dba:	e01c      	b.n	8002df6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d903      	bls.n	8002dca <DMA_CheckFifoParam+0xb6>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d003      	beq.n	8002dd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002dc8:	e018      	b.n	8002dfc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8002dce:	e015      	b.n	8002dfc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00e      	beq.n	8002dfa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	73fb      	strb	r3, [r7, #15]
      break;
 8002de0:	e00b      	b.n	8002dfa <DMA_CheckFifoParam+0xe6>
      break;
 8002de2:	bf00      	nop
 8002de4:	e00a      	b.n	8002dfc <DMA_CheckFifoParam+0xe8>
      break;
 8002de6:	bf00      	nop
 8002de8:	e008      	b.n	8002dfc <DMA_CheckFifoParam+0xe8>
      break;
 8002dea:	bf00      	nop
 8002dec:	e006      	b.n	8002dfc <DMA_CheckFifoParam+0xe8>
      break;
 8002dee:	bf00      	nop
 8002df0:	e004      	b.n	8002dfc <DMA_CheckFifoParam+0xe8>
      break;
 8002df2:	bf00      	nop
 8002df4:	e002      	b.n	8002dfc <DMA_CheckFifoParam+0xe8>
      break;   
 8002df6:	bf00      	nop
 8002df8:	e000      	b.n	8002dfc <DMA_CheckFifoParam+0xe8>
      break;
 8002dfa:	bf00      	nop
    }
  } 
  
  return status; 
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop

08002e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b089      	sub	sp, #36	; 0x24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e22:	2300      	movs	r3, #0
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	e159      	b.n	80030dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e28:	2201      	movs	r2, #1
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	f040 8148 	bne.w	80030d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d005      	beq.n	8002e5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d130      	bne.n	8002ec0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	2203      	movs	r2, #3
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e94:	2201      	movs	r2, #1
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	091b      	lsrs	r3, r3, #4
 8002eaa:	f003 0201 	and.w	r2, r3, #1
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d017      	beq.n	8002efc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d123      	bne.n	8002f50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	08da      	lsrs	r2, r3, #3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3208      	adds	r2, #8
 8002f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	220f      	movs	r2, #15
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	08da      	lsrs	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3208      	adds	r2, #8
 8002f4a:	69b9      	ldr	r1, [r7, #24]
 8002f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	2203      	movs	r2, #3
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f003 0203 	and.w	r2, r3, #3
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 80a2 	beq.w	80030d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	4b57      	ldr	r3, [pc, #348]	; (80030f4 <HAL_GPIO_Init+0x2e8>)
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	4a56      	ldr	r2, [pc, #344]	; (80030f4 <HAL_GPIO_Init+0x2e8>)
 8002f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fa2:	4b54      	ldr	r3, [pc, #336]	; (80030f4 <HAL_GPIO_Init+0x2e8>)
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fae:	4a52      	ldr	r2, [pc, #328]	; (80030f8 <HAL_GPIO_Init+0x2ec>)
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	089b      	lsrs	r3, r3, #2
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	220f      	movs	r2, #15
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a49      	ldr	r2, [pc, #292]	; (80030fc <HAL_GPIO_Init+0x2f0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d019      	beq.n	800300e <HAL_GPIO_Init+0x202>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a48      	ldr	r2, [pc, #288]	; (8003100 <HAL_GPIO_Init+0x2f4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d013      	beq.n	800300a <HAL_GPIO_Init+0x1fe>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a47      	ldr	r2, [pc, #284]	; (8003104 <HAL_GPIO_Init+0x2f8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d00d      	beq.n	8003006 <HAL_GPIO_Init+0x1fa>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a46      	ldr	r2, [pc, #280]	; (8003108 <HAL_GPIO_Init+0x2fc>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d007      	beq.n	8003002 <HAL_GPIO_Init+0x1f6>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a45      	ldr	r2, [pc, #276]	; (800310c <HAL_GPIO_Init+0x300>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d101      	bne.n	8002ffe <HAL_GPIO_Init+0x1f2>
 8002ffa:	2304      	movs	r3, #4
 8002ffc:	e008      	b.n	8003010 <HAL_GPIO_Init+0x204>
 8002ffe:	2307      	movs	r3, #7
 8003000:	e006      	b.n	8003010 <HAL_GPIO_Init+0x204>
 8003002:	2303      	movs	r3, #3
 8003004:	e004      	b.n	8003010 <HAL_GPIO_Init+0x204>
 8003006:	2302      	movs	r3, #2
 8003008:	e002      	b.n	8003010 <HAL_GPIO_Init+0x204>
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <HAL_GPIO_Init+0x204>
 800300e:	2300      	movs	r3, #0
 8003010:	69fa      	ldr	r2, [r7, #28]
 8003012:	f002 0203 	and.w	r2, r2, #3
 8003016:	0092      	lsls	r2, r2, #2
 8003018:	4093      	lsls	r3, r2
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4313      	orrs	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003020:	4935      	ldr	r1, [pc, #212]	; (80030f8 <HAL_GPIO_Init+0x2ec>)
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	089b      	lsrs	r3, r3, #2
 8003026:	3302      	adds	r3, #2
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800302e:	4b38      	ldr	r3, [pc, #224]	; (8003110 <HAL_GPIO_Init+0x304>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	43db      	mvns	r3, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4013      	ands	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003052:	4a2f      	ldr	r2, [pc, #188]	; (8003110 <HAL_GPIO_Init+0x304>)
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003058:	4b2d      	ldr	r3, [pc, #180]	; (8003110 <HAL_GPIO_Init+0x304>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800307c:	4a24      	ldr	r2, [pc, #144]	; (8003110 <HAL_GPIO_Init+0x304>)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003082:	4b23      	ldr	r3, [pc, #140]	; (8003110 <HAL_GPIO_Init+0x304>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	43db      	mvns	r3, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4013      	ands	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030a6:	4a1a      	ldr	r2, [pc, #104]	; (8003110 <HAL_GPIO_Init+0x304>)
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030ac:	4b18      	ldr	r3, [pc, #96]	; (8003110 <HAL_GPIO_Init+0x304>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4013      	ands	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030d0:	4a0f      	ldr	r2, [pc, #60]	; (8003110 <HAL_GPIO_Init+0x304>)
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	3301      	adds	r3, #1
 80030da:	61fb      	str	r3, [r7, #28]
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	2b0f      	cmp	r3, #15
 80030e0:	f67f aea2 	bls.w	8002e28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop
 80030e8:	3724      	adds	r7, #36	; 0x24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40013800 	.word	0x40013800
 80030fc:	40020000 	.word	0x40020000
 8003100:	40020400 	.word	0x40020400
 8003104:	40020800 	.word	0x40020800
 8003108:	40020c00 	.word	0x40020c00
 800310c:	40021000 	.word	0x40021000
 8003110:	40013c00 	.word	0x40013c00

08003114 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800311e:	2300      	movs	r3, #0
 8003120:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003126:	2300      	movs	r3, #0
 8003128:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	e0bb      	b.n	80032a8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003130:	2201      	movs	r2, #1
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4013      	ands	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	429a      	cmp	r2, r3
 8003148:	f040 80ab 	bne.w	80032a2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800314c:	4a5c      	ldr	r2, [pc, #368]	; (80032c0 <HAL_GPIO_DeInit+0x1ac>)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	089b      	lsrs	r3, r3, #2
 8003152:	3302      	adds	r3, #2
 8003154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003158:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	220f      	movs	r2, #15
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	4013      	ands	r3, r2
 800316c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a54      	ldr	r2, [pc, #336]	; (80032c4 <HAL_GPIO_DeInit+0x1b0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d019      	beq.n	80031aa <HAL_GPIO_DeInit+0x96>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a53      	ldr	r2, [pc, #332]	; (80032c8 <HAL_GPIO_DeInit+0x1b4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d013      	beq.n	80031a6 <HAL_GPIO_DeInit+0x92>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a52      	ldr	r2, [pc, #328]	; (80032cc <HAL_GPIO_DeInit+0x1b8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00d      	beq.n	80031a2 <HAL_GPIO_DeInit+0x8e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a51      	ldr	r2, [pc, #324]	; (80032d0 <HAL_GPIO_DeInit+0x1bc>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d007      	beq.n	800319e <HAL_GPIO_DeInit+0x8a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a50      	ldr	r2, [pc, #320]	; (80032d4 <HAL_GPIO_DeInit+0x1c0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d101      	bne.n	800319a <HAL_GPIO_DeInit+0x86>
 8003196:	2304      	movs	r3, #4
 8003198:	e008      	b.n	80031ac <HAL_GPIO_DeInit+0x98>
 800319a:	2307      	movs	r3, #7
 800319c:	e006      	b.n	80031ac <HAL_GPIO_DeInit+0x98>
 800319e:	2303      	movs	r3, #3
 80031a0:	e004      	b.n	80031ac <HAL_GPIO_DeInit+0x98>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e002      	b.n	80031ac <HAL_GPIO_DeInit+0x98>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <HAL_GPIO_DeInit+0x98>
 80031aa:	2300      	movs	r3, #0
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	f002 0203 	and.w	r2, r2, #3
 80031b2:	0092      	lsls	r2, r2, #2
 80031b4:	4093      	lsls	r3, r2
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d132      	bne.n	8003222 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80031bc:	4b46      	ldr	r3, [pc, #280]	; (80032d8 <HAL_GPIO_DeInit+0x1c4>)
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	43db      	mvns	r3, r3
 80031c4:	4944      	ldr	r1, [pc, #272]	; (80032d8 <HAL_GPIO_DeInit+0x1c4>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80031ca:	4b43      	ldr	r3, [pc, #268]	; (80032d8 <HAL_GPIO_DeInit+0x1c4>)
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	43db      	mvns	r3, r3
 80031d2:	4941      	ldr	r1, [pc, #260]	; (80032d8 <HAL_GPIO_DeInit+0x1c4>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80031d8:	4b3f      	ldr	r3, [pc, #252]	; (80032d8 <HAL_GPIO_DeInit+0x1c4>)
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	43db      	mvns	r3, r3
 80031e0:	493d      	ldr	r1, [pc, #244]	; (80032d8 <HAL_GPIO_DeInit+0x1c4>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80031e6:	4b3c      	ldr	r3, [pc, #240]	; (80032d8 <HAL_GPIO_DeInit+0x1c4>)
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	493a      	ldr	r1, [pc, #232]	; (80032d8 <HAL_GPIO_DeInit+0x1c4>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	220f      	movs	r2, #15
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003204:	4a2e      	ldr	r2, [pc, #184]	; (80032c0 <HAL_GPIO_DeInit+0x1ac>)
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	089b      	lsrs	r3, r3, #2
 800320a:	3302      	adds	r3, #2
 800320c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	43da      	mvns	r2, r3
 8003214:	482a      	ldr	r0, [pc, #168]	; (80032c0 <HAL_GPIO_DeInit+0x1ac>)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	089b      	lsrs	r3, r3, #2
 800321a:	400a      	ands	r2, r1
 800321c:	3302      	adds	r3, #2
 800321e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	2103      	movs	r1, #3
 800322c:	fa01 f303 	lsl.w	r3, r1, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	401a      	ands	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	08da      	lsrs	r2, r3, #3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3208      	adds	r2, #8
 8003240:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	220f      	movs	r2, #15
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43db      	mvns	r3, r3
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	08d2      	lsrs	r2, r2, #3
 8003258:	4019      	ands	r1, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3208      	adds	r2, #8
 800325e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	2103      	movs	r1, #3
 800326c:	fa01 f303 	lsl.w	r3, r1, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	401a      	ands	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	2101      	movs	r1, #1
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	fa01 f303 	lsl.w	r3, r1, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	401a      	ands	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	2103      	movs	r1, #3
 8003296:	fa01 f303 	lsl.w	r3, r1, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	401a      	ands	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	3301      	adds	r3, #1
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b0f      	cmp	r3, #15
 80032ac:	f67f af40 	bls.w	8003130 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80032b0:	bf00      	nop
 80032b2:	bf00      	nop
 80032b4:	371c      	adds	r7, #28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40013800 	.word	0x40013800
 80032c4:	40020000 	.word	0x40020000
 80032c8:	40020400 	.word	0x40020400
 80032cc:	40020800 	.word	0x40020800
 80032d0:	40020c00 	.word	0x40020c00
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40013c00 	.word	0x40013c00

080032dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	887b      	ldrh	r3, [r7, #2]
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032f4:	2301      	movs	r3, #1
 80032f6:	73fb      	strb	r3, [r7, #15]
 80032f8:	e001      	b.n	80032fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032fa:	2300      	movs	r3, #0
 80032fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	807b      	strh	r3, [r7, #2]
 8003318:	4613      	mov	r3, r2
 800331a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800331c:	787b      	ldrb	r3, [r7, #1]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003322:	887a      	ldrh	r2, [r7, #2]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003328:	e003      	b.n	8003332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800332a:	887b      	ldrh	r3, [r7, #2]
 800332c:	041a      	lsls	r2, r3, #16
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	619a      	str	r2, [r3, #24]
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
	...

08003340 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800334a:	4b08      	ldr	r3, [pc, #32]	; (800336c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d006      	beq.n	8003364 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003356:	4a05      	ldr	r2, [pc, #20]	; (800336c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003358:	88fb      	ldrh	r3, [r7, #6]
 800335a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800335c:	88fb      	ldrh	r3, [r7, #6]
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f806 	bl	8003370 <HAL_GPIO_EXTI_Callback>
  }
}
 8003364:	bf00      	nop
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40013c00 	.word	0x40013c00

08003370 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003386:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003388:	b08f      	sub	sp, #60	; 0x3c
 800338a:	af0a      	add	r7, sp, #40	; 0x28
 800338c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e054      	b.n	8003442 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f00b fb12 	bl	800e9dc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2203      	movs	r2, #3
 80033bc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d102      	bne.n	80033d2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f004 fe80 	bl	80080dc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	603b      	str	r3, [r7, #0]
 80033e2:	687e      	ldr	r6, [r7, #4]
 80033e4:	466d      	mov	r5, sp
 80033e6:	f106 0410 	add.w	r4, r6, #16
 80033ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80033fa:	1d33      	adds	r3, r6, #4
 80033fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033fe:	6838      	ldr	r0, [r7, #0]
 8003400:	f004 fdfa 	bl	8007ff8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2101      	movs	r1, #1
 800340a:	4618      	mov	r0, r3
 800340c:	f004 fe77 	bl	80080fe <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	603b      	str	r3, [r7, #0]
 8003416:	687e      	ldr	r6, [r7, #4]
 8003418:	466d      	mov	r5, sp
 800341a:	f106 0410 	add.w	r4, r6, #16
 800341e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003426:	e894 0003 	ldmia.w	r4, {r0, r1}
 800342a:	e885 0003 	stmia.w	r5, {r0, r1}
 800342e:	1d33      	adds	r3, r6, #4
 8003430:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003432:	6838      	ldr	r0, [r7, #0]
 8003434:	f005 f800 	bl	8008438 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800344a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800344a:	b590      	push	{r4, r7, lr}
 800344c:	b089      	sub	sp, #36	; 0x24
 800344e:	af04      	add	r7, sp, #16
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	4608      	mov	r0, r1
 8003454:	4611      	mov	r1, r2
 8003456:	461a      	mov	r2, r3
 8003458:	4603      	mov	r3, r0
 800345a:	70fb      	strb	r3, [r7, #3]
 800345c:	460b      	mov	r3, r1
 800345e:	70bb      	strb	r3, [r7, #2]
 8003460:	4613      	mov	r3, r2
 8003462:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800346a:	2b01      	cmp	r3, #1
 800346c:	d101      	bne.n	8003472 <HAL_HCD_HC_Init+0x28>
 800346e:	2302      	movs	r3, #2
 8003470:	e076      	b.n	8003560 <HAL_HCD_HC_Init+0x116>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800347a:	78fb      	ldrb	r3, [r7, #3]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	212c      	movs	r1, #44	; 0x2c
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	4413      	add	r3, r2
 8003486:	333d      	adds	r3, #61	; 0x3d
 8003488:	2200      	movs	r2, #0
 800348a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800348c:	78fb      	ldrb	r3, [r7, #3]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	212c      	movs	r1, #44	; 0x2c
 8003492:	fb01 f303 	mul.w	r3, r1, r3
 8003496:	4413      	add	r3, r2
 8003498:	3338      	adds	r3, #56	; 0x38
 800349a:	787a      	ldrb	r2, [r7, #1]
 800349c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	212c      	movs	r1, #44	; 0x2c
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	4413      	add	r3, r2
 80034aa:	3340      	adds	r3, #64	; 0x40
 80034ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80034ae:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80034b0:	78fb      	ldrb	r3, [r7, #3]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	212c      	movs	r1, #44	; 0x2c
 80034b6:	fb01 f303 	mul.w	r3, r1, r3
 80034ba:	4413      	add	r3, r2
 80034bc:	3339      	adds	r3, #57	; 0x39
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80034c2:	78fb      	ldrb	r3, [r7, #3]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	212c      	movs	r1, #44	; 0x2c
 80034c8:	fb01 f303 	mul.w	r3, r1, r3
 80034cc:	4413      	add	r3, r2
 80034ce:	333f      	adds	r3, #63	; 0x3f
 80034d0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80034d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80034d6:	78fb      	ldrb	r3, [r7, #3]
 80034d8:	78ba      	ldrb	r2, [r7, #2]
 80034da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034de:	b2d0      	uxtb	r0, r2
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	212c      	movs	r1, #44	; 0x2c
 80034e4:	fb01 f303 	mul.w	r3, r1, r3
 80034e8:	4413      	add	r3, r2
 80034ea:	333a      	adds	r3, #58	; 0x3a
 80034ec:	4602      	mov	r2, r0
 80034ee:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80034f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	da09      	bge.n	800350c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80034f8:	78fb      	ldrb	r3, [r7, #3]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	212c      	movs	r1, #44	; 0x2c
 80034fe:	fb01 f303 	mul.w	r3, r1, r3
 8003502:	4413      	add	r3, r2
 8003504:	333b      	adds	r3, #59	; 0x3b
 8003506:	2201      	movs	r2, #1
 8003508:	701a      	strb	r2, [r3, #0]
 800350a:	e008      	b.n	800351e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	212c      	movs	r1, #44	; 0x2c
 8003512:	fb01 f303 	mul.w	r3, r1, r3
 8003516:	4413      	add	r3, r2
 8003518:	333b      	adds	r3, #59	; 0x3b
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800351e:	78fb      	ldrb	r3, [r7, #3]
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	212c      	movs	r1, #44	; 0x2c
 8003524:	fb01 f303 	mul.w	r3, r1, r3
 8003528:	4413      	add	r3, r2
 800352a:	333c      	adds	r3, #60	; 0x3c
 800352c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003530:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	787c      	ldrb	r4, [r7, #1]
 8003538:	78ba      	ldrb	r2, [r7, #2]
 800353a:	78f9      	ldrb	r1, [r7, #3]
 800353c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800353e:	9302      	str	r3, [sp, #8]
 8003540:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	f897 3020 	ldrb.w	r3, [r7, #32]
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	4623      	mov	r3, r4
 800354e:	f005 f8f9 	bl	8008744 <USB_HC_Init>
 8003552:	4603      	mov	r3, r0
 8003554:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800355e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	bd90      	pop	{r4, r7, pc}

08003568 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_HCD_HC_Halt+0x1e>
 8003582:	2302      	movs	r3, #2
 8003584:	e00f      	b.n	80035a6 <HAL_HCD_HC_Halt+0x3e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	78fa      	ldrb	r2, [r7, #3]
 8003594:	4611      	mov	r1, r2
 8003596:	4618      	mov	r0, r3
 8003598:	f005 fb49 	bl	8008c2e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	4608      	mov	r0, r1
 80035ba:	4611      	mov	r1, r2
 80035bc:	461a      	mov	r2, r3
 80035be:	4603      	mov	r3, r0
 80035c0:	70fb      	strb	r3, [r7, #3]
 80035c2:	460b      	mov	r3, r1
 80035c4:	70bb      	strb	r3, [r7, #2]
 80035c6:	4613      	mov	r3, r2
 80035c8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80035ca:	78fb      	ldrb	r3, [r7, #3]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	212c      	movs	r1, #44	; 0x2c
 80035d0:	fb01 f303 	mul.w	r3, r1, r3
 80035d4:	4413      	add	r3, r2
 80035d6:	333b      	adds	r3, #59	; 0x3b
 80035d8:	78ba      	ldrb	r2, [r7, #2]
 80035da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	212c      	movs	r1, #44	; 0x2c
 80035e2:	fb01 f303 	mul.w	r3, r1, r3
 80035e6:	4413      	add	r3, r2
 80035e8:	333f      	adds	r3, #63	; 0x3f
 80035ea:	787a      	ldrb	r2, [r7, #1]
 80035ec:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80035ee:	7c3b      	ldrb	r3, [r7, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d112      	bne.n	800361a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	212c      	movs	r1, #44	; 0x2c
 80035fa:	fb01 f303 	mul.w	r3, r1, r3
 80035fe:	4413      	add	r3, r2
 8003600:	3342      	adds	r3, #66	; 0x42
 8003602:	2203      	movs	r2, #3
 8003604:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003606:	78fb      	ldrb	r3, [r7, #3]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	212c      	movs	r1, #44	; 0x2c
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	4413      	add	r3, r2
 8003612:	333d      	adds	r3, #61	; 0x3d
 8003614:	7f3a      	ldrb	r2, [r7, #28]
 8003616:	701a      	strb	r2, [r3, #0]
 8003618:	e008      	b.n	800362c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800361a:	78fb      	ldrb	r3, [r7, #3]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	212c      	movs	r1, #44	; 0x2c
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	4413      	add	r3, r2
 8003626:	3342      	adds	r3, #66	; 0x42
 8003628:	2202      	movs	r2, #2
 800362a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800362c:	787b      	ldrb	r3, [r7, #1]
 800362e:	2b03      	cmp	r3, #3
 8003630:	f200 80c6 	bhi.w	80037c0 <HAL_HCD_HC_SubmitRequest+0x210>
 8003634:	a201      	add	r2, pc, #4	; (adr r2, 800363c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363a:	bf00      	nop
 800363c:	0800364d 	.word	0x0800364d
 8003640:	080037ad 	.word	0x080037ad
 8003644:	080036b1 	.word	0x080036b1
 8003648:	0800372f 	.word	0x0800372f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800364c:	7c3b      	ldrb	r3, [r7, #16]
 800364e:	2b01      	cmp	r3, #1
 8003650:	f040 80b8 	bne.w	80037c4 <HAL_HCD_HC_SubmitRequest+0x214>
 8003654:	78bb      	ldrb	r3, [r7, #2]
 8003656:	2b00      	cmp	r3, #0
 8003658:	f040 80b4 	bne.w	80037c4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800365c:	8b3b      	ldrh	r3, [r7, #24]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d108      	bne.n	8003674 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003662:	78fb      	ldrb	r3, [r7, #3]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	212c      	movs	r1, #44	; 0x2c
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	4413      	add	r3, r2
 800366e:	3355      	adds	r3, #85	; 0x55
 8003670:	2201      	movs	r2, #1
 8003672:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003674:	78fb      	ldrb	r3, [r7, #3]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	212c      	movs	r1, #44	; 0x2c
 800367a:	fb01 f303 	mul.w	r3, r1, r3
 800367e:	4413      	add	r3, r2
 8003680:	3355      	adds	r3, #85	; 0x55
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d109      	bne.n	800369c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	212c      	movs	r1, #44	; 0x2c
 800368e:	fb01 f303 	mul.w	r3, r1, r3
 8003692:	4413      	add	r3, r2
 8003694:	3342      	adds	r3, #66	; 0x42
 8003696:	2200      	movs	r2, #0
 8003698:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800369a:	e093      	b.n	80037c4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	212c      	movs	r1, #44	; 0x2c
 80036a2:	fb01 f303 	mul.w	r3, r1, r3
 80036a6:	4413      	add	r3, r2
 80036a8:	3342      	adds	r3, #66	; 0x42
 80036aa:	2202      	movs	r2, #2
 80036ac:	701a      	strb	r2, [r3, #0]
      break;
 80036ae:	e089      	b.n	80037c4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80036b0:	78bb      	ldrb	r3, [r7, #2]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d11d      	bne.n	80036f2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	212c      	movs	r1, #44	; 0x2c
 80036bc:	fb01 f303 	mul.w	r3, r1, r3
 80036c0:	4413      	add	r3, r2
 80036c2:	3355      	adds	r3, #85	; 0x55
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d109      	bne.n	80036de <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036ca:	78fb      	ldrb	r3, [r7, #3]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	212c      	movs	r1, #44	; 0x2c
 80036d0:	fb01 f303 	mul.w	r3, r1, r3
 80036d4:	4413      	add	r3, r2
 80036d6:	3342      	adds	r3, #66	; 0x42
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80036dc:	e073      	b.n	80037c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036de:	78fb      	ldrb	r3, [r7, #3]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	212c      	movs	r1, #44	; 0x2c
 80036e4:	fb01 f303 	mul.w	r3, r1, r3
 80036e8:	4413      	add	r3, r2
 80036ea:	3342      	adds	r3, #66	; 0x42
 80036ec:	2202      	movs	r2, #2
 80036ee:	701a      	strb	r2, [r3, #0]
      break;
 80036f0:	e069      	b.n	80037c6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	212c      	movs	r1, #44	; 0x2c
 80036f8:	fb01 f303 	mul.w	r3, r1, r3
 80036fc:	4413      	add	r3, r2
 80036fe:	3354      	adds	r3, #84	; 0x54
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d109      	bne.n	800371a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003706:	78fb      	ldrb	r3, [r7, #3]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	212c      	movs	r1, #44	; 0x2c
 800370c:	fb01 f303 	mul.w	r3, r1, r3
 8003710:	4413      	add	r3, r2
 8003712:	3342      	adds	r3, #66	; 0x42
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]
      break;
 8003718:	e055      	b.n	80037c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800371a:	78fb      	ldrb	r3, [r7, #3]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	212c      	movs	r1, #44	; 0x2c
 8003720:	fb01 f303 	mul.w	r3, r1, r3
 8003724:	4413      	add	r3, r2
 8003726:	3342      	adds	r3, #66	; 0x42
 8003728:	2202      	movs	r2, #2
 800372a:	701a      	strb	r2, [r3, #0]
      break;
 800372c:	e04b      	b.n	80037c6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800372e:	78bb      	ldrb	r3, [r7, #2]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d11d      	bne.n	8003770 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003734:	78fb      	ldrb	r3, [r7, #3]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	212c      	movs	r1, #44	; 0x2c
 800373a:	fb01 f303 	mul.w	r3, r1, r3
 800373e:	4413      	add	r3, r2
 8003740:	3355      	adds	r3, #85	; 0x55
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d109      	bne.n	800375c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	212c      	movs	r1, #44	; 0x2c
 800374e:	fb01 f303 	mul.w	r3, r1, r3
 8003752:	4413      	add	r3, r2
 8003754:	3342      	adds	r3, #66	; 0x42
 8003756:	2200      	movs	r2, #0
 8003758:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800375a:	e034      	b.n	80037c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800375c:	78fb      	ldrb	r3, [r7, #3]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	212c      	movs	r1, #44	; 0x2c
 8003762:	fb01 f303 	mul.w	r3, r1, r3
 8003766:	4413      	add	r3, r2
 8003768:	3342      	adds	r3, #66	; 0x42
 800376a:	2202      	movs	r2, #2
 800376c:	701a      	strb	r2, [r3, #0]
      break;
 800376e:	e02a      	b.n	80037c6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	212c      	movs	r1, #44	; 0x2c
 8003776:	fb01 f303 	mul.w	r3, r1, r3
 800377a:	4413      	add	r3, r2
 800377c:	3354      	adds	r3, #84	; 0x54
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d109      	bne.n	8003798 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	212c      	movs	r1, #44	; 0x2c
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	4413      	add	r3, r2
 8003790:	3342      	adds	r3, #66	; 0x42
 8003792:	2200      	movs	r2, #0
 8003794:	701a      	strb	r2, [r3, #0]
      break;
 8003796:	e016      	b.n	80037c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	212c      	movs	r1, #44	; 0x2c
 800379e:	fb01 f303 	mul.w	r3, r1, r3
 80037a2:	4413      	add	r3, r2
 80037a4:	3342      	adds	r3, #66	; 0x42
 80037a6:	2202      	movs	r2, #2
 80037a8:	701a      	strb	r2, [r3, #0]
      break;
 80037aa:	e00c      	b.n	80037c6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037ac:	78fb      	ldrb	r3, [r7, #3]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	212c      	movs	r1, #44	; 0x2c
 80037b2:	fb01 f303 	mul.w	r3, r1, r3
 80037b6:	4413      	add	r3, r2
 80037b8:	3342      	adds	r3, #66	; 0x42
 80037ba:	2200      	movs	r2, #0
 80037bc:	701a      	strb	r2, [r3, #0]
      break;
 80037be:	e002      	b.n	80037c6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80037c0:	bf00      	nop
 80037c2:	e000      	b.n	80037c6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80037c4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80037c6:	78fb      	ldrb	r3, [r7, #3]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	212c      	movs	r1, #44	; 0x2c
 80037cc:	fb01 f303 	mul.w	r3, r1, r3
 80037d0:	4413      	add	r3, r2
 80037d2:	3344      	adds	r3, #68	; 0x44
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	8b3a      	ldrh	r2, [r7, #24]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	202c      	movs	r0, #44	; 0x2c
 80037e0:	fb00 f303 	mul.w	r3, r0, r3
 80037e4:	440b      	add	r3, r1
 80037e6:	334c      	adds	r3, #76	; 0x4c
 80037e8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	212c      	movs	r1, #44	; 0x2c
 80037f0:	fb01 f303 	mul.w	r3, r1, r3
 80037f4:	4413      	add	r3, r2
 80037f6:	3360      	adds	r3, #96	; 0x60
 80037f8:	2200      	movs	r2, #0
 80037fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80037fc:	78fb      	ldrb	r3, [r7, #3]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	212c      	movs	r1, #44	; 0x2c
 8003802:	fb01 f303 	mul.w	r3, r1, r3
 8003806:	4413      	add	r3, r2
 8003808:	3350      	adds	r3, #80	; 0x50
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800380e:	78fb      	ldrb	r3, [r7, #3]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	212c      	movs	r1, #44	; 0x2c
 8003814:	fb01 f303 	mul.w	r3, r1, r3
 8003818:	4413      	add	r3, r2
 800381a:	3339      	adds	r3, #57	; 0x39
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	212c      	movs	r1, #44	; 0x2c
 8003826:	fb01 f303 	mul.w	r3, r1, r3
 800382a:	4413      	add	r3, r2
 800382c:	3361      	adds	r3, #97	; 0x61
 800382e:	2200      	movs	r2, #0
 8003830:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	78fb      	ldrb	r3, [r7, #3]
 8003838:	222c      	movs	r2, #44	; 0x2c
 800383a:	fb02 f303 	mul.w	r3, r2, r3
 800383e:	3338      	adds	r3, #56	; 0x38
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	18d1      	adds	r1, r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	b2db      	uxtb	r3, r3
 800384a:	461a      	mov	r2, r3
 800384c:	f005 f89c 	bl	8008988 <USB_HC_StartXfer>
 8003850:	4603      	mov	r3, r0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop

0800385c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f004 fd9d 	bl	80083b2 <USB_GetMode>
 8003878:	4603      	mov	r3, r0
 800387a:	2b01      	cmp	r3, #1
 800387c:	f040 80f6 	bne.w	8003a6c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f004 fd81 	bl	800838c <USB_ReadInterrupts>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80ec 	beq.w	8003a6a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f004 fd78 	bl	800838c <USB_ReadInterrupts>
 800389c:	4603      	mov	r3, r0
 800389e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038a6:	d104      	bne.n	80038b2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80038b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f004 fd68 	bl	800838c <USB_ReadInterrupts>
 80038bc:	4603      	mov	r3, r0
 80038be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038c6:	d104      	bne.n	80038d2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80038d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f004 fd58 	bl	800838c <USB_ReadInterrupts>
 80038dc:	4603      	mov	r3, r0
 80038de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038e6:	d104      	bne.n	80038f2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80038f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f004 fd48 	bl	800838c <USB_ReadInterrupts>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b02      	cmp	r3, #2
 8003904:	d103      	bne.n	800390e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2202      	movs	r2, #2
 800390c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f004 fd3a 	bl	800838c <USB_ReadInterrupts>
 8003918:	4603      	mov	r3, r0
 800391a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800391e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003922:	d11c      	bne.n	800395e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800392c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10f      	bne.n	800395e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800393e:	2110      	movs	r1, #16
 8003940:	6938      	ldr	r0, [r7, #16]
 8003942:	f004 fc29 	bl	8008198 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003946:	6938      	ldr	r0, [r7, #16]
 8003948:	f004 fc5a 	bl	8008200 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2101      	movs	r1, #1
 8003952:	4618      	mov	r0, r3
 8003954:	f004 fe30 	bl	80085b8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f00b f8bd 	bl	800ead8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f004 fd12 	bl	800838c <USB_ReadInterrupts>
 8003968:	4603      	mov	r3, r0
 800396a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800396e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003972:	d102      	bne.n	800397a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f001 f89e 	bl	8004ab6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f004 fd04 	bl	800838c <USB_ReadInterrupts>
 8003984:	4603      	mov	r3, r0
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b08      	cmp	r3, #8
 800398c:	d106      	bne.n	800399c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f00b f886 	bl	800eaa0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2208      	movs	r2, #8
 800399a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f004 fcf3 	bl	800838c <USB_ReadInterrupts>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	2b10      	cmp	r3, #16
 80039ae:	d101      	bne.n	80039b4 <HAL_HCD_IRQHandler+0x158>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <HAL_HCD_IRQHandler+0x15a>
 80039b4:	2300      	movs	r3, #0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d012      	beq.n	80039e0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699a      	ldr	r2, [r3, #24]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0210 	bic.w	r2, r2, #16
 80039c8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 ffa1 	bl	8004912 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699a      	ldr	r2, [r3, #24]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f042 0210 	orr.w	r2, r2, #16
 80039de:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f004 fcd1 	bl	800838c <USB_ReadInterrupts>
 80039ea:	4603      	mov	r3, r0
 80039ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039f4:	d13a      	bne.n	8003a6c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f005 f906 	bl	8008c0c <USB_HC_ReadInterrupt>
 8003a00:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	e025      	b.n	8003a54 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d018      	beq.n	8003a4e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a32:	d106      	bne.n	8003a42 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	4619      	mov	r1, r3
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f8ab 	bl	8003b96 <HCD_HC_IN_IRQHandler>
 8003a40:	e005      	b.n	8003a4e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	4619      	mov	r1, r3
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 fbf9 	bl	8004240 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	3301      	adds	r3, #1
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d3d4      	bcc.n	8003a08 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a66:	615a      	str	r2, [r3, #20]
 8003a68:	e000      	b.n	8003a6c <HAL_HCD_IRQHandler+0x210>
      return;
 8003a6a:	bf00      	nop
    }
  }
}
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_HCD_Start+0x16>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e013      	b.n	8003ab0 <HAL_HCD_Start+0x3e>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2101      	movs	r1, #1
 8003a96:	4618      	mov	r0, r3
 8003a98:	f004 fdf2 	bl	8008680 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f004 fb0a 	bl	80080ba <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_HCD_Stop+0x16>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e00d      	b.n	8003aea <HAL_HCD_Stop+0x32>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f005 f9e0 	bl	8008ea0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f004 fd94 	bl	800862c <USB_ResetPort>
 8003b04:	4603      	mov	r3, r0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	460b      	mov	r3, r1
 8003b18:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003b1a:	78fb      	ldrb	r3, [r7, #3]
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	212c      	movs	r1, #44	; 0x2c
 8003b20:	fb01 f303 	mul.w	r3, r1, r3
 8003b24:	4413      	add	r3, r2
 8003b26:	3360      	adds	r3, #96	; 0x60
 8003b28:	781b      	ldrb	r3, [r3, #0]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003b42:	78fb      	ldrb	r3, [r7, #3]
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	212c      	movs	r1, #44	; 0x2c
 8003b48:	fb01 f303 	mul.w	r3, r1, r3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3350      	adds	r3, #80	; 0x50
 8003b50:	681b      	ldr	r3, [r3, #0]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f004 fdd8 	bl	8008720 <USB_GetCurrentFrame>
 8003b70:	4603      	mov	r3, r0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f004 fdb3 	bl	80086f2 <USB_GetHostSpeed>
 8003b8c:	4603      	mov	r3, r0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b086      	sub	sp, #24
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d11a      	bne.n	8003bfc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	212c      	movs	r1, #44	; 0x2c
 8003bde:	fb01 f303 	mul.w	r3, r1, r3
 8003be2:	4413      	add	r3, r2
 8003be4:	3361      	adds	r3, #97	; 0x61
 8003be6:	2206      	movs	r2, #6
 8003be8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f005 f81a 	bl	8008c2e <USB_HC_Halt>
 8003bfa:	e0af      	b.n	8003d5c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c12:	d11b      	bne.n	8003c4c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c20:	461a      	mov	r2, r3
 8003c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	212c      	movs	r1, #44	; 0x2c
 8003c2e:	fb01 f303 	mul.w	r3, r1, r3
 8003c32:	4413      	add	r3, r2
 8003c34:	3361      	adds	r3, #97	; 0x61
 8003c36:	2207      	movs	r2, #7
 8003c38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	4611      	mov	r1, r2
 8003c44:	4618      	mov	r0, r3
 8003c46:	f004 fff2 	bl	8008c2e <USB_HC_Halt>
 8003c4a:	e087      	b.n	8003d5c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d109      	bne.n	8003c76 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c6e:	461a      	mov	r2, r3
 8003c70:	2320      	movs	r3, #32
 8003c72:	6093      	str	r3, [r2, #8]
 8003c74:	e072      	b.n	8003d5c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d11a      	bne.n	8003cc2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c98:	461a      	mov	r2, r3
 8003c9a:	2308      	movs	r3, #8
 8003c9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	212c      	movs	r1, #44	; 0x2c
 8003ca4:	fb01 f303 	mul.w	r3, r1, r3
 8003ca8:	4413      	add	r3, r2
 8003caa:	3361      	adds	r3, #97	; 0x61
 8003cac:	2205      	movs	r2, #5
 8003cae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	4611      	mov	r1, r2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f004 ffb7 	bl	8008c2e <USB_HC_Halt>
 8003cc0:	e04c      	b.n	8003d5c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd8:	d11b      	bne.n	8003d12 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	212c      	movs	r1, #44	; 0x2c
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3361      	adds	r3, #97	; 0x61
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	4611      	mov	r1, r2
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f004 ff8f 	bl	8008c2e <USB_HC_Halt>
 8003d10:	e024      	b.n	8003d5c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d24:	2b80      	cmp	r3, #128	; 0x80
 8003d26:	d119      	bne.n	8003d5c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	015a      	lsls	r2, r3, #5
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d34:	461a      	mov	r2, r3
 8003d36:	2380      	movs	r3, #128	; 0x80
 8003d38:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	212c      	movs	r1, #44	; 0x2c
 8003d40:	fb01 f303 	mul.w	r3, r1, r3
 8003d44:	4413      	add	r3, r2
 8003d46:	3361      	adds	r3, #97	; 0x61
 8003d48:	2206      	movs	r2, #6
 8003d4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	4611      	mov	r1, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f004 ff69 	bl	8008c2e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d72:	d112      	bne.n	8003d9a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f004 ff55 	bl	8008c2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d90:	461a      	mov	r2, r3
 8003d92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d96:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003d98:	e24e      	b.n	8004238 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	015a      	lsls	r2, r3, #5
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	f040 80df 	bne.w	8003f70 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d019      	beq.n	8003dee <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	212c      	movs	r1, #44	; 0x2c
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	3348      	adds	r3, #72	; 0x48
 8003dc8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	0159      	lsls	r1, r3, #5
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	440b      	add	r3, r1
 8003dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003ddc:	1ad2      	subs	r2, r2, r3
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	202c      	movs	r0, #44	; 0x2c
 8003de4:	fb00 f303 	mul.w	r3, r0, r3
 8003de8:	440b      	add	r3, r1
 8003dea:	3350      	adds	r3, #80	; 0x50
 8003dec:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	212c      	movs	r1, #44	; 0x2c
 8003df4:	fb01 f303 	mul.w	r3, r1, r3
 8003df8:	4413      	add	r3, r2
 8003dfa:	3361      	adds	r3, #97	; 0x61
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	212c      	movs	r1, #44	; 0x2c
 8003e06:	fb01 f303 	mul.w	r3, r1, r3
 8003e0a:	4413      	add	r3, r2
 8003e0c:	335c      	adds	r3, #92	; 0x5c
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2301      	movs	r3, #1
 8003e22:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	212c      	movs	r1, #44	; 0x2c
 8003e2a:	fb01 f303 	mul.w	r3, r1, r3
 8003e2e:	4413      	add	r3, r2
 8003e30:	333f      	adds	r3, #63	; 0x3f
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d009      	beq.n	8003e4c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	212c      	movs	r1, #44	; 0x2c
 8003e3e:	fb01 f303 	mul.w	r3, r1, r3
 8003e42:	4413      	add	r3, r2
 8003e44:	333f      	adds	r3, #63	; 0x3f
 8003e46:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d111      	bne.n	8003e70 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	4611      	mov	r1, r2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f004 fee9 	bl	8008c2e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e68:	461a      	mov	r2, r3
 8003e6a:	2310      	movs	r3, #16
 8003e6c:	6093      	str	r3, [r2, #8]
 8003e6e:	e03a      	b.n	8003ee6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	212c      	movs	r1, #44	; 0x2c
 8003e76:	fb01 f303 	mul.w	r3, r1, r3
 8003e7a:	4413      	add	r3, r2
 8003e7c:	333f      	adds	r3, #63	; 0x3f
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d009      	beq.n	8003e98 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	212c      	movs	r1, #44	; 0x2c
 8003e8a:	fb01 f303 	mul.w	r3, r1, r3
 8003e8e:	4413      	add	r3, r2
 8003e90:	333f      	adds	r3, #63	; 0x3f
 8003e92:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d126      	bne.n	8003ee6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	0151      	lsls	r1, r2, #5
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	440a      	add	r2, r1
 8003eae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003eb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003eb6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	212c      	movs	r1, #44	; 0x2c
 8003ebe:	fb01 f303 	mul.w	r3, r1, r3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3360      	adds	r3, #96	; 0x60
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	b2d9      	uxtb	r1, r3
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	202c      	movs	r0, #44	; 0x2c
 8003ed4:	fb00 f303 	mul.w	r3, r0, r3
 8003ed8:	4413      	add	r3, r2
 8003eda:	3360      	adds	r3, #96	; 0x60
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f00a fe07 	bl	800eaf4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d12b      	bne.n	8003f46 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	212c      	movs	r1, #44	; 0x2c
 8003ef4:	fb01 f303 	mul.w	r3, r1, r3
 8003ef8:	4413      	add	r3, r2
 8003efa:	3348      	adds	r3, #72	; 0x48
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	202c      	movs	r0, #44	; 0x2c
 8003f04:	fb00 f202 	mul.w	r2, r0, r2
 8003f08:	440a      	add	r2, r1
 8003f0a:	3240      	adds	r2, #64	; 0x40
 8003f0c:	8812      	ldrh	r2, [r2, #0]
 8003f0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 818e 	beq.w	8004238 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	212c      	movs	r1, #44	; 0x2c
 8003f22:	fb01 f303 	mul.w	r3, r1, r3
 8003f26:	4413      	add	r3, r2
 8003f28:	3354      	adds	r3, #84	; 0x54
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	f083 0301 	eor.w	r3, r3, #1
 8003f30:	b2d8      	uxtb	r0, r3
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	212c      	movs	r1, #44	; 0x2c
 8003f38:	fb01 f303 	mul.w	r3, r1, r3
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3354      	adds	r3, #84	; 0x54
 8003f40:	4602      	mov	r2, r0
 8003f42:	701a      	strb	r2, [r3, #0]
}
 8003f44:	e178      	b.n	8004238 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	212c      	movs	r1, #44	; 0x2c
 8003f4c:	fb01 f303 	mul.w	r3, r1, r3
 8003f50:	4413      	add	r3, r2
 8003f52:	3354      	adds	r3, #84	; 0x54
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	f083 0301 	eor.w	r3, r3, #1
 8003f5a:	b2d8      	uxtb	r0, r3
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	212c      	movs	r1, #44	; 0x2c
 8003f62:	fb01 f303 	mul.w	r3, r1, r3
 8003f66:	4413      	add	r3, r2
 8003f68:	3354      	adds	r3, #84	; 0x54
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	701a      	strb	r2, [r3, #0]
}
 8003f6e:	e163      	b.n	8004238 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	f040 80f6 	bne.w	8004174 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	212c      	movs	r1, #44	; 0x2c
 8003f8e:	fb01 f303 	mul.w	r3, r1, r3
 8003f92:	4413      	add	r3, r2
 8003f94:	3361      	adds	r3, #97	; 0x61
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d109      	bne.n	8003fb0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	212c      	movs	r1, #44	; 0x2c
 8003fa2:	fb01 f303 	mul.w	r3, r1, r3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	3360      	adds	r3, #96	; 0x60
 8003faa:	2201      	movs	r2, #1
 8003fac:	701a      	strb	r2, [r3, #0]
 8003fae:	e0c9      	b.n	8004144 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	212c      	movs	r1, #44	; 0x2c
 8003fb6:	fb01 f303 	mul.w	r3, r1, r3
 8003fba:	4413      	add	r3, r2
 8003fbc:	3361      	adds	r3, #97	; 0x61
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b05      	cmp	r3, #5
 8003fc2:	d109      	bne.n	8003fd8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	212c      	movs	r1, #44	; 0x2c
 8003fca:	fb01 f303 	mul.w	r3, r1, r3
 8003fce:	4413      	add	r3, r2
 8003fd0:	3360      	adds	r3, #96	; 0x60
 8003fd2:	2205      	movs	r2, #5
 8003fd4:	701a      	strb	r2, [r3, #0]
 8003fd6:	e0b5      	b.n	8004144 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	212c      	movs	r1, #44	; 0x2c
 8003fde:	fb01 f303 	mul.w	r3, r1, r3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3361      	adds	r3, #97	; 0x61
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b06      	cmp	r3, #6
 8003fea:	d009      	beq.n	8004000 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	212c      	movs	r1, #44	; 0x2c
 8003ff2:	fb01 f303 	mul.w	r3, r1, r3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3361      	adds	r3, #97	; 0x61
 8003ffa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d150      	bne.n	80040a2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	212c      	movs	r1, #44	; 0x2c
 8004006:	fb01 f303 	mul.w	r3, r1, r3
 800400a:	4413      	add	r3, r2
 800400c:	335c      	adds	r3, #92	; 0x5c
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	202c      	movs	r0, #44	; 0x2c
 8004018:	fb00 f303 	mul.w	r3, r0, r3
 800401c:	440b      	add	r3, r1
 800401e:	335c      	adds	r3, #92	; 0x5c
 8004020:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	212c      	movs	r1, #44	; 0x2c
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	4413      	add	r3, r2
 800402e:	335c      	adds	r3, #92	; 0x5c
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d912      	bls.n	800405c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	212c      	movs	r1, #44	; 0x2c
 800403c:	fb01 f303 	mul.w	r3, r1, r3
 8004040:	4413      	add	r3, r2
 8004042:	335c      	adds	r3, #92	; 0x5c
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	212c      	movs	r1, #44	; 0x2c
 800404e:	fb01 f303 	mul.w	r3, r1, r3
 8004052:	4413      	add	r3, r2
 8004054:	3360      	adds	r3, #96	; 0x60
 8004056:	2204      	movs	r2, #4
 8004058:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800405a:	e073      	b.n	8004144 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	212c      	movs	r1, #44	; 0x2c
 8004062:	fb01 f303 	mul.w	r3, r1, r3
 8004066:	4413      	add	r3, r2
 8004068:	3360      	adds	r3, #96	; 0x60
 800406a:	2202      	movs	r2, #2
 800406c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	4413      	add	r3, r2
 8004076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004084:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800408c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	4413      	add	r3, r2
 8004096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800409a:	461a      	mov	r2, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80040a0:	e050      	b.n	8004144 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	212c      	movs	r1, #44	; 0x2c
 80040a8:	fb01 f303 	mul.w	r3, r1, r3
 80040ac:	4413      	add	r3, r2
 80040ae:	3361      	adds	r3, #97	; 0x61
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	d122      	bne.n	80040fc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	212c      	movs	r1, #44	; 0x2c
 80040bc:	fb01 f303 	mul.w	r3, r1, r3
 80040c0:	4413      	add	r3, r2
 80040c2:	3360      	adds	r3, #96	; 0x60
 80040c4:	2202      	movs	r2, #2
 80040c6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040de:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040e6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f4:	461a      	mov	r2, r3
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	e023      	b.n	8004144 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	212c      	movs	r1, #44	; 0x2c
 8004102:	fb01 f303 	mul.w	r3, r1, r3
 8004106:	4413      	add	r3, r2
 8004108:	3361      	adds	r3, #97	; 0x61
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b07      	cmp	r3, #7
 800410e:	d119      	bne.n	8004144 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	212c      	movs	r1, #44	; 0x2c
 8004116:	fb01 f303 	mul.w	r3, r1, r3
 800411a:	4413      	add	r3, r2
 800411c:	335c      	adds	r3, #92	; 0x5c
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	202c      	movs	r0, #44	; 0x2c
 8004128:	fb00 f303 	mul.w	r3, r0, r3
 800412c:	440b      	add	r3, r1
 800412e:	335c      	adds	r3, #92	; 0x5c
 8004130:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	212c      	movs	r1, #44	; 0x2c
 8004138:	fb01 f303 	mul.w	r3, r1, r3
 800413c:	4413      	add	r3, r2
 800413e:	3360      	adds	r3, #96	; 0x60
 8004140:	2204      	movs	r2, #4
 8004142:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4413      	add	r3, r2
 800414c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004150:	461a      	mov	r2, r3
 8004152:	2302      	movs	r3, #2
 8004154:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	b2d9      	uxtb	r1, r3
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	202c      	movs	r0, #44	; 0x2c
 8004160:	fb00 f303 	mul.w	r3, r0, r3
 8004164:	4413      	add	r3, r2
 8004166:	3360      	adds	r3, #96	; 0x60
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f00a fcc1 	bl	800eaf4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004172:	e061      	b.n	8004238 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	4413      	add	r3, r2
 800417c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b10      	cmp	r3, #16
 8004188:	d156      	bne.n	8004238 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	212c      	movs	r1, #44	; 0x2c
 8004190:	fb01 f303 	mul.w	r3, r1, r3
 8004194:	4413      	add	r3, r2
 8004196:	333f      	adds	r3, #63	; 0x3f
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b03      	cmp	r3, #3
 800419c:	d111      	bne.n	80041c2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	212c      	movs	r1, #44	; 0x2c
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	4413      	add	r3, r2
 80041aa:	335c      	adds	r3, #92	; 0x5c
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	4611      	mov	r1, r2
 80041ba:	4618      	mov	r0, r3
 80041bc:	f004 fd37 	bl	8008c2e <USB_HC_Halt>
 80041c0:	e031      	b.n	8004226 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	212c      	movs	r1, #44	; 0x2c
 80041c8:	fb01 f303 	mul.w	r3, r1, r3
 80041cc:	4413      	add	r3, r2
 80041ce:	333f      	adds	r3, #63	; 0x3f
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d009      	beq.n	80041ea <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	212c      	movs	r1, #44	; 0x2c
 80041dc:	fb01 f303 	mul.w	r3, r1, r3
 80041e0:	4413      	add	r3, r2
 80041e2:	333f      	adds	r3, #63	; 0x3f
 80041e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d11d      	bne.n	8004226 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	212c      	movs	r1, #44	; 0x2c
 80041f0:	fb01 f303 	mul.w	r3, r1, r3
 80041f4:	4413      	add	r3, r2
 80041f6:	335c      	adds	r3, #92	; 0x5c
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d110      	bne.n	8004226 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	212c      	movs	r1, #44	; 0x2c
 800420a:	fb01 f303 	mul.w	r3, r1, r3
 800420e:	4413      	add	r3, r2
 8004210:	3361      	adds	r3, #97	; 0x61
 8004212:	2203      	movs	r2, #3
 8004214:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	4611      	mov	r1, r2
 8004220:	4618      	mov	r0, r3
 8004222:	f004 fd04 	bl	8008c2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	4413      	add	r3, r2
 800422e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004232:	461a      	mov	r2, r3
 8004234:	2310      	movs	r3, #16
 8004236:	6093      	str	r3, [r2, #8]
}
 8004238:	bf00      	nop
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b088      	sub	sp, #32
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004256:	78fb      	ldrb	r3, [r7, #3]
 8004258:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	4413      	add	r3, r2
 8004262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b04      	cmp	r3, #4
 800426e:	d11a      	bne.n	80042a6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	4413      	add	r3, r2
 8004278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800427c:	461a      	mov	r2, r3
 800427e:	2304      	movs	r3, #4
 8004280:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	212c      	movs	r1, #44	; 0x2c
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	4413      	add	r3, r2
 800428e:	3361      	adds	r3, #97	; 0x61
 8004290:	2206      	movs	r2, #6
 8004292:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	b2d2      	uxtb	r2, r2
 800429c:	4611      	mov	r1, r2
 800429e:	4618      	mov	r0, r3
 80042a0:	f004 fcc5 	bl	8008c2e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80042a4:	e331      	b.n	800490a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	015a      	lsls	r2, r3, #5
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d12e      	bne.n	800431a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c8:	461a      	mov	r2, r3
 80042ca:	2320      	movs	r3, #32
 80042cc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	212c      	movs	r1, #44	; 0x2c
 80042d4:	fb01 f303 	mul.w	r3, r1, r3
 80042d8:	4413      	add	r3, r2
 80042da:	333d      	adds	r3, #61	; 0x3d
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	f040 8313 	bne.w	800490a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	212c      	movs	r1, #44	; 0x2c
 80042ea:	fb01 f303 	mul.w	r3, r1, r3
 80042ee:	4413      	add	r3, r2
 80042f0:	333d      	adds	r3, #61	; 0x3d
 80042f2:	2200      	movs	r2, #0
 80042f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	212c      	movs	r1, #44	; 0x2c
 80042fc:	fb01 f303 	mul.w	r3, r1, r3
 8004300:	4413      	add	r3, r2
 8004302:	3360      	adds	r3, #96	; 0x60
 8004304:	2202      	movs	r2, #2
 8004306:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	4611      	mov	r1, r2
 8004312:	4618      	mov	r0, r3
 8004314:	f004 fc8b 	bl	8008c2e <USB_HC_Halt>
}
 8004318:	e2f7      	b.n	800490a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	4413      	add	r3, r2
 8004322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800432c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004330:	d112      	bne.n	8004358 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	4413      	add	r3, r2
 800433a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433e:	461a      	mov	r2, r3
 8004340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004344:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	4611      	mov	r1, r2
 8004350:	4618      	mov	r0, r3
 8004352:	f004 fc6c 	bl	8008c2e <USB_HC_Halt>
}
 8004356:	e2d8      	b.n	800490a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	4413      	add	r3, r2
 8004360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b01      	cmp	r3, #1
 800436c:	d140      	bne.n	80043f0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	212c      	movs	r1, #44	; 0x2c
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	4413      	add	r3, r2
 800437a:	335c      	adds	r3, #92	; 0x5c
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	4413      	add	r3, r2
 8004388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004392:	2b40      	cmp	r3, #64	; 0x40
 8004394:	d111      	bne.n	80043ba <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	212c      	movs	r1, #44	; 0x2c
 800439c:	fb01 f303 	mul.w	r3, r1, r3
 80043a0:	4413      	add	r3, r2
 80043a2:	333d      	adds	r3, #61	; 0x3d
 80043a4:	2201      	movs	r2, #1
 80043a6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b4:	461a      	mov	r2, r3
 80043b6:	2340      	movs	r3, #64	; 0x40
 80043b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c6:	461a      	mov	r2, r3
 80043c8:	2301      	movs	r3, #1
 80043ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	212c      	movs	r1, #44	; 0x2c
 80043d2:	fb01 f303 	mul.w	r3, r1, r3
 80043d6:	4413      	add	r3, r2
 80043d8:	3361      	adds	r3, #97	; 0x61
 80043da:	2201      	movs	r2, #1
 80043dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	4611      	mov	r1, r2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f004 fc20 	bl	8008c2e <USB_HC_Halt>
}
 80043ee:	e28c      	b.n	800490a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004402:	2b40      	cmp	r3, #64	; 0x40
 8004404:	d12c      	bne.n	8004460 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	212c      	movs	r1, #44	; 0x2c
 800440c:	fb01 f303 	mul.w	r3, r1, r3
 8004410:	4413      	add	r3, r2
 8004412:	3361      	adds	r3, #97	; 0x61
 8004414:	2204      	movs	r2, #4
 8004416:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	212c      	movs	r1, #44	; 0x2c
 800441e:	fb01 f303 	mul.w	r3, r1, r3
 8004422:	4413      	add	r3, r2
 8004424:	333d      	adds	r3, #61	; 0x3d
 8004426:	2201      	movs	r2, #1
 8004428:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	212c      	movs	r1, #44	; 0x2c
 8004430:	fb01 f303 	mul.w	r3, r1, r3
 8004434:	4413      	add	r3, r2
 8004436:	335c      	adds	r3, #92	; 0x5c
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	4611      	mov	r1, r2
 8004446:	4618      	mov	r0, r3
 8004448:	f004 fbf1 	bl	8008c2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	4413      	add	r3, r2
 8004454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004458:	461a      	mov	r2, r3
 800445a:	2340      	movs	r3, #64	; 0x40
 800445c:	6093      	str	r3, [r2, #8]
}
 800445e:	e254      	b.n	800490a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	4413      	add	r3, r2
 8004468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b08      	cmp	r3, #8
 8004474:	d11a      	bne.n	80044ac <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	015a      	lsls	r2, r3, #5
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	4413      	add	r3, r2
 800447e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004482:	461a      	mov	r2, r3
 8004484:	2308      	movs	r3, #8
 8004486:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	212c      	movs	r1, #44	; 0x2c
 800448e:	fb01 f303 	mul.w	r3, r1, r3
 8004492:	4413      	add	r3, r2
 8004494:	3361      	adds	r3, #97	; 0x61
 8004496:	2205      	movs	r2, #5
 8004498:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	4611      	mov	r1, r2
 80044a4:	4618      	mov	r0, r3
 80044a6:	f004 fbc2 	bl	8008c2e <USB_HC_Halt>
}
 80044aa:	e22e      	b.n	800490a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 0310 	and.w	r3, r3, #16
 80044be:	2b10      	cmp	r3, #16
 80044c0:	d140      	bne.n	8004544 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	212c      	movs	r1, #44	; 0x2c
 80044c8:	fb01 f303 	mul.w	r3, r1, r3
 80044cc:	4413      	add	r3, r2
 80044ce:	335c      	adds	r3, #92	; 0x5c
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	212c      	movs	r1, #44	; 0x2c
 80044da:	fb01 f303 	mul.w	r3, r1, r3
 80044de:	4413      	add	r3, r2
 80044e0:	3361      	adds	r3, #97	; 0x61
 80044e2:	2203      	movs	r2, #3
 80044e4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	212c      	movs	r1, #44	; 0x2c
 80044ec:	fb01 f303 	mul.w	r3, r1, r3
 80044f0:	4413      	add	r3, r2
 80044f2:	333d      	adds	r3, #61	; 0x3d
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d112      	bne.n	8004520 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	212c      	movs	r1, #44	; 0x2c
 8004500:	fb01 f303 	mul.w	r3, r1, r3
 8004504:	4413      	add	r3, r2
 8004506:	333c      	adds	r3, #60	; 0x3c
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d108      	bne.n	8004520 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	212c      	movs	r1, #44	; 0x2c
 8004514:	fb01 f303 	mul.w	r3, r1, r3
 8004518:	4413      	add	r3, r2
 800451a:	333d      	adds	r3, #61	; 0x3d
 800451c:	2201      	movs	r2, #1
 800451e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	4611      	mov	r1, r2
 800452a:	4618      	mov	r0, r3
 800452c:	f004 fb7f 	bl	8008c2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	4413      	add	r3, r2
 8004538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800453c:	461a      	mov	r2, r3
 800453e:	2310      	movs	r3, #16
 8004540:	6093      	str	r3, [r2, #8]
}
 8004542:	e1e2      	b.n	800490a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	4413      	add	r3, r2
 800454c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004556:	2b80      	cmp	r3, #128	; 0x80
 8004558:	d164      	bne.n	8004624 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d111      	bne.n	8004586 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	212c      	movs	r1, #44	; 0x2c
 8004568:	fb01 f303 	mul.w	r3, r1, r3
 800456c:	4413      	add	r3, r2
 800456e:	3361      	adds	r3, #97	; 0x61
 8004570:	2206      	movs	r2, #6
 8004572:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	4611      	mov	r1, r2
 800457e:	4618      	mov	r0, r3
 8004580:	f004 fb55 	bl	8008c2e <USB_HC_Halt>
 8004584:	e044      	b.n	8004610 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	212c      	movs	r1, #44	; 0x2c
 800458c:	fb01 f303 	mul.w	r3, r1, r3
 8004590:	4413      	add	r3, r2
 8004592:	335c      	adds	r3, #92	; 0x5c
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	202c      	movs	r0, #44	; 0x2c
 800459e:	fb00 f303 	mul.w	r3, r0, r3
 80045a2:	440b      	add	r3, r1
 80045a4:	335c      	adds	r3, #92	; 0x5c
 80045a6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	212c      	movs	r1, #44	; 0x2c
 80045ae:	fb01 f303 	mul.w	r3, r1, r3
 80045b2:	4413      	add	r3, r2
 80045b4:	335c      	adds	r3, #92	; 0x5c
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d920      	bls.n	80045fe <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	212c      	movs	r1, #44	; 0x2c
 80045c2:	fb01 f303 	mul.w	r3, r1, r3
 80045c6:	4413      	add	r3, r2
 80045c8:	335c      	adds	r3, #92	; 0x5c
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	212c      	movs	r1, #44	; 0x2c
 80045d4:	fb01 f303 	mul.w	r3, r1, r3
 80045d8:	4413      	add	r3, r2
 80045da:	3360      	adds	r3, #96	; 0x60
 80045dc:	2204      	movs	r2, #4
 80045de:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	b2d9      	uxtb	r1, r3
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	202c      	movs	r0, #44	; 0x2c
 80045ea:	fb00 f303 	mul.w	r3, r0, r3
 80045ee:	4413      	add	r3, r2
 80045f0:	3360      	adds	r3, #96	; 0x60
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f00a fa7c 	bl	800eaf4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80045fc:	e008      	b.n	8004610 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	212c      	movs	r1, #44	; 0x2c
 8004604:	fb01 f303 	mul.w	r3, r1, r3
 8004608:	4413      	add	r3, r2
 800460a:	3360      	adds	r3, #96	; 0x60
 800460c:	2202      	movs	r2, #2
 800460e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	4413      	add	r3, r2
 8004618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461c:	461a      	mov	r2, r3
 800461e:	2380      	movs	r3, #128	; 0x80
 8004620:	6093      	str	r3, [r2, #8]
}
 8004622:	e172      	b.n	800490a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	4413      	add	r3, r2
 800462c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800463a:	d11b      	bne.n	8004674 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	212c      	movs	r1, #44	; 0x2c
 8004642:	fb01 f303 	mul.w	r3, r1, r3
 8004646:	4413      	add	r3, r2
 8004648:	3361      	adds	r3, #97	; 0x61
 800464a:	2208      	movs	r2, #8
 800464c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	4611      	mov	r1, r2
 8004658:	4618      	mov	r0, r3
 800465a:	f004 fae8 	bl	8008c2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	4413      	add	r3, r2
 8004666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800466a:	461a      	mov	r2, r3
 800466c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004670:	6093      	str	r3, [r2, #8]
}
 8004672:	e14a      	b.n	800490a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	4413      	add	r3, r2
 800467c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b02      	cmp	r3, #2
 8004688:	f040 813f 	bne.w	800490a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	212c      	movs	r1, #44	; 0x2c
 8004692:	fb01 f303 	mul.w	r3, r1, r3
 8004696:	4413      	add	r3, r2
 8004698:	3361      	adds	r3, #97	; 0x61
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d17d      	bne.n	800479c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	212c      	movs	r1, #44	; 0x2c
 80046a6:	fb01 f303 	mul.w	r3, r1, r3
 80046aa:	4413      	add	r3, r2
 80046ac:	3360      	adds	r3, #96	; 0x60
 80046ae:	2201      	movs	r2, #1
 80046b0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	212c      	movs	r1, #44	; 0x2c
 80046b8:	fb01 f303 	mul.w	r3, r1, r3
 80046bc:	4413      	add	r3, r2
 80046be:	333f      	adds	r3, #63	; 0x3f
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d00a      	beq.n	80046dc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	212c      	movs	r1, #44	; 0x2c
 80046cc:	fb01 f303 	mul.w	r3, r1, r3
 80046d0:	4413      	add	r3, r2
 80046d2:	333f      	adds	r3, #63	; 0x3f
 80046d4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	f040 8100 	bne.w	80048dc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d113      	bne.n	800470c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	212c      	movs	r1, #44	; 0x2c
 80046ea:	fb01 f303 	mul.w	r3, r1, r3
 80046ee:	4413      	add	r3, r2
 80046f0:	3355      	adds	r3, #85	; 0x55
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	f083 0301 	eor.w	r3, r3, #1
 80046f8:	b2d8      	uxtb	r0, r3
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	212c      	movs	r1, #44	; 0x2c
 8004700:	fb01 f303 	mul.w	r3, r1, r3
 8004704:	4413      	add	r3, r2
 8004706:	3355      	adds	r3, #85	; 0x55
 8004708:	4602      	mov	r2, r0
 800470a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	2b01      	cmp	r3, #1
 8004712:	f040 80e3 	bne.w	80048dc <HCD_HC_OUT_IRQHandler+0x69c>
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	212c      	movs	r1, #44	; 0x2c
 800471c:	fb01 f303 	mul.w	r3, r1, r3
 8004720:	4413      	add	r3, r2
 8004722:	334c      	adds	r3, #76	; 0x4c
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 80d8 	beq.w	80048dc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	212c      	movs	r1, #44	; 0x2c
 8004732:	fb01 f303 	mul.w	r3, r1, r3
 8004736:	4413      	add	r3, r2
 8004738:	334c      	adds	r3, #76	; 0x4c
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6879      	ldr	r1, [r7, #4]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	202c      	movs	r0, #44	; 0x2c
 8004742:	fb00 f202 	mul.w	r2, r0, r2
 8004746:	440a      	add	r2, r1
 8004748:	3240      	adds	r2, #64	; 0x40
 800474a:	8812      	ldrh	r2, [r2, #0]
 800474c:	4413      	add	r3, r2
 800474e:	3b01      	subs	r3, #1
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	202c      	movs	r0, #44	; 0x2c
 8004756:	fb00 f202 	mul.w	r2, r0, r2
 800475a:	440a      	add	r2, r1
 800475c:	3240      	adds	r2, #64	; 0x40
 800475e:	8812      	ldrh	r2, [r2, #0]
 8004760:	fbb3 f3f2 	udiv	r3, r3, r2
 8004764:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 80b5 	beq.w	80048dc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	212c      	movs	r1, #44	; 0x2c
 8004778:	fb01 f303 	mul.w	r3, r1, r3
 800477c:	4413      	add	r3, r2
 800477e:	3355      	adds	r3, #85	; 0x55
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	f083 0301 	eor.w	r3, r3, #1
 8004786:	b2d8      	uxtb	r0, r3
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	212c      	movs	r1, #44	; 0x2c
 800478e:	fb01 f303 	mul.w	r3, r1, r3
 8004792:	4413      	add	r3, r2
 8004794:	3355      	adds	r3, #85	; 0x55
 8004796:	4602      	mov	r2, r0
 8004798:	701a      	strb	r2, [r3, #0]
 800479a:	e09f      	b.n	80048dc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	212c      	movs	r1, #44	; 0x2c
 80047a2:	fb01 f303 	mul.w	r3, r1, r3
 80047a6:	4413      	add	r3, r2
 80047a8:	3361      	adds	r3, #97	; 0x61
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d109      	bne.n	80047c4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	212c      	movs	r1, #44	; 0x2c
 80047b6:	fb01 f303 	mul.w	r3, r1, r3
 80047ba:	4413      	add	r3, r2
 80047bc:	3360      	adds	r3, #96	; 0x60
 80047be:	2202      	movs	r2, #2
 80047c0:	701a      	strb	r2, [r3, #0]
 80047c2:	e08b      	b.n	80048dc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	212c      	movs	r1, #44	; 0x2c
 80047ca:	fb01 f303 	mul.w	r3, r1, r3
 80047ce:	4413      	add	r3, r2
 80047d0:	3361      	adds	r3, #97	; 0x61
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b04      	cmp	r3, #4
 80047d6:	d109      	bne.n	80047ec <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	212c      	movs	r1, #44	; 0x2c
 80047de:	fb01 f303 	mul.w	r3, r1, r3
 80047e2:	4413      	add	r3, r2
 80047e4:	3360      	adds	r3, #96	; 0x60
 80047e6:	2202      	movs	r2, #2
 80047e8:	701a      	strb	r2, [r3, #0]
 80047ea:	e077      	b.n	80048dc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	212c      	movs	r1, #44	; 0x2c
 80047f2:	fb01 f303 	mul.w	r3, r1, r3
 80047f6:	4413      	add	r3, r2
 80047f8:	3361      	adds	r3, #97	; 0x61
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	2b05      	cmp	r3, #5
 80047fe:	d109      	bne.n	8004814 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	212c      	movs	r1, #44	; 0x2c
 8004806:	fb01 f303 	mul.w	r3, r1, r3
 800480a:	4413      	add	r3, r2
 800480c:	3360      	adds	r3, #96	; 0x60
 800480e:	2205      	movs	r2, #5
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	e063      	b.n	80048dc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	212c      	movs	r1, #44	; 0x2c
 800481a:	fb01 f303 	mul.w	r3, r1, r3
 800481e:	4413      	add	r3, r2
 8004820:	3361      	adds	r3, #97	; 0x61
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b06      	cmp	r3, #6
 8004826:	d009      	beq.n	800483c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	212c      	movs	r1, #44	; 0x2c
 800482e:	fb01 f303 	mul.w	r3, r1, r3
 8004832:	4413      	add	r3, r2
 8004834:	3361      	adds	r3, #97	; 0x61
 8004836:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004838:	2b08      	cmp	r3, #8
 800483a:	d14f      	bne.n	80048dc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	212c      	movs	r1, #44	; 0x2c
 8004842:	fb01 f303 	mul.w	r3, r1, r3
 8004846:	4413      	add	r3, r2
 8004848:	335c      	adds	r3, #92	; 0x5c
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	202c      	movs	r0, #44	; 0x2c
 8004854:	fb00 f303 	mul.w	r3, r0, r3
 8004858:	440b      	add	r3, r1
 800485a:	335c      	adds	r3, #92	; 0x5c
 800485c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	212c      	movs	r1, #44	; 0x2c
 8004864:	fb01 f303 	mul.w	r3, r1, r3
 8004868:	4413      	add	r3, r2
 800486a:	335c      	adds	r3, #92	; 0x5c
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d912      	bls.n	8004898 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	212c      	movs	r1, #44	; 0x2c
 8004878:	fb01 f303 	mul.w	r3, r1, r3
 800487c:	4413      	add	r3, r2
 800487e:	335c      	adds	r3, #92	; 0x5c
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	212c      	movs	r1, #44	; 0x2c
 800488a:	fb01 f303 	mul.w	r3, r1, r3
 800488e:	4413      	add	r3, r2
 8004890:	3360      	adds	r3, #96	; 0x60
 8004892:	2204      	movs	r2, #4
 8004894:	701a      	strb	r2, [r3, #0]
 8004896:	e021      	b.n	80048dc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	212c      	movs	r1, #44	; 0x2c
 800489e:	fb01 f303 	mul.w	r3, r1, r3
 80048a2:	4413      	add	r3, r2
 80048a4:	3360      	adds	r3, #96	; 0x60
 80048a6:	2202      	movs	r2, #2
 80048a8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048c0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048c8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d6:	461a      	mov	r2, r3
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e8:	461a      	mov	r2, r3
 80048ea:	2302      	movs	r3, #2
 80048ec:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	b2d9      	uxtb	r1, r3
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	202c      	movs	r0, #44	; 0x2c
 80048f8:	fb00 f303 	mul.w	r3, r0, r3
 80048fc:	4413      	add	r3, r2
 80048fe:	3360      	adds	r3, #96	; 0x60
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	461a      	mov	r2, r3
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f00a f8f5 	bl	800eaf4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800490a:	bf00      	nop
 800490c:	3720      	adds	r7, #32
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b08a      	sub	sp, #40	; 0x28
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	0c5b      	lsrs	r3, r3, #17
 8004938:	f003 030f 	and.w	r3, r3, #15
 800493c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	091b      	lsrs	r3, r3, #4
 8004942:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004946:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d004      	beq.n	8004958 <HCD_RXQLVL_IRQHandler+0x46>
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b05      	cmp	r3, #5
 8004952:	f000 80a9 	beq.w	8004aa8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004956:	e0aa      	b.n	8004aae <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 80a6 	beq.w	8004aac <HCD_RXQLVL_IRQHandler+0x19a>
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	212c      	movs	r1, #44	; 0x2c
 8004966:	fb01 f303 	mul.w	r3, r1, r3
 800496a:	4413      	add	r3, r2
 800496c:	3344      	adds	r3, #68	; 0x44
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 809b 	beq.w	8004aac <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	212c      	movs	r1, #44	; 0x2c
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	4413      	add	r3, r2
 8004982:	3350      	adds	r3, #80	; 0x50
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	441a      	add	r2, r3
 800498a:	6879      	ldr	r1, [r7, #4]
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	202c      	movs	r0, #44	; 0x2c
 8004990:	fb00 f303 	mul.w	r3, r0, r3
 8004994:	440b      	add	r3, r1
 8004996:	334c      	adds	r3, #76	; 0x4c
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d87a      	bhi.n	8004a94 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6818      	ldr	r0, [r3, #0]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	212c      	movs	r1, #44	; 0x2c
 80049a8:	fb01 f303 	mul.w	r3, r1, r3
 80049ac:	4413      	add	r3, r2
 80049ae:	3344      	adds	r3, #68	; 0x44
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	b292      	uxth	r2, r2
 80049b6:	4619      	mov	r1, r3
 80049b8:	f003 fc90 	bl	80082dc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	212c      	movs	r1, #44	; 0x2c
 80049c2:	fb01 f303 	mul.w	r3, r1, r3
 80049c6:	4413      	add	r3, r2
 80049c8:	3344      	adds	r3, #68	; 0x44
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	441a      	add	r2, r3
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	202c      	movs	r0, #44	; 0x2c
 80049d6:	fb00 f303 	mul.w	r3, r0, r3
 80049da:	440b      	add	r3, r1
 80049dc:	3344      	adds	r3, #68	; 0x44
 80049de:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	212c      	movs	r1, #44	; 0x2c
 80049e6:	fb01 f303 	mul.w	r3, r1, r3
 80049ea:	4413      	add	r3, r2
 80049ec:	3350      	adds	r3, #80	; 0x50
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	441a      	add	r2, r3
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	202c      	movs	r0, #44	; 0x2c
 80049fa:	fb00 f303 	mul.w	r3, r0, r3
 80049fe:	440b      	add	r3, r1
 8004a00:	3350      	adds	r3, #80	; 0x50
 8004a02:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	0cdb      	lsrs	r3, r3, #19
 8004a14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a18:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	212c      	movs	r1, #44	; 0x2c
 8004a20:	fb01 f303 	mul.w	r3, r1, r3
 8004a24:	4413      	add	r3, r2
 8004a26:	3340      	adds	r3, #64	; 0x40
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d13c      	bne.n	8004aac <HCD_RXQLVL_IRQHandler+0x19a>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d039      	beq.n	8004aac <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a4e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a56:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a64:	461a      	mov	r2, r3
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	212c      	movs	r1, #44	; 0x2c
 8004a70:	fb01 f303 	mul.w	r3, r1, r3
 8004a74:	4413      	add	r3, r2
 8004a76:	3354      	adds	r3, #84	; 0x54
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	f083 0301 	eor.w	r3, r3, #1
 8004a7e:	b2d8      	uxtb	r0, r3
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	212c      	movs	r1, #44	; 0x2c
 8004a86:	fb01 f303 	mul.w	r3, r1, r3
 8004a8a:	4413      	add	r3, r2
 8004a8c:	3354      	adds	r3, #84	; 0x54
 8004a8e:	4602      	mov	r2, r0
 8004a90:	701a      	strb	r2, [r3, #0]
      break;
 8004a92:	e00b      	b.n	8004aac <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	212c      	movs	r1, #44	; 0x2c
 8004a9a:	fb01 f303 	mul.w	r3, r1, r3
 8004a9e:	4413      	add	r3, r2
 8004aa0:	3360      	adds	r3, #96	; 0x60
 8004aa2:	2204      	movs	r2, #4
 8004aa4:	701a      	strb	r2, [r3, #0]
      break;
 8004aa6:	e001      	b.n	8004aac <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004aa8:	bf00      	nop
 8004aaa:	e000      	b.n	8004aae <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004aac:	bf00      	nop
  }
}
 8004aae:	bf00      	nop
 8004ab0:	3728      	adds	r7, #40	; 0x28
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b086      	sub	sp, #24
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004ae2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d10b      	bne.n	8004b06 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d102      	bne.n	8004afe <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f009 ffdf 	bl	800eabc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f043 0302 	orr.w	r3, r3, #2
 8004b04:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d132      	bne.n	8004b76 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f043 0308 	orr.w	r3, r3, #8
 8004b16:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d126      	bne.n	8004b70 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d113      	bne.n	8004b52 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004b30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b34:	d106      	bne.n	8004b44 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2102      	movs	r1, #2
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f003 fd3b 	bl	80085b8 <USB_InitFSLSPClkSel>
 8004b42:	e011      	b.n	8004b68 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2101      	movs	r1, #1
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f003 fd34 	bl	80085b8 <USB_InitFSLSPClkSel>
 8004b50:	e00a      	b.n	8004b68 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d106      	bne.n	8004b68 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b60:	461a      	mov	r2, r3
 8004b62:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004b66:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f009 ffd1 	bl	800eb10 <HAL_HCD_PortEnabled_Callback>
 8004b6e:	e002      	b.n	8004b76 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f009 ffdb 	bl	800eb2c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b20      	cmp	r3, #32
 8004b7e:	d103      	bne.n	8004b88 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f043 0320 	orr.w	r3, r3, #32
 8004b86:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b8e:	461a      	mov	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	6013      	str	r3, [r2, #0]
}
 8004b94:	bf00      	nop
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e12b      	b.n	8004e06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fc fbba 	bl	800133c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2224      	movs	r2, #36	; 0x24
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0201 	bic.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c00:	f003 f854 	bl	8007cac <HAL_RCC_GetPCLK1Freq>
 8004c04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	4a81      	ldr	r2, [pc, #516]	; (8004e10 <HAL_I2C_Init+0x274>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d807      	bhi.n	8004c20 <HAL_I2C_Init+0x84>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4a80      	ldr	r2, [pc, #512]	; (8004e14 <HAL_I2C_Init+0x278>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	bf94      	ite	ls
 8004c18:	2301      	movls	r3, #1
 8004c1a:	2300      	movhi	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	e006      	b.n	8004c2e <HAL_I2C_Init+0x92>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4a7d      	ldr	r2, [pc, #500]	; (8004e18 <HAL_I2C_Init+0x27c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	bf94      	ite	ls
 8004c28:	2301      	movls	r3, #1
 8004c2a:	2300      	movhi	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e0e7      	b.n	8004e06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4a78      	ldr	r2, [pc, #480]	; (8004e1c <HAL_I2C_Init+0x280>)
 8004c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3e:	0c9b      	lsrs	r3, r3, #18
 8004c40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	4a6a      	ldr	r2, [pc, #424]	; (8004e10 <HAL_I2C_Init+0x274>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d802      	bhi.n	8004c70 <HAL_I2C_Init+0xd4>
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	e009      	b.n	8004c84 <HAL_I2C_Init+0xe8>
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c76:	fb02 f303 	mul.w	r3, r2, r3
 8004c7a:	4a69      	ldr	r2, [pc, #420]	; (8004e20 <HAL_I2C_Init+0x284>)
 8004c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c80:	099b      	lsrs	r3, r3, #6
 8004c82:	3301      	adds	r3, #1
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	430b      	orrs	r3, r1
 8004c8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	495c      	ldr	r1, [pc, #368]	; (8004e10 <HAL_I2C_Init+0x274>)
 8004ca0:	428b      	cmp	r3, r1
 8004ca2:	d819      	bhi.n	8004cd8 <HAL_I2C_Init+0x13c>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	1e59      	subs	r1, r3, #1
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cb2:	1c59      	adds	r1, r3, #1
 8004cb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004cb8:	400b      	ands	r3, r1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <HAL_I2C_Init+0x138>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	1e59      	subs	r1, r3, #1
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ccc:	3301      	adds	r3, #1
 8004cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd2:	e051      	b.n	8004d78 <HAL_I2C_Init+0x1dc>
 8004cd4:	2304      	movs	r3, #4
 8004cd6:	e04f      	b.n	8004d78 <HAL_I2C_Init+0x1dc>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d111      	bne.n	8004d04 <HAL_I2C_Init+0x168>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	1e58      	subs	r0, r3, #1
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6859      	ldr	r1, [r3, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	440b      	add	r3, r1
 8004cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bf0c      	ite	eq
 8004cfc:	2301      	moveq	r3, #1
 8004cfe:	2300      	movne	r3, #0
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	e012      	b.n	8004d2a <HAL_I2C_Init+0x18e>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	1e58      	subs	r0, r3, #1
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6859      	ldr	r1, [r3, #4]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	440b      	add	r3, r1
 8004d12:	0099      	lsls	r1, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	bf0c      	ite	eq
 8004d24:	2301      	moveq	r3, #1
 8004d26:	2300      	movne	r3, #0
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <HAL_I2C_Init+0x196>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e022      	b.n	8004d78 <HAL_I2C_Init+0x1dc>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10e      	bne.n	8004d58 <HAL_I2C_Init+0x1bc>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	1e58      	subs	r0, r3, #1
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6859      	ldr	r1, [r3, #4]
 8004d42:	460b      	mov	r3, r1
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	440b      	add	r3, r1
 8004d48:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d56:	e00f      	b.n	8004d78 <HAL_I2C_Init+0x1dc>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	1e58      	subs	r0, r3, #1
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6859      	ldr	r1, [r3, #4]
 8004d60:	460b      	mov	r3, r1
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	0099      	lsls	r1, r3, #2
 8004d68:	440b      	add	r3, r1
 8004d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d6e:	3301      	adds	r3, #1
 8004d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d78:	6879      	ldr	r1, [r7, #4]
 8004d7a:	6809      	ldr	r1, [r1, #0]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69da      	ldr	r2, [r3, #28]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004da6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6911      	ldr	r1, [r2, #16]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	68d2      	ldr	r2, [r2, #12]
 8004db2:	4311      	orrs	r1, r2
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6812      	ldr	r2, [r2, #0]
 8004db8:	430b      	orrs	r3, r1
 8004dba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695a      	ldr	r2, [r3, #20]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	000186a0 	.word	0x000186a0
 8004e14:	001e847f 	.word	0x001e847f
 8004e18:	003d08ff 	.word	0x003d08ff
 8004e1c:	431bde83 	.word	0x431bde83
 8004e20:	10624dd3 	.word	0x10624dd3

08004e24 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e021      	b.n	8004e7a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2224      	movs	r2, #36	; 0x24
 8004e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0201 	bic.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fc fabc 	bl	80013cc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
	...

08004e84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af02      	add	r7, sp, #8
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	607a      	str	r2, [r7, #4]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	460b      	mov	r3, r1
 8004e92:	817b      	strh	r3, [r7, #10]
 8004e94:	4613      	mov	r3, r2
 8004e96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e98:	f7fd fa96 	bl	80023c8 <HAL_GetTick>
 8004e9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b20      	cmp	r3, #32
 8004ea8:	f040 80e0 	bne.w	800506c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	2319      	movs	r3, #25
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	4970      	ldr	r1, [pc, #448]	; (8005078 <HAL_I2C_Master_Transmit+0x1f4>)
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f001 f904 	bl	80060c4 <I2C_WaitOnFlagUntilTimeout>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	e0d3      	b.n	800506e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_I2C_Master_Transmit+0x50>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e0cc      	b.n	800506e <HAL_I2C_Master_Transmit+0x1ea>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d007      	beq.n	8004efa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f042 0201 	orr.w	r2, r2, #1
 8004ef8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2221      	movs	r2, #33	; 0x21
 8004f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2210      	movs	r2, #16
 8004f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	893a      	ldrh	r2, [r7, #8]
 8004f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4a50      	ldr	r2, [pc, #320]	; (800507c <HAL_I2C_Master_Transmit+0x1f8>)
 8004f3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f3c:	8979      	ldrh	r1, [r7, #10]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	6a3a      	ldr	r2, [r7, #32]
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 fdf0 	bl	8005b28 <I2C_MasterRequestWrite>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e08d      	b.n	800506e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f52:	2300      	movs	r3, #0
 8004f54:	613b      	str	r3, [r7, #16]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004f68:	e066      	b.n	8005038 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	6a39      	ldr	r1, [r7, #32]
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f001 f97e 	bl	8006270 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00d      	beq.n	8004f96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d107      	bne.n	8004f92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e06b      	b.n	800506e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	781a      	ldrb	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d11b      	bne.n	800500c <HAL_I2C_Master_Transmit+0x188>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d017      	beq.n	800500c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	781a      	ldrb	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005004:	3b01      	subs	r3, #1
 8005006:	b29a      	uxth	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	6a39      	ldr	r1, [r7, #32]
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f001 f96e 	bl	80062f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00d      	beq.n	8005038 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	2b04      	cmp	r3, #4
 8005022:	d107      	bne.n	8005034 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005032:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e01a      	b.n	800506e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800503c:	2b00      	cmp	r3, #0
 800503e:	d194      	bne.n	8004f6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800504e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005068:	2300      	movs	r3, #0
 800506a:	e000      	b.n	800506e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800506c:	2302      	movs	r3, #2
  }
}
 800506e:	4618      	mov	r0, r3
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	00100002 	.word	0x00100002
 800507c:	ffff0000 	.word	0xffff0000

08005080 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08c      	sub	sp, #48	; 0x30
 8005084:	af02      	add	r7, sp, #8
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	607a      	str	r2, [r7, #4]
 800508a:	461a      	mov	r2, r3
 800508c:	460b      	mov	r3, r1
 800508e:	817b      	strh	r3, [r7, #10]
 8005090:	4613      	mov	r3, r2
 8005092:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005094:	f7fd f998 	bl	80023c8 <HAL_GetTick>
 8005098:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b20      	cmp	r3, #32
 80050a4:	f040 820b 	bne.w	80054be <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	2319      	movs	r3, #25
 80050ae:	2201      	movs	r2, #1
 80050b0:	497c      	ldr	r1, [pc, #496]	; (80052a4 <HAL_I2C_Master_Receive+0x224>)
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f001 f806 	bl	80060c4 <I2C_WaitOnFlagUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80050be:	2302      	movs	r3, #2
 80050c0:	e1fe      	b.n	80054c0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_I2C_Master_Receive+0x50>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e1f7      	b.n	80054c0 <HAL_I2C_Master_Receive+0x440>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d007      	beq.n	80050f6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0201 	orr.w	r2, r2, #1
 80050f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005104:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2222      	movs	r2, #34	; 0x22
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2210      	movs	r2, #16
 8005112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	893a      	ldrh	r2, [r7, #8]
 8005126:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512c:	b29a      	uxth	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4a5c      	ldr	r2, [pc, #368]	; (80052a8 <HAL_I2C_Master_Receive+0x228>)
 8005136:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005138:	8979      	ldrh	r1, [r7, #10]
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 fd74 	bl	8005c2c <I2C_MasterRequestRead>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e1b8      	b.n	80054c0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005152:	2b00      	cmp	r3, #0
 8005154:	d113      	bne.n	800517e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005156:	2300      	movs	r3, #0
 8005158:	623b      	str	r3, [r7, #32]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	623b      	str	r3, [r7, #32]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	623b      	str	r3, [r7, #32]
 800516a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	e18c      	b.n	8005498 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005182:	2b01      	cmp	r3, #1
 8005184:	d11b      	bne.n	80051be <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005194:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005196:	2300      	movs	r3, #0
 8005198:	61fb      	str	r3, [r7, #28]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	61fb      	str	r3, [r7, #28]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	61fb      	str	r3, [r7, #28]
 80051aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	e16c      	b.n	8005498 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d11b      	bne.n	80051fe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051e6:	2300      	movs	r3, #0
 80051e8:	61bb      	str	r3, [r7, #24]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	61bb      	str	r3, [r7, #24]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	61bb      	str	r3, [r7, #24]
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	e14c      	b.n	8005498 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800520c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800520e:	2300      	movs	r3, #0
 8005210:	617b      	str	r3, [r7, #20]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005224:	e138      	b.n	8005498 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800522a:	2b03      	cmp	r3, #3
 800522c:	f200 80f1 	bhi.w	8005412 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005234:	2b01      	cmp	r3, #1
 8005236:	d123      	bne.n	8005280 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f001 f899 	bl	8006374 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e139      	b.n	80054c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	691a      	ldr	r2, [r3, #16]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800527e:	e10b      	b.n	8005498 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005284:	2b02      	cmp	r3, #2
 8005286:	d14e      	bne.n	8005326 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528e:	2200      	movs	r2, #0
 8005290:	4906      	ldr	r1, [pc, #24]	; (80052ac <HAL_I2C_Master_Receive+0x22c>)
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 ff16 	bl	80060c4 <I2C_WaitOnFlagUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d008      	beq.n	80052b0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e10e      	b.n	80054c0 <HAL_I2C_Master_Receive+0x440>
 80052a2:	bf00      	nop
 80052a4:	00100002 	.word	0x00100002
 80052a8:	ffff0000 	.word	0xffff0000
 80052ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	b2d2      	uxtb	r2, r2
 80052fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531a:	b29b      	uxth	r3, r3
 800531c:	3b01      	subs	r3, #1
 800531e:	b29a      	uxth	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005324:	e0b8      	b.n	8005498 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	2200      	movs	r2, #0
 800532e:	4966      	ldr	r1, [pc, #408]	; (80054c8 <HAL_I2C_Master_Receive+0x448>)
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 fec7 	bl	80060c4 <I2C_WaitOnFlagUntilTimeout>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e0bf      	b.n	80054c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800534e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691a      	ldr	r2, [r3, #16]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800536c:	3b01      	subs	r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005388:	2200      	movs	r2, #0
 800538a:	494f      	ldr	r1, [pc, #316]	; (80054c8 <HAL_I2C_Master_Receive+0x448>)
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 fe99 	bl	80060c4 <I2C_WaitOnFlagUntilTimeout>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e091      	b.n	80054c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691a      	ldr	r2, [r3, #16]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	b2d2      	uxtb	r2, r2
 80053ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005406:	b29b      	uxth	r3, r3
 8005408:	3b01      	subs	r3, #1
 800540a:	b29a      	uxth	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005410:	e042      	b.n	8005498 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005414:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 ffac 	bl	8006374 <I2C_WaitOnRXNEFlagUntilTimeout>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e04c      	b.n	80054c0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	1c5a      	adds	r2, r3, #1
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005442:	3b01      	subs	r3, #1
 8005444:	b29a      	uxth	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544e:	b29b      	uxth	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	f003 0304 	and.w	r3, r3, #4
 8005462:	2b04      	cmp	r3, #4
 8005464:	d118      	bne.n	8005498 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	691a      	ldr	r2, [r3, #16]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	b2d2      	uxtb	r2, r2
 8005472:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	1c5a      	adds	r2, r3, #1
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005482:	3b01      	subs	r3, #1
 8005484:	b29a      	uxth	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548e:	b29b      	uxth	r3, r3
 8005490:	3b01      	subs	r3, #1
 8005492:	b29a      	uxth	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800549c:	2b00      	cmp	r3, #0
 800549e:	f47f aec2 	bne.w	8005226 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	e000      	b.n	80054c0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80054be:	2302      	movs	r3, #2
  }
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3728      	adds	r7, #40	; 0x28
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	00010004 	.word	0x00010004

080054cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	4608      	mov	r0, r1
 80054d6:	4611      	mov	r1, r2
 80054d8:	461a      	mov	r2, r3
 80054da:	4603      	mov	r3, r0
 80054dc:	817b      	strh	r3, [r7, #10]
 80054de:	460b      	mov	r3, r1
 80054e0:	813b      	strh	r3, [r7, #8]
 80054e2:	4613      	mov	r3, r2
 80054e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054e6:	f7fc ff6f 	bl	80023c8 <HAL_GetTick>
 80054ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b20      	cmp	r3, #32
 80054f6:	f040 80d9 	bne.w	80056ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	2319      	movs	r3, #25
 8005500:	2201      	movs	r2, #1
 8005502:	496d      	ldr	r1, [pc, #436]	; (80056b8 <HAL_I2C_Mem_Write+0x1ec>)
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 fddd 	bl	80060c4 <I2C_WaitOnFlagUntilTimeout>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005510:	2302      	movs	r3, #2
 8005512:	e0cc      	b.n	80056ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_I2C_Mem_Write+0x56>
 800551e:	2302      	movs	r3, #2
 8005520:	e0c5      	b.n	80056ae <HAL_I2C_Mem_Write+0x1e2>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b01      	cmp	r3, #1
 8005536:	d007      	beq.n	8005548 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005556:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2221      	movs	r2, #33	; 0x21
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2240      	movs	r2, #64	; 0x40
 8005564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a3a      	ldr	r2, [r7, #32]
 8005572:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005578:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557e:	b29a      	uxth	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4a4d      	ldr	r2, [pc, #308]	; (80056bc <HAL_I2C_Mem_Write+0x1f0>)
 8005588:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800558a:	88f8      	ldrh	r0, [r7, #6]
 800558c:	893a      	ldrh	r2, [r7, #8]
 800558e:	8979      	ldrh	r1, [r7, #10]
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	9301      	str	r3, [sp, #4]
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	4603      	mov	r3, r0
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 fc14 	bl	8005dc8 <I2C_RequestMemoryWrite>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d052      	beq.n	800564c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e081      	b.n	80056ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 fe5e 	bl	8006270 <I2C_WaitOnTXEFlagUntilTimeout>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00d      	beq.n	80055d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d107      	bne.n	80055d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e06b      	b.n	80056ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	781a      	ldrb	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f0:	3b01      	subs	r3, #1
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29a      	uxth	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b04      	cmp	r3, #4
 8005612:	d11b      	bne.n	800564c <HAL_I2C_Mem_Write+0x180>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005618:	2b00      	cmp	r3, #0
 800561a:	d017      	beq.n	800564c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	781a      	ldrb	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005636:	3b01      	subs	r3, #1
 8005638:	b29a      	uxth	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005642:	b29b      	uxth	r3, r3
 8005644:	3b01      	subs	r3, #1
 8005646:	b29a      	uxth	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1aa      	bne.n	80055aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 fe4a 	bl	80062f2 <I2C_WaitOnBTFFlagUntilTimeout>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00d      	beq.n	8005680 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	2b04      	cmp	r3, #4
 800566a:	d107      	bne.n	800567c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800567a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e016      	b.n	80056ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800568e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	e000      	b.n	80056ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80056ac:	2302      	movs	r3, #2
  }
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	00100002 	.word	0x00100002
 80056bc:	ffff0000 	.word	0xffff0000

080056c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b08c      	sub	sp, #48	; 0x30
 80056c4:	af02      	add	r7, sp, #8
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	4608      	mov	r0, r1
 80056ca:	4611      	mov	r1, r2
 80056cc:	461a      	mov	r2, r3
 80056ce:	4603      	mov	r3, r0
 80056d0:	817b      	strh	r3, [r7, #10]
 80056d2:	460b      	mov	r3, r1
 80056d4:	813b      	strh	r3, [r7, #8]
 80056d6:	4613      	mov	r3, r2
 80056d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056da:	f7fc fe75 	bl	80023c8 <HAL_GetTick>
 80056de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b20      	cmp	r3, #32
 80056ea:	f040 8208 	bne.w	8005afe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	2319      	movs	r3, #25
 80056f4:	2201      	movs	r2, #1
 80056f6:	497b      	ldr	r1, [pc, #492]	; (80058e4 <HAL_I2C_Mem_Read+0x224>)
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 fce3 	bl	80060c4 <I2C_WaitOnFlagUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005704:	2302      	movs	r3, #2
 8005706:	e1fb      	b.n	8005b00 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800570e:	2b01      	cmp	r3, #1
 8005710:	d101      	bne.n	8005716 <HAL_I2C_Mem_Read+0x56>
 8005712:	2302      	movs	r3, #2
 8005714:	e1f4      	b.n	8005b00 <HAL_I2C_Mem_Read+0x440>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b01      	cmp	r3, #1
 800572a:	d007      	beq.n	800573c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0201 	orr.w	r2, r2, #1
 800573a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800574a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2222      	movs	r2, #34	; 0x22
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2240      	movs	r2, #64	; 0x40
 8005758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005766:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800576c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4a5b      	ldr	r2, [pc, #364]	; (80058e8 <HAL_I2C_Mem_Read+0x228>)
 800577c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800577e:	88f8      	ldrh	r0, [r7, #6]
 8005780:	893a      	ldrh	r2, [r7, #8]
 8005782:	8979      	ldrh	r1, [r7, #10]
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	9301      	str	r3, [sp, #4]
 8005788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	4603      	mov	r3, r0
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 fbb0 	bl	8005ef4 <I2C_RequestMemoryRead>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e1b0      	b.n	8005b00 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d113      	bne.n	80057ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057a6:	2300      	movs	r3, #0
 80057a8:	623b      	str	r3, [r7, #32]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	623b      	str	r3, [r7, #32]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	623b      	str	r3, [r7, #32]
 80057ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	e184      	b.n	8005ad8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d11b      	bne.n	800580e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057e6:	2300      	movs	r3, #0
 80057e8:	61fb      	str	r3, [r7, #28]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	61fb      	str	r3, [r7, #28]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	61fb      	str	r3, [r7, #28]
 80057fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	e164      	b.n	8005ad8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005812:	2b02      	cmp	r3, #2
 8005814:	d11b      	bne.n	800584e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005824:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005834:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005836:	2300      	movs	r3, #0
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	61bb      	str	r3, [r7, #24]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	61bb      	str	r3, [r7, #24]
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	e144      	b.n	8005ad8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800584e:	2300      	movs	r3, #0
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	617b      	str	r3, [r7, #20]
 8005862:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005864:	e138      	b.n	8005ad8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800586a:	2b03      	cmp	r3, #3
 800586c:	f200 80f1 	bhi.w	8005a52 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005874:	2b01      	cmp	r3, #1
 8005876:	d123      	bne.n	80058c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800587a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 fd79 	bl	8006374 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e139      	b.n	8005b00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691a      	ldr	r2, [r3, #16]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058be:	e10b      	b.n	8005ad8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d14e      	bne.n	8005966 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ce:	2200      	movs	r2, #0
 80058d0:	4906      	ldr	r1, [pc, #24]	; (80058ec <HAL_I2C_Mem_Read+0x22c>)
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f000 fbf6 	bl	80060c4 <I2C_WaitOnFlagUntilTimeout>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d008      	beq.n	80058f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e10e      	b.n	8005b00 <HAL_I2C_Mem_Read+0x440>
 80058e2:	bf00      	nop
 80058e4:	00100002 	.word	0x00100002
 80058e8:	ffff0000 	.word	0xffff0000
 80058ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	691a      	ldr	r2, [r3, #16]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	b2d2      	uxtb	r2, r2
 800590c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800591c:	3b01      	subs	r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005928:	b29b      	uxth	r3, r3
 800592a:	3b01      	subs	r3, #1
 800592c:	b29a      	uxth	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	691a      	ldr	r2, [r3, #16]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	b2d2      	uxtb	r2, r2
 800593e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800594e:	3b01      	subs	r3, #1
 8005950:	b29a      	uxth	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800595a:	b29b      	uxth	r3, r3
 800595c:	3b01      	subs	r3, #1
 800595e:	b29a      	uxth	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005964:	e0b8      	b.n	8005ad8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596c:	2200      	movs	r2, #0
 800596e:	4966      	ldr	r1, [pc, #408]	; (8005b08 <HAL_I2C_Mem_Read+0x448>)
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 fba7 	bl	80060c4 <I2C_WaitOnFlagUntilTimeout>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e0bf      	b.n	8005b00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800598e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691a      	ldr	r2, [r3, #16]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	b2d2      	uxtb	r2, r2
 800599c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ac:	3b01      	subs	r3, #1
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c8:	2200      	movs	r2, #0
 80059ca:	494f      	ldr	r1, [pc, #316]	; (8005b08 <HAL_I2C_Mem_Read+0x448>)
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 fb79 	bl	80060c4 <I2C_WaitOnFlagUntilTimeout>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e091      	b.n	8005b00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691a      	ldr	r2, [r3, #16]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	1c5a      	adds	r2, r3, #1
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	3b01      	subs	r3, #1
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	691a      	ldr	r2, [r3, #16]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	1c5a      	adds	r2, r3, #1
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a50:	e042      	b.n	8005ad8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f000 fc8c 	bl	8006374 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e04c      	b.n	8005b00 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	1c5a      	adds	r2, r3, #1
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a82:	3b01      	subs	r3, #1
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	3b01      	subs	r3, #1
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	f003 0304 	and.w	r3, r3, #4
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d118      	bne.n	8005ad8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	691a      	ldr	r2, [r3, #16]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	b2d2      	uxtb	r2, r2
 8005ab2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f47f aec2 	bne.w	8005866 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	e000      	b.n	8005b00 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005afe:	2302      	movs	r3, #2
  }
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3728      	adds	r7, #40	; 0x28
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	00010004 	.word	0x00010004

08005b0c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1a:	b2db      	uxtb	r3, r3
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b088      	sub	sp, #32
 8005b2c:	af02      	add	r7, sp, #8
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	607a      	str	r2, [r7, #4]
 8005b32:	603b      	str	r3, [r7, #0]
 8005b34:	460b      	mov	r3, r1
 8005b36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d006      	beq.n	8005b52 <I2C_MasterRequestWrite+0x2a>
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d003      	beq.n	8005b52 <I2C_MasterRequestWrite+0x2a>
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b50:	d108      	bne.n	8005b64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	e00b      	b.n	8005b7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b68:	2b12      	cmp	r3, #18
 8005b6a:	d107      	bne.n	8005b7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 fa9b 	bl	80060c4 <I2C_WaitOnFlagUntilTimeout>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00d      	beq.n	8005bb0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ba2:	d103      	bne.n	8005bac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005baa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e035      	b.n	8005c1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bb8:	d108      	bne.n	8005bcc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bba:	897b      	ldrh	r3, [r7, #10]
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005bc8:	611a      	str	r2, [r3, #16]
 8005bca:	e01b      	b.n	8005c04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005bcc:	897b      	ldrh	r3, [r7, #10]
 8005bce:	11db      	asrs	r3, r3, #7
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	f003 0306 	and.w	r3, r3, #6
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	f063 030f 	orn	r3, r3, #15
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	490e      	ldr	r1, [pc, #56]	; (8005c24 <I2C_MasterRequestWrite+0xfc>)
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 fac1 	bl	8006172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e010      	b.n	8005c1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005bfa:	897b      	ldrh	r3, [r7, #10]
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	4907      	ldr	r1, [pc, #28]	; (8005c28 <I2C_MasterRequestWrite+0x100>)
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 fab1 	bl	8006172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e000      	b.n	8005c1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	00010008 	.word	0x00010008
 8005c28:	00010002 	.word	0x00010002

08005c2c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b088      	sub	sp, #32
 8005c30:	af02      	add	r7, sp, #8
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	607a      	str	r2, [r7, #4]
 8005c36:	603b      	str	r3, [r7, #0]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c50:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d006      	beq.n	8005c66 <I2C_MasterRequestRead+0x3a>
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d003      	beq.n	8005c66 <I2C_MasterRequestRead+0x3a>
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c64:	d108      	bne.n	8005c78 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	e00b      	b.n	8005c90 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7c:	2b11      	cmp	r3, #17
 8005c7e:	d107      	bne.n	8005c90 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 fa11 	bl	80060c4 <I2C_WaitOnFlagUntilTimeout>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00d      	beq.n	8005cc4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb6:	d103      	bne.n	8005cc0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e079      	b.n	8005db8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ccc:	d108      	bne.n	8005ce0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005cce:	897b      	ldrh	r3, [r7, #10]
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	f043 0301 	orr.w	r3, r3, #1
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	611a      	str	r2, [r3, #16]
 8005cde:	e05f      	b.n	8005da0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ce0:	897b      	ldrh	r3, [r7, #10]
 8005ce2:	11db      	asrs	r3, r3, #7
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	f003 0306 	and.w	r3, r3, #6
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	f063 030f 	orn	r3, r3, #15
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	4930      	ldr	r1, [pc, #192]	; (8005dc0 <I2C_MasterRequestRead+0x194>)
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 fa37 	bl	8006172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e054      	b.n	8005db8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d0e:	897b      	ldrh	r3, [r7, #10]
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	4929      	ldr	r1, [pc, #164]	; (8005dc4 <I2C_MasterRequestRead+0x198>)
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f000 fa27 	bl	8006172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e044      	b.n	8005db8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d2e:	2300      	movs	r3, #0
 8005d30:	613b      	str	r3, [r7, #16]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	613b      	str	r3, [r7, #16]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	613b      	str	r3, [r7, #16]
 8005d42:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d52:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 f9af 	bl	80060c4 <I2C_WaitOnFlagUntilTimeout>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00d      	beq.n	8005d88 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d7a:	d103      	bne.n	8005d84 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d82:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e017      	b.n	8005db8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005d88:	897b      	ldrh	r3, [r7, #10]
 8005d8a:	11db      	asrs	r3, r3, #7
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	f003 0306 	and.w	r3, r3, #6
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	f063 030e 	orn	r3, r3, #14
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	4907      	ldr	r1, [pc, #28]	; (8005dc4 <I2C_MasterRequestRead+0x198>)
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f000 f9e3 	bl	8006172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e000      	b.n	8005db8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	00010008 	.word	0x00010008
 8005dc4:	00010002 	.word	0x00010002

08005dc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b088      	sub	sp, #32
 8005dcc:	af02      	add	r7, sp, #8
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	4608      	mov	r0, r1
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	817b      	strh	r3, [r7, #10]
 8005dda:	460b      	mov	r3, r1
 8005ddc:	813b      	strh	r3, [r7, #8]
 8005dde:	4613      	mov	r3, r2
 8005de0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005df0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 f960 	bl	80060c4 <I2C_WaitOnFlagUntilTimeout>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00d      	beq.n	8005e26 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e18:	d103      	bne.n	8005e22 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e05f      	b.n	8005ee6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e26:	897b      	ldrh	r3, [r7, #10]
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	6a3a      	ldr	r2, [r7, #32]
 8005e3a:	492d      	ldr	r1, [pc, #180]	; (8005ef0 <I2C_RequestMemoryWrite+0x128>)
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 f998 	bl	8006172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e04c      	b.n	8005ee6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	617b      	str	r3, [r7, #20]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e64:	6a39      	ldr	r1, [r7, #32]
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 fa02 	bl	8006270 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00d      	beq.n	8005e8e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d107      	bne.n	8005e8a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e02b      	b.n	8005ee6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e8e:	88fb      	ldrh	r3, [r7, #6]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d105      	bne.n	8005ea0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e94:	893b      	ldrh	r3, [r7, #8]
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	611a      	str	r2, [r3, #16]
 8005e9e:	e021      	b.n	8005ee4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ea0:	893b      	ldrh	r3, [r7, #8]
 8005ea2:	0a1b      	lsrs	r3, r3, #8
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb0:	6a39      	ldr	r1, [r7, #32]
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 f9dc 	bl	8006270 <I2C_WaitOnTXEFlagUntilTimeout>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00d      	beq.n	8005eda <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d107      	bne.n	8005ed6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ed4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e005      	b.n	8005ee6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005eda:	893b      	ldrh	r3, [r7, #8]
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	00010002 	.word	0x00010002

08005ef4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	4608      	mov	r0, r1
 8005efe:	4611      	mov	r1, r2
 8005f00:	461a      	mov	r2, r3
 8005f02:	4603      	mov	r3, r0
 8005f04:	817b      	strh	r3, [r7, #10]
 8005f06:	460b      	mov	r3, r1
 8005f08:	813b      	strh	r3, [r7, #8]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 f8c2 	bl	80060c4 <I2C_WaitOnFlagUntilTimeout>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00d      	beq.n	8005f62 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f54:	d103      	bne.n	8005f5e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e0aa      	b.n	80060b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f62:	897b      	ldrh	r3, [r7, #10]
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	6a3a      	ldr	r2, [r7, #32]
 8005f76:	4952      	ldr	r1, [pc, #328]	; (80060c0 <I2C_RequestMemoryRead+0x1cc>)
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 f8fa 	bl	8006172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e097      	b.n	80060b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f88:	2300      	movs	r3, #0
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	617b      	str	r3, [r7, #20]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa0:	6a39      	ldr	r1, [r7, #32]
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 f964 	bl	8006270 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00d      	beq.n	8005fca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d107      	bne.n	8005fc6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e076      	b.n	80060b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fca:	88fb      	ldrh	r3, [r7, #6]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d105      	bne.n	8005fdc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fd0:	893b      	ldrh	r3, [r7, #8]
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	611a      	str	r2, [r3, #16]
 8005fda:	e021      	b.n	8006020 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fdc:	893b      	ldrh	r3, [r7, #8]
 8005fde:	0a1b      	lsrs	r3, r3, #8
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fec:	6a39      	ldr	r1, [r7, #32]
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 f93e 	bl	8006270 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00d      	beq.n	8006016 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d107      	bne.n	8006012 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006010:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e050      	b.n	80060b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006016:	893b      	ldrh	r3, [r7, #8]
 8006018:	b2da      	uxtb	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006022:	6a39      	ldr	r1, [r7, #32]
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f923 	bl	8006270 <I2C_WaitOnTXEFlagUntilTimeout>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00d      	beq.n	800604c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006034:	2b04      	cmp	r3, #4
 8006036:	d107      	bne.n	8006048 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006046:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e035      	b.n	80060b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800605a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	2200      	movs	r2, #0
 8006064:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 f82b 	bl	80060c4 <I2C_WaitOnFlagUntilTimeout>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00d      	beq.n	8006090 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800607e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006082:	d103      	bne.n	800608c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f44f 7200 	mov.w	r2, #512	; 0x200
 800608a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e013      	b.n	80060b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006090:	897b      	ldrh	r3, [r7, #10]
 8006092:	b2db      	uxtb	r3, r3
 8006094:	f043 0301 	orr.w	r3, r3, #1
 8006098:	b2da      	uxtb	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	6a3a      	ldr	r2, [r7, #32]
 80060a4:	4906      	ldr	r1, [pc, #24]	; (80060c0 <I2C_RequestMemoryRead+0x1cc>)
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 f863 	bl	8006172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d001      	beq.n	80060b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e000      	b.n	80060b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	00010002 	.word	0x00010002

080060c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	603b      	str	r3, [r7, #0]
 80060d0:	4613      	mov	r3, r2
 80060d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060d4:	e025      	b.n	8006122 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060dc:	d021      	beq.n	8006122 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060de:	f7fc f973 	bl	80023c8 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d302      	bcc.n	80060f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d116      	bne.n	8006122 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2220      	movs	r2, #32
 80060fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	f043 0220 	orr.w	r2, r3, #32
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e023      	b.n	800616a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	0c1b      	lsrs	r3, r3, #16
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b01      	cmp	r3, #1
 800612a:	d10d      	bne.n	8006148 <I2C_WaitOnFlagUntilTimeout+0x84>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	43da      	mvns	r2, r3
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	4013      	ands	r3, r2
 8006138:	b29b      	uxth	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	bf0c      	ite	eq
 800613e:	2301      	moveq	r3, #1
 8006140:	2300      	movne	r3, #0
 8006142:	b2db      	uxtb	r3, r3
 8006144:	461a      	mov	r2, r3
 8006146:	e00c      	b.n	8006162 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	43da      	mvns	r2, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	4013      	ands	r3, r2
 8006154:	b29b      	uxth	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	bf0c      	ite	eq
 800615a:	2301      	moveq	r3, #1
 800615c:	2300      	movne	r3, #0
 800615e:	b2db      	uxtb	r3, r3
 8006160:	461a      	mov	r2, r3
 8006162:	79fb      	ldrb	r3, [r7, #7]
 8006164:	429a      	cmp	r2, r3
 8006166:	d0b6      	beq.n	80060d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b084      	sub	sp, #16
 8006176:	af00      	add	r7, sp, #0
 8006178:	60f8      	str	r0, [r7, #12]
 800617a:	60b9      	str	r1, [r7, #8]
 800617c:	607a      	str	r2, [r7, #4]
 800617e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006180:	e051      	b.n	8006226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800618c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006190:	d123      	bne.n	80061da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2220      	movs	r2, #32
 80061b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	f043 0204 	orr.w	r2, r3, #4
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e046      	b.n	8006268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e0:	d021      	beq.n	8006226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061e2:	f7fc f8f1 	bl	80023c8 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d302      	bcc.n	80061f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d116      	bne.n	8006226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2220      	movs	r2, #32
 8006202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	f043 0220 	orr.w	r2, r3, #32
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e020      	b.n	8006268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	0c1b      	lsrs	r3, r3, #16
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b01      	cmp	r3, #1
 800622e:	d10c      	bne.n	800624a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	43da      	mvns	r2, r3
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	4013      	ands	r3, r2
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	bf14      	ite	ne
 8006242:	2301      	movne	r3, #1
 8006244:	2300      	moveq	r3, #0
 8006246:	b2db      	uxtb	r3, r3
 8006248:	e00b      	b.n	8006262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	43da      	mvns	r2, r3
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	4013      	ands	r3, r2
 8006256:	b29b      	uxth	r3, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	bf14      	ite	ne
 800625c:	2301      	movne	r3, #1
 800625e:	2300      	moveq	r3, #0
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d18d      	bne.n	8006182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800627c:	e02d      	b.n	80062da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 f8ce 	bl	8006420 <I2C_IsAcknowledgeFailed>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e02d      	b.n	80062ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006294:	d021      	beq.n	80062da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006296:	f7fc f897 	bl	80023c8 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d302      	bcc.n	80062ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d116      	bne.n	80062da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2220      	movs	r2, #32
 80062b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	f043 0220 	orr.w	r2, r3, #32
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e007      	b.n	80062ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e4:	2b80      	cmp	r3, #128	; 0x80
 80062e6:	d1ca      	bne.n	800627e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b084      	sub	sp, #16
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	60f8      	str	r0, [r7, #12]
 80062fa:	60b9      	str	r1, [r7, #8]
 80062fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062fe:	e02d      	b.n	800635c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 f88d 	bl	8006420 <I2C_IsAcknowledgeFailed>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e02d      	b.n	800636c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006316:	d021      	beq.n	800635c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006318:	f7fc f856 	bl	80023c8 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	429a      	cmp	r2, r3
 8006326:	d302      	bcc.n	800632e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d116      	bne.n	800635c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2220      	movs	r2, #32
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006348:	f043 0220 	orr.w	r2, r3, #32
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e007      	b.n	800636c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	f003 0304 	and.w	r3, r3, #4
 8006366:	2b04      	cmp	r3, #4
 8006368:	d1ca      	bne.n	8006300 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006380:	e042      	b.n	8006408 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	f003 0310 	and.w	r3, r3, #16
 800638c:	2b10      	cmp	r3, #16
 800638e:	d119      	bne.n	80063c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f06f 0210 	mvn.w	r2, #16
 8006398:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2220      	movs	r2, #32
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e029      	b.n	8006418 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c4:	f7fc f800 	bl	80023c8 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d302      	bcc.n	80063da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d116      	bne.n	8006408 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f4:	f043 0220 	orr.w	r2, r3, #32
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e007      	b.n	8006418 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006412:	2b40      	cmp	r3, #64	; 0x40
 8006414:	d1b5      	bne.n	8006382 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006436:	d11b      	bne.n	8006470 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006440:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645c:	f043 0204 	orr.w	r2, r3, #4
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e000      	b.n	8006472 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
	...

08006480 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b088      	sub	sp, #32
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e128      	b.n	80066e4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d109      	bne.n	80064b2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a90      	ldr	r2, [pc, #576]	; (80066ec <HAL_I2S_Init+0x26c>)
 80064aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7fa ffaf 	bl	8001410 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2202      	movs	r2, #2
 80064b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	6812      	ldr	r2, [r2, #0]
 80064c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80064c8:	f023 030f 	bic.w	r3, r3, #15
 80064cc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2202      	movs	r2, #2
 80064d4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d060      	beq.n	80065a0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d102      	bne.n	80064ec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80064e6:	2310      	movs	r3, #16
 80064e8:	617b      	str	r3, [r7, #20]
 80064ea:	e001      	b.n	80064f0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80064ec:	2320      	movs	r3, #32
 80064ee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	2b20      	cmp	r3, #32
 80064f6:	d802      	bhi.n	80064fe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	005b      	lsls	r3, r3, #1
 80064fc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80064fe:	2001      	movs	r0, #1
 8006500:	f001 fd1a 	bl	8007f38 <HAL_RCCEx_GetPeriphCLKFreq>
 8006504:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800650e:	d125      	bne.n	800655c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d010      	beq.n	800653a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006522:	4613      	mov	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	461a      	mov	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	fbb2 f3f3 	udiv	r3, r2, r3
 8006534:	3305      	adds	r3, #5
 8006536:	613b      	str	r3, [r7, #16]
 8006538:	e01f      	b.n	800657a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	00db      	lsls	r3, r3, #3
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	fbb2 f2f3 	udiv	r2, r2, r3
 8006544:	4613      	mov	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	005b      	lsls	r3, r3, #1
 800654c:	461a      	mov	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	fbb2 f3f3 	udiv	r3, r2, r3
 8006556:	3305      	adds	r3, #5
 8006558:	613b      	str	r3, [r7, #16]
 800655a:	e00e      	b.n	800657a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	fbb2 f2f3 	udiv	r2, r2, r3
 8006564:	4613      	mov	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	461a      	mov	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	fbb2 f3f3 	udiv	r3, r2, r3
 8006576:	3305      	adds	r3, #5
 8006578:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	4a5c      	ldr	r2, [pc, #368]	; (80066f0 <HAL_I2S_Init+0x270>)
 800657e:	fba2 2303 	umull	r2, r3, r2, r3
 8006582:	08db      	lsrs	r3, r3, #3
 8006584:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	085b      	lsrs	r3, r3, #1
 8006596:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	021b      	lsls	r3, r3, #8
 800659c:	61bb      	str	r3, [r7, #24]
 800659e:	e003      	b.n	80065a8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80065a0:	2302      	movs	r3, #2
 80065a2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d902      	bls.n	80065b4 <HAL_I2S_Init+0x134>
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	2bff      	cmp	r3, #255	; 0xff
 80065b2:	d907      	bls.n	80065c4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b8:	f043 0210 	orr.w	r2, r3, #16
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e08f      	b.n	80066e4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	691a      	ldr	r2, [r3, #16]
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	ea42 0103 	orr.w	r1, r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69fa      	ldr	r2, [r7, #28]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80065e2:	f023 030f 	bic.w	r3, r3, #15
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	6851      	ldr	r1, [r2, #4]
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	6892      	ldr	r2, [r2, #8]
 80065ee:	4311      	orrs	r1, r2
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	68d2      	ldr	r2, [r2, #12]
 80065f4:	4311      	orrs	r1, r2
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	6992      	ldr	r2, [r2, #24]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	431a      	orrs	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006606:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d161      	bne.n	80066d4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a38      	ldr	r2, [pc, #224]	; (80066f4 <HAL_I2S_Init+0x274>)
 8006614:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a37      	ldr	r2, [pc, #220]	; (80066f8 <HAL_I2S_Init+0x278>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d101      	bne.n	8006624 <HAL_I2S_Init+0x1a4>
 8006620:	4b36      	ldr	r3, [pc, #216]	; (80066fc <HAL_I2S_Init+0x27c>)
 8006622:	e001      	b.n	8006628 <HAL_I2S_Init+0x1a8>
 8006624:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	6812      	ldr	r2, [r2, #0]
 800662e:	4932      	ldr	r1, [pc, #200]	; (80066f8 <HAL_I2S_Init+0x278>)
 8006630:	428a      	cmp	r2, r1
 8006632:	d101      	bne.n	8006638 <HAL_I2S_Init+0x1b8>
 8006634:	4a31      	ldr	r2, [pc, #196]	; (80066fc <HAL_I2S_Init+0x27c>)
 8006636:	e001      	b.n	800663c <HAL_I2S_Init+0x1bc>
 8006638:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800663c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006640:	f023 030f 	bic.w	r3, r3, #15
 8006644:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a2b      	ldr	r2, [pc, #172]	; (80066f8 <HAL_I2S_Init+0x278>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d101      	bne.n	8006654 <HAL_I2S_Init+0x1d4>
 8006650:	4b2a      	ldr	r3, [pc, #168]	; (80066fc <HAL_I2S_Init+0x27c>)
 8006652:	e001      	b.n	8006658 <HAL_I2S_Init+0x1d8>
 8006654:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006658:	2202      	movs	r2, #2
 800665a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a25      	ldr	r2, [pc, #148]	; (80066f8 <HAL_I2S_Init+0x278>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d101      	bne.n	800666a <HAL_I2S_Init+0x1ea>
 8006666:	4b25      	ldr	r3, [pc, #148]	; (80066fc <HAL_I2S_Init+0x27c>)
 8006668:	e001      	b.n	800666e <HAL_I2S_Init+0x1ee>
 800666a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800666e:	69db      	ldr	r3, [r3, #28]
 8006670:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800667a:	d003      	beq.n	8006684 <HAL_I2S_Init+0x204>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d103      	bne.n	800668c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006684:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006688:	613b      	str	r3, [r7, #16]
 800668a:	e001      	b.n	8006690 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800668c:	2300      	movs	r3, #0
 800668e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800669a:	4313      	orrs	r3, r2
 800669c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80066a4:	4313      	orrs	r3, r2
 80066a6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80066ae:	4313      	orrs	r3, r2
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	897b      	ldrh	r3, [r7, #10]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80066bc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a0d      	ldr	r2, [pc, #52]	; (80066f8 <HAL_I2S_Init+0x278>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d101      	bne.n	80066cc <HAL_I2S_Init+0x24c>
 80066c8:	4b0c      	ldr	r3, [pc, #48]	; (80066fc <HAL_I2S_Init+0x27c>)
 80066ca:	e001      	b.n	80066d0 <HAL_I2S_Init+0x250>
 80066cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066d0:	897a      	ldrh	r2, [r7, #10]
 80066d2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3720      	adds	r7, #32
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	08006d91 	.word	0x08006d91
 80066f0:	cccccccd 	.word	0xcccccccd
 80066f4:	08006f19 	.word	0x08006f19
 80066f8:	40003800 	.word	0x40003800
 80066fc:	40003400 	.word	0x40003400

08006700 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	4613      	mov	r3, r2
 800670c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d002      	beq.n	800671a <HAL_I2S_Transmit_DMA+0x1a>
 8006714:	88fb      	ldrh	r3, [r7, #6]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e08e      	b.n	800683c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b01      	cmp	r3, #1
 8006728:	d101      	bne.n	800672e <HAL_I2S_Transmit_DMA+0x2e>
 800672a:	2302      	movs	r3, #2
 800672c:	e086      	b.n	800683c <HAL_I2S_Transmit_DMA+0x13c>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b01      	cmp	r3, #1
 8006740:	d005      	beq.n	800674e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800674a:	2302      	movs	r3, #2
 800674c:	e076      	b.n	800683c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2203      	movs	r2, #3
 8006752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	69db      	ldr	r3, [r3, #28]
 8006768:	f003 0307 	and.w	r3, r3, #7
 800676c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2b03      	cmp	r3, #3
 8006772:	d002      	beq.n	800677a <HAL_I2S_Transmit_DMA+0x7a>
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	2b05      	cmp	r3, #5
 8006778:	d10a      	bne.n	8006790 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800677a:	88fb      	ldrh	r3, [r7, #6]
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	b29a      	uxth	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8006784:	88fb      	ldrh	r3, [r7, #6]
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	b29a      	uxth	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800678e:	e005      	b.n	800679c <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	88fa      	ldrh	r2, [r7, #6]
 8006794:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	88fa      	ldrh	r2, [r7, #6]
 800679a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	4a28      	ldr	r2, [pc, #160]	; (8006844 <HAL_I2S_Transmit_DMA+0x144>)
 80067a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a8:	4a27      	ldr	r2, [pc, #156]	; (8006848 <HAL_I2S_Transmit_DMA+0x148>)
 80067aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b0:	4a26      	ldr	r2, [pc, #152]	; (800684c <HAL_I2S_Transmit_DMA+0x14c>)
 80067b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80067bc:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80067c4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80067cc:	f7fb ffec 	bl	80027a8 <HAL_DMA_Start_IT>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00f      	beq.n	80067f6 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067da:	f043 0208 	orr.w	r2, r3, #8
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e022      	b.n	800683c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69db      	ldr	r3, [r3, #28]
 80067fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006800:	2b00      	cmp	r3, #0
 8006802:	d107      	bne.n	8006814 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	69da      	ldr	r2, [r3, #28]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006812:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b00      	cmp	r3, #0
 8006820:	d107      	bne.n	8006832 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f042 0202 	orr.w	r2, r2, #2
 8006830:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	08006c6f 	.word	0x08006c6f
 8006848:	08006c2d 	.word	0x08006c2d
 800684c:	08006c8b 	.word	0x08006c8b

08006850 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b088      	sub	sp, #32
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006858:	2300      	movs	r3, #0
 800685a:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006864:	d004      	beq.n	8006870 <HAL_I2S_DMAStop+0x20>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	f040 80d1 	bne.w	8006a12 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00f      	beq.n	8006898 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687c:	4618      	mov	r0, r3
 800687e:	f7fb ffeb 	bl	8002858 <HAL_DMA_Abort>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d007      	beq.n	8006898 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688c:	f043 0208 	orr.w	r2, r3, #8
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006898:	2364      	movs	r3, #100	; 0x64
 800689a:	2201      	movs	r2, #1
 800689c:	2102      	movs	r1, #2
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fb00 	bl	8006ea4 <I2S_WaitFlagStateUntilTimeout>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00b      	beq.n	80068c2 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ae:	f043 0201 	orr.w	r2, r3, #1
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80068c2:	2364      	movs	r3, #100	; 0x64
 80068c4:	2200      	movs	r2, #0
 80068c6:	2180      	movs	r1, #128	; 0x80
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 faeb 	bl	8006ea4 <I2S_WaitFlagStateUntilTimeout>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00b      	beq.n	80068ec <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d8:	f043 0201 	orr.w	r2, r3, #1
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	69da      	ldr	r2, [r3, #28]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068fa:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80068fc:	2300      	movs	r3, #0
 80068fe:	617b      	str	r3, [r7, #20]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 0202 	bic.w	r2, r2, #2
 8006918:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b05      	cmp	r3, #5
 8006924:	f040 8165 	bne.w	8006bf2 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00f      	beq.n	8006950 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006934:	4618      	mov	r0, r3
 8006936:	f7fb ff8f 	bl	8002858 <HAL_DMA_Abort>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d007      	beq.n	8006950 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006944:	f043 0208 	orr.w	r2, r3, #8
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a8a      	ldr	r2, [pc, #552]	; (8006b80 <HAL_I2S_DMAStop+0x330>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d101      	bne.n	800695e <HAL_I2S_DMAStop+0x10e>
 800695a:	4b8a      	ldr	r3, [pc, #552]	; (8006b84 <HAL_I2S_DMAStop+0x334>)
 800695c:	e001      	b.n	8006962 <HAL_I2S_DMAStop+0x112>
 800695e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006962:	69da      	ldr	r2, [r3, #28]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4985      	ldr	r1, [pc, #532]	; (8006b80 <HAL_I2S_DMAStop+0x330>)
 800696a:	428b      	cmp	r3, r1
 800696c:	d101      	bne.n	8006972 <HAL_I2S_DMAStop+0x122>
 800696e:	4b85      	ldr	r3, [pc, #532]	; (8006b84 <HAL_I2S_DMAStop+0x334>)
 8006970:	e001      	b.n	8006976 <HAL_I2S_DMAStop+0x126>
 8006972:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800697a:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 800697c:	2300      	movs	r3, #0
 800697e:	613b      	str	r3, [r7, #16]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a7e      	ldr	r2, [pc, #504]	; (8006b80 <HAL_I2S_DMAStop+0x330>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d101      	bne.n	800698e <HAL_I2S_DMAStop+0x13e>
 800698a:	4b7e      	ldr	r3, [pc, #504]	; (8006b84 <HAL_I2S_DMAStop+0x334>)
 800698c:	e001      	b.n	8006992 <HAL_I2S_DMAStop+0x142>
 800698e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	613b      	str	r3, [r7, #16]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a79      	ldr	r2, [pc, #484]	; (8006b80 <HAL_I2S_DMAStop+0x330>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d101      	bne.n	80069a4 <HAL_I2S_DMAStop+0x154>
 80069a0:	4b78      	ldr	r3, [pc, #480]	; (8006b84 <HAL_I2S_DMAStop+0x334>)
 80069a2:	e001      	b.n	80069a8 <HAL_I2S_DMAStop+0x158>
 80069a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	613b      	str	r3, [r7, #16]
 80069ac:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a73      	ldr	r2, [pc, #460]	; (8006b80 <HAL_I2S_DMAStop+0x330>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d101      	bne.n	80069bc <HAL_I2S_DMAStop+0x16c>
 80069b8:	4b72      	ldr	r3, [pc, #456]	; (8006b84 <HAL_I2S_DMAStop+0x334>)
 80069ba:	e001      	b.n	80069c0 <HAL_I2S_DMAStop+0x170>
 80069bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	496e      	ldr	r1, [pc, #440]	; (8006b80 <HAL_I2S_DMAStop+0x330>)
 80069c8:	428b      	cmp	r3, r1
 80069ca:	d101      	bne.n	80069d0 <HAL_I2S_DMAStop+0x180>
 80069cc:	4b6d      	ldr	r3, [pc, #436]	; (8006b84 <HAL_I2S_DMAStop+0x334>)
 80069ce:	e001      	b.n	80069d4 <HAL_I2S_DMAStop+0x184>
 80069d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069d4:	f022 0201 	bic.w	r2, r2, #1
 80069d8:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10c      	bne.n	80069fc <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80069fa:	e0fa      	b.n	8006bf2 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a5f      	ldr	r2, [pc, #380]	; (8006b80 <HAL_I2S_DMAStop+0x330>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d101      	bne.n	8006a0a <HAL_I2S_DMAStop+0x1ba>
 8006a06:	4b5f      	ldr	r3, [pc, #380]	; (8006b84 <HAL_I2S_DMAStop+0x334>)
 8006a08:	e001      	b.n	8006a0e <HAL_I2S_DMAStop+0x1be>
 8006a0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a0e:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006a10:	e0ef      	b.n	8006bf2 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a1a:	d005      	beq.n	8006a28 <HAL_I2S_DMAStop+0x1d8>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a24:	f040 80e5 	bne.w	8006bf2 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00f      	beq.n	8006a50 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7fb ff0f 	bl	8002858 <HAL_DMA_Abort>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d007      	beq.n	8006a50 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a44:	f043 0208 	orr.w	r2, r3, #8
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b05      	cmp	r3, #5
 8006a5a:	f040 809a 	bne.w	8006b92 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00f      	beq.n	8006a86 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fb fef4 	bl	8002858 <HAL_DMA_Abort>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d007      	beq.n	8006a86 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a7a:	f043 0208 	orr.w	r2, r3, #8
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8006a86:	f7fb fc9f 	bl	80023c8 <HAL_GetTick>
 8006a8a:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006a8c:	e012      	b.n	8006ab4 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006a8e:	f7fb fc9b 	bl	80023c8 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	2b64      	cmp	r3, #100	; 0x64
 8006a9a:	d90b      	bls.n	8006ab4 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa0:	f043 0201 	orr.w	r2, r3, #1
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a31      	ldr	r2, [pc, #196]	; (8006b80 <HAL_I2S_DMAStop+0x330>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d101      	bne.n	8006ac2 <HAL_I2S_DMAStop+0x272>
 8006abe:	4b31      	ldr	r3, [pc, #196]	; (8006b84 <HAL_I2S_DMAStop+0x334>)
 8006ac0:	e001      	b.n	8006ac6 <HAL_I2S_DMAStop+0x276>
 8006ac2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d1de      	bne.n	8006a8e <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006ad0:	e012      	b.n	8006af8 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006ad2:	f7fb fc79 	bl	80023c8 <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	2b64      	cmp	r3, #100	; 0x64
 8006ade:	d90b      	bls.n	8006af8 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae4:	f043 0201 	orr.w	r2, r3, #1
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a20      	ldr	r2, [pc, #128]	; (8006b80 <HAL_I2S_DMAStop+0x330>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d101      	bne.n	8006b06 <HAL_I2S_DMAStop+0x2b6>
 8006b02:	4b20      	ldr	r3, [pc, #128]	; (8006b84 <HAL_I2S_DMAStop+0x334>)
 8006b04:	e001      	b.n	8006b0a <HAL_I2S_DMAStop+0x2ba>
 8006b06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b10:	2b80      	cmp	r3, #128	; 0x80
 8006b12:	d0de      	beq.n	8006ad2 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a19      	ldr	r2, [pc, #100]	; (8006b80 <HAL_I2S_DMAStop+0x330>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d101      	bne.n	8006b22 <HAL_I2S_DMAStop+0x2d2>
 8006b1e:	4b19      	ldr	r3, [pc, #100]	; (8006b84 <HAL_I2S_DMAStop+0x334>)
 8006b20:	e001      	b.n	8006b26 <HAL_I2S_DMAStop+0x2d6>
 8006b22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b26:	69da      	ldr	r2, [r3, #28]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4914      	ldr	r1, [pc, #80]	; (8006b80 <HAL_I2S_DMAStop+0x330>)
 8006b2e:	428b      	cmp	r3, r1
 8006b30:	d101      	bne.n	8006b36 <HAL_I2S_DMAStop+0x2e6>
 8006b32:	4b14      	ldr	r3, [pc, #80]	; (8006b84 <HAL_I2S_DMAStop+0x334>)
 8006b34:	e001      	b.n	8006b3a <HAL_I2S_DMAStop+0x2ea>
 8006b36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b3e:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8006b40:	2300      	movs	r3, #0
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a0d      	ldr	r2, [pc, #52]	; (8006b80 <HAL_I2S_DMAStop+0x330>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d101      	bne.n	8006b52 <HAL_I2S_DMAStop+0x302>
 8006b4e:	4b0d      	ldr	r3, [pc, #52]	; (8006b84 <HAL_I2S_DMAStop+0x334>)
 8006b50:	e001      	b.n	8006b56 <HAL_I2S_DMAStop+0x306>
 8006b52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	60fb      	str	r3, [r7, #12]
 8006b5a:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a07      	ldr	r2, [pc, #28]	; (8006b80 <HAL_I2S_DMAStop+0x330>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d101      	bne.n	8006b6a <HAL_I2S_DMAStop+0x31a>
 8006b66:	4b07      	ldr	r3, [pc, #28]	; (8006b84 <HAL_I2S_DMAStop+0x334>)
 8006b68:	e001      	b.n	8006b6e <HAL_I2S_DMAStop+0x31e>
 8006b6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4902      	ldr	r1, [pc, #8]	; (8006b80 <HAL_I2S_DMAStop+0x330>)
 8006b76:	428b      	cmp	r3, r1
 8006b78:	d106      	bne.n	8006b88 <HAL_I2S_DMAStop+0x338>
 8006b7a:	4b02      	ldr	r3, [pc, #8]	; (8006b84 <HAL_I2S_DMAStop+0x334>)
 8006b7c:	e006      	b.n	8006b8c <HAL_I2S_DMAStop+0x33c>
 8006b7e:	bf00      	nop
 8006b80:	40003800 	.word	0x40003800
 8006b84:	40003400 	.word	0x40003400
 8006b88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b8c:	f022 0202 	bic.w	r2, r2, #2
 8006b90:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69da      	ldr	r2, [r3, #28]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ba0:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60bb      	str	r3, [r7, #8]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	60bb      	str	r3, [r7, #8]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	60bb      	str	r3, [r7, #8]
 8006bb6:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 0201 	bic.w	r2, r2, #1
 8006bc6:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bd0:	d10c      	bne.n	8006bec <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	77fb      	strb	r3, [r7, #31]
 8006bea:	e002      	b.n	8006bf2 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8006bfa:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3720      	adds	r7, #32
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c38:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10e      	bne.n	8006c60 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 0202 	bic.w	r2, r2, #2
 8006c50:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f7f9 ff6d 	bl	8000b40 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006c66:	bf00      	nop
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b084      	sub	sp, #16
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f7f9 ff71 	bl	8000b64 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006c82:	bf00      	nop
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b084      	sub	sp, #16
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0203 	bic.w	r2, r2, #3
 8006ca6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc0:	f043 0208 	orr.w	r2, r3, #8
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f7ff ffa5 	bl	8006c18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006cce:	bf00      	nop
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b082      	sub	sp, #8
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	881a      	ldrh	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cee:	1c9a      	adds	r2, r3, #2
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10e      	bne.n	8006d2a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006d1a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7f9 ff0b 	bl	8000b40 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006d2a:	bf00      	nop
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b082      	sub	sp, #8
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d44:	b292      	uxth	r2, r2
 8006d46:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4c:	1c9a      	adds	r2, r3, #2
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10e      	bne.n	8006d88 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006d78:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff ff3e 	bl	8006c04 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006d88:	bf00      	nop
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b04      	cmp	r3, #4
 8006daa:	d13a      	bne.n	8006e22 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d109      	bne.n	8006dca <I2S_IRQHandler+0x3a>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc0:	2b40      	cmp	r3, #64	; 0x40
 8006dc2:	d102      	bne.n	8006dca <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7ff ffb4 	bl	8006d32 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd0:	2b40      	cmp	r3, #64	; 0x40
 8006dd2:	d126      	bne.n	8006e22 <I2S_IRQHandler+0x92>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f003 0320 	and.w	r3, r3, #32
 8006dde:	2b20      	cmp	r3, #32
 8006de0:	d11f      	bne.n	8006e22 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006df0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006df2:	2300      	movs	r3, #0
 8006df4:	613b      	str	r3, [r7, #16]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	613b      	str	r3, [r7, #16]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	613b      	str	r3, [r7, #16]
 8006e06:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e14:	f043 0202 	orr.w	r2, r3, #2
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7ff fefb 	bl	8006c18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b03      	cmp	r3, #3
 8006e2c:	d136      	bne.n	8006e9c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d109      	bne.n	8006e4c <I2S_IRQHandler+0xbc>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e42:	2b80      	cmp	r3, #128	; 0x80
 8006e44:	d102      	bne.n	8006e4c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7ff ff45 	bl	8006cd6 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f003 0308 	and.w	r3, r3, #8
 8006e52:	2b08      	cmp	r3, #8
 8006e54:	d122      	bne.n	8006e9c <I2S_IRQHandler+0x10c>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f003 0320 	and.w	r3, r3, #32
 8006e60:	2b20      	cmp	r3, #32
 8006e62:	d11b      	bne.n	8006e9c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e72:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	60fb      	str	r3, [r7, #12]
 8006e80:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e8e:	f043 0204 	orr.w	r2, r3, #4
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7ff febe 	bl	8006c18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006e9c:	bf00      	nop
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	603b      	str	r3, [r7, #0]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006eb4:	f7fb fa88 	bl	80023c8 <HAL_GetTick>
 8006eb8:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006eba:	e018      	b.n	8006eee <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec2:	d014      	beq.n	8006eee <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8006ec4:	f7fb fa80 	bl	80023c8 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d902      	bls.n	8006eda <I2S_WaitFlagStateUntilTimeout+0x36>
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d109      	bne.n	8006eee <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e00f      	b.n	8006f0e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	689a      	ldr	r2, [r3, #8]
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	bf0c      	ite	eq
 8006efe:	2301      	moveq	r3, #1
 8006f00:	2300      	movne	r3, #0
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	461a      	mov	r2, r3
 8006f06:	79fb      	ldrb	r3, [r7, #7]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d1d7      	bne.n	8006ebc <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3718      	adds	r7, #24
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
	...

08006f18 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b088      	sub	sp, #32
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a92      	ldr	r2, [pc, #584]	; (8007178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d101      	bne.n	8006f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006f32:	4b92      	ldr	r3, [pc, #584]	; (800717c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006f34:	e001      	b.n	8006f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006f36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a8b      	ldr	r2, [pc, #556]	; (8007178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d101      	bne.n	8006f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006f50:	4b8a      	ldr	r3, [pc, #552]	; (800717c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006f52:	e001      	b.n	8006f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006f54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f64:	d004      	beq.n	8006f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f040 8099 	bne.w	80070a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d107      	bne.n	8006f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d002      	beq.n	8006f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f925 	bl	80071d4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d107      	bne.n	8006fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f9c8 	bl	8007334 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006faa:	2b40      	cmp	r3, #64	; 0x40
 8006fac:	d13a      	bne.n	8007024 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	f003 0320 	and.w	r3, r3, #32
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d035      	beq.n	8007024 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a6e      	ldr	r2, [pc, #440]	; (8007178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d101      	bne.n	8006fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006fc2:	4b6e      	ldr	r3, [pc, #440]	; (800717c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006fc4:	e001      	b.n	8006fca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006fc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4969      	ldr	r1, [pc, #420]	; (8007178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006fd2:	428b      	cmp	r3, r1
 8006fd4:	d101      	bne.n	8006fda <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006fd6:	4b69      	ldr	r3, [pc, #420]	; (800717c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006fd8:	e001      	b.n	8006fde <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006fda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006fe2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685a      	ldr	r2, [r3, #4]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ff2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	60fb      	str	r3, [r7, #12]
 8007008:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007016:	f043 0202 	orr.w	r2, r3, #2
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7ff fdfa 	bl	8006c18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	f003 0308 	and.w	r3, r3, #8
 800702a:	2b08      	cmp	r3, #8
 800702c:	f040 80c3 	bne.w	80071b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f003 0320 	and.w	r3, r3, #32
 8007036:	2b00      	cmp	r3, #0
 8007038:	f000 80bd 	beq.w	80071b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800704a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a49      	ldr	r2, [pc, #292]	; (8007178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d101      	bne.n	800705a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8007056:	4b49      	ldr	r3, [pc, #292]	; (800717c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007058:	e001      	b.n	800705e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800705a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4944      	ldr	r1, [pc, #272]	; (8007178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007066:	428b      	cmp	r3, r1
 8007068:	d101      	bne.n	800706e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800706a:	4b44      	ldr	r3, [pc, #272]	; (800717c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800706c:	e001      	b.n	8007072 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800706e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007072:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007076:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007078:	2300      	movs	r3, #0
 800707a:	60bb      	str	r3, [r7, #8]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	60bb      	str	r3, [r7, #8]
 8007084:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007092:	f043 0204 	orr.w	r2, r3, #4
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f7ff fdbc 	bl	8006c18 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80070a0:	e089      	b.n	80071b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d107      	bne.n	80070bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d002      	beq.n	80070bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f8be 	bl	8007238 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d107      	bne.n	80070d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d002      	beq.n	80070d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f8fd 	bl	80072d0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070dc:	2b40      	cmp	r3, #64	; 0x40
 80070de:	d12f      	bne.n	8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f003 0320 	and.w	r3, r3, #32
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d02a      	beq.n	8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80070f8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a1e      	ldr	r2, [pc, #120]	; (8007178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d101      	bne.n	8007108 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007104:	4b1d      	ldr	r3, [pc, #116]	; (800717c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007106:	e001      	b.n	800710c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007108:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4919      	ldr	r1, [pc, #100]	; (8007178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007114:	428b      	cmp	r3, r1
 8007116:	d101      	bne.n	800711c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007118:	4b18      	ldr	r3, [pc, #96]	; (800717c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800711a:	e001      	b.n	8007120 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800711c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007120:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007124:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007132:	f043 0202 	orr.w	r2, r3, #2
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff fd6c 	bl	8006c18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	f003 0308 	and.w	r3, r3, #8
 8007146:	2b08      	cmp	r3, #8
 8007148:	d136      	bne.n	80071b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	f003 0320 	and.w	r3, r3, #32
 8007150:	2b00      	cmp	r3, #0
 8007152:	d031      	beq.n	80071b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a07      	ldr	r2, [pc, #28]	; (8007178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d101      	bne.n	8007162 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800715e:	4b07      	ldr	r3, [pc, #28]	; (800717c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007160:	e001      	b.n	8007166 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007162:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4902      	ldr	r1, [pc, #8]	; (8007178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800716e:	428b      	cmp	r3, r1
 8007170:	d106      	bne.n	8007180 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8007172:	4b02      	ldr	r3, [pc, #8]	; (800717c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007174:	e006      	b.n	8007184 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8007176:	bf00      	nop
 8007178:	40003800 	.word	0x40003800
 800717c:	40003400 	.word	0x40003400
 8007180:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007184:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007188:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007198:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a6:	f043 0204 	orr.w	r2, r3, #4
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7ff fd32 	bl	8006c18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80071b4:	e000      	b.n	80071b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80071b6:	bf00      	nop
}
 80071b8:	bf00      	nop
 80071ba:	3720      	adds	r7, #32
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	1c99      	adds	r1, r3, #2
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	6251      	str	r1, [r2, #36]	; 0x24
 80071e6:	881a      	ldrh	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	3b01      	subs	r3, #1
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007200:	b29b      	uxth	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d113      	bne.n	800722e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007214:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800721a:	b29b      	uxth	r3, r3
 800721c:	2b00      	cmp	r3, #0
 800721e:	d106      	bne.n	800722e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7ff ffc9 	bl	80071c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800722e:	bf00      	nop
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
	...

08007238 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007244:	1c99      	adds	r1, r3, #2
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	6251      	str	r1, [r2, #36]	; 0x24
 800724a:	8819      	ldrh	r1, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a1d      	ldr	r2, [pc, #116]	; (80072c8 <I2SEx_TxISR_I2SExt+0x90>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d101      	bne.n	800725a <I2SEx_TxISR_I2SExt+0x22>
 8007256:	4b1d      	ldr	r3, [pc, #116]	; (80072cc <I2SEx_TxISR_I2SExt+0x94>)
 8007258:	e001      	b.n	800725e <I2SEx_TxISR_I2SExt+0x26>
 800725a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800725e:	460a      	mov	r2, r1
 8007260:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007266:	b29b      	uxth	r3, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	b29a      	uxth	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007274:	b29b      	uxth	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d121      	bne.n	80072be <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a12      	ldr	r2, [pc, #72]	; (80072c8 <I2SEx_TxISR_I2SExt+0x90>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d101      	bne.n	8007288 <I2SEx_TxISR_I2SExt+0x50>
 8007284:	4b11      	ldr	r3, [pc, #68]	; (80072cc <I2SEx_TxISR_I2SExt+0x94>)
 8007286:	e001      	b.n	800728c <I2SEx_TxISR_I2SExt+0x54>
 8007288:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	490d      	ldr	r1, [pc, #52]	; (80072c8 <I2SEx_TxISR_I2SExt+0x90>)
 8007294:	428b      	cmp	r3, r1
 8007296:	d101      	bne.n	800729c <I2SEx_TxISR_I2SExt+0x64>
 8007298:	4b0c      	ldr	r3, [pc, #48]	; (80072cc <I2SEx_TxISR_I2SExt+0x94>)
 800729a:	e001      	b.n	80072a0 <I2SEx_TxISR_I2SExt+0x68>
 800729c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80072a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d106      	bne.n	80072be <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7ff ff81 	bl	80071c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80072be:	bf00      	nop
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	40003800 	.word	0x40003800
 80072cc:	40003400 	.word	0x40003400

080072d0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68d8      	ldr	r0, [r3, #12]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e2:	1c99      	adds	r1, r3, #2
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80072e8:	b282      	uxth	r2, r0
 80072ea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	3b01      	subs	r3, #1
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072fe:	b29b      	uxth	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	d113      	bne.n	800732c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007312:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007318:	b29b      	uxth	r3, r3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d106      	bne.n	800732c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7ff ff4a 	bl	80071c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800732c:	bf00      	nop
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a20      	ldr	r2, [pc, #128]	; (80073c4 <I2SEx_RxISR_I2SExt+0x90>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d101      	bne.n	800734a <I2SEx_RxISR_I2SExt+0x16>
 8007346:	4b20      	ldr	r3, [pc, #128]	; (80073c8 <I2SEx_RxISR_I2SExt+0x94>)
 8007348:	e001      	b.n	800734e <I2SEx_RxISR_I2SExt+0x1a>
 800734a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800734e:	68d8      	ldr	r0, [r3, #12]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	1c99      	adds	r1, r3, #2
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	62d1      	str	r1, [r2, #44]	; 0x2c
 800735a:	b282      	uxth	r2, r0
 800735c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007362:	b29b      	uxth	r3, r3
 8007364:	3b01      	subs	r3, #1
 8007366:	b29a      	uxth	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007370:	b29b      	uxth	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	d121      	bne.n	80073ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a12      	ldr	r2, [pc, #72]	; (80073c4 <I2SEx_RxISR_I2SExt+0x90>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d101      	bne.n	8007384 <I2SEx_RxISR_I2SExt+0x50>
 8007380:	4b11      	ldr	r3, [pc, #68]	; (80073c8 <I2SEx_RxISR_I2SExt+0x94>)
 8007382:	e001      	b.n	8007388 <I2SEx_RxISR_I2SExt+0x54>
 8007384:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	490d      	ldr	r1, [pc, #52]	; (80073c4 <I2SEx_RxISR_I2SExt+0x90>)
 8007390:	428b      	cmp	r3, r1
 8007392:	d101      	bne.n	8007398 <I2SEx_RxISR_I2SExt+0x64>
 8007394:	4b0c      	ldr	r3, [pc, #48]	; (80073c8 <I2SEx_RxISR_I2SExt+0x94>)
 8007396:	e001      	b.n	800739c <I2SEx_RxISR_I2SExt+0x68>
 8007398:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800739c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80073a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d106      	bne.n	80073ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f7ff ff03 	bl	80071c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80073ba:	bf00      	nop
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	40003800 	.word	0x40003800
 80073c8:	40003400 	.word	0x40003400

080073cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d101      	bne.n	80073de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e267      	b.n	80078ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d075      	beq.n	80074d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80073ea:	4b88      	ldr	r3, [pc, #544]	; (800760c <HAL_RCC_OscConfig+0x240>)
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f003 030c 	and.w	r3, r3, #12
 80073f2:	2b04      	cmp	r3, #4
 80073f4:	d00c      	beq.n	8007410 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80073f6:	4b85      	ldr	r3, [pc, #532]	; (800760c <HAL_RCC_OscConfig+0x240>)
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80073fe:	2b08      	cmp	r3, #8
 8007400:	d112      	bne.n	8007428 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007402:	4b82      	ldr	r3, [pc, #520]	; (800760c <HAL_RCC_OscConfig+0x240>)
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800740a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800740e:	d10b      	bne.n	8007428 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007410:	4b7e      	ldr	r3, [pc, #504]	; (800760c <HAL_RCC_OscConfig+0x240>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d05b      	beq.n	80074d4 <HAL_RCC_OscConfig+0x108>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d157      	bne.n	80074d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e242      	b.n	80078ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007430:	d106      	bne.n	8007440 <HAL_RCC_OscConfig+0x74>
 8007432:	4b76      	ldr	r3, [pc, #472]	; (800760c <HAL_RCC_OscConfig+0x240>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a75      	ldr	r2, [pc, #468]	; (800760c <HAL_RCC_OscConfig+0x240>)
 8007438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800743c:	6013      	str	r3, [r2, #0]
 800743e:	e01d      	b.n	800747c <HAL_RCC_OscConfig+0xb0>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007448:	d10c      	bne.n	8007464 <HAL_RCC_OscConfig+0x98>
 800744a:	4b70      	ldr	r3, [pc, #448]	; (800760c <HAL_RCC_OscConfig+0x240>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a6f      	ldr	r2, [pc, #444]	; (800760c <HAL_RCC_OscConfig+0x240>)
 8007450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007454:	6013      	str	r3, [r2, #0]
 8007456:	4b6d      	ldr	r3, [pc, #436]	; (800760c <HAL_RCC_OscConfig+0x240>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a6c      	ldr	r2, [pc, #432]	; (800760c <HAL_RCC_OscConfig+0x240>)
 800745c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007460:	6013      	str	r3, [r2, #0]
 8007462:	e00b      	b.n	800747c <HAL_RCC_OscConfig+0xb0>
 8007464:	4b69      	ldr	r3, [pc, #420]	; (800760c <HAL_RCC_OscConfig+0x240>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a68      	ldr	r2, [pc, #416]	; (800760c <HAL_RCC_OscConfig+0x240>)
 800746a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800746e:	6013      	str	r3, [r2, #0]
 8007470:	4b66      	ldr	r3, [pc, #408]	; (800760c <HAL_RCC_OscConfig+0x240>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a65      	ldr	r2, [pc, #404]	; (800760c <HAL_RCC_OscConfig+0x240>)
 8007476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800747a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d013      	beq.n	80074ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007484:	f7fa ffa0 	bl	80023c8 <HAL_GetTick>
 8007488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800748a:	e008      	b.n	800749e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800748c:	f7fa ff9c 	bl	80023c8 <HAL_GetTick>
 8007490:	4602      	mov	r2, r0
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	2b64      	cmp	r3, #100	; 0x64
 8007498:	d901      	bls.n	800749e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e207      	b.n	80078ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800749e:	4b5b      	ldr	r3, [pc, #364]	; (800760c <HAL_RCC_OscConfig+0x240>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d0f0      	beq.n	800748c <HAL_RCC_OscConfig+0xc0>
 80074aa:	e014      	b.n	80074d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074ac:	f7fa ff8c 	bl	80023c8 <HAL_GetTick>
 80074b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074b2:	e008      	b.n	80074c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074b4:	f7fa ff88 	bl	80023c8 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	2b64      	cmp	r3, #100	; 0x64
 80074c0:	d901      	bls.n	80074c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e1f3      	b.n	80078ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074c6:	4b51      	ldr	r3, [pc, #324]	; (800760c <HAL_RCC_OscConfig+0x240>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1f0      	bne.n	80074b4 <HAL_RCC_OscConfig+0xe8>
 80074d2:	e000      	b.n	80074d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0302 	and.w	r3, r3, #2
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d063      	beq.n	80075aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80074e2:	4b4a      	ldr	r3, [pc, #296]	; (800760c <HAL_RCC_OscConfig+0x240>)
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f003 030c 	and.w	r3, r3, #12
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00b      	beq.n	8007506 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80074ee:	4b47      	ldr	r3, [pc, #284]	; (800760c <HAL_RCC_OscConfig+0x240>)
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80074f6:	2b08      	cmp	r3, #8
 80074f8:	d11c      	bne.n	8007534 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80074fa:	4b44      	ldr	r3, [pc, #272]	; (800760c <HAL_RCC_OscConfig+0x240>)
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d116      	bne.n	8007534 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007506:	4b41      	ldr	r3, [pc, #260]	; (800760c <HAL_RCC_OscConfig+0x240>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0302 	and.w	r3, r3, #2
 800750e:	2b00      	cmp	r3, #0
 8007510:	d005      	beq.n	800751e <HAL_RCC_OscConfig+0x152>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d001      	beq.n	800751e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e1c7      	b.n	80078ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800751e:	4b3b      	ldr	r3, [pc, #236]	; (800760c <HAL_RCC_OscConfig+0x240>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	00db      	lsls	r3, r3, #3
 800752c:	4937      	ldr	r1, [pc, #220]	; (800760c <HAL_RCC_OscConfig+0x240>)
 800752e:	4313      	orrs	r3, r2
 8007530:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007532:	e03a      	b.n	80075aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d020      	beq.n	800757e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800753c:	4b34      	ldr	r3, [pc, #208]	; (8007610 <HAL_RCC_OscConfig+0x244>)
 800753e:	2201      	movs	r2, #1
 8007540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007542:	f7fa ff41 	bl	80023c8 <HAL_GetTick>
 8007546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007548:	e008      	b.n	800755c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800754a:	f7fa ff3d 	bl	80023c8 <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	2b02      	cmp	r3, #2
 8007556:	d901      	bls.n	800755c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e1a8      	b.n	80078ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800755c:	4b2b      	ldr	r3, [pc, #172]	; (800760c <HAL_RCC_OscConfig+0x240>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0302 	and.w	r3, r3, #2
 8007564:	2b00      	cmp	r3, #0
 8007566:	d0f0      	beq.n	800754a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007568:	4b28      	ldr	r3, [pc, #160]	; (800760c <HAL_RCC_OscConfig+0x240>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	00db      	lsls	r3, r3, #3
 8007576:	4925      	ldr	r1, [pc, #148]	; (800760c <HAL_RCC_OscConfig+0x240>)
 8007578:	4313      	orrs	r3, r2
 800757a:	600b      	str	r3, [r1, #0]
 800757c:	e015      	b.n	80075aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800757e:	4b24      	ldr	r3, [pc, #144]	; (8007610 <HAL_RCC_OscConfig+0x244>)
 8007580:	2200      	movs	r2, #0
 8007582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007584:	f7fa ff20 	bl	80023c8 <HAL_GetTick>
 8007588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800758a:	e008      	b.n	800759e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800758c:	f7fa ff1c 	bl	80023c8 <HAL_GetTick>
 8007590:	4602      	mov	r2, r0
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	2b02      	cmp	r3, #2
 8007598:	d901      	bls.n	800759e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e187      	b.n	80078ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800759e:	4b1b      	ldr	r3, [pc, #108]	; (800760c <HAL_RCC_OscConfig+0x240>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0302 	and.w	r3, r3, #2
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1f0      	bne.n	800758c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 0308 	and.w	r3, r3, #8
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d036      	beq.n	8007624 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d016      	beq.n	80075ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075be:	4b15      	ldr	r3, [pc, #84]	; (8007614 <HAL_RCC_OscConfig+0x248>)
 80075c0:	2201      	movs	r2, #1
 80075c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075c4:	f7fa ff00 	bl	80023c8 <HAL_GetTick>
 80075c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075ca:	e008      	b.n	80075de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80075cc:	f7fa fefc 	bl	80023c8 <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d901      	bls.n	80075de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e167      	b.n	80078ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075de:	4b0b      	ldr	r3, [pc, #44]	; (800760c <HAL_RCC_OscConfig+0x240>)
 80075e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d0f0      	beq.n	80075cc <HAL_RCC_OscConfig+0x200>
 80075ea:	e01b      	b.n	8007624 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075ec:	4b09      	ldr	r3, [pc, #36]	; (8007614 <HAL_RCC_OscConfig+0x248>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075f2:	f7fa fee9 	bl	80023c8 <HAL_GetTick>
 80075f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075f8:	e00e      	b.n	8007618 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80075fa:	f7fa fee5 	bl	80023c8 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	2b02      	cmp	r3, #2
 8007606:	d907      	bls.n	8007618 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	e150      	b.n	80078ae <HAL_RCC_OscConfig+0x4e2>
 800760c:	40023800 	.word	0x40023800
 8007610:	42470000 	.word	0x42470000
 8007614:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007618:	4b88      	ldr	r3, [pc, #544]	; (800783c <HAL_RCC_OscConfig+0x470>)
 800761a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800761c:	f003 0302 	and.w	r3, r3, #2
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1ea      	bne.n	80075fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0304 	and.w	r3, r3, #4
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 8097 	beq.w	8007760 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007632:	2300      	movs	r3, #0
 8007634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007636:	4b81      	ldr	r3, [pc, #516]	; (800783c <HAL_RCC_OscConfig+0x470>)
 8007638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10f      	bne.n	8007662 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007642:	2300      	movs	r3, #0
 8007644:	60bb      	str	r3, [r7, #8]
 8007646:	4b7d      	ldr	r3, [pc, #500]	; (800783c <HAL_RCC_OscConfig+0x470>)
 8007648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764a:	4a7c      	ldr	r2, [pc, #496]	; (800783c <HAL_RCC_OscConfig+0x470>)
 800764c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007650:	6413      	str	r3, [r2, #64]	; 0x40
 8007652:	4b7a      	ldr	r3, [pc, #488]	; (800783c <HAL_RCC_OscConfig+0x470>)
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800765a:	60bb      	str	r3, [r7, #8]
 800765c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800765e:	2301      	movs	r3, #1
 8007660:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007662:	4b77      	ldr	r3, [pc, #476]	; (8007840 <HAL_RCC_OscConfig+0x474>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800766a:	2b00      	cmp	r3, #0
 800766c:	d118      	bne.n	80076a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800766e:	4b74      	ldr	r3, [pc, #464]	; (8007840 <HAL_RCC_OscConfig+0x474>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a73      	ldr	r2, [pc, #460]	; (8007840 <HAL_RCC_OscConfig+0x474>)
 8007674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800767a:	f7fa fea5 	bl	80023c8 <HAL_GetTick>
 800767e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007680:	e008      	b.n	8007694 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007682:	f7fa fea1 	bl	80023c8 <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	2b02      	cmp	r3, #2
 800768e:	d901      	bls.n	8007694 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e10c      	b.n	80078ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007694:	4b6a      	ldr	r3, [pc, #424]	; (8007840 <HAL_RCC_OscConfig+0x474>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800769c:	2b00      	cmp	r3, #0
 800769e:	d0f0      	beq.n	8007682 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d106      	bne.n	80076b6 <HAL_RCC_OscConfig+0x2ea>
 80076a8:	4b64      	ldr	r3, [pc, #400]	; (800783c <HAL_RCC_OscConfig+0x470>)
 80076aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076ac:	4a63      	ldr	r2, [pc, #396]	; (800783c <HAL_RCC_OscConfig+0x470>)
 80076ae:	f043 0301 	orr.w	r3, r3, #1
 80076b2:	6713      	str	r3, [r2, #112]	; 0x70
 80076b4:	e01c      	b.n	80076f0 <HAL_RCC_OscConfig+0x324>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	2b05      	cmp	r3, #5
 80076bc:	d10c      	bne.n	80076d8 <HAL_RCC_OscConfig+0x30c>
 80076be:	4b5f      	ldr	r3, [pc, #380]	; (800783c <HAL_RCC_OscConfig+0x470>)
 80076c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076c2:	4a5e      	ldr	r2, [pc, #376]	; (800783c <HAL_RCC_OscConfig+0x470>)
 80076c4:	f043 0304 	orr.w	r3, r3, #4
 80076c8:	6713      	str	r3, [r2, #112]	; 0x70
 80076ca:	4b5c      	ldr	r3, [pc, #368]	; (800783c <HAL_RCC_OscConfig+0x470>)
 80076cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076ce:	4a5b      	ldr	r2, [pc, #364]	; (800783c <HAL_RCC_OscConfig+0x470>)
 80076d0:	f043 0301 	orr.w	r3, r3, #1
 80076d4:	6713      	str	r3, [r2, #112]	; 0x70
 80076d6:	e00b      	b.n	80076f0 <HAL_RCC_OscConfig+0x324>
 80076d8:	4b58      	ldr	r3, [pc, #352]	; (800783c <HAL_RCC_OscConfig+0x470>)
 80076da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076dc:	4a57      	ldr	r2, [pc, #348]	; (800783c <HAL_RCC_OscConfig+0x470>)
 80076de:	f023 0301 	bic.w	r3, r3, #1
 80076e2:	6713      	str	r3, [r2, #112]	; 0x70
 80076e4:	4b55      	ldr	r3, [pc, #340]	; (800783c <HAL_RCC_OscConfig+0x470>)
 80076e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076e8:	4a54      	ldr	r2, [pc, #336]	; (800783c <HAL_RCC_OscConfig+0x470>)
 80076ea:	f023 0304 	bic.w	r3, r3, #4
 80076ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d015      	beq.n	8007724 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076f8:	f7fa fe66 	bl	80023c8 <HAL_GetTick>
 80076fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076fe:	e00a      	b.n	8007716 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007700:	f7fa fe62 	bl	80023c8 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	f241 3288 	movw	r2, #5000	; 0x1388
 800770e:	4293      	cmp	r3, r2
 8007710:	d901      	bls.n	8007716 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e0cb      	b.n	80078ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007716:	4b49      	ldr	r3, [pc, #292]	; (800783c <HAL_RCC_OscConfig+0x470>)
 8007718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800771a:	f003 0302 	and.w	r3, r3, #2
 800771e:	2b00      	cmp	r3, #0
 8007720:	d0ee      	beq.n	8007700 <HAL_RCC_OscConfig+0x334>
 8007722:	e014      	b.n	800774e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007724:	f7fa fe50 	bl	80023c8 <HAL_GetTick>
 8007728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800772a:	e00a      	b.n	8007742 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800772c:	f7fa fe4c 	bl	80023c8 <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	f241 3288 	movw	r2, #5000	; 0x1388
 800773a:	4293      	cmp	r3, r2
 800773c:	d901      	bls.n	8007742 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e0b5      	b.n	80078ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007742:	4b3e      	ldr	r3, [pc, #248]	; (800783c <HAL_RCC_OscConfig+0x470>)
 8007744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007746:	f003 0302 	and.w	r3, r3, #2
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1ee      	bne.n	800772c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800774e:	7dfb      	ldrb	r3, [r7, #23]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d105      	bne.n	8007760 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007754:	4b39      	ldr	r3, [pc, #228]	; (800783c <HAL_RCC_OscConfig+0x470>)
 8007756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007758:	4a38      	ldr	r2, [pc, #224]	; (800783c <HAL_RCC_OscConfig+0x470>)
 800775a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800775e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 80a1 	beq.w	80078ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800776a:	4b34      	ldr	r3, [pc, #208]	; (800783c <HAL_RCC_OscConfig+0x470>)
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f003 030c 	and.w	r3, r3, #12
 8007772:	2b08      	cmp	r3, #8
 8007774:	d05c      	beq.n	8007830 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	2b02      	cmp	r3, #2
 800777c:	d141      	bne.n	8007802 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800777e:	4b31      	ldr	r3, [pc, #196]	; (8007844 <HAL_RCC_OscConfig+0x478>)
 8007780:	2200      	movs	r2, #0
 8007782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007784:	f7fa fe20 	bl	80023c8 <HAL_GetTick>
 8007788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800778a:	e008      	b.n	800779e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800778c:	f7fa fe1c 	bl	80023c8 <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	2b02      	cmp	r3, #2
 8007798:	d901      	bls.n	800779e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	e087      	b.n	80078ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800779e:	4b27      	ldr	r3, [pc, #156]	; (800783c <HAL_RCC_OscConfig+0x470>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1f0      	bne.n	800778c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	69da      	ldr	r2, [r3, #28]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	431a      	orrs	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b8:	019b      	lsls	r3, r3, #6
 80077ba:	431a      	orrs	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c0:	085b      	lsrs	r3, r3, #1
 80077c2:	3b01      	subs	r3, #1
 80077c4:	041b      	lsls	r3, r3, #16
 80077c6:	431a      	orrs	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077cc:	061b      	lsls	r3, r3, #24
 80077ce:	491b      	ldr	r1, [pc, #108]	; (800783c <HAL_RCC_OscConfig+0x470>)
 80077d0:	4313      	orrs	r3, r2
 80077d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80077d4:	4b1b      	ldr	r3, [pc, #108]	; (8007844 <HAL_RCC_OscConfig+0x478>)
 80077d6:	2201      	movs	r2, #1
 80077d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077da:	f7fa fdf5 	bl	80023c8 <HAL_GetTick>
 80077de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077e0:	e008      	b.n	80077f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077e2:	f7fa fdf1 	bl	80023c8 <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d901      	bls.n	80077f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e05c      	b.n	80078ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077f4:	4b11      	ldr	r3, [pc, #68]	; (800783c <HAL_RCC_OscConfig+0x470>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d0f0      	beq.n	80077e2 <HAL_RCC_OscConfig+0x416>
 8007800:	e054      	b.n	80078ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007802:	4b10      	ldr	r3, [pc, #64]	; (8007844 <HAL_RCC_OscConfig+0x478>)
 8007804:	2200      	movs	r2, #0
 8007806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007808:	f7fa fdde 	bl	80023c8 <HAL_GetTick>
 800780c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800780e:	e008      	b.n	8007822 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007810:	f7fa fdda 	bl	80023c8 <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	2b02      	cmp	r3, #2
 800781c:	d901      	bls.n	8007822 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e045      	b.n	80078ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007822:	4b06      	ldr	r3, [pc, #24]	; (800783c <HAL_RCC_OscConfig+0x470>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1f0      	bne.n	8007810 <HAL_RCC_OscConfig+0x444>
 800782e:	e03d      	b.n	80078ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d107      	bne.n	8007848 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e038      	b.n	80078ae <HAL_RCC_OscConfig+0x4e2>
 800783c:	40023800 	.word	0x40023800
 8007840:	40007000 	.word	0x40007000
 8007844:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007848:	4b1b      	ldr	r3, [pc, #108]	; (80078b8 <HAL_RCC_OscConfig+0x4ec>)
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d028      	beq.n	80078a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007860:	429a      	cmp	r2, r3
 8007862:	d121      	bne.n	80078a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800786e:	429a      	cmp	r2, r3
 8007870:	d11a      	bne.n	80078a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007878:	4013      	ands	r3, r2
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800787e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007880:	4293      	cmp	r3, r2
 8007882:	d111      	bne.n	80078a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788e:	085b      	lsrs	r3, r3, #1
 8007890:	3b01      	subs	r3, #1
 8007892:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007894:	429a      	cmp	r2, r3
 8007896:	d107      	bne.n	80078a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d001      	beq.n	80078ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e000      	b.n	80078ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3718      	adds	r7, #24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	40023800 	.word	0x40023800

080078bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e0cc      	b.n	8007a6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80078d0:	4b68      	ldr	r3, [pc, #416]	; (8007a74 <HAL_RCC_ClockConfig+0x1b8>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0307 	and.w	r3, r3, #7
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d90c      	bls.n	80078f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078de:	4b65      	ldr	r3, [pc, #404]	; (8007a74 <HAL_RCC_ClockConfig+0x1b8>)
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	b2d2      	uxtb	r2, r2
 80078e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078e6:	4b63      	ldr	r3, [pc, #396]	; (8007a74 <HAL_RCC_ClockConfig+0x1b8>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0307 	and.w	r3, r3, #7
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d001      	beq.n	80078f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e0b8      	b.n	8007a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0302 	and.w	r3, r3, #2
 8007900:	2b00      	cmp	r3, #0
 8007902:	d020      	beq.n	8007946 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0304 	and.w	r3, r3, #4
 800790c:	2b00      	cmp	r3, #0
 800790e:	d005      	beq.n	800791c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007910:	4b59      	ldr	r3, [pc, #356]	; (8007a78 <HAL_RCC_ClockConfig+0x1bc>)
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	4a58      	ldr	r2, [pc, #352]	; (8007a78 <HAL_RCC_ClockConfig+0x1bc>)
 8007916:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800791a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 0308 	and.w	r3, r3, #8
 8007924:	2b00      	cmp	r3, #0
 8007926:	d005      	beq.n	8007934 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007928:	4b53      	ldr	r3, [pc, #332]	; (8007a78 <HAL_RCC_ClockConfig+0x1bc>)
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	4a52      	ldr	r2, [pc, #328]	; (8007a78 <HAL_RCC_ClockConfig+0x1bc>)
 800792e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007934:	4b50      	ldr	r3, [pc, #320]	; (8007a78 <HAL_RCC_ClockConfig+0x1bc>)
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	494d      	ldr	r1, [pc, #308]	; (8007a78 <HAL_RCC_ClockConfig+0x1bc>)
 8007942:	4313      	orrs	r3, r2
 8007944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	2b00      	cmp	r3, #0
 8007950:	d044      	beq.n	80079dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d107      	bne.n	800796a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800795a:	4b47      	ldr	r3, [pc, #284]	; (8007a78 <HAL_RCC_ClockConfig+0x1bc>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007962:	2b00      	cmp	r3, #0
 8007964:	d119      	bne.n	800799a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e07f      	b.n	8007a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	2b02      	cmp	r3, #2
 8007970:	d003      	beq.n	800797a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007976:	2b03      	cmp	r3, #3
 8007978:	d107      	bne.n	800798a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800797a:	4b3f      	ldr	r3, [pc, #252]	; (8007a78 <HAL_RCC_ClockConfig+0x1bc>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007982:	2b00      	cmp	r3, #0
 8007984:	d109      	bne.n	800799a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e06f      	b.n	8007a6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800798a:	4b3b      	ldr	r3, [pc, #236]	; (8007a78 <HAL_RCC_ClockConfig+0x1bc>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 0302 	and.w	r3, r3, #2
 8007992:	2b00      	cmp	r3, #0
 8007994:	d101      	bne.n	800799a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e067      	b.n	8007a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800799a:	4b37      	ldr	r3, [pc, #220]	; (8007a78 <HAL_RCC_ClockConfig+0x1bc>)
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f023 0203 	bic.w	r2, r3, #3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	4934      	ldr	r1, [pc, #208]	; (8007a78 <HAL_RCC_ClockConfig+0x1bc>)
 80079a8:	4313      	orrs	r3, r2
 80079aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80079ac:	f7fa fd0c 	bl	80023c8 <HAL_GetTick>
 80079b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079b2:	e00a      	b.n	80079ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079b4:	f7fa fd08 	bl	80023c8 <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	f241 3288 	movw	r2, #5000	; 0x1388
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d901      	bls.n	80079ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e04f      	b.n	8007a6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079ca:	4b2b      	ldr	r3, [pc, #172]	; (8007a78 <HAL_RCC_ClockConfig+0x1bc>)
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f003 020c 	and.w	r2, r3, #12
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	429a      	cmp	r2, r3
 80079da:	d1eb      	bne.n	80079b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80079dc:	4b25      	ldr	r3, [pc, #148]	; (8007a74 <HAL_RCC_ClockConfig+0x1b8>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 0307 	and.w	r3, r3, #7
 80079e4:	683a      	ldr	r2, [r7, #0]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d20c      	bcs.n	8007a04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079ea:	4b22      	ldr	r3, [pc, #136]	; (8007a74 <HAL_RCC_ClockConfig+0x1b8>)
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	b2d2      	uxtb	r2, r2
 80079f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079f2:	4b20      	ldr	r3, [pc, #128]	; (8007a74 <HAL_RCC_ClockConfig+0x1b8>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0307 	and.w	r3, r3, #7
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d001      	beq.n	8007a04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e032      	b.n	8007a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0304 	and.w	r3, r3, #4
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d008      	beq.n	8007a22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a10:	4b19      	ldr	r3, [pc, #100]	; (8007a78 <HAL_RCC_ClockConfig+0x1bc>)
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	4916      	ldr	r1, [pc, #88]	; (8007a78 <HAL_RCC_ClockConfig+0x1bc>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0308 	and.w	r3, r3, #8
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d009      	beq.n	8007a42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a2e:	4b12      	ldr	r3, [pc, #72]	; (8007a78 <HAL_RCC_ClockConfig+0x1bc>)
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	00db      	lsls	r3, r3, #3
 8007a3c:	490e      	ldr	r1, [pc, #56]	; (8007a78 <HAL_RCC_ClockConfig+0x1bc>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007a42:	f000 f821 	bl	8007a88 <HAL_RCC_GetSysClockFreq>
 8007a46:	4602      	mov	r2, r0
 8007a48:	4b0b      	ldr	r3, [pc, #44]	; (8007a78 <HAL_RCC_ClockConfig+0x1bc>)
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	091b      	lsrs	r3, r3, #4
 8007a4e:	f003 030f 	and.w	r3, r3, #15
 8007a52:	490a      	ldr	r1, [pc, #40]	; (8007a7c <HAL_RCC_ClockConfig+0x1c0>)
 8007a54:	5ccb      	ldrb	r3, [r1, r3]
 8007a56:	fa22 f303 	lsr.w	r3, r2, r3
 8007a5a:	4a09      	ldr	r2, [pc, #36]	; (8007a80 <HAL_RCC_ClockConfig+0x1c4>)
 8007a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007a5e:	4b09      	ldr	r3, [pc, #36]	; (8007a84 <HAL_RCC_ClockConfig+0x1c8>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fa fc6c 	bl	8002340 <HAL_InitTick>

  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	40023c00 	.word	0x40023c00
 8007a78:	40023800 	.word	0x40023800
 8007a7c:	0800f2a8 	.word	0x0800f2a8
 8007a80:	20000000 	.word	0x20000000
 8007a84:	20000070 	.word	0x20000070

08007a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a8c:	b094      	sub	sp, #80	; 0x50
 8007a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	647b      	str	r3, [r7, #68]	; 0x44
 8007a94:	2300      	movs	r3, #0
 8007a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a98:	2300      	movs	r3, #0
 8007a9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007aa0:	4b79      	ldr	r3, [pc, #484]	; (8007c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f003 030c 	and.w	r3, r3, #12
 8007aa8:	2b08      	cmp	r3, #8
 8007aaa:	d00d      	beq.n	8007ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8007aac:	2b08      	cmp	r3, #8
 8007aae:	f200 80e1 	bhi.w	8007c74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d002      	beq.n	8007abc <HAL_RCC_GetSysClockFreq+0x34>
 8007ab6:	2b04      	cmp	r3, #4
 8007ab8:	d003      	beq.n	8007ac2 <HAL_RCC_GetSysClockFreq+0x3a>
 8007aba:	e0db      	b.n	8007c74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007abc:	4b73      	ldr	r3, [pc, #460]	; (8007c8c <HAL_RCC_GetSysClockFreq+0x204>)
 8007abe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007ac0:	e0db      	b.n	8007c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ac2:	4b73      	ldr	r3, [pc, #460]	; (8007c90 <HAL_RCC_GetSysClockFreq+0x208>)
 8007ac4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007ac6:	e0d8      	b.n	8007c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ac8:	4b6f      	ldr	r3, [pc, #444]	; (8007c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ad0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ad2:	4b6d      	ldr	r3, [pc, #436]	; (8007c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d063      	beq.n	8007ba6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ade:	4b6a      	ldr	r3, [pc, #424]	; (8007c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	099b      	lsrs	r3, r3, #6
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ae8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af0:	633b      	str	r3, [r7, #48]	; 0x30
 8007af2:	2300      	movs	r3, #0
 8007af4:	637b      	str	r3, [r7, #52]	; 0x34
 8007af6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007afa:	4622      	mov	r2, r4
 8007afc:	462b      	mov	r3, r5
 8007afe:	f04f 0000 	mov.w	r0, #0
 8007b02:	f04f 0100 	mov.w	r1, #0
 8007b06:	0159      	lsls	r1, r3, #5
 8007b08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b0c:	0150      	lsls	r0, r2, #5
 8007b0e:	4602      	mov	r2, r0
 8007b10:	460b      	mov	r3, r1
 8007b12:	4621      	mov	r1, r4
 8007b14:	1a51      	subs	r1, r2, r1
 8007b16:	6139      	str	r1, [r7, #16]
 8007b18:	4629      	mov	r1, r5
 8007b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8007b1e:	617b      	str	r3, [r7, #20]
 8007b20:	f04f 0200 	mov.w	r2, #0
 8007b24:	f04f 0300 	mov.w	r3, #0
 8007b28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b2c:	4659      	mov	r1, fp
 8007b2e:	018b      	lsls	r3, r1, #6
 8007b30:	4651      	mov	r1, sl
 8007b32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007b36:	4651      	mov	r1, sl
 8007b38:	018a      	lsls	r2, r1, #6
 8007b3a:	4651      	mov	r1, sl
 8007b3c:	ebb2 0801 	subs.w	r8, r2, r1
 8007b40:	4659      	mov	r1, fp
 8007b42:	eb63 0901 	sbc.w	r9, r3, r1
 8007b46:	f04f 0200 	mov.w	r2, #0
 8007b4a:	f04f 0300 	mov.w	r3, #0
 8007b4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b5a:	4690      	mov	r8, r2
 8007b5c:	4699      	mov	r9, r3
 8007b5e:	4623      	mov	r3, r4
 8007b60:	eb18 0303 	adds.w	r3, r8, r3
 8007b64:	60bb      	str	r3, [r7, #8]
 8007b66:	462b      	mov	r3, r5
 8007b68:	eb49 0303 	adc.w	r3, r9, r3
 8007b6c:	60fb      	str	r3, [r7, #12]
 8007b6e:	f04f 0200 	mov.w	r2, #0
 8007b72:	f04f 0300 	mov.w	r3, #0
 8007b76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007b7a:	4629      	mov	r1, r5
 8007b7c:	024b      	lsls	r3, r1, #9
 8007b7e:	4621      	mov	r1, r4
 8007b80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007b84:	4621      	mov	r1, r4
 8007b86:	024a      	lsls	r2, r1, #9
 8007b88:	4610      	mov	r0, r2
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b8e:	2200      	movs	r2, #0
 8007b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b98:	f7f8 fb1e 	bl	80001d8 <__aeabi_uldivmod>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ba4:	e058      	b.n	8007c58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ba6:	4b38      	ldr	r3, [pc, #224]	; (8007c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	099b      	lsrs	r3, r3, #6
 8007bac:	2200      	movs	r2, #0
 8007bae:	4618      	mov	r0, r3
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007bb6:	623b      	str	r3, [r7, #32]
 8007bb8:	2300      	movs	r3, #0
 8007bba:	627b      	str	r3, [r7, #36]	; 0x24
 8007bbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007bc0:	4642      	mov	r2, r8
 8007bc2:	464b      	mov	r3, r9
 8007bc4:	f04f 0000 	mov.w	r0, #0
 8007bc8:	f04f 0100 	mov.w	r1, #0
 8007bcc:	0159      	lsls	r1, r3, #5
 8007bce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007bd2:	0150      	lsls	r0, r2, #5
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	4641      	mov	r1, r8
 8007bda:	ebb2 0a01 	subs.w	sl, r2, r1
 8007bde:	4649      	mov	r1, r9
 8007be0:	eb63 0b01 	sbc.w	fp, r3, r1
 8007be4:	f04f 0200 	mov.w	r2, #0
 8007be8:	f04f 0300 	mov.w	r3, #0
 8007bec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007bf0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007bf4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007bf8:	ebb2 040a 	subs.w	r4, r2, sl
 8007bfc:	eb63 050b 	sbc.w	r5, r3, fp
 8007c00:	f04f 0200 	mov.w	r2, #0
 8007c04:	f04f 0300 	mov.w	r3, #0
 8007c08:	00eb      	lsls	r3, r5, #3
 8007c0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c0e:	00e2      	lsls	r2, r4, #3
 8007c10:	4614      	mov	r4, r2
 8007c12:	461d      	mov	r5, r3
 8007c14:	4643      	mov	r3, r8
 8007c16:	18e3      	adds	r3, r4, r3
 8007c18:	603b      	str	r3, [r7, #0]
 8007c1a:	464b      	mov	r3, r9
 8007c1c:	eb45 0303 	adc.w	r3, r5, r3
 8007c20:	607b      	str	r3, [r7, #4]
 8007c22:	f04f 0200 	mov.w	r2, #0
 8007c26:	f04f 0300 	mov.w	r3, #0
 8007c2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c2e:	4629      	mov	r1, r5
 8007c30:	028b      	lsls	r3, r1, #10
 8007c32:	4621      	mov	r1, r4
 8007c34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c38:	4621      	mov	r1, r4
 8007c3a:	028a      	lsls	r2, r1, #10
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c42:	2200      	movs	r2, #0
 8007c44:	61bb      	str	r3, [r7, #24]
 8007c46:	61fa      	str	r2, [r7, #28]
 8007c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c4c:	f7f8 fac4 	bl	80001d8 <__aeabi_uldivmod>
 8007c50:	4602      	mov	r2, r0
 8007c52:	460b      	mov	r3, r1
 8007c54:	4613      	mov	r3, r2
 8007c56:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007c58:	4b0b      	ldr	r3, [pc, #44]	; (8007c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	0c1b      	lsrs	r3, r3, #16
 8007c5e:	f003 0303 	and.w	r3, r3, #3
 8007c62:	3301      	adds	r3, #1
 8007c64:	005b      	lsls	r3, r3, #1
 8007c66:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007c68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007c72:	e002      	b.n	8007c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c74:	4b05      	ldr	r3, [pc, #20]	; (8007c8c <HAL_RCC_GetSysClockFreq+0x204>)
 8007c76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3750      	adds	r7, #80	; 0x50
 8007c80:	46bd      	mov	sp, r7
 8007c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c86:	bf00      	nop
 8007c88:	40023800 	.word	0x40023800
 8007c8c:	00f42400 	.word	0x00f42400
 8007c90:	007a1200 	.word	0x007a1200

08007c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c94:	b480      	push	{r7}
 8007c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c98:	4b03      	ldr	r3, [pc, #12]	; (8007ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	20000000 	.word	0x20000000

08007cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007cb0:	f7ff fff0 	bl	8007c94 <HAL_RCC_GetHCLKFreq>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	4b05      	ldr	r3, [pc, #20]	; (8007ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	0a9b      	lsrs	r3, r3, #10
 8007cbc:	f003 0307 	and.w	r3, r3, #7
 8007cc0:	4903      	ldr	r1, [pc, #12]	; (8007cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cc2:	5ccb      	ldrb	r3, [r1, r3]
 8007cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	40023800 	.word	0x40023800
 8007cd0:	0800f2b8 	.word	0x0800f2b8

08007cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d105      	bne.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d038      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007cfc:	4b68      	ldr	r3, [pc, #416]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007cfe:	2200      	movs	r2, #0
 8007d00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007d02:	f7fa fb61 	bl	80023c8 <HAL_GetTick>
 8007d06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d08:	e008      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007d0a:	f7fa fb5d 	bl	80023c8 <HAL_GetTick>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	d901      	bls.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e0bd      	b.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d1c:	4b61      	ldr	r3, [pc, #388]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1f0      	bne.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	019b      	lsls	r3, r3, #6
 8007d32:	431a      	orrs	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	071b      	lsls	r3, r3, #28
 8007d3a:	495a      	ldr	r1, [pc, #360]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007d42:	4b57      	ldr	r3, [pc, #348]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007d44:	2201      	movs	r2, #1
 8007d46:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007d48:	f7fa fb3e 	bl	80023c8 <HAL_GetTick>
 8007d4c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d4e:	e008      	b.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007d50:	f7fa fb3a 	bl	80023c8 <HAL_GetTick>
 8007d54:	4602      	mov	r2, r0
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d901      	bls.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e09a      	b.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d62:	4b50      	ldr	r3, [pc, #320]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d0f0      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0302 	and.w	r3, r3, #2
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f000 8083 	beq.w	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	4b48      	ldr	r3, [pc, #288]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d84:	4a47      	ldr	r2, [pc, #284]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8007d8c:	4b45      	ldr	r3, [pc, #276]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d94:	60fb      	str	r3, [r7, #12]
 8007d96:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007d98:	4b43      	ldr	r3, [pc, #268]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a42      	ldr	r2, [pc, #264]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007da2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007da4:	f7fa fb10 	bl	80023c8 <HAL_GetTick>
 8007da8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007daa:	e008      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007dac:	f7fa fb0c 	bl	80023c8 <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d901      	bls.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e06c      	b.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007dbe:	4b3a      	ldr	r3, [pc, #232]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d0f0      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007dca:	4b36      	ldr	r3, [pc, #216]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dd2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d02f      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d028      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007de8:	4b2e      	ldr	r3, [pc, #184]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007df0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007df2:	4b2e      	ldr	r3, [pc, #184]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007df4:	2201      	movs	r2, #1
 8007df6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007df8:	4b2c      	ldr	r3, [pc, #176]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007dfe:	4a29      	ldr	r2, [pc, #164]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007e04:	4b27      	ldr	r3, [pc, #156]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d114      	bne.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007e10:	f7fa fada 	bl	80023c8 <HAL_GetTick>
 8007e14:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e16:	e00a      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e18:	f7fa fad6 	bl	80023c8 <HAL_GetTick>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d901      	bls.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e034      	b.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e2e:	4b1d      	ldr	r3, [pc, #116]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e32:	f003 0302 	and.w	r3, r3, #2
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d0ee      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e46:	d10d      	bne.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8007e48:	4b16      	ldr	r3, [pc, #88]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e5c:	4911      	ldr	r1, [pc, #68]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	608b      	str	r3, [r1, #8]
 8007e62:	e005      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8007e64:	4b0f      	ldr	r3, [pc, #60]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	4a0e      	ldr	r2, [pc, #56]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007e6e:	6093      	str	r3, [r2, #8]
 8007e70:	4b0c      	ldr	r3, [pc, #48]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e7c:	4909      	ldr	r1, [pc, #36]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 0308 	and.w	r3, r3, #8
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	7d1a      	ldrb	r2, [r3, #20]
 8007e92:	4b07      	ldr	r3, [pc, #28]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007e94:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3718      	adds	r7, #24
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	42470068 	.word	0x42470068
 8007ea4:	40023800 	.word	0x40023800
 8007ea8:	40007000 	.word	0x40007000
 8007eac:	42470e40 	.word	0x42470e40
 8007eb0:	424711e0 	.word	0x424711e0

08007eb4 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2203      	movs	r2, #3
 8007ec0:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8007ec2:	4b1c      	ldr	r3, [pc, #112]	; (8007f34 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ec8:	099b      	lsrs	r3, r3, #6
 8007eca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007ed2:	4b18      	ldr	r3, [pc, #96]	; (8007f34 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ed8:	0f1b      	lsrs	r3, r3, #28
 8007eda:	f003 0207 	and.w	r2, r3, #7
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 8007ee2:	4b14      	ldr	r3, [pc, #80]	; (8007f34 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ee8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007ef0:	4b10      	ldr	r3, [pc, #64]	; (8007f34 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007ef8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8007efa:	4b0e      	ldr	r3, [pc, #56]	; (8007f34 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007efe:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	431a      	orrs	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 8007f0a:	4b0a      	ldr	r3, [pc, #40]	; (8007f34 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d103      	bne.n	8007f20 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8007f1e:	e002      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	751a      	strb	r2, [r3, #20]
}
 8007f26:	bf00      	nop
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	40023800 	.word	0x40023800

08007f38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b087      	sub	sp, #28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007f40:	2300      	movs	r3, #0
 8007f42:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007f44:	2300      	movs	r3, #0
 8007f46:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d140      	bne.n	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007f56:	4b24      	ldr	r3, [pc, #144]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f5e:	60fb      	str	r3, [r7, #12]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d005      	beq.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d131      	bne.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007f6c:	4b1f      	ldr	r3, [pc, #124]	; (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007f6e:	617b      	str	r3, [r7, #20]
          break;
 8007f70:	e031      	b.n	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007f72:	4b1d      	ldr	r3, [pc, #116]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f7e:	d109      	bne.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007f80:	4b19      	ldr	r3, [pc, #100]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f8a:	4a19      	ldr	r2, [pc, #100]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f90:	613b      	str	r3, [r7, #16]
 8007f92:	e008      	b.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007f94:	4b14      	ldr	r3, [pc, #80]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f9e:	4a15      	ldr	r2, [pc, #84]	; (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa4:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007fa6:	4b10      	ldr	r3, [pc, #64]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fac:	099b      	lsrs	r3, r3, #6
 8007fae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	fb02 f303 	mul.w	r3, r2, r3
 8007fb8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007fba:	4b0b      	ldr	r3, [pc, #44]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fc0:	0f1b      	lsrs	r3, r3, #28
 8007fc2:	f003 0307 	and.w	r3, r3, #7
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fcc:	617b      	str	r3, [r7, #20]
          break;
 8007fce:	e002      	b.n	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	617b      	str	r3, [r7, #20]
          break;
 8007fd4:	bf00      	nop
        }
      }
      break;
 8007fd6:	bf00      	nop
    }
  }
  return frequency;
 8007fd8:	697b      	ldr	r3, [r7, #20]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	371c      	adds	r7, #28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	40023800 	.word	0x40023800
 8007fec:	00bb8000 	.word	0x00bb8000
 8007ff0:	007a1200 	.word	0x007a1200
 8007ff4:	00f42400 	.word	0x00f42400

08007ff8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ff8:	b084      	sub	sp, #16
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	f107 001c 	add.w	r0, r7, #28
 8008006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800c:	2b01      	cmp	r3, #1
 800800e:	d122      	bne.n	8008056 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008014:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008024:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800803a:	2b01      	cmp	r3, #1
 800803c:	d105      	bne.n	800804a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f9c0 	bl	80083d0 <USB_CoreReset>
 8008050:	4603      	mov	r3, r0
 8008052:	73fb      	strb	r3, [r7, #15]
 8008054:	e01a      	b.n	800808c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f9b4 	bl	80083d0 <USB_CoreReset>
 8008068:	4603      	mov	r3, r0
 800806a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800806c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800806e:	2b00      	cmp	r3, #0
 8008070:	d106      	bne.n	8008080 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008076:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	639a      	str	r2, [r3, #56]	; 0x38
 800807e:	e005      	b.n	800808c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008084:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800808c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808e:	2b01      	cmp	r3, #1
 8008090:	d10b      	bne.n	80080aa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f043 0206 	orr.w	r2, r3, #6
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f043 0220 	orr.w	r2, r3, #32
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80080b6:	b004      	add	sp, #16
 80080b8:	4770      	bx	lr

080080ba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80080ba:	b480      	push	{r7}
 80080bc:	b083      	sub	sp, #12
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	f043 0201 	orr.w	r2, r3, #1
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	f023 0201 	bic.w	r2, r3, #1
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b084      	sub	sp, #16
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	460b      	mov	r3, r1
 8008108:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800811a:	78fb      	ldrb	r3, [r7, #3]
 800811c:	2b01      	cmp	r3, #1
 800811e:	d115      	bne.n	800814c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800812c:	2001      	movs	r0, #1
 800812e:	f7fa f957 	bl	80023e0 <HAL_Delay>
      ms++;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	3301      	adds	r3, #1
 8008136:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f93a 	bl	80083b2 <USB_GetMode>
 800813e:	4603      	mov	r3, r0
 8008140:	2b01      	cmp	r3, #1
 8008142:	d01e      	beq.n	8008182 <USB_SetCurrentMode+0x84>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2b31      	cmp	r3, #49	; 0x31
 8008148:	d9f0      	bls.n	800812c <USB_SetCurrentMode+0x2e>
 800814a:	e01a      	b.n	8008182 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800814c:	78fb      	ldrb	r3, [r7, #3]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d115      	bne.n	800817e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800815e:	2001      	movs	r0, #1
 8008160:	f7fa f93e 	bl	80023e0 <HAL_Delay>
      ms++;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	3301      	adds	r3, #1
 8008168:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f921 	bl	80083b2 <USB_GetMode>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d005      	beq.n	8008182 <USB_SetCurrentMode+0x84>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2b31      	cmp	r3, #49	; 0x31
 800817a:	d9f0      	bls.n	800815e <USB_SetCurrentMode+0x60>
 800817c:	e001      	b.n	8008182 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e005      	b.n	800818e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2b32      	cmp	r3, #50	; 0x32
 8008186:	d101      	bne.n	800818c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e000      	b.n	800818e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
	...

08008198 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80081a2:	2300      	movs	r3, #0
 80081a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	3301      	adds	r3, #1
 80081aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	4a13      	ldr	r2, [pc, #76]	; (80081fc <USB_FlushTxFifo+0x64>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d901      	bls.n	80081b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e01b      	b.n	80081f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	daf2      	bge.n	80081a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80081c0:	2300      	movs	r3, #0
 80081c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	019b      	lsls	r3, r3, #6
 80081c8:	f043 0220 	orr.w	r2, r3, #32
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	3301      	adds	r3, #1
 80081d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	4a08      	ldr	r2, [pc, #32]	; (80081fc <USB_FlushTxFifo+0x64>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d901      	bls.n	80081e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e006      	b.n	80081f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	f003 0320 	and.w	r3, r3, #32
 80081ea:	2b20      	cmp	r3, #32
 80081ec:	d0f0      	beq.n	80081d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr
 80081fc:	00030d40 	.word	0x00030d40

08008200 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008208:	2300      	movs	r3, #0
 800820a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	3301      	adds	r3, #1
 8008210:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	4a11      	ldr	r2, [pc, #68]	; (800825c <USB_FlushRxFifo+0x5c>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d901      	bls.n	800821e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800821a:	2303      	movs	r3, #3
 800821c:	e018      	b.n	8008250 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	2b00      	cmp	r3, #0
 8008224:	daf2      	bge.n	800820c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008226:	2300      	movs	r3, #0
 8008228:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2210      	movs	r2, #16
 800822e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	3301      	adds	r3, #1
 8008234:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	4a08      	ldr	r2, [pc, #32]	; (800825c <USB_FlushRxFifo+0x5c>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d901      	bls.n	8008242 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e006      	b.n	8008250 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	f003 0310 	and.w	r3, r3, #16
 800824a:	2b10      	cmp	r3, #16
 800824c:	d0f0      	beq.n	8008230 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3714      	adds	r7, #20
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	00030d40 	.word	0x00030d40

08008260 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008260:	b480      	push	{r7}
 8008262:	b089      	sub	sp, #36	; 0x24
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	4611      	mov	r1, r2
 800826c:	461a      	mov	r2, r3
 800826e:	460b      	mov	r3, r1
 8008270:	71fb      	strb	r3, [r7, #7]
 8008272:	4613      	mov	r3, r2
 8008274:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800827e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008282:	2b00      	cmp	r3, #0
 8008284:	d123      	bne.n	80082ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008286:	88bb      	ldrh	r3, [r7, #4]
 8008288:	3303      	adds	r3, #3
 800828a:	089b      	lsrs	r3, r3, #2
 800828c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800828e:	2300      	movs	r3, #0
 8008290:	61bb      	str	r3, [r7, #24]
 8008292:	e018      	b.n	80082c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008294:	79fb      	ldrb	r3, [r7, #7]
 8008296:	031a      	lsls	r2, r3, #12
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	4413      	add	r3, r2
 800829c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082a0:	461a      	mov	r2, r3
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	3301      	adds	r3, #1
 80082ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	3301      	adds	r3, #1
 80082b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	3301      	adds	r3, #1
 80082b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	3301      	adds	r3, #1
 80082be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	3301      	adds	r3, #1
 80082c4:	61bb      	str	r3, [r7, #24]
 80082c6:	69ba      	ldr	r2, [r7, #24]
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d3e2      	bcc.n	8008294 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3724      	adds	r7, #36	; 0x24
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80082dc:	b480      	push	{r7}
 80082de:	b08b      	sub	sp, #44	; 0x2c
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	4613      	mov	r3, r2
 80082e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80082f2:	88fb      	ldrh	r3, [r7, #6]
 80082f4:	089b      	lsrs	r3, r3, #2
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80082fa:	88fb      	ldrh	r3, [r7, #6]
 80082fc:	f003 0303 	and.w	r3, r3, #3
 8008300:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008302:	2300      	movs	r3, #0
 8008304:	623b      	str	r3, [r7, #32]
 8008306:	e014      	b.n	8008332 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008312:	601a      	str	r2, [r3, #0]
    pDest++;
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	3301      	adds	r3, #1
 8008318:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831c:	3301      	adds	r3, #1
 800831e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008322:	3301      	adds	r3, #1
 8008324:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008328:	3301      	adds	r3, #1
 800832a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	3301      	adds	r3, #1
 8008330:	623b      	str	r3, [r7, #32]
 8008332:	6a3a      	ldr	r2, [r7, #32]
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	429a      	cmp	r2, r3
 8008338:	d3e6      	bcc.n	8008308 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800833a:	8bfb      	ldrh	r3, [r7, #30]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d01e      	beq.n	800837e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008340:	2300      	movs	r3, #0
 8008342:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800834a:	461a      	mov	r2, r3
 800834c:	f107 0310 	add.w	r3, r7, #16
 8008350:	6812      	ldr	r2, [r2, #0]
 8008352:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	b2db      	uxtb	r3, r3
 800835a:	00db      	lsls	r3, r3, #3
 800835c:	fa22 f303 	lsr.w	r3, r2, r3
 8008360:	b2da      	uxtb	r2, r3
 8008362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008364:	701a      	strb	r2, [r3, #0]
      i++;
 8008366:	6a3b      	ldr	r3, [r7, #32]
 8008368:	3301      	adds	r3, #1
 800836a:	623b      	str	r3, [r7, #32]
      pDest++;
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	3301      	adds	r3, #1
 8008370:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008372:	8bfb      	ldrh	r3, [r7, #30]
 8008374:	3b01      	subs	r3, #1
 8008376:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008378:	8bfb      	ldrh	r3, [r7, #30]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1ea      	bne.n	8008354 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008380:	4618      	mov	r0, r3
 8008382:	372c      	adds	r7, #44	; 0x2c
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	695b      	ldr	r3, [r3, #20]
 8008398:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	68fa      	ldr	r2, [r7, #12]
 80083a0:	4013      	ands	r3, r2
 80083a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80083a4:	68fb      	ldr	r3, [r7, #12]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b083      	sub	sp, #12
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	f003 0301 	and.w	r3, r3, #1
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	370c      	adds	r7, #12
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
	...

080083d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083d8:	2300      	movs	r3, #0
 80083da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	3301      	adds	r3, #1
 80083e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	4a13      	ldr	r2, [pc, #76]	; (8008434 <USB_CoreReset+0x64>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d901      	bls.n	80083ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80083ea:	2303      	movs	r3, #3
 80083ec:	e01b      	b.n	8008426 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	daf2      	bge.n	80083dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80083f6:	2300      	movs	r3, #0
 80083f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	f043 0201 	orr.w	r2, r3, #1
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	3301      	adds	r3, #1
 800840a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	4a09      	ldr	r2, [pc, #36]	; (8008434 <USB_CoreReset+0x64>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d901      	bls.n	8008418 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008414:	2303      	movs	r3, #3
 8008416:	e006      	b.n	8008426 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	f003 0301 	and.w	r3, r3, #1
 8008420:	2b01      	cmp	r3, #1
 8008422:	d0f0      	beq.n	8008406 <USB_CoreReset+0x36>

  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	00030d40 	.word	0x00030d40

08008438 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008438:	b084      	sub	sp, #16
 800843a:	b580      	push	{r7, lr}
 800843c:	b086      	sub	sp, #24
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008446:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008458:	461a      	mov	r2, r3
 800845a:	2300      	movs	r3, #0
 800845c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008462:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800848a:	2b00      	cmp	r3, #0
 800848c:	d018      	beq.n	80084c0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800848e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008490:	2b01      	cmp	r3, #1
 8008492:	d10a      	bne.n	80084aa <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80084a2:	f043 0304 	orr.w	r3, r3, #4
 80084a6:	6013      	str	r3, [r2, #0]
 80084a8:	e014      	b.n	80084d4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80084b8:	f023 0304 	bic.w	r3, r3, #4
 80084bc:	6013      	str	r3, [r2, #0]
 80084be:	e009      	b.n	80084d4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80084ce:	f023 0304 	bic.w	r3, r3, #4
 80084d2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80084d4:	2110      	movs	r1, #16
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f7ff fe5e 	bl	8008198 <USB_FlushTxFifo>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7ff fe8a 	bl	8008200 <USB_FlushRxFifo>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d001      	beq.n	80084f6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80084f6:	2300      	movs	r3, #0
 80084f8:	613b      	str	r3, [r7, #16]
 80084fa:	e015      	b.n	8008528 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	015a      	lsls	r2, r3, #5
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	4413      	add	r3, r2
 8008504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008508:	461a      	mov	r2, r3
 800850a:	f04f 33ff 	mov.w	r3, #4294967295
 800850e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	4413      	add	r3, r2
 8008518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800851c:	461a      	mov	r2, r3
 800851e:	2300      	movs	r3, #0
 8008520:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	3301      	adds	r3, #1
 8008526:	613b      	str	r3, [r7, #16]
 8008528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	429a      	cmp	r2, r3
 800852e:	d3e5      	bcc.n	80084fc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f04f 32ff 	mov.w	r2, #4294967295
 800853c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00b      	beq.n	8008562 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008550:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a13      	ldr	r2, [pc, #76]	; (80085a4 <USB_HostInit+0x16c>)
 8008556:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a13      	ldr	r2, [pc, #76]	; (80085a8 <USB_HostInit+0x170>)
 800855c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008560:	e009      	b.n	8008576 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2280      	movs	r2, #128	; 0x80
 8008566:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a10      	ldr	r2, [pc, #64]	; (80085ac <USB_HostInit+0x174>)
 800856c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a0f      	ldr	r2, [pc, #60]	; (80085b0 <USB_HostInit+0x178>)
 8008572:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008578:	2b00      	cmp	r3, #0
 800857a:	d105      	bne.n	8008588 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	f043 0210 	orr.w	r2, r3, #16
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	699a      	ldr	r2, [r3, #24]
 800858c:	4b09      	ldr	r3, [pc, #36]	; (80085b4 <USB_HostInit+0x17c>)
 800858e:	4313      	orrs	r3, r2
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008594:	7dfb      	ldrb	r3, [r7, #23]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3718      	adds	r7, #24
 800859a:	46bd      	mov	sp, r7
 800859c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085a0:	b004      	add	sp, #16
 80085a2:	4770      	bx	lr
 80085a4:	01000200 	.word	0x01000200
 80085a8:	00e00300 	.word	0x00e00300
 80085ac:	00600080 	.word	0x00600080
 80085b0:	004000e0 	.word	0x004000e0
 80085b4:	a3200008 	.word	0xa3200008

080085b8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	460b      	mov	r3, r1
 80085c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085d6:	f023 0303 	bic.w	r3, r3, #3
 80085da:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	78fb      	ldrb	r3, [r7, #3]
 80085e6:	f003 0303 	and.w	r3, r3, #3
 80085ea:	68f9      	ldr	r1, [r7, #12]
 80085ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80085f0:	4313      	orrs	r3, r2
 80085f2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80085f4:	78fb      	ldrb	r3, [r7, #3]
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d107      	bne.n	800860a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008600:	461a      	mov	r2, r3
 8008602:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008606:	6053      	str	r3, [r2, #4]
 8008608:	e009      	b.n	800861e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800860a:	78fb      	ldrb	r3, [r7, #3]
 800860c:	2b02      	cmp	r3, #2
 800860e:	d106      	bne.n	800861e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008616:	461a      	mov	r2, r3
 8008618:	f241 7370 	movw	r3, #6000	; 0x1770
 800861c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008638:	2300      	movs	r3, #0
 800863a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800864c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800865a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800865c:	2064      	movs	r0, #100	; 0x64
 800865e:	f7f9 febf 	bl	80023e0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800866a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800866e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008670:	200a      	movs	r0, #10
 8008672:	f7f9 feb5 	bl	80023e0 <HAL_Delay>

  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	460b      	mov	r3, r1
 800868a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008690:	2300      	movs	r3, #0
 8008692:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80086a4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d109      	bne.n	80086c4 <USB_DriveVbus+0x44>
 80086b0:	78fb      	ldrb	r3, [r7, #3]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d106      	bne.n	80086c4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80086be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80086c2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ce:	d109      	bne.n	80086e4 <USB_DriveVbus+0x64>
 80086d0:	78fb      	ldrb	r3, [r7, #3]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d106      	bne.n	80086e4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80086de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086e2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80086f2:	b480      	push	{r7}
 80086f4:	b085      	sub	sp, #20
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80086fe:	2300      	movs	r3, #0
 8008700:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	0c5b      	lsrs	r3, r3, #17
 8008710:	f003 0303 	and.w	r3, r3, #3
}
 8008714:	4618      	mov	r0, r3
 8008716:	3714      	adds	r7, #20
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	b29b      	uxth	r3, r3
}
 8008736:	4618      	mov	r0, r3
 8008738:	3714      	adds	r7, #20
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
	...

08008744 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b088      	sub	sp, #32
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	4608      	mov	r0, r1
 800874e:	4611      	mov	r1, r2
 8008750:	461a      	mov	r2, r3
 8008752:	4603      	mov	r3, r0
 8008754:	70fb      	strb	r3, [r7, #3]
 8008756:	460b      	mov	r3, r1
 8008758:	70bb      	strb	r3, [r7, #2]
 800875a:	4613      	mov	r3, r2
 800875c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800875e:	2300      	movs	r3, #0
 8008760:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008766:	78fb      	ldrb	r3, [r7, #3]
 8008768:	015a      	lsls	r2, r3, #5
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	4413      	add	r3, r2
 800876e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008772:	461a      	mov	r2, r3
 8008774:	f04f 33ff 	mov.w	r3, #4294967295
 8008778:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800877a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800877e:	2b03      	cmp	r3, #3
 8008780:	d87e      	bhi.n	8008880 <USB_HC_Init+0x13c>
 8008782:	a201      	add	r2, pc, #4	; (adr r2, 8008788 <USB_HC_Init+0x44>)
 8008784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008788:	08008799 	.word	0x08008799
 800878c:	08008843 	.word	0x08008843
 8008790:	08008799 	.word	0x08008799
 8008794:	08008805 	.word	0x08008805
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008798:	78fb      	ldrb	r3, [r7, #3]
 800879a:	015a      	lsls	r2, r3, #5
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	4413      	add	r3, r2
 80087a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087a4:	461a      	mov	r2, r3
 80087a6:	f240 439d 	movw	r3, #1181	; 0x49d
 80087aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80087ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	da10      	bge.n	80087d6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80087b4:	78fb      	ldrb	r3, [r7, #3]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	78fa      	ldrb	r2, [r7, #3]
 80087c4:	0151      	lsls	r1, r2, #5
 80087c6:	693a      	ldr	r2, [r7, #16]
 80087c8:	440a      	add	r2, r1
 80087ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087d2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80087d4:	e057      	b.n	8008886 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d051      	beq.n	8008886 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80087e2:	78fb      	ldrb	r3, [r7, #3]
 80087e4:	015a      	lsls	r2, r3, #5
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	4413      	add	r3, r2
 80087ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	78fa      	ldrb	r2, [r7, #3]
 80087f2:	0151      	lsls	r1, r2, #5
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	440a      	add	r2, r1
 80087f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008800:	60d3      	str	r3, [r2, #12]
      break;
 8008802:	e040      	b.n	8008886 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008804:	78fb      	ldrb	r3, [r7, #3]
 8008806:	015a      	lsls	r2, r3, #5
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	4413      	add	r3, r2
 800880c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008810:	461a      	mov	r2, r3
 8008812:	f240 639d 	movw	r3, #1693	; 0x69d
 8008816:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008818:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800881c:	2b00      	cmp	r3, #0
 800881e:	da34      	bge.n	800888a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008820:	78fb      	ldrb	r3, [r7, #3]
 8008822:	015a      	lsls	r2, r3, #5
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	4413      	add	r3, r2
 8008828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	78fa      	ldrb	r2, [r7, #3]
 8008830:	0151      	lsls	r1, r2, #5
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	440a      	add	r2, r1
 8008836:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800883a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800883e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008840:	e023      	b.n	800888a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008842:	78fb      	ldrb	r3, [r7, #3]
 8008844:	015a      	lsls	r2, r3, #5
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	4413      	add	r3, r2
 800884a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800884e:	461a      	mov	r2, r3
 8008850:	f240 2325 	movw	r3, #549	; 0x225
 8008854:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008856:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800885a:	2b00      	cmp	r3, #0
 800885c:	da17      	bge.n	800888e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800885e:	78fb      	ldrb	r3, [r7, #3]
 8008860:	015a      	lsls	r2, r3, #5
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	4413      	add	r3, r2
 8008866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	78fa      	ldrb	r2, [r7, #3]
 800886e:	0151      	lsls	r1, r2, #5
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	440a      	add	r2, r1
 8008874:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008878:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800887c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800887e:	e006      	b.n	800888e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	77fb      	strb	r3, [r7, #31]
      break;
 8008884:	e004      	b.n	8008890 <USB_HC_Init+0x14c>
      break;
 8008886:	bf00      	nop
 8008888:	e002      	b.n	8008890 <USB_HC_Init+0x14c>
      break;
 800888a:	bf00      	nop
 800888c:	e000      	b.n	8008890 <USB_HC_Init+0x14c>
      break;
 800888e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008890:	78fb      	ldrb	r3, [r7, #3]
 8008892:	015a      	lsls	r2, r3, #5
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	4413      	add	r3, r2
 8008898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	78fa      	ldrb	r2, [r7, #3]
 80088a0:	0151      	lsls	r1, r2, #5
 80088a2:	693a      	ldr	r2, [r7, #16]
 80088a4:	440a      	add	r2, r1
 80088a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088aa:	f043 0302 	orr.w	r3, r3, #2
 80088ae:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088b6:	699a      	ldr	r2, [r3, #24]
 80088b8:	78fb      	ldrb	r3, [r7, #3]
 80088ba:	f003 030f 	and.w	r3, r3, #15
 80088be:	2101      	movs	r1, #1
 80088c0:	fa01 f303 	lsl.w	r3, r1, r3
 80088c4:	6939      	ldr	r1, [r7, #16]
 80088c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80088ca:	4313      	orrs	r3, r2
 80088cc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80088da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	da03      	bge.n	80088ea <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80088e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088e6:	61bb      	str	r3, [r7, #24]
 80088e8:	e001      	b.n	80088ee <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80088ea:	2300      	movs	r3, #0
 80088ec:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7ff feff 	bl	80086f2 <USB_GetHostSpeed>
 80088f4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80088f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d106      	bne.n	800890c <USB_HC_Init+0x1c8>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2b02      	cmp	r3, #2
 8008902:	d003      	beq.n	800890c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008904:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008908:	617b      	str	r3, [r7, #20]
 800890a:	e001      	b.n	8008910 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800890c:	2300      	movs	r3, #0
 800890e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008910:	787b      	ldrb	r3, [r7, #1]
 8008912:	059b      	lsls	r3, r3, #22
 8008914:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008918:	78bb      	ldrb	r3, [r7, #2]
 800891a:	02db      	lsls	r3, r3, #11
 800891c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008920:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008922:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008926:	049b      	lsls	r3, r3, #18
 8008928:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800892c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800892e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008930:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008934:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800893a:	78fb      	ldrb	r3, [r7, #3]
 800893c:	0159      	lsls	r1, r3, #5
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	440b      	add	r3, r1
 8008942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008946:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800894c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800894e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008952:	2b03      	cmp	r3, #3
 8008954:	d003      	beq.n	800895e <USB_HC_Init+0x21a>
 8008956:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800895a:	2b01      	cmp	r3, #1
 800895c:	d10f      	bne.n	800897e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800895e:	78fb      	ldrb	r3, [r7, #3]
 8008960:	015a      	lsls	r2, r3, #5
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	4413      	add	r3, r2
 8008966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	78fa      	ldrb	r2, [r7, #3]
 800896e:	0151      	lsls	r1, r2, #5
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	440a      	add	r2, r1
 8008974:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008978:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800897c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800897e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008980:	4618      	mov	r0, r3
 8008982:	3720      	adds	r7, #32
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b08c      	sub	sp, #48	; 0x30
 800898c:	af02      	add	r7, sp, #8
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	4613      	mov	r3, r2
 8008994:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	785b      	ldrb	r3, [r3, #1]
 800899e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80089a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089a4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d02d      	beq.n	8008a0e <USB_HC_StartXfer+0x86>
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	791b      	ldrb	r3, [r3, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d129      	bne.n	8008a0e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80089ba:	79fb      	ldrb	r3, [r7, #7]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d117      	bne.n	80089f0 <USB_HC_StartXfer+0x68>
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	79db      	ldrb	r3, [r3, #7]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d003      	beq.n	80089d0 <USB_HC_StartXfer+0x48>
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	79db      	ldrb	r3, [r3, #7]
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d10f      	bne.n	80089f0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	015a      	lsls	r2, r3, #5
 80089d4:	6a3b      	ldr	r3, [r7, #32]
 80089d6:	4413      	add	r3, r2
 80089d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	69fa      	ldr	r2, [r7, #28]
 80089e0:	0151      	lsls	r1, r2, #5
 80089e2:	6a3a      	ldr	r2, [r7, #32]
 80089e4:	440a      	add	r2, r1
 80089e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ee:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80089f0:	79fb      	ldrb	r3, [r7, #7]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d10b      	bne.n	8008a0e <USB_HC_StartXfer+0x86>
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	795b      	ldrb	r3, [r3, #5]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d107      	bne.n	8008a0e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	785b      	ldrb	r3, [r3, #1]
 8008a02:	4619      	mov	r1, r3
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 fa0f 	bl	8008e28 <USB_DoPing>
      return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	e0f8      	b.n	8008c00 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	695b      	ldr	r3, [r3, #20]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d018      	beq.n	8008a48 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	8912      	ldrh	r2, [r2, #8]
 8008a1e:	4413      	add	r3, r2
 8008a20:	3b01      	subs	r3, #1
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	8912      	ldrh	r2, [r2, #8]
 8008a26:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a2a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008a2c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008a2e:	8b7b      	ldrh	r3, [r7, #26]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d90b      	bls.n	8008a4c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008a34:	8b7b      	ldrh	r3, [r7, #26]
 8008a36:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008a38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	8912      	ldrh	r2, [r2, #8]
 8008a3e:	fb03 f202 	mul.w	r2, r3, r2
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	611a      	str	r2, [r3, #16]
 8008a46:	e001      	b.n	8008a4c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	78db      	ldrb	r3, [r3, #3]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d007      	beq.n	8008a64 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008a54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	8912      	ldrh	r2, [r2, #8]
 8008a5a:	fb03 f202 	mul.w	r2, r3, r2
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	611a      	str	r2, [r3, #16]
 8008a62:	e003      	b.n	8008a6c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	695a      	ldr	r2, [r3, #20]
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008a74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a76:	04d9      	lsls	r1, r3, #19
 8008a78:	4b63      	ldr	r3, [pc, #396]	; (8008c08 <USB_HC_StartXfer+0x280>)
 8008a7a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a7c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	7a9b      	ldrb	r3, [r3, #10]
 8008a82:	075b      	lsls	r3, r3, #29
 8008a84:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a88:	69f9      	ldr	r1, [r7, #28]
 8008a8a:	0148      	lsls	r0, r1, #5
 8008a8c:	6a39      	ldr	r1, [r7, #32]
 8008a8e:	4401      	add	r1, r0
 8008a90:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008a94:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a96:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008a98:	79fb      	ldrb	r3, [r7, #7]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d009      	beq.n	8008ab2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	68d9      	ldr	r1, [r3, #12]
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	015a      	lsls	r2, r3, #5
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aae:	460a      	mov	r2, r1
 8008ab0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008ab2:	6a3b      	ldr	r3, [r7, #32]
 8008ab4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	f003 0301 	and.w	r3, r3, #1
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	bf0c      	ite	eq
 8008ac2:	2301      	moveq	r3, #1
 8008ac4:	2300      	movne	r3, #0
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	015a      	lsls	r2, r3, #5
 8008ace:	6a3b      	ldr	r3, [r7, #32]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	69fa      	ldr	r2, [r7, #28]
 8008ada:	0151      	lsls	r1, r2, #5
 8008adc:	6a3a      	ldr	r2, [r7, #32]
 8008ade:	440a      	add	r2, r1
 8008ae0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ae4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ae8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	015a      	lsls	r2, r3, #5
 8008aee:	6a3b      	ldr	r3, [r7, #32]
 8008af0:	4413      	add	r3, r2
 8008af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	7e7b      	ldrb	r3, [r7, #25]
 8008afa:	075b      	lsls	r3, r3, #29
 8008afc:	69f9      	ldr	r1, [r7, #28]
 8008afe:	0148      	lsls	r0, r1, #5
 8008b00:	6a39      	ldr	r1, [r7, #32]
 8008b02:	4401      	add	r1, r0
 8008b04:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	015a      	lsls	r2, r3, #5
 8008b10:	6a3b      	ldr	r3, [r7, #32]
 8008b12:	4413      	add	r3, r2
 8008b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b22:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	78db      	ldrb	r3, [r3, #3]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d004      	beq.n	8008b36 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b32:	613b      	str	r3, [r7, #16]
 8008b34:	e003      	b.n	8008b3e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b3c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b44:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b52:	461a      	mov	r2, r3
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008b58:	79fb      	ldrb	r3, [r7, #7]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d001      	beq.n	8008b62 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	e04e      	b.n	8008c00 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	78db      	ldrb	r3, [r3, #3]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d149      	bne.n	8008bfe <USB_HC_StartXfer+0x276>
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d045      	beq.n	8008bfe <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	79db      	ldrb	r3, [r3, #7]
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	d830      	bhi.n	8008bdc <USB_HC_StartXfer+0x254>
 8008b7a:	a201      	add	r2, pc, #4	; (adr r2, 8008b80 <USB_HC_StartXfer+0x1f8>)
 8008b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b80:	08008b91 	.word	0x08008b91
 8008b84:	08008bb5 	.word	0x08008bb5
 8008b88:	08008b91 	.word	0x08008b91
 8008b8c:	08008bb5 	.word	0x08008bb5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	695b      	ldr	r3, [r3, #20]
 8008b94:	3303      	adds	r3, #3
 8008b96:	089b      	lsrs	r3, r3, #2
 8008b98:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008b9a:	8afa      	ldrh	r2, [r7, #22]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d91c      	bls.n	8008be0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	699b      	ldr	r3, [r3, #24]
 8008baa:	f043 0220 	orr.w	r2, r3, #32
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	619a      	str	r2, [r3, #24]
        }
        break;
 8008bb2:	e015      	b.n	8008be0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	695b      	ldr	r3, [r3, #20]
 8008bb8:	3303      	adds	r3, #3
 8008bba:	089b      	lsrs	r3, r3, #2
 8008bbc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008bbe:	8afa      	ldrh	r2, [r7, #22]
 8008bc0:	6a3b      	ldr	r3, [r7, #32]
 8008bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d90a      	bls.n	8008be4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	619a      	str	r2, [r3, #24]
        }
        break;
 8008bda:	e003      	b.n	8008be4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008bdc:	bf00      	nop
 8008bde:	e002      	b.n	8008be6 <USB_HC_StartXfer+0x25e>
        break;
 8008be0:	bf00      	nop
 8008be2:	e000      	b.n	8008be6 <USB_HC_StartXfer+0x25e>
        break;
 8008be4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	68d9      	ldr	r1, [r3, #12]
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	785a      	ldrb	r2, [r3, #1]
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	695b      	ldr	r3, [r3, #20]
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	9000      	str	r0, [sp, #0]
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f7ff fb31 	bl	8008260 <USB_WritePacket>
  }

  return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3728      	adds	r7, #40	; 0x28
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	1ff80000 	.word	0x1ff80000

08008c0c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c1e:	695b      	ldr	r3, [r3, #20]
 8008c20:	b29b      	uxth	r3, r3
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3714      	adds	r7, #20
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b089      	sub	sp, #36	; 0x24
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	460b      	mov	r3, r1
 8008c38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008c3e:	78fb      	ldrb	r3, [r7, #3]
 8008c40:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008c42:	2300      	movs	r3, #0
 8008c44:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	015a      	lsls	r2, r3, #5
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	0c9b      	lsrs	r3, r3, #18
 8008c56:	f003 0303 	and.w	r3, r3, #3
 8008c5a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	015a      	lsls	r2, r3, #5
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	4413      	add	r3, r2
 8008c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	0fdb      	lsrs	r3, r3, #31
 8008c6c:	f003 0301 	and.w	r3, r3, #1
 8008c70:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	f003 0320 	and.w	r3, r3, #32
 8008c7a:	2b20      	cmp	r3, #32
 8008c7c:	d104      	bne.n	8008c88 <USB_HC_Halt+0x5a>
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d101      	bne.n	8008c88 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008c84:	2300      	movs	r3, #0
 8008c86:	e0c8      	b.n	8008e1a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d002      	beq.n	8008c94 <USB_HC_Halt+0x66>
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d163      	bne.n	8008d5c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	015a      	lsls	r2, r3, #5
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	69ba      	ldr	r2, [r7, #24]
 8008ca4:	0151      	lsls	r1, r2, #5
 8008ca6:	69fa      	ldr	r2, [r7, #28]
 8008ca8:	440a      	add	r2, r1
 8008caa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cb2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	f003 0320 	and.w	r3, r3, #32
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f040 80ab 	bne.w	8008e18 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d133      	bne.n	8008d36 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	015a      	lsls	r2, r3, #5
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	69ba      	ldr	r2, [r7, #24]
 8008cde:	0151      	lsls	r1, r2, #5
 8008ce0:	69fa      	ldr	r2, [r7, #28]
 8008ce2:	440a      	add	r2, r1
 8008ce4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ce8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008cec:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	015a      	lsls	r2, r3, #5
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	0151      	lsls	r1, r2, #5
 8008d00:	69fa      	ldr	r2, [r7, #28]
 8008d02:	440a      	add	r2, r1
 8008d04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d0c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	3301      	adds	r3, #1
 8008d12:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d1a:	d81d      	bhi.n	8008d58 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	015a      	lsls	r2, r3, #5
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	4413      	add	r3, r2
 8008d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d32:	d0ec      	beq.n	8008d0e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d34:	e070      	b.n	8008e18 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	015a      	lsls	r2, r3, #5
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	69ba      	ldr	r2, [r7, #24]
 8008d46:	0151      	lsls	r1, r2, #5
 8008d48:	69fa      	ldr	r2, [r7, #28]
 8008d4a:	440a      	add	r2, r1
 8008d4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d54:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d56:	e05f      	b.n	8008e18 <USB_HC_Halt+0x1ea>
            break;
 8008d58:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d5a:	e05d      	b.n	8008e18 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	015a      	lsls	r2, r3, #5
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	4413      	add	r3, r2
 8008d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	69ba      	ldr	r2, [r7, #24]
 8008d6c:	0151      	lsls	r1, r2, #5
 8008d6e:	69fa      	ldr	r2, [r7, #28]
 8008d70:	440a      	add	r2, r1
 8008d72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d7a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d133      	bne.n	8008df4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	015a      	lsls	r2, r3, #5
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	69ba      	ldr	r2, [r7, #24]
 8008d9c:	0151      	lsls	r1, r2, #5
 8008d9e:	69fa      	ldr	r2, [r7, #28]
 8008da0:	440a      	add	r2, r1
 8008da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008da6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008daa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	015a      	lsls	r2, r3, #5
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	4413      	add	r3, r2
 8008db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	69ba      	ldr	r2, [r7, #24]
 8008dbc:	0151      	lsls	r1, r2, #5
 8008dbe:	69fa      	ldr	r2, [r7, #28]
 8008dc0:	440a      	add	r2, r1
 8008dc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008dc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008dca:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dd8:	d81d      	bhi.n	8008e16 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	015a      	lsls	r2, r3, #5
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	4413      	add	r3, r2
 8008de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008df0:	d0ec      	beq.n	8008dcc <USB_HC_Halt+0x19e>
 8008df2:	e011      	b.n	8008e18 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	015a      	lsls	r2, r3, #5
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	69ba      	ldr	r2, [r7, #24]
 8008e04:	0151      	lsls	r1, r2, #5
 8008e06:	69fa      	ldr	r2, [r7, #28]
 8008e08:	440a      	add	r2, r1
 8008e0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e12:	6013      	str	r3, [r2, #0]
 8008e14:	e000      	b.n	8008e18 <USB_HC_Halt+0x1ea>
          break;
 8008e16:	bf00      	nop
    }
  }

  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3724      	adds	r7, #36	; 0x24
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
	...

08008e28 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b087      	sub	sp, #28
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008e38:	78fb      	ldrb	r3, [r7, #3]
 8008e3a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	04da      	lsls	r2, r3, #19
 8008e44:	4b15      	ldr	r3, [pc, #84]	; (8008e9c <USB_DoPing+0x74>)
 8008e46:	4013      	ands	r3, r2
 8008e48:	693a      	ldr	r2, [r7, #16]
 8008e4a:	0151      	lsls	r1, r2, #5
 8008e4c:	697a      	ldr	r2, [r7, #20]
 8008e4e:	440a      	add	r2, r1
 8008e50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e58:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	015a      	lsls	r2, r3, #5
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	4413      	add	r3, r2
 8008e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e70:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e78:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	015a      	lsls	r2, r3, #5
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	4413      	add	r3, r2
 8008e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e86:	461a      	mov	r2, r3
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	371c      	adds	r7, #28
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	1ff80000 	.word	0x1ff80000

08008ea0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b088      	sub	sp, #32
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f7ff f911 	bl	80080dc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008eba:	2110      	movs	r1, #16
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7ff f96b 	bl	8008198 <USB_FlushTxFifo>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7ff f997 	bl	8008200 <USB_FlushRxFifo>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d001      	beq.n	8008edc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008edc:	2300      	movs	r3, #0
 8008ede:	61bb      	str	r3, [r7, #24]
 8008ee0:	e01f      	b.n	8008f22 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	015a      	lsls	r2, r3, #5
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	4413      	add	r3, r2
 8008eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ef8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f00:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f08:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	015a      	lsls	r2, r3, #5
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	4413      	add	r3, r2
 8008f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f16:	461a      	mov	r2, r3
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	61bb      	str	r3, [r7, #24]
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	2b0f      	cmp	r3, #15
 8008f26:	d9dc      	bls.n	8008ee2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008f28:	2300      	movs	r3, #0
 8008f2a:	61bb      	str	r3, [r7, #24]
 8008f2c:	e034      	b.n	8008f98 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f44:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f4c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f54:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	015a      	lsls	r2, r3, #5
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f62:	461a      	mov	r2, r3
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f74:	d80c      	bhi.n	8008f90 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f8c:	d0ec      	beq.n	8008f68 <USB_StopHost+0xc8>
 8008f8e:	e000      	b.n	8008f92 <USB_StopHost+0xf2>
        break;
 8008f90:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	3301      	adds	r3, #1
 8008f96:	61bb      	str	r3, [r7, #24]
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	2b0f      	cmp	r3, #15
 8008f9c:	d9c7      	bls.n	8008f2e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8008faa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f7ff f880 	bl	80080ba <USB_EnableGlobalInt>

  return ret;
 8008fba:	7ffb      	ldrb	r3, [r7, #31]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3720      	adds	r7, #32
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008fc8:	4904      	ldr	r1, [pc, #16]	; (8008fdc <MX_FATFS_Init+0x18>)
 8008fca:	4805      	ldr	r0, [pc, #20]	; (8008fe0 <MX_FATFS_Init+0x1c>)
 8008fcc:	f005 fc98 	bl	800e900 <FATFS_LinkDriver>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	4b03      	ldr	r3, [pc, #12]	; (8008fe4 <MX_FATFS_Init+0x20>)
 8008fd6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008fd8:	bf00      	nop
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	20001514 	.word	0x20001514
 8008fe0:	0800f2c8 	.word	0x0800f2c8
 8008fe4:	20001510 	.word	0x20001510

08008fe8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008fec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	4603      	mov	r3, r0
 8009000:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	4603      	mov	r3, r0
 8009018:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800901e:	79fb      	ldrb	r3, [r7, #7]
 8009020:	4619      	mov	r1, r3
 8009022:	4808      	ldr	r0, [pc, #32]	; (8009044 <USBH_status+0x34>)
 8009024:	f000 fe32 	bl	8009c8c <USBH_MSC_UnitIsReady>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d002      	beq.n	8009034 <USBH_status+0x24>
  {
    res = RES_OK;
 800902e:	2300      	movs	r3, #0
 8009030:	73fb      	strb	r3, [r7, #15]
 8009032:	e001      	b.n	8009038 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009038:	7bfb      	ldrb	r3, [r7, #15]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	2000177c 	.word	0x2000177c

08009048 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b094      	sub	sp, #80	; 0x50
 800904c:	af02      	add	r7, sp, #8
 800904e:	60b9      	str	r1, [r7, #8]
 8009050:	607a      	str	r2, [r7, #4]
 8009052:	603b      	str	r3, [r7, #0]
 8009054:	4603      	mov	r3, r0
 8009056:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800905e:	7bf9      	ldrb	r1, [r7, #15]
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	4813      	ldr	r0, [pc, #76]	; (80090b8 <USBH_read+0x70>)
 800906a:	f000 fe59 	bl	8009d20 <USBH_MSC_Read>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d103      	bne.n	800907c <USBH_read+0x34>
  {
    res = RES_OK;
 8009074:	2300      	movs	r3, #0
 8009076:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800907a:	e017      	b.n	80090ac <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800907c:	f107 0210 	add.w	r2, r7, #16
 8009080:	7bfb      	ldrb	r3, [r7, #15]
 8009082:	4619      	mov	r1, r3
 8009084:	480c      	ldr	r0, [pc, #48]	; (80090b8 <USBH_read+0x70>)
 8009086:	f000 fe27 	bl	8009cd8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800908a:	7f7b      	ldrb	r3, [r7, #29]
 800908c:	2b3a      	cmp	r3, #58	; 0x3a
 800908e:	d005      	beq.n	800909c <USBH_read+0x54>
 8009090:	2b3a      	cmp	r3, #58	; 0x3a
 8009092:	dc07      	bgt.n	80090a4 <USBH_read+0x5c>
 8009094:	2b04      	cmp	r3, #4
 8009096:	d001      	beq.n	800909c <USBH_read+0x54>
 8009098:	2b28      	cmp	r3, #40	; 0x28
 800909a:	d103      	bne.n	80090a4 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800909c:	2303      	movs	r3, #3
 800909e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80090a2:	e003      	b.n	80090ac <USBH_read+0x64>

    default:
      res = RES_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80090aa:	bf00      	nop
    }
  }

  return res;
 80090ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3748      	adds	r7, #72	; 0x48
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	2000177c 	.word	0x2000177c

080090bc <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b094      	sub	sp, #80	; 0x50
 80090c0:	af02      	add	r7, sp, #8
 80090c2:	60b9      	str	r1, [r7, #8]
 80090c4:	607a      	str	r2, [r7, #4]
 80090c6:	603b      	str	r3, [r7, #0]
 80090c8:	4603      	mov	r3, r0
 80090ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80090d2:	7bf9      	ldrb	r1, [r7, #15]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	4817      	ldr	r0, [pc, #92]	; (800913c <USBH_write+0x80>)
 80090de:	f000 fe88 	bl	8009df2 <USBH_MSC_Write>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d103      	bne.n	80090f0 <USBH_write+0x34>
  {
    res = RES_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80090ee:	e01f      	b.n	8009130 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80090f0:	f107 0210 	add.w	r2, r7, #16
 80090f4:	7bfb      	ldrb	r3, [r7, #15]
 80090f6:	4619      	mov	r1, r3
 80090f8:	4810      	ldr	r0, [pc, #64]	; (800913c <USBH_write+0x80>)
 80090fa:	f000 fded 	bl	8009cd8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80090fe:	7f7b      	ldrb	r3, [r7, #29]
 8009100:	2b3a      	cmp	r3, #58	; 0x3a
 8009102:	d00d      	beq.n	8009120 <USBH_write+0x64>
 8009104:	2b3a      	cmp	r3, #58	; 0x3a
 8009106:	dc0f      	bgt.n	8009128 <USBH_write+0x6c>
 8009108:	2b28      	cmp	r3, #40	; 0x28
 800910a:	d009      	beq.n	8009120 <USBH_write+0x64>
 800910c:	2b28      	cmp	r3, #40	; 0x28
 800910e:	dc0b      	bgt.n	8009128 <USBH_write+0x6c>
 8009110:	2b04      	cmp	r3, #4
 8009112:	d005      	beq.n	8009120 <USBH_write+0x64>
 8009114:	2b27      	cmp	r3, #39	; 0x27
 8009116:	d107      	bne.n	8009128 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8009118:	2302      	movs	r3, #2
 800911a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800911e:	e007      	b.n	8009130 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009120:	2303      	movs	r3, #3
 8009122:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009126:	e003      	b.n	8009130 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800912e:	bf00      	nop
    }
  }

  return res;
 8009130:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009134:	4618      	mov	r0, r3
 8009136:	3748      	adds	r7, #72	; 0x48
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	2000177c 	.word	0x2000177c

08009140 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b090      	sub	sp, #64	; 0x40
 8009144:	af00      	add	r7, sp, #0
 8009146:	4603      	mov	r3, r0
 8009148:	603a      	str	r2, [r7, #0]
 800914a:	71fb      	strb	r3, [r7, #7]
 800914c:	460b      	mov	r3, r1
 800914e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8009156:	79bb      	ldrb	r3, [r7, #6]
 8009158:	2b03      	cmp	r3, #3
 800915a:	d852      	bhi.n	8009202 <USBH_ioctl+0xc2>
 800915c:	a201      	add	r2, pc, #4	; (adr r2, 8009164 <USBH_ioctl+0x24>)
 800915e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009162:	bf00      	nop
 8009164:	08009175 	.word	0x08009175
 8009168:	0800917d 	.word	0x0800917d
 800916c:	080091a7 	.word	0x080091a7
 8009170:	080091d3 	.word	0x080091d3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009174:	2300      	movs	r3, #0
 8009176:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800917a:	e045      	b.n	8009208 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800917c:	f107 0208 	add.w	r2, r7, #8
 8009180:	79fb      	ldrb	r3, [r7, #7]
 8009182:	4619      	mov	r1, r3
 8009184:	4823      	ldr	r0, [pc, #140]	; (8009214 <USBH_ioctl+0xd4>)
 8009186:	f000 fda7 	bl	8009cd8 <USBH_MSC_GetLUNInfo>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d106      	bne.n	800919e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800919c:	e034      	b.n	8009208 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80091a4:	e030      	b.n	8009208 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80091a6:	f107 0208 	add.w	r2, r7, #8
 80091aa:	79fb      	ldrb	r3, [r7, #7]
 80091ac:	4619      	mov	r1, r3
 80091ae:	4819      	ldr	r0, [pc, #100]	; (8009214 <USBH_ioctl+0xd4>)
 80091b0:	f000 fd92 	bl	8009cd8 <USBH_MSC_GetLUNInfo>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d107      	bne.n	80091ca <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80091ba:	8a3b      	ldrh	r3, [r7, #16]
 80091bc:	461a      	mov	r2, r3
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80091c8:	e01e      	b.n	8009208 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80091d0:	e01a      	b.n	8009208 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80091d2:	f107 0208 	add.w	r2, r7, #8
 80091d6:	79fb      	ldrb	r3, [r7, #7]
 80091d8:	4619      	mov	r1, r3
 80091da:	480e      	ldr	r0, [pc, #56]	; (8009214 <USBH_ioctl+0xd4>)
 80091dc:	f000 fd7c 	bl	8009cd8 <USBH_MSC_GetLUNInfo>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d109      	bne.n	80091fa <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80091e6:	8a3b      	ldrh	r3, [r7, #16]
 80091e8:	0a5b      	lsrs	r3, r3, #9
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	461a      	mov	r2, r3
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80091f8:	e006      	b.n	8009208 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009200:	e002      	b.n	8009208 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8009202:	2304      	movs	r3, #4
 8009204:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8009208:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800920c:	4618      	mov	r0, r3
 800920e:	3740      	adds	r7, #64	; 0x40
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	2000177c 	.word	0x2000177c

08009218 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009218:	b590      	push	{r4, r7, lr}
 800921a:	b089      	sub	sp, #36	; 0x24
 800921c:	af04      	add	r7, sp, #16
 800921e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009226:	7919      	ldrb	r1, [r3, #4]
 8009228:	2350      	movs	r3, #80	; 0x50
 800922a:	2206      	movs	r2, #6
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f001 fc6b 	bl	800ab08 <USBH_FindInterface>
 8009232:	4603      	mov	r3, r0
 8009234:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8009236:	7bfb      	ldrb	r3, [r7, #15]
 8009238:	2bff      	cmp	r3, #255	; 0xff
 800923a:	d002      	beq.n	8009242 <USBH_MSC_InterfaceInit+0x2a>
 800923c:	7bfb      	ldrb	r3, [r7, #15]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d901      	bls.n	8009246 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009242:	2302      	movs	r3, #2
 8009244:	e106      	b.n	8009454 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8009246:	7bfb      	ldrb	r3, [r7, #15]
 8009248:	4619      	mov	r1, r3
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f001 fc40 	bl	800aad0 <USBH_SelectInterface>
 8009250:	4603      	mov	r3, r0
 8009252:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009254:	7bbb      	ldrb	r3, [r7, #14]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d001      	beq.n	800925e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800925a:	2302      	movs	r3, #2
 800925c:	e0fa      	b.n	8009454 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009264:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009268:	f005 fe96 	bl	800ef98 <malloc>
 800926c:	4603      	mov	r3, r0
 800926e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009276:	69db      	ldr	r3, [r3, #28]
 8009278:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d101      	bne.n	8009284 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8009280:	2302      	movs	r3, #2
 8009282:	e0e7      	b.n	8009454 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8009284:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009288:	2100      	movs	r1, #0
 800928a:	68b8      	ldr	r0, [r7, #8]
 800928c:	f005 fea2 	bl	800efd4 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009290:	7bfb      	ldrb	r3, [r7, #15]
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	211a      	movs	r1, #26
 8009296:	fb01 f303 	mul.w	r3, r1, r3
 800929a:	4413      	add	r3, r2
 800929c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	b25b      	sxtb	r3, r3
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	da16      	bge.n	80092d6 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80092a8:	7bfb      	ldrb	r3, [r7, #15]
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	211a      	movs	r1, #26
 80092ae:	fb01 f303 	mul.w	r3, r1, r3
 80092b2:	4413      	add	r3, r2
 80092b4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80092b8:	781a      	ldrb	r2, [r3, #0]
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80092be:	7bfb      	ldrb	r3, [r7, #15]
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	211a      	movs	r1, #26
 80092c4:	fb01 f303 	mul.w	r3, r1, r3
 80092c8:	4413      	add	r3, r2
 80092ca:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80092ce:	881a      	ldrh	r2, [r3, #0]
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	815a      	strh	r2, [r3, #10]
 80092d4:	e015      	b.n	8009302 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	211a      	movs	r1, #26
 80092dc:	fb01 f303 	mul.w	r3, r1, r3
 80092e0:	4413      	add	r3, r2
 80092e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80092e6:	781a      	ldrb	r2, [r3, #0]
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80092ec:	7bfb      	ldrb	r3, [r7, #15]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	211a      	movs	r1, #26
 80092f2:	fb01 f303 	mul.w	r3, r1, r3
 80092f6:	4413      	add	r3, r2
 80092f8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80092fc:	881a      	ldrh	r2, [r3, #0]
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009302:	7bfb      	ldrb	r3, [r7, #15]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	211a      	movs	r1, #26
 8009308:	fb01 f303 	mul.w	r3, r1, r3
 800930c:	4413      	add	r3, r2
 800930e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	b25b      	sxtb	r3, r3
 8009316:	2b00      	cmp	r3, #0
 8009318:	da16      	bge.n	8009348 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800931a:	7bfb      	ldrb	r3, [r7, #15]
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	211a      	movs	r1, #26
 8009320:	fb01 f303 	mul.w	r3, r1, r3
 8009324:	4413      	add	r3, r2
 8009326:	f203 3356 	addw	r3, r3, #854	; 0x356
 800932a:	781a      	ldrb	r2, [r3, #0]
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009330:	7bfb      	ldrb	r3, [r7, #15]
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	211a      	movs	r1, #26
 8009336:	fb01 f303 	mul.w	r3, r1, r3
 800933a:	4413      	add	r3, r2
 800933c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009340:	881a      	ldrh	r2, [r3, #0]
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	815a      	strh	r2, [r3, #10]
 8009346:	e015      	b.n	8009374 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009348:	7bfb      	ldrb	r3, [r7, #15]
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	211a      	movs	r1, #26
 800934e:	fb01 f303 	mul.w	r3, r1, r3
 8009352:	4413      	add	r3, r2
 8009354:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009358:	781a      	ldrb	r2, [r3, #0]
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800935e:	7bfb      	ldrb	r3, [r7, #15]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	211a      	movs	r1, #26
 8009364:	fb01 f303 	mul.w	r3, r1, r3
 8009368:	4413      	add	r3, r2
 800936a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800936e:	881a      	ldrh	r2, [r3, #0]
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	2200      	movs	r2, #0
 8009378:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	2200      	movs	r2, #0
 800937e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	2200      	movs	r2, #0
 8009384:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	799b      	ldrb	r3, [r3, #6]
 800938a:	4619      	mov	r1, r3
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f002 fed6 	bl	800c13e <USBH_AllocPipe>
 8009392:	4603      	mov	r3, r0
 8009394:	461a      	mov	r2, r3
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	79db      	ldrb	r3, [r3, #7]
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f002 fecc 	bl	800c13e <USBH_AllocPipe>
 80093a6:	4603      	mov	r3, r0
 80093a8:	461a      	mov	r2, r3
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fdc4 	bl	8009f3c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	799b      	ldrb	r3, [r3, #6]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d01e      	beq.n	80093fa <USBH_MSC_InterfaceInit+0x1e2>
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	891b      	ldrh	r3, [r3, #8]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d01a      	beq.n	80093fa <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	7959      	ldrb	r1, [r3, #5]
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	7998      	ldrb	r0, [r3, #6]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80093d8:	68ba      	ldr	r2, [r7, #8]
 80093da:	8912      	ldrh	r2, [r2, #8]
 80093dc:	9202      	str	r2, [sp, #8]
 80093de:	2202      	movs	r2, #2
 80093e0:	9201      	str	r2, [sp, #4]
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	4623      	mov	r3, r4
 80093e6:	4602      	mov	r2, r0
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f002 fe79 	bl	800c0e0 <USBH_OpenPipe>
 80093ee:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	79db      	ldrb	r3, [r3, #7]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d02c      	beq.n	8009452 <USBH_MSC_InterfaceInit+0x23a>
 80093f8:	e001      	b.n	80093fe <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 80093fa:	2303      	movs	r3, #3
 80093fc:	e02a      	b.n	8009454 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	895b      	ldrh	r3, [r3, #10]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d025      	beq.n	8009452 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	7919      	ldrb	r1, [r3, #4]
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	79d8      	ldrb	r0, [r3, #7]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	8952      	ldrh	r2, [r2, #10]
 800941e:	9202      	str	r2, [sp, #8]
 8009420:	2202      	movs	r2, #2
 8009422:	9201      	str	r2, [sp, #4]
 8009424:	9300      	str	r3, [sp, #0]
 8009426:	4623      	mov	r3, r4
 8009428:	4602      	mov	r2, r0
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f002 fe58 	bl	800c0e0 <USBH_OpenPipe>
 8009430:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	791b      	ldrb	r3, [r3, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f005 fceb 	bl	800ee16 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	795b      	ldrb	r3, [r3, #5]
 8009444:	2200      	movs	r2, #0
 8009446:	4619      	mov	r1, r3
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f005 fce4 	bl	800ee16 <USBH_LL_SetToggle>

  return USBH_OK;
 800944e:	2300      	movs	r3, #0
 8009450:	e000      	b.n	8009454 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8009452:	2303      	movs	r3, #3
}
 8009454:	4618      	mov	r0, r3
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	bd90      	pop	{r4, r7, pc}

0800945c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800946a:	69db      	ldr	r3, [r3, #28]
 800946c:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	795b      	ldrb	r3, [r3, #5]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00e      	beq.n	8009494 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	795b      	ldrb	r3, [r3, #5]
 800947a:	4619      	mov	r1, r3
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f002 fe4e 	bl	800c11e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	795b      	ldrb	r3, [r3, #5]
 8009486:	4619      	mov	r1, r3
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f002 fe79 	bl	800c180 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2200      	movs	r2, #0
 8009492:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	791b      	ldrb	r3, [r3, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00e      	beq.n	80094ba <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	791b      	ldrb	r3, [r3, #4]
 80094a0:	4619      	mov	r1, r3
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f002 fe3b 	bl	800c11e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	791b      	ldrb	r3, [r3, #4]
 80094ac:	4619      	mov	r1, r3
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f002 fe66 	bl	800c180 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2200      	movs	r2, #0
 80094b8:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094c0:	69db      	ldr	r3, [r3, #28]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00b      	beq.n	80094de <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094cc:	69db      	ldr	r3, [r3, #28]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f005 fd6a 	bl	800efa8 <free>
    phost->pActiveClass->pData = 0U;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094da:	2200      	movs	r2, #0
 80094dc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094f6:	69db      	ldr	r3, [r3, #28]
 80094f8:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80094fa:	2301      	movs	r3, #1
 80094fc:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	7b9b      	ldrb	r3, [r3, #14]
 8009502:	2b03      	cmp	r3, #3
 8009504:	d041      	beq.n	800958a <USBH_MSC_ClassRequest+0xa2>
 8009506:	2b03      	cmp	r3, #3
 8009508:	dc4b      	bgt.n	80095a2 <USBH_MSC_ClassRequest+0xba>
 800950a:	2b00      	cmp	r3, #0
 800950c:	d001      	beq.n	8009512 <USBH_MSC_ClassRequest+0x2a>
 800950e:	2b02      	cmp	r3, #2
 8009510:	d147      	bne.n	80095a2 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	4619      	mov	r1, r3
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fcf1 	bl	8009efe <USBH_MSC_BOT_REQ_GetMaxLUN>
 800951c:	4603      	mov	r3, r0
 800951e:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8009520:	7bfb      	ldrb	r3, [r7, #15]
 8009522:	2b03      	cmp	r3, #3
 8009524:	d104      	bne.n	8009530 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	2200      	movs	r2, #0
 800952a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800952c:	2300      	movs	r3, #0
 800952e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8009530:	7bfb      	ldrb	r3, [r7, #15]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d137      	bne.n	80095a6 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	2b02      	cmp	r3, #2
 800953c:	d804      	bhi.n	8009548 <USBH_MSC_ClassRequest+0x60>
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	3301      	adds	r3, #1
 8009544:	b2da      	uxtb	r2, r3
 8009546:	e000      	b.n	800954a <USBH_MSC_ClassRequest+0x62>
 8009548:	2202      	movs	r2, #2
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800954e:	2300      	movs	r3, #0
 8009550:	73bb      	strb	r3, [r7, #14]
 8009552:	e014      	b.n	800957e <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009554:	7bbb      	ldrb	r3, [r7, #14]
 8009556:	68ba      	ldr	r2, [r7, #8]
 8009558:	2134      	movs	r1, #52	; 0x34
 800955a:	fb01 f303 	mul.w	r3, r1, r3
 800955e:	4413      	add	r3, r2
 8009560:	3392      	adds	r3, #146	; 0x92
 8009562:	2202      	movs	r2, #2
 8009564:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8009566:	7bbb      	ldrb	r3, [r7, #14]
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	2134      	movs	r1, #52	; 0x34
 800956c:	fb01 f303 	mul.w	r3, r1, r3
 8009570:	4413      	add	r3, r2
 8009572:	33c1      	adds	r3, #193	; 0xc1
 8009574:	2200      	movs	r2, #0
 8009576:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009578:	7bbb      	ldrb	r3, [r7, #14]
 800957a:	3301      	adds	r3, #1
 800957c:	73bb      	strb	r3, [r7, #14]
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	7bba      	ldrb	r2, [r7, #14]
 8009584:	429a      	cmp	r2, r3
 8009586:	d3e5      	bcc.n	8009554 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8009588:	e00d      	b.n	80095a6 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800958a:	2100      	movs	r1, #0
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f002 f888 	bl	800b6a2 <USBH_ClrFeature>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d108      	bne.n	80095aa <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	7bda      	ldrb	r2, [r3, #15]
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	739a      	strb	r2, [r3, #14]
      }
      break;
 80095a0:	e003      	b.n	80095aa <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 80095a2:	bf00      	nop
 80095a4:	e002      	b.n	80095ac <USBH_MSC_ClassRequest+0xc4>
      break;
 80095a6:	bf00      	nop
 80095a8:	e000      	b.n	80095ac <USBH_MSC_ClassRequest+0xc4>
      break;
 80095aa:	bf00      	nop
  }

  return status;
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
	...

080095b8 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b086      	sub	sp, #24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095c6:	69db      	ldr	r3, [r3, #28]
 80095c8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80095ca:	2301      	movs	r3, #1
 80095cc:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80095ce:	2301      	movs	r3, #1
 80095d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80095d2:	2301      	movs	r3, #1
 80095d4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	7b1b      	ldrb	r3, [r3, #12]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d003      	beq.n	80095e6 <USBH_MSC_Process+0x2e>
 80095de:	2b01      	cmp	r3, #1
 80095e0:	f000 8271 	beq.w	8009ac6 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80095e4:	e272      	b.n	8009acc <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	429a      	cmp	r2, r3
 80095f4:	f080 824f 	bcs.w	8009a96 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095fe:	4619      	mov	r1, r3
 8009600:	693a      	ldr	r2, [r7, #16]
 8009602:	2334      	movs	r3, #52	; 0x34
 8009604:	fb01 f303 	mul.w	r3, r1, r3
 8009608:	4413      	add	r3, r2
 800960a:	3391      	adds	r3, #145	; 0x91
 800960c:	2201      	movs	r2, #1
 800960e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009616:	4619      	mov	r1, r3
 8009618:	693a      	ldr	r2, [r7, #16]
 800961a:	2334      	movs	r3, #52	; 0x34
 800961c:	fb01 f303 	mul.w	r3, r1, r3
 8009620:	4413      	add	r3, r2
 8009622:	3390      	adds	r3, #144	; 0x90
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	2b08      	cmp	r3, #8
 8009628:	f200 8243 	bhi.w	8009ab2 <USBH_MSC_Process+0x4fa>
 800962c:	a201      	add	r2, pc, #4	; (adr r2, 8009634 <USBH_MSC_Process+0x7c>)
 800962e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009632:	bf00      	nop
 8009634:	08009659 	.word	0x08009659
 8009638:	08009ab3 	.word	0x08009ab3
 800963c:	08009721 	.word	0x08009721
 8009640:	080098a5 	.word	0x080098a5
 8009644:	0800967f 	.word	0x0800967f
 8009648:	08009971 	.word	0x08009971
 800964c:	08009ab3 	.word	0x08009ab3
 8009650:	08009ab3 	.word	0x08009ab3
 8009654:	08009a85 	.word	0x08009a85
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800965e:	4619      	mov	r1, r3
 8009660:	693a      	ldr	r2, [r7, #16]
 8009662:	2334      	movs	r3, #52	; 0x34
 8009664:	fb01 f303 	mul.w	r3, r1, r3
 8009668:	4413      	add	r3, r2
 800966a:	3390      	adds	r3, #144	; 0x90
 800966c:	2204      	movs	r2, #4
 800966e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800967c:	e222      	b.n	8009ac4 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009684:	b2d9      	uxtb	r1, r3
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800968c:	461a      	mov	r2, r3
 800968e:	2334      	movs	r3, #52	; 0x34
 8009690:	fb02 f303 	mul.w	r3, r2, r3
 8009694:	3398      	adds	r3, #152	; 0x98
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	4413      	add	r3, r2
 800969a:	3307      	adds	r3, #7
 800969c:	461a      	mov	r2, r3
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 ff6a 	bl	800a578 <USBH_MSC_SCSI_Inquiry>
 80096a4:	4603      	mov	r3, r0
 80096a6:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80096a8:	7bfb      	ldrb	r3, [r7, #15]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10b      	bne.n	80096c6 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096b4:	4619      	mov	r1, r3
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	2334      	movs	r3, #52	; 0x34
 80096ba:	fb01 f303 	mul.w	r3, r1, r3
 80096be:	4413      	add	r3, r2
 80096c0:	3390      	adds	r3, #144	; 0x90
 80096c2:	2202      	movs	r2, #2
 80096c4:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80096c6:	7bfb      	ldrb	r3, [r7, #15]
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	d10c      	bne.n	80096e6 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096d2:	4619      	mov	r1, r3
 80096d4:	693a      	ldr	r2, [r7, #16]
 80096d6:	2334      	movs	r3, #52	; 0x34
 80096d8:	fb01 f303 	mul.w	r3, r1, r3
 80096dc:	4413      	add	r3, r2
 80096de:	3390      	adds	r3, #144	; 0x90
 80096e0:	2205      	movs	r2, #5
 80096e2:	701a      	strb	r2, [r3, #0]
            break;
 80096e4:	e1e7      	b.n	8009ab6 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80096e6:	7bfb      	ldrb	r3, [r7, #15]
 80096e8:	2b04      	cmp	r3, #4
 80096ea:	f040 81e4 	bne.w	8009ab6 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096f4:	4619      	mov	r1, r3
 80096f6:	693a      	ldr	r2, [r7, #16]
 80096f8:	2334      	movs	r3, #52	; 0x34
 80096fa:	fb01 f303 	mul.w	r3, r1, r3
 80096fe:	4413      	add	r3, r2
 8009700:	3390      	adds	r3, #144	; 0x90
 8009702:	2201      	movs	r2, #1
 8009704:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800970c:	4619      	mov	r1, r3
 800970e:	693a      	ldr	r2, [r7, #16]
 8009710:	2334      	movs	r3, #52	; 0x34
 8009712:	fb01 f303 	mul.w	r3, r1, r3
 8009716:	4413      	add	r3, r2
 8009718:	3391      	adds	r3, #145	; 0x91
 800971a:	2202      	movs	r2, #2
 800971c:	701a      	strb	r2, [r3, #0]
            break;
 800971e:	e1ca      	b.n	8009ab6 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009726:	b2db      	uxtb	r3, r3
 8009728:	4619      	mov	r1, r3
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fe66 	bl	800a3fc <USBH_MSC_SCSI_TestUnitReady>
 8009730:	4603      	mov	r3, r0
 8009732:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009734:	7bbb      	ldrb	r3, [r7, #14]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d149      	bne.n	80097ce <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009740:	4619      	mov	r1, r3
 8009742:	693a      	ldr	r2, [r7, #16]
 8009744:	2334      	movs	r3, #52	; 0x34
 8009746:	fb01 f303 	mul.w	r3, r1, r3
 800974a:	4413      	add	r3, r2
 800974c:	3392      	adds	r3, #146	; 0x92
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00c      	beq.n	800976e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800975a:	4619      	mov	r1, r3
 800975c:	693a      	ldr	r2, [r7, #16]
 800975e:	2334      	movs	r3, #52	; 0x34
 8009760:	fb01 f303 	mul.w	r3, r1, r3
 8009764:	4413      	add	r3, r2
 8009766:	33c1      	adds	r3, #193	; 0xc1
 8009768:	2201      	movs	r2, #1
 800976a:	701a      	strb	r2, [r3, #0]
 800976c:	e00b      	b.n	8009786 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009774:	4619      	mov	r1, r3
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	2334      	movs	r3, #52	; 0x34
 800977a:	fb01 f303 	mul.w	r3, r1, r3
 800977e:	4413      	add	r3, r2
 8009780:	33c1      	adds	r3, #193	; 0xc1
 8009782:	2200      	movs	r2, #0
 8009784:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800978c:	4619      	mov	r1, r3
 800978e:	693a      	ldr	r2, [r7, #16]
 8009790:	2334      	movs	r3, #52	; 0x34
 8009792:	fb01 f303 	mul.w	r3, r1, r3
 8009796:	4413      	add	r3, r2
 8009798:	3390      	adds	r3, #144	; 0x90
 800979a:	2203      	movs	r2, #3
 800979c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097a4:	4619      	mov	r1, r3
 80097a6:	693a      	ldr	r2, [r7, #16]
 80097a8:	2334      	movs	r3, #52	; 0x34
 80097aa:	fb01 f303 	mul.w	r3, r1, r3
 80097ae:	4413      	add	r3, r2
 80097b0:	3391      	adds	r3, #145	; 0x91
 80097b2:	2200      	movs	r2, #0
 80097b4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097bc:	4619      	mov	r1, r3
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	2334      	movs	r3, #52	; 0x34
 80097c2:	fb01 f303 	mul.w	r3, r1, r3
 80097c6:	4413      	add	r3, r2
 80097c8:	3392      	adds	r3, #146	; 0x92
 80097ca:	2200      	movs	r2, #0
 80097cc:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80097ce:	7bbb      	ldrb	r3, [r7, #14]
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	d14a      	bne.n	800986a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097da:	4619      	mov	r1, r3
 80097dc:	693a      	ldr	r2, [r7, #16]
 80097de:	2334      	movs	r3, #52	; 0x34
 80097e0:	fb01 f303 	mul.w	r3, r1, r3
 80097e4:	4413      	add	r3, r2
 80097e6:	3392      	adds	r3, #146	; 0x92
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	d00c      	beq.n	8009808 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097f4:	4619      	mov	r1, r3
 80097f6:	693a      	ldr	r2, [r7, #16]
 80097f8:	2334      	movs	r3, #52	; 0x34
 80097fa:	fb01 f303 	mul.w	r3, r1, r3
 80097fe:	4413      	add	r3, r2
 8009800:	33c1      	adds	r3, #193	; 0xc1
 8009802:	2201      	movs	r2, #1
 8009804:	701a      	strb	r2, [r3, #0]
 8009806:	e00b      	b.n	8009820 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800980e:	4619      	mov	r1, r3
 8009810:	693a      	ldr	r2, [r7, #16]
 8009812:	2334      	movs	r3, #52	; 0x34
 8009814:	fb01 f303 	mul.w	r3, r1, r3
 8009818:	4413      	add	r3, r2
 800981a:	33c1      	adds	r3, #193	; 0xc1
 800981c:	2200      	movs	r2, #0
 800981e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009826:	4619      	mov	r1, r3
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	2334      	movs	r3, #52	; 0x34
 800982c:	fb01 f303 	mul.w	r3, r1, r3
 8009830:	4413      	add	r3, r2
 8009832:	3390      	adds	r3, #144	; 0x90
 8009834:	2205      	movs	r2, #5
 8009836:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800983e:	4619      	mov	r1, r3
 8009840:	693a      	ldr	r2, [r7, #16]
 8009842:	2334      	movs	r3, #52	; 0x34
 8009844:	fb01 f303 	mul.w	r3, r1, r3
 8009848:	4413      	add	r3, r2
 800984a:	3391      	adds	r3, #145	; 0x91
 800984c:	2201      	movs	r2, #1
 800984e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009856:	4619      	mov	r1, r3
 8009858:	693a      	ldr	r2, [r7, #16]
 800985a:	2334      	movs	r3, #52	; 0x34
 800985c:	fb01 f303 	mul.w	r3, r1, r3
 8009860:	4413      	add	r3, r2
 8009862:	3392      	adds	r3, #146	; 0x92
 8009864:	2202      	movs	r2, #2
 8009866:	701a      	strb	r2, [r3, #0]
            break;
 8009868:	e127      	b.n	8009aba <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800986a:	7bbb      	ldrb	r3, [r7, #14]
 800986c:	2b04      	cmp	r3, #4
 800986e:	f040 8124 	bne.w	8009aba <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009878:	4619      	mov	r1, r3
 800987a:	693a      	ldr	r2, [r7, #16]
 800987c:	2334      	movs	r3, #52	; 0x34
 800987e:	fb01 f303 	mul.w	r3, r1, r3
 8009882:	4413      	add	r3, r2
 8009884:	3390      	adds	r3, #144	; 0x90
 8009886:	2201      	movs	r2, #1
 8009888:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009890:	4619      	mov	r1, r3
 8009892:	693a      	ldr	r2, [r7, #16]
 8009894:	2334      	movs	r3, #52	; 0x34
 8009896:	fb01 f303 	mul.w	r3, r1, r3
 800989a:	4413      	add	r3, r2
 800989c:	3391      	adds	r3, #145	; 0x91
 800989e:	2202      	movs	r2, #2
 80098a0:	701a      	strb	r2, [r3, #0]
            break;
 80098a2:	e10a      	b.n	8009aba <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098aa:	b2d9      	uxtb	r1, r3
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098b2:	461a      	mov	r2, r3
 80098b4:	2334      	movs	r3, #52	; 0x34
 80098b6:	fb02 f303 	mul.w	r3, r2, r3
 80098ba:	3390      	adds	r3, #144	; 0x90
 80098bc:	693a      	ldr	r2, [r7, #16]
 80098be:	4413      	add	r3, r2
 80098c0:	3304      	adds	r3, #4
 80098c2:	461a      	mov	r2, r3
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 fddc 	bl	800a482 <USBH_MSC_SCSI_ReadCapacity>
 80098ca:	4603      	mov	r3, r0
 80098cc:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80098ce:	7bfb      	ldrb	r3, [r7, #15]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d120      	bne.n	8009916 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098da:	4619      	mov	r1, r3
 80098dc:	693a      	ldr	r2, [r7, #16]
 80098de:	2334      	movs	r3, #52	; 0x34
 80098e0:	fb01 f303 	mul.w	r3, r1, r3
 80098e4:	4413      	add	r3, r2
 80098e6:	3390      	adds	r3, #144	; 0x90
 80098e8:	2201      	movs	r2, #1
 80098ea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098f2:	4619      	mov	r1, r3
 80098f4:	693a      	ldr	r2, [r7, #16]
 80098f6:	2334      	movs	r3, #52	; 0x34
 80098f8:	fb01 f303 	mul.w	r3, r1, r3
 80098fc:	4413      	add	r3, r2
 80098fe:	3391      	adds	r3, #145	; 0x91
 8009900:	2200      	movs	r2, #0
 8009902:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800990a:	3301      	adds	r3, #1
 800990c:	b29a      	uxth	r2, r3
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009914:	e0d3      	b.n	8009abe <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8009916:	7bfb      	ldrb	r3, [r7, #15]
 8009918:	2b02      	cmp	r3, #2
 800991a:	d10c      	bne.n	8009936 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009922:	4619      	mov	r1, r3
 8009924:	693a      	ldr	r2, [r7, #16]
 8009926:	2334      	movs	r3, #52	; 0x34
 8009928:	fb01 f303 	mul.w	r3, r1, r3
 800992c:	4413      	add	r3, r2
 800992e:	3390      	adds	r3, #144	; 0x90
 8009930:	2205      	movs	r2, #5
 8009932:	701a      	strb	r2, [r3, #0]
            break;
 8009934:	e0c3      	b.n	8009abe <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009936:	7bfb      	ldrb	r3, [r7, #15]
 8009938:	2b04      	cmp	r3, #4
 800993a:	f040 80c0 	bne.w	8009abe <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009944:	4619      	mov	r1, r3
 8009946:	693a      	ldr	r2, [r7, #16]
 8009948:	2334      	movs	r3, #52	; 0x34
 800994a:	fb01 f303 	mul.w	r3, r1, r3
 800994e:	4413      	add	r3, r2
 8009950:	3390      	adds	r3, #144	; 0x90
 8009952:	2201      	movs	r2, #1
 8009954:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800995c:	4619      	mov	r1, r3
 800995e:	693a      	ldr	r2, [r7, #16]
 8009960:	2334      	movs	r3, #52	; 0x34
 8009962:	fb01 f303 	mul.w	r3, r1, r3
 8009966:	4413      	add	r3, r2
 8009968:	3391      	adds	r3, #145	; 0x91
 800996a:	2202      	movs	r2, #2
 800996c:	701a      	strb	r2, [r3, #0]
            break;
 800996e:	e0a6      	b.n	8009abe <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009976:	b2d9      	uxtb	r1, r3
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800997e:	461a      	mov	r2, r3
 8009980:	2334      	movs	r3, #52	; 0x34
 8009982:	fb02 f303 	mul.w	r3, r2, r3
 8009986:	3398      	adds	r3, #152	; 0x98
 8009988:	693a      	ldr	r2, [r7, #16]
 800998a:	4413      	add	r3, r2
 800998c:	3304      	adds	r3, #4
 800998e:	461a      	mov	r2, r3
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 fe96 	bl	800a6c2 <USBH_MSC_SCSI_RequestSense>
 8009996:	4603      	mov	r3, r0
 8009998:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800999a:	7bfb      	ldrb	r3, [r7, #15]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d145      	bne.n	8009a2c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80099a6:	4619      	mov	r1, r3
 80099a8:	693a      	ldr	r2, [r7, #16]
 80099aa:	2334      	movs	r3, #52	; 0x34
 80099ac:	fb01 f303 	mul.w	r3, r1, r3
 80099b0:	4413      	add	r3, r2
 80099b2:	339c      	adds	r3, #156	; 0x9c
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	2b06      	cmp	r3, #6
 80099b8:	d00c      	beq.n	80099d4 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80099c0:	4619      	mov	r1, r3
 80099c2:	693a      	ldr	r2, [r7, #16]
 80099c4:	2334      	movs	r3, #52	; 0x34
 80099c6:	fb01 f303 	mul.w	r3, r1, r3
 80099ca:	4413      	add	r3, r2
 80099cc:	339c      	adds	r3, #156	; 0x9c
 80099ce:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	d117      	bne.n	8009a04 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	f242 720f 	movw	r2, #9999	; 0x270f
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d80c      	bhi.n	8009a04 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80099f0:	4619      	mov	r1, r3
 80099f2:	693a      	ldr	r2, [r7, #16]
 80099f4:	2334      	movs	r3, #52	; 0x34
 80099f6:	fb01 f303 	mul.w	r3, r1, r3
 80099fa:	4413      	add	r3, r2
 80099fc:	3390      	adds	r3, #144	; 0x90
 80099fe:	2202      	movs	r2, #2
 8009a00:	701a      	strb	r2, [r3, #0]
                  break;
 8009a02:	e05f      	b.n	8009ac4 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	693a      	ldr	r2, [r7, #16]
 8009a0e:	2334      	movs	r3, #52	; 0x34
 8009a10:	fb01 f303 	mul.w	r3, r1, r3
 8009a14:	4413      	add	r3, r2
 8009a16:	3390      	adds	r3, #144	; 0x90
 8009a18:	2201      	movs	r2, #1
 8009a1a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a22:	3301      	adds	r3, #1
 8009a24:	b29a      	uxth	r2, r3
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8009a2c:	7bfb      	ldrb	r3, [r7, #15]
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d10c      	bne.n	8009a4c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a38:	4619      	mov	r1, r3
 8009a3a:	693a      	ldr	r2, [r7, #16]
 8009a3c:	2334      	movs	r3, #52	; 0x34
 8009a3e:	fb01 f303 	mul.w	r3, r1, r3
 8009a42:	4413      	add	r3, r2
 8009a44:	3390      	adds	r3, #144	; 0x90
 8009a46:	2208      	movs	r2, #8
 8009a48:	701a      	strb	r2, [r3, #0]
            break;
 8009a4a:	e03a      	b.n	8009ac2 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009a4c:	7bfb      	ldrb	r3, [r7, #15]
 8009a4e:	2b04      	cmp	r3, #4
 8009a50:	d137      	bne.n	8009ac2 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a58:	4619      	mov	r1, r3
 8009a5a:	693a      	ldr	r2, [r7, #16]
 8009a5c:	2334      	movs	r3, #52	; 0x34
 8009a5e:	fb01 f303 	mul.w	r3, r1, r3
 8009a62:	4413      	add	r3, r2
 8009a64:	3390      	adds	r3, #144	; 0x90
 8009a66:	2201      	movs	r2, #1
 8009a68:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a70:	4619      	mov	r1, r3
 8009a72:	693a      	ldr	r2, [r7, #16]
 8009a74:	2334      	movs	r3, #52	; 0x34
 8009a76:	fb01 f303 	mul.w	r3, r1, r3
 8009a7a:	4413      	add	r3, r2
 8009a7c:	3391      	adds	r3, #145	; 0x91
 8009a7e:	2202      	movs	r2, #2
 8009a80:	701a      	strb	r2, [r3, #0]
            break;
 8009a82:	e01e      	b.n	8009ac2 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	b29a      	uxth	r2, r3
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009a94:	e016      	b.n	8009ac4 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009aaa:	2102      	movs	r1, #2
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	4798      	blx	r3
      break;
 8009ab0:	e00c      	b.n	8009acc <USBH_MSC_Process+0x514>
            break;
 8009ab2:	bf00      	nop
 8009ab4:	e00a      	b.n	8009acc <USBH_MSC_Process+0x514>
            break;
 8009ab6:	bf00      	nop
 8009ab8:	e008      	b.n	8009acc <USBH_MSC_Process+0x514>
            break;
 8009aba:	bf00      	nop
 8009abc:	e006      	b.n	8009acc <USBH_MSC_Process+0x514>
            break;
 8009abe:	bf00      	nop
 8009ac0:	e004      	b.n	8009acc <USBH_MSC_Process+0x514>
            break;
 8009ac2:	bf00      	nop
      break;
 8009ac4:	e002      	b.n	8009acc <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	75fb      	strb	r3, [r7, #23]
      break;
 8009aca:	bf00      	nop
  }
  return error;
 8009acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3718      	adds	r7, #24
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop

08009ad8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	370c      	adds	r7, #12
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr

08009aee <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b088      	sub	sp, #32
 8009af2:	af02      	add	r7, sp, #8
 8009af4:	6078      	str	r0, [r7, #4]
 8009af6:	460b      	mov	r3, r1
 8009af8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b00:	69db      	ldr	r3, [r3, #28]
 8009b02:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009b04:	2301      	movs	r3, #1
 8009b06:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8009b0c:	78fb      	ldrb	r3, [r7, #3]
 8009b0e:	693a      	ldr	r2, [r7, #16]
 8009b10:	2134      	movs	r1, #52	; 0x34
 8009b12:	fb01 f303 	mul.w	r3, r1, r3
 8009b16:	4413      	add	r3, r2
 8009b18:	3390      	adds	r3, #144	; 0x90
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	2b07      	cmp	r3, #7
 8009b1e:	d03c      	beq.n	8009b9a <USBH_MSC_RdWrProcess+0xac>
 8009b20:	2b07      	cmp	r3, #7
 8009b22:	f300 80a7 	bgt.w	8009c74 <USBH_MSC_RdWrProcess+0x186>
 8009b26:	2b05      	cmp	r3, #5
 8009b28:	d06c      	beq.n	8009c04 <USBH_MSC_RdWrProcess+0x116>
 8009b2a:	2b06      	cmp	r3, #6
 8009b2c:	f040 80a2 	bne.w	8009c74 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8009b30:	78f9      	ldrb	r1, [r7, #3]
 8009b32:	2300      	movs	r3, #0
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	2300      	movs	r3, #0
 8009b38:	2200      	movs	r2, #0
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 fea5 	bl	800a88a <USBH_MSC_SCSI_Read>
 8009b40:	4603      	mov	r3, r0
 8009b42:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009b44:	7bfb      	ldrb	r3, [r7, #15]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d10b      	bne.n	8009b62 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009b4a:	78fb      	ldrb	r3, [r7, #3]
 8009b4c:	693a      	ldr	r2, [r7, #16]
 8009b4e:	2134      	movs	r1, #52	; 0x34
 8009b50:	fb01 f303 	mul.w	r3, r1, r3
 8009b54:	4413      	add	r3, r2
 8009b56:	3390      	adds	r3, #144	; 0x90
 8009b58:	2201      	movs	r2, #1
 8009b5a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009b60:	e08a      	b.n	8009c78 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8009b62:	7bfb      	ldrb	r3, [r7, #15]
 8009b64:	2b02      	cmp	r3, #2
 8009b66:	d109      	bne.n	8009b7c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009b68:	78fb      	ldrb	r3, [r7, #3]
 8009b6a:	693a      	ldr	r2, [r7, #16]
 8009b6c:	2134      	movs	r1, #52	; 0x34
 8009b6e:	fb01 f303 	mul.w	r3, r1, r3
 8009b72:	4413      	add	r3, r2
 8009b74:	3390      	adds	r3, #144	; 0x90
 8009b76:	2205      	movs	r2, #5
 8009b78:	701a      	strb	r2, [r3, #0]
      break;
 8009b7a:	e07d      	b.n	8009c78 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009b7c:	7bfb      	ldrb	r3, [r7, #15]
 8009b7e:	2b04      	cmp	r3, #4
 8009b80:	d17a      	bne.n	8009c78 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009b82:	78fb      	ldrb	r3, [r7, #3]
 8009b84:	693a      	ldr	r2, [r7, #16]
 8009b86:	2134      	movs	r1, #52	; 0x34
 8009b88:	fb01 f303 	mul.w	r3, r1, r3
 8009b8c:	4413      	add	r3, r2
 8009b8e:	3390      	adds	r3, #144	; 0x90
 8009b90:	2208      	movs	r2, #8
 8009b92:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009b94:	2302      	movs	r3, #2
 8009b96:	75fb      	strb	r3, [r7, #23]
      break;
 8009b98:	e06e      	b.n	8009c78 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009b9a:	78f9      	ldrb	r1, [r7, #3]
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	9300      	str	r3, [sp, #0]
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 fe05 	bl	800a7b4 <USBH_MSC_SCSI_Write>
 8009baa:	4603      	mov	r3, r0
 8009bac:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009bae:	7bfb      	ldrb	r3, [r7, #15]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d10b      	bne.n	8009bcc <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009bb4:	78fb      	ldrb	r3, [r7, #3]
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	2134      	movs	r1, #52	; 0x34
 8009bba:	fb01 f303 	mul.w	r3, r1, r3
 8009bbe:	4413      	add	r3, r2
 8009bc0:	3390      	adds	r3, #144	; 0x90
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009bca:	e057      	b.n	8009c7c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
 8009bce:	2b02      	cmp	r3, #2
 8009bd0:	d109      	bne.n	8009be6 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009bd2:	78fb      	ldrb	r3, [r7, #3]
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	2134      	movs	r1, #52	; 0x34
 8009bd8:	fb01 f303 	mul.w	r3, r1, r3
 8009bdc:	4413      	add	r3, r2
 8009bde:	3390      	adds	r3, #144	; 0x90
 8009be0:	2205      	movs	r2, #5
 8009be2:	701a      	strb	r2, [r3, #0]
      break;
 8009be4:	e04a      	b.n	8009c7c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
 8009be8:	2b04      	cmp	r3, #4
 8009bea:	d147      	bne.n	8009c7c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009bec:	78fb      	ldrb	r3, [r7, #3]
 8009bee:	693a      	ldr	r2, [r7, #16]
 8009bf0:	2134      	movs	r1, #52	; 0x34
 8009bf2:	fb01 f303 	mul.w	r3, r1, r3
 8009bf6:	4413      	add	r3, r2
 8009bf8:	3390      	adds	r3, #144	; 0x90
 8009bfa:	2208      	movs	r2, #8
 8009bfc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009bfe:	2302      	movs	r3, #2
 8009c00:	75fb      	strb	r3, [r7, #23]
      break;
 8009c02:	e03b      	b.n	8009c7c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8009c04:	78fb      	ldrb	r3, [r7, #3]
 8009c06:	2234      	movs	r2, #52	; 0x34
 8009c08:	fb02 f303 	mul.w	r3, r2, r3
 8009c0c:	3398      	adds	r3, #152	; 0x98
 8009c0e:	693a      	ldr	r2, [r7, #16]
 8009c10:	4413      	add	r3, r2
 8009c12:	1d1a      	adds	r2, r3, #4
 8009c14:	78fb      	ldrb	r3, [r7, #3]
 8009c16:	4619      	mov	r1, r3
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 fd52 	bl	800a6c2 <USBH_MSC_SCSI_RequestSense>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009c22:	7bfb      	ldrb	r3, [r7, #15]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d113      	bne.n	8009c50 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009c28:	78fb      	ldrb	r3, [r7, #3]
 8009c2a:	693a      	ldr	r2, [r7, #16]
 8009c2c:	2134      	movs	r1, #52	; 0x34
 8009c2e:	fb01 f303 	mul.w	r3, r1, r3
 8009c32:	4413      	add	r3, r2
 8009c34:	3390      	adds	r3, #144	; 0x90
 8009c36:	2201      	movs	r2, #1
 8009c38:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009c3a:	78fb      	ldrb	r3, [r7, #3]
 8009c3c:	693a      	ldr	r2, [r7, #16]
 8009c3e:	2134      	movs	r1, #52	; 0x34
 8009c40:	fb01 f303 	mul.w	r3, r1, r3
 8009c44:	4413      	add	r3, r2
 8009c46:	3391      	adds	r3, #145	; 0x91
 8009c48:	2202      	movs	r2, #2
 8009c4a:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8009c50:	7bfb      	ldrb	r3, [r7, #15]
 8009c52:	2b02      	cmp	r3, #2
 8009c54:	d014      	beq.n	8009c80 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009c56:	7bfb      	ldrb	r3, [r7, #15]
 8009c58:	2b04      	cmp	r3, #4
 8009c5a:	d111      	bne.n	8009c80 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009c5c:	78fb      	ldrb	r3, [r7, #3]
 8009c5e:	693a      	ldr	r2, [r7, #16]
 8009c60:	2134      	movs	r1, #52	; 0x34
 8009c62:	fb01 f303 	mul.w	r3, r1, r3
 8009c66:	4413      	add	r3, r2
 8009c68:	3390      	adds	r3, #144	; 0x90
 8009c6a:	2208      	movs	r2, #8
 8009c6c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009c6e:	2302      	movs	r3, #2
 8009c70:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009c72:	e005      	b.n	8009c80 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8009c74:	bf00      	nop
 8009c76:	e004      	b.n	8009c82 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009c78:	bf00      	nop
 8009c7a:	e002      	b.n	8009c82 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009c7c:	bf00      	nop
 8009c7e:	e000      	b.n	8009c82 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009c80:	bf00      	nop

  }
  return error;
 8009c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3718      	adds	r7, #24
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	460b      	mov	r3, r1
 8009c96:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c9e:	69db      	ldr	r3, [r3, #28]
 8009ca0:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	2b0b      	cmp	r3, #11
 8009caa:	d10c      	bne.n	8009cc6 <USBH_MSC_UnitIsReady+0x3a>
 8009cac:	78fb      	ldrb	r3, [r7, #3]
 8009cae:	68ba      	ldr	r2, [r7, #8]
 8009cb0:	2134      	movs	r1, #52	; 0x34
 8009cb2:	fb01 f303 	mul.w	r3, r1, r3
 8009cb6:	4413      	add	r3, r2
 8009cb8:	3391      	adds	r3, #145	; 0x91
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d102      	bne.n	8009cc6 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	73fb      	strb	r3, [r7, #15]
 8009cc4:	e001      	b.n	8009cca <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3714      	adds	r7, #20
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b086      	sub	sp, #24
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	607a      	str	r2, [r7, #4]
 8009ce4:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cec:	69db      	ldr	r3, [r3, #28]
 8009cee:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	2b0b      	cmp	r3, #11
 8009cf8:	d10d      	bne.n	8009d16 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8009cfa:	7afb      	ldrb	r3, [r7, #11]
 8009cfc:	2234      	movs	r2, #52	; 0x34
 8009cfe:	fb02 f303 	mul.w	r3, r2, r3
 8009d02:	3390      	adds	r3, #144	; 0x90
 8009d04:	697a      	ldr	r2, [r7, #20]
 8009d06:	4413      	add	r3, r2
 8009d08:	2234      	movs	r2, #52	; 0x34
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f005 f953 	bl	800efb8 <memcpy>
    return USBH_OK;
 8009d12:	2300      	movs	r3, #0
 8009d14:	e000      	b.n	8009d18 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8009d16:	2302      	movs	r3, #2
  }
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3718      	adds	r7, #24
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b088      	sub	sp, #32
 8009d24:	af02      	add	r7, sp, #8
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	607a      	str	r2, [r7, #4]
 8009d2a:	603b      	str	r3, [r7, #0]
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d36:	69db      	ldr	r3, [r3, #28]
 8009d38:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00e      	beq.n	8009d64 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009d4c:	2b0b      	cmp	r3, #11
 8009d4e:	d109      	bne.n	8009d64 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009d50:	7afb      	ldrb	r3, [r7, #11]
 8009d52:	697a      	ldr	r2, [r7, #20]
 8009d54:	2134      	movs	r1, #52	; 0x34
 8009d56:	fb01 f303 	mul.w	r3, r1, r3
 8009d5a:	4413      	add	r3, r2
 8009d5c:	3390      	adds	r3, #144	; 0x90
 8009d5e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d001      	beq.n	8009d68 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009d64:	2302      	movs	r3, #2
 8009d66:	e040      	b.n	8009dea <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	2206      	movs	r2, #6
 8009d6c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009d6e:	7afb      	ldrb	r3, [r7, #11]
 8009d70:	697a      	ldr	r2, [r7, #20]
 8009d72:	2134      	movs	r1, #52	; 0x34
 8009d74:	fb01 f303 	mul.w	r3, r1, r3
 8009d78:	4413      	add	r3, r2
 8009d7a:	3390      	adds	r3, #144	; 0x90
 8009d7c:	2206      	movs	r2, #6
 8009d7e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009d80:	7afb      	ldrb	r3, [r7, #11]
 8009d82:	b29a      	uxth	r2, r3
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009d8a:	7af9      	ldrb	r1, [r7, #11]
 8009d8c:	6a3b      	ldr	r3, [r7, #32]
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f000 fd78 	bl	800a88a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009da0:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009da2:	e016      	b.n	8009dd2 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	1ad2      	subs	r2, r2, r3
 8009dae:	6a3b      	ldr	r3, [r7, #32]
 8009db0:	f242 7110 	movw	r1, #10000	; 0x2710
 8009db4:	fb01 f303 	mul.w	r3, r1, r3
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d805      	bhi.n	8009dc8 <USBH_MSC_Read+0xa8>
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d104      	bne.n	8009dd2 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009dce:	2302      	movs	r3, #2
 8009dd0:	e00b      	b.n	8009dea <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009dd2:	7afb      	ldrb	r3, [r7, #11]
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f7ff fe89 	bl	8009aee <USBH_MSC_RdWrProcess>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d0e0      	beq.n	8009da4 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	2201      	movs	r2, #1
 8009de6:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3718      	adds	r7, #24
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b088      	sub	sp, #32
 8009df6:	af02      	add	r7, sp, #8
 8009df8:	60f8      	str	r0, [r7, #12]
 8009dfa:	607a      	str	r2, [r7, #4]
 8009dfc:	603b      	str	r3, [r7, #0]
 8009dfe:	460b      	mov	r3, r1
 8009e00:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e08:	69db      	ldr	r3, [r3, #28]
 8009e0a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00e      	beq.n	8009e36 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009e1e:	2b0b      	cmp	r3, #11
 8009e20:	d109      	bne.n	8009e36 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009e22:	7afb      	ldrb	r3, [r7, #11]
 8009e24:	697a      	ldr	r2, [r7, #20]
 8009e26:	2134      	movs	r1, #52	; 0x34
 8009e28:	fb01 f303 	mul.w	r3, r1, r3
 8009e2c:	4413      	add	r3, r2
 8009e2e:	3390      	adds	r3, #144	; 0x90
 8009e30:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d001      	beq.n	8009e3a <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009e36:	2302      	movs	r3, #2
 8009e38:	e040      	b.n	8009ebc <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	2207      	movs	r2, #7
 8009e3e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009e40:	7afb      	ldrb	r3, [r7, #11]
 8009e42:	697a      	ldr	r2, [r7, #20]
 8009e44:	2134      	movs	r1, #52	; 0x34
 8009e46:	fb01 f303 	mul.w	r3, r1, r3
 8009e4a:	4413      	add	r3, r2
 8009e4c:	3390      	adds	r3, #144	; 0x90
 8009e4e:	2207      	movs	r2, #7
 8009e50:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009e52:	7afb      	ldrb	r3, [r7, #11]
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009e5c:	7af9      	ldrb	r1, [r7, #11]
 8009e5e:	6a3b      	ldr	r3, [r7, #32]
 8009e60:	9300      	str	r3, [sp, #0]
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	68f8      	ldr	r0, [r7, #12]
 8009e68:	f000 fca4 	bl	800a7b4 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e72:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009e74:	e016      	b.n	8009ea4 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	1ad2      	subs	r2, r2, r3
 8009e80:	6a3b      	ldr	r3, [r7, #32]
 8009e82:	f242 7110 	movw	r1, #10000	; 0x2710
 8009e86:	fb01 f303 	mul.w	r3, r1, r3
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d805      	bhi.n	8009e9a <USBH_MSC_Write+0xa8>
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d104      	bne.n	8009ea4 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	e00b      	b.n	8009ebc <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009ea4:	7afb      	ldrb	r3, [r7, #11]
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	f7ff fe20 	bl	8009aee <USBH_MSC_RdWrProcess>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d0e0      	beq.n	8009e76 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009eba:	2300      	movs	r3, #0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3718      	adds	r7, #24
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2221      	movs	r2, #33	; 0x21
 8009ed0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	22ff      	movs	r2, #255	; 0xff
 8009ed6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8009eea:	2200      	movs	r2, #0
 8009eec:	2100      	movs	r1, #0
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f001 fea4 	bl	800bc3c <USBH_CtlReq>
 8009ef4:	4603      	mov	r3, r0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b082      	sub	sp, #8
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	22a1      	movs	r2, #161	; 0xa1
 8009f0c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	22fe      	movs	r2, #254	; 0xfe
 8009f12:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009f26:	2201      	movs	r2, #1
 8009f28:	6839      	ldr	r1, [r7, #0]
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f001 fe86 	bl	800bc3c <USBH_CtlReq>
 8009f30:	4603      	mov	r3, r0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3708      	adds	r7, #8
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
	...

08009f3c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f4a:	69db      	ldr	r3, [r3, #28]
 8009f4c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	4a09      	ldr	r2, [pc, #36]	; (8009f78 <USBH_MSC_BOT_Init+0x3c>)
 8009f52:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	4a09      	ldr	r2, [pc, #36]	; (8009f7c <USBH_MSC_BOT_Init+0x40>)
 8009f58:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3714      	adds	r7, #20
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr
 8009f78:	43425355 	.word	0x43425355
 8009f7c:	20304050 	.word	0x20304050

08009f80 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b088      	sub	sp, #32
 8009f84:	af02      	add	r7, sp, #8
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	460b      	mov	r3, r1
 8009f8a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009f90:	2301      	movs	r3, #1
 8009f92:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009f94:	2301      	movs	r3, #1
 8009f96:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fa2:	69db      	ldr	r3, [r3, #28]
 8009fa4:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	2b0a      	cmp	r3, #10
 8009fb4:	f200 819e 	bhi.w	800a2f4 <USBH_MSC_BOT_Process+0x374>
 8009fb8:	a201      	add	r2, pc, #4	; (adr r2, 8009fc0 <USBH_MSC_BOT_Process+0x40>)
 8009fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fbe:	bf00      	nop
 8009fc0:	08009fed 	.word	0x08009fed
 8009fc4:	0800a015 	.word	0x0800a015
 8009fc8:	0800a07f 	.word	0x0800a07f
 8009fcc:	0800a09d 	.word	0x0800a09d
 8009fd0:	0800a121 	.word	0x0800a121
 8009fd4:	0800a143 	.word	0x0800a143
 8009fd8:	0800a1db 	.word	0x0800a1db
 8009fdc:	0800a1f7 	.word	0x0800a1f7
 8009fe0:	0800a249 	.word	0x0800a249
 8009fe4:	0800a279 	.word	0x0800a279
 8009fe8:	0800a2db 	.word	0x0800a2db
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	78fa      	ldrb	r2, [r7, #3]
 8009ff0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	795b      	ldrb	r3, [r3, #5]
 800a006:	2201      	movs	r2, #1
 800a008:	9200      	str	r2, [sp, #0]
 800a00a:	221f      	movs	r2, #31
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f002 f824 	bl	800c05a <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a012:	e17e      	b.n	800a312 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	795b      	ldrb	r3, [r3, #5]
 800a018:	4619      	mov	r1, r3
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f004 feda 	bl	800edd4 <USBH_LL_GetURBState>
 800a020:	4603      	mov	r3, r0
 800a022:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a024:	7d3b      	ldrb	r3, [r7, #20]
 800a026:	2b01      	cmp	r3, #1
 800a028:	d118      	bne.n	800a05c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00f      	beq.n	800a052 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a038:	b25b      	sxtb	r3, r3
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	da04      	bge.n	800a048 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	2203      	movs	r2, #3
 800a042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a046:	e157      	b.n	800a2f8 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	2205      	movs	r2, #5
 800a04c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a050:	e152      	b.n	800a2f8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	2207      	movs	r2, #7
 800a056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a05a:	e14d      	b.n	800a2f8 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a05c:	7d3b      	ldrb	r3, [r7, #20]
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d104      	bne.n	800a06c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	2201      	movs	r2, #1
 800a066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a06a:	e145      	b.n	800a2f8 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800a06c:	7d3b      	ldrb	r3, [r7, #20]
 800a06e:	2b05      	cmp	r3, #5
 800a070:	f040 8142 	bne.w	800a2f8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	220a      	movs	r2, #10
 800a078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a07c:	e13c      	b.n	800a2f8 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	895a      	ldrh	r2, [r3, #10]
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	791b      	ldrb	r3, [r3, #4]
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f002 f809 	bl	800c0a4 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	2204      	movs	r2, #4
 800a096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800a09a:	e13a      	b.n	800a312 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	791b      	ldrb	r3, [r3, #4]
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f004 fe96 	bl	800edd4 <USBH_LL_GetURBState>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a0ac:	7d3b      	ldrb	r3, [r7, #20]
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d12d      	bne.n	800a10e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0b6:	693a      	ldr	r2, [r7, #16]
 800a0b8:	8952      	ldrh	r2, [r2, #10]
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d910      	bls.n	800a0e0 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0c4:	693a      	ldr	r2, [r7, #16]
 800a0c6:	8952      	ldrh	r2, [r2, #10]
 800a0c8:	441a      	add	r2, r3
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	8952      	ldrh	r2, [r2, #10]
 800a0d8:	1a9a      	subs	r2, r3, r2
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	65da      	str	r2, [r3, #92]	; 0x5c
 800a0de:	e002      	b.n	800a0e6 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00a      	beq.n	800a104 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	895a      	ldrh	r2, [r3, #10]
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	791b      	ldrb	r3, [r3, #4]
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f001 ffd1 	bl	800c0a4 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800a102:	e0fb      	b.n	800a2fc <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	2207      	movs	r2, #7
 800a108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a10c:	e0f6      	b.n	800a2fc <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800a10e:	7d3b      	ldrb	r3, [r7, #20]
 800a110:	2b05      	cmp	r3, #5
 800a112:	f040 80f3 	bne.w	800a2fc <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	2209      	movs	r2, #9
 800a11a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a11e:	e0ed      	b.n	800a2fc <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	891a      	ldrh	r2, [r3, #8]
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	795b      	ldrb	r3, [r3, #5]
 800a12e:	2001      	movs	r0, #1
 800a130:	9000      	str	r0, [sp, #0]
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f001 ff91 	bl	800c05a <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	2206      	movs	r2, #6
 800a13c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a140:	e0e7      	b.n	800a312 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	795b      	ldrb	r3, [r3, #5]
 800a146:	4619      	mov	r1, r3
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f004 fe43 	bl	800edd4 <USBH_LL_GetURBState>
 800a14e:	4603      	mov	r3, r0
 800a150:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a152:	7d3b      	ldrb	r3, [r7, #20]
 800a154:	2b01      	cmp	r3, #1
 800a156:	d12f      	bne.n	800a1b8 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a15c:	693a      	ldr	r2, [r7, #16]
 800a15e:	8912      	ldrh	r2, [r2, #8]
 800a160:	4293      	cmp	r3, r2
 800a162:	d910      	bls.n	800a186 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a16a:	693a      	ldr	r2, [r7, #16]
 800a16c:	8912      	ldrh	r2, [r2, #8]
 800a16e:	441a      	add	r2, r3
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a17a:	693a      	ldr	r2, [r7, #16]
 800a17c:	8912      	ldrh	r2, [r2, #8]
 800a17e:	1a9a      	subs	r2, r3, r2
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	65da      	str	r2, [r3, #92]	; 0x5c
 800a184:	e002      	b.n	800a18c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	2200      	movs	r2, #0
 800a18a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00c      	beq.n	800a1ae <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	891a      	ldrh	r2, [r3, #8]
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	795b      	ldrb	r3, [r3, #5]
 800a1a2:	2001      	movs	r0, #1
 800a1a4:	9000      	str	r0, [sp, #0]
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f001 ff57 	bl	800c05a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800a1ac:	e0a8      	b.n	800a300 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	2207      	movs	r2, #7
 800a1b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a1b6:	e0a3      	b.n	800a300 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a1b8:	7d3b      	ldrb	r3, [r7, #20]
 800a1ba:	2b02      	cmp	r3, #2
 800a1bc:	d104      	bne.n	800a1c8 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	2205      	movs	r2, #5
 800a1c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a1c6:	e09b      	b.n	800a300 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800a1c8:	7d3b      	ldrb	r3, [r7, #20]
 800a1ca:	2b05      	cmp	r3, #5
 800a1cc:	f040 8098 	bne.w	800a300 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	220a      	movs	r2, #10
 800a1d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a1d8:	e092      	b.n	800a300 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	791b      	ldrb	r3, [r3, #4]
 800a1e4:	220d      	movs	r2, #13
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f001 ff5c 	bl	800c0a4 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	2208      	movs	r2, #8
 800a1f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a1f4:	e08d      	b.n	800a312 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	791b      	ldrb	r3, [r3, #4]
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f004 fde9 	bl	800edd4 <USBH_LL_GetURBState>
 800a202:	4603      	mov	r3, r0
 800a204:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800a206:	7d3b      	ldrb	r3, [r7, #20]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d115      	bne.n	800a238 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	2201      	movs	r2, #1
 800a210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	2201      	movs	r2, #1
 800a218:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 f8a9 	bl	800a374 <USBH_MSC_DecodeCSW>
 800a222:	4603      	mov	r3, r0
 800a224:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800a226:	7d7b      	ldrb	r3, [r7, #21]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d102      	bne.n	800a232 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800a22c:	2300      	movs	r3, #0
 800a22e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800a230:	e068      	b.n	800a304 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800a232:	2302      	movs	r3, #2
 800a234:	75fb      	strb	r3, [r7, #23]
      break;
 800a236:	e065      	b.n	800a304 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800a238:	7d3b      	ldrb	r3, [r7, #20]
 800a23a:	2b05      	cmp	r3, #5
 800a23c:	d162      	bne.n	800a304 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	2209      	movs	r2, #9
 800a242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a246:	e05d      	b.n	800a304 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800a248:	78fb      	ldrb	r3, [r7, #3]
 800a24a:	2200      	movs	r2, #0
 800a24c:	4619      	mov	r1, r3
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 f864 	bl	800a31c <USBH_MSC_BOT_Abort>
 800a254:	4603      	mov	r3, r0
 800a256:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a258:	7dbb      	ldrb	r3, [r7, #22]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d104      	bne.n	800a268 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	2207      	movs	r2, #7
 800a262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800a266:	e04f      	b.n	800a308 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800a268:	7dbb      	ldrb	r3, [r7, #22]
 800a26a:	2b04      	cmp	r3, #4
 800a26c:	d14c      	bne.n	800a308 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	220b      	movs	r2, #11
 800a272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a276:	e047      	b.n	800a308 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800a278:	78fb      	ldrb	r3, [r7, #3]
 800a27a:	2201      	movs	r2, #1
 800a27c:	4619      	mov	r1, r3
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 f84c 	bl	800a31c <USBH_MSC_BOT_Abort>
 800a284:	4603      	mov	r3, r0
 800a286:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a288:	7dbb      	ldrb	r3, [r7, #22]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d11d      	bne.n	800a2ca <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	795b      	ldrb	r3, [r3, #5]
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f004 fdee 	bl	800ee76 <USBH_LL_GetToggle>
 800a29a:	4603      	mov	r3, r0
 800a29c:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	7959      	ldrb	r1, [r3, #5]
 800a2a2:	7bfb      	ldrb	r3, [r7, #15]
 800a2a4:	f1c3 0301 	rsb	r3, r3, #1
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f004 fdb2 	bl	800ee16 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	791b      	ldrb	r3, [r3, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f004 fdab 	bl	800ee16 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	2209      	movs	r2, #9
 800a2c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800a2c8:	e020      	b.n	800a30c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800a2ca:	7dbb      	ldrb	r3, [r7, #22]
 800a2cc:	2b04      	cmp	r3, #4
 800a2ce:	d11d      	bne.n	800a30c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	220b      	movs	r2, #11
 800a2d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a2d8:	e018      	b.n	800a30c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f7ff fdf2 	bl	8009ec4 <USBH_MSC_BOT_REQ_Reset>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a2e4:	7dfb      	ldrb	r3, [r7, #23]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d112      	bne.n	800a310 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800a2f2:	e00d      	b.n	800a310 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800a2f4:	bf00      	nop
 800a2f6:	e00c      	b.n	800a312 <USBH_MSC_BOT_Process+0x392>
      break;
 800a2f8:	bf00      	nop
 800a2fa:	e00a      	b.n	800a312 <USBH_MSC_BOT_Process+0x392>
      break;
 800a2fc:	bf00      	nop
 800a2fe:	e008      	b.n	800a312 <USBH_MSC_BOT_Process+0x392>
      break;
 800a300:	bf00      	nop
 800a302:	e006      	b.n	800a312 <USBH_MSC_BOT_Process+0x392>
      break;
 800a304:	bf00      	nop
 800a306:	e004      	b.n	800a312 <USBH_MSC_BOT_Process+0x392>
      break;
 800a308:	bf00      	nop
 800a30a:	e002      	b.n	800a312 <USBH_MSC_BOT_Process+0x392>
      break;
 800a30c:	bf00      	nop
 800a30e:	e000      	b.n	800a312 <USBH_MSC_BOT_Process+0x392>
      break;
 800a310:	bf00      	nop
  }
  return status;
 800a312:	7dfb      	ldrb	r3, [r7, #23]
}
 800a314:	4618      	mov	r0, r3
 800a316:	3718      	adds	r7, #24
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	460b      	mov	r3, r1
 800a326:	70fb      	strb	r3, [r7, #3]
 800a328:	4613      	mov	r3, r2
 800a32a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800a32c:	2302      	movs	r3, #2
 800a32e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a336:	69db      	ldr	r3, [r3, #28]
 800a338:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800a33a:	78bb      	ldrb	r3, [r7, #2]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d002      	beq.n	800a346 <USBH_MSC_BOT_Abort+0x2a>
 800a340:	2b01      	cmp	r3, #1
 800a342:	d009      	beq.n	800a358 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800a344:	e011      	b.n	800a36a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	79db      	ldrb	r3, [r3, #7]
 800a34a:	4619      	mov	r1, r3
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f001 f9a8 	bl	800b6a2 <USBH_ClrFeature>
 800a352:	4603      	mov	r3, r0
 800a354:	73fb      	strb	r3, [r7, #15]
      break;
 800a356:	e008      	b.n	800a36a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	799b      	ldrb	r3, [r3, #6]
 800a35c:	4619      	mov	r1, r3
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f001 f99f 	bl	800b6a2 <USBH_ClrFeature>
 800a364:	4603      	mov	r3, r0
 800a366:	73fb      	strb	r3, [r7, #15]
      break;
 800a368:	bf00      	nop
  }
  return status;
 800a36a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3710      	adds	r7, #16
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a382:	69db      	ldr	r3, [r3, #28]
 800a384:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800a386:	2301      	movs	r3, #1
 800a388:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	791b      	ldrb	r3, [r3, #4]
 800a38e:	4619      	mov	r1, r3
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f004 fc8d 	bl	800ecb0 <USBH_LL_GetLastXferSize>
 800a396:	4603      	mov	r3, r0
 800a398:	2b0d      	cmp	r3, #13
 800a39a:	d002      	beq.n	800a3a2 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800a39c:	2302      	movs	r3, #2
 800a39e:	73fb      	strb	r3, [r7, #15]
 800a3a0:	e024      	b.n	800a3ec <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3a6:	4a14      	ldr	r2, [pc, #80]	; (800a3f8 <USBH_MSC_DecodeCSW+0x84>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d11d      	bne.n	800a3e8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d119      	bne.n	800a3ec <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d102      	bne.n	800a3c8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	73fb      	strb	r3, [r7, #15]
 800a3c6:	e011      	b.n	800a3ec <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d102      	bne.n	800a3d8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	73fb      	strb	r3, [r7, #15]
 800a3d6:	e009      	b.n	800a3ec <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	d104      	bne.n	800a3ec <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800a3e2:	2302      	movs	r3, #2
 800a3e4:	73fb      	strb	r3, [r7, #15]
 800a3e6:	e001      	b.n	800a3ec <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800a3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	53425355 	.word	0x53425355

0800a3fc <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	460b      	mov	r3, r1
 800a406:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a408:	2302      	movs	r3, #2
 800a40a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a412:	69db      	ldr	r3, [r3, #28]
 800a414:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d002      	beq.n	800a426 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800a420:	2b02      	cmp	r3, #2
 800a422:	d021      	beq.n	800a468 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a424:	e028      	b.n	800a478 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	2200      	movs	r2, #0
 800a42a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	2200      	movs	r2, #0
 800a430:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	220a      	movs	r2, #10
 800a438:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	3363      	adds	r3, #99	; 0x63
 800a440:	2210      	movs	r2, #16
 800a442:	2100      	movs	r1, #0
 800a444:	4618      	mov	r0, r3
 800a446:	f004 fdc5 	bl	800efd4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	2200      	movs	r2, #0
 800a44e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	2201      	movs	r2, #1
 800a456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	2202      	movs	r2, #2
 800a45e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800a462:	2301      	movs	r3, #1
 800a464:	73fb      	strb	r3, [r7, #15]
      break;
 800a466:	e007      	b.n	800a478 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a468:	78fb      	ldrb	r3, [r7, #3]
 800a46a:	4619      	mov	r1, r3
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f7ff fd87 	bl	8009f80 <USBH_MSC_BOT_Process>
 800a472:	4603      	mov	r3, r0
 800a474:	73fb      	strb	r3, [r7, #15]
      break;
 800a476:	bf00      	nop
  }

  return error;
 800a478:	7bfb      	ldrb	r3, [r7, #15]
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b086      	sub	sp, #24
 800a486:	af00      	add	r7, sp, #0
 800a488:	60f8      	str	r0, [r7, #12]
 800a48a:	460b      	mov	r3, r1
 800a48c:	607a      	str	r2, [r7, #4]
 800a48e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800a490:	2301      	movs	r3, #1
 800a492:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a49a:	69db      	ldr	r3, [r3, #28]
 800a49c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d002      	beq.n	800a4ae <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	d027      	beq.n	800a4fc <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800a4ac:	e05f      	b.n	800a56e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	2208      	movs	r2, #8
 800a4b2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	2280      	movs	r2, #128	; 0x80
 800a4b8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	220a      	movs	r2, #10
 800a4c0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	3363      	adds	r3, #99	; 0x63
 800a4c8:	2210      	movs	r2, #16
 800a4ca:	2100      	movs	r1, #0
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f004 fd81 	bl	800efd4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	2225      	movs	r2, #37	; 0x25
 800a4d6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	2201      	movs	r2, #1
 800a4de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	2202      	movs	r2, #2
 800a4e6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	f103 0210 	add.w	r2, r3, #16
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	75fb      	strb	r3, [r7, #23]
      break;
 800a4fa:	e038      	b.n	800a56e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a4fc:	7afb      	ldrb	r3, [r7, #11]
 800a4fe:	4619      	mov	r1, r3
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f7ff fd3d 	bl	8009f80 <USBH_MSC_BOT_Process>
 800a506:	4603      	mov	r3, r0
 800a508:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a50a:	7dfb      	ldrb	r3, [r7, #23]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d12d      	bne.n	800a56c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a516:	3303      	adds	r3, #3
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	461a      	mov	r2, r3
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a522:	3302      	adds	r3, #2
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	021b      	lsls	r3, r3, #8
 800a528:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a530:	3301      	adds	r3, #1
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a536:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	061b      	lsls	r3, r3, #24
 800a542:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a54e:	3307      	adds	r3, #7
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	b29a      	uxth	r2, r3
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a55a:	3306      	adds	r3, #6
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	b29b      	uxth	r3, r3
 800a560:	021b      	lsls	r3, r3, #8
 800a562:	b29b      	uxth	r3, r3
 800a564:	4313      	orrs	r3, r2
 800a566:	b29a      	uxth	r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	809a      	strh	r2, [r3, #4]
      break;
 800a56c:	bf00      	nop
  }

  return error;
 800a56e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3718      	adds	r7, #24
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b086      	sub	sp, #24
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	460b      	mov	r3, r1
 800a582:	607a      	str	r2, [r7, #4]
 800a584:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a586:	2302      	movs	r3, #2
 800a588:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a590:	69db      	ldr	r3, [r3, #28]
 800a592:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d002      	beq.n	800a5a4 <USBH_MSC_SCSI_Inquiry+0x2c>
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d03d      	beq.n	800a61e <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a5a2:	e089      	b.n	800a6b8 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	2224      	movs	r2, #36	; 0x24
 800a5a8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	2280      	movs	r2, #128	; 0x80
 800a5ae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	220a      	movs	r2, #10
 800a5b6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	3363      	adds	r3, #99	; 0x63
 800a5be:	220a      	movs	r2, #10
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f004 fd06 	bl	800efd4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	2212      	movs	r2, #18
 800a5cc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a5d0:	7afb      	ldrb	r3, [r7, #11]
 800a5d2:	015b      	lsls	r3, r3, #5
 800a5d4:	b2da      	uxtb	r2, r3
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	2224      	movs	r2, #36	; 0x24
 800a5f0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	2202      	movs	r2, #2
 800a608:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	f103 0210 	add.w	r2, r3, #16
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a618:	2301      	movs	r3, #1
 800a61a:	75fb      	strb	r3, [r7, #23]
      break;
 800a61c:	e04c      	b.n	800a6b8 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a61e:	7afb      	ldrb	r3, [r7, #11]
 800a620:	4619      	mov	r1, r3
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f7ff fcac 	bl	8009f80 <USBH_MSC_BOT_Process>
 800a628:	4603      	mov	r3, r0
 800a62a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a62c:	7dfb      	ldrb	r3, [r7, #23]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d141      	bne.n	800a6b6 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a632:	2222      	movs	r2, #34	; 0x22
 800a634:	2100      	movs	r1, #0
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f004 fccc 	bl	800efd4 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	f003 031f 	and.w	r3, r3, #31
 800a648:	b2da      	uxtb	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	095b      	lsrs	r3, r3, #5
 800a658:	b2da      	uxtb	r2, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a664:	3301      	adds	r3, #1
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	b25b      	sxtb	r3, r3
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	da03      	bge.n	800a676 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2201      	movs	r2, #1
 800a672:	709a      	strb	r2, [r3, #2]
 800a674:	e002      	b.n	800a67c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	1cd8      	adds	r0, r3, #3
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a686:	3308      	adds	r3, #8
 800a688:	2208      	movs	r2, #8
 800a68a:	4619      	mov	r1, r3
 800a68c:	f004 fc94 	bl	800efb8 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f103 000c 	add.w	r0, r3, #12
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a69c:	3310      	adds	r3, #16
 800a69e:	2210      	movs	r2, #16
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	f004 fc89 	bl	800efb8 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	331d      	adds	r3, #29
 800a6aa:	693a      	ldr	r2, [r7, #16]
 800a6ac:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a6b0:	3220      	adds	r2, #32
 800a6b2:	6812      	ldr	r2, [r2, #0]
 800a6b4:	601a      	str	r2, [r3, #0]
      break;
 800a6b6:	bf00      	nop
  }

  return error;
 800a6b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3718      	adds	r7, #24
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b086      	sub	sp, #24
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	60f8      	str	r0, [r7, #12]
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	607a      	str	r2, [r7, #4]
 800a6ce:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6da:	69db      	ldr	r3, [r3, #28]
 800a6dc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d002      	beq.n	800a6ee <USBH_MSC_SCSI_RequestSense+0x2c>
 800a6e8:	2b02      	cmp	r3, #2
 800a6ea:	d03d      	beq.n	800a768 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a6ec:	e05d      	b.n	800a7aa <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	220e      	movs	r2, #14
 800a6f2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	2280      	movs	r2, #128	; 0x80
 800a6f8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	220a      	movs	r2, #10
 800a700:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	3363      	adds	r3, #99	; 0x63
 800a708:	2210      	movs	r2, #16
 800a70a:	2100      	movs	r1, #0
 800a70c:	4618      	mov	r0, r3
 800a70e:	f004 fc61 	bl	800efd4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	2203      	movs	r2, #3
 800a716:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a71a:	7afb      	ldrb	r3, [r7, #11]
 800a71c:	015b      	lsls	r3, r3, #5
 800a71e:	b2da      	uxtb	r2, r3
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	2200      	movs	r2, #0
 800a72a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	2200      	movs	r2, #0
 800a732:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	220e      	movs	r2, #14
 800a73a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	2200      	movs	r2, #0
 800a742:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	2201      	movs	r2, #1
 800a74a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	2202      	movs	r2, #2
 800a752:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	f103 0210 	add.w	r2, r3, #16
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a762:	2301      	movs	r3, #1
 800a764:	75fb      	strb	r3, [r7, #23]
      break;
 800a766:	e020      	b.n	800a7aa <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a768:	7afb      	ldrb	r3, [r7, #11]
 800a76a:	4619      	mov	r1, r3
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f7ff fc07 	bl	8009f80 <USBH_MSC_BOT_Process>
 800a772:	4603      	mov	r3, r0
 800a774:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a776:	7dfb      	ldrb	r3, [r7, #23]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d115      	bne.n	800a7a8 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a782:	3302      	adds	r3, #2
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	f003 030f 	and.w	r3, r3, #15
 800a78a:	b2da      	uxtb	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a796:	7b1a      	ldrb	r2, [r3, #12]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7a2:	7b5a      	ldrb	r2, [r3, #13]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	709a      	strb	r2, [r3, #2]
      break;
 800a7a8:	bf00      	nop
  }

  return error;
 800a7aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3718      	adds	r7, #24
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	607a      	str	r2, [r7, #4]
 800a7be:	603b      	str	r3, [r7, #0]
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a7c4:	2302      	movs	r3, #2
 800a7c6:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7ce:	69db      	ldr	r3, [r3, #28]
 800a7d0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d002      	beq.n	800a7e2 <USBH_MSC_SCSI_Write+0x2e>
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d047      	beq.n	800a870 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a7e0:	e04e      	b.n	800a880 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	6a3b      	ldr	r3, [r7, #32]
 800a7ec:	fb03 f202 	mul.w	r2, r3, r2
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	220a      	movs	r2, #10
 800a800:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	3363      	adds	r3, #99	; 0x63
 800a808:	2210      	movs	r2, #16
 800a80a:	2100      	movs	r1, #0
 800a80c:	4618      	mov	r0, r3
 800a80e:	f004 fbe1 	bl	800efd4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	222a      	movs	r2, #42	; 0x2a
 800a816:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a81a:	79fa      	ldrb	r2, [r7, #7]
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a822:	79ba      	ldrb	r2, [r7, #6]
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a82a:	797a      	ldrb	r2, [r7, #5]
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a832:	1d3b      	adds	r3, r7, #4
 800a834:	781a      	ldrb	r2, [r3, #0]
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a83c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a846:	f107 0320 	add.w	r3, r7, #32
 800a84a:	781a      	ldrb	r2, [r3, #0]
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	2201      	movs	r2, #1
 800a856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	2202      	movs	r2, #2
 800a85e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	683a      	ldr	r2, [r7, #0]
 800a866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a86a:	2301      	movs	r3, #1
 800a86c:	75fb      	strb	r3, [r7, #23]
      break;
 800a86e:	e007      	b.n	800a880 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a870:	7afb      	ldrb	r3, [r7, #11]
 800a872:	4619      	mov	r1, r3
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f7ff fb83 	bl	8009f80 <USBH_MSC_BOT_Process>
 800a87a:	4603      	mov	r3, r0
 800a87c:	75fb      	strb	r3, [r7, #23]
      break;
 800a87e:	bf00      	nop
  }

  return error;
 800a880:	7dfb      	ldrb	r3, [r7, #23]
}
 800a882:	4618      	mov	r0, r3
 800a884:	3718      	adds	r7, #24
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}

0800a88a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b086      	sub	sp, #24
 800a88e:	af00      	add	r7, sp, #0
 800a890:	60f8      	str	r0, [r7, #12]
 800a892:	607a      	str	r2, [r7, #4]
 800a894:	603b      	str	r3, [r7, #0]
 800a896:	460b      	mov	r3, r1
 800a898:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a89a:	2302      	movs	r3, #2
 800a89c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8a4:	69db      	ldr	r3, [r3, #28]
 800a8a6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d002      	beq.n	800a8b8 <USBH_MSC_SCSI_Read+0x2e>
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	d047      	beq.n	800a946 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a8b6:	e04e      	b.n	800a956 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a8be:	461a      	mov	r2, r3
 800a8c0:	6a3b      	ldr	r3, [r7, #32]
 800a8c2:	fb03 f202 	mul.w	r2, r3, r2
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	2280      	movs	r2, #128	; 0x80
 800a8ce:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	220a      	movs	r2, #10
 800a8d6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	3363      	adds	r3, #99	; 0x63
 800a8de:	2210      	movs	r2, #16
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f004 fb76 	bl	800efd4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	2228      	movs	r2, #40	; 0x28
 800a8ec:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a8f0:	79fa      	ldrb	r2, [r7, #7]
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a8f8:	79ba      	ldrb	r2, [r7, #6]
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a900:	797a      	ldrb	r2, [r7, #5]
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a908:	1d3b      	adds	r3, r7, #4
 800a90a:	781a      	ldrb	r2, [r3, #0]
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a912:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a91c:	f107 0320 	add.w	r3, r7, #32
 800a920:	781a      	ldrb	r2, [r3, #0]
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	2202      	movs	r2, #2
 800a934:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a940:	2301      	movs	r3, #1
 800a942:	75fb      	strb	r3, [r7, #23]
      break;
 800a944:	e007      	b.n	800a956 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a946:	7afb      	ldrb	r3, [r7, #11]
 800a948:	4619      	mov	r1, r3
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f7ff fb18 	bl	8009f80 <USBH_MSC_BOT_Process>
 800a950:	4603      	mov	r3, r0
 800a952:	75fb      	strb	r3, [r7, #23]
      break;
 800a954:	bf00      	nop
  }

  return error;
 800a956:	7dfb      	ldrb	r3, [r7, #23]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3718      	adds	r7, #24
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	4613      	mov	r3, r2
 800a96c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d101      	bne.n	800a978 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a974:	2302      	movs	r3, #2
 800a976:	e029      	b.n	800a9cc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	79fa      	ldrb	r2, [r7, #7]
 800a97c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2200      	movs	r2, #0
 800a984:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a990:	68f8      	ldr	r0, [r7, #12]
 800a992:	f000 f81f 	bl	800a9d4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d003      	beq.n	800a9c4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	68ba      	ldr	r2, [r7, #8]
 800a9c0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a9c4:	68f8      	ldr	r0, [r7, #12]
 800a9c6:	f004 f8bf 	bl	800eb48 <USBH_LL_Init>

  return USBH_OK;
 800a9ca:	2300      	movs	r3, #0
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3710      	adds	r7, #16
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	60fb      	str	r3, [r7, #12]
 800a9e4:	e009      	b.n	800a9fa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	33e0      	adds	r3, #224	; 0xe0
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	4413      	add	r3, r2
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	60fb      	str	r3, [r7, #12]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2b0f      	cmp	r3, #15
 800a9fe:	d9f2      	bls.n	800a9e6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aa00:	2300      	movs	r3, #0
 800aa02:	60fb      	str	r3, [r7, #12]
 800aa04:	e009      	b.n	800aa1a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aa10:	2200      	movs	r2, #0
 800aa12:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	3301      	adds	r3, #1
 800aa18:	60fb      	str	r3, [r7, #12]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa20:	d3f1      	bcc.n	800aa06 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2201      	movs	r2, #1
 800aa32:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2240      	movs	r2, #64	; 0x40
 800aa46:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2201      	movs	r2, #1
 800aa5a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800aa6e:	2300      	movs	r3, #0
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3714      	adds	r7, #20
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b085      	sub	sp, #20
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800aa86:	2300      	movs	r3, #0
 800aa88:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d016      	beq.n	800aabe <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d10e      	bne.n	800aab8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800aaa0:	1c59      	adds	r1, r3, #1
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	33de      	adds	r3, #222	; 0xde
 800aaac:	6839      	ldr	r1, [r7, #0]
 800aaae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800aab2:	2300      	movs	r3, #0
 800aab4:	73fb      	strb	r3, [r7, #15]
 800aab6:	e004      	b.n	800aac2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800aab8:	2302      	movs	r3, #2
 800aaba:	73fb      	strb	r3, [r7, #15]
 800aabc:	e001      	b.n	800aac2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800aabe:	2302      	movs	r3, #2
 800aac0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aac2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3714      	adds	r7, #20
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	460b      	mov	r3, r1
 800aada:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800aadc:	2300      	movs	r3, #0
 800aade:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800aae6:	78fa      	ldrb	r2, [r7, #3]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d204      	bcs.n	800aaf6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	78fa      	ldrb	r2, [r7, #3]
 800aaf0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800aaf4:	e001      	b.n	800aafa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800aaf6:	2302      	movs	r3, #2
 800aaf8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aafa:	7bfb      	ldrb	r3, [r7, #15]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3714      	adds	r7, #20
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b087      	sub	sp, #28
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	4608      	mov	r0, r1
 800ab12:	4611      	mov	r1, r2
 800ab14:	461a      	mov	r2, r3
 800ab16:	4603      	mov	r3, r0
 800ab18:	70fb      	strb	r3, [r7, #3]
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	70bb      	strb	r3, [r7, #2]
 800ab1e:	4613      	mov	r3, r2
 800ab20:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ab22:	2300      	movs	r3, #0
 800ab24:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ab26:	2300      	movs	r3, #0
 800ab28:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ab30:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ab32:	e025      	b.n	800ab80 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ab34:	7dfb      	ldrb	r3, [r7, #23]
 800ab36:	221a      	movs	r2, #26
 800ab38:	fb02 f303 	mul.w	r3, r2, r3
 800ab3c:	3308      	adds	r3, #8
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	4413      	add	r3, r2
 800ab42:	3302      	adds	r3, #2
 800ab44:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	795b      	ldrb	r3, [r3, #5]
 800ab4a:	78fa      	ldrb	r2, [r7, #3]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d002      	beq.n	800ab56 <USBH_FindInterface+0x4e>
 800ab50:	78fb      	ldrb	r3, [r7, #3]
 800ab52:	2bff      	cmp	r3, #255	; 0xff
 800ab54:	d111      	bne.n	800ab7a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ab5a:	78ba      	ldrb	r2, [r7, #2]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d002      	beq.n	800ab66 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ab60:	78bb      	ldrb	r3, [r7, #2]
 800ab62:	2bff      	cmp	r3, #255	; 0xff
 800ab64:	d109      	bne.n	800ab7a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ab6a:	787a      	ldrb	r2, [r7, #1]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d002      	beq.n	800ab76 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ab70:	787b      	ldrb	r3, [r7, #1]
 800ab72:	2bff      	cmp	r3, #255	; 0xff
 800ab74:	d101      	bne.n	800ab7a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ab76:	7dfb      	ldrb	r3, [r7, #23]
 800ab78:	e006      	b.n	800ab88 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ab7a:	7dfb      	ldrb	r3, [r7, #23]
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ab80:	7dfb      	ldrb	r3, [r7, #23]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d9d6      	bls.n	800ab34 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ab86:	23ff      	movs	r3, #255	; 0xff
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	371c      	adds	r7, #28
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f004 f80f 	bl	800ebc0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800aba2:	2101      	movs	r1, #1
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f004 f928 	bl	800edfa <USBH_LL_DriverVBUS>

  return USBH_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b088      	sub	sp, #32
 800abb8:	af04      	add	r7, sp, #16
 800abba:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800abbc:	2302      	movs	r3, #2
 800abbe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800abc0:	2300      	movs	r3, #0
 800abc2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d102      	bne.n	800abd6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2203      	movs	r2, #3
 800abd4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	2b0b      	cmp	r3, #11
 800abde:	f200 81be 	bhi.w	800af5e <USBH_Process+0x3aa>
 800abe2:	a201      	add	r2, pc, #4	; (adr r2, 800abe8 <USBH_Process+0x34>)
 800abe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe8:	0800ac19 	.word	0x0800ac19
 800abec:	0800ac4b 	.word	0x0800ac4b
 800abf0:	0800acb3 	.word	0x0800acb3
 800abf4:	0800aef9 	.word	0x0800aef9
 800abf8:	0800af5f 	.word	0x0800af5f
 800abfc:	0800ad57 	.word	0x0800ad57
 800ac00:	0800ae9f 	.word	0x0800ae9f
 800ac04:	0800ad8d 	.word	0x0800ad8d
 800ac08:	0800adad 	.word	0x0800adad
 800ac0c:	0800adcd 	.word	0x0800adcd
 800ac10:	0800ae11 	.word	0x0800ae11
 800ac14:	0800aee1 	.word	0x0800aee1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f000 819e 	beq.w	800af62 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2201      	movs	r2, #1
 800ac2a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ac2c:	20c8      	movs	r0, #200	; 0xc8
 800ac2e:	f004 f952 	bl	800eed6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f004 f821 	bl	800ec7a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ac48:	e18b      	b.n	800af62 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d107      	bne.n	800ac64 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2200      	movs	r2, #0
 800ac58:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2202      	movs	r2, #2
 800ac60:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ac62:	e18d      	b.n	800af80 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ac6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac6e:	d914      	bls.n	800ac9a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ac76:	3301      	adds	r3, #1
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ac86:	2b03      	cmp	r3, #3
 800ac88:	d903      	bls.n	800ac92 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	220d      	movs	r2, #13
 800ac8e:	701a      	strb	r2, [r3, #0]
      break;
 800ac90:	e176      	b.n	800af80 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2200      	movs	r2, #0
 800ac96:	701a      	strb	r2, [r3, #0]
      break;
 800ac98:	e172      	b.n	800af80 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800aca0:	f103 020a 	add.w	r2, r3, #10
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800acaa:	200a      	movs	r0, #10
 800acac:	f004 f913 	bl	800eed6 <USBH_Delay>
      break;
 800acb0:	e166      	b.n	800af80 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d005      	beq.n	800acc8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800acc2:	2104      	movs	r1, #4
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800acc8:	2064      	movs	r0, #100	; 0x64
 800acca:	f004 f904 	bl	800eed6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f003 ffac 	bl	800ec2c <USBH_LL_GetSpeed>
 800acd4:	4603      	mov	r3, r0
 800acd6:	461a      	mov	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2205      	movs	r2, #5
 800ace2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ace4:	2100      	movs	r1, #0
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f001 fa29 	bl	800c13e <USBH_AllocPipe>
 800acec:	4603      	mov	r3, r0
 800acee:	461a      	mov	r2, r3
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800acf4:	2180      	movs	r1, #128	; 0x80
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f001 fa21 	bl	800c13e <USBH_AllocPipe>
 800acfc:	4603      	mov	r3, r0
 800acfe:	461a      	mov	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	7919      	ldrb	r1, [r3, #4]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ad18:	b292      	uxth	r2, r2
 800ad1a:	9202      	str	r2, [sp, #8]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	9201      	str	r2, [sp, #4]
 800ad20:	9300      	str	r3, [sp, #0]
 800ad22:	4603      	mov	r3, r0
 800ad24:	2280      	movs	r2, #128	; 0x80
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f001 f9da 	bl	800c0e0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	7959      	ldrb	r1, [r3, #5]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ad40:	b292      	uxth	r2, r2
 800ad42:	9202      	str	r2, [sp, #8]
 800ad44:	2200      	movs	r2, #0
 800ad46:	9201      	str	r2, [sp, #4]
 800ad48:	9300      	str	r3, [sp, #0]
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f001 f9c6 	bl	800c0e0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ad54:	e114      	b.n	800af80 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 f918 	bl	800af8c <USBH_HandleEnum>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ad60:	7bbb      	ldrb	r3, [r7, #14]
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f040 80fe 	bne.w	800af66 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d103      	bne.n	800ad84 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2208      	movs	r2, #8
 800ad80:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ad82:	e0f0      	b.n	800af66 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2207      	movs	r2, #7
 800ad88:	701a      	strb	r2, [r3, #0]
      break;
 800ad8a:	e0ec      	b.n	800af66 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	f000 80e9 	beq.w	800af6a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad9e:	2101      	movs	r1, #1
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2208      	movs	r2, #8
 800ada8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800adaa:	e0de      	b.n	800af6a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	4619      	mov	r1, r3
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 fc2c 	bl	800b614 <USBH_SetCfg>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	f040 80d5 	bne.w	800af6e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2209      	movs	r2, #9
 800adc8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800adca:	e0d0      	b.n	800af6e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800add2:	f003 0320 	and.w	r3, r3, #32
 800add6:	2b00      	cmp	r3, #0
 800add8:	d016      	beq.n	800ae08 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800adda:	2101      	movs	r1, #1
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 fc3c 	bl	800b65a <USBH_SetFeature>
 800ade2:	4603      	mov	r3, r0
 800ade4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ade6:	7bbb      	ldrb	r3, [r7, #14]
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	2b00      	cmp	r3, #0
 800adec:	d103      	bne.n	800adf6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	220a      	movs	r2, #10
 800adf2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800adf4:	e0bd      	b.n	800af72 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800adf6:	7bbb      	ldrb	r3, [r7, #14]
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	2b03      	cmp	r3, #3
 800adfc:	f040 80b9 	bne.w	800af72 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	220a      	movs	r2, #10
 800ae04:	701a      	strb	r2, [r3, #0]
      break;
 800ae06:	e0b4      	b.n	800af72 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	220a      	movs	r2, #10
 800ae0c:	701a      	strb	r2, [r3, #0]
      break;
 800ae0e:	e0b0      	b.n	800af72 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f000 80ad 	beq.w	800af76 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ae24:	2300      	movs	r3, #0
 800ae26:	73fb      	strb	r3, [r7, #15]
 800ae28:	e016      	b.n	800ae58 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ae2a:	7bfa      	ldrb	r2, [r7, #15]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	32de      	adds	r2, #222	; 0xde
 800ae30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae34:	791a      	ldrb	r2, [r3, #4]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d108      	bne.n	800ae52 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800ae40:	7bfa      	ldrb	r2, [r7, #15]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	32de      	adds	r2, #222	; 0xde
 800ae46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ae50:	e005      	b.n	800ae5e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ae52:	7bfb      	ldrb	r3, [r7, #15]
 800ae54:	3301      	adds	r3, #1
 800ae56:	73fb      	strb	r3, [r7, #15]
 800ae58:	7bfb      	ldrb	r3, [r7, #15]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d0e5      	beq.n	800ae2a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d016      	beq.n	800ae96 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	4798      	blx	r3
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d109      	bne.n	800ae8e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2206      	movs	r2, #6
 800ae7e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae86:	2103      	movs	r1, #3
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ae8c:	e073      	b.n	800af76 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	220d      	movs	r2, #13
 800ae92:	701a      	strb	r2, [r3, #0]
      break;
 800ae94:	e06f      	b.n	800af76 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	220d      	movs	r2, #13
 800ae9a:	701a      	strb	r2, [r3, #0]
      break;
 800ae9c:	e06b      	b.n	800af76 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d017      	beq.n	800aed8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aeae:	691b      	ldr	r3, [r3, #16]
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	4798      	blx	r3
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800aeb8:	7bbb      	ldrb	r3, [r7, #14]
 800aeba:	b2db      	uxtb	r3, r3
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d103      	bne.n	800aec8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	220b      	movs	r2, #11
 800aec4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aec6:	e058      	b.n	800af7a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800aec8:	7bbb      	ldrb	r3, [r7, #14]
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d154      	bne.n	800af7a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	220d      	movs	r2, #13
 800aed4:	701a      	strb	r2, [r3, #0]
      break;
 800aed6:	e050      	b.n	800af7a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	220d      	movs	r2, #13
 800aedc:	701a      	strb	r2, [r3, #0]
      break;
 800aede:	e04c      	b.n	800af7a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d049      	beq.n	800af7e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aef0:	695b      	ldr	r3, [r3, #20]
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	4798      	blx	r3
      }
      break;
 800aef6:	e042      	b.n	800af7e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f7ff fd67 	bl	800a9d4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d009      	beq.n	800af24 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af16:	68db      	ldr	r3, [r3, #12]
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d005      	beq.n	800af3a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af34:	2105      	movs	r1, #5
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800af40:	b2db      	uxtb	r3, r3
 800af42:	2b01      	cmp	r3, #1
 800af44:	d107      	bne.n	800af56 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f7ff fe20 	bl	800ab94 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800af54:	e014      	b.n	800af80 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f003 fe32 	bl	800ebc0 <USBH_LL_Start>
      break;
 800af5c:	e010      	b.n	800af80 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800af5e:	bf00      	nop
 800af60:	e00e      	b.n	800af80 <USBH_Process+0x3cc>
      break;
 800af62:	bf00      	nop
 800af64:	e00c      	b.n	800af80 <USBH_Process+0x3cc>
      break;
 800af66:	bf00      	nop
 800af68:	e00a      	b.n	800af80 <USBH_Process+0x3cc>
    break;
 800af6a:	bf00      	nop
 800af6c:	e008      	b.n	800af80 <USBH_Process+0x3cc>
      break;
 800af6e:	bf00      	nop
 800af70:	e006      	b.n	800af80 <USBH_Process+0x3cc>
      break;
 800af72:	bf00      	nop
 800af74:	e004      	b.n	800af80 <USBH_Process+0x3cc>
      break;
 800af76:	bf00      	nop
 800af78:	e002      	b.n	800af80 <USBH_Process+0x3cc>
      break;
 800af7a:	bf00      	nop
 800af7c:	e000      	b.n	800af80 <USBH_Process+0x3cc>
      break;
 800af7e:	bf00      	nop
  }
  return USBH_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop

0800af8c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b088      	sub	sp, #32
 800af90:	af04      	add	r7, sp, #16
 800af92:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800af94:	2301      	movs	r3, #1
 800af96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800af98:	2301      	movs	r3, #1
 800af9a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	785b      	ldrb	r3, [r3, #1]
 800afa0:	2b07      	cmp	r3, #7
 800afa2:	f200 81c1 	bhi.w	800b328 <USBH_HandleEnum+0x39c>
 800afa6:	a201      	add	r2, pc, #4	; (adr r2, 800afac <USBH_HandleEnum+0x20>)
 800afa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afac:	0800afcd 	.word	0x0800afcd
 800afb0:	0800b08b 	.word	0x0800b08b
 800afb4:	0800b0f5 	.word	0x0800b0f5
 800afb8:	0800b183 	.word	0x0800b183
 800afbc:	0800b1ed 	.word	0x0800b1ed
 800afc0:	0800b25d 	.word	0x0800b25d
 800afc4:	0800b2a3 	.word	0x0800b2a3
 800afc8:	0800b2e9 	.word	0x0800b2e9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800afcc:	2108      	movs	r1, #8
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 fa50 	bl	800b474 <USBH_Get_DevDesc>
 800afd4:	4603      	mov	r3, r0
 800afd6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800afd8:	7bbb      	ldrb	r3, [r7, #14]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d130      	bne.n	800b040 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	7919      	ldrb	r1, [r3, #4]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b002:	b292      	uxth	r2, r2
 800b004:	9202      	str	r2, [sp, #8]
 800b006:	2200      	movs	r2, #0
 800b008:	9201      	str	r2, [sp, #4]
 800b00a:	9300      	str	r3, [sp, #0]
 800b00c:	4603      	mov	r3, r0
 800b00e:	2280      	movs	r2, #128	; 0x80
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f001 f865 	bl	800c0e0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	7959      	ldrb	r1, [r3, #5]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b02a:	b292      	uxth	r2, r2
 800b02c:	9202      	str	r2, [sp, #8]
 800b02e:	2200      	movs	r2, #0
 800b030:	9201      	str	r2, [sp, #4]
 800b032:	9300      	str	r3, [sp, #0]
 800b034:	4603      	mov	r3, r0
 800b036:	2200      	movs	r2, #0
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f001 f851 	bl	800c0e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b03e:	e175      	b.n	800b32c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b040:	7bbb      	ldrb	r3, [r7, #14]
 800b042:	2b03      	cmp	r3, #3
 800b044:	f040 8172 	bne.w	800b32c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b04e:	3301      	adds	r3, #1
 800b050:	b2da      	uxtb	r2, r3
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b05e:	2b03      	cmp	r3, #3
 800b060:	d903      	bls.n	800b06a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	220d      	movs	r2, #13
 800b066:	701a      	strb	r2, [r3, #0]
      break;
 800b068:	e160      	b.n	800b32c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	795b      	ldrb	r3, [r3, #5]
 800b06e:	4619      	mov	r1, r3
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f001 f885 	bl	800c180 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	791b      	ldrb	r3, [r3, #4]
 800b07a:	4619      	mov	r1, r3
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f001 f87f 	bl	800c180 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2200      	movs	r2, #0
 800b086:	701a      	strb	r2, [r3, #0]
      break;
 800b088:	e150      	b.n	800b32c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b08a:	2112      	movs	r1, #18
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 f9f1 	bl	800b474 <USBH_Get_DevDesc>
 800b092:	4603      	mov	r3, r0
 800b094:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b096:	7bbb      	ldrb	r3, [r7, #14]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d103      	bne.n	800b0a4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2202      	movs	r2, #2
 800b0a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b0a2:	e145      	b.n	800b330 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0a4:	7bbb      	ldrb	r3, [r7, #14]
 800b0a6:	2b03      	cmp	r3, #3
 800b0a8:	f040 8142 	bne.w	800b330 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	b2da      	uxtb	r2, r3
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b0c2:	2b03      	cmp	r3, #3
 800b0c4:	d903      	bls.n	800b0ce <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	220d      	movs	r2, #13
 800b0ca:	701a      	strb	r2, [r3, #0]
      break;
 800b0cc:	e130      	b.n	800b330 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	795b      	ldrb	r3, [r3, #5]
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f001 f853 	bl	800c180 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	791b      	ldrb	r3, [r3, #4]
 800b0de:	4619      	mov	r1, r3
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f001 f84d 	bl	800c180 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	701a      	strb	r2, [r3, #0]
      break;
 800b0f2:	e11d      	b.n	800b330 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b0f4:	2101      	movs	r1, #1
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fa68 	bl	800b5cc <USBH_SetAddress>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b100:	7bbb      	ldrb	r3, [r7, #14]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d132      	bne.n	800b16c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b106:	2002      	movs	r0, #2
 800b108:	f003 fee5 	bl	800eed6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2201      	movs	r2, #1
 800b110:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2203      	movs	r2, #3
 800b118:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	7919      	ldrb	r1, [r3, #4]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b12e:	b292      	uxth	r2, r2
 800b130:	9202      	str	r2, [sp, #8]
 800b132:	2200      	movs	r2, #0
 800b134:	9201      	str	r2, [sp, #4]
 800b136:	9300      	str	r3, [sp, #0]
 800b138:	4603      	mov	r3, r0
 800b13a:	2280      	movs	r2, #128	; 0x80
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 ffcf 	bl	800c0e0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	7959      	ldrb	r1, [r3, #5]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b156:	b292      	uxth	r2, r2
 800b158:	9202      	str	r2, [sp, #8]
 800b15a:	2200      	movs	r2, #0
 800b15c:	9201      	str	r2, [sp, #4]
 800b15e:	9300      	str	r3, [sp, #0]
 800b160:	4603      	mov	r3, r0
 800b162:	2200      	movs	r2, #0
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 ffbb 	bl	800c0e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b16a:	e0e3      	b.n	800b334 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b16c:	7bbb      	ldrb	r3, [r7, #14]
 800b16e:	2b03      	cmp	r3, #3
 800b170:	f040 80e0 	bne.w	800b334 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	220d      	movs	r2, #13
 800b178:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	705a      	strb	r2, [r3, #1]
      break;
 800b180:	e0d8      	b.n	800b334 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b182:	2109      	movs	r1, #9
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 f99d 	bl	800b4c4 <USBH_Get_CfgDesc>
 800b18a:	4603      	mov	r3, r0
 800b18c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b18e:	7bbb      	ldrb	r3, [r7, #14]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d103      	bne.n	800b19c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2204      	movs	r2, #4
 800b198:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b19a:	e0cd      	b.n	800b338 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b19c:	7bbb      	ldrb	r3, [r7, #14]
 800b19e:	2b03      	cmp	r3, #3
 800b1a0:	f040 80ca 	bne.w	800b338 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	b2da      	uxtb	r2, r3
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b1ba:	2b03      	cmp	r3, #3
 800b1bc:	d903      	bls.n	800b1c6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	220d      	movs	r2, #13
 800b1c2:	701a      	strb	r2, [r3, #0]
      break;
 800b1c4:	e0b8      	b.n	800b338 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	795b      	ldrb	r3, [r3, #5]
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 ffd7 	bl	800c180 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	791b      	ldrb	r3, [r3, #4]
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 ffd1 	bl	800c180 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	701a      	strb	r2, [r3, #0]
      break;
 800b1ea:	e0a5      	b.n	800b338 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 f965 	bl	800b4c4 <USBH_Get_CfgDesc>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b1fe:	7bbb      	ldrb	r3, [r7, #14]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d103      	bne.n	800b20c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2205      	movs	r2, #5
 800b208:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b20a:	e097      	b.n	800b33c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b20c:	7bbb      	ldrb	r3, [r7, #14]
 800b20e:	2b03      	cmp	r3, #3
 800b210:	f040 8094 	bne.w	800b33c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b21a:	3301      	adds	r3, #1
 800b21c:	b2da      	uxtb	r2, r3
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b22a:	2b03      	cmp	r3, #3
 800b22c:	d903      	bls.n	800b236 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	220d      	movs	r2, #13
 800b232:	701a      	strb	r2, [r3, #0]
      break;
 800b234:	e082      	b.n	800b33c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	795b      	ldrb	r3, [r3, #5]
 800b23a:	4619      	mov	r1, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 ff9f 	bl	800c180 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	791b      	ldrb	r3, [r3, #4]
 800b246:	4619      	mov	r1, r3
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 ff99 	bl	800c180 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	701a      	strb	r2, [r3, #0]
      break;
 800b25a:	e06f      	b.n	800b33c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b262:	2b00      	cmp	r3, #0
 800b264:	d019      	beq.n	800b29a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b272:	23ff      	movs	r3, #255	; 0xff
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 f949 	bl	800b50c <USBH_Get_StringDesc>
 800b27a:	4603      	mov	r3, r0
 800b27c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b27e:	7bbb      	ldrb	r3, [r7, #14]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d103      	bne.n	800b28c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2206      	movs	r2, #6
 800b288:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b28a:	e059      	b.n	800b340 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b28c:	7bbb      	ldrb	r3, [r7, #14]
 800b28e:	2b03      	cmp	r3, #3
 800b290:	d156      	bne.n	800b340 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2206      	movs	r2, #6
 800b296:	705a      	strb	r2, [r3, #1]
      break;
 800b298:	e052      	b.n	800b340 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2206      	movs	r2, #6
 800b29e:	705a      	strb	r2, [r3, #1]
      break;
 800b2a0:	e04e      	b.n	800b340 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d019      	beq.n	800b2e0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b2b8:	23ff      	movs	r3, #255	; 0xff
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 f926 	bl	800b50c <USBH_Get_StringDesc>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b2c4:	7bbb      	ldrb	r3, [r7, #14]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d103      	bne.n	800b2d2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2207      	movs	r2, #7
 800b2ce:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b2d0:	e038      	b.n	800b344 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b2d2:	7bbb      	ldrb	r3, [r7, #14]
 800b2d4:	2b03      	cmp	r3, #3
 800b2d6:	d135      	bne.n	800b344 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2207      	movs	r2, #7
 800b2dc:	705a      	strb	r2, [r3, #1]
      break;
 800b2de:	e031      	b.n	800b344 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2207      	movs	r2, #7
 800b2e4:	705a      	strb	r2, [r3, #1]
      break;
 800b2e6:	e02d      	b.n	800b344 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d017      	beq.n	800b322 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b2fe:	23ff      	movs	r3, #255	; 0xff
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 f903 	bl	800b50c <USBH_Get_StringDesc>
 800b306:	4603      	mov	r3, r0
 800b308:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b30a:	7bbb      	ldrb	r3, [r7, #14]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d102      	bne.n	800b316 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b310:	2300      	movs	r3, #0
 800b312:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b314:	e018      	b.n	800b348 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b316:	7bbb      	ldrb	r3, [r7, #14]
 800b318:	2b03      	cmp	r3, #3
 800b31a:	d115      	bne.n	800b348 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b31c:	2300      	movs	r3, #0
 800b31e:	73fb      	strb	r3, [r7, #15]
      break;
 800b320:	e012      	b.n	800b348 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b322:	2300      	movs	r3, #0
 800b324:	73fb      	strb	r3, [r7, #15]
      break;
 800b326:	e00f      	b.n	800b348 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b328:	bf00      	nop
 800b32a:	e00e      	b.n	800b34a <USBH_HandleEnum+0x3be>
      break;
 800b32c:	bf00      	nop
 800b32e:	e00c      	b.n	800b34a <USBH_HandleEnum+0x3be>
      break;
 800b330:	bf00      	nop
 800b332:	e00a      	b.n	800b34a <USBH_HandleEnum+0x3be>
      break;
 800b334:	bf00      	nop
 800b336:	e008      	b.n	800b34a <USBH_HandleEnum+0x3be>
      break;
 800b338:	bf00      	nop
 800b33a:	e006      	b.n	800b34a <USBH_HandleEnum+0x3be>
      break;
 800b33c:	bf00      	nop
 800b33e:	e004      	b.n	800b34a <USBH_HandleEnum+0x3be>
      break;
 800b340:	bf00      	nop
 800b342:	e002      	b.n	800b34a <USBH_HandleEnum+0x3be>
      break;
 800b344:	bf00      	nop
 800b346:	e000      	b.n	800b34a <USBH_HandleEnum+0x3be>
      break;
 800b348:	bf00      	nop
  }
  return Status;
 800b34a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b354:	b480      	push	{r7}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	683a      	ldr	r2, [r7, #0]
 800b362:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b366:	bf00      	nop
 800b368:	370c      	adds	r7, #12
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr

0800b372 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b082      	sub	sp, #8
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b380:	1c5a      	adds	r2, r3, #1
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 f804 	bl	800b396 <USBH_HandleSof>
}
 800b38e:	bf00      	nop
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b082      	sub	sp, #8
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	2b0b      	cmp	r3, #11
 800b3a6:	d10a      	bne.n	800b3be <USBH_HandleSof+0x28>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d005      	beq.n	800b3be <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3b8:	699b      	ldr	r3, [r3, #24]
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	4798      	blx	r3
  }
}
 800b3be:	bf00      	nop
 800b3c0:	3708      	adds	r7, #8
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b3c6:	b480      	push	{r7}
 800b3c8:	b083      	sub	sp, #12
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b3d6:	bf00      	nop
}
 800b3d8:	370c      	adds	r7, #12
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr

0800b3e2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b3e2:	b480      	push	{r7}
 800b3e4:	b083      	sub	sp, #12
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b3f2:	bf00      	nop
}
 800b3f4:	370c      	adds	r7, #12
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr

0800b3fe <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b3fe:	b480      	push	{r7}
 800b400:	b083      	sub	sp, #12
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2201      	movs	r2, #1
 800b40a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b41e:	2300      	movs	r3, #0
}
 800b420:	4618      	mov	r0, r3
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2201      	movs	r2, #1
 800b438:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f003 fbd2 	bl	800ebf6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	791b      	ldrb	r3, [r3, #4]
 800b456:	4619      	mov	r1, r3
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 fe91 	bl	800c180 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	795b      	ldrb	r3, [r3, #5]
 800b462:	4619      	mov	r1, r3
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 fe8b 	bl	800c180 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b086      	sub	sp, #24
 800b478:	af02      	add	r7, sp, #8
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	460b      	mov	r3, r1
 800b47e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b486:	78fb      	ldrb	r3, [r7, #3]
 800b488:	b29b      	uxth	r3, r3
 800b48a:	9300      	str	r3, [sp, #0]
 800b48c:	4613      	mov	r3, r2
 800b48e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b492:	2100      	movs	r1, #0
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 f864 	bl	800b562 <USBH_GetDescriptor>
 800b49a:	4603      	mov	r3, r0
 800b49c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800b49e:	7bfb      	ldrb	r3, [r7, #15]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d10a      	bne.n	800b4ba <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b4b0:	78fa      	ldrb	r2, [r7, #3]
 800b4b2:	b292      	uxth	r2, r2
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	f000 f918 	bl	800b6ea <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b4ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3710      	adds	r7, #16
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b086      	sub	sp, #24
 800b4c8:	af02      	add	r7, sp, #8
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	331c      	adds	r3, #28
 800b4d4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b4d6:	887b      	ldrh	r3, [r7, #2]
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 f83d 	bl	800b562 <USBH_GetDescriptor>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b4ec:	7bfb      	ldrb	r3, [r7, #15]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d107      	bne.n	800b502 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b4f2:	887b      	ldrh	r3, [r7, #2]
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	68b9      	ldr	r1, [r7, #8]
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 f987 	bl	800b80c <USBH_ParseCfgDesc>
 800b4fe:	4603      	mov	r3, r0
 800b500:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b502:	7bfb      	ldrb	r3, [r7, #15]
}
 800b504:	4618      	mov	r0, r3
 800b506:	3710      	adds	r7, #16
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b088      	sub	sp, #32
 800b510:	af02      	add	r7, sp, #8
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	607a      	str	r2, [r7, #4]
 800b516:	461a      	mov	r2, r3
 800b518:	460b      	mov	r3, r1
 800b51a:	72fb      	strb	r3, [r7, #11]
 800b51c:	4613      	mov	r3, r2
 800b51e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800b520:	7afb      	ldrb	r3, [r7, #11]
 800b522:	b29b      	uxth	r3, r3
 800b524:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b528:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b530:	893b      	ldrh	r3, [r7, #8]
 800b532:	9300      	str	r3, [sp, #0]
 800b534:	460b      	mov	r3, r1
 800b536:	2100      	movs	r1, #0
 800b538:	68f8      	ldr	r0, [r7, #12]
 800b53a:	f000 f812 	bl	800b562 <USBH_GetDescriptor>
 800b53e:	4603      	mov	r3, r0
 800b540:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b542:	7dfb      	ldrb	r3, [r7, #23]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d107      	bne.n	800b558 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b54e:	893a      	ldrh	r2, [r7, #8]
 800b550:	6879      	ldr	r1, [r7, #4]
 800b552:	4618      	mov	r0, r3
 800b554:	f000 fb24 	bl	800bba0 <USBH_ParseStringDesc>
  }

  return status;
 800b558:	7dfb      	ldrb	r3, [r7, #23]
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3718      	adds	r7, #24
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}

0800b562 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b562:	b580      	push	{r7, lr}
 800b564:	b084      	sub	sp, #16
 800b566:	af00      	add	r7, sp, #0
 800b568:	60f8      	str	r0, [r7, #12]
 800b56a:	607b      	str	r3, [r7, #4]
 800b56c:	460b      	mov	r3, r1
 800b56e:	72fb      	strb	r3, [r7, #11]
 800b570:	4613      	mov	r3, r2
 800b572:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	789b      	ldrb	r3, [r3, #2]
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d11c      	bne.n	800b5b6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b57c:	7afb      	ldrb	r3, [r7, #11]
 800b57e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b582:	b2da      	uxtb	r2, r3
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2206      	movs	r2, #6
 800b58c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	893a      	ldrh	r2, [r7, #8]
 800b592:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b594:	893b      	ldrh	r3, [r7, #8]
 800b596:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b59a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b59e:	d104      	bne.n	800b5aa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f240 4209 	movw	r2, #1033	; 0x409
 800b5a6:	829a      	strh	r2, [r3, #20]
 800b5a8:	e002      	b.n	800b5b0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	8b3a      	ldrh	r2, [r7, #24]
 800b5b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b5b6:	8b3b      	ldrh	r3, [r7, #24]
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	6879      	ldr	r1, [r7, #4]
 800b5bc:	68f8      	ldr	r0, [r7, #12]
 800b5be:	f000 fb3d 	bl	800bc3c <USBH_CtlReq>
 800b5c2:	4603      	mov	r3, r0
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3710      	adds	r7, #16
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	789b      	ldrb	r3, [r3, #2]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d10f      	bne.n	800b600 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2205      	movs	r2, #5
 800b5ea:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b5ec:	78fb      	ldrb	r3, [r7, #3]
 800b5ee:	b29a      	uxth	r2, r3
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b600:	2200      	movs	r2, #0
 800b602:	2100      	movs	r1, #0
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 fb19 	bl	800bc3c <USBH_CtlReq>
 800b60a:	4603      	mov	r3, r0
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3708      	adds	r7, #8
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	460b      	mov	r3, r1
 800b61e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	789b      	ldrb	r3, [r3, #2]
 800b624:	2b01      	cmp	r3, #1
 800b626:	d10e      	bne.n	800b646 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2200      	movs	r2, #0
 800b62c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2209      	movs	r2, #9
 800b632:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	887a      	ldrh	r2, [r7, #2]
 800b638:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2200      	movs	r2, #0
 800b63e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2200      	movs	r2, #0
 800b644:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b646:	2200      	movs	r2, #0
 800b648:	2100      	movs	r1, #0
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 faf6 	bl	800bc3c <USBH_CtlReq>
 800b650:	4603      	mov	r3, r0
}
 800b652:	4618      	mov	r0, r3
 800b654:	3708      	adds	r7, #8
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}

0800b65a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b082      	sub	sp, #8
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	460b      	mov	r3, r1
 800b664:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	789b      	ldrb	r3, [r3, #2]
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d10f      	bne.n	800b68e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2203      	movs	r2, #3
 800b678:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b67a:	78fb      	ldrb	r3, [r7, #3]
 800b67c:	b29a      	uxth	r2, r3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2200      	movs	r2, #0
 800b68c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b68e:	2200      	movs	r2, #0
 800b690:	2100      	movs	r1, #0
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 fad2 	bl	800bc3c <USBH_CtlReq>
 800b698:	4603      	mov	r3, r0
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3708      	adds	r7, #8
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b082      	sub	sp, #8
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	789b      	ldrb	r3, [r3, #2]
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d10f      	bne.n	800b6d6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2202      	movs	r2, #2
 800b6ba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b6c8:	78fb      	ldrb	r3, [r7, #3]
 800b6ca:	b29a      	uxth	r2, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	2100      	movs	r1, #0
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 faae 	bl	800bc3c <USBH_CtlReq>
 800b6e0:	4603      	mov	r3, r0
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3708      	adds	r7, #8
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b6ea:	b480      	push	{r7}
 800b6ec:	b085      	sub	sp, #20
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	60f8      	str	r0, [r7, #12]
 800b6f2:	60b9      	str	r1, [r7, #8]
 800b6f4:	4613      	mov	r3, r2
 800b6f6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	781a      	ldrb	r2, [r3, #0]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	785a      	ldrb	r2, [r3, #1]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	3302      	adds	r3, #2
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	b29a      	uxth	r2, r3
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	3303      	adds	r3, #3
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	b29b      	uxth	r3, r3
 800b718:	021b      	lsls	r3, r3, #8
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	4313      	orrs	r3, r2
 800b71e:	b29a      	uxth	r2, r3
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	791a      	ldrb	r2, [r3, #4]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	795a      	ldrb	r2, [r3, #5]
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	799a      	ldrb	r2, [r3, #6]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	79da      	ldrb	r2, [r3, #7]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	79db      	ldrb	r3, [r3, #7]
 800b748:	2b20      	cmp	r3, #32
 800b74a:	dc11      	bgt.n	800b770 <USBH_ParseDevDesc+0x86>
 800b74c:	2b08      	cmp	r3, #8
 800b74e:	db16      	blt.n	800b77e <USBH_ParseDevDesc+0x94>
 800b750:	3b08      	subs	r3, #8
 800b752:	2201      	movs	r2, #1
 800b754:	fa02 f303 	lsl.w	r3, r2, r3
 800b758:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b75c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b760:	2b00      	cmp	r3, #0
 800b762:	bf14      	ite	ne
 800b764:	2301      	movne	r3, #1
 800b766:	2300      	moveq	r3, #0
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d102      	bne.n	800b774 <USBH_ParseDevDesc+0x8a>
 800b76e:	e006      	b.n	800b77e <USBH_ParseDevDesc+0x94>
 800b770:	2b40      	cmp	r3, #64	; 0x40
 800b772:	d104      	bne.n	800b77e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	79da      	ldrb	r2, [r3, #7]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	71da      	strb	r2, [r3, #7]
      break;
 800b77c:	e003      	b.n	800b786 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2240      	movs	r2, #64	; 0x40
 800b782:	71da      	strb	r2, [r3, #7]
      break;
 800b784:	bf00      	nop
  }

  if (length > 8U)
 800b786:	88fb      	ldrh	r3, [r7, #6]
 800b788:	2b08      	cmp	r3, #8
 800b78a:	d939      	bls.n	800b800 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	3308      	adds	r3, #8
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	b29a      	uxth	r2, r3
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	3309      	adds	r3, #9
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	021b      	lsls	r3, r3, #8
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	330a      	adds	r3, #10
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	b29a      	uxth	r2, r3
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	330b      	adds	r3, #11
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	021b      	lsls	r3, r3, #8
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	330c      	adds	r3, #12
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	b29a      	uxth	r2, r3
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	330d      	adds	r3, #13
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	021b      	lsls	r3, r3, #8
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	b29a      	uxth	r2, r3
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	7b9a      	ldrb	r2, [r3, #14]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	7bda      	ldrb	r2, [r3, #15]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	7c1a      	ldrb	r2, [r3, #16]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	7c5a      	ldrb	r2, [r3, #17]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	745a      	strb	r2, [r3, #17]
  }
}
 800b800:	bf00      	nop
 800b802:	3714      	adds	r7, #20
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr

0800b80c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b08c      	sub	sp, #48	; 0x30
 800b810:	af00      	add	r7, sp, #0
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	4613      	mov	r3, r2
 800b818:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b820:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b822:	2300      	movs	r3, #0
 800b824:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b82c:	2300      	movs	r3, #0
 800b82e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800b832:	2300      	movs	r3, #0
 800b834:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	781a      	ldrb	r2, [r3, #0]
 800b840:	6a3b      	ldr	r3, [r7, #32]
 800b842:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	785a      	ldrb	r2, [r3, #1]
 800b848:	6a3b      	ldr	r3, [r7, #32]
 800b84a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	3302      	adds	r3, #2
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	b29a      	uxth	r2, r3
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	3303      	adds	r3, #3
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	021b      	lsls	r3, r3, #8
 800b85e:	b29b      	uxth	r3, r3
 800b860:	4313      	orrs	r3, r2
 800b862:	b29b      	uxth	r3, r3
 800b864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b868:	bf28      	it	cs
 800b86a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800b86e:	b29a      	uxth	r2, r3
 800b870:	6a3b      	ldr	r3, [r7, #32]
 800b872:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	791a      	ldrb	r2, [r3, #4]
 800b878:	6a3b      	ldr	r3, [r7, #32]
 800b87a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	795a      	ldrb	r2, [r3, #5]
 800b880:	6a3b      	ldr	r3, [r7, #32]
 800b882:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	799a      	ldrb	r2, [r3, #6]
 800b888:	6a3b      	ldr	r3, [r7, #32]
 800b88a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	79da      	ldrb	r2, [r3, #7]
 800b890:	6a3b      	ldr	r3, [r7, #32]
 800b892:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	7a1a      	ldrb	r2, [r3, #8]
 800b898:	6a3b      	ldr	r3, [r7, #32]
 800b89a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800b89c:	6a3b      	ldr	r3, [r7, #32]
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	2b09      	cmp	r3, #9
 800b8a2:	d002      	beq.n	800b8aa <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b8a4:	6a3b      	ldr	r3, [r7, #32]
 800b8a6:	2209      	movs	r2, #9
 800b8a8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b8aa:	88fb      	ldrh	r3, [r7, #6]
 800b8ac:	2b09      	cmp	r3, #9
 800b8ae:	f240 809d 	bls.w	800b9ec <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800b8b2:	2309      	movs	r3, #9
 800b8b4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b8ba:	e081      	b.n	800b9c0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b8bc:	f107 0316 	add.w	r3, r7, #22
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8c4:	f000 f99f 	bl	800bc06 <USBH_GetNextDesc>
 800b8c8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8cc:	785b      	ldrb	r3, [r3, #1]
 800b8ce:	2b04      	cmp	r3, #4
 800b8d0:	d176      	bne.n	800b9c0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	2b09      	cmp	r3, #9
 800b8d8:	d002      	beq.n	800b8e0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8dc:	2209      	movs	r2, #9
 800b8de:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b8e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8e4:	221a      	movs	r2, #26
 800b8e6:	fb02 f303 	mul.w	r3, r2, r3
 800b8ea:	3308      	adds	r3, #8
 800b8ec:	6a3a      	ldr	r2, [r7, #32]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	3302      	adds	r3, #2
 800b8f2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b8f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b8f6:	69f8      	ldr	r0, [r7, #28]
 800b8f8:	f000 f87e 	bl	800b9f8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b902:	2300      	movs	r3, #0
 800b904:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b906:	e043      	b.n	800b990 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b908:	f107 0316 	add.w	r3, r7, #22
 800b90c:	4619      	mov	r1, r3
 800b90e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b910:	f000 f979 	bl	800bc06 <USBH_GetNextDesc>
 800b914:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b918:	785b      	ldrb	r3, [r3, #1]
 800b91a:	2b05      	cmp	r3, #5
 800b91c:	d138      	bne.n	800b990 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800b91e:	69fb      	ldr	r3, [r7, #28]
 800b920:	795b      	ldrb	r3, [r3, #5]
 800b922:	2b01      	cmp	r3, #1
 800b924:	d10f      	bne.n	800b946 <USBH_ParseCfgDesc+0x13a>
 800b926:	69fb      	ldr	r3, [r7, #28]
 800b928:	799b      	ldrb	r3, [r3, #6]
 800b92a:	2b02      	cmp	r3, #2
 800b92c:	d10b      	bne.n	800b946 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	79db      	ldrb	r3, [r3, #7]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d10f      	bne.n	800b956 <USBH_ParseCfgDesc+0x14a>
 800b936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	2b09      	cmp	r3, #9
 800b93c:	d00b      	beq.n	800b956 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800b93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b940:	2209      	movs	r2, #9
 800b942:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b944:	e007      	b.n	800b956 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800b946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	2b07      	cmp	r3, #7
 800b94c:	d004      	beq.n	800b958 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b950:	2207      	movs	r2, #7
 800b952:	701a      	strb	r2, [r3, #0]
 800b954:	e000      	b.n	800b958 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b956:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b95c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b960:	3201      	adds	r2, #1
 800b962:	00d2      	lsls	r2, r2, #3
 800b964:	211a      	movs	r1, #26
 800b966:	fb01 f303 	mul.w	r3, r1, r3
 800b96a:	4413      	add	r3, r2
 800b96c:	3308      	adds	r3, #8
 800b96e:	6a3a      	ldr	r2, [r7, #32]
 800b970:	4413      	add	r3, r2
 800b972:	3304      	adds	r3, #4
 800b974:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b978:	69b9      	ldr	r1, [r7, #24]
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f000 f86b 	bl	800ba56 <USBH_ParseEPDesc>
 800b980:	4603      	mov	r3, r0
 800b982:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800b986:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b98a:	3301      	adds	r3, #1
 800b98c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b990:	69fb      	ldr	r3, [r7, #28]
 800b992:	791b      	ldrb	r3, [r3, #4]
 800b994:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b998:	429a      	cmp	r2, r3
 800b99a:	d204      	bcs.n	800b9a6 <USBH_ParseCfgDesc+0x19a>
 800b99c:	6a3b      	ldr	r3, [r7, #32]
 800b99e:	885a      	ldrh	r2, [r3, #2]
 800b9a0:	8afb      	ldrh	r3, [r7, #22]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d8b0      	bhi.n	800b908 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b9a6:	69fb      	ldr	r3, [r7, #28]
 800b9a8:	791b      	ldrb	r3, [r3, #4]
 800b9aa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d201      	bcs.n	800b9b6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800b9b2:	2303      	movs	r3, #3
 800b9b4:	e01c      	b.n	800b9f0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800b9b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9ba:	3301      	adds	r3, #1
 800b9bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b9c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d805      	bhi.n	800b9d4 <USBH_ParseCfgDesc+0x1c8>
 800b9c8:	6a3b      	ldr	r3, [r7, #32]
 800b9ca:	885a      	ldrh	r2, [r3, #2]
 800b9cc:	8afb      	ldrh	r3, [r7, #22]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	f63f af74 	bhi.w	800b8bc <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b9d4:	6a3b      	ldr	r3, [r7, #32]
 800b9d6:	791b      	ldrb	r3, [r3, #4]
 800b9d8:	2b02      	cmp	r3, #2
 800b9da:	bf28      	it	cs
 800b9dc:	2302      	movcs	r3, #2
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d201      	bcs.n	800b9ec <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800b9e8:	2303      	movs	r3, #3
 800b9ea:	e001      	b.n	800b9f0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800b9ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3730      	adds	r7, #48	; 0x30
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b083      	sub	sp, #12
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	781a      	ldrb	r2, [r3, #0]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	785a      	ldrb	r2, [r3, #1]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	789a      	ldrb	r2, [r3, #2]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	78da      	ldrb	r2, [r3, #3]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	791a      	ldrb	r2, [r3, #4]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	795a      	ldrb	r2, [r3, #5]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	799a      	ldrb	r2, [r3, #6]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	79da      	ldrb	r2, [r3, #7]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	7a1a      	ldrb	r2, [r3, #8]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	721a      	strb	r2, [r3, #8]
}
 800ba4a:	bf00      	nop
 800ba4c:	370c      	adds	r7, #12
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba54:	4770      	bx	lr

0800ba56 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800ba56:	b480      	push	{r7}
 800ba58:	b087      	sub	sp, #28
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	60f8      	str	r0, [r7, #12]
 800ba5e:	60b9      	str	r1, [r7, #8]
 800ba60:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800ba62:	2300      	movs	r3, #0
 800ba64:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	781a      	ldrb	r2, [r3, #0]
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	785a      	ldrb	r2, [r3, #1]
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	789a      	ldrb	r2, [r3, #2]
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	78da      	ldrb	r2, [r3, #3]
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	3304      	adds	r3, #4
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	b29a      	uxth	r2, r3
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	3305      	adds	r3, #5
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	021b      	lsls	r3, r3, #8
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	b29a      	uxth	r2, r3
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	799a      	ldrb	r2, [r3, #6]
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	889b      	ldrh	r3, [r3, #4]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d102      	bne.n	800bab8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800bab2:	2303      	movs	r3, #3
 800bab4:	75fb      	strb	r3, [r7, #23]
 800bab6:	e033      	b.n	800bb20 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	889b      	ldrh	r3, [r3, #4]
 800babc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bac0:	f023 0307 	bic.w	r3, r3, #7
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	889b      	ldrh	r3, [r3, #4]
 800bace:	b21a      	sxth	r2, r3
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	3304      	adds	r3, #4
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	b299      	uxth	r1, r3
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	3305      	adds	r3, #5
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	b29b      	uxth	r3, r3
 800bae0:	021b      	lsls	r3, r3, #8
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	430b      	orrs	r3, r1
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800baec:	2b00      	cmp	r3, #0
 800baee:	d110      	bne.n	800bb12 <USBH_ParseEPDesc+0xbc>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	3304      	adds	r3, #4
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	b299      	uxth	r1, r3
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	3305      	adds	r3, #5
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	021b      	lsls	r3, r3, #8
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	430b      	orrs	r3, r1
 800bb06:	b29b      	uxth	r3, r3
 800bb08:	b21b      	sxth	r3, r3
 800bb0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb0e:	b21b      	sxth	r3, r3
 800bb10:	e001      	b.n	800bb16 <USBH_ParseEPDesc+0xc0>
 800bb12:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb16:	4313      	orrs	r3, r2
 800bb18:	b21b      	sxth	r3, r3
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d116      	bne.n	800bb58 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	78db      	ldrb	r3, [r3, #3]
 800bb2e:	f003 0303 	and.w	r3, r3, #3
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d005      	beq.n	800bb42 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	78db      	ldrb	r3, [r3, #3]
 800bb3a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bb3e:	2b03      	cmp	r3, #3
 800bb40:	d127      	bne.n	800bb92 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	799b      	ldrb	r3, [r3, #6]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d003      	beq.n	800bb52 <USBH_ParseEPDesc+0xfc>
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	799b      	ldrb	r3, [r3, #6]
 800bb4e:	2b10      	cmp	r3, #16
 800bb50:	d91f      	bls.n	800bb92 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bb52:	2303      	movs	r3, #3
 800bb54:	75fb      	strb	r3, [r7, #23]
 800bb56:	e01c      	b.n	800bb92 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	78db      	ldrb	r3, [r3, #3]
 800bb5c:	f003 0303 	and.w	r3, r3, #3
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d10a      	bne.n	800bb7a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	799b      	ldrb	r3, [r3, #6]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d003      	beq.n	800bb74 <USBH_ParseEPDesc+0x11e>
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	799b      	ldrb	r3, [r3, #6]
 800bb70:	2b10      	cmp	r3, #16
 800bb72:	d90e      	bls.n	800bb92 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bb74:	2303      	movs	r3, #3
 800bb76:	75fb      	strb	r3, [r7, #23]
 800bb78:	e00b      	b.n	800bb92 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	78db      	ldrb	r3, [r3, #3]
 800bb7e:	f003 0303 	and.w	r3, r3, #3
 800bb82:	2b03      	cmp	r3, #3
 800bb84:	d105      	bne.n	800bb92 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	799b      	ldrb	r3, [r3, #6]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d101      	bne.n	800bb92 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bb8e:	2303      	movs	r3, #3
 800bb90:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800bb92:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	371c      	adds	r7, #28
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr

0800bba0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b087      	sub	sp, #28
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	60b9      	str	r1, [r7, #8]
 800bbaa:	4613      	mov	r3, r2
 800bbac:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	2b03      	cmp	r3, #3
 800bbb6:	d120      	bne.n	800bbfa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	1e9a      	subs	r2, r3, #2
 800bbbe:	88fb      	ldrh	r3, [r7, #6]
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	bf28      	it	cs
 800bbc4:	4613      	movcs	r3, r2
 800bbc6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	3302      	adds	r3, #2
 800bbcc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bbce:	2300      	movs	r3, #0
 800bbd0:	82fb      	strh	r3, [r7, #22]
 800bbd2:	e00b      	b.n	800bbec <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bbd4:	8afb      	ldrh	r3, [r7, #22]
 800bbd6:	68fa      	ldr	r2, [r7, #12]
 800bbd8:	4413      	add	r3, r2
 800bbda:	781a      	ldrb	r2, [r3, #0]
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bbe6:	8afb      	ldrh	r3, [r7, #22]
 800bbe8:	3302      	adds	r3, #2
 800bbea:	82fb      	strh	r3, [r7, #22]
 800bbec:	8afa      	ldrh	r2, [r7, #22]
 800bbee:	8abb      	ldrh	r3, [r7, #20]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d3ef      	bcc.n	800bbd4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	701a      	strb	r2, [r3, #0]
  }
}
 800bbfa:	bf00      	nop
 800bbfc:	371c      	adds	r7, #28
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr

0800bc06 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800bc06:	b480      	push	{r7}
 800bc08:	b085      	sub	sp, #20
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
 800bc0e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	881a      	ldrh	r2, [r3, #0]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	b29b      	uxth	r3, r3
 800bc1a:	4413      	add	r3, r2
 800bc1c:	b29a      	uxth	r2, r3
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3714      	adds	r7, #20
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b086      	sub	sp, #24
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	4613      	mov	r3, r2
 800bc48:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	789b      	ldrb	r3, [r3, #2]
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d002      	beq.n	800bc5c <USBH_CtlReq+0x20>
 800bc56:	2b02      	cmp	r3, #2
 800bc58:	d00f      	beq.n	800bc7a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800bc5a:	e027      	b.n	800bcac <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	68ba      	ldr	r2, [r7, #8]
 800bc60:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	88fa      	ldrh	r2, [r7, #6]
 800bc66:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2202      	movs	r2, #2
 800bc72:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bc74:	2301      	movs	r3, #1
 800bc76:	75fb      	strb	r3, [r7, #23]
      break;
 800bc78:	e018      	b.n	800bcac <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f000 f81c 	bl	800bcb8 <USBH_HandleControl>
 800bc80:	4603      	mov	r3, r0
 800bc82:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bc84:	7dfb      	ldrb	r3, [r7, #23]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d002      	beq.n	800bc90 <USBH_CtlReq+0x54>
 800bc8a:	7dfb      	ldrb	r3, [r7, #23]
 800bc8c:	2b03      	cmp	r3, #3
 800bc8e:	d106      	bne.n	800bc9e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2201      	movs	r2, #1
 800bc94:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	761a      	strb	r2, [r3, #24]
      break;
 800bc9c:	e005      	b.n	800bcaa <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800bc9e:	7dfb      	ldrb	r3, [r7, #23]
 800bca0:	2b02      	cmp	r3, #2
 800bca2:	d102      	bne.n	800bcaa <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2201      	movs	r2, #1
 800bca8:	709a      	strb	r2, [r3, #2]
      break;
 800bcaa:	bf00      	nop
  }
  return status;
 800bcac:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3718      	adds	r7, #24
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
	...

0800bcb8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b086      	sub	sp, #24
 800bcbc:	af02      	add	r7, sp, #8
 800bcbe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	7e1b      	ldrb	r3, [r3, #24]
 800bccc:	3b01      	subs	r3, #1
 800bcce:	2b0a      	cmp	r3, #10
 800bcd0:	f200 8156 	bhi.w	800bf80 <USBH_HandleControl+0x2c8>
 800bcd4:	a201      	add	r2, pc, #4	; (adr r2, 800bcdc <USBH_HandleControl+0x24>)
 800bcd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcda:	bf00      	nop
 800bcdc:	0800bd09 	.word	0x0800bd09
 800bce0:	0800bd23 	.word	0x0800bd23
 800bce4:	0800bd8d 	.word	0x0800bd8d
 800bce8:	0800bdb3 	.word	0x0800bdb3
 800bcec:	0800bdeb 	.word	0x0800bdeb
 800bcf0:	0800be15 	.word	0x0800be15
 800bcf4:	0800be67 	.word	0x0800be67
 800bcf8:	0800be89 	.word	0x0800be89
 800bcfc:	0800bec5 	.word	0x0800bec5
 800bd00:	0800beeb 	.word	0x0800beeb
 800bd04:	0800bf29 	.word	0x0800bf29
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f103 0110 	add.w	r1, r3, #16
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	795b      	ldrb	r3, [r3, #5]
 800bd12:	461a      	mov	r2, r3
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f000 f943 	bl	800bfa0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2202      	movs	r2, #2
 800bd1e:	761a      	strb	r2, [r3, #24]
      break;
 800bd20:	e139      	b.n	800bf96 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	795b      	ldrb	r3, [r3, #5]
 800bd26:	4619      	mov	r1, r3
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f003 f853 	bl	800edd4 <USBH_LL_GetURBState>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bd32:	7bbb      	ldrb	r3, [r7, #14]
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	d11e      	bne.n	800bd76 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	7c1b      	ldrb	r3, [r3, #16]
 800bd3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bd40:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	8adb      	ldrh	r3, [r3, #22]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00a      	beq.n	800bd60 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800bd4a:	7b7b      	ldrb	r3, [r7, #13]
 800bd4c:	2b80      	cmp	r3, #128	; 0x80
 800bd4e:	d103      	bne.n	800bd58 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2203      	movs	r2, #3
 800bd54:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bd56:	e115      	b.n	800bf84 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2205      	movs	r2, #5
 800bd5c:	761a      	strb	r2, [r3, #24]
      break;
 800bd5e:	e111      	b.n	800bf84 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800bd60:	7b7b      	ldrb	r3, [r7, #13]
 800bd62:	2b80      	cmp	r3, #128	; 0x80
 800bd64:	d103      	bne.n	800bd6e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2209      	movs	r2, #9
 800bd6a:	761a      	strb	r2, [r3, #24]
      break;
 800bd6c:	e10a      	b.n	800bf84 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2207      	movs	r2, #7
 800bd72:	761a      	strb	r2, [r3, #24]
      break;
 800bd74:	e106      	b.n	800bf84 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bd76:	7bbb      	ldrb	r3, [r7, #14]
 800bd78:	2b04      	cmp	r3, #4
 800bd7a:	d003      	beq.n	800bd84 <USBH_HandleControl+0xcc>
 800bd7c:	7bbb      	ldrb	r3, [r7, #14]
 800bd7e:	2b02      	cmp	r3, #2
 800bd80:	f040 8100 	bne.w	800bf84 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	220b      	movs	r2, #11
 800bd88:	761a      	strb	r2, [r3, #24]
      break;
 800bd8a:	e0fb      	b.n	800bf84 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bd92:	b29a      	uxth	r2, r3
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6899      	ldr	r1, [r3, #8]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	899a      	ldrh	r2, [r3, #12]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	791b      	ldrb	r3, [r3, #4]
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f000 f93a 	bl	800c01e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2204      	movs	r2, #4
 800bdae:	761a      	strb	r2, [r3, #24]
      break;
 800bdb0:	e0f1      	b.n	800bf96 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	791b      	ldrb	r3, [r3, #4]
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f003 f80b 	bl	800edd4 <USBH_LL_GetURBState>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bdc2:	7bbb      	ldrb	r3, [r7, #14]
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d102      	bne.n	800bdce <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2209      	movs	r2, #9
 800bdcc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bdce:	7bbb      	ldrb	r3, [r7, #14]
 800bdd0:	2b05      	cmp	r3, #5
 800bdd2:	d102      	bne.n	800bdda <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bdd4:	2303      	movs	r3, #3
 800bdd6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bdd8:	e0d6      	b.n	800bf88 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800bdda:	7bbb      	ldrb	r3, [r7, #14]
 800bddc:	2b04      	cmp	r3, #4
 800bdde:	f040 80d3 	bne.w	800bf88 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	220b      	movs	r2, #11
 800bde6:	761a      	strb	r2, [r3, #24]
      break;
 800bde8:	e0ce      	b.n	800bf88 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6899      	ldr	r1, [r3, #8]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	899a      	ldrh	r2, [r3, #12]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	795b      	ldrb	r3, [r3, #5]
 800bdf6:	2001      	movs	r0, #1
 800bdf8:	9000      	str	r0, [sp, #0]
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 f8ea 	bl	800bfd4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800be06:	b29a      	uxth	r2, r3
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2206      	movs	r2, #6
 800be10:	761a      	strb	r2, [r3, #24]
      break;
 800be12:	e0c0      	b.n	800bf96 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	795b      	ldrb	r3, [r3, #5]
 800be18:	4619      	mov	r1, r3
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f002 ffda 	bl	800edd4 <USBH_LL_GetURBState>
 800be20:	4603      	mov	r3, r0
 800be22:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800be24:	7bbb      	ldrb	r3, [r7, #14]
 800be26:	2b01      	cmp	r3, #1
 800be28:	d103      	bne.n	800be32 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2207      	movs	r2, #7
 800be2e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800be30:	e0ac      	b.n	800bf8c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800be32:	7bbb      	ldrb	r3, [r7, #14]
 800be34:	2b05      	cmp	r3, #5
 800be36:	d105      	bne.n	800be44 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	220c      	movs	r2, #12
 800be3c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800be3e:	2303      	movs	r3, #3
 800be40:	73fb      	strb	r3, [r7, #15]
      break;
 800be42:	e0a3      	b.n	800bf8c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800be44:	7bbb      	ldrb	r3, [r7, #14]
 800be46:	2b02      	cmp	r3, #2
 800be48:	d103      	bne.n	800be52 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2205      	movs	r2, #5
 800be4e:	761a      	strb	r2, [r3, #24]
      break;
 800be50:	e09c      	b.n	800bf8c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800be52:	7bbb      	ldrb	r3, [r7, #14]
 800be54:	2b04      	cmp	r3, #4
 800be56:	f040 8099 	bne.w	800bf8c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	220b      	movs	r2, #11
 800be5e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800be60:	2302      	movs	r3, #2
 800be62:	73fb      	strb	r3, [r7, #15]
      break;
 800be64:	e092      	b.n	800bf8c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	791b      	ldrb	r3, [r3, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	2100      	movs	r1, #0
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 f8d5 	bl	800c01e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800be7a:	b29a      	uxth	r2, r3
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2208      	movs	r2, #8
 800be84:	761a      	strb	r2, [r3, #24]

      break;
 800be86:	e086      	b.n	800bf96 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	791b      	ldrb	r3, [r3, #4]
 800be8c:	4619      	mov	r1, r3
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f002 ffa0 	bl	800edd4 <USBH_LL_GetURBState>
 800be94:	4603      	mov	r3, r0
 800be96:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800be98:	7bbb      	ldrb	r3, [r7, #14]
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d105      	bne.n	800beaa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	220d      	movs	r2, #13
 800bea2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bea4:	2300      	movs	r3, #0
 800bea6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bea8:	e072      	b.n	800bf90 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800beaa:	7bbb      	ldrb	r3, [r7, #14]
 800beac:	2b04      	cmp	r3, #4
 800beae:	d103      	bne.n	800beb8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	220b      	movs	r2, #11
 800beb4:	761a      	strb	r2, [r3, #24]
      break;
 800beb6:	e06b      	b.n	800bf90 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800beb8:	7bbb      	ldrb	r3, [r7, #14]
 800beba:	2b05      	cmp	r3, #5
 800bebc:	d168      	bne.n	800bf90 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800bebe:	2303      	movs	r3, #3
 800bec0:	73fb      	strb	r3, [r7, #15]
      break;
 800bec2:	e065      	b.n	800bf90 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	795b      	ldrb	r3, [r3, #5]
 800bec8:	2201      	movs	r2, #1
 800beca:	9200      	str	r2, [sp, #0]
 800becc:	2200      	movs	r2, #0
 800bece:	2100      	movs	r1, #0
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 f87f 	bl	800bfd4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bedc:	b29a      	uxth	r2, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	220a      	movs	r2, #10
 800bee6:	761a      	strb	r2, [r3, #24]
      break;
 800bee8:	e055      	b.n	800bf96 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	795b      	ldrb	r3, [r3, #5]
 800beee:	4619      	mov	r1, r3
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f002 ff6f 	bl	800edd4 <USBH_LL_GetURBState>
 800bef6:	4603      	mov	r3, r0
 800bef8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800befa:	7bbb      	ldrb	r3, [r7, #14]
 800befc:	2b01      	cmp	r3, #1
 800befe:	d105      	bne.n	800bf0c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800bf00:	2300      	movs	r3, #0
 800bf02:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	220d      	movs	r2, #13
 800bf08:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bf0a:	e043      	b.n	800bf94 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bf0c:	7bbb      	ldrb	r3, [r7, #14]
 800bf0e:	2b02      	cmp	r3, #2
 800bf10:	d103      	bne.n	800bf1a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2209      	movs	r2, #9
 800bf16:	761a      	strb	r2, [r3, #24]
      break;
 800bf18:	e03c      	b.n	800bf94 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800bf1a:	7bbb      	ldrb	r3, [r7, #14]
 800bf1c:	2b04      	cmp	r3, #4
 800bf1e:	d139      	bne.n	800bf94 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	220b      	movs	r2, #11
 800bf24:	761a      	strb	r2, [r3, #24]
      break;
 800bf26:	e035      	b.n	800bf94 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	7e5b      	ldrb	r3, [r3, #25]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	b2da      	uxtb	r2, r3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	765a      	strb	r2, [r3, #25]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	7e5b      	ldrb	r3, [r3, #25]
 800bf38:	2b02      	cmp	r3, #2
 800bf3a:	d806      	bhi.n	800bf4a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2201      	movs	r2, #1
 800bf40:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2201      	movs	r2, #1
 800bf46:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bf48:	e025      	b.n	800bf96 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf50:	2106      	movs	r1, #6
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	795b      	ldrb	r3, [r3, #5]
 800bf60:	4619      	mov	r1, r3
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 f90c 	bl	800c180 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	791b      	ldrb	r3, [r3, #4]
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 f906 	bl	800c180 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2200      	movs	r2, #0
 800bf78:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bf7a:	2302      	movs	r3, #2
 800bf7c:	73fb      	strb	r3, [r7, #15]
      break;
 800bf7e:	e00a      	b.n	800bf96 <USBH_HandleControl+0x2de>

    default:
      break;
 800bf80:	bf00      	nop
 800bf82:	e008      	b.n	800bf96 <USBH_HandleControl+0x2de>
      break;
 800bf84:	bf00      	nop
 800bf86:	e006      	b.n	800bf96 <USBH_HandleControl+0x2de>
      break;
 800bf88:	bf00      	nop
 800bf8a:	e004      	b.n	800bf96 <USBH_HandleControl+0x2de>
      break;
 800bf8c:	bf00      	nop
 800bf8e:	e002      	b.n	800bf96 <USBH_HandleControl+0x2de>
      break;
 800bf90:	bf00      	nop
 800bf92:	e000      	b.n	800bf96 <USBH_HandleControl+0x2de>
      break;
 800bf94:	bf00      	nop
  }

  return status;
 800bf96:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3710      	adds	r7, #16
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b088      	sub	sp, #32
 800bfa4:	af04      	add	r7, sp, #16
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	60b9      	str	r1, [r7, #8]
 800bfaa:	4613      	mov	r3, r2
 800bfac:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bfae:	79f9      	ldrb	r1, [r7, #7]
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	9303      	str	r3, [sp, #12]
 800bfb4:	2308      	movs	r3, #8
 800bfb6:	9302      	str	r3, [sp, #8]
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	9301      	str	r3, [sp, #4]
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	9300      	str	r3, [sp, #0]
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	68f8      	ldr	r0, [r7, #12]
 800bfc6:	f002 fed4 	bl	800ed72 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800bfca:	2300      	movs	r3, #0
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3710      	adds	r7, #16
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b088      	sub	sp, #32
 800bfd8:	af04      	add	r7, sp, #16
 800bfda:	60f8      	str	r0, [r7, #12]
 800bfdc:	60b9      	str	r1, [r7, #8]
 800bfde:	4611      	mov	r1, r2
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	460b      	mov	r3, r1
 800bfe4:	80fb      	strh	r3, [r7, #6]
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d001      	beq.n	800bff8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bff4:	2300      	movs	r3, #0
 800bff6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bff8:	7979      	ldrb	r1, [r7, #5]
 800bffa:	7e3b      	ldrb	r3, [r7, #24]
 800bffc:	9303      	str	r3, [sp, #12]
 800bffe:	88fb      	ldrh	r3, [r7, #6]
 800c000:	9302      	str	r3, [sp, #8]
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	9301      	str	r3, [sp, #4]
 800c006:	2301      	movs	r3, #1
 800c008:	9300      	str	r3, [sp, #0]
 800c00a:	2300      	movs	r3, #0
 800c00c:	2200      	movs	r2, #0
 800c00e:	68f8      	ldr	r0, [r7, #12]
 800c010:	f002 feaf 	bl	800ed72 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c014:	2300      	movs	r3, #0
}
 800c016:	4618      	mov	r0, r3
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c01e:	b580      	push	{r7, lr}
 800c020:	b088      	sub	sp, #32
 800c022:	af04      	add	r7, sp, #16
 800c024:	60f8      	str	r0, [r7, #12]
 800c026:	60b9      	str	r1, [r7, #8]
 800c028:	4611      	mov	r1, r2
 800c02a:	461a      	mov	r2, r3
 800c02c:	460b      	mov	r3, r1
 800c02e:	80fb      	strh	r3, [r7, #6]
 800c030:	4613      	mov	r3, r2
 800c032:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c034:	7979      	ldrb	r1, [r7, #5]
 800c036:	2300      	movs	r3, #0
 800c038:	9303      	str	r3, [sp, #12]
 800c03a:	88fb      	ldrh	r3, [r7, #6]
 800c03c:	9302      	str	r3, [sp, #8]
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	9301      	str	r3, [sp, #4]
 800c042:	2301      	movs	r3, #1
 800c044:	9300      	str	r3, [sp, #0]
 800c046:	2300      	movs	r3, #0
 800c048:	2201      	movs	r2, #1
 800c04a:	68f8      	ldr	r0, [r7, #12]
 800c04c:	f002 fe91 	bl	800ed72 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c050:	2300      	movs	r3, #0

}
 800c052:	4618      	mov	r0, r3
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b088      	sub	sp, #32
 800c05e:	af04      	add	r7, sp, #16
 800c060:	60f8      	str	r0, [r7, #12]
 800c062:	60b9      	str	r1, [r7, #8]
 800c064:	4611      	mov	r1, r2
 800c066:	461a      	mov	r2, r3
 800c068:	460b      	mov	r3, r1
 800c06a:	80fb      	strh	r3, [r7, #6]
 800c06c:	4613      	mov	r3, r2
 800c06e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c076:	2b00      	cmp	r3, #0
 800c078:	d001      	beq.n	800c07e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c07a:	2300      	movs	r3, #0
 800c07c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c07e:	7979      	ldrb	r1, [r7, #5]
 800c080:	7e3b      	ldrb	r3, [r7, #24]
 800c082:	9303      	str	r3, [sp, #12]
 800c084:	88fb      	ldrh	r3, [r7, #6]
 800c086:	9302      	str	r3, [sp, #8]
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	9301      	str	r3, [sp, #4]
 800c08c:	2301      	movs	r3, #1
 800c08e:	9300      	str	r3, [sp, #0]
 800c090:	2302      	movs	r3, #2
 800c092:	2200      	movs	r2, #0
 800c094:	68f8      	ldr	r0, [r7, #12]
 800c096:	f002 fe6c 	bl	800ed72 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3710      	adds	r7, #16
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b088      	sub	sp, #32
 800c0a8:	af04      	add	r7, sp, #16
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	60b9      	str	r1, [r7, #8]
 800c0ae:	4611      	mov	r1, r2
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	460b      	mov	r3, r1
 800c0b4:	80fb      	strh	r3, [r7, #6]
 800c0b6:	4613      	mov	r3, r2
 800c0b8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c0ba:	7979      	ldrb	r1, [r7, #5]
 800c0bc:	2300      	movs	r3, #0
 800c0be:	9303      	str	r3, [sp, #12]
 800c0c0:	88fb      	ldrh	r3, [r7, #6]
 800c0c2:	9302      	str	r3, [sp, #8]
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	9301      	str	r3, [sp, #4]
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	9300      	str	r3, [sp, #0]
 800c0cc:	2302      	movs	r3, #2
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	68f8      	ldr	r0, [r7, #12]
 800c0d2:	f002 fe4e 	bl	800ed72 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c0d6:	2300      	movs	r3, #0
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3710      	adds	r7, #16
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b086      	sub	sp, #24
 800c0e4:	af04      	add	r7, sp, #16
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	4608      	mov	r0, r1
 800c0ea:	4611      	mov	r1, r2
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	70fb      	strb	r3, [r7, #3]
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	70bb      	strb	r3, [r7, #2]
 800c0f6:	4613      	mov	r3, r2
 800c0f8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c0fa:	7878      	ldrb	r0, [r7, #1]
 800c0fc:	78ba      	ldrb	r2, [r7, #2]
 800c0fe:	78f9      	ldrb	r1, [r7, #3]
 800c100:	8b3b      	ldrh	r3, [r7, #24]
 800c102:	9302      	str	r3, [sp, #8]
 800c104:	7d3b      	ldrb	r3, [r7, #20]
 800c106:	9301      	str	r3, [sp, #4]
 800c108:	7c3b      	ldrb	r3, [r7, #16]
 800c10a:	9300      	str	r3, [sp, #0]
 800c10c:	4603      	mov	r3, r0
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f002 fde1 	bl	800ecd6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800c114:	2300      	movs	r3, #0
}
 800c116:	4618      	mov	r0, r3
 800c118:	3708      	adds	r7, #8
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c11e:	b580      	push	{r7, lr}
 800c120:	b082      	sub	sp, #8
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
 800c126:	460b      	mov	r3, r1
 800c128:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c12a:	78fb      	ldrb	r3, [r7, #3]
 800c12c:	4619      	mov	r1, r3
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f002 fe00 	bl	800ed34 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c134:	2300      	movs	r3, #0
}
 800c136:	4618      	mov	r0, r3
 800c138:	3708      	adds	r7, #8
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c13e:	b580      	push	{r7, lr}
 800c140:	b084      	sub	sp, #16
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
 800c146:	460b      	mov	r3, r1
 800c148:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 f836 	bl	800c1bc <USBH_GetFreePipe>
 800c150:	4603      	mov	r3, r0
 800c152:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c154:	89fb      	ldrh	r3, [r7, #14]
 800c156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d00a      	beq.n	800c174 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c15e:	78fa      	ldrb	r2, [r7, #3]
 800c160:	89fb      	ldrh	r3, [r7, #14]
 800c162:	f003 030f 	and.w	r3, r3, #15
 800c166:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c16a:	6879      	ldr	r1, [r7, #4]
 800c16c:	33e0      	adds	r3, #224	; 0xe0
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	440b      	add	r3, r1
 800c172:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c174:	89fb      	ldrh	r3, [r7, #14]
 800c176:	b2db      	uxtb	r3, r3
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3710      	adds	r7, #16
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c180:	b480      	push	{r7}
 800c182:	b083      	sub	sp, #12
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	460b      	mov	r3, r1
 800c18a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c18c:	78fb      	ldrb	r3, [r7, #3]
 800c18e:	2b0f      	cmp	r3, #15
 800c190:	d80d      	bhi.n	800c1ae <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c192:	78fb      	ldrb	r3, [r7, #3]
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	33e0      	adds	r3, #224	; 0xe0
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	4413      	add	r3, r2
 800c19c:	685a      	ldr	r2, [r3, #4]
 800c19e:	78fb      	ldrb	r3, [r7, #3]
 800c1a0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c1a4:	6879      	ldr	r1, [r7, #4]
 800c1a6:	33e0      	adds	r3, #224	; 0xe0
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	440b      	add	r3, r1
 800c1ac:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c1ae:	2300      	movs	r3, #0
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	370c      	adds	r7, #12
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b085      	sub	sp, #20
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	73fb      	strb	r3, [r7, #15]
 800c1cc:	e00f      	b.n	800c1ee <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c1ce:	7bfb      	ldrb	r3, [r7, #15]
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	33e0      	adds	r3, #224	; 0xe0
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	4413      	add	r3, r2
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d102      	bne.n	800c1e8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c1e2:	7bfb      	ldrb	r3, [r7, #15]
 800c1e4:	b29b      	uxth	r3, r3
 800c1e6:	e007      	b.n	800c1f8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c1e8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	73fb      	strb	r3, [r7, #15]
 800c1ee:	7bfb      	ldrb	r3, [r7, #15]
 800c1f0:	2b0f      	cmp	r3, #15
 800c1f2:	d9ec      	bls.n	800c1ce <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c1f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3714      	adds	r7, #20
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr

0800c204 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	4603      	mov	r3, r0
 800c20c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c20e:	79fb      	ldrb	r3, [r7, #7]
 800c210:	4a08      	ldr	r2, [pc, #32]	; (800c234 <disk_status+0x30>)
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	4413      	add	r3, r2
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	685b      	ldr	r3, [r3, #4]
 800c21a:	79fa      	ldrb	r2, [r7, #7]
 800c21c:	4905      	ldr	r1, [pc, #20]	; (800c234 <disk_status+0x30>)
 800c21e:	440a      	add	r2, r1
 800c220:	7a12      	ldrb	r2, [r2, #8]
 800c222:	4610      	mov	r0, r2
 800c224:	4798      	blx	r3
 800c226:	4603      	mov	r3, r0
 800c228:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c22a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3710      	adds	r7, #16
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}
 800c234:	20001770 	.word	0x20001770

0800c238 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	4603      	mov	r3, r0
 800c240:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c242:	2300      	movs	r3, #0
 800c244:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c246:	79fb      	ldrb	r3, [r7, #7]
 800c248:	4a0d      	ldr	r2, [pc, #52]	; (800c280 <disk_initialize+0x48>)
 800c24a:	5cd3      	ldrb	r3, [r2, r3]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d111      	bne.n	800c274 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c250:	79fb      	ldrb	r3, [r7, #7]
 800c252:	4a0b      	ldr	r2, [pc, #44]	; (800c280 <disk_initialize+0x48>)
 800c254:	2101      	movs	r1, #1
 800c256:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c258:	79fb      	ldrb	r3, [r7, #7]
 800c25a:	4a09      	ldr	r2, [pc, #36]	; (800c280 <disk_initialize+0x48>)
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	4413      	add	r3, r2
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	79fa      	ldrb	r2, [r7, #7]
 800c266:	4906      	ldr	r1, [pc, #24]	; (800c280 <disk_initialize+0x48>)
 800c268:	440a      	add	r2, r1
 800c26a:	7a12      	ldrb	r2, [r2, #8]
 800c26c:	4610      	mov	r0, r2
 800c26e:	4798      	blx	r3
 800c270:	4603      	mov	r3, r0
 800c272:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c274:	7bfb      	ldrb	r3, [r7, #15]
}
 800c276:	4618      	mov	r0, r3
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	20001770 	.word	0x20001770

0800c284 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c284:	b590      	push	{r4, r7, lr}
 800c286:	b087      	sub	sp, #28
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60b9      	str	r1, [r7, #8]
 800c28c:	607a      	str	r2, [r7, #4]
 800c28e:	603b      	str	r3, [r7, #0]
 800c290:	4603      	mov	r3, r0
 800c292:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c294:	7bfb      	ldrb	r3, [r7, #15]
 800c296:	4a0a      	ldr	r2, [pc, #40]	; (800c2c0 <disk_read+0x3c>)
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	4413      	add	r3, r2
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	689c      	ldr	r4, [r3, #8]
 800c2a0:	7bfb      	ldrb	r3, [r7, #15]
 800c2a2:	4a07      	ldr	r2, [pc, #28]	; (800c2c0 <disk_read+0x3c>)
 800c2a4:	4413      	add	r3, r2
 800c2a6:	7a18      	ldrb	r0, [r3, #8]
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	68b9      	ldr	r1, [r7, #8]
 800c2ae:	47a0      	blx	r4
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	75fb      	strb	r3, [r7, #23]
  return res;
 800c2b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	371c      	adds	r7, #28
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd90      	pop	{r4, r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	20001770 	.word	0x20001770

0800c2c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c2c4:	b590      	push	{r4, r7, lr}
 800c2c6:	b087      	sub	sp, #28
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	60b9      	str	r1, [r7, #8]
 800c2cc:	607a      	str	r2, [r7, #4]
 800c2ce:	603b      	str	r3, [r7, #0]
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c2d4:	7bfb      	ldrb	r3, [r7, #15]
 800c2d6:	4a0a      	ldr	r2, [pc, #40]	; (800c300 <disk_write+0x3c>)
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	4413      	add	r3, r2
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	68dc      	ldr	r4, [r3, #12]
 800c2e0:	7bfb      	ldrb	r3, [r7, #15]
 800c2e2:	4a07      	ldr	r2, [pc, #28]	; (800c300 <disk_write+0x3c>)
 800c2e4:	4413      	add	r3, r2
 800c2e6:	7a18      	ldrb	r0, [r3, #8]
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	68b9      	ldr	r1, [r7, #8]
 800c2ee:	47a0      	blx	r4
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	75fb      	strb	r3, [r7, #23]
  return res;
 800c2f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	371c      	adds	r7, #28
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd90      	pop	{r4, r7, pc}
 800c2fe:	bf00      	nop
 800c300:	20001770 	.word	0x20001770

0800c304 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b084      	sub	sp, #16
 800c308:	af00      	add	r7, sp, #0
 800c30a:	4603      	mov	r3, r0
 800c30c:	603a      	str	r2, [r7, #0]
 800c30e:	71fb      	strb	r3, [r7, #7]
 800c310:	460b      	mov	r3, r1
 800c312:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c314:	79fb      	ldrb	r3, [r7, #7]
 800c316:	4a09      	ldr	r2, [pc, #36]	; (800c33c <disk_ioctl+0x38>)
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	4413      	add	r3, r2
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	691b      	ldr	r3, [r3, #16]
 800c320:	79fa      	ldrb	r2, [r7, #7]
 800c322:	4906      	ldr	r1, [pc, #24]	; (800c33c <disk_ioctl+0x38>)
 800c324:	440a      	add	r2, r1
 800c326:	7a10      	ldrb	r0, [r2, #8]
 800c328:	79b9      	ldrb	r1, [r7, #6]
 800c32a:	683a      	ldr	r2, [r7, #0]
 800c32c:	4798      	blx	r3
 800c32e:	4603      	mov	r3, r0
 800c330:	73fb      	strb	r3, [r7, #15]
  return res;
 800c332:	7bfb      	ldrb	r3, [r7, #15]
}
 800c334:	4618      	mov	r0, r3
 800c336:	3710      	adds	r7, #16
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	20001770 	.word	0x20001770

0800c340 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	3301      	adds	r3, #1
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c350:	89fb      	ldrh	r3, [r7, #14]
 800c352:	021b      	lsls	r3, r3, #8
 800c354:	b21a      	sxth	r2, r3
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	b21b      	sxth	r3, r3
 800c35c:	4313      	orrs	r3, r2
 800c35e:	b21b      	sxth	r3, r3
 800c360:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c362:	89fb      	ldrh	r3, [r7, #14]
}
 800c364:	4618      	mov	r0, r3
 800c366:	3714      	adds	r7, #20
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c370:	b480      	push	{r7}
 800c372:	b085      	sub	sp, #20
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	3303      	adds	r3, #3
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	021b      	lsls	r3, r3, #8
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	3202      	adds	r2, #2
 800c388:	7812      	ldrb	r2, [r2, #0]
 800c38a:	4313      	orrs	r3, r2
 800c38c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	021b      	lsls	r3, r3, #8
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	3201      	adds	r2, #1
 800c396:	7812      	ldrb	r2, [r2, #0]
 800c398:	4313      	orrs	r3, r2
 800c39a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	021b      	lsls	r3, r3, #8
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	7812      	ldrb	r2, [r2, #0]
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	60fb      	str	r3, [r7, #12]
	return rv;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3714      	adds	r7, #20
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b4:	4770      	bx	lr

0800c3b6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c3b6:	b480      	push	{r7}
 800c3b8:	b083      	sub	sp, #12
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
 800c3be:	460b      	mov	r3, r1
 800c3c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	1c5a      	adds	r2, r3, #1
 800c3c6:	607a      	str	r2, [r7, #4]
 800c3c8:	887a      	ldrh	r2, [r7, #2]
 800c3ca:	b2d2      	uxtb	r2, r2
 800c3cc:	701a      	strb	r2, [r3, #0]
 800c3ce:	887b      	ldrh	r3, [r7, #2]
 800c3d0:	0a1b      	lsrs	r3, r3, #8
 800c3d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	1c5a      	adds	r2, r3, #1
 800c3d8:	607a      	str	r2, [r7, #4]
 800c3da:	887a      	ldrh	r2, [r7, #2]
 800c3dc:	b2d2      	uxtb	r2, r2
 800c3de:	701a      	strb	r2, [r3, #0]
}
 800c3e0:	bf00      	nop
 800c3e2:	370c      	adds	r7, #12
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr

0800c3ec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b083      	sub	sp, #12
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	1c5a      	adds	r2, r3, #1
 800c3fa:	607a      	str	r2, [r7, #4]
 800c3fc:	683a      	ldr	r2, [r7, #0]
 800c3fe:	b2d2      	uxtb	r2, r2
 800c400:	701a      	strb	r2, [r3, #0]
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	0a1b      	lsrs	r3, r3, #8
 800c406:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	1c5a      	adds	r2, r3, #1
 800c40c:	607a      	str	r2, [r7, #4]
 800c40e:	683a      	ldr	r2, [r7, #0]
 800c410:	b2d2      	uxtb	r2, r2
 800c412:	701a      	strb	r2, [r3, #0]
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	0a1b      	lsrs	r3, r3, #8
 800c418:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	1c5a      	adds	r2, r3, #1
 800c41e:	607a      	str	r2, [r7, #4]
 800c420:	683a      	ldr	r2, [r7, #0]
 800c422:	b2d2      	uxtb	r2, r2
 800c424:	701a      	strb	r2, [r3, #0]
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	0a1b      	lsrs	r3, r3, #8
 800c42a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	1c5a      	adds	r2, r3, #1
 800c430:	607a      	str	r2, [r7, #4]
 800c432:	683a      	ldr	r2, [r7, #0]
 800c434:	b2d2      	uxtb	r2, r2
 800c436:	701a      	strb	r2, [r3, #0]
}
 800c438:	bf00      	nop
 800c43a:	370c      	adds	r7, #12
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr

0800c444 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c444:	b480      	push	{r7}
 800c446:	b087      	sub	sp, #28
 800c448:	af00      	add	r7, sp, #0
 800c44a:	60f8      	str	r0, [r7, #12]
 800c44c:	60b9      	str	r1, [r7, #8]
 800c44e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d00d      	beq.n	800c47a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c45e:	693a      	ldr	r2, [r7, #16]
 800c460:	1c53      	adds	r3, r2, #1
 800c462:	613b      	str	r3, [r7, #16]
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	1c59      	adds	r1, r3, #1
 800c468:	6179      	str	r1, [r7, #20]
 800c46a:	7812      	ldrb	r2, [r2, #0]
 800c46c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	3b01      	subs	r3, #1
 800c472:	607b      	str	r3, [r7, #4]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d1f1      	bne.n	800c45e <mem_cpy+0x1a>
	}
}
 800c47a:	bf00      	nop
 800c47c:	371c      	adds	r7, #28
 800c47e:	46bd      	mov	sp, r7
 800c480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c484:	4770      	bx	lr

0800c486 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c486:	b480      	push	{r7}
 800c488:	b087      	sub	sp, #28
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	60f8      	str	r0, [r7, #12]
 800c48e:	60b9      	str	r1, [r7, #8]
 800c490:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	1c5a      	adds	r2, r3, #1
 800c49a:	617a      	str	r2, [r7, #20]
 800c49c:	68ba      	ldr	r2, [r7, #8]
 800c49e:	b2d2      	uxtb	r2, r2
 800c4a0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	3b01      	subs	r3, #1
 800c4a6:	607b      	str	r3, [r7, #4]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d1f3      	bne.n	800c496 <mem_set+0x10>
}
 800c4ae:	bf00      	nop
 800c4b0:	bf00      	nop
 800c4b2:	371c      	adds	r7, #28
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c4bc:	b480      	push	{r7}
 800c4be:	b089      	sub	sp, #36	; 0x24
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	60b9      	str	r1, [r7, #8]
 800c4c6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	61fb      	str	r3, [r7, #28]
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c4d4:	69fb      	ldr	r3, [r7, #28]
 800c4d6:	1c5a      	adds	r2, r3, #1
 800c4d8:	61fa      	str	r2, [r7, #28]
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	4619      	mov	r1, r3
 800c4de:	69bb      	ldr	r3, [r7, #24]
 800c4e0:	1c5a      	adds	r2, r3, #1
 800c4e2:	61ba      	str	r2, [r7, #24]
 800c4e4:	781b      	ldrb	r3, [r3, #0]
 800c4e6:	1acb      	subs	r3, r1, r3
 800c4e8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	3b01      	subs	r3, #1
 800c4ee:	607b      	str	r3, [r7, #4]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d002      	beq.n	800c4fc <mem_cmp+0x40>
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d0eb      	beq.n	800c4d4 <mem_cmp+0x18>

	return r;
 800c4fc:	697b      	ldr	r3, [r7, #20]
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3724      	adds	r7, #36	; 0x24
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr

0800c50a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c50a:	b480      	push	{r7}
 800c50c:	b083      	sub	sp, #12
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
 800c512:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c514:	e002      	b.n	800c51c <chk_chr+0x12>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	3301      	adds	r3, #1
 800c51a:	607b      	str	r3, [r7, #4]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d005      	beq.n	800c530 <chk_chr+0x26>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	461a      	mov	r2, r3
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d1f2      	bne.n	800c516 <chk_chr+0xc>
	return *str;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	781b      	ldrb	r3, [r3, #0]
}
 800c534:	4618      	mov	r0, r3
 800c536:	370c      	adds	r7, #12
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr

0800c540 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c540:	b480      	push	{r7}
 800c542:	b085      	sub	sp, #20
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c54a:	2300      	movs	r3, #0
 800c54c:	60bb      	str	r3, [r7, #8]
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	60fb      	str	r3, [r7, #12]
 800c552:	e029      	b.n	800c5a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c554:	4a27      	ldr	r2, [pc, #156]	; (800c5f4 <chk_lock+0xb4>)
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	011b      	lsls	r3, r3, #4
 800c55a:	4413      	add	r3, r2
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d01d      	beq.n	800c59e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c562:	4a24      	ldr	r2, [pc, #144]	; (800c5f4 <chk_lock+0xb4>)
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	011b      	lsls	r3, r3, #4
 800c568:	4413      	add	r3, r2
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	429a      	cmp	r2, r3
 800c572:	d116      	bne.n	800c5a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c574:	4a1f      	ldr	r2, [pc, #124]	; (800c5f4 <chk_lock+0xb4>)
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	011b      	lsls	r3, r3, #4
 800c57a:	4413      	add	r3, r2
 800c57c:	3304      	adds	r3, #4
 800c57e:	681a      	ldr	r2, [r3, #0]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c584:	429a      	cmp	r2, r3
 800c586:	d10c      	bne.n	800c5a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c588:	4a1a      	ldr	r2, [pc, #104]	; (800c5f4 <chk_lock+0xb4>)
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	011b      	lsls	r3, r3, #4
 800c58e:	4413      	add	r3, r2
 800c590:	3308      	adds	r3, #8
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c598:	429a      	cmp	r2, r3
 800c59a:	d102      	bne.n	800c5a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c59c:	e007      	b.n	800c5ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	60fb      	str	r3, [r7, #12]
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	d9d2      	bls.n	800c554 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2b02      	cmp	r3, #2
 800c5b2:	d109      	bne.n	800c5c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d102      	bne.n	800c5c0 <chk_lock+0x80>
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	2b02      	cmp	r3, #2
 800c5be:	d101      	bne.n	800c5c4 <chk_lock+0x84>
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	e010      	b.n	800c5e6 <chk_lock+0xa6>
 800c5c4:	2312      	movs	r3, #18
 800c5c6:	e00e      	b.n	800c5e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d108      	bne.n	800c5e0 <chk_lock+0xa0>
 800c5ce:	4a09      	ldr	r2, [pc, #36]	; (800c5f4 <chk_lock+0xb4>)
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	011b      	lsls	r3, r3, #4
 800c5d4:	4413      	add	r3, r2
 800c5d6:	330c      	adds	r3, #12
 800c5d8:	881b      	ldrh	r3, [r3, #0]
 800c5da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5de:	d101      	bne.n	800c5e4 <chk_lock+0xa4>
 800c5e0:	2310      	movs	r3, #16
 800c5e2:	e000      	b.n	800c5e6 <chk_lock+0xa6>
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3714      	adds	r7, #20
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr
 800c5f2:	bf00      	nop
 800c5f4:	20001750 	.word	0x20001750

0800c5f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b083      	sub	sp, #12
 800c5fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c5fe:	2300      	movs	r3, #0
 800c600:	607b      	str	r3, [r7, #4]
 800c602:	e002      	b.n	800c60a <enq_lock+0x12>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	3301      	adds	r3, #1
 800c608:	607b      	str	r3, [r7, #4]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d806      	bhi.n	800c61e <enq_lock+0x26>
 800c610:	4a09      	ldr	r2, [pc, #36]	; (800c638 <enq_lock+0x40>)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	011b      	lsls	r3, r3, #4
 800c616:	4413      	add	r3, r2
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d1f2      	bne.n	800c604 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2b02      	cmp	r3, #2
 800c622:	bf14      	ite	ne
 800c624:	2301      	movne	r3, #1
 800c626:	2300      	moveq	r3, #0
 800c628:	b2db      	uxtb	r3, r3
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	370c      	adds	r7, #12
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr
 800c636:	bf00      	nop
 800c638:	20001750 	.word	0x20001750

0800c63c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b085      	sub	sp, #20
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c646:	2300      	movs	r3, #0
 800c648:	60fb      	str	r3, [r7, #12]
 800c64a:	e01f      	b.n	800c68c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c64c:	4a41      	ldr	r2, [pc, #260]	; (800c754 <inc_lock+0x118>)
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	011b      	lsls	r3, r3, #4
 800c652:	4413      	add	r3, r2
 800c654:	681a      	ldr	r2, [r3, #0]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d113      	bne.n	800c686 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c65e:	4a3d      	ldr	r2, [pc, #244]	; (800c754 <inc_lock+0x118>)
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	011b      	lsls	r3, r3, #4
 800c664:	4413      	add	r3, r2
 800c666:	3304      	adds	r3, #4
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c66e:	429a      	cmp	r2, r3
 800c670:	d109      	bne.n	800c686 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c672:	4a38      	ldr	r2, [pc, #224]	; (800c754 <inc_lock+0x118>)
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	011b      	lsls	r3, r3, #4
 800c678:	4413      	add	r3, r2
 800c67a:	3308      	adds	r3, #8
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c682:	429a      	cmp	r2, r3
 800c684:	d006      	beq.n	800c694 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	3301      	adds	r3, #1
 800c68a:	60fb      	str	r3, [r7, #12]
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d9dc      	bls.n	800c64c <inc_lock+0x10>
 800c692:	e000      	b.n	800c696 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c694:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2b02      	cmp	r3, #2
 800c69a:	d132      	bne.n	800c702 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c69c:	2300      	movs	r3, #0
 800c69e:	60fb      	str	r3, [r7, #12]
 800c6a0:	e002      	b.n	800c6a8 <inc_lock+0x6c>
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	60fb      	str	r3, [r7, #12]
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d806      	bhi.n	800c6bc <inc_lock+0x80>
 800c6ae:	4a29      	ldr	r2, [pc, #164]	; (800c754 <inc_lock+0x118>)
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	011b      	lsls	r3, r3, #4
 800c6b4:	4413      	add	r3, r2
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d1f2      	bne.n	800c6a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2b02      	cmp	r3, #2
 800c6c0:	d101      	bne.n	800c6c6 <inc_lock+0x8a>
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	e040      	b.n	800c748 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	4922      	ldr	r1, [pc, #136]	; (800c754 <inc_lock+0x118>)
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	011b      	lsls	r3, r3, #4
 800c6d0:	440b      	add	r3, r1
 800c6d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	689a      	ldr	r2, [r3, #8]
 800c6d8:	491e      	ldr	r1, [pc, #120]	; (800c754 <inc_lock+0x118>)
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	011b      	lsls	r3, r3, #4
 800c6de:	440b      	add	r3, r1
 800c6e0:	3304      	adds	r3, #4
 800c6e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	695a      	ldr	r2, [r3, #20]
 800c6e8:	491a      	ldr	r1, [pc, #104]	; (800c754 <inc_lock+0x118>)
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	011b      	lsls	r3, r3, #4
 800c6ee:	440b      	add	r3, r1
 800c6f0:	3308      	adds	r3, #8
 800c6f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c6f4:	4a17      	ldr	r2, [pc, #92]	; (800c754 <inc_lock+0x118>)
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	011b      	lsls	r3, r3, #4
 800c6fa:	4413      	add	r3, r2
 800c6fc:	330c      	adds	r3, #12
 800c6fe:	2200      	movs	r2, #0
 800c700:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d009      	beq.n	800c71c <inc_lock+0xe0>
 800c708:	4a12      	ldr	r2, [pc, #72]	; (800c754 <inc_lock+0x118>)
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	011b      	lsls	r3, r3, #4
 800c70e:	4413      	add	r3, r2
 800c710:	330c      	adds	r3, #12
 800c712:	881b      	ldrh	r3, [r3, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d001      	beq.n	800c71c <inc_lock+0xe0>
 800c718:	2300      	movs	r3, #0
 800c71a:	e015      	b.n	800c748 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d108      	bne.n	800c734 <inc_lock+0xf8>
 800c722:	4a0c      	ldr	r2, [pc, #48]	; (800c754 <inc_lock+0x118>)
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	011b      	lsls	r3, r3, #4
 800c728:	4413      	add	r3, r2
 800c72a:	330c      	adds	r3, #12
 800c72c:	881b      	ldrh	r3, [r3, #0]
 800c72e:	3301      	adds	r3, #1
 800c730:	b29a      	uxth	r2, r3
 800c732:	e001      	b.n	800c738 <inc_lock+0xfc>
 800c734:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c738:	4906      	ldr	r1, [pc, #24]	; (800c754 <inc_lock+0x118>)
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	011b      	lsls	r3, r3, #4
 800c73e:	440b      	add	r3, r1
 800c740:	330c      	adds	r3, #12
 800c742:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	3301      	adds	r3, #1
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3714      	adds	r7, #20
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr
 800c754:	20001750 	.word	0x20001750

0800c758 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c758:	b480      	push	{r7}
 800c75a:	b085      	sub	sp, #20
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	3b01      	subs	r3, #1
 800c764:	607b      	str	r3, [r7, #4]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d825      	bhi.n	800c7b8 <dec_lock+0x60>
		n = Files[i].ctr;
 800c76c:	4a17      	ldr	r2, [pc, #92]	; (800c7cc <dec_lock+0x74>)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	011b      	lsls	r3, r3, #4
 800c772:	4413      	add	r3, r2
 800c774:	330c      	adds	r3, #12
 800c776:	881b      	ldrh	r3, [r3, #0]
 800c778:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c77a:	89fb      	ldrh	r3, [r7, #14]
 800c77c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c780:	d101      	bne.n	800c786 <dec_lock+0x2e>
 800c782:	2300      	movs	r3, #0
 800c784:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c786:	89fb      	ldrh	r3, [r7, #14]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d002      	beq.n	800c792 <dec_lock+0x3a>
 800c78c:	89fb      	ldrh	r3, [r7, #14]
 800c78e:	3b01      	subs	r3, #1
 800c790:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c792:	4a0e      	ldr	r2, [pc, #56]	; (800c7cc <dec_lock+0x74>)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	011b      	lsls	r3, r3, #4
 800c798:	4413      	add	r3, r2
 800c79a:	330c      	adds	r3, #12
 800c79c:	89fa      	ldrh	r2, [r7, #14]
 800c79e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c7a0:	89fb      	ldrh	r3, [r7, #14]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d105      	bne.n	800c7b2 <dec_lock+0x5a>
 800c7a6:	4a09      	ldr	r2, [pc, #36]	; (800c7cc <dec_lock+0x74>)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	011b      	lsls	r3, r3, #4
 800c7ac:	4413      	add	r3, r2
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	737b      	strb	r3, [r7, #13]
 800c7b6:	e001      	b.n	800c7bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c7b8:	2302      	movs	r3, #2
 800c7ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c7bc:	7b7b      	ldrb	r3, [r7, #13]
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3714      	adds	r7, #20
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c8:	4770      	bx	lr
 800c7ca:	bf00      	nop
 800c7cc:	20001750 	.word	0x20001750

0800c7d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b085      	sub	sp, #20
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c7d8:	2300      	movs	r3, #0
 800c7da:	60fb      	str	r3, [r7, #12]
 800c7dc:	e010      	b.n	800c800 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c7de:	4a0d      	ldr	r2, [pc, #52]	; (800c814 <clear_lock+0x44>)
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	011b      	lsls	r3, r3, #4
 800c7e4:	4413      	add	r3, r2
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d105      	bne.n	800c7fa <clear_lock+0x2a>
 800c7ee:	4a09      	ldr	r2, [pc, #36]	; (800c814 <clear_lock+0x44>)
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	011b      	lsls	r3, r3, #4
 800c7f4:	4413      	add	r3, r2
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	60fb      	str	r3, [r7, #12]
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2b01      	cmp	r3, #1
 800c804:	d9eb      	bls.n	800c7de <clear_lock+0xe>
	}
}
 800c806:	bf00      	nop
 800c808:	bf00      	nop
 800c80a:	3714      	adds	r7, #20
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr
 800c814:	20001750 	.word	0x20001750

0800c818 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b086      	sub	sp, #24
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c820:	2300      	movs	r3, #0
 800c822:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	78db      	ldrb	r3, [r3, #3]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d034      	beq.n	800c896 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c830:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	7858      	ldrb	r0, [r3, #1]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c83c:	2301      	movs	r3, #1
 800c83e:	697a      	ldr	r2, [r7, #20]
 800c840:	f7ff fd40 	bl	800c2c4 <disk_write>
 800c844:	4603      	mov	r3, r0
 800c846:	2b00      	cmp	r3, #0
 800c848:	d002      	beq.n	800c850 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c84a:	2301      	movs	r3, #1
 800c84c:	73fb      	strb	r3, [r7, #15]
 800c84e:	e022      	b.n	800c896 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2200      	movs	r2, #0
 800c854:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6a1b      	ldr	r3, [r3, #32]
 800c85a:	697a      	ldr	r2, [r7, #20]
 800c85c:	1ad2      	subs	r2, r2, r3
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	699b      	ldr	r3, [r3, #24]
 800c862:	429a      	cmp	r2, r3
 800c864:	d217      	bcs.n	800c896 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	789b      	ldrb	r3, [r3, #2]
 800c86a:	613b      	str	r3, [r7, #16]
 800c86c:	e010      	b.n	800c890 <sync_window+0x78>
					wsect += fs->fsize;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	699b      	ldr	r3, [r3, #24]
 800c872:	697a      	ldr	r2, [r7, #20]
 800c874:	4413      	add	r3, r2
 800c876:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	7858      	ldrb	r0, [r3, #1]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c882:	2301      	movs	r3, #1
 800c884:	697a      	ldr	r2, [r7, #20]
 800c886:	f7ff fd1d 	bl	800c2c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	3b01      	subs	r3, #1
 800c88e:	613b      	str	r3, [r7, #16]
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	2b01      	cmp	r3, #1
 800c894:	d8eb      	bhi.n	800c86e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c896:	7bfb      	ldrb	r3, [r7, #15]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3718      	adds	r7, #24
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b2:	683a      	ldr	r2, [r7, #0]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d01b      	beq.n	800c8f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f7ff ffad 	bl	800c818 <sync_window>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c8c2:	7bfb      	ldrb	r3, [r7, #15]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d113      	bne.n	800c8f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	7858      	ldrb	r0, [r3, #1]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	683a      	ldr	r2, [r7, #0]
 800c8d6:	f7ff fcd5 	bl	800c284 <disk_read>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d004      	beq.n	800c8ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c8e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c8e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	683a      	ldr	r2, [r7, #0]
 800c8ee:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800c8f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3710      	adds	r7, #16
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
	...

0800c8fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f7ff ff87 	bl	800c818 <sync_window>
 800c90a:	4603      	mov	r3, r0
 800c90c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c90e:	7bfb      	ldrb	r3, [r7, #15]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d158      	bne.n	800c9c6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	2b03      	cmp	r3, #3
 800c91a:	d148      	bne.n	800c9ae <sync_fs+0xb2>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	791b      	ldrb	r3, [r3, #4]
 800c920:	2b01      	cmp	r3, #1
 800c922:	d144      	bne.n	800c9ae <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	3330      	adds	r3, #48	; 0x30
 800c928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c92c:	2100      	movs	r1, #0
 800c92e:	4618      	mov	r0, r3
 800c930:	f7ff fda9 	bl	800c486 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	3330      	adds	r3, #48	; 0x30
 800c938:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c93c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c940:	4618      	mov	r0, r3
 800c942:	f7ff fd38 	bl	800c3b6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	3330      	adds	r3, #48	; 0x30
 800c94a:	4921      	ldr	r1, [pc, #132]	; (800c9d0 <sync_fs+0xd4>)
 800c94c:	4618      	mov	r0, r3
 800c94e:	f7ff fd4d 	bl	800c3ec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	3330      	adds	r3, #48	; 0x30
 800c956:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c95a:	491e      	ldr	r1, [pc, #120]	; (800c9d4 <sync_fs+0xd8>)
 800c95c:	4618      	mov	r0, r3
 800c95e:	f7ff fd45 	bl	800c3ec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	3330      	adds	r3, #48	; 0x30
 800c966:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	691b      	ldr	r3, [r3, #16]
 800c96e:	4619      	mov	r1, r3
 800c970:	4610      	mov	r0, r2
 800c972:	f7ff fd3b 	bl	800c3ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	3330      	adds	r3, #48	; 0x30
 800c97a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	68db      	ldr	r3, [r3, #12]
 800c982:	4619      	mov	r1, r3
 800c984:	4610      	mov	r0, r2
 800c986:	f7ff fd31 	bl	800c3ec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	69db      	ldr	r3, [r3, #28]
 800c98e:	1c5a      	adds	r2, r3, #1
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	7858      	ldrb	r0, [r3, #1]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	f7ff fc8e 	bl	800c2c4 <disk_write>
			fs->fsi_flag = 0;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	785b      	ldrb	r3, [r3, #1]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	2100      	movs	r1, #0
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7ff fca4 	bl	800c304 <disk_ioctl>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d001      	beq.n	800c9c6 <sync_fs+0xca>
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c9c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3710      	adds	r7, #16
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	41615252 	.word	0x41615252
 800c9d4:	61417272 	.word	0x61417272

0800c9d8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b083      	sub	sp, #12
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	3b02      	subs	r3, #2
 800c9e6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	695b      	ldr	r3, [r3, #20]
 800c9ec:	3b02      	subs	r3, #2
 800c9ee:	683a      	ldr	r2, [r7, #0]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d301      	bcc.n	800c9f8 <clust2sect+0x20>
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	e008      	b.n	800ca0a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	895b      	ldrh	r3, [r3, #10]
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	fb03 f202 	mul.w	r2, r3, r2
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca08:	4413      	add	r3, r2
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	370c      	adds	r7, #12
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr

0800ca16 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b086      	sub	sp, #24
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
 800ca1e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d904      	bls.n	800ca36 <get_fat+0x20>
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	695b      	ldr	r3, [r3, #20]
 800ca30:	683a      	ldr	r2, [r7, #0]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d302      	bcc.n	800ca3c <get_fat+0x26>
		val = 1;	/* Internal error */
 800ca36:	2301      	movs	r3, #1
 800ca38:	617b      	str	r3, [r7, #20]
 800ca3a:	e08f      	b.n	800cb5c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ca3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ca40:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	2b03      	cmp	r3, #3
 800ca48:	d062      	beq.n	800cb10 <get_fat+0xfa>
 800ca4a:	2b03      	cmp	r3, #3
 800ca4c:	dc7c      	bgt.n	800cb48 <get_fat+0x132>
 800ca4e:	2b01      	cmp	r3, #1
 800ca50:	d002      	beq.n	800ca58 <get_fat+0x42>
 800ca52:	2b02      	cmp	r3, #2
 800ca54:	d042      	beq.n	800cadc <get_fat+0xc6>
 800ca56:	e077      	b.n	800cb48 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	60fb      	str	r3, [r7, #12]
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	085b      	lsrs	r3, r3, #1
 800ca60:	68fa      	ldr	r2, [r7, #12]
 800ca62:	4413      	add	r3, r2
 800ca64:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	6a1a      	ldr	r2, [r3, #32]
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	0a5b      	lsrs	r3, r3, #9
 800ca6e:	4413      	add	r3, r2
 800ca70:	4619      	mov	r1, r3
 800ca72:	6938      	ldr	r0, [r7, #16]
 800ca74:	f7ff ff14 	bl	800c8a0 <move_window>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d167      	bne.n	800cb4e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	1c5a      	adds	r2, r3, #1
 800ca82:	60fa      	str	r2, [r7, #12]
 800ca84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca88:	693a      	ldr	r2, [r7, #16]
 800ca8a:	4413      	add	r3, r2
 800ca8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca90:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	6a1a      	ldr	r2, [r3, #32]
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	0a5b      	lsrs	r3, r3, #9
 800ca9a:	4413      	add	r3, r2
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	6938      	ldr	r0, [r7, #16]
 800caa0:	f7ff fefe 	bl	800c8a0 <move_window>
 800caa4:	4603      	mov	r3, r0
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d153      	bne.n	800cb52 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cab0:	693a      	ldr	r2, [r7, #16]
 800cab2:	4413      	add	r3, r2
 800cab4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cab8:	021b      	lsls	r3, r3, #8
 800caba:	461a      	mov	r2, r3
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	4313      	orrs	r3, r2
 800cac0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	f003 0301 	and.w	r3, r3, #1
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d002      	beq.n	800cad2 <get_fat+0xbc>
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	091b      	lsrs	r3, r3, #4
 800cad0:	e002      	b.n	800cad8 <get_fat+0xc2>
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cad8:	617b      	str	r3, [r7, #20]
			break;
 800cada:	e03f      	b.n	800cb5c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	6a1a      	ldr	r2, [r3, #32]
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	0a1b      	lsrs	r3, r3, #8
 800cae4:	4413      	add	r3, r2
 800cae6:	4619      	mov	r1, r3
 800cae8:	6938      	ldr	r0, [r7, #16]
 800caea:	f7ff fed9 	bl	800c8a0 <move_window>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d130      	bne.n	800cb56 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	005b      	lsls	r3, r3, #1
 800cafe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cb02:	4413      	add	r3, r2
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7ff fc1b 	bl	800c340 <ld_word>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	617b      	str	r3, [r7, #20]
			break;
 800cb0e:	e025      	b.n	800cb5c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	6a1a      	ldr	r2, [r3, #32]
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	09db      	lsrs	r3, r3, #7
 800cb18:	4413      	add	r3, r2
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	6938      	ldr	r0, [r7, #16]
 800cb1e:	f7ff febf 	bl	800c8a0 <move_window>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d118      	bne.n	800cb5a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	009b      	lsls	r3, r3, #2
 800cb32:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cb36:	4413      	add	r3, r2
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7ff fc19 	bl	800c370 <ld_dword>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cb44:	617b      	str	r3, [r7, #20]
			break;
 800cb46:	e009      	b.n	800cb5c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cb48:	2301      	movs	r3, #1
 800cb4a:	617b      	str	r3, [r7, #20]
 800cb4c:	e006      	b.n	800cb5c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb4e:	bf00      	nop
 800cb50:	e004      	b.n	800cb5c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb52:	bf00      	nop
 800cb54:	e002      	b.n	800cb5c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cb56:	bf00      	nop
 800cb58:	e000      	b.n	800cb5c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cb5a:	bf00      	nop
		}
	}

	return val;
 800cb5c:	697b      	ldr	r3, [r7, #20]
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3718      	adds	r7, #24
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}

0800cb66 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cb66:	b590      	push	{r4, r7, lr}
 800cb68:	b089      	sub	sp, #36	; 0x24
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	60f8      	str	r0, [r7, #12]
 800cb6e:	60b9      	str	r1, [r7, #8]
 800cb70:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cb72:	2302      	movs	r3, #2
 800cb74:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	f240 80d2 	bls.w	800cd22 <put_fat+0x1bc>
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	695b      	ldr	r3, [r3, #20]
 800cb82:	68ba      	ldr	r2, [r7, #8]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	f080 80cc 	bcs.w	800cd22 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	2b03      	cmp	r3, #3
 800cb90:	f000 8096 	beq.w	800ccc0 <put_fat+0x15a>
 800cb94:	2b03      	cmp	r3, #3
 800cb96:	f300 80cd 	bgt.w	800cd34 <put_fat+0x1ce>
 800cb9a:	2b01      	cmp	r3, #1
 800cb9c:	d002      	beq.n	800cba4 <put_fat+0x3e>
 800cb9e:	2b02      	cmp	r3, #2
 800cba0:	d06e      	beq.n	800cc80 <put_fat+0x11a>
 800cba2:	e0c7      	b.n	800cd34 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	61bb      	str	r3, [r7, #24]
 800cba8:	69bb      	ldr	r3, [r7, #24]
 800cbaa:	085b      	lsrs	r3, r3, #1
 800cbac:	69ba      	ldr	r2, [r7, #24]
 800cbae:	4413      	add	r3, r2
 800cbb0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	6a1a      	ldr	r2, [r3, #32]
 800cbb6:	69bb      	ldr	r3, [r7, #24]
 800cbb8:	0a5b      	lsrs	r3, r3, #9
 800cbba:	4413      	add	r3, r2
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	68f8      	ldr	r0, [r7, #12]
 800cbc0:	f7ff fe6e 	bl	800c8a0 <move_window>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cbc8:	7ffb      	ldrb	r3, [r7, #31]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	f040 80ab 	bne.w	800cd26 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cbd6:	69bb      	ldr	r3, [r7, #24]
 800cbd8:	1c59      	adds	r1, r3, #1
 800cbda:	61b9      	str	r1, [r7, #24]
 800cbdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbe0:	4413      	add	r3, r2
 800cbe2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	f003 0301 	and.w	r3, r3, #1
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d00d      	beq.n	800cc0a <put_fat+0xa4>
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	b25b      	sxtb	r3, r3
 800cbf4:	f003 030f 	and.w	r3, r3, #15
 800cbf8:	b25a      	sxtb	r2, r3
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	b2db      	uxtb	r3, r3
 800cbfe:	011b      	lsls	r3, r3, #4
 800cc00:	b25b      	sxtb	r3, r3
 800cc02:	4313      	orrs	r3, r2
 800cc04:	b25b      	sxtb	r3, r3
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	e001      	b.n	800cc0e <put_fat+0xa8>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	b2db      	uxtb	r3, r3
 800cc0e:	697a      	ldr	r2, [r7, #20]
 800cc10:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2201      	movs	r2, #1
 800cc16:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	6a1a      	ldr	r2, [r3, #32]
 800cc1c:	69bb      	ldr	r3, [r7, #24]
 800cc1e:	0a5b      	lsrs	r3, r3, #9
 800cc20:	4413      	add	r3, r2
 800cc22:	4619      	mov	r1, r3
 800cc24:	68f8      	ldr	r0, [r7, #12]
 800cc26:	f7ff fe3b 	bl	800c8a0 <move_window>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cc2e:	7ffb      	ldrb	r3, [r7, #31]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d17a      	bne.n	800cd2a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cc3a:	69bb      	ldr	r3, [r7, #24]
 800cc3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc40:	4413      	add	r3, r2
 800cc42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	f003 0301 	and.w	r3, r3, #1
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d003      	beq.n	800cc56 <put_fat+0xf0>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	091b      	lsrs	r3, r3, #4
 800cc52:	b2db      	uxtb	r3, r3
 800cc54:	e00e      	b.n	800cc74 <put_fat+0x10e>
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	b25b      	sxtb	r3, r3
 800cc5c:	f023 030f 	bic.w	r3, r3, #15
 800cc60:	b25a      	sxtb	r2, r3
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	0a1b      	lsrs	r3, r3, #8
 800cc66:	b25b      	sxtb	r3, r3
 800cc68:	f003 030f 	and.w	r3, r3, #15
 800cc6c:	b25b      	sxtb	r3, r3
 800cc6e:	4313      	orrs	r3, r2
 800cc70:	b25b      	sxtb	r3, r3
 800cc72:	b2db      	uxtb	r3, r3
 800cc74:	697a      	ldr	r2, [r7, #20]
 800cc76:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	70da      	strb	r2, [r3, #3]
			break;
 800cc7e:	e059      	b.n	800cd34 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	6a1a      	ldr	r2, [r3, #32]
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	0a1b      	lsrs	r3, r3, #8
 800cc88:	4413      	add	r3, r2
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	68f8      	ldr	r0, [r7, #12]
 800cc8e:	f7ff fe07 	bl	800c8a0 <move_window>
 800cc92:	4603      	mov	r3, r0
 800cc94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cc96:	7ffb      	ldrb	r3, [r7, #31]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d148      	bne.n	800cd2e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	005b      	lsls	r3, r3, #1
 800cca6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ccaa:	4413      	add	r3, r2
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	b292      	uxth	r2, r2
 800ccb0:	4611      	mov	r1, r2
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7ff fb7f 	bl	800c3b6 <st_word>
			fs->wflag = 1;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2201      	movs	r2, #1
 800ccbc:	70da      	strb	r2, [r3, #3]
			break;
 800ccbe:	e039      	b.n	800cd34 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	6a1a      	ldr	r2, [r3, #32]
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	09db      	lsrs	r3, r3, #7
 800ccc8:	4413      	add	r3, r2
 800ccca:	4619      	mov	r1, r3
 800cccc:	68f8      	ldr	r0, [r7, #12]
 800ccce:	f7ff fde7 	bl	800c8a0 <move_window>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ccd6:	7ffb      	ldrb	r3, [r7, #31]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d12a      	bne.n	800cd32 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	009b      	lsls	r3, r3, #2
 800ccec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ccf0:	4413      	add	r3, r2
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7ff fb3c 	bl	800c370 <ld_dword>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ccfe:	4323      	orrs	r3, r4
 800cd00:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cd10:	4413      	add	r3, r2
 800cd12:	6879      	ldr	r1, [r7, #4]
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7ff fb69 	bl	800c3ec <st_dword>
			fs->wflag = 1;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	2201      	movs	r2, #1
 800cd1e:	70da      	strb	r2, [r3, #3]
			break;
 800cd20:	e008      	b.n	800cd34 <put_fat+0x1ce>
		}
	}
 800cd22:	bf00      	nop
 800cd24:	e006      	b.n	800cd34 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cd26:	bf00      	nop
 800cd28:	e004      	b.n	800cd34 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cd2a:	bf00      	nop
 800cd2c:	e002      	b.n	800cd34 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cd2e:	bf00      	nop
 800cd30:	e000      	b.n	800cd34 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cd32:	bf00      	nop
	return res;
 800cd34:	7ffb      	ldrb	r3, [r7, #31]
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3724      	adds	r7, #36	; 0x24
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd90      	pop	{r4, r7, pc}

0800cd3e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cd3e:	b580      	push	{r7, lr}
 800cd40:	b088      	sub	sp, #32
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	60f8      	str	r0, [r7, #12]
 800cd46:	60b9      	str	r1, [r7, #8]
 800cd48:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	2b01      	cmp	r3, #1
 800cd58:	d904      	bls.n	800cd64 <remove_chain+0x26>
 800cd5a:	69bb      	ldr	r3, [r7, #24]
 800cd5c:	695b      	ldr	r3, [r3, #20]
 800cd5e:	68ba      	ldr	r2, [r7, #8]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d301      	bcc.n	800cd68 <remove_chain+0x2a>
 800cd64:	2302      	movs	r3, #2
 800cd66:	e04b      	b.n	800ce00 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d00c      	beq.n	800cd88 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cd6e:	f04f 32ff 	mov.w	r2, #4294967295
 800cd72:	6879      	ldr	r1, [r7, #4]
 800cd74:	69b8      	ldr	r0, [r7, #24]
 800cd76:	f7ff fef6 	bl	800cb66 <put_fat>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cd7e:	7ffb      	ldrb	r3, [r7, #31]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d001      	beq.n	800cd88 <remove_chain+0x4a>
 800cd84:	7ffb      	ldrb	r3, [r7, #31]
 800cd86:	e03b      	b.n	800ce00 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cd88:	68b9      	ldr	r1, [r7, #8]
 800cd8a:	68f8      	ldr	r0, [r7, #12]
 800cd8c:	f7ff fe43 	bl	800ca16 <get_fat>
 800cd90:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d031      	beq.n	800cdfc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	d101      	bne.n	800cda2 <remove_chain+0x64>
 800cd9e:	2302      	movs	r3, #2
 800cda0:	e02e      	b.n	800ce00 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cda8:	d101      	bne.n	800cdae <remove_chain+0x70>
 800cdaa:	2301      	movs	r3, #1
 800cdac:	e028      	b.n	800ce00 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cdae:	2200      	movs	r2, #0
 800cdb0:	68b9      	ldr	r1, [r7, #8]
 800cdb2:	69b8      	ldr	r0, [r7, #24]
 800cdb4:	f7ff fed7 	bl	800cb66 <put_fat>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cdbc:	7ffb      	ldrb	r3, [r7, #31]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d001      	beq.n	800cdc6 <remove_chain+0x88>
 800cdc2:	7ffb      	ldrb	r3, [r7, #31]
 800cdc4:	e01c      	b.n	800ce00 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	691a      	ldr	r2, [r3, #16]
 800cdca:	69bb      	ldr	r3, [r7, #24]
 800cdcc:	695b      	ldr	r3, [r3, #20]
 800cdce:	3b02      	subs	r3, #2
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d20b      	bcs.n	800cdec <remove_chain+0xae>
			fs->free_clst++;
 800cdd4:	69bb      	ldr	r3, [r7, #24]
 800cdd6:	691b      	ldr	r3, [r3, #16]
 800cdd8:	1c5a      	adds	r2, r3, #1
 800cdda:	69bb      	ldr	r3, [r7, #24]
 800cddc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	791b      	ldrb	r3, [r3, #4]
 800cde2:	f043 0301 	orr.w	r3, r3, #1
 800cde6:	b2da      	uxtb	r2, r3
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cdf0:	69bb      	ldr	r3, [r7, #24]
 800cdf2:	695b      	ldr	r3, [r3, #20]
 800cdf4:	68ba      	ldr	r2, [r7, #8]
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d3c6      	bcc.n	800cd88 <remove_chain+0x4a>
 800cdfa:	e000      	b.n	800cdfe <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cdfc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cdfe:	2300      	movs	r3, #0
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3720      	adds	r7, #32
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b088      	sub	sp, #32
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d10d      	bne.n	800ce3a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	68db      	ldr	r3, [r3, #12]
 800ce22:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d004      	beq.n	800ce34 <create_chain+0x2c>
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	695b      	ldr	r3, [r3, #20]
 800ce2e:	69ba      	ldr	r2, [r7, #24]
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d31b      	bcc.n	800ce6c <create_chain+0x64>
 800ce34:	2301      	movs	r3, #1
 800ce36:	61bb      	str	r3, [r7, #24]
 800ce38:	e018      	b.n	800ce6c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ce3a:	6839      	ldr	r1, [r7, #0]
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f7ff fdea 	bl	800ca16 <get_fat>
 800ce42:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	d801      	bhi.n	800ce4e <create_chain+0x46>
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	e070      	b.n	800cf30 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce54:	d101      	bne.n	800ce5a <create_chain+0x52>
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	e06a      	b.n	800cf30 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	695b      	ldr	r3, [r3, #20]
 800ce5e:	68fa      	ldr	r2, [r7, #12]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d201      	bcs.n	800ce68 <create_chain+0x60>
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	e063      	b.n	800cf30 <create_chain+0x128>
		scl = clst;
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ce6c:	69bb      	ldr	r3, [r7, #24]
 800ce6e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	3301      	adds	r3, #1
 800ce74:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	695b      	ldr	r3, [r3, #20]
 800ce7a:	69fa      	ldr	r2, [r7, #28]
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d307      	bcc.n	800ce90 <create_chain+0x88>
				ncl = 2;
 800ce80:	2302      	movs	r3, #2
 800ce82:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ce84:	69fa      	ldr	r2, [r7, #28]
 800ce86:	69bb      	ldr	r3, [r7, #24]
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d901      	bls.n	800ce90 <create_chain+0x88>
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	e04f      	b.n	800cf30 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ce90:	69f9      	ldr	r1, [r7, #28]
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f7ff fdbf 	bl	800ca16 <get_fat>
 800ce98:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d00e      	beq.n	800cebe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	d003      	beq.n	800ceae <create_chain+0xa6>
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceac:	d101      	bne.n	800ceb2 <create_chain+0xaa>
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	e03e      	b.n	800cf30 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ceb2:	69fa      	ldr	r2, [r7, #28]
 800ceb4:	69bb      	ldr	r3, [r7, #24]
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d1da      	bne.n	800ce70 <create_chain+0x68>
 800ceba:	2300      	movs	r3, #0
 800cebc:	e038      	b.n	800cf30 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cebe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cec0:	f04f 32ff 	mov.w	r2, #4294967295
 800cec4:	69f9      	ldr	r1, [r7, #28]
 800cec6:	6938      	ldr	r0, [r7, #16]
 800cec8:	f7ff fe4d 	bl	800cb66 <put_fat>
 800cecc:	4603      	mov	r3, r0
 800cece:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ced0:	7dfb      	ldrb	r3, [r7, #23]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d109      	bne.n	800ceea <create_chain+0xe2>
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d006      	beq.n	800ceea <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cedc:	69fa      	ldr	r2, [r7, #28]
 800cede:	6839      	ldr	r1, [r7, #0]
 800cee0:	6938      	ldr	r0, [r7, #16]
 800cee2:	f7ff fe40 	bl	800cb66 <put_fat>
 800cee6:	4603      	mov	r3, r0
 800cee8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ceea:	7dfb      	ldrb	r3, [r7, #23]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d116      	bne.n	800cf1e <create_chain+0x116>
		fs->last_clst = ncl;
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	69fa      	ldr	r2, [r7, #28]
 800cef4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	691a      	ldr	r2, [r3, #16]
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	695b      	ldr	r3, [r3, #20]
 800cefe:	3b02      	subs	r3, #2
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d804      	bhi.n	800cf0e <create_chain+0x106>
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	691b      	ldr	r3, [r3, #16]
 800cf08:	1e5a      	subs	r2, r3, #1
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	791b      	ldrb	r3, [r3, #4]
 800cf12:	f043 0301 	orr.w	r3, r3, #1
 800cf16:	b2da      	uxtb	r2, r3
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	711a      	strb	r2, [r3, #4]
 800cf1c:	e007      	b.n	800cf2e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cf1e:	7dfb      	ldrb	r3, [r7, #23]
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d102      	bne.n	800cf2a <create_chain+0x122>
 800cf24:	f04f 33ff 	mov.w	r3, #4294967295
 800cf28:	e000      	b.n	800cf2c <create_chain+0x124>
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cf2e:	69fb      	ldr	r3, [r7, #28]
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3720      	adds	r7, #32
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}

0800cf38 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b087      	sub	sp, #28
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf4c:	3304      	adds	r3, #4
 800cf4e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	0a5b      	lsrs	r3, r3, #9
 800cf54:	68fa      	ldr	r2, [r7, #12]
 800cf56:	8952      	ldrh	r2, [r2, #10]
 800cf58:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf5c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	1d1a      	adds	r2, r3, #4
 800cf62:	613a      	str	r2, [r7, #16]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d101      	bne.n	800cf72 <clmt_clust+0x3a>
 800cf6e:	2300      	movs	r3, #0
 800cf70:	e010      	b.n	800cf94 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800cf72:	697a      	ldr	r2, [r7, #20]
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d307      	bcc.n	800cf8a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800cf7a:	697a      	ldr	r2, [r7, #20]
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	1ad3      	subs	r3, r2, r3
 800cf80:	617b      	str	r3, [r7, #20]
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	3304      	adds	r3, #4
 800cf86:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cf88:	e7e9      	b.n	800cf5e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800cf8a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	681a      	ldr	r2, [r3, #0]
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	4413      	add	r3, r2
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	371c      	adds	r7, #28
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr

0800cfa0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b086      	sub	sp, #24
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cfb6:	d204      	bcs.n	800cfc2 <dir_sdi+0x22>
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	f003 031f 	and.w	r3, r3, #31
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d001      	beq.n	800cfc6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800cfc2:	2302      	movs	r3, #2
 800cfc4:	e063      	b.n	800d08e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	683a      	ldr	r2, [r7, #0]
 800cfca:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	689b      	ldr	r3, [r3, #8]
 800cfd0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d106      	bne.n	800cfe6 <dir_sdi+0x46>
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	2b02      	cmp	r3, #2
 800cfde:	d902      	bls.n	800cfe6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d10c      	bne.n	800d006 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	095b      	lsrs	r3, r3, #5
 800cff0:	693a      	ldr	r2, [r7, #16]
 800cff2:	8912      	ldrh	r2, [r2, #8]
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d301      	bcc.n	800cffc <dir_sdi+0x5c>
 800cff8:	2302      	movs	r3, #2
 800cffa:	e048      	b.n	800d08e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	61da      	str	r2, [r3, #28]
 800d004:	e029      	b.n	800d05a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	895b      	ldrh	r3, [r3, #10]
 800d00a:	025b      	lsls	r3, r3, #9
 800d00c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d00e:	e019      	b.n	800d044 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6979      	ldr	r1, [r7, #20]
 800d014:	4618      	mov	r0, r3
 800d016:	f7ff fcfe 	bl	800ca16 <get_fat>
 800d01a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d022:	d101      	bne.n	800d028 <dir_sdi+0x88>
 800d024:	2301      	movs	r3, #1
 800d026:	e032      	b.n	800d08e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d904      	bls.n	800d038 <dir_sdi+0x98>
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	695b      	ldr	r3, [r3, #20]
 800d032:	697a      	ldr	r2, [r7, #20]
 800d034:	429a      	cmp	r2, r3
 800d036:	d301      	bcc.n	800d03c <dir_sdi+0x9c>
 800d038:	2302      	movs	r3, #2
 800d03a:	e028      	b.n	800d08e <dir_sdi+0xee>
			ofs -= csz;
 800d03c:	683a      	ldr	r2, [r7, #0]
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	1ad3      	subs	r3, r2, r3
 800d042:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d044:	683a      	ldr	r2, [r7, #0]
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	429a      	cmp	r2, r3
 800d04a:	d2e1      	bcs.n	800d010 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d04c:	6979      	ldr	r1, [r7, #20]
 800d04e:	6938      	ldr	r0, [r7, #16]
 800d050:	f7ff fcc2 	bl	800c9d8 <clust2sect>
 800d054:	4602      	mov	r2, r0
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	697a      	ldr	r2, [r7, #20]
 800d05e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	69db      	ldr	r3, [r3, #28]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d101      	bne.n	800d06c <dir_sdi+0xcc>
 800d068:	2302      	movs	r3, #2
 800d06a:	e010      	b.n	800d08e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	69da      	ldr	r2, [r3, #28]
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	0a5b      	lsrs	r3, r3, #9
 800d074:	441a      	add	r2, r3
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d086:	441a      	add	r2, r3
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d08c:	2300      	movs	r3, #0
}
 800d08e:	4618      	mov	r0, r3
 800d090:	3718      	adds	r7, #24
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}

0800d096 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d096:	b580      	push	{r7, lr}
 800d098:	b086      	sub	sp, #24
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	6078      	str	r0, [r7, #4]
 800d09e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	695b      	ldr	r3, [r3, #20]
 800d0aa:	3320      	adds	r3, #32
 800d0ac:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	69db      	ldr	r3, [r3, #28]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d003      	beq.n	800d0be <dir_next+0x28>
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d0bc:	d301      	bcc.n	800d0c2 <dir_next+0x2c>
 800d0be:	2304      	movs	r3, #4
 800d0c0:	e0aa      	b.n	800d218 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	f040 8098 	bne.w	800d1fe <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	69db      	ldr	r3, [r3, #28]
 800d0d2:	1c5a      	adds	r2, r3, #1
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	699b      	ldr	r3, [r3, #24]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d10b      	bne.n	800d0f8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	095b      	lsrs	r3, r3, #5
 800d0e4:	68fa      	ldr	r2, [r7, #12]
 800d0e6:	8912      	ldrh	r2, [r2, #8]
 800d0e8:	4293      	cmp	r3, r2
 800d0ea:	f0c0 8088 	bcc.w	800d1fe <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	61da      	str	r2, [r3, #28]
 800d0f4:	2304      	movs	r3, #4
 800d0f6:	e08f      	b.n	800d218 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	0a5b      	lsrs	r3, r3, #9
 800d0fc:	68fa      	ldr	r2, [r7, #12]
 800d0fe:	8952      	ldrh	r2, [r2, #10]
 800d100:	3a01      	subs	r2, #1
 800d102:	4013      	ands	r3, r2
 800d104:	2b00      	cmp	r3, #0
 800d106:	d17a      	bne.n	800d1fe <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d108:	687a      	ldr	r2, [r7, #4]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	699b      	ldr	r3, [r3, #24]
 800d10e:	4619      	mov	r1, r3
 800d110:	4610      	mov	r0, r2
 800d112:	f7ff fc80 	bl	800ca16 <get_fat>
 800d116:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	2b01      	cmp	r3, #1
 800d11c:	d801      	bhi.n	800d122 <dir_next+0x8c>
 800d11e:	2302      	movs	r3, #2
 800d120:	e07a      	b.n	800d218 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d128:	d101      	bne.n	800d12e <dir_next+0x98>
 800d12a:	2301      	movs	r3, #1
 800d12c:	e074      	b.n	800d218 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	695b      	ldr	r3, [r3, #20]
 800d132:	697a      	ldr	r2, [r7, #20]
 800d134:	429a      	cmp	r2, r3
 800d136:	d358      	bcc.n	800d1ea <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d104      	bne.n	800d148 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	61da      	str	r2, [r3, #28]
 800d144:	2304      	movs	r3, #4
 800d146:	e067      	b.n	800d218 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d148:	687a      	ldr	r2, [r7, #4]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	699b      	ldr	r3, [r3, #24]
 800d14e:	4619      	mov	r1, r3
 800d150:	4610      	mov	r0, r2
 800d152:	f7ff fe59 	bl	800ce08 <create_chain>
 800d156:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d101      	bne.n	800d162 <dir_next+0xcc>
 800d15e:	2307      	movs	r3, #7
 800d160:	e05a      	b.n	800d218 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	2b01      	cmp	r3, #1
 800d166:	d101      	bne.n	800d16c <dir_next+0xd6>
 800d168:	2302      	movs	r3, #2
 800d16a:	e055      	b.n	800d218 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d172:	d101      	bne.n	800d178 <dir_next+0xe2>
 800d174:	2301      	movs	r3, #1
 800d176:	e04f      	b.n	800d218 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d178:	68f8      	ldr	r0, [r7, #12]
 800d17a:	f7ff fb4d 	bl	800c818 <sync_window>
 800d17e:	4603      	mov	r3, r0
 800d180:	2b00      	cmp	r3, #0
 800d182:	d001      	beq.n	800d188 <dir_next+0xf2>
 800d184:	2301      	movs	r3, #1
 800d186:	e047      	b.n	800d218 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	3330      	adds	r3, #48	; 0x30
 800d18c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d190:	2100      	movs	r1, #0
 800d192:	4618      	mov	r0, r3
 800d194:	f7ff f977 	bl	800c486 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d198:	2300      	movs	r3, #0
 800d19a:	613b      	str	r3, [r7, #16]
 800d19c:	6979      	ldr	r1, [r7, #20]
 800d19e:	68f8      	ldr	r0, [r7, #12]
 800d1a0:	f7ff fc1a 	bl	800c9d8 <clust2sect>
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	62da      	str	r2, [r3, #44]	; 0x2c
 800d1aa:	e012      	b.n	800d1d2 <dir_next+0x13c>
						fs->wflag = 1;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d1b2:	68f8      	ldr	r0, [r7, #12]
 800d1b4:	f7ff fb30 	bl	800c818 <sync_window>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d001      	beq.n	800d1c2 <dir_next+0x12c>
 800d1be:	2301      	movs	r3, #1
 800d1c0:	e02a      	b.n	800d218 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	613b      	str	r3, [r7, #16]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1cc:	1c5a      	adds	r2, r3, #1
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	62da      	str	r2, [r3, #44]	; 0x2c
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	895b      	ldrh	r3, [r3, #10]
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d3e6      	bcc.n	800d1ac <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	1ad2      	subs	r2, r2, r3
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	697a      	ldr	r2, [r7, #20]
 800d1ee:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d1f0:	6979      	ldr	r1, [r7, #20]
 800d1f2:	68f8      	ldr	r0, [r7, #12]
 800d1f4:	f7ff fbf0 	bl	800c9d8 <clust2sect>
 800d1f8:	4602      	mov	r2, r0
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	68ba      	ldr	r2, [r7, #8]
 800d202:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d210:	441a      	add	r2, r3
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d216:	2300      	movs	r3, #0
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3718      	adds	r7, #24
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b086      	sub	sp, #24
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d230:	2100      	movs	r1, #0
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f7ff feb4 	bl	800cfa0 <dir_sdi>
 800d238:	4603      	mov	r3, r0
 800d23a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d23c:	7dfb      	ldrb	r3, [r7, #23]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d12b      	bne.n	800d29a <dir_alloc+0x7a>
		n = 0;
 800d242:	2300      	movs	r3, #0
 800d244:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	69db      	ldr	r3, [r3, #28]
 800d24a:	4619      	mov	r1, r3
 800d24c:	68f8      	ldr	r0, [r7, #12]
 800d24e:	f7ff fb27 	bl	800c8a0 <move_window>
 800d252:	4603      	mov	r3, r0
 800d254:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d256:	7dfb      	ldrb	r3, [r7, #23]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d11d      	bne.n	800d298 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6a1b      	ldr	r3, [r3, #32]
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	2be5      	cmp	r3, #229	; 0xe5
 800d264:	d004      	beq.n	800d270 <dir_alloc+0x50>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6a1b      	ldr	r3, [r3, #32]
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d107      	bne.n	800d280 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	3301      	adds	r3, #1
 800d274:	613b      	str	r3, [r7, #16]
 800d276:	693a      	ldr	r2, [r7, #16]
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d102      	bne.n	800d284 <dir_alloc+0x64>
 800d27e:	e00c      	b.n	800d29a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d280:	2300      	movs	r3, #0
 800d282:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d284:	2101      	movs	r1, #1
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f7ff ff05 	bl	800d096 <dir_next>
 800d28c:	4603      	mov	r3, r0
 800d28e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d290:	7dfb      	ldrb	r3, [r7, #23]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d0d7      	beq.n	800d246 <dir_alloc+0x26>
 800d296:	e000      	b.n	800d29a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d298:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d29a:	7dfb      	ldrb	r3, [r7, #23]
 800d29c:	2b04      	cmp	r3, #4
 800d29e:	d101      	bne.n	800d2a4 <dir_alloc+0x84>
 800d2a0:	2307      	movs	r3, #7
 800d2a2:	75fb      	strb	r3, [r7, #23]
	return res;
 800d2a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3718      	adds	r7, #24
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}

0800d2ae <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d2ae:	b580      	push	{r7, lr}
 800d2b0:	b084      	sub	sp, #16
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	6078      	str	r0, [r7, #4]
 800d2b6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	331a      	adds	r3, #26
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7ff f83f 	bl	800c340 <ld_word>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	2b03      	cmp	r3, #3
 800d2cc:	d109      	bne.n	800d2e2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	3314      	adds	r3, #20
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7ff f834 	bl	800c340 <ld_word>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	041b      	lsls	r3, r3, #16
 800d2dc:	68fa      	ldr	r2, [r7, #12]
 800d2de:	4313      	orrs	r3, r2
 800d2e0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3710      	adds	r7, #16
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	331a      	adds	r3, #26
 800d2fc:	687a      	ldr	r2, [r7, #4]
 800d2fe:	b292      	uxth	r2, r2
 800d300:	4611      	mov	r1, r2
 800d302:	4618      	mov	r0, r3
 800d304:	f7ff f857 	bl	800c3b6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	2b03      	cmp	r3, #3
 800d30e:	d109      	bne.n	800d324 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	f103 0214 	add.w	r2, r3, #20
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	0c1b      	lsrs	r3, r3, #16
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	4619      	mov	r1, r3
 800d31e:	4610      	mov	r0, r2
 800d320:	f7ff f849 	bl	800c3b6 <st_word>
	}
}
 800d324:	bf00      	nop
 800d326:	3710      	adds	r7, #16
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b086      	sub	sp, #24
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d33a:	2100      	movs	r1, #0
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f7ff fe2f 	bl	800cfa0 <dir_sdi>
 800d342:	4603      	mov	r3, r0
 800d344:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d346:	7dfb      	ldrb	r3, [r7, #23]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d001      	beq.n	800d350 <dir_find+0x24>
 800d34c:	7dfb      	ldrb	r3, [r7, #23]
 800d34e:	e03e      	b.n	800d3ce <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	69db      	ldr	r3, [r3, #28]
 800d354:	4619      	mov	r1, r3
 800d356:	6938      	ldr	r0, [r7, #16]
 800d358:	f7ff faa2 	bl	800c8a0 <move_window>
 800d35c:	4603      	mov	r3, r0
 800d35e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d360:	7dfb      	ldrb	r3, [r7, #23]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d12f      	bne.n	800d3c6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6a1b      	ldr	r3, [r3, #32]
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d36e:	7bfb      	ldrb	r3, [r7, #15]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d102      	bne.n	800d37a <dir_find+0x4e>
 800d374:	2304      	movs	r3, #4
 800d376:	75fb      	strb	r3, [r7, #23]
 800d378:	e028      	b.n	800d3cc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6a1b      	ldr	r3, [r3, #32]
 800d37e:	330b      	adds	r3, #11
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d386:	b2da      	uxtb	r2, r3
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6a1b      	ldr	r3, [r3, #32]
 800d390:	330b      	adds	r3, #11
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	f003 0308 	and.w	r3, r3, #8
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d10a      	bne.n	800d3b2 <dir_find+0x86>
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6a18      	ldr	r0, [r3, #32]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	3324      	adds	r3, #36	; 0x24
 800d3a4:	220b      	movs	r2, #11
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	f7ff f888 	bl	800c4bc <mem_cmp>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d00b      	beq.n	800d3ca <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d3b2:	2100      	movs	r1, #0
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f7ff fe6e 	bl	800d096 <dir_next>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d3be:	7dfb      	ldrb	r3, [r7, #23]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d0c5      	beq.n	800d350 <dir_find+0x24>
 800d3c4:	e002      	b.n	800d3cc <dir_find+0xa0>
		if (res != FR_OK) break;
 800d3c6:	bf00      	nop
 800d3c8:	e000      	b.n	800d3cc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d3ca:	bf00      	nop

	return res;
 800d3cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3718      	adds	r7, #24
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}

0800d3d6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d3d6:	b580      	push	{r7, lr}
 800d3d8:	b084      	sub	sp, #16
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d3e4:	2101      	movs	r1, #1
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f7ff ff1a 	bl	800d220 <dir_alloc>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d3f0:	7bfb      	ldrb	r3, [r7, #15]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d11c      	bne.n	800d430 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	69db      	ldr	r3, [r3, #28]
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	68b8      	ldr	r0, [r7, #8]
 800d3fe:	f7ff fa4f 	bl	800c8a0 <move_window>
 800d402:	4603      	mov	r3, r0
 800d404:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d406:	7bfb      	ldrb	r3, [r7, #15]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d111      	bne.n	800d430 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6a1b      	ldr	r3, [r3, #32]
 800d410:	2220      	movs	r2, #32
 800d412:	2100      	movs	r1, #0
 800d414:	4618      	mov	r0, r3
 800d416:	f7ff f836 	bl	800c486 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6a18      	ldr	r0, [r3, #32]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	3324      	adds	r3, #36	; 0x24
 800d422:	220b      	movs	r2, #11
 800d424:	4619      	mov	r1, r3
 800d426:	f7ff f80d 	bl	800c444 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	2201      	movs	r2, #1
 800d42e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d430:	7bfb      	ldrb	r3, [r7, #15]
}
 800d432:	4618      	mov	r0, r3
 800d434:	3710      	adds	r7, #16
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
	...

0800d43c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b088      	sub	sp, #32
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	60fb      	str	r3, [r7, #12]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	3324      	adds	r3, #36	; 0x24
 800d450:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d452:	220b      	movs	r2, #11
 800d454:	2120      	movs	r1, #32
 800d456:	68b8      	ldr	r0, [r7, #8]
 800d458:	f7ff f815 	bl	800c486 <mem_set>
	si = i = 0; ni = 8;
 800d45c:	2300      	movs	r3, #0
 800d45e:	613b      	str	r3, [r7, #16]
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	61fb      	str	r3, [r7, #28]
 800d464:	2308      	movs	r3, #8
 800d466:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d468:	69fb      	ldr	r3, [r7, #28]
 800d46a:	1c5a      	adds	r2, r3, #1
 800d46c:	61fa      	str	r2, [r7, #28]
 800d46e:	68fa      	ldr	r2, [r7, #12]
 800d470:	4413      	add	r3, r2
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d476:	7efb      	ldrb	r3, [r7, #27]
 800d478:	2b20      	cmp	r3, #32
 800d47a:	d94e      	bls.n	800d51a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d47c:	7efb      	ldrb	r3, [r7, #27]
 800d47e:	2b2f      	cmp	r3, #47	; 0x2f
 800d480:	d006      	beq.n	800d490 <create_name+0x54>
 800d482:	7efb      	ldrb	r3, [r7, #27]
 800d484:	2b5c      	cmp	r3, #92	; 0x5c
 800d486:	d110      	bne.n	800d4aa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d488:	e002      	b.n	800d490 <create_name+0x54>
 800d48a:	69fb      	ldr	r3, [r7, #28]
 800d48c:	3301      	adds	r3, #1
 800d48e:	61fb      	str	r3, [r7, #28]
 800d490:	68fa      	ldr	r2, [r7, #12]
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	4413      	add	r3, r2
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	2b2f      	cmp	r3, #47	; 0x2f
 800d49a:	d0f6      	beq.n	800d48a <create_name+0x4e>
 800d49c:	68fa      	ldr	r2, [r7, #12]
 800d49e:	69fb      	ldr	r3, [r7, #28]
 800d4a0:	4413      	add	r3, r2
 800d4a2:	781b      	ldrb	r3, [r3, #0]
 800d4a4:	2b5c      	cmp	r3, #92	; 0x5c
 800d4a6:	d0f0      	beq.n	800d48a <create_name+0x4e>
			break;
 800d4a8:	e038      	b.n	800d51c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d4aa:	7efb      	ldrb	r3, [r7, #27]
 800d4ac:	2b2e      	cmp	r3, #46	; 0x2e
 800d4ae:	d003      	beq.n	800d4b8 <create_name+0x7c>
 800d4b0:	693a      	ldr	r2, [r7, #16]
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d30c      	bcc.n	800d4d2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	2b0b      	cmp	r3, #11
 800d4bc:	d002      	beq.n	800d4c4 <create_name+0x88>
 800d4be:	7efb      	ldrb	r3, [r7, #27]
 800d4c0:	2b2e      	cmp	r3, #46	; 0x2e
 800d4c2:	d001      	beq.n	800d4c8 <create_name+0x8c>
 800d4c4:	2306      	movs	r3, #6
 800d4c6:	e044      	b.n	800d552 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d4c8:	2308      	movs	r3, #8
 800d4ca:	613b      	str	r3, [r7, #16]
 800d4cc:	230b      	movs	r3, #11
 800d4ce:	617b      	str	r3, [r7, #20]
			continue;
 800d4d0:	e022      	b.n	800d518 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d4d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	da04      	bge.n	800d4e4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d4da:	7efb      	ldrb	r3, [r7, #27]
 800d4dc:	3b80      	subs	r3, #128	; 0x80
 800d4de:	4a1f      	ldr	r2, [pc, #124]	; (800d55c <create_name+0x120>)
 800d4e0:	5cd3      	ldrb	r3, [r2, r3]
 800d4e2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d4e4:	7efb      	ldrb	r3, [r7, #27]
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	481d      	ldr	r0, [pc, #116]	; (800d560 <create_name+0x124>)
 800d4ea:	f7ff f80e 	bl	800c50a <chk_chr>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d001      	beq.n	800d4f8 <create_name+0xbc>
 800d4f4:	2306      	movs	r3, #6
 800d4f6:	e02c      	b.n	800d552 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d4f8:	7efb      	ldrb	r3, [r7, #27]
 800d4fa:	2b60      	cmp	r3, #96	; 0x60
 800d4fc:	d905      	bls.n	800d50a <create_name+0xce>
 800d4fe:	7efb      	ldrb	r3, [r7, #27]
 800d500:	2b7a      	cmp	r3, #122	; 0x7a
 800d502:	d802      	bhi.n	800d50a <create_name+0xce>
 800d504:	7efb      	ldrb	r3, [r7, #27]
 800d506:	3b20      	subs	r3, #32
 800d508:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	1c5a      	adds	r2, r3, #1
 800d50e:	613a      	str	r2, [r7, #16]
 800d510:	68ba      	ldr	r2, [r7, #8]
 800d512:	4413      	add	r3, r2
 800d514:	7efa      	ldrb	r2, [r7, #27]
 800d516:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d518:	e7a6      	b.n	800d468 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d51a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d51c:	68fa      	ldr	r2, [r7, #12]
 800d51e:	69fb      	ldr	r3, [r7, #28]
 800d520:	441a      	add	r2, r3
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d101      	bne.n	800d530 <create_name+0xf4>
 800d52c:	2306      	movs	r3, #6
 800d52e:	e010      	b.n	800d552 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	781b      	ldrb	r3, [r3, #0]
 800d534:	2be5      	cmp	r3, #229	; 0xe5
 800d536:	d102      	bne.n	800d53e <create_name+0x102>
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	2205      	movs	r2, #5
 800d53c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d53e:	7efb      	ldrb	r3, [r7, #27]
 800d540:	2b20      	cmp	r3, #32
 800d542:	d801      	bhi.n	800d548 <create_name+0x10c>
 800d544:	2204      	movs	r2, #4
 800d546:	e000      	b.n	800d54a <create_name+0x10e>
 800d548:	2200      	movs	r2, #0
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	330b      	adds	r3, #11
 800d54e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d550:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d552:	4618      	mov	r0, r3
 800d554:	3720      	adds	r7, #32
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
 800d55a:	bf00      	nop
 800d55c:	0800f2dc 	.word	0x0800f2dc
 800d560:	0800f204 	.word	0x0800f204

0800d564 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b086      	sub	sp, #24
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d578:	e002      	b.n	800d580 <follow_path+0x1c>
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	3301      	adds	r3, #1
 800d57e:	603b      	str	r3, [r7, #0]
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	781b      	ldrb	r3, [r3, #0]
 800d584:	2b2f      	cmp	r3, #47	; 0x2f
 800d586:	d0f8      	beq.n	800d57a <follow_path+0x16>
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	2b5c      	cmp	r3, #92	; 0x5c
 800d58e:	d0f4      	beq.n	800d57a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	2200      	movs	r2, #0
 800d594:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	2b1f      	cmp	r3, #31
 800d59c:	d80a      	bhi.n	800d5b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2280      	movs	r2, #128	; 0x80
 800d5a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d5a6:	2100      	movs	r1, #0
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f7ff fcf9 	bl	800cfa0 <dir_sdi>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	75fb      	strb	r3, [r7, #23]
 800d5b2:	e043      	b.n	800d63c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d5b4:	463b      	mov	r3, r7
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f7ff ff3f 	bl	800d43c <create_name>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d5c2:	7dfb      	ldrb	r3, [r7, #23]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d134      	bne.n	800d632 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f7ff feaf 	bl	800d32c <dir_find>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d5d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d5da:	7dfb      	ldrb	r3, [r7, #23]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d00a      	beq.n	800d5f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d5e0:	7dfb      	ldrb	r3, [r7, #23]
 800d5e2:	2b04      	cmp	r3, #4
 800d5e4:	d127      	bne.n	800d636 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d5e6:	7afb      	ldrb	r3, [r7, #11]
 800d5e8:	f003 0304 	and.w	r3, r3, #4
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d122      	bne.n	800d636 <follow_path+0xd2>
 800d5f0:	2305      	movs	r3, #5
 800d5f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d5f4:	e01f      	b.n	800d636 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d5f6:	7afb      	ldrb	r3, [r7, #11]
 800d5f8:	f003 0304 	and.w	r3, r3, #4
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d11c      	bne.n	800d63a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	799b      	ldrb	r3, [r3, #6]
 800d604:	f003 0310 	and.w	r3, r3, #16
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d102      	bne.n	800d612 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d60c:	2305      	movs	r3, #5
 800d60e:	75fb      	strb	r3, [r7, #23]
 800d610:	e014      	b.n	800d63c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	695b      	ldr	r3, [r3, #20]
 800d61c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d620:	4413      	add	r3, r2
 800d622:	4619      	mov	r1, r3
 800d624:	68f8      	ldr	r0, [r7, #12]
 800d626:	f7ff fe42 	bl	800d2ae <ld_clust>
 800d62a:	4602      	mov	r2, r0
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d630:	e7c0      	b.n	800d5b4 <follow_path+0x50>
			if (res != FR_OK) break;
 800d632:	bf00      	nop
 800d634:	e002      	b.n	800d63c <follow_path+0xd8>
				break;
 800d636:	bf00      	nop
 800d638:	e000      	b.n	800d63c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d63a:	bf00      	nop
			}
		}
	}

	return res;
 800d63c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d63e:	4618      	mov	r0, r3
 800d640:	3718      	adds	r7, #24
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}

0800d646 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d646:	b480      	push	{r7}
 800d648:	b087      	sub	sp, #28
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d64e:	f04f 33ff 	mov.w	r3, #4294967295
 800d652:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d031      	beq.n	800d6c0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	617b      	str	r3, [r7, #20]
 800d662:	e002      	b.n	800d66a <get_ldnumber+0x24>
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	3301      	adds	r3, #1
 800d668:	617b      	str	r3, [r7, #20]
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	2b20      	cmp	r3, #32
 800d670:	d903      	bls.n	800d67a <get_ldnumber+0x34>
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	2b3a      	cmp	r3, #58	; 0x3a
 800d678:	d1f4      	bne.n	800d664 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	2b3a      	cmp	r3, #58	; 0x3a
 800d680:	d11c      	bne.n	800d6bc <get_ldnumber+0x76>
			tp = *path;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	1c5a      	adds	r2, r3, #1
 800d68c:	60fa      	str	r2, [r7, #12]
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	3b30      	subs	r3, #48	; 0x30
 800d692:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	2b09      	cmp	r3, #9
 800d698:	d80e      	bhi.n	800d6b8 <get_ldnumber+0x72>
 800d69a:	68fa      	ldr	r2, [r7, #12]
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d10a      	bne.n	800d6b8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d107      	bne.n	800d6b8 <get_ldnumber+0x72>
					vol = (int)i;
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	3301      	adds	r3, #1
 800d6b0:	617b      	str	r3, [r7, #20]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	697a      	ldr	r2, [r7, #20]
 800d6b6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d6b8:	693b      	ldr	r3, [r7, #16]
 800d6ba:	e002      	b.n	800d6c2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d6bc:	2300      	movs	r3, #0
 800d6be:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d6c0:	693b      	ldr	r3, [r7, #16]
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	371c      	adds	r7, #28
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6cc:	4770      	bx	lr
	...

0800d6d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	70da      	strb	r2, [r3, #3]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d6e6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d6e8:	6839      	ldr	r1, [r7, #0]
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f7ff f8d8 	bl	800c8a0 <move_window>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d001      	beq.n	800d6fa <check_fs+0x2a>
 800d6f6:	2304      	movs	r3, #4
 800d6f8:	e038      	b.n	800d76c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	3330      	adds	r3, #48	; 0x30
 800d6fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d702:	4618      	mov	r0, r3
 800d704:	f7fe fe1c 	bl	800c340 <ld_word>
 800d708:	4603      	mov	r3, r0
 800d70a:	461a      	mov	r2, r3
 800d70c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d710:	429a      	cmp	r2, r3
 800d712:	d001      	beq.n	800d718 <check_fs+0x48>
 800d714:	2303      	movs	r3, #3
 800d716:	e029      	b.n	800d76c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d71e:	2be9      	cmp	r3, #233	; 0xe9
 800d720:	d009      	beq.n	800d736 <check_fs+0x66>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d728:	2beb      	cmp	r3, #235	; 0xeb
 800d72a:	d11e      	bne.n	800d76a <check_fs+0x9a>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d732:	2b90      	cmp	r3, #144	; 0x90
 800d734:	d119      	bne.n	800d76a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	3330      	adds	r3, #48	; 0x30
 800d73a:	3336      	adds	r3, #54	; 0x36
 800d73c:	4618      	mov	r0, r3
 800d73e:	f7fe fe17 	bl	800c370 <ld_dword>
 800d742:	4603      	mov	r3, r0
 800d744:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d748:	4a0a      	ldr	r2, [pc, #40]	; (800d774 <check_fs+0xa4>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d101      	bne.n	800d752 <check_fs+0x82>
 800d74e:	2300      	movs	r3, #0
 800d750:	e00c      	b.n	800d76c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	3330      	adds	r3, #48	; 0x30
 800d756:	3352      	adds	r3, #82	; 0x52
 800d758:	4618      	mov	r0, r3
 800d75a:	f7fe fe09 	bl	800c370 <ld_dword>
 800d75e:	4603      	mov	r3, r0
 800d760:	4a05      	ldr	r2, [pc, #20]	; (800d778 <check_fs+0xa8>)
 800d762:	4293      	cmp	r3, r2
 800d764:	d101      	bne.n	800d76a <check_fs+0x9a>
 800d766:	2300      	movs	r3, #0
 800d768:	e000      	b.n	800d76c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d76a:	2302      	movs	r3, #2
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3708      	adds	r7, #8
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}
 800d774:	00544146 	.word	0x00544146
 800d778:	33544146 	.word	0x33544146

0800d77c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b096      	sub	sp, #88	; 0x58
 800d780:	af00      	add	r7, sp, #0
 800d782:	60f8      	str	r0, [r7, #12]
 800d784:	60b9      	str	r1, [r7, #8]
 800d786:	4613      	mov	r3, r2
 800d788:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	2200      	movs	r2, #0
 800d78e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d790:	68f8      	ldr	r0, [r7, #12]
 800d792:	f7ff ff58 	bl	800d646 <get_ldnumber>
 800d796:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	da01      	bge.n	800d7a2 <find_volume+0x26>
 800d79e:	230b      	movs	r3, #11
 800d7a0:	e22d      	b.n	800dbfe <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d7a2:	4aa1      	ldr	r2, [pc, #644]	; (800da28 <find_volume+0x2ac>)
 800d7a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7aa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d101      	bne.n	800d7b6 <find_volume+0x3a>
 800d7b2:	230c      	movs	r3, #12
 800d7b4:	e223      	b.n	800dbfe <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d7bc:	79fb      	ldrb	r3, [r7, #7]
 800d7be:	f023 0301 	bic.w	r3, r3, #1
 800d7c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c6:	781b      	ldrb	r3, [r3, #0]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d01a      	beq.n	800d802 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ce:	785b      	ldrb	r3, [r3, #1]
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7fe fd17 	bl	800c204 <disk_status>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d7dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d7e0:	f003 0301 	and.w	r3, r3, #1
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d10c      	bne.n	800d802 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d7e8:	79fb      	ldrb	r3, [r7, #7]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d007      	beq.n	800d7fe <find_volume+0x82>
 800d7ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d7f2:	f003 0304 	and.w	r3, r3, #4
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d001      	beq.n	800d7fe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d7fa:	230a      	movs	r3, #10
 800d7fc:	e1ff      	b.n	800dbfe <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800d7fe:	2300      	movs	r3, #0
 800d800:	e1fd      	b.n	800dbfe <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d804:	2200      	movs	r2, #0
 800d806:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d80a:	b2da      	uxtb	r2, r3
 800d80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d80e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d812:	785b      	ldrb	r3, [r3, #1]
 800d814:	4618      	mov	r0, r3
 800d816:	f7fe fd0f 	bl	800c238 <disk_initialize>
 800d81a:	4603      	mov	r3, r0
 800d81c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d820:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d824:	f003 0301 	and.w	r3, r3, #1
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d001      	beq.n	800d830 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d82c:	2303      	movs	r3, #3
 800d82e:	e1e6      	b.n	800dbfe <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d830:	79fb      	ldrb	r3, [r7, #7]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d007      	beq.n	800d846 <find_volume+0xca>
 800d836:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d83a:	f003 0304 	and.w	r3, r3, #4
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d001      	beq.n	800d846 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d842:	230a      	movs	r3, #10
 800d844:	e1db      	b.n	800dbfe <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d846:	2300      	movs	r3, #0
 800d848:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d84a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d84c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d84e:	f7ff ff3f 	bl	800d6d0 <check_fs>
 800d852:	4603      	mov	r3, r0
 800d854:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d858:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d85c:	2b02      	cmp	r3, #2
 800d85e:	d149      	bne.n	800d8f4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d860:	2300      	movs	r3, #0
 800d862:	643b      	str	r3, [r7, #64]	; 0x40
 800d864:	e01e      	b.n	800d8a4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d868:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d86c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d86e:	011b      	lsls	r3, r3, #4
 800d870:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d874:	4413      	add	r3, r2
 800d876:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d87a:	3304      	adds	r3, #4
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d006      	beq.n	800d890 <find_volume+0x114>
 800d882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d884:	3308      	adds	r3, #8
 800d886:	4618      	mov	r0, r3
 800d888:	f7fe fd72 	bl	800c370 <ld_dword>
 800d88c:	4602      	mov	r2, r0
 800d88e:	e000      	b.n	800d892 <find_volume+0x116>
 800d890:	2200      	movs	r2, #0
 800d892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d894:	009b      	lsls	r3, r3, #2
 800d896:	3358      	adds	r3, #88	; 0x58
 800d898:	443b      	add	r3, r7
 800d89a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d89e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8a0:	3301      	adds	r3, #1
 800d8a2:	643b      	str	r3, [r7, #64]	; 0x40
 800d8a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8a6:	2b03      	cmp	r3, #3
 800d8a8:	d9dd      	bls.n	800d866 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d8ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d002      	beq.n	800d8ba <find_volume+0x13e>
 800d8b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8b6:	3b01      	subs	r3, #1
 800d8b8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d8ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	3358      	adds	r3, #88	; 0x58
 800d8c0:	443b      	add	r3, r7
 800d8c2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d8c6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d8c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d005      	beq.n	800d8da <find_volume+0x15e>
 800d8ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d8d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d8d2:	f7ff fefd 	bl	800d6d0 <check_fs>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	e000      	b.n	800d8dc <find_volume+0x160>
 800d8da:	2303      	movs	r3, #3
 800d8dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d8e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d905      	bls.n	800d8f4 <find_volume+0x178>
 800d8e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8ea:	3301      	adds	r3, #1
 800d8ec:	643b      	str	r3, [r7, #64]	; 0x40
 800d8ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8f0:	2b03      	cmp	r3, #3
 800d8f2:	d9e2      	bls.n	800d8ba <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d8f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d8f8:	2b04      	cmp	r3, #4
 800d8fa:	d101      	bne.n	800d900 <find_volume+0x184>
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	e17e      	b.n	800dbfe <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d900:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d904:	2b01      	cmp	r3, #1
 800d906:	d901      	bls.n	800d90c <find_volume+0x190>
 800d908:	230d      	movs	r3, #13
 800d90a:	e178      	b.n	800dbfe <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d90e:	3330      	adds	r3, #48	; 0x30
 800d910:	330b      	adds	r3, #11
 800d912:	4618      	mov	r0, r3
 800d914:	f7fe fd14 	bl	800c340 <ld_word>
 800d918:	4603      	mov	r3, r0
 800d91a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d91e:	d001      	beq.n	800d924 <find_volume+0x1a8>
 800d920:	230d      	movs	r3, #13
 800d922:	e16c      	b.n	800dbfe <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d926:	3330      	adds	r3, #48	; 0x30
 800d928:	3316      	adds	r3, #22
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7fe fd08 	bl	800c340 <ld_word>
 800d930:	4603      	mov	r3, r0
 800d932:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d936:	2b00      	cmp	r3, #0
 800d938:	d106      	bne.n	800d948 <find_volume+0x1cc>
 800d93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d93c:	3330      	adds	r3, #48	; 0x30
 800d93e:	3324      	adds	r3, #36	; 0x24
 800d940:	4618      	mov	r0, r3
 800d942:	f7fe fd15 	bl	800c370 <ld_dword>
 800d946:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d94a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d94c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d950:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800d954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d956:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d95a:	789b      	ldrb	r3, [r3, #2]
 800d95c:	2b01      	cmp	r3, #1
 800d95e:	d005      	beq.n	800d96c <find_volume+0x1f0>
 800d960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d962:	789b      	ldrb	r3, [r3, #2]
 800d964:	2b02      	cmp	r3, #2
 800d966:	d001      	beq.n	800d96c <find_volume+0x1f0>
 800d968:	230d      	movs	r3, #13
 800d96a:	e148      	b.n	800dbfe <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d96e:	789b      	ldrb	r3, [r3, #2]
 800d970:	461a      	mov	r2, r3
 800d972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d974:	fb02 f303 	mul.w	r3, r2, r3
 800d978:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d97c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d980:	b29a      	uxth	r2, r3
 800d982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d984:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d988:	895b      	ldrh	r3, [r3, #10]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d008      	beq.n	800d9a0 <find_volume+0x224>
 800d98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d990:	895b      	ldrh	r3, [r3, #10]
 800d992:	461a      	mov	r2, r3
 800d994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d996:	895b      	ldrh	r3, [r3, #10]
 800d998:	3b01      	subs	r3, #1
 800d99a:	4013      	ands	r3, r2
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d001      	beq.n	800d9a4 <find_volume+0x228>
 800d9a0:	230d      	movs	r3, #13
 800d9a2:	e12c      	b.n	800dbfe <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a6:	3330      	adds	r3, #48	; 0x30
 800d9a8:	3311      	adds	r3, #17
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f7fe fcc8 	bl	800c340 <ld_word>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9b6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ba:	891b      	ldrh	r3, [r3, #8]
 800d9bc:	f003 030f 	and.w	r3, r3, #15
 800d9c0:	b29b      	uxth	r3, r3
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d001      	beq.n	800d9ca <find_volume+0x24e>
 800d9c6:	230d      	movs	r3, #13
 800d9c8:	e119      	b.n	800dbfe <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9cc:	3330      	adds	r3, #48	; 0x30
 800d9ce:	3313      	adds	r3, #19
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7fe fcb5 	bl	800c340 <ld_word>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d9da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d106      	bne.n	800d9ee <find_volume+0x272>
 800d9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e2:	3330      	adds	r3, #48	; 0x30
 800d9e4:	3320      	adds	r3, #32
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7fe fcc2 	bl	800c370 <ld_dword>
 800d9ec:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f0:	3330      	adds	r3, #48	; 0x30
 800d9f2:	330e      	adds	r3, #14
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7fe fca3 	bl	800c340 <ld_word>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d9fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800da00:	2b00      	cmp	r3, #0
 800da02:	d101      	bne.n	800da08 <find_volume+0x28c>
 800da04:	230d      	movs	r3, #13
 800da06:	e0fa      	b.n	800dbfe <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800da08:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800da0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da0c:	4413      	add	r3, r2
 800da0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da10:	8912      	ldrh	r2, [r2, #8]
 800da12:	0912      	lsrs	r2, r2, #4
 800da14:	b292      	uxth	r2, r2
 800da16:	4413      	add	r3, r2
 800da18:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800da1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1e:	429a      	cmp	r2, r3
 800da20:	d204      	bcs.n	800da2c <find_volume+0x2b0>
 800da22:	230d      	movs	r3, #13
 800da24:	e0eb      	b.n	800dbfe <find_volume+0x482>
 800da26:	bf00      	nop
 800da28:	20001748 	.word	0x20001748
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800da2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da30:	1ad3      	subs	r3, r2, r3
 800da32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da34:	8952      	ldrh	r2, [r2, #10]
 800da36:	fbb3 f3f2 	udiv	r3, r3, r2
 800da3a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800da3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d101      	bne.n	800da46 <find_volume+0x2ca>
 800da42:	230d      	movs	r3, #13
 800da44:	e0db      	b.n	800dbfe <find_volume+0x482>
		fmt = FS_FAT32;
 800da46:	2303      	movs	r3, #3
 800da48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800da4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800da52:	4293      	cmp	r3, r2
 800da54:	d802      	bhi.n	800da5c <find_volume+0x2e0>
 800da56:	2302      	movs	r3, #2
 800da58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800da5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800da62:	4293      	cmp	r3, r2
 800da64:	d802      	bhi.n	800da6c <find_volume+0x2f0>
 800da66:	2301      	movs	r3, #1
 800da68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800da6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6e:	1c9a      	adds	r2, r3, #2
 800da70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da72:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800da74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da78:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800da7a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800da7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da7e:	441a      	add	r2, r3
 800da80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da82:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800da84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da88:	441a      	add	r2, r3
 800da8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da8c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800da8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da92:	2b03      	cmp	r3, #3
 800da94:	d11e      	bne.n	800dad4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800da96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da98:	3330      	adds	r3, #48	; 0x30
 800da9a:	332a      	adds	r3, #42	; 0x2a
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7fe fc4f 	bl	800c340 <ld_word>
 800daa2:	4603      	mov	r3, r0
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d001      	beq.n	800daac <find_volume+0x330>
 800daa8:	230d      	movs	r3, #13
 800daaa:	e0a8      	b.n	800dbfe <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800daac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daae:	891b      	ldrh	r3, [r3, #8]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d001      	beq.n	800dab8 <find_volume+0x33c>
 800dab4:	230d      	movs	r3, #13
 800dab6:	e0a2      	b.n	800dbfe <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daba:	3330      	adds	r3, #48	; 0x30
 800dabc:	332c      	adds	r3, #44	; 0x2c
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7fe fc56 	bl	800c370 <ld_dword>
 800dac4:	4602      	mov	r2, r0
 800dac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800daca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dacc:	695b      	ldr	r3, [r3, #20]
 800dace:	009b      	lsls	r3, r3, #2
 800dad0:	647b      	str	r3, [r7, #68]	; 0x44
 800dad2:	e01f      	b.n	800db14 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad6:	891b      	ldrh	r3, [r3, #8]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d101      	bne.n	800dae0 <find_volume+0x364>
 800dadc:	230d      	movs	r3, #13
 800dade:	e08e      	b.n	800dbfe <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae2:	6a1a      	ldr	r2, [r3, #32]
 800dae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dae6:	441a      	add	r2, r3
 800dae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daea:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800daec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800daf0:	2b02      	cmp	r3, #2
 800daf2:	d103      	bne.n	800dafc <find_volume+0x380>
 800daf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf6:	695b      	ldr	r3, [r3, #20]
 800daf8:	005b      	lsls	r3, r3, #1
 800dafa:	e00a      	b.n	800db12 <find_volume+0x396>
 800dafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dafe:	695a      	ldr	r2, [r3, #20]
 800db00:	4613      	mov	r3, r2
 800db02:	005b      	lsls	r3, r3, #1
 800db04:	4413      	add	r3, r2
 800db06:	085a      	lsrs	r2, r3, #1
 800db08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db0a:	695b      	ldr	r3, [r3, #20]
 800db0c:	f003 0301 	and.w	r3, r3, #1
 800db10:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800db12:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800db14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db16:	699a      	ldr	r2, [r3, #24]
 800db18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db1a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800db1e:	0a5b      	lsrs	r3, r3, #9
 800db20:	429a      	cmp	r2, r3
 800db22:	d201      	bcs.n	800db28 <find_volume+0x3ac>
 800db24:	230d      	movs	r3, #13
 800db26:	e06a      	b.n	800dbfe <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800db28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db2a:	f04f 32ff 	mov.w	r2, #4294967295
 800db2e:	611a      	str	r2, [r3, #16]
 800db30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db32:	691a      	ldr	r2, [r3, #16]
 800db34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db36:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800db38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db3a:	2280      	movs	r2, #128	; 0x80
 800db3c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800db3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800db42:	2b03      	cmp	r3, #3
 800db44:	d149      	bne.n	800dbda <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800db46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db48:	3330      	adds	r3, #48	; 0x30
 800db4a:	3330      	adds	r3, #48	; 0x30
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7fe fbf7 	bl	800c340 <ld_word>
 800db52:	4603      	mov	r3, r0
 800db54:	2b01      	cmp	r3, #1
 800db56:	d140      	bne.n	800dbda <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800db58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db5a:	3301      	adds	r3, #1
 800db5c:	4619      	mov	r1, r3
 800db5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800db60:	f7fe fe9e 	bl	800c8a0 <move_window>
 800db64:	4603      	mov	r3, r0
 800db66:	2b00      	cmp	r3, #0
 800db68:	d137      	bne.n	800dbda <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800db6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db6c:	2200      	movs	r2, #0
 800db6e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800db70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db72:	3330      	adds	r3, #48	; 0x30
 800db74:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800db78:	4618      	mov	r0, r3
 800db7a:	f7fe fbe1 	bl	800c340 <ld_word>
 800db7e:	4603      	mov	r3, r0
 800db80:	461a      	mov	r2, r3
 800db82:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800db86:	429a      	cmp	r2, r3
 800db88:	d127      	bne.n	800dbda <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800db8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db8c:	3330      	adds	r3, #48	; 0x30
 800db8e:	4618      	mov	r0, r3
 800db90:	f7fe fbee 	bl	800c370 <ld_dword>
 800db94:	4603      	mov	r3, r0
 800db96:	4a1c      	ldr	r2, [pc, #112]	; (800dc08 <find_volume+0x48c>)
 800db98:	4293      	cmp	r3, r2
 800db9a:	d11e      	bne.n	800dbda <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800db9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db9e:	3330      	adds	r3, #48	; 0x30
 800dba0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7fe fbe3 	bl	800c370 <ld_dword>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	4a17      	ldr	r2, [pc, #92]	; (800dc0c <find_volume+0x490>)
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d113      	bne.n	800dbda <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800dbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb4:	3330      	adds	r3, #48	; 0x30
 800dbb6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7fe fbd8 	bl	800c370 <ld_dword>
 800dbc0:	4602      	mov	r2, r0
 800dbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800dbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc8:	3330      	adds	r3, #48	; 0x30
 800dbca:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7fe fbce 	bl	800c370 <ld_dword>
 800dbd4:	4602      	mov	r2, r0
 800dbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800dbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbdc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800dbe0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800dbe2:	4b0b      	ldr	r3, [pc, #44]	; (800dc10 <find_volume+0x494>)
 800dbe4:	881b      	ldrh	r3, [r3, #0]
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	b29a      	uxth	r2, r3
 800dbea:	4b09      	ldr	r3, [pc, #36]	; (800dc10 <find_volume+0x494>)
 800dbec:	801a      	strh	r2, [r3, #0]
 800dbee:	4b08      	ldr	r3, [pc, #32]	; (800dc10 <find_volume+0x494>)
 800dbf0:	881a      	ldrh	r2, [r3, #0]
 800dbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800dbf6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dbf8:	f7fe fdea 	bl	800c7d0 <clear_lock>
#endif
	return FR_OK;
 800dbfc:	2300      	movs	r3, #0
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3758      	adds	r7, #88	; 0x58
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	41615252 	.word	0x41615252
 800dc0c:	61417272 	.word	0x61417272
 800dc10:	2000174c 	.word	0x2000174c

0800dc14 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b084      	sub	sp, #16
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800dc1e:	2309      	movs	r3, #9
 800dc20:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d01c      	beq.n	800dc62 <validate+0x4e>
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d018      	beq.n	800dc62 <validate+0x4e>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d013      	beq.n	800dc62 <validate+0x4e>
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	889a      	ldrh	r2, [r3, #4]
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	88db      	ldrh	r3, [r3, #6]
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d10c      	bne.n	800dc62 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	785b      	ldrb	r3, [r3, #1]
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7fe fad8 	bl	800c204 <disk_status>
 800dc54:	4603      	mov	r3, r0
 800dc56:	f003 0301 	and.w	r3, r3, #1
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d101      	bne.n	800dc62 <validate+0x4e>
			res = FR_OK;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800dc62:	7bfb      	ldrb	r3, [r7, #15]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d102      	bne.n	800dc6e <validate+0x5a>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	e000      	b.n	800dc70 <validate+0x5c>
 800dc6e:	2300      	movs	r3, #0
 800dc70:	683a      	ldr	r2, [r7, #0]
 800dc72:	6013      	str	r3, [r2, #0]
	return res;
 800dc74:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3710      	adds	r7, #16
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}
	...

0800dc80 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b088      	sub	sp, #32
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	60f8      	str	r0, [r7, #12]
 800dc88:	60b9      	str	r1, [r7, #8]
 800dc8a:	4613      	mov	r3, r2
 800dc8c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800dc92:	f107 0310 	add.w	r3, r7, #16
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7ff fcd5 	bl	800d646 <get_ldnumber>
 800dc9c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800dc9e:	69fb      	ldr	r3, [r7, #28]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	da01      	bge.n	800dca8 <f_mount+0x28>
 800dca4:	230b      	movs	r3, #11
 800dca6:	e02b      	b.n	800dd00 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800dca8:	4a17      	ldr	r2, [pc, #92]	; (800dd08 <f_mount+0x88>)
 800dcaa:	69fb      	ldr	r3, [r7, #28]
 800dcac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcb0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800dcb2:	69bb      	ldr	r3, [r7, #24]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d005      	beq.n	800dcc4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800dcb8:	69b8      	ldr	r0, [r7, #24]
 800dcba:	f7fe fd89 	bl	800c7d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800dcbe:	69bb      	ldr	r3, [r7, #24]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d002      	beq.n	800dcd0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2200      	movs	r2, #0
 800dcce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800dcd0:	68fa      	ldr	r2, [r7, #12]
 800dcd2:	490d      	ldr	r1, [pc, #52]	; (800dd08 <f_mount+0x88>)
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d002      	beq.n	800dce6 <f_mount+0x66>
 800dce0:	79fb      	ldrb	r3, [r7, #7]
 800dce2:	2b01      	cmp	r3, #1
 800dce4:	d001      	beq.n	800dcea <f_mount+0x6a>
 800dce6:	2300      	movs	r3, #0
 800dce8:	e00a      	b.n	800dd00 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dcea:	f107 010c 	add.w	r1, r7, #12
 800dcee:	f107 0308 	add.w	r3, r7, #8
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f7ff fd41 	bl	800d77c <find_volume>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800dcfe:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	3720      	adds	r7, #32
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}
 800dd08:	20001748 	.word	0x20001748

0800dd0c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b098      	sub	sp, #96	; 0x60
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	60b9      	str	r1, [r7, #8]
 800dd16:	4613      	mov	r3, r2
 800dd18:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d101      	bne.n	800dd24 <f_open+0x18>
 800dd20:	2309      	movs	r3, #9
 800dd22:	e1ad      	b.n	800e080 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800dd24:	79fb      	ldrb	r3, [r7, #7]
 800dd26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd2a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800dd2c:	79fa      	ldrb	r2, [r7, #7]
 800dd2e:	f107 0110 	add.w	r1, r7, #16
 800dd32:	f107 0308 	add.w	r3, r7, #8
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7ff fd20 	bl	800d77c <find_volume>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800dd42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	f040 8191 	bne.w	800e06e <f_open+0x362>
		dj.obj.fs = fs;
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800dd50:	68ba      	ldr	r2, [r7, #8]
 800dd52:	f107 0314 	add.w	r3, r7, #20
 800dd56:	4611      	mov	r1, r2
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f7ff fc03 	bl	800d564 <follow_path>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800dd64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d11a      	bne.n	800dda2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800dd6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dd70:	b25b      	sxtb	r3, r3
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	da03      	bge.n	800dd7e <f_open+0x72>
				res = FR_INVALID_NAME;
 800dd76:	2306      	movs	r3, #6
 800dd78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dd7c:	e011      	b.n	800dda2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dd7e:	79fb      	ldrb	r3, [r7, #7]
 800dd80:	f023 0301 	bic.w	r3, r3, #1
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	bf14      	ite	ne
 800dd88:	2301      	movne	r3, #1
 800dd8a:	2300      	moveq	r3, #0
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	461a      	mov	r2, r3
 800dd90:	f107 0314 	add.w	r3, r7, #20
 800dd94:	4611      	mov	r1, r2
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7fe fbd2 	bl	800c540 <chk_lock>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dda2:	79fb      	ldrb	r3, [r7, #7]
 800dda4:	f003 031c 	and.w	r3, r3, #28
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d07f      	beq.n	800deac <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ddac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d017      	beq.n	800dde4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ddb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ddb8:	2b04      	cmp	r3, #4
 800ddba:	d10e      	bne.n	800ddda <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ddbc:	f7fe fc1c 	bl	800c5f8 <enq_lock>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d006      	beq.n	800ddd4 <f_open+0xc8>
 800ddc6:	f107 0314 	add.w	r3, r7, #20
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f7ff fb03 	bl	800d3d6 <dir_register>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	e000      	b.n	800ddd6 <f_open+0xca>
 800ddd4:	2312      	movs	r3, #18
 800ddd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ddda:	79fb      	ldrb	r3, [r7, #7]
 800dddc:	f043 0308 	orr.w	r3, r3, #8
 800dde0:	71fb      	strb	r3, [r7, #7]
 800dde2:	e010      	b.n	800de06 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dde4:	7ebb      	ldrb	r3, [r7, #26]
 800dde6:	f003 0311 	and.w	r3, r3, #17
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d003      	beq.n	800ddf6 <f_open+0xea>
					res = FR_DENIED;
 800ddee:	2307      	movs	r3, #7
 800ddf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ddf4:	e007      	b.n	800de06 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ddf6:	79fb      	ldrb	r3, [r7, #7]
 800ddf8:	f003 0304 	and.w	r3, r3, #4
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d002      	beq.n	800de06 <f_open+0xfa>
 800de00:	2308      	movs	r3, #8
 800de02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800de06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d168      	bne.n	800dee0 <f_open+0x1d4>
 800de0e:	79fb      	ldrb	r3, [r7, #7]
 800de10:	f003 0308 	and.w	r3, r3, #8
 800de14:	2b00      	cmp	r3, #0
 800de16:	d063      	beq.n	800dee0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800de18:	f7fb f8e6 	bl	8008fe8 <get_fattime>
 800de1c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800de1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de20:	330e      	adds	r3, #14
 800de22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800de24:	4618      	mov	r0, r3
 800de26:	f7fe fae1 	bl	800c3ec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800de2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de2c:	3316      	adds	r3, #22
 800de2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800de30:	4618      	mov	r0, r3
 800de32:	f7fe fadb 	bl	800c3ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800de36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de38:	330b      	adds	r3, #11
 800de3a:	2220      	movs	r2, #32
 800de3c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de42:	4611      	mov	r1, r2
 800de44:	4618      	mov	r0, r3
 800de46:	f7ff fa32 	bl	800d2ae <ld_clust>
 800de4a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800de50:	2200      	movs	r2, #0
 800de52:	4618      	mov	r0, r3
 800de54:	f7ff fa4a 	bl	800d2ec <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800de58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de5a:	331c      	adds	r3, #28
 800de5c:	2100      	movs	r1, #0
 800de5e:	4618      	mov	r0, r3
 800de60:	f7fe fac4 	bl	800c3ec <st_dword>
					fs->wflag = 1;
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	2201      	movs	r2, #1
 800de68:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800de6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d037      	beq.n	800dee0 <f_open+0x1d4>
						dw = fs->winsect;
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de74:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800de76:	f107 0314 	add.w	r3, r7, #20
 800de7a:	2200      	movs	r2, #0
 800de7c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800de7e:	4618      	mov	r0, r3
 800de80:	f7fe ff5d 	bl	800cd3e <remove_chain>
 800de84:	4603      	mov	r3, r0
 800de86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800de8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d126      	bne.n	800dee0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800de96:	4618      	mov	r0, r3
 800de98:	f7fe fd02 	bl	800c8a0 <move_window>
 800de9c:	4603      	mov	r3, r0
 800de9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dea6:	3a01      	subs	r2, #1
 800dea8:	60da      	str	r2, [r3, #12]
 800deaa:	e019      	b.n	800dee0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800deac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d115      	bne.n	800dee0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800deb4:	7ebb      	ldrb	r3, [r7, #26]
 800deb6:	f003 0310 	and.w	r3, r3, #16
 800deba:	2b00      	cmp	r3, #0
 800debc:	d003      	beq.n	800dec6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800debe:	2304      	movs	r3, #4
 800dec0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dec4:	e00c      	b.n	800dee0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dec6:	79fb      	ldrb	r3, [r7, #7]
 800dec8:	f003 0302 	and.w	r3, r3, #2
 800decc:	2b00      	cmp	r3, #0
 800dece:	d007      	beq.n	800dee0 <f_open+0x1d4>
 800ded0:	7ebb      	ldrb	r3, [r7, #26]
 800ded2:	f003 0301 	and.w	r3, r3, #1
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d002      	beq.n	800dee0 <f_open+0x1d4>
						res = FR_DENIED;
 800deda:	2307      	movs	r3, #7
 800dedc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800dee0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d128      	bne.n	800df3a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dee8:	79fb      	ldrb	r3, [r7, #7]
 800deea:	f003 0308 	and.w	r3, r3, #8
 800deee:	2b00      	cmp	r3, #0
 800def0:	d003      	beq.n	800defa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800def2:	79fb      	ldrb	r3, [r7, #7]
 800def4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800def8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800df02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800df08:	79fb      	ldrb	r3, [r7, #7]
 800df0a:	f023 0301 	bic.w	r3, r3, #1
 800df0e:	2b00      	cmp	r3, #0
 800df10:	bf14      	ite	ne
 800df12:	2301      	movne	r3, #1
 800df14:	2300      	moveq	r3, #0
 800df16:	b2db      	uxtb	r3, r3
 800df18:	461a      	mov	r2, r3
 800df1a:	f107 0314 	add.w	r3, r7, #20
 800df1e:	4611      	mov	r1, r2
 800df20:	4618      	mov	r0, r3
 800df22:	f7fe fb8b 	bl	800c63c <inc_lock>
 800df26:	4602      	mov	r2, r0
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	691b      	ldr	r3, [r3, #16]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d102      	bne.n	800df3a <f_open+0x22e>
 800df34:	2302      	movs	r3, #2
 800df36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800df3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df3e:	2b00      	cmp	r3, #0
 800df40:	f040 8095 	bne.w	800e06e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df48:	4611      	mov	r1, r2
 800df4a:	4618      	mov	r0, r3
 800df4c:	f7ff f9af 	bl	800d2ae <ld_clust>
 800df50:	4602      	mov	r2, r0
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800df56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df58:	331c      	adds	r3, #28
 800df5a:	4618      	mov	r0, r3
 800df5c:	f7fe fa08 	bl	800c370 <ld_dword>
 800df60:	4602      	mov	r2, r0
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	2200      	movs	r2, #0
 800df6a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800df6c:	693a      	ldr	r2, [r7, #16]
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	88da      	ldrh	r2, [r3, #6]
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	79fa      	ldrb	r2, [r7, #7]
 800df7e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	2200      	movs	r2, #0
 800df84:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	2200      	movs	r2, #0
 800df8a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2200      	movs	r2, #0
 800df90:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	3330      	adds	r3, #48	; 0x30
 800df96:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df9a:	2100      	movs	r1, #0
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7fe fa72 	bl	800c486 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dfa2:	79fb      	ldrb	r3, [r7, #7]
 800dfa4:	f003 0320 	and.w	r3, r3, #32
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d060      	beq.n	800e06e <f_open+0x362>
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	68db      	ldr	r3, [r3, #12]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d05c      	beq.n	800e06e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	68da      	ldr	r2, [r3, #12]
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	895b      	ldrh	r3, [r3, #10]
 800dfc0:	025b      	lsls	r3, r3, #9
 800dfc2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	689b      	ldr	r3, [r3, #8]
 800dfc8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	68db      	ldr	r3, [r3, #12]
 800dfce:	657b      	str	r3, [r7, #84]	; 0x54
 800dfd0:	e016      	b.n	800e000 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7fe fd1d 	bl	800ca16 <get_fat>
 800dfdc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800dfde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d802      	bhi.n	800dfea <f_open+0x2de>
 800dfe4:	2302      	movs	r3, #2
 800dfe6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dfea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dfec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dff0:	d102      	bne.n	800dff8 <f_open+0x2ec>
 800dff2:	2301      	movs	r3, #1
 800dff4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dff8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dffc:	1ad3      	subs	r3, r2, r3
 800dffe:	657b      	str	r3, [r7, #84]	; 0x54
 800e000:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e004:	2b00      	cmp	r3, #0
 800e006:	d103      	bne.n	800e010 <f_open+0x304>
 800e008:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e00a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d8e0      	bhi.n	800dfd2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e014:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e016:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d127      	bne.n	800e06e <f_open+0x362>
 800e01e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e024:	2b00      	cmp	r3, #0
 800e026:	d022      	beq.n	800e06e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7fe fcd3 	bl	800c9d8 <clust2sect>
 800e032:	6478      	str	r0, [r7, #68]	; 0x44
 800e034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e036:	2b00      	cmp	r3, #0
 800e038:	d103      	bne.n	800e042 <f_open+0x336>
						res = FR_INT_ERR;
 800e03a:	2302      	movs	r3, #2
 800e03c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e040:	e015      	b.n	800e06e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e044:	0a5a      	lsrs	r2, r3, #9
 800e046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e048:	441a      	add	r2, r3
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	7858      	ldrb	r0, [r3, #1]
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	6a1a      	ldr	r2, [r3, #32]
 800e05c:	2301      	movs	r3, #1
 800e05e:	f7fe f911 	bl	800c284 <disk_read>
 800e062:	4603      	mov	r3, r0
 800e064:	2b00      	cmp	r3, #0
 800e066:	d002      	beq.n	800e06e <f_open+0x362>
 800e068:	2301      	movs	r3, #1
 800e06a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e06e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e072:	2b00      	cmp	r3, #0
 800e074:	d002      	beq.n	800e07c <f_open+0x370>
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2200      	movs	r2, #0
 800e07a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e07c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e080:	4618      	mov	r0, r3
 800e082:	3760      	adds	r7, #96	; 0x60
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}

0800e088 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b08e      	sub	sp, #56	; 0x38
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	607a      	str	r2, [r7, #4]
 800e094:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	2200      	movs	r2, #0
 800e09e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	f107 0214 	add.w	r2, r7, #20
 800e0a6:	4611      	mov	r1, r2
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7ff fdb3 	bl	800dc14 <validate>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e0b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d107      	bne.n	800e0cc <f_read+0x44>
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	7d5b      	ldrb	r3, [r3, #21]
 800e0c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e0c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d002      	beq.n	800e0d2 <f_read+0x4a>
 800e0cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0d0:	e115      	b.n	800e2fe <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	7d1b      	ldrb	r3, [r3, #20]
 800e0d6:	f003 0301 	and.w	r3, r3, #1
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d101      	bne.n	800e0e2 <f_read+0x5a>
 800e0de:	2307      	movs	r3, #7
 800e0e0:	e10d      	b.n	800e2fe <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	68da      	ldr	r2, [r3, #12]
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	699b      	ldr	r3, [r3, #24]
 800e0ea:	1ad3      	subs	r3, r2, r3
 800e0ec:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e0ee:	687a      	ldr	r2, [r7, #4]
 800e0f0:	6a3b      	ldr	r3, [r7, #32]
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	f240 80fe 	bls.w	800e2f4 <f_read+0x26c>
 800e0f8:	6a3b      	ldr	r3, [r7, #32]
 800e0fa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e0fc:	e0fa      	b.n	800e2f4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	699b      	ldr	r3, [r3, #24]
 800e102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e106:	2b00      	cmp	r3, #0
 800e108:	f040 80c6 	bne.w	800e298 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	699b      	ldr	r3, [r3, #24]
 800e110:	0a5b      	lsrs	r3, r3, #9
 800e112:	697a      	ldr	r2, [r7, #20]
 800e114:	8952      	ldrh	r2, [r2, #10]
 800e116:	3a01      	subs	r2, #1
 800e118:	4013      	ands	r3, r2
 800e11a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e11c:	69fb      	ldr	r3, [r7, #28]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d12f      	bne.n	800e182 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	699b      	ldr	r3, [r3, #24]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d103      	bne.n	800e132 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	689b      	ldr	r3, [r3, #8]
 800e12e:	633b      	str	r3, [r7, #48]	; 0x30
 800e130:	e013      	b.n	800e15a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e136:	2b00      	cmp	r3, #0
 800e138:	d007      	beq.n	800e14a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	699b      	ldr	r3, [r3, #24]
 800e13e:	4619      	mov	r1, r3
 800e140:	68f8      	ldr	r0, [r7, #12]
 800e142:	f7fe fef9 	bl	800cf38 <clmt_clust>
 800e146:	6338      	str	r0, [r7, #48]	; 0x30
 800e148:	e007      	b.n	800e15a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e14a:	68fa      	ldr	r2, [r7, #12]
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	69db      	ldr	r3, [r3, #28]
 800e150:	4619      	mov	r1, r3
 800e152:	4610      	mov	r0, r2
 800e154:	f7fe fc5f 	bl	800ca16 <get_fat>
 800e158:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e15c:	2b01      	cmp	r3, #1
 800e15e:	d804      	bhi.n	800e16a <f_read+0xe2>
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2202      	movs	r2, #2
 800e164:	755a      	strb	r2, [r3, #21]
 800e166:	2302      	movs	r3, #2
 800e168:	e0c9      	b.n	800e2fe <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e16c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e170:	d104      	bne.n	800e17c <f_read+0xf4>
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2201      	movs	r2, #1
 800e176:	755a      	strb	r2, [r3, #21]
 800e178:	2301      	movs	r3, #1
 800e17a:	e0c0      	b.n	800e2fe <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e180:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e182:	697a      	ldr	r2, [r7, #20]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	69db      	ldr	r3, [r3, #28]
 800e188:	4619      	mov	r1, r3
 800e18a:	4610      	mov	r0, r2
 800e18c:	f7fe fc24 	bl	800c9d8 <clust2sect>
 800e190:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e192:	69bb      	ldr	r3, [r7, #24]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d104      	bne.n	800e1a2 <f_read+0x11a>
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	2202      	movs	r2, #2
 800e19c:	755a      	strb	r2, [r3, #21]
 800e19e:	2302      	movs	r3, #2
 800e1a0:	e0ad      	b.n	800e2fe <f_read+0x276>
			sect += csect;
 800e1a2:	69ba      	ldr	r2, [r7, #24]
 800e1a4:	69fb      	ldr	r3, [r7, #28]
 800e1a6:	4413      	add	r3, r2
 800e1a8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	0a5b      	lsrs	r3, r3, #9
 800e1ae:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d039      	beq.n	800e22a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e1b6:	69fa      	ldr	r2, [r7, #28]
 800e1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ba:	4413      	add	r3, r2
 800e1bc:	697a      	ldr	r2, [r7, #20]
 800e1be:	8952      	ldrh	r2, [r2, #10]
 800e1c0:	4293      	cmp	r3, r2
 800e1c2:	d905      	bls.n	800e1d0 <f_read+0x148>
					cc = fs->csize - csect;
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	895b      	ldrh	r3, [r3, #10]
 800e1c8:	461a      	mov	r2, r3
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	1ad3      	subs	r3, r2, r3
 800e1ce:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	7858      	ldrb	r0, [r3, #1]
 800e1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d6:	69ba      	ldr	r2, [r7, #24]
 800e1d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e1da:	f7fe f853 	bl	800c284 <disk_read>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d004      	beq.n	800e1ee <f_read+0x166>
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2201      	movs	r2, #1
 800e1e8:	755a      	strb	r2, [r3, #21]
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	e087      	b.n	800e2fe <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	7d1b      	ldrb	r3, [r3, #20]
 800e1f2:	b25b      	sxtb	r3, r3
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	da14      	bge.n	800e222 <f_read+0x19a>
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	6a1a      	ldr	r2, [r3, #32]
 800e1fc:	69bb      	ldr	r3, [r7, #24]
 800e1fe:	1ad3      	subs	r3, r2, r3
 800e200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e202:	429a      	cmp	r2, r3
 800e204:	d90d      	bls.n	800e222 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	6a1a      	ldr	r2, [r3, #32]
 800e20a:	69bb      	ldr	r3, [r7, #24]
 800e20c:	1ad3      	subs	r3, r2, r3
 800e20e:	025b      	lsls	r3, r3, #9
 800e210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e212:	18d0      	adds	r0, r2, r3
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	3330      	adds	r3, #48	; 0x30
 800e218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e21c:	4619      	mov	r1, r3
 800e21e:	f7fe f911 	bl	800c444 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e224:	025b      	lsls	r3, r3, #9
 800e226:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e228:	e050      	b.n	800e2cc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	6a1b      	ldr	r3, [r3, #32]
 800e22e:	69ba      	ldr	r2, [r7, #24]
 800e230:	429a      	cmp	r2, r3
 800e232:	d02e      	beq.n	800e292 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	7d1b      	ldrb	r3, [r3, #20]
 800e238:	b25b      	sxtb	r3, r3
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	da18      	bge.n	800e270 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	7858      	ldrb	r0, [r3, #1]
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	6a1a      	ldr	r2, [r3, #32]
 800e24c:	2301      	movs	r3, #1
 800e24e:	f7fe f839 	bl	800c2c4 <disk_write>
 800e252:	4603      	mov	r3, r0
 800e254:	2b00      	cmp	r3, #0
 800e256:	d004      	beq.n	800e262 <f_read+0x1da>
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2201      	movs	r2, #1
 800e25c:	755a      	strb	r2, [r3, #21]
 800e25e:	2301      	movs	r3, #1
 800e260:	e04d      	b.n	800e2fe <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	7d1b      	ldrb	r3, [r3, #20]
 800e266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e26a:	b2da      	uxtb	r2, r3
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	7858      	ldrb	r0, [r3, #1]
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e27a:	2301      	movs	r3, #1
 800e27c:	69ba      	ldr	r2, [r7, #24]
 800e27e:	f7fe f801 	bl	800c284 <disk_read>
 800e282:	4603      	mov	r3, r0
 800e284:	2b00      	cmp	r3, #0
 800e286:	d004      	beq.n	800e292 <f_read+0x20a>
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2201      	movs	r2, #1
 800e28c:	755a      	strb	r2, [r3, #21]
 800e28e:	2301      	movs	r3, #1
 800e290:	e035      	b.n	800e2fe <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	69ba      	ldr	r2, [r7, #24]
 800e296:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	699b      	ldr	r3, [r3, #24]
 800e29c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2a0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e2a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d901      	bls.n	800e2b2 <f_read+0x22a>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	699b      	ldr	r3, [r3, #24]
 800e2bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2c0:	4413      	add	r3, r2
 800e2c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2c4:	4619      	mov	r1, r3
 800e2c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e2c8:	f7fe f8bc 	bl	800c444 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e2cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d0:	4413      	add	r3, r2
 800e2d2:	627b      	str	r3, [r7, #36]	; 0x24
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	699a      	ldr	r2, [r3, #24]
 800e2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2da:	441a      	add	r2, r3
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	619a      	str	r2, [r3, #24]
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	681a      	ldr	r2, [r3, #0]
 800e2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e6:	441a      	add	r2, r3
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	601a      	str	r2, [r3, #0]
 800e2ec:	687a      	ldr	r2, [r7, #4]
 800e2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f0:	1ad3      	subs	r3, r2, r3
 800e2f2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	f47f af01 	bne.w	800e0fe <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e2fc:	2300      	movs	r3, #0
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3738      	adds	r7, #56	; 0x38
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}

0800e306 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e306:	b580      	push	{r7, lr}
 800e308:	b086      	sub	sp, #24
 800e30a:	af00      	add	r7, sp, #0
 800e30c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f107 0208 	add.w	r2, r7, #8
 800e314:	4611      	mov	r1, r2
 800e316:	4618      	mov	r0, r3
 800e318:	f7ff fc7c 	bl	800dc14 <validate>
 800e31c:	4603      	mov	r3, r0
 800e31e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e320:	7dfb      	ldrb	r3, [r7, #23]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d168      	bne.n	800e3f8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	7d1b      	ldrb	r3, [r3, #20]
 800e32a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d062      	beq.n	800e3f8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	7d1b      	ldrb	r3, [r3, #20]
 800e336:	b25b      	sxtb	r3, r3
 800e338:	2b00      	cmp	r3, #0
 800e33a:	da15      	bge.n	800e368 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	7858      	ldrb	r0, [r3, #1]
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6a1a      	ldr	r2, [r3, #32]
 800e34a:	2301      	movs	r3, #1
 800e34c:	f7fd ffba 	bl	800c2c4 <disk_write>
 800e350:	4603      	mov	r3, r0
 800e352:	2b00      	cmp	r3, #0
 800e354:	d001      	beq.n	800e35a <f_sync+0x54>
 800e356:	2301      	movs	r3, #1
 800e358:	e04f      	b.n	800e3fa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	7d1b      	ldrb	r3, [r3, #20]
 800e35e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e362:	b2da      	uxtb	r2, r3
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e368:	f7fa fe3e 	bl	8008fe8 <get_fattime>
 800e36c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e36e:	68ba      	ldr	r2, [r7, #8]
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e374:	4619      	mov	r1, r3
 800e376:	4610      	mov	r0, r2
 800e378:	f7fe fa92 	bl	800c8a0 <move_window>
 800e37c:	4603      	mov	r3, r0
 800e37e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e380:	7dfb      	ldrb	r3, [r7, #23]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d138      	bne.n	800e3f8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e38a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	330b      	adds	r3, #11
 800e390:	781a      	ldrb	r2, [r3, #0]
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	330b      	adds	r3, #11
 800e396:	f042 0220 	orr.w	r2, r2, #32
 800e39a:	b2d2      	uxtb	r2, r2
 800e39c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6818      	ldr	r0, [r3, #0]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	689b      	ldr	r3, [r3, #8]
 800e3a6:	461a      	mov	r2, r3
 800e3a8:	68f9      	ldr	r1, [r7, #12]
 800e3aa:	f7fe ff9f 	bl	800d2ec <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	f103 021c 	add.w	r2, r3, #28
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	68db      	ldr	r3, [r3, #12]
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	4610      	mov	r0, r2
 800e3bc:	f7fe f816 	bl	800c3ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	3316      	adds	r3, #22
 800e3c4:	6939      	ldr	r1, [r7, #16]
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7fe f810 	bl	800c3ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	3312      	adds	r3, #18
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7fd ffef 	bl	800c3b6 <st_word>
					fs->wflag = 1;
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	2201      	movs	r2, #1
 800e3dc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f7fe fa8b 	bl	800c8fc <sync_fs>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	7d1b      	ldrb	r3, [r3, #20]
 800e3ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3f2:	b2da      	uxtb	r2, r3
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e3f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3718      	adds	r7, #24
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}

0800e402 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e402:	b580      	push	{r7, lr}
 800e404:	b084      	sub	sp, #16
 800e406:	af00      	add	r7, sp, #0
 800e408:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f7ff ff7b 	bl	800e306 <f_sync>
 800e410:	4603      	mov	r3, r0
 800e412:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e414:	7bfb      	ldrb	r3, [r7, #15]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d118      	bne.n	800e44c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f107 0208 	add.w	r2, r7, #8
 800e420:	4611      	mov	r1, r2
 800e422:	4618      	mov	r0, r3
 800e424:	f7ff fbf6 	bl	800dc14 <validate>
 800e428:	4603      	mov	r3, r0
 800e42a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e42c:	7bfb      	ldrb	r3, [r7, #15]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d10c      	bne.n	800e44c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	691b      	ldr	r3, [r3, #16]
 800e436:	4618      	mov	r0, r3
 800e438:	f7fe f98e 	bl	800c758 <dec_lock>
 800e43c:	4603      	mov	r3, r0
 800e43e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e440:	7bfb      	ldrb	r3, [r7, #15]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d102      	bne.n	800e44c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2200      	movs	r2, #0
 800e44a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3710      	adds	r7, #16
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}

0800e456 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e456:	b580      	push	{r7, lr}
 800e458:	b090      	sub	sp, #64	; 0x40
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]
 800e45e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f107 0208 	add.w	r2, r7, #8
 800e466:	4611      	mov	r1, r2
 800e468:	4618      	mov	r0, r3
 800e46a:	f7ff fbd3 	bl	800dc14 <validate>
 800e46e:	4603      	mov	r3, r0
 800e470:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e474:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d103      	bne.n	800e484 <f_lseek+0x2e>
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	7d5b      	ldrb	r3, [r3, #21]
 800e480:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e484:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d002      	beq.n	800e492 <f_lseek+0x3c>
 800e48c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e490:	e1e6      	b.n	800e860 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e496:	2b00      	cmp	r3, #0
 800e498:	f000 80d1 	beq.w	800e63e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4a2:	d15a      	bne.n	800e55a <f_lseek+0x104>
			tbl = fp->cltbl;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4a8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ac:	1d1a      	adds	r2, r3, #4
 800e4ae:	627a      	str	r2, [r7, #36]	; 0x24
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	617b      	str	r3, [r7, #20]
 800e4b4:	2302      	movs	r3, #2
 800e4b6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	689b      	ldr	r3, [r3, #8]
 800e4bc:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800e4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d03a      	beq.n	800e53a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4c6:	613b      	str	r3, [r7, #16]
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ce:	3302      	adds	r3, #2
 800e4d0:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800e4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d4:	60fb      	str	r3, [r7, #12]
 800e4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d8:	3301      	adds	r3, #1
 800e4da:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7fe fa98 	bl	800ca16 <get_fat>
 800e4e6:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ea:	2b01      	cmp	r3, #1
 800e4ec:	d804      	bhi.n	800e4f8 <f_lseek+0xa2>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2202      	movs	r2, #2
 800e4f2:	755a      	strb	r2, [r3, #21]
 800e4f4:	2302      	movs	r3, #2
 800e4f6:	e1b3      	b.n	800e860 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4fe:	d104      	bne.n	800e50a <f_lseek+0xb4>
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2201      	movs	r2, #1
 800e504:	755a      	strb	r2, [r3, #21]
 800e506:	2301      	movs	r3, #1
 800e508:	e1aa      	b.n	800e860 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	3301      	adds	r3, #1
 800e50e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e510:	429a      	cmp	r2, r3
 800e512:	d0de      	beq.n	800e4d2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	429a      	cmp	r2, r3
 800e51a:	d809      	bhi.n	800e530 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51e:	1d1a      	adds	r2, r3, #4
 800e520:	627a      	str	r2, [r7, #36]	; 0x24
 800e522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e524:	601a      	str	r2, [r3, #0]
 800e526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e528:	1d1a      	adds	r2, r3, #4
 800e52a:	627a      	str	r2, [r7, #36]	; 0x24
 800e52c:	693a      	ldr	r2, [r7, #16]
 800e52e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	695b      	ldr	r3, [r3, #20]
 800e534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e536:	429a      	cmp	r2, r3
 800e538:	d3c4      	bcc.n	800e4c4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e53e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e540:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	429a      	cmp	r2, r3
 800e548:	d803      	bhi.n	800e552 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54c:	2200      	movs	r2, #0
 800e54e:	601a      	str	r2, [r3, #0]
 800e550:	e184      	b.n	800e85c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e552:	2311      	movs	r3, #17
 800e554:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e558:	e180      	b.n	800e85c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	68db      	ldr	r3, [r3, #12]
 800e55e:	683a      	ldr	r2, [r7, #0]
 800e560:	429a      	cmp	r2, r3
 800e562:	d902      	bls.n	800e56a <f_lseek+0x114>
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	68db      	ldr	r3, [r3, #12]
 800e568:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	683a      	ldr	r2, [r7, #0]
 800e56e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	2b00      	cmp	r3, #0
 800e574:	f000 8172 	beq.w	800e85c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	3b01      	subs	r3, #1
 800e57c:	4619      	mov	r1, r3
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f7fe fcda 	bl	800cf38 <clmt_clust>
 800e584:	4602      	mov	r2, r0
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e58a:	68ba      	ldr	r2, [r7, #8]
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	69db      	ldr	r3, [r3, #28]
 800e590:	4619      	mov	r1, r3
 800e592:	4610      	mov	r0, r2
 800e594:	f7fe fa20 	bl	800c9d8 <clust2sect>
 800e598:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e59a:	69bb      	ldr	r3, [r7, #24]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d104      	bne.n	800e5aa <f_lseek+0x154>
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2202      	movs	r2, #2
 800e5a4:	755a      	strb	r2, [r3, #21]
 800e5a6:	2302      	movs	r3, #2
 800e5a8:	e15a      	b.n	800e860 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	3b01      	subs	r3, #1
 800e5ae:	0a5b      	lsrs	r3, r3, #9
 800e5b0:	68ba      	ldr	r2, [r7, #8]
 800e5b2:	8952      	ldrh	r2, [r2, #10]
 800e5b4:	3a01      	subs	r2, #1
 800e5b6:	4013      	ands	r3, r2
 800e5b8:	69ba      	ldr	r2, [r7, #24]
 800e5ba:	4413      	add	r3, r2
 800e5bc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	699b      	ldr	r3, [r3, #24]
 800e5c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	f000 8148 	beq.w	800e85c <f_lseek+0x406>
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6a1b      	ldr	r3, [r3, #32]
 800e5d0:	69ba      	ldr	r2, [r7, #24]
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	f000 8142 	beq.w	800e85c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	7d1b      	ldrb	r3, [r3, #20]
 800e5dc:	b25b      	sxtb	r3, r3
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	da18      	bge.n	800e614 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	7858      	ldrb	r0, [r3, #1]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6a1a      	ldr	r2, [r3, #32]
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	f7fd fe67 	bl	800c2c4 <disk_write>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d004      	beq.n	800e606 <f_lseek+0x1b0>
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2201      	movs	r2, #1
 800e600:	755a      	strb	r2, [r3, #21]
 800e602:	2301      	movs	r3, #1
 800e604:	e12c      	b.n	800e860 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	7d1b      	ldrb	r3, [r3, #20]
 800e60a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e60e:	b2da      	uxtb	r2, r3
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	7858      	ldrb	r0, [r3, #1]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e61e:	2301      	movs	r3, #1
 800e620:	69ba      	ldr	r2, [r7, #24]
 800e622:	f7fd fe2f 	bl	800c284 <disk_read>
 800e626:	4603      	mov	r3, r0
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d004      	beq.n	800e636 <f_lseek+0x1e0>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2201      	movs	r2, #1
 800e630:	755a      	strb	r2, [r3, #21]
 800e632:	2301      	movs	r3, #1
 800e634:	e114      	b.n	800e860 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	69ba      	ldr	r2, [r7, #24]
 800e63a:	621a      	str	r2, [r3, #32]
 800e63c:	e10e      	b.n	800e85c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	68db      	ldr	r3, [r3, #12]
 800e642:	683a      	ldr	r2, [r7, #0]
 800e644:	429a      	cmp	r2, r3
 800e646:	d908      	bls.n	800e65a <f_lseek+0x204>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	7d1b      	ldrb	r3, [r3, #20]
 800e64c:	f003 0302 	and.w	r3, r3, #2
 800e650:	2b00      	cmp	r3, #0
 800e652:	d102      	bne.n	800e65a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	68db      	ldr	r3, [r3, #12]
 800e658:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	699b      	ldr	r3, [r3, #24]
 800e65e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e660:	2300      	movs	r3, #0
 800e662:	637b      	str	r3, [r7, #52]	; 0x34
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e668:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	f000 80a7 	beq.w	800e7c0 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	895b      	ldrh	r3, [r3, #10]
 800e676:	025b      	lsls	r3, r3, #9
 800e678:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e67a:	6a3b      	ldr	r3, [r7, #32]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d01b      	beq.n	800e6b8 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	1e5a      	subs	r2, r3, #1
 800e684:	69fb      	ldr	r3, [r7, #28]
 800e686:	fbb2 f2f3 	udiv	r2, r2, r3
 800e68a:	6a3b      	ldr	r3, [r7, #32]
 800e68c:	1e59      	subs	r1, r3, #1
 800e68e:	69fb      	ldr	r3, [r7, #28]
 800e690:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e694:	429a      	cmp	r2, r3
 800e696:	d30f      	bcc.n	800e6b8 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e698:	6a3b      	ldr	r3, [r7, #32]
 800e69a:	1e5a      	subs	r2, r3, #1
 800e69c:	69fb      	ldr	r3, [r7, #28]
 800e69e:	425b      	negs	r3, r3
 800e6a0:	401a      	ands	r2, r3
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	699b      	ldr	r3, [r3, #24]
 800e6aa:	683a      	ldr	r2, [r7, #0]
 800e6ac:	1ad3      	subs	r3, r2, r3
 800e6ae:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	69db      	ldr	r3, [r3, #28]
 800e6b4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e6b6:	e022      	b.n	800e6fe <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	689b      	ldr	r3, [r3, #8]
 800e6bc:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d119      	bne.n	800e6f8 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2100      	movs	r1, #0
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f7fe fb9d 	bl	800ce08 <create_chain>
 800e6ce:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d2:	2b01      	cmp	r3, #1
 800e6d4:	d104      	bne.n	800e6e0 <f_lseek+0x28a>
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2202      	movs	r2, #2
 800e6da:	755a      	strb	r2, [r3, #21]
 800e6dc:	2302      	movs	r3, #2
 800e6de:	e0bf      	b.n	800e860 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6e6:	d104      	bne.n	800e6f2 <f_lseek+0x29c>
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	755a      	strb	r2, [r3, #21]
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	e0b6      	b.n	800e860 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6f6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6fc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e700:	2b00      	cmp	r3, #0
 800e702:	d05d      	beq.n	800e7c0 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800e704:	e03a      	b.n	800e77c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800e706:	683a      	ldr	r2, [r7, #0]
 800e708:	69fb      	ldr	r3, [r7, #28]
 800e70a:	1ad3      	subs	r3, r2, r3
 800e70c:	603b      	str	r3, [r7, #0]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	699a      	ldr	r2, [r3, #24]
 800e712:	69fb      	ldr	r3, [r7, #28]
 800e714:	441a      	add	r2, r3
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	7d1b      	ldrb	r3, [r3, #20]
 800e71e:	f003 0302 	and.w	r3, r3, #2
 800e722:	2b00      	cmp	r3, #0
 800e724:	d00b      	beq.n	800e73e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7fe fb6c 	bl	800ce08 <create_chain>
 800e730:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e734:	2b00      	cmp	r3, #0
 800e736:	d108      	bne.n	800e74a <f_lseek+0x2f4>
							ofs = 0; break;
 800e738:	2300      	movs	r3, #0
 800e73a:	603b      	str	r3, [r7, #0]
 800e73c:	e022      	b.n	800e784 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e742:	4618      	mov	r0, r3
 800e744:	f7fe f967 	bl	800ca16 <get_fat>
 800e748:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e74c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e750:	d104      	bne.n	800e75c <f_lseek+0x306>
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2201      	movs	r2, #1
 800e756:	755a      	strb	r2, [r3, #21]
 800e758:	2301      	movs	r3, #1
 800e75a:	e081      	b.n	800e860 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e75e:	2b01      	cmp	r3, #1
 800e760:	d904      	bls.n	800e76c <f_lseek+0x316>
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	695b      	ldr	r3, [r3, #20]
 800e766:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e768:	429a      	cmp	r2, r3
 800e76a:	d304      	bcc.n	800e776 <f_lseek+0x320>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2202      	movs	r2, #2
 800e770:	755a      	strb	r2, [r3, #21]
 800e772:	2302      	movs	r3, #2
 800e774:	e074      	b.n	800e860 <f_lseek+0x40a>
					fp->clust = clst;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e77a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e77c:	683a      	ldr	r2, [r7, #0]
 800e77e:	69fb      	ldr	r3, [r7, #28]
 800e780:	429a      	cmp	r2, r3
 800e782:	d8c0      	bhi.n	800e706 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	699a      	ldr	r2, [r3, #24]
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	441a      	add	r2, r3
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e796:	2b00      	cmp	r3, #0
 800e798:	d012      	beq.n	800e7c0 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f7fe f91a 	bl	800c9d8 <clust2sect>
 800e7a4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e7a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d104      	bne.n	800e7b6 <f_lseek+0x360>
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2202      	movs	r2, #2
 800e7b0:	755a      	strb	r2, [r3, #21]
 800e7b2:	2302      	movs	r3, #2
 800e7b4:	e054      	b.n	800e860 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	0a5b      	lsrs	r3, r3, #9
 800e7ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7bc:	4413      	add	r3, r2
 800e7be:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	699a      	ldr	r2, [r3, #24]
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	68db      	ldr	r3, [r3, #12]
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	d90a      	bls.n	800e7e2 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	699a      	ldr	r2, [r3, #24]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	7d1b      	ldrb	r3, [r3, #20]
 800e7d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7dc:	b2da      	uxtb	r2, r3
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	699b      	ldr	r3, [r3, #24]
 800e7e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d036      	beq.n	800e85c <f_lseek+0x406>
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6a1b      	ldr	r3, [r3, #32]
 800e7f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	d031      	beq.n	800e85c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	7d1b      	ldrb	r3, [r3, #20]
 800e7fc:	b25b      	sxtb	r3, r3
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	da18      	bge.n	800e834 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	7858      	ldrb	r0, [r3, #1]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	6a1a      	ldr	r2, [r3, #32]
 800e810:	2301      	movs	r3, #1
 800e812:	f7fd fd57 	bl	800c2c4 <disk_write>
 800e816:	4603      	mov	r3, r0
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d004      	beq.n	800e826 <f_lseek+0x3d0>
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2201      	movs	r2, #1
 800e820:	755a      	strb	r2, [r3, #21]
 800e822:	2301      	movs	r3, #1
 800e824:	e01c      	b.n	800e860 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	7d1b      	ldrb	r3, [r3, #20]
 800e82a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e82e:	b2da      	uxtb	r2, r3
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	7858      	ldrb	r0, [r3, #1]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e83e:	2301      	movs	r3, #1
 800e840:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e842:	f7fd fd1f 	bl	800c284 <disk_read>
 800e846:	4603      	mov	r3, r0
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d004      	beq.n	800e856 <f_lseek+0x400>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2201      	movs	r2, #1
 800e850:	755a      	strb	r2, [r3, #21]
 800e852:	2301      	movs	r3, #1
 800e854:	e004      	b.n	800e860 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e85a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e85c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e860:	4618      	mov	r0, r3
 800e862:	3740      	adds	r7, #64	; 0x40
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}

0800e868 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e868:	b480      	push	{r7}
 800e86a:	b087      	sub	sp, #28
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	60f8      	str	r0, [r7, #12]
 800e870:	60b9      	str	r1, [r7, #8]
 800e872:	4613      	mov	r3, r2
 800e874:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e876:	2301      	movs	r3, #1
 800e878:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e87a:	2300      	movs	r3, #0
 800e87c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e87e:	4b1f      	ldr	r3, [pc, #124]	; (800e8fc <FATFS_LinkDriverEx+0x94>)
 800e880:	7a5b      	ldrb	r3, [r3, #9]
 800e882:	b2db      	uxtb	r3, r3
 800e884:	2b00      	cmp	r3, #0
 800e886:	d131      	bne.n	800e8ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e888:	4b1c      	ldr	r3, [pc, #112]	; (800e8fc <FATFS_LinkDriverEx+0x94>)
 800e88a:	7a5b      	ldrb	r3, [r3, #9]
 800e88c:	b2db      	uxtb	r3, r3
 800e88e:	461a      	mov	r2, r3
 800e890:	4b1a      	ldr	r3, [pc, #104]	; (800e8fc <FATFS_LinkDriverEx+0x94>)
 800e892:	2100      	movs	r1, #0
 800e894:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e896:	4b19      	ldr	r3, [pc, #100]	; (800e8fc <FATFS_LinkDriverEx+0x94>)
 800e898:	7a5b      	ldrb	r3, [r3, #9]
 800e89a:	b2db      	uxtb	r3, r3
 800e89c:	4a17      	ldr	r2, [pc, #92]	; (800e8fc <FATFS_LinkDriverEx+0x94>)
 800e89e:	009b      	lsls	r3, r3, #2
 800e8a0:	4413      	add	r3, r2
 800e8a2:	68fa      	ldr	r2, [r7, #12]
 800e8a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e8a6:	4b15      	ldr	r3, [pc, #84]	; (800e8fc <FATFS_LinkDriverEx+0x94>)
 800e8a8:	7a5b      	ldrb	r3, [r3, #9]
 800e8aa:	b2db      	uxtb	r3, r3
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	4b13      	ldr	r3, [pc, #76]	; (800e8fc <FATFS_LinkDriverEx+0x94>)
 800e8b0:	4413      	add	r3, r2
 800e8b2:	79fa      	ldrb	r2, [r7, #7]
 800e8b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e8b6:	4b11      	ldr	r3, [pc, #68]	; (800e8fc <FATFS_LinkDriverEx+0x94>)
 800e8b8:	7a5b      	ldrb	r3, [r3, #9]
 800e8ba:	b2db      	uxtb	r3, r3
 800e8bc:	1c5a      	adds	r2, r3, #1
 800e8be:	b2d1      	uxtb	r1, r2
 800e8c0:	4a0e      	ldr	r2, [pc, #56]	; (800e8fc <FATFS_LinkDriverEx+0x94>)
 800e8c2:	7251      	strb	r1, [r2, #9]
 800e8c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e8c6:	7dbb      	ldrb	r3, [r7, #22]
 800e8c8:	3330      	adds	r3, #48	; 0x30
 800e8ca:	b2da      	uxtb	r2, r3
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	3301      	adds	r3, #1
 800e8d4:	223a      	movs	r2, #58	; 0x3a
 800e8d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e8d8:	68bb      	ldr	r3, [r7, #8]
 800e8da:	3302      	adds	r3, #2
 800e8dc:	222f      	movs	r2, #47	; 0x2f
 800e8de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	3303      	adds	r3, #3
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e8ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	371c      	adds	r7, #28
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f8:	4770      	bx	lr
 800e8fa:	bf00      	nop
 800e8fc:	20001770 	.word	0x20001770

0800e900 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b082      	sub	sp, #8
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e90a:	2200      	movs	r2, #0
 800e90c:	6839      	ldr	r1, [r7, #0]
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f7ff ffaa 	bl	800e868 <FATFS_LinkDriverEx>
 800e914:	4603      	mov	r3, r0
}
 800e916:	4618      	mov	r0, r3
 800e918:	3708      	adds	r7, #8
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
	...

0800e920 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e924:	2201      	movs	r2, #1
 800e926:	490e      	ldr	r1, [pc, #56]	; (800e960 <MX_USB_HOST_Init+0x40>)
 800e928:	480e      	ldr	r0, [pc, #56]	; (800e964 <MX_USB_HOST_Init+0x44>)
 800e92a:	f7fc f819 	bl	800a960 <USBH_Init>
 800e92e:	4603      	mov	r3, r0
 800e930:	2b00      	cmp	r3, #0
 800e932:	d001      	beq.n	800e938 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e934:	f7f2 fccc 	bl	80012d0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800e938:	490b      	ldr	r1, [pc, #44]	; (800e968 <MX_USB_HOST_Init+0x48>)
 800e93a:	480a      	ldr	r0, [pc, #40]	; (800e964 <MX_USB_HOST_Init+0x44>)
 800e93c:	f7fc f89e 	bl	800aa7c <USBH_RegisterClass>
 800e940:	4603      	mov	r3, r0
 800e942:	2b00      	cmp	r3, #0
 800e944:	d001      	beq.n	800e94a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e946:	f7f2 fcc3 	bl	80012d0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e94a:	4806      	ldr	r0, [pc, #24]	; (800e964 <MX_USB_HOST_Init+0x44>)
 800e94c:	f7fc f922 	bl	800ab94 <USBH_Start>
 800e950:	4603      	mov	r3, r0
 800e952:	2b00      	cmp	r3, #0
 800e954:	d001      	beq.n	800e95a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e956:	f7f2 fcbb 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e95a:	bf00      	nop
 800e95c:	bd80      	pop	{r7, pc}
 800e95e:	bf00      	nop
 800e960:	0800e981 	.word	0x0800e981
 800e964:	2000177c 	.word	0x2000177c
 800e968:	20000078 	.word	0x20000078

0800e96c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800e970:	4802      	ldr	r0, [pc, #8]	; (800e97c <MX_USB_HOST_Process+0x10>)
 800e972:	f7fc f91f 	bl	800abb4 <USBH_Process>
}
 800e976:	bf00      	nop
 800e978:	bd80      	pop	{r7, pc}
 800e97a:	bf00      	nop
 800e97c:	2000177c 	.word	0x2000177c

0800e980 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e980:	b480      	push	{r7}
 800e982:	b083      	sub	sp, #12
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	460b      	mov	r3, r1
 800e98a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e98c:	78fb      	ldrb	r3, [r7, #3]
 800e98e:	3b01      	subs	r3, #1
 800e990:	2b04      	cmp	r3, #4
 800e992:	d819      	bhi.n	800e9c8 <USBH_UserProcess+0x48>
 800e994:	a201      	add	r2, pc, #4	; (adr r2, 800e99c <USBH_UserProcess+0x1c>)
 800e996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e99a:	bf00      	nop
 800e99c:	0800e9c9 	.word	0x0800e9c9
 800e9a0:	0800e9b9 	.word	0x0800e9b9
 800e9a4:	0800e9c9 	.word	0x0800e9c9
 800e9a8:	0800e9c1 	.word	0x0800e9c1
 800e9ac:	0800e9b1 	.word	0x0800e9b1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e9b0:	4b09      	ldr	r3, [pc, #36]	; (800e9d8 <USBH_UserProcess+0x58>)
 800e9b2:	2203      	movs	r2, #3
 800e9b4:	701a      	strb	r2, [r3, #0]
  break;
 800e9b6:	e008      	b.n	800e9ca <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e9b8:	4b07      	ldr	r3, [pc, #28]	; (800e9d8 <USBH_UserProcess+0x58>)
 800e9ba:	2202      	movs	r2, #2
 800e9bc:	701a      	strb	r2, [r3, #0]
  break;
 800e9be:	e004      	b.n	800e9ca <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e9c0:	4b05      	ldr	r3, [pc, #20]	; (800e9d8 <USBH_UserProcess+0x58>)
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	701a      	strb	r2, [r3, #0]
  break;
 800e9c6:	e000      	b.n	800e9ca <USBH_UserProcess+0x4a>

  default:
  break;
 800e9c8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e9ca:	bf00      	nop
 800e9cc:	370c      	adds	r7, #12
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d4:	4770      	bx	lr
 800e9d6:	bf00      	nop
 800e9d8:	20001b54 	.word	0x20001b54

0800e9dc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b08a      	sub	sp, #40	; 0x28
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e9e4:	f107 0314 	add.w	r3, r7, #20
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	601a      	str	r2, [r3, #0]
 800e9ec:	605a      	str	r2, [r3, #4]
 800e9ee:	609a      	str	r2, [r3, #8]
 800e9f0:	60da      	str	r2, [r3, #12]
 800e9f2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e9fc:	d147      	bne.n	800ea8e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e9fe:	2300      	movs	r3, #0
 800ea00:	613b      	str	r3, [r7, #16]
 800ea02:	4b25      	ldr	r3, [pc, #148]	; (800ea98 <HAL_HCD_MspInit+0xbc>)
 800ea04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea06:	4a24      	ldr	r2, [pc, #144]	; (800ea98 <HAL_HCD_MspInit+0xbc>)
 800ea08:	f043 0301 	orr.w	r3, r3, #1
 800ea0c:	6313      	str	r3, [r2, #48]	; 0x30
 800ea0e:	4b22      	ldr	r3, [pc, #136]	; (800ea98 <HAL_HCD_MspInit+0xbc>)
 800ea10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea12:	f003 0301 	and.w	r3, r3, #1
 800ea16:	613b      	str	r3, [r7, #16]
 800ea18:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ea1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ea1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ea20:	2300      	movs	r3, #0
 800ea22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea24:	2300      	movs	r3, #0
 800ea26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ea28:	f107 0314 	add.w	r3, r7, #20
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	481b      	ldr	r0, [pc, #108]	; (800ea9c <HAL_HCD_MspInit+0xc0>)
 800ea30:	f7f4 f9ec 	bl	8002e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ea34:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ea38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea3a:	2302      	movs	r3, #2
 800ea3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea42:	2303      	movs	r3, #3
 800ea44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ea46:	230a      	movs	r3, #10
 800ea48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ea4a:	f107 0314 	add.w	r3, r7, #20
 800ea4e:	4619      	mov	r1, r3
 800ea50:	4812      	ldr	r0, [pc, #72]	; (800ea9c <HAL_HCD_MspInit+0xc0>)
 800ea52:	f7f4 f9db 	bl	8002e0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ea56:	4b10      	ldr	r3, [pc, #64]	; (800ea98 <HAL_HCD_MspInit+0xbc>)
 800ea58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea5a:	4a0f      	ldr	r2, [pc, #60]	; (800ea98 <HAL_HCD_MspInit+0xbc>)
 800ea5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea60:	6353      	str	r3, [r2, #52]	; 0x34
 800ea62:	2300      	movs	r3, #0
 800ea64:	60fb      	str	r3, [r7, #12]
 800ea66:	4b0c      	ldr	r3, [pc, #48]	; (800ea98 <HAL_HCD_MspInit+0xbc>)
 800ea68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea6a:	4a0b      	ldr	r2, [pc, #44]	; (800ea98 <HAL_HCD_MspInit+0xbc>)
 800ea6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ea70:	6453      	str	r3, [r2, #68]	; 0x44
 800ea72:	4b09      	ldr	r3, [pc, #36]	; (800ea98 <HAL_HCD_MspInit+0xbc>)
 800ea74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ea7a:	60fb      	str	r3, [r7, #12]
 800ea7c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ea7e:	2200      	movs	r2, #0
 800ea80:	2100      	movs	r1, #0
 800ea82:	2043      	movs	r0, #67	; 0x43
 800ea84:	f7f3 fdab 	bl	80025de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ea88:	2043      	movs	r0, #67	; 0x43
 800ea8a:	f7f3 fdc4 	bl	8002616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ea8e:	bf00      	nop
 800ea90:	3728      	adds	r7, #40	; 0x28
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}
 800ea96:	bf00      	nop
 800ea98:	40023800 	.word	0x40023800
 800ea9c:	40020000 	.word	0x40020000

0800eaa0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7fc fc5f 	bl	800b372 <USBH_LL_IncTimer>
}
 800eab4:	bf00      	nop
 800eab6:	3708      	adds	r7, #8
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}

0800eabc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b082      	sub	sp, #8
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7fc fc97 	bl	800b3fe <USBH_LL_Connect>
}
 800ead0:	bf00      	nop
 800ead2:	3708      	adds	r7, #8
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7fc fca0 	bl	800b42c <USBH_LL_Disconnect>
}
 800eaec:	bf00      	nop
 800eaee:	3708      	adds	r7, #8
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}

0800eaf4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b083      	sub	sp, #12
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	460b      	mov	r3, r1
 800eafe:	70fb      	strb	r3, [r7, #3]
 800eb00:	4613      	mov	r3, r2
 800eb02:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800eb04:	bf00      	nop
 800eb06:	370c      	adds	r7, #12
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr

0800eb10 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b082      	sub	sp, #8
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7fc fc51 	bl	800b3c6 <USBH_LL_PortEnabled>
}
 800eb24:	bf00      	nop
 800eb26:	3708      	adds	r7, #8
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b082      	sub	sp, #8
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f7fc fc51 	bl	800b3e2 <USBH_LL_PortDisabled>
}
 800eb40:	bf00      	nop
 800eb42:	3708      	adds	r7, #8
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}

0800eb48 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b082      	sub	sp, #8
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800eb56:	2b01      	cmp	r3, #1
 800eb58:	d12a      	bne.n	800ebb0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800eb5a:	4a18      	ldr	r2, [pc, #96]	; (800ebbc <USBH_LL_Init+0x74>)
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	4a15      	ldr	r2, [pc, #84]	; (800ebbc <USBH_LL_Init+0x74>)
 800eb66:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800eb6a:	4b14      	ldr	r3, [pc, #80]	; (800ebbc <USBH_LL_Init+0x74>)
 800eb6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800eb70:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800eb72:	4b12      	ldr	r3, [pc, #72]	; (800ebbc <USBH_LL_Init+0x74>)
 800eb74:	2208      	movs	r2, #8
 800eb76:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800eb78:	4b10      	ldr	r3, [pc, #64]	; (800ebbc <USBH_LL_Init+0x74>)
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800eb7e:	4b0f      	ldr	r3, [pc, #60]	; (800ebbc <USBH_LL_Init+0x74>)
 800eb80:	2200      	movs	r2, #0
 800eb82:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800eb84:	4b0d      	ldr	r3, [pc, #52]	; (800ebbc <USBH_LL_Init+0x74>)
 800eb86:	2202      	movs	r2, #2
 800eb88:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eb8a:	4b0c      	ldr	r3, [pc, #48]	; (800ebbc <USBH_LL_Init+0x74>)
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800eb90:	480a      	ldr	r0, [pc, #40]	; (800ebbc <USBH_LL_Init+0x74>)
 800eb92:	f7f4 fbf8 	bl	8003386 <HAL_HCD_Init>
 800eb96:	4603      	mov	r3, r0
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d001      	beq.n	800eba0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800eb9c:	f7f2 fb98 	bl	80012d0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800eba0:	4806      	ldr	r0, [pc, #24]	; (800ebbc <USBH_LL_Init+0x74>)
 800eba2:	f7f4 ffdc 	bl	8003b5e <HAL_HCD_GetCurrentFrame>
 800eba6:	4603      	mov	r3, r0
 800eba8:	4619      	mov	r1, r3
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f7fc fbd2 	bl	800b354 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ebb0:	2300      	movs	r3, #0
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3708      	adds	r7, #8
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}
 800ebba:	bf00      	nop
 800ebbc:	20001b58 	.word	0x20001b58

0800ebc0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b084      	sub	sp, #16
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7f4 ff4b 	bl	8003a72 <HAL_HCD_Start>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ebe0:	7bfb      	ldrb	r3, [r7, #15]
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f000 f982 	bl	800eeec <USBH_Get_USB_Status>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebec:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3710      	adds	r7, #16
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}

0800ebf6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ebf6:	b580      	push	{r7, lr}
 800ebf8:	b084      	sub	sp, #16
 800ebfa:	af00      	add	r7, sp, #0
 800ebfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ec02:	2300      	movs	r3, #0
 800ec04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f7f4 ff53 	bl	8003ab8 <HAL_HCD_Stop>
 800ec12:	4603      	mov	r3, r0
 800ec14:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ec16:	7bfb      	ldrb	r3, [r7, #15]
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f000 f967 	bl	800eeec <USBH_Get_USB_Status>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec22:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3710      	adds	r7, #16
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b084      	sub	sp, #16
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ec34:	2301      	movs	r3, #1
 800ec36:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f7f4 ff9b 	bl	8003b7a <HAL_HCD_GetCurrentSpeed>
 800ec44:	4603      	mov	r3, r0
 800ec46:	2b02      	cmp	r3, #2
 800ec48:	d00c      	beq.n	800ec64 <USBH_LL_GetSpeed+0x38>
 800ec4a:	2b02      	cmp	r3, #2
 800ec4c:	d80d      	bhi.n	800ec6a <USBH_LL_GetSpeed+0x3e>
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d002      	beq.n	800ec58 <USBH_LL_GetSpeed+0x2c>
 800ec52:	2b01      	cmp	r3, #1
 800ec54:	d003      	beq.n	800ec5e <USBH_LL_GetSpeed+0x32>
 800ec56:	e008      	b.n	800ec6a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ec5c:	e008      	b.n	800ec70 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ec5e:	2301      	movs	r3, #1
 800ec60:	73fb      	strb	r3, [r7, #15]
    break;
 800ec62:	e005      	b.n	800ec70 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ec64:	2302      	movs	r3, #2
 800ec66:	73fb      	strb	r3, [r7, #15]
    break;
 800ec68:	e002      	b.n	800ec70 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	73fb      	strb	r3, [r7, #15]
    break;
 800ec6e:	bf00      	nop
  }
  return  speed;
 800ec70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec72:	4618      	mov	r0, r3
 800ec74:	3710      	adds	r7, #16
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}

0800ec7a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ec7a:	b580      	push	{r7, lr}
 800ec7c:	b084      	sub	sp, #16
 800ec7e:	af00      	add	r7, sp, #0
 800ec80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec82:	2300      	movs	r3, #0
 800ec84:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ec86:	2300      	movs	r3, #0
 800ec88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ec90:	4618      	mov	r0, r3
 800ec92:	f7f4 ff2e 	bl	8003af2 <HAL_HCD_ResetPort>
 800ec96:	4603      	mov	r3, r0
 800ec98:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ec9a:	7bfb      	ldrb	r3, [r7, #15]
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f000 f925 	bl	800eeec <USBH_Get_USB_Status>
 800eca2:	4603      	mov	r3, r0
 800eca4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eca6:	7bbb      	ldrb	r3, [r7, #14]
}
 800eca8:	4618      	mov	r0, r3
 800ecaa:	3710      	adds	r7, #16
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}

0800ecb0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	460b      	mov	r3, r1
 800ecba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ecc2:	78fa      	ldrb	r2, [r7, #3]
 800ecc4:	4611      	mov	r1, r2
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7f4 ff35 	bl	8003b36 <HAL_HCD_HC_GetXferCount>
 800eccc:	4603      	mov	r3, r0
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3708      	adds	r7, #8
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}

0800ecd6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ecd6:	b590      	push	{r4, r7, lr}
 800ecd8:	b089      	sub	sp, #36	; 0x24
 800ecda:	af04      	add	r7, sp, #16
 800ecdc:	6078      	str	r0, [r7, #4]
 800ecde:	4608      	mov	r0, r1
 800ece0:	4611      	mov	r1, r2
 800ece2:	461a      	mov	r2, r3
 800ece4:	4603      	mov	r3, r0
 800ece6:	70fb      	strb	r3, [r7, #3]
 800ece8:	460b      	mov	r3, r1
 800ecea:	70bb      	strb	r3, [r7, #2]
 800ecec:	4613      	mov	r3, r2
 800ecee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ecfe:	787c      	ldrb	r4, [r7, #1]
 800ed00:	78ba      	ldrb	r2, [r7, #2]
 800ed02:	78f9      	ldrb	r1, [r7, #3]
 800ed04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ed06:	9302      	str	r3, [sp, #8]
 800ed08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ed0c:	9301      	str	r3, [sp, #4]
 800ed0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ed12:	9300      	str	r3, [sp, #0]
 800ed14:	4623      	mov	r3, r4
 800ed16:	f7f4 fb98 	bl	800344a <HAL_HCD_HC_Init>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ed1e:	7bfb      	ldrb	r3, [r7, #15]
 800ed20:	4618      	mov	r0, r3
 800ed22:	f000 f8e3 	bl	800eeec <USBH_Get_USB_Status>
 800ed26:	4603      	mov	r3, r0
 800ed28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3714      	adds	r7, #20
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd90      	pop	{r4, r7, pc}

0800ed34 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b084      	sub	sp, #16
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	460b      	mov	r3, r1
 800ed3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed40:	2300      	movs	r3, #0
 800ed42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ed44:	2300      	movs	r3, #0
 800ed46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ed4e:	78fa      	ldrb	r2, [r7, #3]
 800ed50:	4611      	mov	r1, r2
 800ed52:	4618      	mov	r0, r3
 800ed54:	f7f4 fc08 	bl	8003568 <HAL_HCD_HC_Halt>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ed5c:	7bfb      	ldrb	r3, [r7, #15]
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f000 f8c4 	bl	800eeec <USBH_Get_USB_Status>
 800ed64:	4603      	mov	r3, r0
 800ed66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed68:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3710      	adds	r7, #16
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}

0800ed72 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ed72:	b590      	push	{r4, r7, lr}
 800ed74:	b089      	sub	sp, #36	; 0x24
 800ed76:	af04      	add	r7, sp, #16
 800ed78:	6078      	str	r0, [r7, #4]
 800ed7a:	4608      	mov	r0, r1
 800ed7c:	4611      	mov	r1, r2
 800ed7e:	461a      	mov	r2, r3
 800ed80:	4603      	mov	r3, r0
 800ed82:	70fb      	strb	r3, [r7, #3]
 800ed84:	460b      	mov	r3, r1
 800ed86:	70bb      	strb	r3, [r7, #2]
 800ed88:	4613      	mov	r3, r2
 800ed8a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ed90:	2300      	movs	r3, #0
 800ed92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ed9a:	787c      	ldrb	r4, [r7, #1]
 800ed9c:	78ba      	ldrb	r2, [r7, #2]
 800ed9e:	78f9      	ldrb	r1, [r7, #3]
 800eda0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800eda4:	9303      	str	r3, [sp, #12]
 800eda6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eda8:	9302      	str	r3, [sp, #8]
 800edaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edac:	9301      	str	r3, [sp, #4]
 800edae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800edb2:	9300      	str	r3, [sp, #0]
 800edb4:	4623      	mov	r3, r4
 800edb6:	f7f4 fbfb 	bl	80035b0 <HAL_HCD_HC_SubmitRequest>
 800edba:	4603      	mov	r3, r0
 800edbc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800edbe:	7bfb      	ldrb	r3, [r7, #15]
 800edc0:	4618      	mov	r0, r3
 800edc2:	f000 f893 	bl	800eeec <USBH_Get_USB_Status>
 800edc6:	4603      	mov	r3, r0
 800edc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edca:	7bbb      	ldrb	r3, [r7, #14]
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3714      	adds	r7, #20
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd90      	pop	{r4, r7, pc}

0800edd4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b082      	sub	sp, #8
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
 800eddc:	460b      	mov	r3, r1
 800edde:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ede6:	78fa      	ldrb	r2, [r7, #3]
 800ede8:	4611      	mov	r1, r2
 800edea:	4618      	mov	r0, r3
 800edec:	f7f4 fe8f 	bl	8003b0e <HAL_HCD_HC_GetURBState>
 800edf0:	4603      	mov	r3, r0
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	3708      	adds	r7, #8
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}

0800edfa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800edfa:	b580      	push	{r7, lr}
 800edfc:	b082      	sub	sp, #8
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6078      	str	r0, [r7, #4]
 800ee02:	460b      	mov	r3, r1
 800ee04:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800ee06:	20c8      	movs	r0, #200	; 0xc8
 800ee08:	f7f3 faea 	bl	80023e0 <HAL_Delay>
  return USBH_OK;
 800ee0c:	2300      	movs	r3, #0
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	3708      	adds	r7, #8
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}

0800ee16 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ee16:	b480      	push	{r7}
 800ee18:	b085      	sub	sp, #20
 800ee1a:	af00      	add	r7, sp, #0
 800ee1c:	6078      	str	r0, [r7, #4]
 800ee1e:	460b      	mov	r3, r1
 800ee20:	70fb      	strb	r3, [r7, #3]
 800ee22:	4613      	mov	r3, r2
 800ee24:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ee2c:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ee2e:	78fb      	ldrb	r3, [r7, #3]
 800ee30:	68fa      	ldr	r2, [r7, #12]
 800ee32:	212c      	movs	r1, #44	; 0x2c
 800ee34:	fb01 f303 	mul.w	r3, r1, r3
 800ee38:	4413      	add	r3, r2
 800ee3a:	333b      	adds	r3, #59	; 0x3b
 800ee3c:	781b      	ldrb	r3, [r3, #0]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d009      	beq.n	800ee56 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ee42:	78fb      	ldrb	r3, [r7, #3]
 800ee44:	68fa      	ldr	r2, [r7, #12]
 800ee46:	212c      	movs	r1, #44	; 0x2c
 800ee48:	fb01 f303 	mul.w	r3, r1, r3
 800ee4c:	4413      	add	r3, r2
 800ee4e:	3354      	adds	r3, #84	; 0x54
 800ee50:	78ba      	ldrb	r2, [r7, #2]
 800ee52:	701a      	strb	r2, [r3, #0]
 800ee54:	e008      	b.n	800ee68 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ee56:	78fb      	ldrb	r3, [r7, #3]
 800ee58:	68fa      	ldr	r2, [r7, #12]
 800ee5a:	212c      	movs	r1, #44	; 0x2c
 800ee5c:	fb01 f303 	mul.w	r3, r1, r3
 800ee60:	4413      	add	r3, r2
 800ee62:	3355      	adds	r3, #85	; 0x55
 800ee64:	78ba      	ldrb	r2, [r7, #2]
 800ee66:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ee68:	2300      	movs	r3, #0
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3714      	adds	r7, #20
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee74:	4770      	bx	lr

0800ee76 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ee76:	b480      	push	{r7}
 800ee78:	b085      	sub	sp, #20
 800ee7a:	af00      	add	r7, sp, #0
 800ee7c:	6078      	str	r0, [r7, #4]
 800ee7e:	460b      	mov	r3, r1
 800ee80:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800ee82:	2300      	movs	r3, #0
 800ee84:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ee8c:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800ee8e:	78fb      	ldrb	r3, [r7, #3]
 800ee90:	68ba      	ldr	r2, [r7, #8]
 800ee92:	212c      	movs	r1, #44	; 0x2c
 800ee94:	fb01 f303 	mul.w	r3, r1, r3
 800ee98:	4413      	add	r3, r2
 800ee9a:	333b      	adds	r3, #59	; 0x3b
 800ee9c:	781b      	ldrb	r3, [r3, #0]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d009      	beq.n	800eeb6 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800eea2:	78fb      	ldrb	r3, [r7, #3]
 800eea4:	68ba      	ldr	r2, [r7, #8]
 800eea6:	212c      	movs	r1, #44	; 0x2c
 800eea8:	fb01 f303 	mul.w	r3, r1, r3
 800eeac:	4413      	add	r3, r2
 800eeae:	3354      	adds	r3, #84	; 0x54
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	73fb      	strb	r3, [r7, #15]
 800eeb4:	e008      	b.n	800eec8 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800eeb6:	78fb      	ldrb	r3, [r7, #3]
 800eeb8:	68ba      	ldr	r2, [r7, #8]
 800eeba:	212c      	movs	r1, #44	; 0x2c
 800eebc:	fb01 f303 	mul.w	r3, r1, r3
 800eec0:	4413      	add	r3, r2
 800eec2:	3355      	adds	r3, #85	; 0x55
 800eec4:	781b      	ldrb	r3, [r3, #0]
 800eec6:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800eec8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	3714      	adds	r7, #20
 800eece:	46bd      	mov	sp, r7
 800eed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed4:	4770      	bx	lr

0800eed6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800eed6:	b580      	push	{r7, lr}
 800eed8:	b082      	sub	sp, #8
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f7f3 fa7e 	bl	80023e0 <HAL_Delay>
}
 800eee4:	bf00      	nop
 800eee6:	3708      	adds	r7, #8
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}

0800eeec <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b085      	sub	sp, #20
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	4603      	mov	r3, r0
 800eef4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eef6:	2300      	movs	r3, #0
 800eef8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800eefa:	79fb      	ldrb	r3, [r7, #7]
 800eefc:	2b03      	cmp	r3, #3
 800eefe:	d817      	bhi.n	800ef30 <USBH_Get_USB_Status+0x44>
 800ef00:	a201      	add	r2, pc, #4	; (adr r2, 800ef08 <USBH_Get_USB_Status+0x1c>)
 800ef02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef06:	bf00      	nop
 800ef08:	0800ef19 	.word	0x0800ef19
 800ef0c:	0800ef1f 	.word	0x0800ef1f
 800ef10:	0800ef25 	.word	0x0800ef25
 800ef14:	0800ef2b 	.word	0x0800ef2b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ef18:	2300      	movs	r3, #0
 800ef1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ef1c:	e00b      	b.n	800ef36 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ef1e:	2302      	movs	r3, #2
 800ef20:	73fb      	strb	r3, [r7, #15]
    break;
 800ef22:	e008      	b.n	800ef36 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ef24:	2301      	movs	r3, #1
 800ef26:	73fb      	strb	r3, [r7, #15]
    break;
 800ef28:	e005      	b.n	800ef36 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ef2a:	2302      	movs	r3, #2
 800ef2c:	73fb      	strb	r3, [r7, #15]
    break;
 800ef2e:	e002      	b.n	800ef36 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ef30:	2302      	movs	r3, #2
 800ef32:	73fb      	strb	r3, [r7, #15]
    break;
 800ef34:	bf00      	nop
  }
  return usb_status;
 800ef36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3714      	adds	r7, #20
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef42:	4770      	bx	lr

0800ef44 <__errno>:
 800ef44:	4b01      	ldr	r3, [pc, #4]	; (800ef4c <__errno+0x8>)
 800ef46:	6818      	ldr	r0, [r3, #0]
 800ef48:	4770      	bx	lr
 800ef4a:	bf00      	nop
 800ef4c:	20000098 	.word	0x20000098

0800ef50 <__libc_init_array>:
 800ef50:	b570      	push	{r4, r5, r6, lr}
 800ef52:	4d0d      	ldr	r5, [pc, #52]	; (800ef88 <__libc_init_array+0x38>)
 800ef54:	4c0d      	ldr	r4, [pc, #52]	; (800ef8c <__libc_init_array+0x3c>)
 800ef56:	1b64      	subs	r4, r4, r5
 800ef58:	10a4      	asrs	r4, r4, #2
 800ef5a:	2600      	movs	r6, #0
 800ef5c:	42a6      	cmp	r6, r4
 800ef5e:	d109      	bne.n	800ef74 <__libc_init_array+0x24>
 800ef60:	4d0b      	ldr	r5, [pc, #44]	; (800ef90 <__libc_init_array+0x40>)
 800ef62:	4c0c      	ldr	r4, [pc, #48]	; (800ef94 <__libc_init_array+0x44>)
 800ef64:	f000 f93c 	bl	800f1e0 <_init>
 800ef68:	1b64      	subs	r4, r4, r5
 800ef6a:	10a4      	asrs	r4, r4, #2
 800ef6c:	2600      	movs	r6, #0
 800ef6e:	42a6      	cmp	r6, r4
 800ef70:	d105      	bne.n	800ef7e <__libc_init_array+0x2e>
 800ef72:	bd70      	pop	{r4, r5, r6, pc}
 800ef74:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef78:	4798      	blx	r3
 800ef7a:	3601      	adds	r6, #1
 800ef7c:	e7ee      	b.n	800ef5c <__libc_init_array+0xc>
 800ef7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef82:	4798      	blx	r3
 800ef84:	3601      	adds	r6, #1
 800ef86:	e7f2      	b.n	800ef6e <__libc_init_array+0x1e>
 800ef88:	0800f364 	.word	0x0800f364
 800ef8c:	0800f364 	.word	0x0800f364
 800ef90:	0800f364 	.word	0x0800f364
 800ef94:	0800f368 	.word	0x0800f368

0800ef98 <malloc>:
 800ef98:	4b02      	ldr	r3, [pc, #8]	; (800efa4 <malloc+0xc>)
 800ef9a:	4601      	mov	r1, r0
 800ef9c:	6818      	ldr	r0, [r3, #0]
 800ef9e:	f000 b88d 	b.w	800f0bc <_malloc_r>
 800efa2:	bf00      	nop
 800efa4:	20000098 	.word	0x20000098

0800efa8 <free>:
 800efa8:	4b02      	ldr	r3, [pc, #8]	; (800efb4 <free+0xc>)
 800efaa:	4601      	mov	r1, r0
 800efac:	6818      	ldr	r0, [r3, #0]
 800efae:	f000 b819 	b.w	800efe4 <_free_r>
 800efb2:	bf00      	nop
 800efb4:	20000098 	.word	0x20000098

0800efb8 <memcpy>:
 800efb8:	440a      	add	r2, r1
 800efba:	4291      	cmp	r1, r2
 800efbc:	f100 33ff 	add.w	r3, r0, #4294967295
 800efc0:	d100      	bne.n	800efc4 <memcpy+0xc>
 800efc2:	4770      	bx	lr
 800efc4:	b510      	push	{r4, lr}
 800efc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800efce:	4291      	cmp	r1, r2
 800efd0:	d1f9      	bne.n	800efc6 <memcpy+0xe>
 800efd2:	bd10      	pop	{r4, pc}

0800efd4 <memset>:
 800efd4:	4402      	add	r2, r0
 800efd6:	4603      	mov	r3, r0
 800efd8:	4293      	cmp	r3, r2
 800efda:	d100      	bne.n	800efde <memset+0xa>
 800efdc:	4770      	bx	lr
 800efde:	f803 1b01 	strb.w	r1, [r3], #1
 800efe2:	e7f9      	b.n	800efd8 <memset+0x4>

0800efe4 <_free_r>:
 800efe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800efe6:	2900      	cmp	r1, #0
 800efe8:	d044      	beq.n	800f074 <_free_r+0x90>
 800efea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efee:	9001      	str	r0, [sp, #4]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	f1a1 0404 	sub.w	r4, r1, #4
 800eff6:	bfb8      	it	lt
 800eff8:	18e4      	addlt	r4, r4, r3
 800effa:	f000 f8e3 	bl	800f1c4 <__malloc_lock>
 800effe:	4a1e      	ldr	r2, [pc, #120]	; (800f078 <_free_r+0x94>)
 800f000:	9801      	ldr	r0, [sp, #4]
 800f002:	6813      	ldr	r3, [r2, #0]
 800f004:	b933      	cbnz	r3, 800f014 <_free_r+0x30>
 800f006:	6063      	str	r3, [r4, #4]
 800f008:	6014      	str	r4, [r2, #0]
 800f00a:	b003      	add	sp, #12
 800f00c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f010:	f000 b8de 	b.w	800f1d0 <__malloc_unlock>
 800f014:	42a3      	cmp	r3, r4
 800f016:	d908      	bls.n	800f02a <_free_r+0x46>
 800f018:	6825      	ldr	r5, [r4, #0]
 800f01a:	1961      	adds	r1, r4, r5
 800f01c:	428b      	cmp	r3, r1
 800f01e:	bf01      	itttt	eq
 800f020:	6819      	ldreq	r1, [r3, #0]
 800f022:	685b      	ldreq	r3, [r3, #4]
 800f024:	1949      	addeq	r1, r1, r5
 800f026:	6021      	streq	r1, [r4, #0]
 800f028:	e7ed      	b.n	800f006 <_free_r+0x22>
 800f02a:	461a      	mov	r2, r3
 800f02c:	685b      	ldr	r3, [r3, #4]
 800f02e:	b10b      	cbz	r3, 800f034 <_free_r+0x50>
 800f030:	42a3      	cmp	r3, r4
 800f032:	d9fa      	bls.n	800f02a <_free_r+0x46>
 800f034:	6811      	ldr	r1, [r2, #0]
 800f036:	1855      	adds	r5, r2, r1
 800f038:	42a5      	cmp	r5, r4
 800f03a:	d10b      	bne.n	800f054 <_free_r+0x70>
 800f03c:	6824      	ldr	r4, [r4, #0]
 800f03e:	4421      	add	r1, r4
 800f040:	1854      	adds	r4, r2, r1
 800f042:	42a3      	cmp	r3, r4
 800f044:	6011      	str	r1, [r2, #0]
 800f046:	d1e0      	bne.n	800f00a <_free_r+0x26>
 800f048:	681c      	ldr	r4, [r3, #0]
 800f04a:	685b      	ldr	r3, [r3, #4]
 800f04c:	6053      	str	r3, [r2, #4]
 800f04e:	4421      	add	r1, r4
 800f050:	6011      	str	r1, [r2, #0]
 800f052:	e7da      	b.n	800f00a <_free_r+0x26>
 800f054:	d902      	bls.n	800f05c <_free_r+0x78>
 800f056:	230c      	movs	r3, #12
 800f058:	6003      	str	r3, [r0, #0]
 800f05a:	e7d6      	b.n	800f00a <_free_r+0x26>
 800f05c:	6825      	ldr	r5, [r4, #0]
 800f05e:	1961      	adds	r1, r4, r5
 800f060:	428b      	cmp	r3, r1
 800f062:	bf04      	itt	eq
 800f064:	6819      	ldreq	r1, [r3, #0]
 800f066:	685b      	ldreq	r3, [r3, #4]
 800f068:	6063      	str	r3, [r4, #4]
 800f06a:	bf04      	itt	eq
 800f06c:	1949      	addeq	r1, r1, r5
 800f06e:	6021      	streq	r1, [r4, #0]
 800f070:	6054      	str	r4, [r2, #4]
 800f072:	e7ca      	b.n	800f00a <_free_r+0x26>
 800f074:	b003      	add	sp, #12
 800f076:	bd30      	pop	{r4, r5, pc}
 800f078:	20001e5c 	.word	0x20001e5c

0800f07c <sbrk_aligned>:
 800f07c:	b570      	push	{r4, r5, r6, lr}
 800f07e:	4e0e      	ldr	r6, [pc, #56]	; (800f0b8 <sbrk_aligned+0x3c>)
 800f080:	460c      	mov	r4, r1
 800f082:	6831      	ldr	r1, [r6, #0]
 800f084:	4605      	mov	r5, r0
 800f086:	b911      	cbnz	r1, 800f08e <sbrk_aligned+0x12>
 800f088:	f000 f88c 	bl	800f1a4 <_sbrk_r>
 800f08c:	6030      	str	r0, [r6, #0]
 800f08e:	4621      	mov	r1, r4
 800f090:	4628      	mov	r0, r5
 800f092:	f000 f887 	bl	800f1a4 <_sbrk_r>
 800f096:	1c43      	adds	r3, r0, #1
 800f098:	d00a      	beq.n	800f0b0 <sbrk_aligned+0x34>
 800f09a:	1cc4      	adds	r4, r0, #3
 800f09c:	f024 0403 	bic.w	r4, r4, #3
 800f0a0:	42a0      	cmp	r0, r4
 800f0a2:	d007      	beq.n	800f0b4 <sbrk_aligned+0x38>
 800f0a4:	1a21      	subs	r1, r4, r0
 800f0a6:	4628      	mov	r0, r5
 800f0a8:	f000 f87c 	bl	800f1a4 <_sbrk_r>
 800f0ac:	3001      	adds	r0, #1
 800f0ae:	d101      	bne.n	800f0b4 <sbrk_aligned+0x38>
 800f0b0:	f04f 34ff 	mov.w	r4, #4294967295
 800f0b4:	4620      	mov	r0, r4
 800f0b6:	bd70      	pop	{r4, r5, r6, pc}
 800f0b8:	20001e60 	.word	0x20001e60

0800f0bc <_malloc_r>:
 800f0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0c0:	1ccd      	adds	r5, r1, #3
 800f0c2:	f025 0503 	bic.w	r5, r5, #3
 800f0c6:	3508      	adds	r5, #8
 800f0c8:	2d0c      	cmp	r5, #12
 800f0ca:	bf38      	it	cc
 800f0cc:	250c      	movcc	r5, #12
 800f0ce:	2d00      	cmp	r5, #0
 800f0d0:	4607      	mov	r7, r0
 800f0d2:	db01      	blt.n	800f0d8 <_malloc_r+0x1c>
 800f0d4:	42a9      	cmp	r1, r5
 800f0d6:	d905      	bls.n	800f0e4 <_malloc_r+0x28>
 800f0d8:	230c      	movs	r3, #12
 800f0da:	603b      	str	r3, [r7, #0]
 800f0dc:	2600      	movs	r6, #0
 800f0de:	4630      	mov	r0, r6
 800f0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0e4:	4e2e      	ldr	r6, [pc, #184]	; (800f1a0 <_malloc_r+0xe4>)
 800f0e6:	f000 f86d 	bl	800f1c4 <__malloc_lock>
 800f0ea:	6833      	ldr	r3, [r6, #0]
 800f0ec:	461c      	mov	r4, r3
 800f0ee:	bb34      	cbnz	r4, 800f13e <_malloc_r+0x82>
 800f0f0:	4629      	mov	r1, r5
 800f0f2:	4638      	mov	r0, r7
 800f0f4:	f7ff ffc2 	bl	800f07c <sbrk_aligned>
 800f0f8:	1c43      	adds	r3, r0, #1
 800f0fa:	4604      	mov	r4, r0
 800f0fc:	d14d      	bne.n	800f19a <_malloc_r+0xde>
 800f0fe:	6834      	ldr	r4, [r6, #0]
 800f100:	4626      	mov	r6, r4
 800f102:	2e00      	cmp	r6, #0
 800f104:	d140      	bne.n	800f188 <_malloc_r+0xcc>
 800f106:	6823      	ldr	r3, [r4, #0]
 800f108:	4631      	mov	r1, r6
 800f10a:	4638      	mov	r0, r7
 800f10c:	eb04 0803 	add.w	r8, r4, r3
 800f110:	f000 f848 	bl	800f1a4 <_sbrk_r>
 800f114:	4580      	cmp	r8, r0
 800f116:	d13a      	bne.n	800f18e <_malloc_r+0xd2>
 800f118:	6821      	ldr	r1, [r4, #0]
 800f11a:	3503      	adds	r5, #3
 800f11c:	1a6d      	subs	r5, r5, r1
 800f11e:	f025 0503 	bic.w	r5, r5, #3
 800f122:	3508      	adds	r5, #8
 800f124:	2d0c      	cmp	r5, #12
 800f126:	bf38      	it	cc
 800f128:	250c      	movcc	r5, #12
 800f12a:	4629      	mov	r1, r5
 800f12c:	4638      	mov	r0, r7
 800f12e:	f7ff ffa5 	bl	800f07c <sbrk_aligned>
 800f132:	3001      	adds	r0, #1
 800f134:	d02b      	beq.n	800f18e <_malloc_r+0xd2>
 800f136:	6823      	ldr	r3, [r4, #0]
 800f138:	442b      	add	r3, r5
 800f13a:	6023      	str	r3, [r4, #0]
 800f13c:	e00e      	b.n	800f15c <_malloc_r+0xa0>
 800f13e:	6822      	ldr	r2, [r4, #0]
 800f140:	1b52      	subs	r2, r2, r5
 800f142:	d41e      	bmi.n	800f182 <_malloc_r+0xc6>
 800f144:	2a0b      	cmp	r2, #11
 800f146:	d916      	bls.n	800f176 <_malloc_r+0xba>
 800f148:	1961      	adds	r1, r4, r5
 800f14a:	42a3      	cmp	r3, r4
 800f14c:	6025      	str	r5, [r4, #0]
 800f14e:	bf18      	it	ne
 800f150:	6059      	strne	r1, [r3, #4]
 800f152:	6863      	ldr	r3, [r4, #4]
 800f154:	bf08      	it	eq
 800f156:	6031      	streq	r1, [r6, #0]
 800f158:	5162      	str	r2, [r4, r5]
 800f15a:	604b      	str	r3, [r1, #4]
 800f15c:	4638      	mov	r0, r7
 800f15e:	f104 060b 	add.w	r6, r4, #11
 800f162:	f000 f835 	bl	800f1d0 <__malloc_unlock>
 800f166:	f026 0607 	bic.w	r6, r6, #7
 800f16a:	1d23      	adds	r3, r4, #4
 800f16c:	1af2      	subs	r2, r6, r3
 800f16e:	d0b6      	beq.n	800f0de <_malloc_r+0x22>
 800f170:	1b9b      	subs	r3, r3, r6
 800f172:	50a3      	str	r3, [r4, r2]
 800f174:	e7b3      	b.n	800f0de <_malloc_r+0x22>
 800f176:	6862      	ldr	r2, [r4, #4]
 800f178:	42a3      	cmp	r3, r4
 800f17a:	bf0c      	ite	eq
 800f17c:	6032      	streq	r2, [r6, #0]
 800f17e:	605a      	strne	r2, [r3, #4]
 800f180:	e7ec      	b.n	800f15c <_malloc_r+0xa0>
 800f182:	4623      	mov	r3, r4
 800f184:	6864      	ldr	r4, [r4, #4]
 800f186:	e7b2      	b.n	800f0ee <_malloc_r+0x32>
 800f188:	4634      	mov	r4, r6
 800f18a:	6876      	ldr	r6, [r6, #4]
 800f18c:	e7b9      	b.n	800f102 <_malloc_r+0x46>
 800f18e:	230c      	movs	r3, #12
 800f190:	603b      	str	r3, [r7, #0]
 800f192:	4638      	mov	r0, r7
 800f194:	f000 f81c 	bl	800f1d0 <__malloc_unlock>
 800f198:	e7a1      	b.n	800f0de <_malloc_r+0x22>
 800f19a:	6025      	str	r5, [r4, #0]
 800f19c:	e7de      	b.n	800f15c <_malloc_r+0xa0>
 800f19e:	bf00      	nop
 800f1a0:	20001e5c 	.word	0x20001e5c

0800f1a4 <_sbrk_r>:
 800f1a4:	b538      	push	{r3, r4, r5, lr}
 800f1a6:	4d06      	ldr	r5, [pc, #24]	; (800f1c0 <_sbrk_r+0x1c>)
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	4604      	mov	r4, r0
 800f1ac:	4608      	mov	r0, r1
 800f1ae:	602b      	str	r3, [r5, #0]
 800f1b0:	f7f2 fa3c 	bl	800162c <_sbrk>
 800f1b4:	1c43      	adds	r3, r0, #1
 800f1b6:	d102      	bne.n	800f1be <_sbrk_r+0x1a>
 800f1b8:	682b      	ldr	r3, [r5, #0]
 800f1ba:	b103      	cbz	r3, 800f1be <_sbrk_r+0x1a>
 800f1bc:	6023      	str	r3, [r4, #0]
 800f1be:	bd38      	pop	{r3, r4, r5, pc}
 800f1c0:	20001e64 	.word	0x20001e64

0800f1c4 <__malloc_lock>:
 800f1c4:	4801      	ldr	r0, [pc, #4]	; (800f1cc <__malloc_lock+0x8>)
 800f1c6:	f000 b809 	b.w	800f1dc <__retarget_lock_acquire_recursive>
 800f1ca:	bf00      	nop
 800f1cc:	20001e68 	.word	0x20001e68

0800f1d0 <__malloc_unlock>:
 800f1d0:	4801      	ldr	r0, [pc, #4]	; (800f1d8 <__malloc_unlock+0x8>)
 800f1d2:	f000 b804 	b.w	800f1de <__retarget_lock_release_recursive>
 800f1d6:	bf00      	nop
 800f1d8:	20001e68 	.word	0x20001e68

0800f1dc <__retarget_lock_acquire_recursive>:
 800f1dc:	4770      	bx	lr

0800f1de <__retarget_lock_release_recursive>:
 800f1de:	4770      	bx	lr

0800f1e0 <_init>:
 800f1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1e2:	bf00      	nop
 800f1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1e6:	bc08      	pop	{r3}
 800f1e8:	469e      	mov	lr, r3
 800f1ea:	4770      	bx	lr

0800f1ec <_fini>:
 800f1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ee:	bf00      	nop
 800f1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1f2:	bc08      	pop	{r3}
 800f1f4:	469e      	mov	lr, r3
 800f1f6:	4770      	bx	lr
