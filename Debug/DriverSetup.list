
DriverSetup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9f0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0800fb88  0800fb88  0001fb88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fcec  0800fcec  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800fcec  0800fcec  0001fcec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fcf4  0800fcf4  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fcf4  0800fcf4  0001fcf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fcf8  0800fcf8  0001fcf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800fcfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d74  200000fc  0800fdf8  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20001e70  0800fdf8  00021e70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fdfd  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005418  00000000  00000000  0003ff29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  00045348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c8  00000000  00000000  00046a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d628  00000000  00000000  00047f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022472  00000000  00000000  00065540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095476  00000000  00000000  000879b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011ce28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006090  00000000  00000000  0011ce78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800fb70 	.word	0x0800fb70

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	0800fb70 	.word	0x0800fb70

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_uldivmod>:
 8000a84:	b953      	cbnz	r3, 8000a9c <__aeabi_uldivmod+0x18>
 8000a86:	b94a      	cbnz	r2, 8000a9c <__aeabi_uldivmod+0x18>
 8000a88:	2900      	cmp	r1, #0
 8000a8a:	bf08      	it	eq
 8000a8c:	2800      	cmpeq	r0, #0
 8000a8e:	bf1c      	itt	ne
 8000a90:	f04f 31ff 	movne.w	r1, #4294967295
 8000a94:	f04f 30ff 	movne.w	r0, #4294967295
 8000a98:	f000 b974 	b.w	8000d84 <__aeabi_idiv0>
 8000a9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa4:	f000 f806 	bl	8000ab4 <__udivmoddi4>
 8000aa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab0:	b004      	add	sp, #16
 8000ab2:	4770      	bx	lr

08000ab4 <__udivmoddi4>:
 8000ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab8:	9d08      	ldr	r5, [sp, #32]
 8000aba:	4604      	mov	r4, r0
 8000abc:	468e      	mov	lr, r1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d14d      	bne.n	8000b5e <__udivmoddi4+0xaa>
 8000ac2:	428a      	cmp	r2, r1
 8000ac4:	4694      	mov	ip, r2
 8000ac6:	d969      	bls.n	8000b9c <__udivmoddi4+0xe8>
 8000ac8:	fab2 f282 	clz	r2, r2
 8000acc:	b152      	cbz	r2, 8000ae4 <__udivmoddi4+0x30>
 8000ace:	fa01 f302 	lsl.w	r3, r1, r2
 8000ad2:	f1c2 0120 	rsb	r1, r2, #32
 8000ad6:	fa20 f101 	lsr.w	r1, r0, r1
 8000ada:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ade:	ea41 0e03 	orr.w	lr, r1, r3
 8000ae2:	4094      	lsls	r4, r2
 8000ae4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae8:	0c21      	lsrs	r1, r4, #16
 8000aea:	fbbe f6f8 	udiv	r6, lr, r8
 8000aee:	fa1f f78c 	uxth.w	r7, ip
 8000af2:	fb08 e316 	mls	r3, r8, r6, lr
 8000af6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000afa:	fb06 f107 	mul.w	r1, r6, r7
 8000afe:	4299      	cmp	r1, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x64>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b0a:	f080 811f 	bcs.w	8000d4c <__udivmoddi4+0x298>
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	f240 811c 	bls.w	8000d4c <__udivmoddi4+0x298>
 8000b14:	3e02      	subs	r6, #2
 8000b16:	4463      	add	r3, ip
 8000b18:	1a5b      	subs	r3, r3, r1
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b20:	fb08 3310 	mls	r3, r8, r0, r3
 8000b24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b28:	fb00 f707 	mul.w	r7, r0, r7
 8000b2c:	42a7      	cmp	r7, r4
 8000b2e:	d90a      	bls.n	8000b46 <__udivmoddi4+0x92>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b38:	f080 810a 	bcs.w	8000d50 <__udivmoddi4+0x29c>
 8000b3c:	42a7      	cmp	r7, r4
 8000b3e:	f240 8107 	bls.w	8000d50 <__udivmoddi4+0x29c>
 8000b42:	4464      	add	r4, ip
 8000b44:	3802      	subs	r0, #2
 8000b46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b4a:	1be4      	subs	r4, r4, r7
 8000b4c:	2600      	movs	r6, #0
 8000b4e:	b11d      	cbz	r5, 8000b58 <__udivmoddi4+0xa4>
 8000b50:	40d4      	lsrs	r4, r2
 8000b52:	2300      	movs	r3, #0
 8000b54:	e9c5 4300 	strd	r4, r3, [r5]
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d909      	bls.n	8000b76 <__udivmoddi4+0xc2>
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	f000 80ef 	beq.w	8000d46 <__udivmoddi4+0x292>
 8000b68:	2600      	movs	r6, #0
 8000b6a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b6e:	4630      	mov	r0, r6
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	fab3 f683 	clz	r6, r3
 8000b7a:	2e00      	cmp	r6, #0
 8000b7c:	d14a      	bne.n	8000c14 <__udivmoddi4+0x160>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xd4>
 8000b82:	4282      	cmp	r2, r0
 8000b84:	f200 80f9 	bhi.w	8000d7a <__udivmoddi4+0x2c6>
 8000b88:	1a84      	subs	r4, r0, r2
 8000b8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	469e      	mov	lr, r3
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	d0e0      	beq.n	8000b58 <__udivmoddi4+0xa4>
 8000b96:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b9a:	e7dd      	b.n	8000b58 <__udivmoddi4+0xa4>
 8000b9c:	b902      	cbnz	r2, 8000ba0 <__udivmoddi4+0xec>
 8000b9e:	deff      	udf	#255	; 0xff
 8000ba0:	fab2 f282 	clz	r2, r2
 8000ba4:	2a00      	cmp	r2, #0
 8000ba6:	f040 8092 	bne.w	8000cce <__udivmoddi4+0x21a>
 8000baa:	eba1 010c 	sub.w	r1, r1, ip
 8000bae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb2:	fa1f fe8c 	uxth.w	lr, ip
 8000bb6:	2601      	movs	r6, #1
 8000bb8:	0c20      	lsrs	r0, r4, #16
 8000bba:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bbe:	fb07 1113 	mls	r1, r7, r3, r1
 8000bc2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc6:	fb0e f003 	mul.w	r0, lr, r3
 8000bca:	4288      	cmp	r0, r1
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x12c>
 8000bce:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x12a>
 8000bd8:	4288      	cmp	r0, r1
 8000bda:	f200 80cb 	bhi.w	8000d74 <__udivmoddi4+0x2c0>
 8000bde:	4643      	mov	r3, r8
 8000be0:	1a09      	subs	r1, r1, r0
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bf4:	45a6      	cmp	lr, r4
 8000bf6:	d908      	bls.n	8000c0a <__udivmoddi4+0x156>
 8000bf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c00:	d202      	bcs.n	8000c08 <__udivmoddi4+0x154>
 8000c02:	45a6      	cmp	lr, r4
 8000c04:	f200 80bb 	bhi.w	8000d7e <__udivmoddi4+0x2ca>
 8000c08:	4608      	mov	r0, r1
 8000c0a:	eba4 040e 	sub.w	r4, r4, lr
 8000c0e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c12:	e79c      	b.n	8000b4e <__udivmoddi4+0x9a>
 8000c14:	f1c6 0720 	rsb	r7, r6, #32
 8000c18:	40b3      	lsls	r3, r6
 8000c1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c22:	fa20 f407 	lsr.w	r4, r0, r7
 8000c26:	fa01 f306 	lsl.w	r3, r1, r6
 8000c2a:	431c      	orrs	r4, r3
 8000c2c:	40f9      	lsrs	r1, r7
 8000c2e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c32:	fa00 f306 	lsl.w	r3, r0, r6
 8000c36:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c3a:	0c20      	lsrs	r0, r4, #16
 8000c3c:	fa1f fe8c 	uxth.w	lr, ip
 8000c40:	fb09 1118 	mls	r1, r9, r8, r1
 8000c44:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c48:	fb08 f00e 	mul.w	r0, r8, lr
 8000c4c:	4288      	cmp	r0, r1
 8000c4e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b8>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c5c:	f080 8088 	bcs.w	8000d70 <__udivmoddi4+0x2bc>
 8000c60:	4288      	cmp	r0, r1
 8000c62:	f240 8085 	bls.w	8000d70 <__udivmoddi4+0x2bc>
 8000c66:	f1a8 0802 	sub.w	r8, r8, #2
 8000c6a:	4461      	add	r1, ip
 8000c6c:	1a09      	subs	r1, r1, r0
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c74:	fb09 1110 	mls	r1, r9, r0, r1
 8000c78:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c80:	458e      	cmp	lr, r1
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1e2>
 8000c84:	eb1c 0101 	adds.w	r1, ip, r1
 8000c88:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c8c:	d26c      	bcs.n	8000d68 <__udivmoddi4+0x2b4>
 8000c8e:	458e      	cmp	lr, r1
 8000c90:	d96a      	bls.n	8000d68 <__udivmoddi4+0x2b4>
 8000c92:	3802      	subs	r0, #2
 8000c94:	4461      	add	r1, ip
 8000c96:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c9a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c9e:	eba1 010e 	sub.w	r1, r1, lr
 8000ca2:	42a1      	cmp	r1, r4
 8000ca4:	46c8      	mov	r8, r9
 8000ca6:	46a6      	mov	lr, r4
 8000ca8:	d356      	bcc.n	8000d58 <__udivmoddi4+0x2a4>
 8000caa:	d053      	beq.n	8000d54 <__udivmoddi4+0x2a0>
 8000cac:	b15d      	cbz	r5, 8000cc6 <__udivmoddi4+0x212>
 8000cae:	ebb3 0208 	subs.w	r2, r3, r8
 8000cb2:	eb61 010e 	sbc.w	r1, r1, lr
 8000cb6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cba:	fa22 f306 	lsr.w	r3, r2, r6
 8000cbe:	40f1      	lsrs	r1, r6
 8000cc0:	431f      	orrs	r7, r3
 8000cc2:	e9c5 7100 	strd	r7, r1, [r5]
 8000cc6:	2600      	movs	r6, #0
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	f1c2 0320 	rsb	r3, r2, #32
 8000cd2:	40d8      	lsrs	r0, r3
 8000cd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4301      	orrs	r1, r0
 8000ce0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce4:	fa1f fe8c 	uxth.w	lr, ip
 8000ce8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cec:	fb07 3610 	mls	r6, r7, r0, r3
 8000cf0:	0c0b      	lsrs	r3, r1, #16
 8000cf2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cf6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cfa:	429e      	cmp	r6, r3
 8000cfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x260>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d0a:	d22f      	bcs.n	8000d6c <__udivmoddi4+0x2b8>
 8000d0c:	429e      	cmp	r6, r3
 8000d0e:	d92d      	bls.n	8000d6c <__udivmoddi4+0x2b8>
 8000d10:	3802      	subs	r0, #2
 8000d12:	4463      	add	r3, ip
 8000d14:	1b9b      	subs	r3, r3, r6
 8000d16:	b289      	uxth	r1, r1
 8000d18:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d1c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d24:	fb06 f30e 	mul.w	r3, r6, lr
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x28a>
 8000d2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d30:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d34:	d216      	bcs.n	8000d64 <__udivmoddi4+0x2b0>
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d914      	bls.n	8000d64 <__udivmoddi4+0x2b0>
 8000d3a:	3e02      	subs	r6, #2
 8000d3c:	4461      	add	r1, ip
 8000d3e:	1ac9      	subs	r1, r1, r3
 8000d40:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d44:	e738      	b.n	8000bb8 <__udivmoddi4+0x104>
 8000d46:	462e      	mov	r6, r5
 8000d48:	4628      	mov	r0, r5
 8000d4a:	e705      	b.n	8000b58 <__udivmoddi4+0xa4>
 8000d4c:	4606      	mov	r6, r0
 8000d4e:	e6e3      	b.n	8000b18 <__udivmoddi4+0x64>
 8000d50:	4618      	mov	r0, r3
 8000d52:	e6f8      	b.n	8000b46 <__udivmoddi4+0x92>
 8000d54:	454b      	cmp	r3, r9
 8000d56:	d2a9      	bcs.n	8000cac <__udivmoddi4+0x1f8>
 8000d58:	ebb9 0802 	subs.w	r8, r9, r2
 8000d5c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d60:	3801      	subs	r0, #1
 8000d62:	e7a3      	b.n	8000cac <__udivmoddi4+0x1f8>
 8000d64:	4646      	mov	r6, r8
 8000d66:	e7ea      	b.n	8000d3e <__udivmoddi4+0x28a>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	e794      	b.n	8000c96 <__udivmoddi4+0x1e2>
 8000d6c:	4640      	mov	r0, r8
 8000d6e:	e7d1      	b.n	8000d14 <__udivmoddi4+0x260>
 8000d70:	46d0      	mov	r8, sl
 8000d72:	e77b      	b.n	8000c6c <__udivmoddi4+0x1b8>
 8000d74:	3b02      	subs	r3, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	e732      	b.n	8000be0 <__udivmoddi4+0x12c>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e709      	b.n	8000b92 <__udivmoddi4+0xde>
 8000d7e:	4464      	add	r4, ip
 8000d80:	3802      	subs	r0, #2
 8000d82:	e742      	b.n	8000c0a <__udivmoddi4+0x156>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af02      	add	r7, sp, #8
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 8000d9e:	f107 020c 	add.w	r2, r7, #12
 8000da2:	2364      	movs	r3, #100	; 0x64
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2302      	movs	r3, #2
 8000da8:	2194      	movs	r1, #148	; 0x94
 8000daa:	4803      	ldr	r0, [pc, #12]	; (8000db8 <write_register+0x30>)
 8000dac:	f004 fd32 	bl	8005814 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000118 	.word	0x20000118

08000dbc <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af02      	add	r7, sp, #8
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000dcc:	f107 020c 	add.w	r2, r7, #12
 8000dd0:	2364      	movs	r3, #100	; 0x64
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	2194      	movs	r1, #148	; 0x94
 8000dd8:	4807      	ldr	r0, [pc, #28]	; (8000df8 <read_register+0x3c>)
 8000dda:	f004 fd1b 	bl	8005814 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000dde:	2364      	movs	r3, #100	; 0x64
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2301      	movs	r3, #1
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	2194      	movs	r1, #148	; 0x94
 8000de8:	4803      	ldr	r0, [pc, #12]	; (8000df8 <read_register+0x3c>)
 8000dea:	f004 fe11 	bl	8005a10 <HAL_I2C_Master_Receive>
}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000118 	.word	0x20000118

08000dfc <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000dfc:	b084      	sub	sp, #16
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	f107 0c10 	add.w	ip, r7, #16
 8000e08:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000e0c:	4b7b      	ldr	r3, [pc, #492]	; (8000ffc <CS43_Init+0x200>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000e14:	4b79      	ldr	r3, [pc, #484]	; (8000ffc <CS43_Init+0x200>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	69da      	ldr	r2, [r3, #28]
 8000e1a:	4b78      	ldr	r3, [pc, #480]	; (8000ffc <CS43_Init+0x200>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e22:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2110      	movs	r1, #16
 8000e28:	4875      	ldr	r0, [pc, #468]	; (8001000 <CS43_Init+0x204>)
 8000e2a:	f002 ff37 	bl	8003c9c <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000e2e:	4b75      	ldr	r3, [pc, #468]	; (8001004 <CS43_Init+0x208>)
 8000e30:	4618      	mov	r0, r3
 8000e32:	f107 0310 	add.w	r3, r7, #16
 8000e36:	2254      	movs	r2, #84	; 0x54
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f00e fd85 	bl	800f948 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	4619      	mov	r1, r3
 8000e46:	2002      	movs	r0, #2
 8000e48:	f7ff ff9e 	bl	8000d88 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000e50:	797b      	ldrb	r3, [r7, #5]
 8000e52:	f043 0320 	orr.w	r3, r3, #32
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000e5a:	797b      	ldrb	r3, [r7, #5]
 8000e5c:	f043 030c 	orr.w	r3, r3, #12
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000e64:	797b      	ldrb	r3, [r7, #5]
 8000e66:	f043 0303 	orr.w	r3, r3, #3
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	3301      	adds	r3, #1
 8000e72:	4619      	mov	r1, r3
 8000e74:	2004      	movs	r0, #4
 8000e76:	f7ff ff87 	bl	8000d88 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	3301      	adds	r3, #1
 8000e82:	4619      	mov	r1, r3
 8000e84:	2005      	movs	r0, #5
 8000e86:	f7ff ff7f 	bl	8000d88 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	2006      	movs	r0, #6
 8000e90:	f7ff ff94 	bl	8000dbc <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8000e94:	797b      	ldrb	r3, [r7, #5]
 8000e96:	f003 0320 	and.w	r3, r3, #32
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 8000e9e:	797b      	ldrb	r3, [r7, #5]
 8000ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8000ea8:	797b      	ldrb	r3, [r7, #5]
 8000eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000eb2:	797b      	ldrb	r3, [r7, #5]
 8000eb4:	f023 0310 	bic.w	r3, r3, #16
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000ebc:	797b      	ldrb	r3, [r7, #5]
 8000ebe:	f023 0304 	bic.w	r3, r3, #4
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 8000ec6:	797b      	ldrb	r3, [r7, #5]
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000ed0:	797b      	ldrb	r3, [r7, #5]
 8000ed2:	f043 0303 	orr.w	r3, r3, #3
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	3301      	adds	r3, #1
 8000ede:	4619      	mov	r1, r3
 8000ee0:	2006      	movs	r0, #6
 8000ee2:	f7ff ff51 	bl	8000d88 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	3301      	adds	r3, #1
 8000eea:	4619      	mov	r1, r3
 8000eec:	2008      	movs	r0, #8
 8000eee:	f7ff ff65 	bl	8000dbc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000ef2:	797b      	ldrb	r3, [r7, #5]
 8000ef4:	f023 030f 	bic.w	r3, r3, #15
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000efc:	797b      	ldrb	r3, [r7, #5]
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	3301      	adds	r3, #1
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	2008      	movs	r0, #8
 8000f0e:	f7ff ff3b 	bl	8000d88 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	3301      	adds	r3, #1
 8000f16:	4619      	mov	r1, r3
 8000f18:	2009      	movs	r0, #9
 8000f1a:	f7ff ff4f 	bl	8000dbc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000f1e:	797b      	ldrb	r3, [r7, #5]
 8000f20:	f023 030f 	bic.w	r3, r3, #15
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000f28:	797b      	ldrb	r3, [r7, #5]
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	3301      	adds	r3, #1
 8000f36:	4619      	mov	r1, r3
 8000f38:	2009      	movs	r0, #9
 8000f3a:	f7ff ff25 	bl	8000d88 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	3301      	adds	r3, #1
 8000f42:	4619      	mov	r1, r3
 8000f44:	200e      	movs	r0, #14
 8000f46:	f7ff ff39 	bl	8000dbc <read_register>
	if(outputMode == MODE_ANALOG)
 8000f4a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d119      	bne.n	8000f86 <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8000f52:	797b      	ldrb	r3, [r7, #5]
 8000f54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8000f5c:	797b      	ldrb	r3, [r7, #5]
 8000f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 8000f66:	797b      	ldrb	r3, [r7, #5]
 8000f68:	f023 0320 	bic.w	r3, r3, #32
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 8000f70:	797b      	ldrb	r3, [r7, #5]
 8000f72:	f023 0310 	bic.w	r3, r3, #16
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8000f7a:	797b      	ldrb	r3, [r7, #5]
 8000f7c:	f023 0308 	bic.w	r3, r3, #8
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	717b      	strb	r3, [r7, #5]
 8000f84:	e005      	b.n	8000f92 <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 8000f86:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	3301      	adds	r3, #1
 8000f96:	4619      	mov	r1, r3
 8000f98:	200e      	movs	r0, #14
 8000f9a:	f7ff fef5 	bl	8000d88 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	200f      	movs	r0, #15
 8000fa6:	f7ff ff09 	bl	8000dbc <read_register>
	iData[1] = 0x00;
 8000faa:	2300      	movs	r3, #0
 8000fac:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	200f      	movs	r0, #15
 8000fb6:	f7ff fee7 	bl	8000d88 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	2014      	movs	r0, #20
 8000fc6:	f7ff fedf 	bl	8000d88 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	3301      	adds	r3, #1
 8000fce:	4619      	mov	r1, r3
 8000fd0:	2015      	movs	r0, #21
 8000fd2:	f7ff fed9 	bl	8000d88 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	3301      	adds	r3, #1
 8000fda:	4619      	mov	r1, r3
 8000fdc:	201a      	movs	r0, #26
 8000fde:	f7ff fed3 	bl	8000d88 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	201b      	movs	r0, #27
 8000fea:	f7ff fecd 	bl	8000d88 <write_register>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ff8:	b004      	add	sp, #16
 8000ffa:	4770      	bx	lr
 8000ffc:	2000140c 	.word	0x2000140c
 8001000:	40020c00 	.word	0x40020c00
 8001004:	20000118 	.word	0x20000118

08001008 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b03      	cmp	r3, #3
 8001016:	d82b      	bhi.n	8001070 <CS43_Enable_RightLeft+0x68>
 8001018:	a201      	add	r2, pc, #4	; (adr r2, 8001020 <CS43_Enable_RightLeft+0x18>)
 800101a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101e:	bf00      	nop
 8001020:	08001031 	.word	0x08001031
 8001024:	08001041 	.word	0x08001041
 8001028:	08001051 	.word	0x08001051
 800102c:	08001061 	.word	0x08001061
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001030:	23c0      	movs	r3, #192	; 0xc0
 8001032:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001034:	7b7b      	ldrb	r3, [r7, #13]
 8001036:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800103a:	b2db      	uxtb	r3, r3
 800103c:	737b      	strb	r3, [r7, #13]
			break;
 800103e:	e018      	b.n	8001072 <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001044:	7b7b      	ldrb	r3, [r7, #13]
 8001046:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800104a:	b2db      	uxtb	r3, r3
 800104c:	737b      	strb	r3, [r7, #13]
			break;
 800104e:	e010      	b.n	8001072 <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001050:	23c0      	movs	r3, #192	; 0xc0
 8001052:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001054:	7b7b      	ldrb	r3, [r7, #13]
 8001056:	f043 0320 	orr.w	r3, r3, #32
 800105a:	b2db      	uxtb	r3, r3
 800105c:	737b      	strb	r3, [r7, #13]
			break;
 800105e:	e008      	b.n	8001072 <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001064:	7b7b      	ldrb	r3, [r7, #13]
 8001066:	f043 0320 	orr.w	r3, r3, #32
 800106a:	b2db      	uxtb	r3, r3
 800106c:	737b      	strb	r3, [r7, #13]
			break;
 800106e:	e000      	b.n	8001072 <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 8001070:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8001072:	7b7b      	ldrb	r3, [r7, #13]
 8001074:	f043 030c 	orr.w	r3, r3, #12
 8001078:	b2db      	uxtb	r3, r3
 800107a:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 800107c:	7b7b      	ldrb	r3, [r7, #13]
 800107e:	f043 0303 	orr.w	r3, r3, #3
 8001082:	b2db      	uxtb	r3, r3
 8001084:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	3301      	adds	r3, #1
 800108c:	4619      	mov	r1, r3
 800108e:	2004      	movs	r0, #4
 8001090:	f7ff fe7a 	bl	8000d88 <write_register>
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	3319      	adds	r3, #25
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	3301      	adds	r3, #1
 80010b4:	4619      	mov	r1, r3
 80010b6:	2020      	movs	r0, #32
 80010b8:	f7ff fe66 	bl	8000d88 <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	3301      	adds	r3, #1
 80010c2:	4619      	mov	r1, r3
 80010c4:	2021      	movs	r0, #33	; 0x21
 80010c6:	f7ff fe5f 	bl	8000d88 <write_register>
}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b084      	sub	sp, #16
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d019      	beq.n	8001116 <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 80010e2:	23ff      	movs	r3, #255	; 0xff
 80010e4:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	3301      	adds	r3, #1
 80010ec:	4619      	mov	r1, r3
 80010ee:	2004      	movs	r0, #4
 80010f0:	f7ff fe4a 	bl	8000d88 <write_register>
    iData[1] = 0x01;
 80010f4:	2301      	movs	r3, #1
 80010f6:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	3301      	adds	r3, #1
 80010fe:	4619      	mov	r1, r3
 8001100:	2022      	movs	r0, #34	; 0x22
 8001102:	f7ff fe41 	bl	8000d88 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	3301      	adds	r3, #1
 800110c:	4619      	mov	r1, r3
 800110e:	2023      	movs	r0, #35	; 0x23
 8001110:	f7ff fe3a 	bl	8000d88 <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 8001114:	e018      	b.n	8001148 <CS43_SetMute+0x76>
    iData[1] = 0x00;
 8001116:	2300      	movs	r3, #0
 8001118:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	3301      	adds	r3, #1
 8001120:	4619      	mov	r1, r3
 8001122:	2022      	movs	r0, #34	; 0x22
 8001124:	f7ff fe30 	bl	8000d88 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	3301      	adds	r3, #1
 800112e:	4619      	mov	r1, r3
 8001130:	2023      	movs	r0, #35	; 0x23
 8001132:	f7ff fe29 	bl	8000d88 <write_register>
    iData[1] = 0xAF;
 8001136:	23af      	movs	r3, #175	; 0xaf
 8001138:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	3301      	adds	r3, #1
 8001140:	4619      	mov	r1, r3
 8001142:	2004      	movs	r0, #4
 8001144:	f7ff fe20 	bl	8000d88 <write_register>
}
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff ffbb 	bl	80010d2 <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 800115c:	2399      	movs	r3, #153	; 0x99
 800115e:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	3301      	adds	r3, #1
 8001164:	4619      	mov	r1, r3
 8001166:	2000      	movs	r0, #0
 8001168:	f7ff fe0e 	bl	8000d88 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	3301      	adds	r3, #1
 8001174:	4619      	mov	r1, r3
 8001176:	2047      	movs	r0, #71	; 0x47
 8001178:	f7ff fe06 	bl	8000d88 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	3301      	adds	r3, #1
 8001180:	4619      	mov	r1, r3
 8001182:	2032      	movs	r0, #50	; 0x32
 8001184:	f7ff fe1a 	bl	8000dbc <read_register>
	iData[1] |= 0x80;
 8001188:	797b      	ldrb	r3, [r7, #5]
 800118a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800118e:	b2db      	uxtb	r3, r3
 8001190:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	3301      	adds	r3, #1
 8001196:	4619      	mov	r1, r3
 8001198:	2032      	movs	r0, #50	; 0x32
 800119a:	f7ff fdf5 	bl	8000d88 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	3301      	adds	r3, #1
 80011a2:	4619      	mov	r1, r3
 80011a4:	2032      	movs	r0, #50	; 0x32
 80011a6:	f7ff fe09 	bl	8000dbc <read_register>
	iData[1] &= ~(0x80);
 80011aa:	797b      	ldrb	r3, [r7, #5]
 80011ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	3301      	adds	r3, #1
 80011b8:	4619      	mov	r1, r3
 80011ba:	2032      	movs	r0, #50	; 0x32
 80011bc:	f7ff fde4 	bl	8000d88 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80011c0:	2300      	movs	r3, #0
 80011c2:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	3301      	adds	r3, #1
 80011c8:	4619      	mov	r1, r3
 80011ca:	2000      	movs	r0, #0
 80011cc:	f7ff fddc 	bl	8000d88 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 80011d0:	239e      	movs	r3, #158	; 0x9e
 80011d2:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	3301      	adds	r3, #1
 80011d8:	4619      	mov	r1, r3
 80011da:	2002      	movs	r0, #2
 80011dc:	f7ff fdd4 	bl	8000d88 <write_register>
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <CS43_Stop>:

void CS43_Stop(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(1);
 80011ee:	2001      	movs	r0, #1
 80011f0:	f7ff ff6f 	bl	80010d2 <CS43_SetMute>
  iData[1] = 0x04;
 80011f4:	2304      	movs	r3, #4
 80011f6:	717b      	strb	r3, [r7, #5]
  write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	3301      	adds	r3, #1
 80011fc:	4619      	mov	r1, r3
 80011fe:	200e      	movs	r0, #14
 8001200:	f7ff fdc2 	bl	8000d88 <write_register>
	iData[1] = 0x9F;
 8001204:	239f      	movs	r3, #159	; 0x9f
 8001206:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	3301      	adds	r3, #1
 800120c:	4619      	mov	r1, r3
 800120e:	2002      	movs	r0, #2
 8001210:	f7ff fdba 	bl	8000d88 <write_register>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8001224:	2300      	movs	r3, #0
 8001226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800122a:	23ff      	movs	r3, #255	; 0xff
 800122c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  for(index = 0; index < 8; index++)
 8001230:	2300      	movs	r3, #0
 8001232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001236:	e010      	b.n	800125a <audioI2S_pllClockConfig+0x3e>
  {
    if(I2SFreq[index] == audioFreq)
 8001238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800123c:	4a20      	ldr	r2, [pc, #128]	; (80012c0 <audioI2S_pllClockConfig+0xa4>)
 800123e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	429a      	cmp	r2, r3
 8001246:	d103      	bne.n	8001250 <audioI2S_pllClockConfig+0x34>
    {
      freqindex = index;
 8001248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800124c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(index = 0; index < 8; index++)
 8001250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001254:	3301      	adds	r3, #1
 8001256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800125a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800125e:	2b07      	cmp	r3, #7
 8001260:	d9ea      	bls.n	8001238 <audioI2S_pllClockConfig+0x1c>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	4618      	mov	r0, r3
 8001268:	f007 faec 	bl	8008844 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 800126c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001270:	f003 0307 	and.w	r3, r3, #7
 8001274:	2b00      	cmp	r3, #0
 8001276:	d113      	bne.n	80012a0 <audioI2S_pllClockConfig+0x84>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001278:	2301      	movs	r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 800127c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001280:	4a10      	ldr	r2, [pc, #64]	; (80012c4 <audioI2S_pllClockConfig+0xa8>)
 8001282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001286:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8001288:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800128c:	4a0e      	ldr	r2, [pc, #56]	; (80012c8 <audioI2S_pllClockConfig+0xac>)
 800128e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001292:	61bb      	str	r3, [r7, #24]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	4618      	mov	r0, r3
 800129a:	f007 f9e3 	bl	8008664 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 800129e:	e00b      	b.n	80012b8 <audioI2S_pllClockConfig+0x9c>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80012a0:	2301      	movs	r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80012a4:	f44f 7381 	mov.w	r3, #258	; 0x102
 80012a8:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80012aa:	2303      	movs	r3, #3
 80012ac:	61bb      	str	r3, [r7, #24]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	4618      	mov	r0, r3
 80012b4:	f007 f9d6 	bl	8008664 <HAL_RCCEx_PeriphCLKConfig>
}
 80012b8:	bf00      	nop
 80012ba:	3728      	adds	r7, #40	; 0x28
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	0800fbd8 	.word	0x0800fbd8
 80012c4:	0800fbf8 	.word	0x0800fbf8
 80012c8:	0800fc18 	.word	0x0800fc18

080012cc <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 80012d4:	4b1d      	ldr	r3, [pc, #116]	; (800134c <I2S3_freqUpdate+0x80>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a1d      	ldr	r2, [pc, #116]	; (8001350 <I2S3_freqUpdate+0x84>)
 80012da:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <I2S3_freqUpdate+0x80>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	69da      	ldr	r2, [r3, #28]
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <I2S3_freqUpdate+0x80>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012ee:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 80012f0:	4b16      	ldr	r3, [pc, #88]	; (800134c <I2S3_freqUpdate+0x80>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <I2S3_freqUpdate+0x80>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2200      	movs	r2, #0
 80012fe:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <I2S3_freqUpdate+0x80>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8001308:	4b10      	ldr	r3, [pc, #64]	; (800134c <I2S3_freqUpdate+0x80>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <I2S3_freqUpdate+0x80>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001318:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <I2S3_freqUpdate+0x80>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001322:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <I2S3_freqUpdate+0x80>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <I2S3_freqUpdate+0x80>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f005 fd6d 	bl	8006e10 <HAL_I2S_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <I2S3_freqUpdate+0x74>
  {
    return false;
 800133c:	2300      	movs	r3, #0
 800133e:	e000      	b.n	8001342 <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8001340:	2301      	movs	r3, #1
  }
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000016c 	.word	0x2000016c
 8001350:	40003c00 	.word	0x40003c00

08001354 <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <audioI2S_setHandle+0x1c>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6013      	str	r3, [r2, #0]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	2000016c 	.word	0x2000016c

08001374 <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff4d 	bl	800121c <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffa2 	bl	80012cc <I2S3_freqUpdate>
  return true;
 8001388:	2301      	movs	r3, #1
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 800139e:	f7ff fed7 	bl	8001150 <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <audioI2S_play+0x38>)
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013ac:	d203      	bcs.n	80013b6 <audioI2S_play+0x22>
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	085b      	lsrs	r3, r3, #1
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	e001      	b.n	80013ba <audioI2S_play+0x26>
 80013b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ba:	461a      	mov	r2, r3
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	f005 fe67 	bl	8007090 <HAL_I2S_Transmit_DMA>
  return true;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2000016c 	.word	0x2000016c

080013d0 <audioI2S_stop>:

/**
 * @brief Stop audio
 */
void audioI2S_stop(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  CS43_Stop();
 80013d4:	f7ff ff08 	bl	80011e8 <CS43_Stop>
  HAL_I2S_DMAStop(hAudioI2S);
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <audioI2S_stop+0x18>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f005 feff 	bl	80071e0 <HAL_I2S_DMAStop>
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2000016c 	.word	0x2000016c

080013ec <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <HAL_I2S_TxCpltCallback+0x20>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d101      	bne.n	8001402 <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 80013fe:	f000 f91d 	bl	800163c <audioI2S_fullTransfer_Callback>
  }
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40003c00 	.word	0x40003c00

08001410 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a04      	ldr	r2, [pc, #16]	; (8001430 <HAL_I2S_TxHalfCpltCallback+0x20>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d101      	bne.n	8001426 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8001422:	f000 f8ff 	bl	8001624 <audioI2S_halfTransfer_Callback>
  }
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40003c00 	.word	0x40003c00

08001434 <wavPlayer_reset>:
  PLAYER_CONTROL_EndOfFile,
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <wavPlayer_reset+0x1c>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <wavPlayer_reset+0x20>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	200013a4 	.word	0x200013a4
 8001454:	200013ac 	.word	0x200013ac

08001458 <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08e      	sub	sp, #56	; 0x38
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 8001464:	2201      	movs	r2, #1
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	480d      	ldr	r0, [pc, #52]	; (80014a0 <wavPlayer_fileSelect+0x48>)
 800146a:	f00d f917 	bl	800e69c <f_open>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <wavPlayer_fileSelect+0x20>
  {
    return false;
 8001474:	2300      	movs	r3, #0
 8001476:	e00e      	b.n	8001496 <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	f107 010c 	add.w	r1, r7, #12
 8001480:	222c      	movs	r2, #44	; 0x2c
 8001482:	4807      	ldr	r0, [pc, #28]	; (80014a0 <wavPlayer_fileSelect+0x48>)
 8001484:	f00d fac8 	bl	800ea18 <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4a06      	ldr	r2, [pc, #24]	; (80014a4 <wavPlayer_fileSelect+0x4c>)
 800148c:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <wavPlayer_fileSelect+0x50>)
 8001492:	6013      	str	r3, [r2, #0]
  return true;
 8001494:	2301      	movs	r3, #1
}
 8001496:	4618      	mov	r0, r3
 8001498:	3738      	adds	r7, #56	; 0x38
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000170 	.word	0x20000170
 80014a4:	200003a0 	.word	0x200003a0
 80014a8:	200013a8 	.word	0x200013a8

080014ac <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  isFinished = false;
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <wavPlayer_play+0x48>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <wavPlayer_play+0x4c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff5a 	bl	8001374 <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 80014c0:	2100      	movs	r1, #0
 80014c2:	480e      	ldr	r0, [pc, #56]	; (80014fc <wavPlayer_play+0x50>)
 80014c4:	f00d fc8f 	bl	800ede6 <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 80014c8:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <wavPlayer_play+0x54>)
 80014ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ce:	490d      	ldr	r1, [pc, #52]	; (8001504 <wavPlayer_play+0x58>)
 80014d0:	480a      	ldr	r0, [pc, #40]	; (80014fc <wavPlayer_play+0x50>)
 80014d2:	f00d faa1 	bl	800ea18 <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <wavPlayer_play+0x5c>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <wavPlayer_play+0x54>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	4a0a      	ldr	r2, [pc, #40]	; (800150c <wavPlayer_play+0x60>)
 80014e2:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 80014e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014e8:	4806      	ldr	r0, [pc, #24]	; (8001504 <wavPlayer_play+0x58>)
 80014ea:	f7ff ff53 	bl	8001394 <audioI2S_play>
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200013b0 	.word	0x200013b0
 80014f8:	200013a8 	.word	0x200013a8
 80014fc:	20000170 	.word	0x20000170
 8001500:	200013ac 	.word	0x200013ac
 8001504:	200003a4 	.word	0x200003a4
 8001508:	200003a0 	.word	0x200003a0
 800150c:	200013a4 	.word	0x200013a4

08001510 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 8001514:	4b30      	ldr	r3, [pc, #192]	; (80015d8 <wavPlayer_process+0xc8>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b03      	cmp	r3, #3
 800151c:	d859      	bhi.n	80015d2 <wavPlayer_process+0xc2>
 800151e:	a201      	add	r2, pc, #4	; (adr r2, 8001524 <wavPlayer_process+0x14>)
 8001520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001524:	080015d1 	.word	0x080015d1
 8001528:	08001535 	.word	0x08001535
 800152c:	08001577 	.word	0x08001577
 8001530:	080015b9 	.word	0x080015b9
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 8001534:	4b29      	ldr	r3, [pc, #164]	; (80015dc <wavPlayer_process+0xcc>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 800153a:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <wavPlayer_process+0xc8>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8001540:	4b26      	ldr	r3, [pc, #152]	; (80015dc <wavPlayer_process+0xcc>)
 8001542:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001546:	4926      	ldr	r1, [pc, #152]	; (80015e0 <wavPlayer_process+0xd0>)
 8001548:	4826      	ldr	r0, [pc, #152]	; (80015e4 <wavPlayer_process+0xd4>)
 800154a:	f00d fa65 	bl	800ea18 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 800154e:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <wavPlayer_process+0xd8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001556:	d907      	bls.n	8001568 <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 8001558:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <wavPlayer_process+0xd8>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <wavPlayer_process+0xcc>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	4a21      	ldr	r2, [pc, #132]	; (80015e8 <wavPlayer_process+0xd8>)
 8001564:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8001566:	e034      	b.n	80015d2 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8001568:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <wavPlayer_process+0xd8>)
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <wavPlayer_process+0xc8>)
 8001570:	2203      	movs	r2, #3
 8001572:	701a      	strb	r2, [r3, #0]
    break;
 8001574:	e02d      	b.n	80015d2 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <wavPlayer_process+0xcc>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 800157c:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <wavPlayer_process+0xc8>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8001582:	4b16      	ldr	r3, [pc, #88]	; (80015dc <wavPlayer_process+0xcc>)
 8001584:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001588:	4918      	ldr	r1, [pc, #96]	; (80015ec <wavPlayer_process+0xdc>)
 800158a:	4816      	ldr	r0, [pc, #88]	; (80015e4 <wavPlayer_process+0xd4>)
 800158c:	f00d fa44 	bl	800ea18 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8001590:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <wavPlayer_process+0xd8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001598:	d907      	bls.n	80015aa <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <wavPlayer_process+0xd8>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <wavPlayer_process+0xcc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	4a10      	ldr	r2, [pc, #64]	; (80015e8 <wavPlayer_process+0xd8>)
 80015a6:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 80015a8:	e013      	b.n	80015d2 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <wavPlayer_process+0xd8>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <wavPlayer_process+0xc8>)
 80015b2:	2203      	movs	r2, #3
 80015b4:	701a      	strb	r2, [r3, #0]
    break;
 80015b6:	e00c      	b.n	80015d2 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 80015b8:	480a      	ldr	r0, [pc, #40]	; (80015e4 <wavPlayer_process+0xd4>)
 80015ba:	f00d fbea 	bl	800ed92 <f_close>
    wavPlayer_reset();
 80015be:	f7ff ff39 	bl	8001434 <wavPlayer_reset>
    isFinished = true;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <wavPlayer_process+0xe0>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <wavPlayer_process+0xc8>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
    break;
 80015ce:	e000      	b.n	80015d2 <wavPlayer_process+0xc2>
    break;
 80015d0:	bf00      	nop
  }
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200013b1 	.word	0x200013b1
 80015dc:	200013ac 	.word	0x200013ac
 80015e0:	200003a4 	.word	0x200003a4
 80015e4:	20000170 	.word	0x20000170
 80015e8:	200013a4 	.word	0x200013a4
 80015ec:	20000ba4 	.word	0x20000ba4
 80015f0:	200013b0 	.word	0x200013b0

080015f4 <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  audioI2S_stop();
 80015f8:	f7ff feea 	bl	80013d0 <audioI2S_stop>
  isFinished = true;
 80015fc:	4b02      	ldr	r3, [pc, #8]	; (8001608 <wavPlayer_stop+0x14>)
 80015fe:	2201      	movs	r2, #1
 8001600:	701a      	strb	r2, [r3, #0]
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200013b0 	.word	0x200013b0

0800160c <wavPlayer_isFinished>:

/**
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return isFinished;
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <wavPlayer_isFinished+0x14>)
 8001612:	781b      	ldrb	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	200013b0 	.word	0x200013b0

08001624 <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <audioI2S_halfTransfer_Callback+0x14>)
 800162a:	2201      	movs	r2, #1
 800162c:	701a      	strb	r2, [r3, #0]
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	200013b1 	.word	0x200013b1

0800163c <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <audioI2S_fullTransfer_Callback+0x14>)
 8001642:	2202      	movs	r2, #2
 8001644:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	200013b1 	.word	0x200013b1
 8001654:	00000000 	.word	0x00000000

08001658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165a:	b0a7      	sub	sp, #156	; 0x9c
 800165c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800165e:	f001 fb2d 	bl	8002cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001662:	f000 f8e7 	bl	8001834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001666:	f000 f9c9 	bl	80019fc <MX_GPIO_Init>
  MX_DMA_Init();
 800166a:	f000 f9a7 	bl	80019bc <MX_DMA_Init>
  MX_I2C1_Init();
 800166e:	f000 f949 	bl	8001904 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001672:	f000 f975 	bl	8001960 <MX_I2S3_Init>
//  MX_SPI1_Init();
  MX_USB_HOST_Init();
 8001676:	f00d fe1b 	bl	800f2b0 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 800167a:	f008 f96b 	bl	8009954 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  CS43_Init(hi2c1, MODE_I2S);
 800167e:	4e66      	ldr	r6, [pc, #408]	; (8001818 <main+0x1c0>)
 8001680:	2300      	movs	r3, #0
 8001682:	9311      	str	r3, [sp, #68]	; 0x44
 8001684:	4668      	mov	r0, sp
 8001686:	f106 0310 	add.w	r3, r6, #16
 800168a:	2244      	movs	r2, #68	; 0x44
 800168c:	4619      	mov	r1, r3
 800168e:	f00e f95b 	bl	800f948 <memcpy>
 8001692:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001696:	f7ff fbb1 	bl	8000dfc <CS43_Init>
  CS43_SetVolume(255);
 800169a:	20ff      	movs	r0, #255	; 0xff
 800169c:	f7ff fcfe 	bl	800109c <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 80016a0:	2003      	movs	r0, #3
 80016a2:	f7ff fcb1 	bl	8001008 <CS43_Enable_RightLeft>
  audioI2S_setHandle(&hi2s3);
 80016a6:	485d      	ldr	r0, [pc, #372]	; (800181c <main+0x1c4>)
 80016a8:	f7ff fe54 	bl	8001354 <audioI2S_setHandle>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int16_t buffer[3] = {0, 0, 0};
 80016ac:	2300      	movs	r3, #0
 80016ae:	833b      	strh	r3, [r7, #24]
 80016b0:	2300      	movs	r3, #0
 80016b2:	837b      	strh	r3, [r7, #26]
 80016b4:	2300      	movs	r3, #0
 80016b6:	83bb      	strh	r3, [r7, #28]
	BSP_ACCELERO_Init();
 80016b8:	f001 fa12 	bl	8002ae0 <BSP_ACCELERO_Init>
	BSP_ACCELERO_GetXYZ(buffer);
 80016bc:	f107 0318 	add.w	r3, r7, #24
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 facf 	bl	8002c64 <BSP_ACCELERO_GetXYZ>
	double start_acceleration=1;
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	4b55      	ldr	r3, [pc, #340]	; (8001820 <main+0x1c8>)
 80016cc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double bound=0.2;
 80016d0:	a34f      	add	r3, pc, #316	; (adr r3, 8001810 <main+0x1b8>)
 80016d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	int count1=0;
 80016da:	2300      	movs	r3, #0
 80016dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	int count2=0;
 80016de:	2300      	movs	r3, #0
 80016e0:	64bb      	str	r3, [r7, #72]	; 0x48
	int goDown=1;
 80016e2:	2301      	movs	r3, #1
 80016e4:	647b      	str	r3, [r7, #68]	; 0x44
	int state=0;	//1 - ground, 2 - rising, 3 - max height, 4 -
 80016e6:	2300      	movs	r3, #0
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	int array[]={0,0,0};
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
	size_t i = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	643b      	str	r3, [r7, #64]	; 0x40
	const char* FILENAME = "a.wav";
 80016fa:	4b4a      	ldr	r3, [pc, #296]	; (8001824 <main+0x1cc>)
 80016fc:	62bb      	str	r3, [r7, #40]	; 0x28
	//while (Appli_state != APPLICATION_READY) {}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80016fe:	2201      	movs	r2, #1
 8001700:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001704:	4848      	ldr	r0, [pc, #288]	; (8001828 <main+0x1d0>)
 8001706:	f002 fac9 	bl	8003c9c <HAL_GPIO_WritePin>
	  while (1)
	  {

		  BSP_ACCELERO_GetXYZ(buffer);
 800170a:	f107 0318 	add.w	r3, r7, #24
 800170e:	4618      	mov	r0, r3
 8001710:	f001 faa8 	bl	8002c64 <BSP_ACCELERO_GetXYZ>
		  double acceleration=(double)buffer[2]/16/1000.0-start_acceleration;
 8001714:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe feaf 	bl	800047c <__aeabi_i2d>
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	4b42      	ldr	r3, [pc, #264]	; (800182c <main+0x1d4>)
 8001724:	f7ff f83e 	bl	80007a4 <__aeabi_ddiv>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	4b3e      	ldr	r3, [pc, #248]	; (8001830 <main+0x1d8>)
 8001736:	f7ff f835 	bl	80007a4 <__aeabi_ddiv>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4610      	mov	r0, r2
 8001740:	4619      	mov	r1, r3
 8001742:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001746:	f7fe fd4b 	bl	80001e0 <__aeabi_dsub>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	e9c7 2308 	strd	r2, r3, [r7, #32]
		if ((-bound<acceleration) &&  (acceleration<bound)){
 8001752:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8001754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001756:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800175a:	4622      	mov	r2, r4
 800175c:	462b      	mov	r3, r5
 800175e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001762:	f7ff f985 	bl	8000a70 <__aeabi_dcmpgt>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d00b      	beq.n	8001784 <main+0x12c>
 800176c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001770:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001774:	f7ff f95e 	bl	8000a34 <__aeabi_dcmplt>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <main+0x12c>
			array[0] += 1;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	3301      	adds	r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
		}
		if (acceleration < -bound){
 8001784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800178a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001794:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001798:	f7ff f94c 	bl	8000a34 <__aeabi_dcmplt>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00a      	beq.n	80017b8 <main+0x160>
			array[1] += 1;
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	3301      	adds	r3, #1
 80017a6:	613b      	str	r3, [r7, #16]
			if (goDown){
 80017a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <main+0x15c>
				count2+=1;
 80017ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017b0:	3301      	adds	r3, #1
 80017b2:	64bb      	str	r3, [r7, #72]	; 0x48
			}
			goDown=0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (acceleration > bound){
 80017b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017c0:	f7ff f956 	bl	8000a70 <__aeabi_dcmpgt>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00d      	beq.n	80017e6 <main+0x18e>
			array[2] += 1;
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	3301      	adds	r3, #1
 80017ce:	617b      	str	r3, [r7, #20]
			if (!goDown){
 80017d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d105      	bne.n	80017e2 <main+0x18a>
				count1+=1;
 80017d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017d8:	3301      	adds	r3, #1
 80017da:	64fb      	str	r3, [r7, #76]	; 0x4c
				Sound_play(FILENAME);
 80017dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017de:	f000 fa17 	bl	8001c10 <Sound_play>
			}
			goDown=1;
 80017e2:	2301      	movs	r3, #1
 80017e4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if ((count1>=10)&&(count2>=10)){
 80017e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017e8:	2b09      	cmp	r3, #9
 80017ea:	dd08      	ble.n	80017fe <main+0x1a6>
 80017ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017ee:	2b09      	cmp	r3, #9
 80017f0:	dd05      	ble.n	80017fe <main+0x1a6>
			i = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	643b      	str	r3, [r7, #64]	; 0x40
			count1 = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	64fb      	str	r3, [r7, #76]	; 0x4c
			count2 = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	64bb      	str	r3, [r7, #72]	; 0x48
		}
		i += 1;
 80017fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001800:	3301      	adds	r3, #1
 8001802:	643b      	str	r3, [r7, #64]	; 0x40

		HAL_Delay(200);
 8001804:	20c8      	movs	r0, #200	; 0xc8
 8001806:	f001 facb 	bl	8002da0 <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800180a:	f00d fd77 	bl	800f2fc <MX_USB_HOST_Process>
	  {
 800180e:	e77c      	b.n	800170a <main+0xb2>
 8001810:	9999999a 	.word	0x9999999a
 8001814:	3fc99999 	.word	0x3fc99999
 8001818:	200013b8 	.word	0x200013b8
 800181c:	2000140c 	.word	0x2000140c
 8001820:	3ff00000 	.word	0x3ff00000
 8001824:	0800fb88 	.word	0x0800fb88
 8001828:	40020c00 	.word	0x40020c00
 800182c:	40300000 	.word	0x40300000
 8001830:	408f4000 	.word	0x408f4000

08001834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b094      	sub	sp, #80	; 0x50
 8001838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183a:	f107 0320 	add.w	r3, r7, #32
 800183e:	2230      	movs	r2, #48	; 0x30
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f00e f88e 	bl	800f964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	4b27      	ldr	r3, [pc, #156]	; (80018fc <SystemClock_Config+0xc8>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	4a26      	ldr	r2, [pc, #152]	; (80018fc <SystemClock_Config+0xc8>)
 8001862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001866:	6413      	str	r3, [r2, #64]	; 0x40
 8001868:	4b24      	ldr	r3, [pc, #144]	; (80018fc <SystemClock_Config+0xc8>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001874:	2300      	movs	r3, #0
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	4b21      	ldr	r3, [pc, #132]	; (8001900 <SystemClock_Config+0xcc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a20      	ldr	r2, [pc, #128]	; (8001900 <SystemClock_Config+0xcc>)
 800187e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <SystemClock_Config+0xcc>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001890:	2301      	movs	r3, #1
 8001892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001894:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189a:	2302      	movs	r3, #2
 800189c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800189e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018a4:	2304      	movs	r3, #4
 80018a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80018a8:	23c0      	movs	r3, #192	; 0xc0
 80018aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018ac:	2304      	movs	r3, #4
 80018ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80018b0:	2308      	movs	r3, #8
 80018b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b4:	f107 0320 	add.w	r3, r7, #32
 80018b8:	4618      	mov	r0, r3
 80018ba:	f006 fa4f 	bl	8007d5c <HAL_RCC_OscConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018c4:	f000 f9e4 	bl	8001c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c8:	230f      	movs	r3, #15
 80018ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018cc:	2302      	movs	r3, #2
 80018ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018de:	f107 030c 	add.w	r3, r7, #12
 80018e2:	2103      	movs	r1, #3
 80018e4:	4618      	mov	r0, r3
 80018e6:	f006 fcb1 	bl	800824c <HAL_RCC_ClockConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018f0:	f000 f9ce 	bl	8001c90 <Error_Handler>
  }
}
 80018f4:	bf00      	nop
 80018f6:	3750      	adds	r7, #80	; 0x50
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40023800 	.word	0x40023800
 8001900:	40007000 	.word	0x40007000

08001904 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <MX_I2C1_Init+0x50>)
 800190a:	4a13      	ldr	r2, [pc, #76]	; (8001958 <MX_I2C1_Init+0x54>)
 800190c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <MX_I2C1_Init+0x50>)
 8001910:	4a12      	ldr	r2, [pc, #72]	; (800195c <MX_I2C1_Init+0x58>)
 8001912:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <MX_I2C1_Init+0x50>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <MX_I2C1_Init+0x50>)
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <MX_I2C1_Init+0x50>)
 8001922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001926:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <MX_I2C1_Init+0x50>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <MX_I2C1_Init+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <MX_I2C1_Init+0x50>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <MX_I2C1_Init+0x50>)
 800193c:	2200      	movs	r2, #0
 800193e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001940:	4804      	ldr	r0, [pc, #16]	; (8001954 <MX_I2C1_Init+0x50>)
 8001942:	f003 fdf3 	bl	800552c <HAL_I2C_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800194c:	f000 f9a0 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	200013b8 	.word	0x200013b8
 8001958:	40005400 	.word	0x40005400
 800195c:	000186a0 	.word	0x000186a0

08001960 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <MX_I2S3_Init+0x54>)
 8001966:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <MX_I2S3_Init+0x58>)
 8001968:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <MX_I2S3_Init+0x54>)
 800196c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001970:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <MX_I2S3_Init+0x54>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <MX_I2S3_Init+0x54>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800197e:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <MX_I2S3_Init+0x54>)
 8001980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001984:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <MX_I2S3_Init+0x54>)
 8001988:	f64a 4244 	movw	r2, #44100	; 0xac44
 800198c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <MX_I2S3_Init+0x54>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <MX_I2S3_Init+0x54>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <MX_I2S3_Init+0x54>)
 800199c:	2200      	movs	r2, #0
 800199e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80019a0:	4804      	ldr	r0, [pc, #16]	; (80019b4 <MX_I2S3_Init+0x54>)
 80019a2:	f005 fa35 	bl	8006e10 <HAL_I2S_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80019ac:	f000 f970 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	2000140c 	.word	0x2000140c
 80019b8:	40003c00 	.word	0x40003c00

080019bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <MX_DMA_Init+0x3c>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <MX_DMA_Init+0x3c>)
 80019cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <MX_DMA_Init+0x3c>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	2010      	movs	r0, #16
 80019e4:	f001 fadb 	bl	8002f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80019e8:	2010      	movs	r0, #16
 80019ea:	f001 faf4 	bl	8002fd6 <HAL_NVIC_EnableIRQ>

}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800

080019fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	; 0x30
 8001a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a02:	f107 031c 	add.w	r3, r7, #28
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
 8001a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	4b78      	ldr	r3, [pc, #480]	; (8001bf8 <MX_GPIO_Init+0x1fc>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a77      	ldr	r2, [pc, #476]	; (8001bf8 <MX_GPIO_Init+0x1fc>)
 8001a1c:	f043 0310 	orr.w	r3, r3, #16
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b75      	ldr	r3, [pc, #468]	; (8001bf8 <MX_GPIO_Init+0x1fc>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0310 	and.w	r3, r3, #16
 8001a2a:	61bb      	str	r3, [r7, #24]
 8001a2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	4b71      	ldr	r3, [pc, #452]	; (8001bf8 <MX_GPIO_Init+0x1fc>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a70      	ldr	r2, [pc, #448]	; (8001bf8 <MX_GPIO_Init+0x1fc>)
 8001a38:	f043 0304 	orr.w	r3, r3, #4
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b6e      	ldr	r3, [pc, #440]	; (8001bf8 <MX_GPIO_Init+0x1fc>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	4b6a      	ldr	r3, [pc, #424]	; (8001bf8 <MX_GPIO_Init+0x1fc>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a69      	ldr	r2, [pc, #420]	; (8001bf8 <MX_GPIO_Init+0x1fc>)
 8001a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b67      	ldr	r3, [pc, #412]	; (8001bf8 <MX_GPIO_Init+0x1fc>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b63      	ldr	r3, [pc, #396]	; (8001bf8 <MX_GPIO_Init+0x1fc>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a62      	ldr	r2, [pc, #392]	; (8001bf8 <MX_GPIO_Init+0x1fc>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b60      	ldr	r3, [pc, #384]	; (8001bf8 <MX_GPIO_Init+0x1fc>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	4b5c      	ldr	r3, [pc, #368]	; (8001bf8 <MX_GPIO_Init+0x1fc>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a5b      	ldr	r2, [pc, #364]	; (8001bf8 <MX_GPIO_Init+0x1fc>)
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b59      	ldr	r3, [pc, #356]	; (8001bf8 <MX_GPIO_Init+0x1fc>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <MX_GPIO_Init+0x1fc>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a54      	ldr	r2, [pc, #336]	; (8001bf8 <MX_GPIO_Init+0x1fc>)
 8001aa8:	f043 0308 	orr.w	r3, r3, #8
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b52      	ldr	r3, [pc, #328]	; (8001bf8 <MX_GPIO_Init+0x1fc>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2108      	movs	r1, #8
 8001abe:	484f      	ldr	r0, [pc, #316]	; (8001bfc <MX_GPIO_Init+0x200>)
 8001ac0:	f002 f8ec 	bl	8003c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	484d      	ldr	r0, [pc, #308]	; (8001c00 <MX_GPIO_Init+0x204>)
 8001aca:	f002 f8e7 	bl	8003c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001ace:	2201      	movs	r2, #1
 8001ad0:	2102      	movs	r1, #2
 8001ad2:	484b      	ldr	r0, [pc, #300]	; (8001c00 <MX_GPIO_Init+0x204>)
 8001ad4:	f002 f8e2 	bl	8003c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001ade:	4849      	ldr	r0, [pc, #292]	; (8001c04 <MX_GPIO_Init+0x208>)
 8001ae0:	f002 f8dc 	bl	8003c9c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001ae4:	2304      	movs	r3, #4
 8001ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	4619      	mov	r1, r3
 8001af6:	4841      	ldr	r0, [pc, #260]	; (8001bfc <MX_GPIO_Init+0x200>)
 8001af8:	f001 fe68 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001afc:	2308      	movs	r3, #8
 8001afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b00:	2301      	movs	r3, #1
 8001b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001b0c:	f107 031c 	add.w	r3, r7, #28
 8001b10:	4619      	mov	r1, r3
 8001b12:	483a      	ldr	r0, [pc, #232]	; (8001bfc <MX_GPIO_Init+0x200>)
 8001b14:	f001 fe5a 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001b18:	2332      	movs	r3, #50	; 0x32
 8001b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b1c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4833      	ldr	r0, [pc, #204]	; (8001bfc <MX_GPIO_Init+0x200>)
 8001b2e:	f001 fe4d 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC1 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_1;
 8001b32:	2303      	movs	r3, #3
 8001b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b42:	f107 031c 	add.w	r3, r7, #28
 8001b46:	4619      	mov	r1, r3
 8001b48:	482d      	ldr	r0, [pc, #180]	; (8001c00 <MX_GPIO_Init+0x204>)
 8001b4a:	f001 fe3f 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001b4e:	2308      	movs	r3, #8
 8001b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b5e:	2305      	movs	r3, #5
 8001b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001b62:	f107 031c 	add.w	r3, r7, #28
 8001b66:	4619      	mov	r1, r3
 8001b68:	4825      	ldr	r0, [pc, #148]	; (8001c00 <MX_GPIO_Init+0x204>)
 8001b6a:	f001 fe2f 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	4619      	mov	r1, r3
 8001b82:	4821      	ldr	r0, [pc, #132]	; (8001c08 <MX_GPIO_Init+0x20c>)
 8001b84:	f001 fe22 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001b88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b9a:	2305      	movs	r3, #5
 8001b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9e:	f107 031c 	add.w	r3, r7, #28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4819      	ldr	r0, [pc, #100]	; (8001c0c <MX_GPIO_Init+0x210>)
 8001ba6:	f001 fe11 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001baa:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001bae:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bbc:	f107 031c 	add.w	r3, r7, #28
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4810      	ldr	r0, [pc, #64]	; (8001c04 <MX_GPIO_Init+0x208>)
 8001bc4:	f001 fe02 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001bc8:	2320      	movs	r3, #32
 8001bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bd4:	f107 031c 	add.w	r3, r7, #28
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480a      	ldr	r0, [pc, #40]	; (8001c04 <MX_GPIO_Init+0x208>)
 8001bdc:	f001 fdf6 	bl	80037cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2100      	movs	r1, #0
 8001be4:	2006      	movs	r0, #6
 8001be6:	f001 f9da 	bl	8002f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bea:	2006      	movs	r0, #6
 8001bec:	f001 f9f3 	bl	8002fd6 <HAL_NVIC_EnableIRQ>

}
 8001bf0:	bf00      	nop
 8001bf2:	3730      	adds	r7, #48	; 0x30
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40020800 	.word	0x40020800
 8001c04:	40020c00 	.word	0x40020c00
 8001c08:	40020000 	.word	0x40020000
 8001c0c:	40020400 	.word	0x40020400

08001c10 <Sound_play>:

/* USER CODE BEGIN 4 */

void Sound_play(const char* FILENAME){
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	if(!isUSBMounted)
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <Sound_play+0x70>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d107      	bne.n	8001c30 <Sound_play+0x20>
	  {
		f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	4918      	ldr	r1, [pc, #96]	; (8001c84 <Sound_play+0x74>)
 8001c24:	4818      	ldr	r0, [pc, #96]	; (8001c88 <Sound_play+0x78>)
 8001c26:	f00c fcf3 	bl	800e610 <f_mount>
		isUSBMounted = 1;
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <Sound_play+0x70>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]
	  }
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001c30:	2201      	movs	r2, #1
 8001c32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c36:	4815      	ldr	r0, [pc, #84]	; (8001c8c <Sound_play+0x7c>)
 8001c38:	f002 f830 	bl	8003c9c <HAL_GPIO_WritePin>
		//HAL_Delay(500);
		wavPlayer_fileSelect(FILENAME);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff fc0b 	bl	8001458 <wavPlayer_fileSelect>
		wavPlayer_play();
 8001c42:	f7ff fc33 	bl	80014ac <wavPlayer_play>

		while(!wavPlayer_isFinished())
 8001c46:	e007      	b.n	8001c58 <Sound_play+0x48>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c4e:	480f      	ldr	r0, [pc, #60]	; (8001c8c <Sound_play+0x7c>)
 8001c50:	f002 f824 	bl	8003c9c <HAL_GPIO_WritePin>
		  wavPlayer_process();
 8001c54:	f7ff fc5c 	bl	8001510 <wavPlayer_process>
		while(!wavPlayer_isFinished())
 8001c58:	f7ff fcd8 	bl	800160c <wavPlayer_isFinished>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f083 0301 	eor.w	r3, r3, #1
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1ef      	bne.n	8001c48 <Sound_play+0x38>
		}
		wavPlayer_stop();
 8001c68:	f7ff fcc4 	bl	80015f4 <wavPlayer_stop>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c72:	4806      	ldr	r0, [pc, #24]	; (8001c8c <Sound_play+0x7c>)
 8001c74:	f002 f812 	bl	8003c9c <HAL_GPIO_WritePin>
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	200013b4 	.word	0x200013b4
 8001c84:	20001518 	.word	0x20001518
 8001c88:	2000151c 	.word	0x2000151c
 8001c8c:	40020c00 	.word	0x40020c00

08001c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c94:	b672      	cpsid	i
}
 8001c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <Error_Handler+0x8>
	...

08001c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <HAL_MspInit+0x5c>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <HAL_MspInit+0x5c>)
 8001cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <HAL_MspInit+0x5c>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <HAL_MspInit+0x5c>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	4a0c      	ldr	r2, [pc, #48]	; (8001cf8 <HAL_MspInit+0x5c>)
 8001cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <HAL_MspInit+0x5c>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cda:	2007      	movs	r0, #7
 8001cdc:	f001 f954 	bl	8002f88 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2005      	movs	r0, #5
 8001ce6:	f001 f95a 	bl	8002f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001cea:	2005      	movs	r0, #5
 8001cec:	f001 f973 	bl	8002fd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40023800 	.word	0x40023800

08001cfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a19      	ldr	r2, [pc, #100]	; (8001d80 <HAL_I2C_MspInit+0x84>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d12c      	bne.n	8001d78 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <HAL_I2C_MspInit+0x88>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a17      	ldr	r2, [pc, #92]	; (8001d84 <HAL_I2C_MspInit+0x88>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <HAL_I2C_MspInit+0x88>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001d3a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d40:	2312      	movs	r3, #18
 8001d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d44:	2301      	movs	r3, #1
 8001d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d4c:	2304      	movs	r3, #4
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	4619      	mov	r1, r3
 8001d56:	480c      	ldr	r0, [pc, #48]	; (8001d88 <HAL_I2C_MspInit+0x8c>)
 8001d58:	f001 fd38 	bl	80037cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <HAL_I2C_MspInit+0x88>)
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	4a07      	ldr	r2, [pc, #28]	; (8001d84 <HAL_I2C_MspInit+0x88>)
 8001d66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <HAL_I2C_MspInit+0x88>)
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d78:	bf00      	nop
 8001d7a:	3728      	adds	r7, #40	; 0x28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40005400 	.word	0x40005400
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020400 	.word	0x40020400

08001d8c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <HAL_I2C_MspDeInit+0x38>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d10e      	bne.n	8001dbc <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_I2C_MspDeInit+0x3c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <HAL_I2C_MspDeInit+0x3c>)
 8001da4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001da8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 8001daa:	2140      	movs	r1, #64	; 0x40
 8001dac:	4807      	ldr	r0, [pc, #28]	; (8001dcc <HAL_I2C_MspDeInit+0x40>)
 8001dae:	f001 fe91 	bl	8003ad4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 8001db2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001db6:	4805      	ldr	r0, [pc, #20]	; (8001dcc <HAL_I2C_MspDeInit+0x40>)
 8001db8:	f001 fe8c 	bl	8003ad4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40005400 	.word	0x40005400
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020400 	.word	0x40020400

08001dd0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b090      	sub	sp, #64	; 0x40
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
 8001df8:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI3)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a4f      	ldr	r2, [pc, #316]	; (8001f3c <HAL_I2S_MspInit+0x16c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	f040 8096 	bne.w	8001f32 <HAL_I2S_MspInit+0x162>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001e06:	2301      	movs	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001e0a:	23c8      	movs	r3, #200	; 0xc8
 8001e0c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8001e0e:	2308      	movs	r3, #8
 8001e10:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001e12:	2302      	movs	r3, #2
 8001e14:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f006 fc22 	bl	8008664 <HAL_RCCEx_PeriphCLKConfig>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8001e26:	f7ff ff33 	bl	8001c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	4b44      	ldr	r3, [pc, #272]	; (8001f40 <HAL_I2S_MspInit+0x170>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	4a43      	ldr	r2, [pc, #268]	; (8001f40 <HAL_I2S_MspInit+0x170>)
 8001e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e38:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3a:	4b41      	ldr	r3, [pc, #260]	; (8001f40 <HAL_I2S_MspInit+0x170>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	4b3d      	ldr	r3, [pc, #244]	; (8001f40 <HAL_I2S_MspInit+0x170>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a3c      	ldr	r2, [pc, #240]	; (8001f40 <HAL_I2S_MspInit+0x170>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b3a      	ldr	r3, [pc, #232]	; (8001f40 <HAL_I2S_MspInit+0x170>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <HAL_I2S_MspInit+0x170>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a35      	ldr	r2, [pc, #212]	; (8001f40 <HAL_I2S_MspInit+0x170>)
 8001e6c:	f043 0304 	orr.w	r3, r3, #4
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b33      	ldr	r3, [pc, #204]	; (8001f40 <HAL_I2S_MspInit+0x170>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001e7e:	2310      	movs	r3, #16
 8001e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e8e:	2306      	movs	r3, #6
 8001e90:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001e92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e96:	4619      	mov	r1, r3
 8001e98:	482a      	ldr	r0, [pc, #168]	; (8001f44 <HAL_I2S_MspInit+0x174>)
 8001e9a:	f001 fc97 	bl	80037cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001e9e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eac:	2300      	movs	r3, #0
 8001eae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001eb0:	2306      	movs	r3, #6
 8001eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4823      	ldr	r0, [pc, #140]	; (8001f48 <HAL_I2S_MspInit+0x178>)
 8001ebc:	f001 fc86 	bl	80037cc <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001ec0:	4b22      	ldr	r3, [pc, #136]	; (8001f4c <HAL_I2S_MspInit+0x17c>)
 8001ec2:	4a23      	ldr	r2, [pc, #140]	; (8001f50 <HAL_I2S_MspInit+0x180>)
 8001ec4:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001ec6:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <HAL_I2S_MspInit+0x17c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ecc:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <HAL_I2S_MspInit+0x17c>)
 8001ece:	2240      	movs	r2, #64	; 0x40
 8001ed0:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ed2:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <HAL_I2S_MspInit+0x17c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ed8:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <HAL_I2S_MspInit+0x17c>)
 8001eda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ede:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <HAL_I2S_MspInit+0x17c>)
 8001ee2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ee6:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ee8:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <HAL_I2S_MspInit+0x17c>)
 8001eea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eee:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001ef0:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <HAL_I2S_MspInit+0x17c>)
 8001ef2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ef6:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ef8:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <HAL_I2S_MspInit+0x17c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001efe:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <HAL_I2S_MspInit+0x17c>)
 8001f00:	2204      	movs	r2, #4
 8001f02:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_I2S_MspInit+0x17c>)
 8001f06:	2203      	movs	r2, #3
 8001f08:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001f0a:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <HAL_I2S_MspInit+0x17c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001f10:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <HAL_I2S_MspInit+0x17c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001f16:	480d      	ldr	r0, [pc, #52]	; (8001f4c <HAL_I2S_MspInit+0x17c>)
 8001f18:	f001 f878 	bl	800300c <HAL_DMA_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 8001f22:	f7ff feb5 	bl	8001c90 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a08      	ldr	r2, [pc, #32]	; (8001f4c <HAL_I2S_MspInit+0x17c>)
 8001f2a:	639a      	str	r2, [r3, #56]	; 0x38
 8001f2c:	4a07      	ldr	r2, [pc, #28]	; (8001f4c <HAL_I2S_MspInit+0x17c>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001f32:	bf00      	nop
 8001f34:	3740      	adds	r7, #64	; 0x40
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40003c00 	.word	0x40003c00
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40020000 	.word	0x40020000
 8001f48:	40020800 	.word	0x40020800
 8001f4c:	20001454 	.word	0x20001454
 8001f50:	40026088 	.word	0x40026088

08001f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <NMI_Handler+0x4>

08001f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5e:	e7fe      	b.n	8001f5e <HardFault_Handler+0x4>

08001f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <MemManage_Handler+0x4>

08001f66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6a:	e7fe      	b.n	8001f6a <BusFault_Handler+0x4>

08001f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <UsageFault_Handler+0x4>

08001f72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa0:	f000 fede 	bl	8002d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f001 fe88 	bl	8003cd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <DMA1_Stream5_IRQHandler+0x10>)
 8001fca:	f001 f995 	bl	80032f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20001454 	.word	0x20001454

08001fd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <OTG_FS_IRQHandler+0x10>)
 8001fde:	f002 f905 	bl	80041ec <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20001b5c 	.word	0x20001b5c

08001fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ff4:	4a14      	ldr	r2, [pc, #80]	; (8002048 <_sbrk+0x5c>)
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <_sbrk+0x60>)
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <_sbrk+0x64>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <_sbrk+0x64>)
 800200a:	4a12      	ldr	r2, [pc, #72]	; (8002054 <_sbrk+0x68>)
 800200c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <_sbrk+0x64>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	429a      	cmp	r2, r3
 800201a:	d207      	bcs.n	800202c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800201c:	f00d fc5a 	bl	800f8d4 <__errno>
 8002020:	4603      	mov	r3, r0
 8002022:	220c      	movs	r2, #12
 8002024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002026:	f04f 33ff 	mov.w	r3, #4294967295
 800202a:	e009      	b.n	8002040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800202c:	4b08      	ldr	r3, [pc, #32]	; (8002050 <_sbrk+0x64>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002032:	4b07      	ldr	r3, [pc, #28]	; (8002050 <_sbrk+0x64>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	4a05      	ldr	r2, [pc, #20]	; (8002050 <_sbrk+0x64>)
 800203c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800203e:	68fb      	ldr	r3, [r7, #12]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20020000 	.word	0x20020000
 800204c:	00002000 	.word	0x00002000
 8002050:	200014b4 	.word	0x200014b4
 8002054:	20001e70 	.word	0x20001e70

08002058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <SystemInit+0x20>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002062:	4a05      	ldr	r2, [pc, #20]	; (8002078 <SystemInit+0x20>)
 8002064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800207c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002080:	480d      	ldr	r0, [pc, #52]	; (80020b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002082:	490e      	ldr	r1, [pc, #56]	; (80020bc <LoopFillZerobss+0x1a>)

  ldr r2, =_sidata
 8002084:	4a0e      	ldr	r2, [pc, #56]	; (80020c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002088:	e002      	b.n	8002090 <LoopCopyDataInit>

0800208a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800208c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800208e:	3304      	adds	r3, #4

08002090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002094:	d3f9      	bcc.n	800208a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002096:	4a0b      	ldr	r2, [pc, #44]	; (80020c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002098:	4c0b      	ldr	r4, [pc, #44]	; (80020c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800209a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800209c:	e001      	b.n	80020a2 <LoopFillZerobss>

0800209e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800209e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a0:	3204      	adds	r2, #4

080020a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a4:	d3fb      	bcc.n	800209e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020a6:	f7ff ffd7 	bl	8002058 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020aa:	f00d fc19 	bl	800f8e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ae:	f7ff fad3 	bl	8001658 <main>
  bx  lr    
 80020b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020bc:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80020c0:	0800fcfc 	.word	0x0800fcfc
  ldr r2, =_sbss
 80020c4:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80020c8:	20001e70 	.word	0x20001e70

080020cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020cc:	e7fe      	b.n	80020cc <ADC_IRQHandler>

080020ce <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 80020dc:	f000 fc82 	bl	80029e4 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	461a      	mov	r2, r3
 80020e8:	2120      	movs	r1, #32
 80020ea:	2032      	movs	r0, #50	; 0x32
 80020ec:	f000 fcd2 	bl	8002a94 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 80020f0:	2300      	movs	r3, #0
 80020f2:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	461a      	mov	r2, r3
 80020f8:	2123      	movs	r1, #35	; 0x23
 80020fa:	2032      	movs	r0, #50	; 0x32
 80020fc:	f000 fcca 	bl	8002a94 <COMPASSACCELERO_IO_Write>
}
 8002100:	bf00      	nop
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800211c:	2300      	movs	r3, #0
 800211e:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8002120:	f000 fc60 	bl	80029e4 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 8002124:	210f      	movs	r1, #15
 8002126:	2032      	movs	r0, #50	; 0x32
 8002128:	f000 fcc7 	bl	8002aba <COMPASSACCELERO_IO_Read>
 800212c:	4603      	mov	r3, r0
 800212e:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8002130:	79fb      	ldrb	r3, [r7, #7]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8002140:	2124      	movs	r1, #36	; 0x24
 8002142:	2032      	movs	r0, #50	; 0x32
 8002144:	f000 fcb9 	bl	8002aba <COMPASSACCELERO_IO_Read>
 8002148:	4603      	mov	r3, r0
 800214a:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002152:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	461a      	mov	r2, r3
 8002158:	2124      	movs	r1, #36	; 0x24
 800215a:	2032      	movs	r0, #50	; 0x32
 800215c:	f000 fc9a 	bl	8002a94 <COMPASSACCELERO_IO_Write>
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8002172:	2121      	movs	r1, #33	; 0x21
 8002174:	2032      	movs	r0, #50	; 0x32
 8002176:	f000 fca0 	bl	8002aba <COMPASSACCELERO_IO_Read>
 800217a:	4603      	mov	r3, r0
 800217c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	f003 030c 	and.w	r3, r3, #12
 8002184:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8002186:	7bfa      	ldrb	r2, [r7, #15]
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	4313      	orrs	r3, r2
 800218c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	461a      	mov	r2, r3
 8002192:	2121      	movs	r1, #33	; 0x21
 8002194:	2032      	movs	r0, #50	; 0x32
 8002196:	f000 fc7d 	bl	8002a94 <COMPASSACCELERO_IO_Write>
}
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	4603      	mov	r3, r0
 80021aa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80021ac:	2121      	movs	r1, #33	; 0x21
 80021ae:	2032      	movs	r0, #50	; 0x32
 80021b0:	f000 fc83 	bl	8002aba <COMPASSACCELERO_IO_Read>
 80021b4:	4603      	mov	r3, r0
 80021b6:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	f023 0308 	bic.w	r3, r3, #8
 80021be:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	461a      	mov	r2, r3
 80021cc:	2121      	movs	r1, #33	; 0x21
 80021ce:	2032      	movs	r0, #50	; 0x32
 80021d0:	f000 fc60 	bl	8002a94 <COMPASSACCELERO_IO_Write>
}
 80021d4:	bf00      	nop
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 80021e4:	2300      	movs	r3, #0
 80021e6:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80021ec:	2301      	movs	r3, #1
 80021ee:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 80021f0:	2123      	movs	r1, #35	; 0x23
 80021f2:	2032      	movs	r0, #50	; 0x32
 80021f4:	f000 fc61 	bl	8002aba <COMPASSACCELERO_IO_Read>
 80021f8:	4603      	mov	r3, r0
 80021fa:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 80021fc:	2124      	movs	r1, #36	; 0x24
 80021fe:	2032      	movs	r0, #50	; 0x32
 8002200:	f000 fc5b 	bl	8002aba <COMPASSACCELERO_IO_Read>
 8002204:	4603      	mov	r3, r0
 8002206:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8002208:	2128      	movs	r1, #40	; 0x28
 800220a:	2032      	movs	r0, #50	; 0x32
 800220c:	f000 fc55 	bl	8002aba <COMPASSACCELERO_IO_Read>
 8002210:	4603      	mov	r3, r0
 8002212:	b25b      	sxtb	r3, r3
 8002214:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8002216:	2129      	movs	r1, #41	; 0x29
 8002218:	2032      	movs	r0, #50	; 0x32
 800221a:	f000 fc4e 	bl	8002aba <COMPASSACCELERO_IO_Read>
 800221e:	4603      	mov	r3, r0
 8002220:	b25b      	sxtb	r3, r3
 8002222:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8002224:	212a      	movs	r1, #42	; 0x2a
 8002226:	2032      	movs	r0, #50	; 0x32
 8002228:	f000 fc47 	bl	8002aba <COMPASSACCELERO_IO_Read>
 800222c:	4603      	mov	r3, r0
 800222e:	b25b      	sxtb	r3, r3
 8002230:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 8002232:	212b      	movs	r1, #43	; 0x2b
 8002234:	2032      	movs	r0, #50	; 0x32
 8002236:	f000 fc40 	bl	8002aba <COMPASSACCELERO_IO_Read>
 800223a:	4603      	mov	r3, r0
 800223c:	b25b      	sxtb	r3, r3
 800223e:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 8002240:	212c      	movs	r1, #44	; 0x2c
 8002242:	2032      	movs	r0, #50	; 0x32
 8002244:	f000 fc39 	bl	8002aba <COMPASSACCELERO_IO_Read>
 8002248:	4603      	mov	r3, r0
 800224a:	b25b      	sxtb	r3, r3
 800224c:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 800224e:	212d      	movs	r1, #45	; 0x2d
 8002250:	2032      	movs	r0, #50	; 0x32
 8002252:	f000 fc32 	bl	8002aba <COMPASSACCELERO_IO_Read>
 8002256:	4603      	mov	r3, r0
 8002258:	b25b      	sxtb	r3, r3
 800225a:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 800225c:	7d3b      	ldrb	r3, [r7, #20]
 800225e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d123      	bne.n	80022ae <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8002266:	2300      	movs	r3, #0
 8002268:	77fb      	strb	r3, [r7, #31]
 800226a:	e01c      	b.n	80022a6 <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800226c:	7ffb      	ldrb	r3, [r7, #31]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	3301      	adds	r3, #1
 8002272:	3320      	adds	r3, #32
 8002274:	443b      	add	r3, r7
 8002276:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800227a:	b29b      	uxth	r3, r3
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	b29a      	uxth	r2, r3
 8002280:	7ffb      	ldrb	r3, [r7, #31]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	3320      	adds	r3, #32
 8002286:	443b      	add	r3, r7
 8002288:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800228c:	b29b      	uxth	r3, r3
 800228e:	4413      	add	r3, r2
 8002290:	b29a      	uxth	r2, r3
 8002292:	7ffb      	ldrb	r3, [r7, #31]
 8002294:	b212      	sxth	r2, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	3320      	adds	r3, #32
 800229a:	443b      	add	r3, r7
 800229c:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80022a0:	7ffb      	ldrb	r3, [r7, #31]
 80022a2:	3301      	adds	r3, #1
 80022a4:	77fb      	strb	r3, [r7, #31]
 80022a6:	7ffb      	ldrb	r3, [r7, #31]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d9df      	bls.n	800226c <LSM303AGR_AccReadXYZ+0x90>
 80022ac:	e022      	b.n	80022f4 <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	77fb      	strb	r3, [r7, #31]
 80022b2:	e01c      	b.n	80022ee <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 80022b4:	7ffb      	ldrb	r3, [r7, #31]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	3320      	adds	r3, #32
 80022ba:	443b      	add	r3, r7
 80022bc:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	7ffb      	ldrb	r3, [r7, #31]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	3301      	adds	r3, #1
 80022cc:	3320      	adds	r3, #32
 80022ce:	443b      	add	r3, r7
 80022d0:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	b29a      	uxth	r2, r3
 80022da:	7ffb      	ldrb	r3, [r7, #31]
 80022dc:	b212      	sxth	r2, r2
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	3320      	adds	r3, #32
 80022e2:	443b      	add	r3, r7
 80022e4:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80022e8:	7ffb      	ldrb	r3, [r7, #31]
 80022ea:	3301      	adds	r3, #1
 80022ec:	77fb      	strb	r3, [r7, #31]
 80022ee:	7ffb      	ldrb	r3, [r7, #31]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d9df      	bls.n	80022b4 <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 80022f4:	7d3b      	ldrb	r3, [r7, #20]
 80022f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80022fa:	2b30      	cmp	r3, #48	; 0x30
 80022fc:	d013      	beq.n	8002326 <LSM303AGR_AccReadXYZ+0x14a>
 80022fe:	2b30      	cmp	r3, #48	; 0x30
 8002300:	dc14      	bgt.n	800232c <LSM303AGR_AccReadXYZ+0x150>
 8002302:	2b20      	cmp	r3, #32
 8002304:	d00c      	beq.n	8002320 <LSM303AGR_AccReadXYZ+0x144>
 8002306:	2b20      	cmp	r3, #32
 8002308:	dc10      	bgt.n	800232c <LSM303AGR_AccReadXYZ+0x150>
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <LSM303AGR_AccReadXYZ+0x138>
 800230e:	2b10      	cmp	r3, #16
 8002310:	d003      	beq.n	800231a <LSM303AGR_AccReadXYZ+0x13e>
 8002312:	e00b      	b.n	800232c <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8002314:	2301      	movs	r3, #1
 8002316:	77bb      	strb	r3, [r7, #30]
    break;
 8002318:	e008      	b.n	800232c <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 800231a:	2302      	movs	r3, #2
 800231c:	77bb      	strb	r3, [r7, #30]
    break;
 800231e:	e005      	b.n	800232c <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 8002320:	2304      	movs	r3, #4
 8002322:	77bb      	strb	r3, [r7, #30]
    break;
 8002324:	e002      	b.n	800232c <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 8002326:	230c      	movs	r3, #12
 8002328:	77bb      	strb	r3, [r7, #30]
    break;
 800232a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800232c:	2300      	movs	r3, #0
 800232e:	77fb      	strb	r3, [r7, #31]
 8002330:	e014      	b.n	800235c <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8002332:	7ffb      	ldrb	r3, [r7, #31]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	3320      	adds	r3, #32
 8002338:	443b      	add	r3, r7
 800233a:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 800233e:	b29a      	uxth	r2, r3
 8002340:	7fbb      	ldrb	r3, [r7, #30]
 8002342:	b29b      	uxth	r3, r3
 8002344:	fb12 f303 	smulbb	r3, r2, r3
 8002348:	b299      	uxth	r1, r3
 800234a:	7ffb      	ldrb	r3, [r7, #31]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	b20a      	sxth	r2, r1
 8002354:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002356:	7ffb      	ldrb	r3, [r7, #31]
 8002358:	3301      	adds	r3, #1
 800235a:	77fb      	strb	r3, [r7, #31]
 800235c:	7ffb      	ldrb	r3, [r7, #31]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d9e7      	bls.n	8002332 <LSM303AGR_AccReadXYZ+0x156>
  }
}
 8002362:	bf00      	nop
 8002364:	bf00      	nop
 8002366:	3720      	adds	r7, #32
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800237a:	2121      	movs	r1, #33	; 0x21
 800237c:	2032      	movs	r0, #50	; 0x32
 800237e:	f000 fb9c 	bl	8002aba <COMPASSACCELERO_IO_Read>
 8002382:	4603      	mov	r3, r0
 8002384:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	f023 0304 	bic.w	r3, r3, #4
 800238c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	4313      	orrs	r3, r2
 8002394:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	461a      	mov	r2, r3
 800239a:	2121      	movs	r1, #33	; 0x21
 800239c:	2032      	movs	r0, #50	; 0x32
 800239e:	f000 fb79 	bl	8002a94 <COMPASSACCELERO_IO_Write>
}
 80023a2:	bf00      	nop
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b084      	sub	sp, #16
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	4603      	mov	r3, r0
 80023b2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 80023b8:	2122      	movs	r1, #34	; 0x22
 80023ba:	2032      	movs	r0, #50	; 0x32
 80023bc:	f000 fb7d 	bl	8002aba <COMPASSACCELERO_IO_Read>
 80023c0:	4603      	mov	r3, r0
 80023c2:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	461a      	mov	r2, r3
 80023d0:	2122      	movs	r1, #34	; 0x22
 80023d2:	2032      	movs	r0, #50	; 0x32
 80023d4:	f000 fb5e 	bl	8002a94 <COMPASSACCELERO_IO_Write>
}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80023ea:	2300      	movs	r3, #0
 80023ec:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 80023ee:	2138      	movs	r1, #56	; 0x38
 80023f0:	2032      	movs	r0, #50	; 0x32
 80023f2:	f000 fb62 	bl	8002aba <COMPASSACCELERO_IO_Read>
 80023f6:	4603      	mov	r3, r0
 80023f8:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 80023fa:	7bfa      	ldrb	r2, [r7, #15]
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	4313      	orrs	r3, r2
 8002400:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 8002402:	7bfb      	ldrb	r3, [r7, #15]
 8002404:	461a      	mov	r2, r3
 8002406:	2138      	movs	r1, #56	; 0x38
 8002408:	2032      	movs	r0, #50	; 0x32
 800240a:	f000 fb43 	bl	8002a94 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 800240e:	230a      	movs	r3, #10
 8002410:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	461a      	mov	r2, r3
 8002416:	213a      	movs	r1, #58	; 0x3a
 8002418:	2032      	movs	r0, #50	; 0x32
 800241a:	f000 fb3b 	bl	8002a94 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 800241e:	2305      	movs	r3, #5
 8002420:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	461a      	mov	r2, r3
 8002426:	213b      	movs	r1, #59	; 0x3b
 8002428:	2032      	movs	r0, #50	; 0x32
 800242a:	f000 fb33 	bl	8002a94 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	461a      	mov	r2, r3
 8002432:	213c      	movs	r1, #60	; 0x3c
 8002434:	2032      	movs	r0, #50	; 0x32
 8002436:	f000 fb2d 	bl	8002a94 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 800243a:	2332      	movs	r3, #50	; 0x32
 800243c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	461a      	mov	r2, r3
 8002442:	213d      	movs	r1, #61	; 0x3d
 8002444:	2032      	movs	r0, #50	; 0x32
 8002446:	f000 fb25 	bl	8002a94 <COMPASSACCELERO_IO_Write>
}
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 8002452:	b580      	push	{r7, lr}
 8002454:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8002456:	f000 faed 	bl	8002a34 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 800245a:	2080      	movs	r0, #128	; 0x80
 800245c:	f7ff ffa5 	bl	80023aa <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8002460:	2004      	movs	r0, #4
 8002462:	f7ff ff83 	bl	800236c <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 8002466:	2010      	movs	r0, #16
 8002468:	f7ff ffba 	bl	80023e0 <LSM303AGR_AccClickITEnable>
}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}

08002470 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800247a:	2300      	movs	r3, #0
 800247c:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 800247e:	f000 fab1 	bl	80029e4 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	461a      	mov	r2, r3
 800248a:	2120      	movs	r1, #32
 800248c:	2032      	movs	r0, #50	; 0x32
 800248e:	f000 fb01 	bl	8002a94 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8002492:	2300      	movs	r3, #0
 8002494:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	461a      	mov	r2, r3
 800249a:	2123      	movs	r1, #35	; 0x23
 800249c:	2032      	movs	r0, #50	; 0x32
 800249e:	f000 faf9 	bl	8002a94 <COMPASSACCELERO_IO_Write>
}
 80024a2:	bf00      	nop
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
}
 80024ae:	bf00      	nop
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80024be:	2300      	movs	r3, #0
 80024c0:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 80024c2:	f000 fa8f 	bl	80029e4 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 80024c6:	210f      	movs	r1, #15
 80024c8:	2032      	movs	r0, #50	; 0x32
 80024ca:	f000 faf6 	bl	8002aba <COMPASSACCELERO_IO_Read>
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80024d2:	79fb      	ldrb	r3, [r7, #7]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80024e2:	2124      	movs	r1, #36	; 0x24
 80024e4:	2032      	movs	r0, #50	; 0x32
 80024e6:	f000 fae8 	bl	8002aba <COMPASSACCELERO_IO_Read>
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024f4:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	461a      	mov	r2, r3
 80024fa:	2124      	movs	r1, #36	; 0x24
 80024fc:	2032      	movs	r0, #50	; 0x32
 80024fe:	f000 fac9 	bl	8002a94 <COMPASSACCELERO_IO_Write>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	4603      	mov	r3, r0
 8002512:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8002514:	2121      	movs	r1, #33	; 0x21
 8002516:	2032      	movs	r0, #50	; 0x32
 8002518:	f000 facf 	bl	8002aba <COMPASSACCELERO_IO_Read>
 800251c:	4603      	mov	r3, r0
 800251e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	4313      	orrs	r3, r2
 800252e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	461a      	mov	r2, r3
 8002534:	2121      	movs	r1, #33	; 0x21
 8002536:	2032      	movs	r0, #50	; 0x32
 8002538:	f000 faac 	bl	8002a94 <COMPASSACCELERO_IO_Write>
}
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800254e:	2121      	movs	r1, #33	; 0x21
 8002550:	2032      	movs	r0, #50	; 0x32
 8002552:	f000 fab2 	bl	8002aba <COMPASSACCELERO_IO_Read>
 8002556:	4603      	mov	r3, r0
 8002558:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	f023 0308 	bic.w	r3, r3, #8
 8002560:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	4313      	orrs	r3, r2
 8002568:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	461a      	mov	r2, r3
 800256e:	2121      	movs	r1, #33	; 0x21
 8002570:	2032      	movs	r0, #50	; 0x32
 8002572:	f000 fa8f 	bl	8002a94 <COMPASSACCELERO_IO_Write>
}
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b088      	sub	sp, #32
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8002586:	2300      	movs	r3, #0
 8002588:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 800258e:	2301      	movs	r3, #1
 8002590:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8002592:	2123      	movs	r1, #35	; 0x23
 8002594:	2032      	movs	r0, #50	; 0x32
 8002596:	f000 fa90 	bl	8002aba <COMPASSACCELERO_IO_Read>
 800259a:	4603      	mov	r3, r0
 800259c:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800259e:	2124      	movs	r1, #36	; 0x24
 80025a0:	2032      	movs	r0, #50	; 0x32
 80025a2:	f000 fa8a 	bl	8002aba <COMPASSACCELERO_IO_Read>
 80025a6:	4603      	mov	r3, r0
 80025a8:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 80025aa:	2128      	movs	r1, #40	; 0x28
 80025ac:	2032      	movs	r0, #50	; 0x32
 80025ae:	f000 fa84 	bl	8002aba <COMPASSACCELERO_IO_Read>
 80025b2:	4603      	mov	r3, r0
 80025b4:	b25b      	sxtb	r3, r3
 80025b6:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 80025b8:	2129      	movs	r1, #41	; 0x29
 80025ba:	2032      	movs	r0, #50	; 0x32
 80025bc:	f000 fa7d 	bl	8002aba <COMPASSACCELERO_IO_Read>
 80025c0:	4603      	mov	r3, r0
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 80025c6:	212a      	movs	r1, #42	; 0x2a
 80025c8:	2032      	movs	r0, #50	; 0x32
 80025ca:	f000 fa76 	bl	8002aba <COMPASSACCELERO_IO_Read>
 80025ce:	4603      	mov	r3, r0
 80025d0:	b25b      	sxtb	r3, r3
 80025d2:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 80025d4:	212b      	movs	r1, #43	; 0x2b
 80025d6:	2032      	movs	r0, #50	; 0x32
 80025d8:	f000 fa6f 	bl	8002aba <COMPASSACCELERO_IO_Read>
 80025dc:	4603      	mov	r3, r0
 80025de:	b25b      	sxtb	r3, r3
 80025e0:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 80025e2:	212c      	movs	r1, #44	; 0x2c
 80025e4:	2032      	movs	r0, #50	; 0x32
 80025e6:	f000 fa68 	bl	8002aba <COMPASSACCELERO_IO_Read>
 80025ea:	4603      	mov	r3, r0
 80025ec:	b25b      	sxtb	r3, r3
 80025ee:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 80025f0:	212d      	movs	r1, #45	; 0x2d
 80025f2:	2032      	movs	r0, #50	; 0x32
 80025f4:	f000 fa61 	bl	8002aba <COMPASSACCELERO_IO_Read>
 80025f8:	4603      	mov	r3, r0
 80025fa:	b25b      	sxtb	r3, r3
 80025fc:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 80025fe:	7d3b      	ldrb	r3, [r7, #20]
 8002600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002604:	2b00      	cmp	r3, #0
 8002606:	d123      	bne.n	8002650 <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8002608:	2300      	movs	r3, #0
 800260a:	77fb      	strb	r3, [r7, #31]
 800260c:	e01c      	b.n	8002648 <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800260e:	7ffb      	ldrb	r3, [r7, #31]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	3301      	adds	r3, #1
 8002614:	3320      	adds	r3, #32
 8002616:	443b      	add	r3, r7
 8002618:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800261c:	b29b      	uxth	r3, r3
 800261e:	021b      	lsls	r3, r3, #8
 8002620:	b29a      	uxth	r2, r3
 8002622:	7ffb      	ldrb	r3, [r7, #31]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	3320      	adds	r3, #32
 8002628:	443b      	add	r3, r7
 800262a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800262e:	b29b      	uxth	r3, r3
 8002630:	4413      	add	r3, r2
 8002632:	b29a      	uxth	r2, r3
 8002634:	7ffb      	ldrb	r3, [r7, #31]
 8002636:	b212      	sxth	r2, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	3320      	adds	r3, #32
 800263c:	443b      	add	r3, r7
 800263e:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8002642:	7ffb      	ldrb	r3, [r7, #31]
 8002644:	3301      	adds	r3, #1
 8002646:	77fb      	strb	r3, [r7, #31]
 8002648:	7ffb      	ldrb	r3, [r7, #31]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d9df      	bls.n	800260e <LSM303DLHC_AccReadXYZ+0x90>
 800264e:	e022      	b.n	8002696 <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8002650:	2300      	movs	r3, #0
 8002652:	77fb      	strb	r3, [r7, #31]
 8002654:	e01c      	b.n	8002690 <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8002656:	7ffb      	ldrb	r3, [r7, #31]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	3320      	adds	r3, #32
 800265c:	443b      	add	r3, r7
 800265e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002662:	b29b      	uxth	r3, r3
 8002664:	021b      	lsls	r3, r3, #8
 8002666:	b29a      	uxth	r2, r3
 8002668:	7ffb      	ldrb	r3, [r7, #31]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	3301      	adds	r3, #1
 800266e:	3320      	adds	r3, #32
 8002670:	443b      	add	r3, r7
 8002672:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002676:	b29b      	uxth	r3, r3
 8002678:	4413      	add	r3, r2
 800267a:	b29a      	uxth	r2, r3
 800267c:	7ffb      	ldrb	r3, [r7, #31]
 800267e:	b212      	sxth	r2, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	3320      	adds	r3, #32
 8002684:	443b      	add	r3, r7
 8002686:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 800268a:	7ffb      	ldrb	r3, [r7, #31]
 800268c:	3301      	adds	r3, #1
 800268e:	77fb      	strb	r3, [r7, #31]
 8002690:	7ffb      	ldrb	r3, [r7, #31]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d9df      	bls.n	8002656 <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8002696:	7d3b      	ldrb	r3, [r7, #20]
 8002698:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800269c:	2b30      	cmp	r3, #48	; 0x30
 800269e:	d013      	beq.n	80026c8 <LSM303DLHC_AccReadXYZ+0x14a>
 80026a0:	2b30      	cmp	r3, #48	; 0x30
 80026a2:	dc14      	bgt.n	80026ce <LSM303DLHC_AccReadXYZ+0x150>
 80026a4:	2b20      	cmp	r3, #32
 80026a6:	d00c      	beq.n	80026c2 <LSM303DLHC_AccReadXYZ+0x144>
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	dc10      	bgt.n	80026ce <LSM303DLHC_AccReadXYZ+0x150>
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <LSM303DLHC_AccReadXYZ+0x138>
 80026b0:	2b10      	cmp	r3, #16
 80026b2:	d003      	beq.n	80026bc <LSM303DLHC_AccReadXYZ+0x13e>
 80026b4:	e00b      	b.n	80026ce <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 80026b6:	2301      	movs	r3, #1
 80026b8:	77bb      	strb	r3, [r7, #30]
    break;
 80026ba:	e008      	b.n	80026ce <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 80026bc:	2302      	movs	r3, #2
 80026be:	77bb      	strb	r3, [r7, #30]
    break;
 80026c0:	e005      	b.n	80026ce <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 80026c2:	2304      	movs	r3, #4
 80026c4:	77bb      	strb	r3, [r7, #30]
    break;
 80026c6:	e002      	b.n	80026ce <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 80026c8:	230c      	movs	r3, #12
 80026ca:	77bb      	strb	r3, [r7, #30]
    break;
 80026cc:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80026ce:	2300      	movs	r3, #0
 80026d0:	77fb      	strb	r3, [r7, #31]
 80026d2:	e014      	b.n	80026fe <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80026d4:	7ffb      	ldrb	r3, [r7, #31]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	3320      	adds	r3, #32
 80026da:	443b      	add	r3, r7
 80026dc:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	7fbb      	ldrb	r3, [r7, #30]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	fb12 f303 	smulbb	r3, r2, r3
 80026ea:	b299      	uxth	r1, r3
 80026ec:	7ffb      	ldrb	r3, [r7, #31]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	4413      	add	r3, r2
 80026f4:	b20a      	sxth	r2, r1
 80026f6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80026f8:	7ffb      	ldrb	r3, [r7, #31]
 80026fa:	3301      	adds	r3, #1
 80026fc:	77fb      	strb	r3, [r7, #31]
 80026fe:	7ffb      	ldrb	r3, [r7, #31]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d9e7      	bls.n	80026d4 <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	3720      	adds	r7, #32
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8002718:	2300      	movs	r3, #0
 800271a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800271c:	2121      	movs	r1, #33	; 0x21
 800271e:	2032      	movs	r0, #50	; 0x32
 8002720:	f000 f9cb 	bl	8002aba <COMPASSACCELERO_IO_Read>
 8002724:	4603      	mov	r3, r0
 8002726:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8002728:	7bfb      	ldrb	r3, [r7, #15]
 800272a:	f023 0304 	bic.w	r3, r3, #4
 800272e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8002730:	7bfa      	ldrb	r2, [r7, #15]
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	4313      	orrs	r3, r2
 8002736:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	461a      	mov	r2, r3
 800273c:	2121      	movs	r1, #33	; 0x21
 800273e:	2032      	movs	r0, #50	; 0x32
 8002740:	f000 f9a8 	bl	8002a94 <COMPASSACCELERO_IO_Write>
}
 8002744:	bf00      	nop
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8002756:	2300      	movs	r3, #0
 8002758:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 800275a:	2122      	movs	r1, #34	; 0x22
 800275c:	2032      	movs	r0, #50	; 0x32
 800275e:	f000 f9ac 	bl	8002aba <COMPASSACCELERO_IO_Read>
 8002762:	4603      	mov	r3, r0
 8002764:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8002766:	7bfa      	ldrb	r2, [r7, #15]
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	4313      	orrs	r3, r2
 800276c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	461a      	mov	r2, r3
 8002772:	2122      	movs	r1, #34	; 0x22
 8002774:	2032      	movs	r0, #50	; 0x32
 8002776:	f000 f98d 	bl	8002a94 <COMPASSACCELERO_IO_Write>
}
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800278c:	2300      	movs	r3, #0
 800278e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8002790:	2138      	movs	r1, #56	; 0x38
 8002792:	2032      	movs	r0, #50	; 0x32
 8002794:	f000 f991 	bl	8002aba <COMPASSACCELERO_IO_Read>
 8002798:	4603      	mov	r3, r0
 800279a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 800279c:	7bfa      	ldrb	r2, [r7, #15]
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	461a      	mov	r2, r3
 80027a8:	2138      	movs	r1, #56	; 0x38
 80027aa:	2032      	movs	r0, #50	; 0x32
 80027ac:	f000 f972 	bl	8002a94 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 80027b0:	230a      	movs	r3, #10
 80027b2:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	461a      	mov	r2, r3
 80027b8:	213a      	movs	r1, #58	; 0x3a
 80027ba:	2032      	movs	r0, #50	; 0x32
 80027bc:	f000 f96a 	bl	8002a94 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 80027c0:	2305      	movs	r3, #5
 80027c2:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	461a      	mov	r2, r3
 80027c8:	213b      	movs	r1, #59	; 0x3b
 80027ca:	2032      	movs	r0, #50	; 0x32
 80027cc:	f000 f962 	bl	8002a94 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	461a      	mov	r2, r3
 80027d4:	213c      	movs	r1, #60	; 0x3c
 80027d6:	2032      	movs	r0, #50	; 0x32
 80027d8:	f000 f95c 	bl	8002a94 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 80027dc:	2332      	movs	r3, #50	; 0x32
 80027de:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	461a      	mov	r2, r3
 80027e4:	213d      	movs	r1, #61	; 0x3d
 80027e6:	2032      	movs	r0, #50	; 0x32
 80027e8:	f000 f954 	bl	8002a94 <COMPASSACCELERO_IO_Write>
}
 80027ec:	bf00      	nop
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 80027f8:	f000 f91c 	bl	8002a34 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 80027fc:	2080      	movs	r0, #128	; 0x80
 80027fe:	f7ff ffa5 	bl	800274c <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8002802:	2004      	movs	r0, #4
 8002804:	f7ff ff83 	bl	800270e <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8002808:	2010      	movs	r0, #16
 800280a:	f7ff ffba 	bl	8002782 <LSM303DLHC_AccClickITEnable>
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002818:	4814      	ldr	r0, [pc, #80]	; (800286c <I2Cx_Init+0x58>)
 800281a:	f003 fe3f 	bl	800649c <HAL_I2C_GetState>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d121      	bne.n	8002868 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <I2Cx_Init+0x58>)
 8002826:	4a12      	ldr	r2, [pc, #72]	; (8002870 <I2Cx_Init+0x5c>)
 8002828:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <I2Cx_Init+0x58>)
 800282c:	2243      	movs	r2, #67	; 0x43
 800282e:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8002830:	4b0e      	ldr	r3, [pc, #56]	; (800286c <I2Cx_Init+0x58>)
 8002832:	4a10      	ldr	r2, [pc, #64]	; (8002874 <I2Cx_Init+0x60>)
 8002834:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002836:	4b0d      	ldr	r3, [pc, #52]	; (800286c <I2Cx_Init+0x58>)
 8002838:	2200      	movs	r2, #0
 800283a:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <I2Cx_Init+0x58>)
 800283e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002842:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <I2Cx_Init+0x58>)
 8002846:	2200      	movs	r2, #0
 8002848:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 800284a:	4b08      	ldr	r3, [pc, #32]	; (800286c <I2Cx_Init+0x58>)
 800284c:	2200      	movs	r2, #0
 800284e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <I2Cx_Init+0x58>)
 8002852:	2200      	movs	r2, #0
 8002854:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 8002856:	4b05      	ldr	r3, [pc, #20]	; (800286c <I2Cx_Init+0x58>)
 8002858:	2200      	movs	r2, #0
 800285a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 800285c:	4803      	ldr	r0, [pc, #12]	; (800286c <I2Cx_Init+0x58>)
 800285e:	f000 f86b 	bl	8002938 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8002862:	4802      	ldr	r0, [pc, #8]	; (800286c <I2Cx_Init+0x58>)
 8002864:	f002 fe62 	bl	800552c <HAL_I2C_Init>
  }
}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}
 800286c:	200014b8 	.word	0x200014b8
 8002870:	40005400 	.word	0x40005400
 8002874:	000186a0 	.word	0x000186a0

08002878 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af04      	add	r7, sp, #16
 800287e:	4603      	mov	r3, r0
 8002880:	80fb      	strh	r3, [r7, #6]
 8002882:	460b      	mov	r3, r1
 8002884:	717b      	strb	r3, [r7, #5]
 8002886:	4613      	mov	r3, r2
 8002888:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800288e:	797b      	ldrb	r3, [r7, #5]
 8002890:	b29a      	uxth	r2, r3
 8002892:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <I2Cx_WriteData+0x48>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	88f9      	ldrh	r1, [r7, #6]
 8002898:	9302      	str	r3, [sp, #8]
 800289a:	2301      	movs	r3, #1
 800289c:	9301      	str	r3, [sp, #4]
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	2301      	movs	r3, #1
 80028a4:	4807      	ldr	r0, [pc, #28]	; (80028c4 <I2Cx_WriteData+0x4c>)
 80028a6:	f003 fad9 	bl	8005e5c <HAL_I2C_Mem_Write>
 80028aa:	4603      	mov	r3, r0
 80028ac:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80028b4:	f000 f834 	bl	8002920 <I2Cx_Error>
  }
}
 80028b8:	bf00      	nop
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	2000006c 	.word	0x2000006c
 80028c4:	200014b8 	.word	0x200014b8

080028c8 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af04      	add	r7, sp, #16
 80028ce:	4603      	mov	r3, r0
 80028d0:	460a      	mov	r2, r1
 80028d2:	80fb      	strh	r3, [r7, #6]
 80028d4:	4613      	mov	r3, r2
 80028d6:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80028e0:	797b      	ldrb	r3, [r7, #5]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <I2Cx_ReadData+0x50>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	88f9      	ldrh	r1, [r7, #6]
 80028ea:	9302      	str	r3, [sp, #8]
 80028ec:	2301      	movs	r3, #1
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	f107 030e 	add.w	r3, r7, #14
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	2301      	movs	r3, #1
 80028f8:	4808      	ldr	r0, [pc, #32]	; (800291c <I2Cx_ReadData+0x54>)
 80028fa:	f003 fba9 	bl	8006050 <HAL_I2C_Mem_Read>
 80028fe:	4603      	mov	r3, r0
 8002900:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8002908:	f000 f80a 	bl	8002920 <I2Cx_Error>
  }
  return value;
 800290c:	7bbb      	ldrb	r3, [r7, #14]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	2000006c 	.word	0x2000006c
 800291c:	200014b8 	.word	0x200014b8

08002920 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002924:	4803      	ldr	r0, [pc, #12]	; (8002934 <I2Cx_Error+0x14>)
 8002926:	f002 ff45 	bl	80057b4 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 800292a:	f7ff ff73 	bl	8002814 <I2Cx_Init>
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	200014b8 	.word	0x200014b8

08002938 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	; 0x28
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8002940:	2300      	movs	r3, #0
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	4b25      	ldr	r3, [pc, #148]	; (80029dc <I2Cx_MspInit+0xa4>)
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	4a24      	ldr	r2, [pc, #144]	; (80029dc <I2Cx_MspInit+0xa4>)
 800294a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800294e:	6413      	str	r3, [r2, #64]	; 0x40
 8002950:	4b22      	ldr	r3, [pc, #136]	; (80029dc <I2Cx_MspInit+0xa4>)
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	4b1e      	ldr	r3, [pc, #120]	; (80029dc <I2Cx_MspInit+0xa4>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	4a1d      	ldr	r2, [pc, #116]	; (80029dc <I2Cx_MspInit+0xa4>)
 8002966:	f043 0302 	orr.w	r3, r3, #2
 800296a:	6313      	str	r3, [r2, #48]	; 0x30
 800296c:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <I2Cx_MspInit+0xa4>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 8002978:	f44f 7310 	mov.w	r3, #576	; 0x240
 800297c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 800297e:	2312      	movs	r3, #18
 8002980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002986:	2302      	movs	r3, #2
 8002988:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800298a:	2304      	movs	r3, #4
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800298e:	f107 0314 	add.w	r3, r7, #20
 8002992:	4619      	mov	r1, r3
 8002994:	4812      	ldr	r0, [pc, #72]	; (80029e0 <I2Cx_MspInit+0xa8>)
 8002996:	f000 ff19 	bl	80037cc <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <I2Cx_MspInit+0xa4>)
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	4a0f      	ldr	r2, [pc, #60]	; (80029dc <I2Cx_MspInit+0xa4>)
 80029a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029a4:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <I2Cx_MspInit+0xa4>)
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	4a0c      	ldr	r2, [pc, #48]	; (80029dc <I2Cx_MspInit+0xa4>)
 80029ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029b0:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80029b2:	2200      	movs	r2, #0
 80029b4:	210f      	movs	r1, #15
 80029b6:	201f      	movs	r0, #31
 80029b8:	f000 faf1 	bl	8002f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80029bc:	201f      	movs	r0, #31
 80029be:	f000 fb0a 	bl	8002fd6 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	210f      	movs	r1, #15
 80029c6:	2020      	movs	r0, #32
 80029c8:	f000 fae9 	bl	8002f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 80029cc:	2020      	movs	r0, #32
 80029ce:	f000 fb02 	bl	8002fd6 <HAL_NVIC_EnableIRQ>
}
 80029d2:	bf00      	nop
 80029d4:	3728      	adds	r7, #40	; 0x28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40020400 	.word	0x40020400

080029e4 <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	603b      	str	r3, [r7, #0]
 80029ee:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <COMPASSACCELERO_IO_Init+0x48>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	4a0e      	ldr	r2, [pc, #56]	; (8002a2c <COMPASSACCELERO_IO_Init+0x48>)
 80029f4:	f043 0310 	orr.w	r3, r3, #16
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30
 80029fa:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <COMPASSACCELERO_IO_Init+0x48>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8002a06:	2304      	movs	r3, #4
 8002a08:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002a12:	2302      	movs	r3, #2
 8002a14:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8002a16:	1d3b      	adds	r3, r7, #4
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4805      	ldr	r0, [pc, #20]	; (8002a30 <COMPASSACCELERO_IO_Init+0x4c>)
 8002a1c:	f000 fed6 	bl	80037cc <HAL_GPIO_Init>
  
  I2Cx_Init();
 8002a20:	f7ff fef8 	bl	8002814 <I2Cx_Init>
}
 8002a24:	bf00      	nop
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40021000 	.word	0x40021000

08002a34 <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	603b      	str	r3, [r7, #0]
 8002a3e:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <COMPASSACCELERO_IO_ITConfig+0x58>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	4a12      	ldr	r2, [pc, #72]	; (8002a8c <COMPASSACCELERO_IO_ITConfig+0x58>)
 8002a44:	f043 0310 	orr.w	r3, r3, #16
 8002a48:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4a:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <COMPASSACCELERO_IO_ITConfig+0x58>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8002a56:	2330      	movs	r3, #48	; 0x30
 8002a58:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8002a5a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002a60:	2302      	movs	r3, #2
 8002a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002a68:	1d3b      	adds	r3, r7, #4
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4808      	ldr	r0, [pc, #32]	; (8002a90 <COMPASSACCELERO_IO_ITConfig+0x5c>)
 8002a6e:	f000 fead 	bl	80037cc <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 8002a72:	2200      	movs	r2, #0
 8002a74:	210f      	movs	r1, #15
 8002a76:	200a      	movs	r0, #10
 8002a78:	f000 fa91 	bl	8002f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8002a7c:	200a      	movs	r0, #10
 8002a7e:	f000 faaa 	bl	8002fd6 <HAL_NVIC_EnableIRQ>
}
 8002a82:	bf00      	nop
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40021000 	.word	0x40021000

08002a94 <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	80fb      	strh	r3, [r7, #6]
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	717b      	strb	r3, [r7, #5]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8002aa6:	793a      	ldrb	r2, [r7, #4]
 8002aa8:	7979      	ldrb	r1, [r7, #5]
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fee3 	bl	8002878 <I2Cx_WriteData>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	460a      	mov	r2, r1
 8002ac4:	80fb      	strh	r3, [r7, #6]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8002aca:	797a      	ldrb	r2, [r7, #5]
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fef9 	bl	80028c8 <I2Cx_ReadData>
 8002ad6:	4603      	mov	r3, r0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8002aea:	2300      	movs	r3, #0
 8002aec:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 8002aee:	1d3b      	adds	r3, r7, #4
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8002af6:	4b58      	ldr	r3, [pc, #352]	; (8002c58 <BSP_ACCELERO_Init+0x178>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	4798      	blx	r3
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b33      	cmp	r3, #51	; 0x33
 8002b00:	d14f      	bne.n	8002ba2 <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8002b02:	4b56      	ldr	r3, [pc, #344]	; (8002c5c <BSP_ACCELERO_Init+0x17c>)
 8002b04:	4a54      	ldr	r2, [pc, #336]	; (8002c58 <BSP_ACCELERO_Init+0x178>)
 8002b06:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8002b0c:	2340      	movs	r3, #64	; 0x40
 8002b0e:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 8002b10:	2307      	movs	r3, #7
 8002b12:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 8002b14:	2300      	movs	r3, #0
 8002b16:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8002b20:	2308      	movs	r3, #8
 8002b22:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002b24:	7b3a      	ldrb	r2, [r7, #12]
 8002b26:	7b7b      	ldrb	r3, [r7, #13]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8002b2c:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	8abb      	ldrh	r3, [r7, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002b3a:	7c3a      	ldrb	r2, [r7, #16]
 8002b3c:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	7cbb      	ldrb	r3, [r7, #18]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002b50:	b21a      	sxth	r2, r3
 8002b52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	b21b      	sxth	r3, r3
 8002b5a:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002b5c:	4b3f      	ldr	r3, [pc, #252]	; (8002c5c <BSP_ACCELERO_Init+0x17c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	8aba      	ldrh	r2, [r7, #20]
 8002b64:	4610      	mov	r0, r2
 8002b66:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 8002b68:	2380      	movs	r3, #128	; 0x80
 8002b6a:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8002b6c:	2310      	movs	r3, #16
 8002b6e:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002b78:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8002b7a:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8002b80:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002b82:	4313      	orrs	r3, r2
 8002b84:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8002b86:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8002b8e:	4b33      	ldr	r3, [pc, #204]	; (8002c5c <BSP_ACCELERO_Init+0x17c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b94:	8aba      	ldrh	r2, [r7, #20]
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	4610      	mov	r0, r2
 8002b9a:	4798      	blx	r3

    ret = ACCELERO_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	75fb      	strb	r3, [r7, #23]
 8002ba0:	e054      	b.n	8002c4c <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 8002ba2:	4b2f      	ldr	r3, [pc, #188]	; (8002c60 <BSP_ACCELERO_Init+0x180>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	4798      	blx	r3
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b33      	cmp	r3, #51	; 0x33
 8002bac:	d14e      	bne.n	8002c4c <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8002bae:	4b2b      	ldr	r3, [pc, #172]	; (8002c5c <BSP_ACCELERO_Init+0x17c>)
 8002bb0:	4a2b      	ldr	r2, [pc, #172]	; (8002c60 <BSP_ACCELERO_Init+0x180>)
 8002bb2:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 8002bb8:	2340      	movs	r3, #64	; 0x40
 8002bba:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8002bbc:	2307      	movs	r3, #7
 8002bbe:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8002bcc:	2308      	movs	r3, #8
 8002bce:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002bd0:	7b3a      	ldrb	r2, [r7, #12]
 8002bd2:	7b7b      	ldrb	r3, [r7, #13]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8002bd8:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	8abb      	ldrh	r3, [r7, #20]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002be6:	7c3a      	ldrb	r2, [r7, #16]
 8002be8:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8002bea:	4313      	orrs	r3, r2
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	7cbb      	ldrb	r3, [r7, #18]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002bfc:	b21a      	sxth	r2, r3
 8002bfe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	b21b      	sxth	r3, r3
 8002c06:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002c08:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <BSP_ACCELERO_Init+0x17c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	8aba      	ldrh	r2, [r7, #20]
 8002c10:	4610      	mov	r0, r2
 8002c12:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8002c18:	2310      	movs	r3, #16
 8002c1a:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8002c20:	2300      	movs	r3, #0
 8002c22:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002c24:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8002c26:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8002c2c:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8002c32:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002c34:	4313      	orrs	r3, r2
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8002c3a:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <BSP_ACCELERO_Init+0x17c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	8aba      	ldrh	r2, [r7, #20]
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	4610      	mov	r0, r2
 8002c46:	4798      	blx	r3

    ret = ACCELERO_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8002c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000038 	.word	0x20000038
 8002c5c:	2000150c 	.word	0x2000150c
 8002c60:	20000004 	.word	0x20000004

08002c64 <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 8002c70:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <BSP_ACCELERO_GetXYZ+0x50>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d018      	beq.n	8002cac <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <BSP_ACCELERO_GetXYZ+0x50>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <BSP_ACCELERO_GetXYZ+0x50>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a0b      	ldr	r2, [pc, #44]	; (8002cb8 <BSP_ACCELERO_GetXYZ+0x54>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d10e      	bne.n	8002cac <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 8002c9e:	89fb      	ldrh	r3, [r7, #14]
 8002ca0:	425b      	negs	r3, r3
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3302      	adds	r3, #2
 8002ca8:	b212      	sxth	r2, r2
 8002caa:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8002cac:	bf00      	nop
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	2000150c 	.word	0x2000150c
 8002cb8:	20000038 	.word	0x20000038

08002cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cc0:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <HAL_Init+0x40>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a0d      	ldr	r2, [pc, #52]	; (8002cfc <HAL_Init+0x40>)
 8002cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_Init+0x40>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a0a      	ldr	r2, [pc, #40]	; (8002cfc <HAL_Init+0x40>)
 8002cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cd8:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <HAL_Init+0x40>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a07      	ldr	r2, [pc, #28]	; (8002cfc <HAL_Init+0x40>)
 8002cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce4:	2003      	movs	r0, #3
 8002ce6:	f000 f94f 	bl	8002f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cea:	2000      	movs	r0, #0
 8002cec:	f000 f808 	bl	8002d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cf0:	f7fe ffd4 	bl	8001c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40023c00 	.word	0x40023c00

08002d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d08:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_InitTick+0x54>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <HAL_InitTick+0x58>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	4619      	mov	r1, r3
 8002d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 f967 	bl	8002ff2 <HAL_SYSTICK_Config>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e00e      	b.n	8002d4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b0f      	cmp	r3, #15
 8002d32:	d80a      	bhi.n	8002d4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d34:	2200      	movs	r2, #0
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3c:	f000 f92f 	bl	8002f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d40:	4a06      	ldr	r2, [pc, #24]	; (8002d5c <HAL_InitTick+0x5c>)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	e000      	b.n	8002d4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20000000 	.word	0x20000000
 8002d58:	20000074 	.word	0x20000074
 8002d5c:	20000070 	.word	0x20000070

08002d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_IncTick+0x20>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_IncTick+0x24>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4413      	add	r3, r2
 8002d70:	4a04      	ldr	r2, [pc, #16]	; (8002d84 <HAL_IncTick+0x24>)
 8002d72:	6013      	str	r3, [r2, #0]
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000074 	.word	0x20000074
 8002d84:	20001510 	.word	0x20001510

08002d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d8c:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <HAL_GetTick+0x14>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	20001510 	.word	0x20001510

08002da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002da8:	f7ff ffee 	bl	8002d88 <HAL_GetTick>
 8002dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db8:	d005      	beq.n	8002dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dba:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <HAL_Delay+0x44>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dc6:	bf00      	nop
 8002dc8:	f7ff ffde 	bl	8002d88 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d8f7      	bhi.n	8002dc8 <HAL_Delay+0x28>
  {
  }
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000074 	.word	0x20000074

08002de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df8:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <__NVIC_SetPriorityGrouping+0x44>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e04:	4013      	ands	r3, r2
 8002e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e1a:	4a04      	ldr	r2, [pc, #16]	; (8002e2c <__NVIC_SetPriorityGrouping+0x44>)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	60d3      	str	r3, [r2, #12]
}
 8002e20:	bf00      	nop
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e34:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <__NVIC_GetPriorityGrouping+0x18>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	0a1b      	lsrs	r3, r3, #8
 8002e3a:	f003 0307 	and.w	r3, r3, #7
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000ed00 	.word	0xe000ed00

08002e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	db0b      	blt.n	8002e76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	f003 021f 	and.w	r2, r3, #31
 8002e64:	4907      	ldr	r1, [pc, #28]	; (8002e84 <__NVIC_EnableIRQ+0x38>)
 8002e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	e000e100 	.word	0xe000e100

08002e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	6039      	str	r1, [r7, #0]
 8002e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	db0a      	blt.n	8002eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	490c      	ldr	r1, [pc, #48]	; (8002ed4 <__NVIC_SetPriority+0x4c>)
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	0112      	lsls	r2, r2, #4
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	440b      	add	r3, r1
 8002eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eb0:	e00a      	b.n	8002ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	4908      	ldr	r1, [pc, #32]	; (8002ed8 <__NVIC_SetPriority+0x50>)
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	3b04      	subs	r3, #4
 8002ec0:	0112      	lsls	r2, r2, #4
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	761a      	strb	r2, [r3, #24]
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	e000e100 	.word	0xe000e100
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b089      	sub	sp, #36	; 0x24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f1c3 0307 	rsb	r3, r3, #7
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	bf28      	it	cs
 8002efa:	2304      	movcs	r3, #4
 8002efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3304      	adds	r3, #4
 8002f02:	2b06      	cmp	r3, #6
 8002f04:	d902      	bls.n	8002f0c <NVIC_EncodePriority+0x30>
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3b03      	subs	r3, #3
 8002f0a:	e000      	b.n	8002f0e <NVIC_EncodePriority+0x32>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f10:	f04f 32ff 	mov.w	r2, #4294967295
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43da      	mvns	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	401a      	ands	r2, r3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f24:	f04f 31ff 	mov.w	r1, #4294967295
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2e:	43d9      	mvns	r1, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f34:	4313      	orrs	r3, r2
         );
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3724      	adds	r7, #36	; 0x24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f54:	d301      	bcc.n	8002f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f56:	2301      	movs	r3, #1
 8002f58:	e00f      	b.n	8002f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f5a:	4a0a      	ldr	r2, [pc, #40]	; (8002f84 <SysTick_Config+0x40>)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f62:	210f      	movs	r1, #15
 8002f64:	f04f 30ff 	mov.w	r0, #4294967295
 8002f68:	f7ff ff8e 	bl	8002e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <SysTick_Config+0x40>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f72:	4b04      	ldr	r3, [pc, #16]	; (8002f84 <SysTick_Config+0x40>)
 8002f74:	2207      	movs	r2, #7
 8002f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	e000e010 	.word	0xe000e010

08002f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff ff29 	bl	8002de8 <__NVIC_SetPriorityGrouping>
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b086      	sub	sp, #24
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fb0:	f7ff ff3e 	bl	8002e30 <__NVIC_GetPriorityGrouping>
 8002fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	6978      	ldr	r0, [r7, #20]
 8002fbc:	f7ff ff8e 	bl	8002edc <NVIC_EncodePriority>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff ff5d 	bl	8002e88 <__NVIC_SetPriority>
}
 8002fce:	bf00      	nop
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	4603      	mov	r3, r0
 8002fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff ff31 	bl	8002e4c <__NVIC_EnableIRQ>
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff ffa2 	bl	8002f44 <SysTick_Config>
 8003000:	4603      	mov	r3, r0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003018:	f7ff feb6 	bl	8002d88 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e099      	b.n	800315c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0201 	bic.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003048:	e00f      	b.n	800306a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800304a:	f7ff fe9d 	bl	8002d88 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b05      	cmp	r3, #5
 8003056:	d908      	bls.n	800306a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2220      	movs	r2, #32
 800305c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2203      	movs	r2, #3
 8003062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e078      	b.n	800315c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1e8      	bne.n	800304a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	4b38      	ldr	r3, [pc, #224]	; (8003164 <HAL_DMA_Init+0x158>)
 8003084:	4013      	ands	r3, r2
 8003086:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003096:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d107      	bne.n	80030d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	4313      	orrs	r3, r2
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f023 0307 	bic.w	r3, r3, #7
 80030ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d117      	bne.n	800312e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00e      	beq.n	800312e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 fadf 	bl	80036d4 <DMA_CheckFifoParam>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2240      	movs	r2, #64	; 0x40
 8003120:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800312a:	2301      	movs	r3, #1
 800312c:	e016      	b.n	800315c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fa96 	bl	8003668 <DMA_CalcBaseAndBitshift>
 800313c:	4603      	mov	r3, r0
 800313e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003144:	223f      	movs	r2, #63	; 0x3f
 8003146:	409a      	lsls	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	f010803f 	.word	0xf010803f

08003168 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
 8003174:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_DMA_Start_IT+0x26>
 800318a:	2302      	movs	r3, #2
 800318c:	e040      	b.n	8003210 <HAL_DMA_Start_IT+0xa8>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d12f      	bne.n	8003202 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2202      	movs	r2, #2
 80031a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 fa28 	bl	800360c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c0:	223f      	movs	r2, #63	; 0x3f
 80031c2:	409a      	lsls	r2, r3
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0216 	orr.w	r2, r2, #22
 80031d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d007      	beq.n	80031f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0208 	orr.w	r2, r2, #8
 80031ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	e005      	b.n	800320e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800320a:	2302      	movs	r3, #2
 800320c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800320e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003224:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003226:	f7ff fdaf 	bl	8002d88 <HAL_GetTick>
 800322a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d008      	beq.n	800324a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2280      	movs	r2, #128	; 0x80
 800323c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e052      	b.n	80032f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0216 	bic.w	r2, r2, #22
 8003258:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695a      	ldr	r2, [r3, #20]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003268:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	d103      	bne.n	800327a <HAL_DMA_Abort+0x62>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003276:	2b00      	cmp	r3, #0
 8003278:	d007      	beq.n	800328a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0208 	bic.w	r2, r2, #8
 8003288:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0201 	bic.w	r2, r2, #1
 8003298:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800329a:	e013      	b.n	80032c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800329c:	f7ff fd74 	bl	8002d88 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b05      	cmp	r3, #5
 80032a8:	d90c      	bls.n	80032c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2220      	movs	r2, #32
 80032ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2203      	movs	r2, #3
 80032b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e015      	b.n	80032f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1e4      	bne.n	800329c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d6:	223f      	movs	r2, #63	; 0x3f
 80032d8:	409a      	lsls	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003304:	4b8e      	ldr	r3, [pc, #568]	; (8003540 <HAL_DMA_IRQHandler+0x248>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a8e      	ldr	r2, [pc, #568]	; (8003544 <HAL_DMA_IRQHandler+0x24c>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	0a9b      	lsrs	r3, r3, #10
 8003310:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003316:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003322:	2208      	movs	r2, #8
 8003324:	409a      	lsls	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4013      	ands	r3, r2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d01a      	beq.n	8003364 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d013      	beq.n	8003364 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0204 	bic.w	r2, r2, #4
 800334a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003350:	2208      	movs	r2, #8
 8003352:	409a      	lsls	r2, r3
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335c:	f043 0201 	orr.w	r2, r3, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003368:	2201      	movs	r2, #1
 800336a:	409a      	lsls	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d012      	beq.n	800339a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00b      	beq.n	800339a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003386:	2201      	movs	r2, #1
 8003388:	409a      	lsls	r2, r3
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003392:	f043 0202 	orr.w	r2, r3, #2
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339e:	2204      	movs	r2, #4
 80033a0:	409a      	lsls	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d012      	beq.n	80033d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00b      	beq.n	80033d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033bc:	2204      	movs	r2, #4
 80033be:	409a      	lsls	r2, r3
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c8:	f043 0204 	orr.w	r2, r3, #4
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d4:	2210      	movs	r2, #16
 80033d6:	409a      	lsls	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d043      	beq.n	8003468 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d03c      	beq.n	8003468 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f2:	2210      	movs	r2, #16
 80033f4:	409a      	lsls	r2, r3
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d018      	beq.n	800343a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d108      	bne.n	8003428 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	2b00      	cmp	r3, #0
 800341c:	d024      	beq.n	8003468 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	4798      	blx	r3
 8003426:	e01f      	b.n	8003468 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800342c:	2b00      	cmp	r3, #0
 800342e:	d01b      	beq.n	8003468 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	4798      	blx	r3
 8003438:	e016      	b.n	8003468 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d107      	bne.n	8003458 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0208 	bic.w	r2, r2, #8
 8003456:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346c:	2220      	movs	r2, #32
 800346e:	409a      	lsls	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4013      	ands	r3, r2
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 808f 	beq.w	8003598 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 8087 	beq.w	8003598 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348e:	2220      	movs	r2, #32
 8003490:	409a      	lsls	r2, r3
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b05      	cmp	r3, #5
 80034a0:	d136      	bne.n	8003510 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0216 	bic.w	r2, r2, #22
 80034b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695a      	ldr	r2, [r3, #20]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d103      	bne.n	80034d2 <HAL_DMA_IRQHandler+0x1da>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d007      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0208 	bic.w	r2, r2, #8
 80034e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e6:	223f      	movs	r2, #63	; 0x3f
 80034e8:	409a      	lsls	r2, r3
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003502:	2b00      	cmp	r3, #0
 8003504:	d07e      	beq.n	8003604 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	4798      	blx	r3
        }
        return;
 800350e:	e079      	b.n	8003604 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d01d      	beq.n	800355a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10d      	bne.n	8003548 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003530:	2b00      	cmp	r3, #0
 8003532:	d031      	beq.n	8003598 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	4798      	blx	r3
 800353c:	e02c      	b.n	8003598 <HAL_DMA_IRQHandler+0x2a0>
 800353e:	bf00      	nop
 8003540:	20000000 	.word	0x20000000
 8003544:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354c:	2b00      	cmp	r3, #0
 800354e:	d023      	beq.n	8003598 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	4798      	blx	r3
 8003558:	e01e      	b.n	8003598 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10f      	bne.n	8003588 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0210 	bic.w	r2, r2, #16
 8003576:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359c:	2b00      	cmp	r3, #0
 800359e:	d032      	beq.n	8003606 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d022      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2205      	movs	r2, #5
 80035b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0201 	bic.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	3301      	adds	r3, #1
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d307      	bcc.n	80035e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f2      	bne.n	80035c4 <HAL_DMA_IRQHandler+0x2cc>
 80035de:	e000      	b.n	80035e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d005      	beq.n	8003606 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	4798      	blx	r3
 8003602:	e000      	b.n	8003606 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003604:	bf00      	nop
    }
  }
}
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003628:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b40      	cmp	r3, #64	; 0x40
 8003638:	d108      	bne.n	800364c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800364a:	e007      	b.n	800365c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	60da      	str	r2, [r3, #12]
}
 800365c:	bf00      	nop
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	3b10      	subs	r3, #16
 8003678:	4a14      	ldr	r2, [pc, #80]	; (80036cc <DMA_CalcBaseAndBitshift+0x64>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	091b      	lsrs	r3, r3, #4
 8003680:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003682:	4a13      	ldr	r2, [pc, #76]	; (80036d0 <DMA_CalcBaseAndBitshift+0x68>)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4413      	add	r3, r2
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b03      	cmp	r3, #3
 8003694:	d909      	bls.n	80036aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800369e:	f023 0303 	bic.w	r3, r3, #3
 80036a2:	1d1a      	adds	r2, r3, #4
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	659a      	str	r2, [r3, #88]	; 0x58
 80036a8:	e007      	b.n	80036ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036b2:	f023 0303 	bic.w	r3, r3, #3
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	aaaaaaab 	.word	0xaaaaaaab
 80036d0:	0800fc50 	.word	0x0800fc50

080036d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d11f      	bne.n	800372e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d856      	bhi.n	80037a2 <DMA_CheckFifoParam+0xce>
 80036f4:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <DMA_CheckFifoParam+0x28>)
 80036f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fa:	bf00      	nop
 80036fc:	0800370d 	.word	0x0800370d
 8003700:	0800371f 	.word	0x0800371f
 8003704:	0800370d 	.word	0x0800370d
 8003708:	080037a3 	.word	0x080037a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d046      	beq.n	80037a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800371c:	e043      	b.n	80037a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003726:	d140      	bne.n	80037aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800372c:	e03d      	b.n	80037aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003736:	d121      	bne.n	800377c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b03      	cmp	r3, #3
 800373c:	d837      	bhi.n	80037ae <DMA_CheckFifoParam+0xda>
 800373e:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <DMA_CheckFifoParam+0x70>)
 8003740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003744:	08003755 	.word	0x08003755
 8003748:	0800375b 	.word	0x0800375b
 800374c:	08003755 	.word	0x08003755
 8003750:	0800376d 	.word	0x0800376d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
      break;
 8003758:	e030      	b.n	80037bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d025      	beq.n	80037b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800376a:	e022      	b.n	80037b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003774:	d11f      	bne.n	80037b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800377a:	e01c      	b.n	80037b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d903      	bls.n	800378a <DMA_CheckFifoParam+0xb6>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b03      	cmp	r3, #3
 8003786:	d003      	beq.n	8003790 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003788:	e018      	b.n	80037bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
      break;
 800378e:	e015      	b.n	80037bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00e      	beq.n	80037ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
      break;
 80037a0:	e00b      	b.n	80037ba <DMA_CheckFifoParam+0xe6>
      break;
 80037a2:	bf00      	nop
 80037a4:	e00a      	b.n	80037bc <DMA_CheckFifoParam+0xe8>
      break;
 80037a6:	bf00      	nop
 80037a8:	e008      	b.n	80037bc <DMA_CheckFifoParam+0xe8>
      break;
 80037aa:	bf00      	nop
 80037ac:	e006      	b.n	80037bc <DMA_CheckFifoParam+0xe8>
      break;
 80037ae:	bf00      	nop
 80037b0:	e004      	b.n	80037bc <DMA_CheckFifoParam+0xe8>
      break;
 80037b2:	bf00      	nop
 80037b4:	e002      	b.n	80037bc <DMA_CheckFifoParam+0xe8>
      break;   
 80037b6:	bf00      	nop
 80037b8:	e000      	b.n	80037bc <DMA_CheckFifoParam+0xe8>
      break;
 80037ba:	bf00      	nop
    }
  } 
  
  return status; 
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop

080037cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b089      	sub	sp, #36	; 0x24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037da:	2300      	movs	r3, #0
 80037dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037de:	2300      	movs	r3, #0
 80037e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037e2:	2300      	movs	r3, #0
 80037e4:	61fb      	str	r3, [r7, #28]
 80037e6:	e159      	b.n	8003a9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037e8:	2201      	movs	r2, #1
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4013      	ands	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	429a      	cmp	r2, r3
 8003802:	f040 8148 	bne.w	8003a96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	2b01      	cmp	r3, #1
 8003810:	d005      	beq.n	800381e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800381a:	2b02      	cmp	r3, #2
 800381c:	d130      	bne.n	8003880 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	2203      	movs	r2, #3
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	43db      	mvns	r3, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4013      	ands	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003854:	2201      	movs	r2, #1
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4013      	ands	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	091b      	lsrs	r3, r3, #4
 800386a:	f003 0201 	and.w	r2, r3, #1
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 0303 	and.w	r3, r3, #3
 8003888:	2b03      	cmp	r3, #3
 800388a:	d017      	beq.n	80038bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	2203      	movs	r2, #3
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d123      	bne.n	8003910 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	08da      	lsrs	r2, r3, #3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3208      	adds	r2, #8
 80038d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	220f      	movs	r2, #15
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4313      	orrs	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	08da      	lsrs	r2, r3, #3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3208      	adds	r2, #8
 800390a:	69b9      	ldr	r1, [r7, #24]
 800390c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	2203      	movs	r2, #3
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 0203 	and.w	r2, r3, #3
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 80a2 	beq.w	8003a96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	4b57      	ldr	r3, [pc, #348]	; (8003ab4 <HAL_GPIO_Init+0x2e8>)
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	4a56      	ldr	r2, [pc, #344]	; (8003ab4 <HAL_GPIO_Init+0x2e8>)
 800395c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003960:	6453      	str	r3, [r2, #68]	; 0x44
 8003962:	4b54      	ldr	r3, [pc, #336]	; (8003ab4 <HAL_GPIO_Init+0x2e8>)
 8003964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800396e:	4a52      	ldr	r2, [pc, #328]	; (8003ab8 <HAL_GPIO_Init+0x2ec>)
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	089b      	lsrs	r3, r3, #2
 8003974:	3302      	adds	r3, #2
 8003976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	220f      	movs	r2, #15
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43db      	mvns	r3, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4013      	ands	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a49      	ldr	r2, [pc, #292]	; (8003abc <HAL_GPIO_Init+0x2f0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d019      	beq.n	80039ce <HAL_GPIO_Init+0x202>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a48      	ldr	r2, [pc, #288]	; (8003ac0 <HAL_GPIO_Init+0x2f4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d013      	beq.n	80039ca <HAL_GPIO_Init+0x1fe>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a47      	ldr	r2, [pc, #284]	; (8003ac4 <HAL_GPIO_Init+0x2f8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00d      	beq.n	80039c6 <HAL_GPIO_Init+0x1fa>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a46      	ldr	r2, [pc, #280]	; (8003ac8 <HAL_GPIO_Init+0x2fc>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d007      	beq.n	80039c2 <HAL_GPIO_Init+0x1f6>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a45      	ldr	r2, [pc, #276]	; (8003acc <HAL_GPIO_Init+0x300>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d101      	bne.n	80039be <HAL_GPIO_Init+0x1f2>
 80039ba:	2304      	movs	r3, #4
 80039bc:	e008      	b.n	80039d0 <HAL_GPIO_Init+0x204>
 80039be:	2307      	movs	r3, #7
 80039c0:	e006      	b.n	80039d0 <HAL_GPIO_Init+0x204>
 80039c2:	2303      	movs	r3, #3
 80039c4:	e004      	b.n	80039d0 <HAL_GPIO_Init+0x204>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e002      	b.n	80039d0 <HAL_GPIO_Init+0x204>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <HAL_GPIO_Init+0x204>
 80039ce:	2300      	movs	r3, #0
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	f002 0203 	and.w	r2, r2, #3
 80039d6:	0092      	lsls	r2, r2, #2
 80039d8:	4093      	lsls	r3, r2
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039e0:	4935      	ldr	r1, [pc, #212]	; (8003ab8 <HAL_GPIO_Init+0x2ec>)
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	089b      	lsrs	r3, r3, #2
 80039e6:	3302      	adds	r3, #2
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039ee:	4b38      	ldr	r3, [pc, #224]	; (8003ad0 <HAL_GPIO_Init+0x304>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	43db      	mvns	r3, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4013      	ands	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a12:	4a2f      	ldr	r2, [pc, #188]	; (8003ad0 <HAL_GPIO_Init+0x304>)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a18:	4b2d      	ldr	r3, [pc, #180]	; (8003ad0 <HAL_GPIO_Init+0x304>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	43db      	mvns	r3, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4013      	ands	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a3c:	4a24      	ldr	r2, [pc, #144]	; (8003ad0 <HAL_GPIO_Init+0x304>)
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a42:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <HAL_GPIO_Init+0x304>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a66:	4a1a      	ldr	r2, [pc, #104]	; (8003ad0 <HAL_GPIO_Init+0x304>)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a6c:	4b18      	ldr	r3, [pc, #96]	; (8003ad0 <HAL_GPIO_Init+0x304>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a90:	4a0f      	ldr	r2, [pc, #60]	; (8003ad0 <HAL_GPIO_Init+0x304>)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	61fb      	str	r3, [r7, #28]
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	2b0f      	cmp	r3, #15
 8003aa0:	f67f aea2 	bls.w	80037e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	3724      	adds	r7, #36	; 0x24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40013800 	.word	0x40013800
 8003abc:	40020000 	.word	0x40020000
 8003ac0:	40020400 	.word	0x40020400
 8003ac4:	40020800 	.word	0x40020800
 8003ac8:	40020c00 	.word	0x40020c00
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	40013c00 	.word	0x40013c00

08003ad4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aea:	2300      	movs	r3, #0
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	e0bb      	b.n	8003c68 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003af0:	2201      	movs	r2, #1
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	4013      	ands	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	f040 80ab 	bne.w	8003c62 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003b0c:	4a5c      	ldr	r2, [pc, #368]	; (8003c80 <HAL_GPIO_DeInit+0x1ac>)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	089b      	lsrs	r3, r3, #2
 8003b12:	3302      	adds	r3, #2
 8003b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b18:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	220f      	movs	r2, #15
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a54      	ldr	r2, [pc, #336]	; (8003c84 <HAL_GPIO_DeInit+0x1b0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d019      	beq.n	8003b6a <HAL_GPIO_DeInit+0x96>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a53      	ldr	r2, [pc, #332]	; (8003c88 <HAL_GPIO_DeInit+0x1b4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d013      	beq.n	8003b66 <HAL_GPIO_DeInit+0x92>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a52      	ldr	r2, [pc, #328]	; (8003c8c <HAL_GPIO_DeInit+0x1b8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00d      	beq.n	8003b62 <HAL_GPIO_DeInit+0x8e>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a51      	ldr	r2, [pc, #324]	; (8003c90 <HAL_GPIO_DeInit+0x1bc>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d007      	beq.n	8003b5e <HAL_GPIO_DeInit+0x8a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a50      	ldr	r2, [pc, #320]	; (8003c94 <HAL_GPIO_DeInit+0x1c0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d101      	bne.n	8003b5a <HAL_GPIO_DeInit+0x86>
 8003b56:	2304      	movs	r3, #4
 8003b58:	e008      	b.n	8003b6c <HAL_GPIO_DeInit+0x98>
 8003b5a:	2307      	movs	r3, #7
 8003b5c:	e006      	b.n	8003b6c <HAL_GPIO_DeInit+0x98>
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e004      	b.n	8003b6c <HAL_GPIO_DeInit+0x98>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e002      	b.n	8003b6c <HAL_GPIO_DeInit+0x98>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <HAL_GPIO_DeInit+0x98>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	f002 0203 	and.w	r2, r2, #3
 8003b72:	0092      	lsls	r2, r2, #2
 8003b74:	4093      	lsls	r3, r2
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d132      	bne.n	8003be2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003b7c:	4b46      	ldr	r3, [pc, #280]	; (8003c98 <HAL_GPIO_DeInit+0x1c4>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	43db      	mvns	r3, r3
 8003b84:	4944      	ldr	r1, [pc, #272]	; (8003c98 <HAL_GPIO_DeInit+0x1c4>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003b8a:	4b43      	ldr	r3, [pc, #268]	; (8003c98 <HAL_GPIO_DeInit+0x1c4>)
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	43db      	mvns	r3, r3
 8003b92:	4941      	ldr	r1, [pc, #260]	; (8003c98 <HAL_GPIO_DeInit+0x1c4>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003b98:	4b3f      	ldr	r3, [pc, #252]	; (8003c98 <HAL_GPIO_DeInit+0x1c4>)
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	493d      	ldr	r1, [pc, #244]	; (8003c98 <HAL_GPIO_DeInit+0x1c4>)
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003ba6:	4b3c      	ldr	r3, [pc, #240]	; (8003c98 <HAL_GPIO_DeInit+0x1c4>)
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	43db      	mvns	r3, r3
 8003bae:	493a      	ldr	r1, [pc, #232]	; (8003c98 <HAL_GPIO_DeInit+0x1c4>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	220f      	movs	r2, #15
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003bc4:	4a2e      	ldr	r2, [pc, #184]	; (8003c80 <HAL_GPIO_DeInit+0x1ac>)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	089b      	lsrs	r3, r3, #2
 8003bca:	3302      	adds	r3, #2
 8003bcc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	43da      	mvns	r2, r3
 8003bd4:	482a      	ldr	r0, [pc, #168]	; (8003c80 <HAL_GPIO_DeInit+0x1ac>)
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	089b      	lsrs	r3, r3, #2
 8003bda:	400a      	ands	r2, r1
 8003bdc:	3302      	adds	r3, #2
 8003bde:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	2103      	movs	r1, #3
 8003bec:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	401a      	ands	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	08da      	lsrs	r2, r3, #3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3208      	adds	r2, #8
 8003c00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	220f      	movs	r2, #15
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	43db      	mvns	r3, r3
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	08d2      	lsrs	r2, r2, #3
 8003c18:	4019      	ands	r1, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3208      	adds	r2, #8
 8003c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	2103      	movs	r1, #3
 8003c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	401a      	ands	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	fa01 f303 	lsl.w	r3, r1, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	401a      	ands	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	2103      	movs	r1, #3
 8003c56:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	401a      	ands	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	3301      	adds	r3, #1
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2b0f      	cmp	r3, #15
 8003c6c:	f67f af40 	bls.w	8003af0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003c70:	bf00      	nop
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40013800 	.word	0x40013800
 8003c84:	40020000 	.word	0x40020000
 8003c88:	40020400 	.word	0x40020400
 8003c8c:	40020800 	.word	0x40020800
 8003c90:	40020c00 	.word	0x40020c00
 8003c94:	40021000 	.word	0x40021000
 8003c98:	40013c00 	.word	0x40013c00

08003c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	807b      	strh	r3, [r7, #2]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cac:	787b      	ldrb	r3, [r7, #1]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cb2:	887a      	ldrh	r2, [r7, #2]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cb8:	e003      	b.n	8003cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cba:	887b      	ldrh	r3, [r7, #2]
 8003cbc:	041a      	lsls	r2, r3, #16
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	619a      	str	r2, [r3, #24]
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
	...

08003cd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003cda:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cdc:	695a      	ldr	r2, [r3, #20]
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d006      	beq.n	8003cf4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ce6:	4a05      	ldr	r2, [pc, #20]	; (8003cfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ce8:	88fb      	ldrh	r3, [r7, #6]
 8003cea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cec:	88fb      	ldrh	r3, [r7, #6]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 f806 	bl	8003d00 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cf4:	bf00      	nop
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40013c00 	.word	0x40013c00

08003d00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003d16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d18:	b08f      	sub	sp, #60	; 0x3c
 8003d1a:	af0a      	add	r7, sp, #40	; 0x28
 8003d1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e054      	b.n	8003dd2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f00b fb12 	bl	800f36c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2203      	movs	r2, #3
 8003d4c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d102      	bne.n	8003d62 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f004 fe80 	bl	8008a6c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	603b      	str	r3, [r7, #0]
 8003d72:	687e      	ldr	r6, [r7, #4]
 8003d74:	466d      	mov	r5, sp
 8003d76:	f106 0410 	add.w	r4, r6, #16
 8003d7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d86:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d8a:	1d33      	adds	r3, r6, #4
 8003d8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d8e:	6838      	ldr	r0, [r7, #0]
 8003d90:	f004 fdfa 	bl	8008988 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2101      	movs	r1, #1
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f004 fe77 	bl	8008a8e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	603b      	str	r3, [r7, #0]
 8003da6:	687e      	ldr	r6, [r7, #4]
 8003da8:	466d      	mov	r5, sp
 8003daa:	f106 0410 	add.w	r4, r6, #16
 8003dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003db2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003db4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003db6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dba:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dbe:	1d33      	adds	r3, r6, #4
 8003dc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dc2:	6838      	ldr	r0, [r7, #0]
 8003dc4:	f005 f800 	bl	8008dc8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003dda <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003dda:	b590      	push	{r4, r7, lr}
 8003ddc:	b089      	sub	sp, #36	; 0x24
 8003dde:	af04      	add	r7, sp, #16
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	4608      	mov	r0, r1
 8003de4:	4611      	mov	r1, r2
 8003de6:	461a      	mov	r2, r3
 8003de8:	4603      	mov	r3, r0
 8003dea:	70fb      	strb	r3, [r7, #3]
 8003dec:	460b      	mov	r3, r1
 8003dee:	70bb      	strb	r3, [r7, #2]
 8003df0:	4613      	mov	r3, r2
 8003df2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_HCD_HC_Init+0x28>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e076      	b.n	8003ef0 <HAL_HCD_HC_Init+0x116>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	212c      	movs	r1, #44	; 0x2c
 8003e10:	fb01 f303 	mul.w	r3, r1, r3
 8003e14:	4413      	add	r3, r2
 8003e16:	333d      	adds	r3, #61	; 0x3d
 8003e18:	2200      	movs	r2, #0
 8003e1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003e1c:	78fb      	ldrb	r3, [r7, #3]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	212c      	movs	r1, #44	; 0x2c
 8003e22:	fb01 f303 	mul.w	r3, r1, r3
 8003e26:	4413      	add	r3, r2
 8003e28:	3338      	adds	r3, #56	; 0x38
 8003e2a:	787a      	ldrb	r2, [r7, #1]
 8003e2c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	212c      	movs	r1, #44	; 0x2c
 8003e34:	fb01 f303 	mul.w	r3, r1, r3
 8003e38:	4413      	add	r3, r2
 8003e3a:	3340      	adds	r3, #64	; 0x40
 8003e3c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003e3e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	212c      	movs	r1, #44	; 0x2c
 8003e46:	fb01 f303 	mul.w	r3, r1, r3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3339      	adds	r3, #57	; 0x39
 8003e4e:	78fa      	ldrb	r2, [r7, #3]
 8003e50:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003e52:	78fb      	ldrb	r3, [r7, #3]
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	212c      	movs	r1, #44	; 0x2c
 8003e58:	fb01 f303 	mul.w	r3, r1, r3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	333f      	adds	r3, #63	; 0x3f
 8003e60:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003e64:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003e66:	78fb      	ldrb	r3, [r7, #3]
 8003e68:	78ba      	ldrb	r2, [r7, #2]
 8003e6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e6e:	b2d0      	uxtb	r0, r2
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	212c      	movs	r1, #44	; 0x2c
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	4413      	add	r3, r2
 8003e7a:	333a      	adds	r3, #58	; 0x3a
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003e80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	da09      	bge.n	8003e9c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	212c      	movs	r1, #44	; 0x2c
 8003e8e:	fb01 f303 	mul.w	r3, r1, r3
 8003e92:	4413      	add	r3, r2
 8003e94:	333b      	adds	r3, #59	; 0x3b
 8003e96:	2201      	movs	r2, #1
 8003e98:	701a      	strb	r2, [r3, #0]
 8003e9a:	e008      	b.n	8003eae <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003e9c:	78fb      	ldrb	r3, [r7, #3]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	212c      	movs	r1, #44	; 0x2c
 8003ea2:	fb01 f303 	mul.w	r3, r1, r3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	333b      	adds	r3, #59	; 0x3b
 8003eaa:	2200      	movs	r2, #0
 8003eac:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003eae:	78fb      	ldrb	r3, [r7, #3]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	212c      	movs	r1, #44	; 0x2c
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	4413      	add	r3, r2
 8003eba:	333c      	adds	r3, #60	; 0x3c
 8003ebc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003ec0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6818      	ldr	r0, [r3, #0]
 8003ec6:	787c      	ldrb	r4, [r7, #1]
 8003ec8:	78ba      	ldrb	r2, [r7, #2]
 8003eca:	78f9      	ldrb	r1, [r7, #3]
 8003ecc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003ece:	9302      	str	r3, [sp, #8]
 8003ed0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003ed4:	9301      	str	r3, [sp, #4]
 8003ed6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	4623      	mov	r3, r4
 8003ede:	f005 f8f9 	bl	80090d4 <USB_HC_Init>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd90      	pop	{r4, r7, pc}

08003ef8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003f04:	2300      	movs	r3, #0
 8003f06:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <HAL_HCD_HC_Halt+0x1e>
 8003f12:	2302      	movs	r3, #2
 8003f14:	e00f      	b.n	8003f36 <HAL_HCD_HC_Halt+0x3e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	78fa      	ldrb	r2, [r7, #3]
 8003f24:	4611      	mov	r1, r2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f005 fb49 	bl	80095be <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	4608      	mov	r0, r1
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4603      	mov	r3, r0
 8003f50:	70fb      	strb	r3, [r7, #3]
 8003f52:	460b      	mov	r3, r1
 8003f54:	70bb      	strb	r3, [r7, #2]
 8003f56:	4613      	mov	r3, r2
 8003f58:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	212c      	movs	r1, #44	; 0x2c
 8003f60:	fb01 f303 	mul.w	r3, r1, r3
 8003f64:	4413      	add	r3, r2
 8003f66:	333b      	adds	r3, #59	; 0x3b
 8003f68:	78ba      	ldrb	r2, [r7, #2]
 8003f6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	212c      	movs	r1, #44	; 0x2c
 8003f72:	fb01 f303 	mul.w	r3, r1, r3
 8003f76:	4413      	add	r3, r2
 8003f78:	333f      	adds	r3, #63	; 0x3f
 8003f7a:	787a      	ldrb	r2, [r7, #1]
 8003f7c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003f7e:	7c3b      	ldrb	r3, [r7, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d112      	bne.n	8003faa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	212c      	movs	r1, #44	; 0x2c
 8003f8a:	fb01 f303 	mul.w	r3, r1, r3
 8003f8e:	4413      	add	r3, r2
 8003f90:	3342      	adds	r3, #66	; 0x42
 8003f92:	2203      	movs	r2, #3
 8003f94:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003f96:	78fb      	ldrb	r3, [r7, #3]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	212c      	movs	r1, #44	; 0x2c
 8003f9c:	fb01 f303 	mul.w	r3, r1, r3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	333d      	adds	r3, #61	; 0x3d
 8003fa4:	7f3a      	ldrb	r2, [r7, #28]
 8003fa6:	701a      	strb	r2, [r3, #0]
 8003fa8:	e008      	b.n	8003fbc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003faa:	78fb      	ldrb	r3, [r7, #3]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	212c      	movs	r1, #44	; 0x2c
 8003fb0:	fb01 f303 	mul.w	r3, r1, r3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	3342      	adds	r3, #66	; 0x42
 8003fb8:	2202      	movs	r2, #2
 8003fba:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003fbc:	787b      	ldrb	r3, [r7, #1]
 8003fbe:	2b03      	cmp	r3, #3
 8003fc0:	f200 80c6 	bhi.w	8004150 <HAL_HCD_HC_SubmitRequest+0x210>
 8003fc4:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fca:	bf00      	nop
 8003fcc:	08003fdd 	.word	0x08003fdd
 8003fd0:	0800413d 	.word	0x0800413d
 8003fd4:	08004041 	.word	0x08004041
 8003fd8:	080040bf 	.word	0x080040bf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003fdc:	7c3b      	ldrb	r3, [r7, #16]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	f040 80b8 	bne.w	8004154 <HAL_HCD_HC_SubmitRequest+0x214>
 8003fe4:	78bb      	ldrb	r3, [r7, #2]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f040 80b4 	bne.w	8004154 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003fec:	8b3b      	ldrh	r3, [r7, #24]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d108      	bne.n	8004004 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003ff2:	78fb      	ldrb	r3, [r7, #3]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	212c      	movs	r1, #44	; 0x2c
 8003ff8:	fb01 f303 	mul.w	r3, r1, r3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	3355      	adds	r3, #85	; 0x55
 8004000:	2201      	movs	r2, #1
 8004002:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004004:	78fb      	ldrb	r3, [r7, #3]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	212c      	movs	r1, #44	; 0x2c
 800400a:	fb01 f303 	mul.w	r3, r1, r3
 800400e:	4413      	add	r3, r2
 8004010:	3355      	adds	r3, #85	; 0x55
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d109      	bne.n	800402c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	212c      	movs	r1, #44	; 0x2c
 800401e:	fb01 f303 	mul.w	r3, r1, r3
 8004022:	4413      	add	r3, r2
 8004024:	3342      	adds	r3, #66	; 0x42
 8004026:	2200      	movs	r2, #0
 8004028:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800402a:	e093      	b.n	8004154 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800402c:	78fb      	ldrb	r3, [r7, #3]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	212c      	movs	r1, #44	; 0x2c
 8004032:	fb01 f303 	mul.w	r3, r1, r3
 8004036:	4413      	add	r3, r2
 8004038:	3342      	adds	r3, #66	; 0x42
 800403a:	2202      	movs	r2, #2
 800403c:	701a      	strb	r2, [r3, #0]
      break;
 800403e:	e089      	b.n	8004154 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004040:	78bb      	ldrb	r3, [r7, #2]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d11d      	bne.n	8004082 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004046:	78fb      	ldrb	r3, [r7, #3]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	212c      	movs	r1, #44	; 0x2c
 800404c:	fb01 f303 	mul.w	r3, r1, r3
 8004050:	4413      	add	r3, r2
 8004052:	3355      	adds	r3, #85	; 0x55
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	212c      	movs	r1, #44	; 0x2c
 8004060:	fb01 f303 	mul.w	r3, r1, r3
 8004064:	4413      	add	r3, r2
 8004066:	3342      	adds	r3, #66	; 0x42
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800406c:	e073      	b.n	8004156 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800406e:	78fb      	ldrb	r3, [r7, #3]
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	212c      	movs	r1, #44	; 0x2c
 8004074:	fb01 f303 	mul.w	r3, r1, r3
 8004078:	4413      	add	r3, r2
 800407a:	3342      	adds	r3, #66	; 0x42
 800407c:	2202      	movs	r2, #2
 800407e:	701a      	strb	r2, [r3, #0]
      break;
 8004080:	e069      	b.n	8004156 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	212c      	movs	r1, #44	; 0x2c
 8004088:	fb01 f303 	mul.w	r3, r1, r3
 800408c:	4413      	add	r3, r2
 800408e:	3354      	adds	r3, #84	; 0x54
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004096:	78fb      	ldrb	r3, [r7, #3]
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	212c      	movs	r1, #44	; 0x2c
 800409c:	fb01 f303 	mul.w	r3, r1, r3
 80040a0:	4413      	add	r3, r2
 80040a2:	3342      	adds	r3, #66	; 0x42
 80040a4:	2200      	movs	r2, #0
 80040a6:	701a      	strb	r2, [r3, #0]
      break;
 80040a8:	e055      	b.n	8004156 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040aa:	78fb      	ldrb	r3, [r7, #3]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	212c      	movs	r1, #44	; 0x2c
 80040b0:	fb01 f303 	mul.w	r3, r1, r3
 80040b4:	4413      	add	r3, r2
 80040b6:	3342      	adds	r3, #66	; 0x42
 80040b8:	2202      	movs	r2, #2
 80040ba:	701a      	strb	r2, [r3, #0]
      break;
 80040bc:	e04b      	b.n	8004156 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80040be:	78bb      	ldrb	r3, [r7, #2]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d11d      	bne.n	8004100 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	212c      	movs	r1, #44	; 0x2c
 80040ca:	fb01 f303 	mul.w	r3, r1, r3
 80040ce:	4413      	add	r3, r2
 80040d0:	3355      	adds	r3, #85	; 0x55
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d109      	bne.n	80040ec <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040d8:	78fb      	ldrb	r3, [r7, #3]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	212c      	movs	r1, #44	; 0x2c
 80040de:	fb01 f303 	mul.w	r3, r1, r3
 80040e2:	4413      	add	r3, r2
 80040e4:	3342      	adds	r3, #66	; 0x42
 80040e6:	2200      	movs	r2, #0
 80040e8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80040ea:	e034      	b.n	8004156 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	212c      	movs	r1, #44	; 0x2c
 80040f2:	fb01 f303 	mul.w	r3, r1, r3
 80040f6:	4413      	add	r3, r2
 80040f8:	3342      	adds	r3, #66	; 0x42
 80040fa:	2202      	movs	r2, #2
 80040fc:	701a      	strb	r2, [r3, #0]
      break;
 80040fe:	e02a      	b.n	8004156 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	212c      	movs	r1, #44	; 0x2c
 8004106:	fb01 f303 	mul.w	r3, r1, r3
 800410a:	4413      	add	r3, r2
 800410c:	3354      	adds	r3, #84	; 0x54
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d109      	bne.n	8004128 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004114:	78fb      	ldrb	r3, [r7, #3]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	212c      	movs	r1, #44	; 0x2c
 800411a:	fb01 f303 	mul.w	r3, r1, r3
 800411e:	4413      	add	r3, r2
 8004120:	3342      	adds	r3, #66	; 0x42
 8004122:	2200      	movs	r2, #0
 8004124:	701a      	strb	r2, [r3, #0]
      break;
 8004126:	e016      	b.n	8004156 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	212c      	movs	r1, #44	; 0x2c
 800412e:	fb01 f303 	mul.w	r3, r1, r3
 8004132:	4413      	add	r3, r2
 8004134:	3342      	adds	r3, #66	; 0x42
 8004136:	2202      	movs	r2, #2
 8004138:	701a      	strb	r2, [r3, #0]
      break;
 800413a:	e00c      	b.n	8004156 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	212c      	movs	r1, #44	; 0x2c
 8004142:	fb01 f303 	mul.w	r3, r1, r3
 8004146:	4413      	add	r3, r2
 8004148:	3342      	adds	r3, #66	; 0x42
 800414a:	2200      	movs	r2, #0
 800414c:	701a      	strb	r2, [r3, #0]
      break;
 800414e:	e002      	b.n	8004156 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004150:	bf00      	nop
 8004152:	e000      	b.n	8004156 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004154:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004156:	78fb      	ldrb	r3, [r7, #3]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	212c      	movs	r1, #44	; 0x2c
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	4413      	add	r3, r2
 8004162:	3344      	adds	r3, #68	; 0x44
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	8b3a      	ldrh	r2, [r7, #24]
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	202c      	movs	r0, #44	; 0x2c
 8004170:	fb00 f303 	mul.w	r3, r0, r3
 8004174:	440b      	add	r3, r1
 8004176:	334c      	adds	r3, #76	; 0x4c
 8004178:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800417a:	78fb      	ldrb	r3, [r7, #3]
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	212c      	movs	r1, #44	; 0x2c
 8004180:	fb01 f303 	mul.w	r3, r1, r3
 8004184:	4413      	add	r3, r2
 8004186:	3360      	adds	r3, #96	; 0x60
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	212c      	movs	r1, #44	; 0x2c
 8004192:	fb01 f303 	mul.w	r3, r1, r3
 8004196:	4413      	add	r3, r2
 8004198:	3350      	adds	r3, #80	; 0x50
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	212c      	movs	r1, #44	; 0x2c
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	4413      	add	r3, r2
 80041aa:	3339      	adds	r3, #57	; 0x39
 80041ac:	78fa      	ldrb	r2, [r7, #3]
 80041ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80041b0:	78fb      	ldrb	r3, [r7, #3]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	212c      	movs	r1, #44	; 0x2c
 80041b6:	fb01 f303 	mul.w	r3, r1, r3
 80041ba:	4413      	add	r3, r2
 80041bc:	3361      	adds	r3, #97	; 0x61
 80041be:	2200      	movs	r2, #0
 80041c0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6818      	ldr	r0, [r3, #0]
 80041c6:	78fb      	ldrb	r3, [r7, #3]
 80041c8:	222c      	movs	r2, #44	; 0x2c
 80041ca:	fb02 f303 	mul.w	r3, r2, r3
 80041ce:	3338      	adds	r3, #56	; 0x38
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	18d1      	adds	r1, r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	461a      	mov	r2, r3
 80041dc:	f005 f89c 	bl	8009318 <USB_HC_StartXfer>
 80041e0:	4603      	mov	r3, r0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop

080041ec <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f004 fd9d 	bl	8008d42 <USB_GetMode>
 8004208:	4603      	mov	r3, r0
 800420a:	2b01      	cmp	r3, #1
 800420c:	f040 80f6 	bne.w	80043fc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f004 fd81 	bl	8008d1c <USB_ReadInterrupts>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80ec 	beq.w	80043fa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f004 fd78 	bl	8008d1c <USB_ReadInterrupts>
 800422c:	4603      	mov	r3, r0
 800422e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004232:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004236:	d104      	bne.n	8004242 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004240:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f004 fd68 	bl	8008d1c <USB_ReadInterrupts>
 800424c:	4603      	mov	r3, r0
 800424e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004256:	d104      	bne.n	8004262 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004260:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f004 fd58 	bl	8008d1c <USB_ReadInterrupts>
 800426c:	4603      	mov	r3, r0
 800426e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004272:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004276:	d104      	bne.n	8004282 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004280:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f004 fd48 	bl	8008d1c <USB_ReadInterrupts>
 800428c:	4603      	mov	r3, r0
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b02      	cmp	r3, #2
 8004294:	d103      	bne.n	800429e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2202      	movs	r2, #2
 800429c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f004 fd3a 	bl	8008d1c <USB_ReadInterrupts>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042b2:	d11c      	bne.n	80042ee <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80042bc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10f      	bne.n	80042ee <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80042ce:	2110      	movs	r1, #16
 80042d0:	6938      	ldr	r0, [r7, #16]
 80042d2:	f004 fc29 	bl	8008b28 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80042d6:	6938      	ldr	r0, [r7, #16]
 80042d8:	f004 fc5a 	bl	8008b90 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2101      	movs	r1, #1
 80042e2:	4618      	mov	r0, r3
 80042e4:	f004 fe30 	bl	8008f48 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f00b f8bd 	bl	800f468 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f004 fd12 	bl	8008d1c <USB_ReadInterrupts>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004302:	d102      	bne.n	800430a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f001 f89e 	bl	8005446 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f004 fd04 	bl	8008d1c <USB_ReadInterrupts>
 8004314:	4603      	mov	r3, r0
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	2b08      	cmp	r3, #8
 800431c:	d106      	bne.n	800432c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f00b f886 	bl	800f430 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2208      	movs	r2, #8
 800432a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	f004 fcf3 	bl	8008d1c <USB_ReadInterrupts>
 8004336:	4603      	mov	r3, r0
 8004338:	f003 0310 	and.w	r3, r3, #16
 800433c:	2b10      	cmp	r3, #16
 800433e:	d101      	bne.n	8004344 <HAL_HCD_IRQHandler+0x158>
 8004340:	2301      	movs	r3, #1
 8004342:	e000      	b.n	8004346 <HAL_HCD_IRQHandler+0x15a>
 8004344:	2300      	movs	r3, #0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d012      	beq.n	8004370 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699a      	ldr	r2, [r3, #24]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0210 	bic.w	r2, r2, #16
 8004358:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 ffa1 	bl	80052a2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0210 	orr.w	r2, r2, #16
 800436e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f004 fcd1 	bl	8008d1c <USB_ReadInterrupts>
 800437a:	4603      	mov	r3, r0
 800437c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004380:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004384:	d13a      	bne.n	80043fc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f005 f906 	bl	800959c <USB_HC_ReadInterrupt>
 8004390:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	e025      	b.n	80043e4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	fa22 f303 	lsr.w	r3, r2, r3
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d018      	beq.n	80043de <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043c2:	d106      	bne.n	80043d2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	4619      	mov	r1, r3
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f8ab 	bl	8004526 <HCD_HC_IN_IRQHandler>
 80043d0:	e005      	b.n	80043de <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	4619      	mov	r1, r3
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 fbf9 	bl	8004bd0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	3301      	adds	r3, #1
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d3d4      	bcc.n	8004398 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043f6:	615a      	str	r2, [r3, #20]
 80043f8:	e000      	b.n	80043fc <HAL_HCD_IRQHandler+0x210>
      return;
 80043fa:	bf00      	nop
    }
  }
}
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b082      	sub	sp, #8
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_HCD_Start+0x16>
 8004414:	2302      	movs	r3, #2
 8004416:	e013      	b.n	8004440 <HAL_HCD_Start+0x3e>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2101      	movs	r1, #1
 8004426:	4618      	mov	r0, r3
 8004428:	f004 fdf2 	bl	8009010 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f004 fb0a 	bl	8008a4a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_HCD_Stop+0x16>
 800445a:	2302      	movs	r3, #2
 800445c:	e00d      	b.n	800447a <HAL_HCD_Stop+0x32>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f005 f9e0 	bl	8009830 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b082      	sub	sp, #8
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f004 fd94 	bl	8008fbc <USB_ResetPort>
 8004494:	4603      	mov	r3, r0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	460b      	mov	r3, r1
 80044a8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80044aa:	78fb      	ldrb	r3, [r7, #3]
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	212c      	movs	r1, #44	; 0x2c
 80044b0:	fb01 f303 	mul.w	r3, r1, r3
 80044b4:	4413      	add	r3, r2
 80044b6:	3360      	adds	r3, #96	; 0x60
 80044b8:	781b      	ldrb	r3, [r3, #0]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	460b      	mov	r3, r1
 80044d0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80044d2:	78fb      	ldrb	r3, [r7, #3]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	212c      	movs	r1, #44	; 0x2c
 80044d8:	fb01 f303 	mul.w	r3, r1, r3
 80044dc:	4413      	add	r3, r2
 80044de:	3350      	adds	r3, #80	; 0x50
 80044e0:	681b      	ldr	r3, [r3, #0]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b082      	sub	sp, #8
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f004 fdd8 	bl	80090b0 <USB_GetCurrentFrame>
 8004500:	4603      	mov	r3, r0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b082      	sub	sp, #8
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f004 fdb3 	bl	8009082 <USB_GetHostSpeed>
 800451c:	4603      	mov	r3, r0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b086      	sub	sp, #24
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	460b      	mov	r3, r1
 8004530:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	4413      	add	r3, r2
 8004548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b04      	cmp	r3, #4
 8004554:	d11a      	bne.n	800458c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	4413      	add	r3, r2
 800455e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004562:	461a      	mov	r2, r3
 8004564:	2304      	movs	r3, #4
 8004566:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	212c      	movs	r1, #44	; 0x2c
 800456e:	fb01 f303 	mul.w	r3, r1, r3
 8004572:	4413      	add	r3, r2
 8004574:	3361      	adds	r3, #97	; 0x61
 8004576:	2206      	movs	r2, #6
 8004578:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	4611      	mov	r1, r2
 8004584:	4618      	mov	r0, r3
 8004586:	f005 f81a 	bl	80095be <USB_HC_Halt>
 800458a:	e0af      	b.n	80046ec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	4413      	add	r3, r2
 8004594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a2:	d11b      	bne.n	80045dc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b0:	461a      	mov	r2, r3
 80045b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	212c      	movs	r1, #44	; 0x2c
 80045be:	fb01 f303 	mul.w	r3, r1, r3
 80045c2:	4413      	add	r3, r2
 80045c4:	3361      	adds	r3, #97	; 0x61
 80045c6:	2207      	movs	r2, #7
 80045c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	4611      	mov	r1, r2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f004 fff2 	bl	80095be <USB_HC_Halt>
 80045da:	e087      	b.n	80046ec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d109      	bne.n	8004606 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045fe:	461a      	mov	r2, r3
 8004600:	2320      	movs	r3, #32
 8004602:	6093      	str	r3, [r2, #8]
 8004604:	e072      	b.n	80046ec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	4413      	add	r3, r2
 800460e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b08      	cmp	r3, #8
 800461a:	d11a      	bne.n	8004652 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	4413      	add	r3, r2
 8004624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004628:	461a      	mov	r2, r3
 800462a:	2308      	movs	r3, #8
 800462c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	212c      	movs	r1, #44	; 0x2c
 8004634:	fb01 f303 	mul.w	r3, r1, r3
 8004638:	4413      	add	r3, r2
 800463a:	3361      	adds	r3, #97	; 0x61
 800463c:	2205      	movs	r2, #5
 800463e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	4611      	mov	r1, r2
 800464a:	4618      	mov	r0, r3
 800464c:	f004 ffb7 	bl	80095be <USB_HC_Halt>
 8004650:	e04c      	b.n	80046ec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	4413      	add	r3, r2
 800465a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004668:	d11b      	bne.n	80046a2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	4413      	add	r3, r2
 8004672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004676:	461a      	mov	r2, r3
 8004678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800467c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	212c      	movs	r1, #44	; 0x2c
 8004684:	fb01 f303 	mul.w	r3, r1, r3
 8004688:	4413      	add	r3, r2
 800468a:	3361      	adds	r3, #97	; 0x61
 800468c:	2208      	movs	r2, #8
 800468e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	4611      	mov	r1, r2
 800469a:	4618      	mov	r0, r3
 800469c:	f004 ff8f 	bl	80095be <USB_HC_Halt>
 80046a0:	e024      	b.n	80046ec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b4:	2b80      	cmp	r3, #128	; 0x80
 80046b6:	d119      	bne.n	80046ec <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c4:	461a      	mov	r2, r3
 80046c6:	2380      	movs	r3, #128	; 0x80
 80046c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	212c      	movs	r1, #44	; 0x2c
 80046d0:	fb01 f303 	mul.w	r3, r1, r3
 80046d4:	4413      	add	r3, r2
 80046d6:	3361      	adds	r3, #97	; 0x61
 80046d8:	2206      	movs	r2, #6
 80046da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	4611      	mov	r1, r2
 80046e6:	4618      	mov	r0, r3
 80046e8:	f004 ff69 	bl	80095be <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004702:	d112      	bne.n	800472a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	4611      	mov	r1, r2
 800470e:	4618      	mov	r0, r3
 8004710:	f004 ff55 	bl	80095be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	4413      	add	r3, r2
 800471c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004720:	461a      	mov	r2, r3
 8004722:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004726:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004728:	e24e      	b.n	8004bc8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4413      	add	r3, r2
 8004732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b01      	cmp	r3, #1
 800473e:	f040 80df 	bne.w	8004900 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d019      	beq.n	800477e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	212c      	movs	r1, #44	; 0x2c
 8004750:	fb01 f303 	mul.w	r3, r1, r3
 8004754:	4413      	add	r3, r2
 8004756:	3348      	adds	r3, #72	; 0x48
 8004758:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	0159      	lsls	r1, r3, #5
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	440b      	add	r3, r1
 8004762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800476c:	1ad2      	subs	r2, r2, r3
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	202c      	movs	r0, #44	; 0x2c
 8004774:	fb00 f303 	mul.w	r3, r0, r3
 8004778:	440b      	add	r3, r1
 800477a:	3350      	adds	r3, #80	; 0x50
 800477c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	212c      	movs	r1, #44	; 0x2c
 8004784:	fb01 f303 	mul.w	r3, r1, r3
 8004788:	4413      	add	r3, r2
 800478a:	3361      	adds	r3, #97	; 0x61
 800478c:	2201      	movs	r2, #1
 800478e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	212c      	movs	r1, #44	; 0x2c
 8004796:	fb01 f303 	mul.w	r3, r1, r3
 800479a:	4413      	add	r3, r2
 800479c:	335c      	adds	r3, #92	; 0x5c
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ae:	461a      	mov	r2, r3
 80047b0:	2301      	movs	r3, #1
 80047b2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	212c      	movs	r1, #44	; 0x2c
 80047ba:	fb01 f303 	mul.w	r3, r1, r3
 80047be:	4413      	add	r3, r2
 80047c0:	333f      	adds	r3, #63	; 0x3f
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d009      	beq.n	80047dc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	212c      	movs	r1, #44	; 0x2c
 80047ce:	fb01 f303 	mul.w	r3, r1, r3
 80047d2:	4413      	add	r3, r2
 80047d4:	333f      	adds	r3, #63	; 0x3f
 80047d6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d111      	bne.n	8004800 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	4611      	mov	r1, r2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f004 fee9 	bl	80095be <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f8:	461a      	mov	r2, r3
 80047fa:	2310      	movs	r3, #16
 80047fc:	6093      	str	r3, [r2, #8]
 80047fe:	e03a      	b.n	8004876 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	212c      	movs	r1, #44	; 0x2c
 8004806:	fb01 f303 	mul.w	r3, r1, r3
 800480a:	4413      	add	r3, r2
 800480c:	333f      	adds	r3, #63	; 0x3f
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b03      	cmp	r3, #3
 8004812:	d009      	beq.n	8004828 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	212c      	movs	r1, #44	; 0x2c
 800481a:	fb01 f303 	mul.w	r3, r1, r3
 800481e:	4413      	add	r3, r2
 8004820:	333f      	adds	r3, #63	; 0x3f
 8004822:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004824:	2b01      	cmp	r3, #1
 8004826:	d126      	bne.n	8004876 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	4413      	add	r3, r2
 8004830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	0151      	lsls	r1, r2, #5
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	440a      	add	r2, r1
 800483e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004842:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004846:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	212c      	movs	r1, #44	; 0x2c
 800484e:	fb01 f303 	mul.w	r3, r1, r3
 8004852:	4413      	add	r3, r2
 8004854:	3360      	adds	r3, #96	; 0x60
 8004856:	2201      	movs	r2, #1
 8004858:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	b2d9      	uxtb	r1, r3
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	202c      	movs	r0, #44	; 0x2c
 8004864:	fb00 f303 	mul.w	r3, r0, r3
 8004868:	4413      	add	r3, r2
 800486a:	3360      	adds	r3, #96	; 0x60
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f00a fe07 	bl	800f484 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d12b      	bne.n	80048d6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	212c      	movs	r1, #44	; 0x2c
 8004884:	fb01 f303 	mul.w	r3, r1, r3
 8004888:	4413      	add	r3, r2
 800488a:	3348      	adds	r3, #72	; 0x48
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6879      	ldr	r1, [r7, #4]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	202c      	movs	r0, #44	; 0x2c
 8004894:	fb00 f202 	mul.w	r2, r0, r2
 8004898:	440a      	add	r2, r1
 800489a:	3240      	adds	r2, #64	; 0x40
 800489c:	8812      	ldrh	r2, [r2, #0]
 800489e:	fbb3 f3f2 	udiv	r3, r3, r2
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 818e 	beq.w	8004bc8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	212c      	movs	r1, #44	; 0x2c
 80048b2:	fb01 f303 	mul.w	r3, r1, r3
 80048b6:	4413      	add	r3, r2
 80048b8:	3354      	adds	r3, #84	; 0x54
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	f083 0301 	eor.w	r3, r3, #1
 80048c0:	b2d8      	uxtb	r0, r3
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	212c      	movs	r1, #44	; 0x2c
 80048c8:	fb01 f303 	mul.w	r3, r1, r3
 80048cc:	4413      	add	r3, r2
 80048ce:	3354      	adds	r3, #84	; 0x54
 80048d0:	4602      	mov	r2, r0
 80048d2:	701a      	strb	r2, [r3, #0]
}
 80048d4:	e178      	b.n	8004bc8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	212c      	movs	r1, #44	; 0x2c
 80048dc:	fb01 f303 	mul.w	r3, r1, r3
 80048e0:	4413      	add	r3, r2
 80048e2:	3354      	adds	r3, #84	; 0x54
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	f083 0301 	eor.w	r3, r3, #1
 80048ea:	b2d8      	uxtb	r0, r3
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	212c      	movs	r1, #44	; 0x2c
 80048f2:	fb01 f303 	mul.w	r3, r1, r3
 80048f6:	4413      	add	r3, r2
 80048f8:	3354      	adds	r3, #84	; 0x54
 80048fa:	4602      	mov	r2, r0
 80048fc:	701a      	strb	r2, [r3, #0]
}
 80048fe:	e163      	b.n	8004bc8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	4413      	add	r3, r2
 8004908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b02      	cmp	r3, #2
 8004914:	f040 80f6 	bne.w	8004b04 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	212c      	movs	r1, #44	; 0x2c
 800491e:	fb01 f303 	mul.w	r3, r1, r3
 8004922:	4413      	add	r3, r2
 8004924:	3361      	adds	r3, #97	; 0x61
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d109      	bne.n	8004940 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	212c      	movs	r1, #44	; 0x2c
 8004932:	fb01 f303 	mul.w	r3, r1, r3
 8004936:	4413      	add	r3, r2
 8004938:	3360      	adds	r3, #96	; 0x60
 800493a:	2201      	movs	r2, #1
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	e0c9      	b.n	8004ad4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	212c      	movs	r1, #44	; 0x2c
 8004946:	fb01 f303 	mul.w	r3, r1, r3
 800494a:	4413      	add	r3, r2
 800494c:	3361      	adds	r3, #97	; 0x61
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b05      	cmp	r3, #5
 8004952:	d109      	bne.n	8004968 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	212c      	movs	r1, #44	; 0x2c
 800495a:	fb01 f303 	mul.w	r3, r1, r3
 800495e:	4413      	add	r3, r2
 8004960:	3360      	adds	r3, #96	; 0x60
 8004962:	2205      	movs	r2, #5
 8004964:	701a      	strb	r2, [r3, #0]
 8004966:	e0b5      	b.n	8004ad4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	212c      	movs	r1, #44	; 0x2c
 800496e:	fb01 f303 	mul.w	r3, r1, r3
 8004972:	4413      	add	r3, r2
 8004974:	3361      	adds	r3, #97	; 0x61
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	2b06      	cmp	r3, #6
 800497a:	d009      	beq.n	8004990 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	212c      	movs	r1, #44	; 0x2c
 8004982:	fb01 f303 	mul.w	r3, r1, r3
 8004986:	4413      	add	r3, r2
 8004988:	3361      	adds	r3, #97	; 0x61
 800498a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800498c:	2b08      	cmp	r3, #8
 800498e:	d150      	bne.n	8004a32 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	212c      	movs	r1, #44	; 0x2c
 8004996:	fb01 f303 	mul.w	r3, r1, r3
 800499a:	4413      	add	r3, r2
 800499c:	335c      	adds	r3, #92	; 0x5c
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	6879      	ldr	r1, [r7, #4]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	202c      	movs	r0, #44	; 0x2c
 80049a8:	fb00 f303 	mul.w	r3, r0, r3
 80049ac:	440b      	add	r3, r1
 80049ae:	335c      	adds	r3, #92	; 0x5c
 80049b0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	212c      	movs	r1, #44	; 0x2c
 80049b8:	fb01 f303 	mul.w	r3, r1, r3
 80049bc:	4413      	add	r3, r2
 80049be:	335c      	adds	r3, #92	; 0x5c
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d912      	bls.n	80049ec <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	212c      	movs	r1, #44	; 0x2c
 80049cc:	fb01 f303 	mul.w	r3, r1, r3
 80049d0:	4413      	add	r3, r2
 80049d2:	335c      	adds	r3, #92	; 0x5c
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	212c      	movs	r1, #44	; 0x2c
 80049de:	fb01 f303 	mul.w	r3, r1, r3
 80049e2:	4413      	add	r3, r2
 80049e4:	3360      	adds	r3, #96	; 0x60
 80049e6:	2204      	movs	r2, #4
 80049e8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80049ea:	e073      	b.n	8004ad4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	212c      	movs	r1, #44	; 0x2c
 80049f2:	fb01 f303 	mul.w	r3, r1, r3
 80049f6:	4413      	add	r3, r2
 80049f8:	3360      	adds	r3, #96	; 0x60
 80049fa:	2202      	movs	r2, #2
 80049fc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a14:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a1c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a30:	e050      	b.n	8004ad4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	212c      	movs	r1, #44	; 0x2c
 8004a38:	fb01 f303 	mul.w	r3, r1, r3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3361      	adds	r3, #97	; 0x61
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d122      	bne.n	8004a8c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	212c      	movs	r1, #44	; 0x2c
 8004a4c:	fb01 f303 	mul.w	r3, r1, r3
 8004a50:	4413      	add	r3, r2
 8004a52:	3360      	adds	r3, #96	; 0x60
 8004a54:	2202      	movs	r2, #2
 8004a56:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a6e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a76:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a84:	461a      	mov	r2, r3
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	e023      	b.n	8004ad4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	212c      	movs	r1, #44	; 0x2c
 8004a92:	fb01 f303 	mul.w	r3, r1, r3
 8004a96:	4413      	add	r3, r2
 8004a98:	3361      	adds	r3, #97	; 0x61
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	2b07      	cmp	r3, #7
 8004a9e:	d119      	bne.n	8004ad4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	212c      	movs	r1, #44	; 0x2c
 8004aa6:	fb01 f303 	mul.w	r3, r1, r3
 8004aaa:	4413      	add	r3, r2
 8004aac:	335c      	adds	r3, #92	; 0x5c
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	202c      	movs	r0, #44	; 0x2c
 8004ab8:	fb00 f303 	mul.w	r3, r0, r3
 8004abc:	440b      	add	r3, r1
 8004abe:	335c      	adds	r3, #92	; 0x5c
 8004ac0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	212c      	movs	r1, #44	; 0x2c
 8004ac8:	fb01 f303 	mul.w	r3, r1, r3
 8004acc:	4413      	add	r3, r2
 8004ace:	3360      	adds	r3, #96	; 0x60
 8004ad0:	2204      	movs	r2, #4
 8004ad2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	b2d9      	uxtb	r1, r3
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	202c      	movs	r0, #44	; 0x2c
 8004af0:	fb00 f303 	mul.w	r3, r0, r3
 8004af4:	4413      	add	r3, r2
 8004af6:	3360      	adds	r3, #96	; 0x60
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f00a fcc1 	bl	800f484 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004b02:	e061      	b.n	8004bc8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 0310 	and.w	r3, r3, #16
 8004b16:	2b10      	cmp	r3, #16
 8004b18:	d156      	bne.n	8004bc8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	212c      	movs	r1, #44	; 0x2c
 8004b20:	fb01 f303 	mul.w	r3, r1, r3
 8004b24:	4413      	add	r3, r2
 8004b26:	333f      	adds	r3, #63	; 0x3f
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d111      	bne.n	8004b52 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	212c      	movs	r1, #44	; 0x2c
 8004b34:	fb01 f303 	mul.w	r3, r1, r3
 8004b38:	4413      	add	r3, r2
 8004b3a:	335c      	adds	r3, #92	; 0x5c
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	4611      	mov	r1, r2
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f004 fd37 	bl	80095be <USB_HC_Halt>
 8004b50:	e031      	b.n	8004bb6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	212c      	movs	r1, #44	; 0x2c
 8004b58:	fb01 f303 	mul.w	r3, r1, r3
 8004b5c:	4413      	add	r3, r2
 8004b5e:	333f      	adds	r3, #63	; 0x3f
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d009      	beq.n	8004b7a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	212c      	movs	r1, #44	; 0x2c
 8004b6c:	fb01 f303 	mul.w	r3, r1, r3
 8004b70:	4413      	add	r3, r2
 8004b72:	333f      	adds	r3, #63	; 0x3f
 8004b74:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d11d      	bne.n	8004bb6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	212c      	movs	r1, #44	; 0x2c
 8004b80:	fb01 f303 	mul.w	r3, r1, r3
 8004b84:	4413      	add	r3, r2
 8004b86:	335c      	adds	r3, #92	; 0x5c
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d110      	bne.n	8004bb6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	212c      	movs	r1, #44	; 0x2c
 8004b9a:	fb01 f303 	mul.w	r3, r1, r3
 8004b9e:	4413      	add	r3, r2
 8004ba0:	3361      	adds	r3, #97	; 0x61
 8004ba2:	2203      	movs	r2, #3
 8004ba4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	4611      	mov	r1, r2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f004 fd04 	bl	80095be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	2310      	movs	r3, #16
 8004bc6:	6093      	str	r3, [r2, #8]
}
 8004bc8:	bf00      	nop
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b088      	sub	sp, #32
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004be6:	78fb      	ldrb	r3, [r7, #3]
 8004be8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d11a      	bne.n	8004c36 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	2304      	movs	r3, #4
 8004c10:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	212c      	movs	r1, #44	; 0x2c
 8004c18:	fb01 f303 	mul.w	r3, r1, r3
 8004c1c:	4413      	add	r3, r2
 8004c1e:	3361      	adds	r3, #97	; 0x61
 8004c20:	2206      	movs	r2, #6
 8004c22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f004 fcc5 	bl	80095be <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004c34:	e331      	b.n	800529a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	015a      	lsls	r2, r3, #5
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f003 0320 	and.w	r3, r3, #32
 8004c48:	2b20      	cmp	r3, #32
 8004c4a:	d12e      	bne.n	8004caa <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c58:	461a      	mov	r2, r3
 8004c5a:	2320      	movs	r3, #32
 8004c5c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	212c      	movs	r1, #44	; 0x2c
 8004c64:	fb01 f303 	mul.w	r3, r1, r3
 8004c68:	4413      	add	r3, r2
 8004c6a:	333d      	adds	r3, #61	; 0x3d
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	f040 8313 	bne.w	800529a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	212c      	movs	r1, #44	; 0x2c
 8004c7a:	fb01 f303 	mul.w	r3, r1, r3
 8004c7e:	4413      	add	r3, r2
 8004c80:	333d      	adds	r3, #61	; 0x3d
 8004c82:	2200      	movs	r2, #0
 8004c84:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	212c      	movs	r1, #44	; 0x2c
 8004c8c:	fb01 f303 	mul.w	r3, r1, r3
 8004c90:	4413      	add	r3, r2
 8004c92:	3360      	adds	r3, #96	; 0x60
 8004c94:	2202      	movs	r2, #2
 8004c96:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f004 fc8b 	bl	80095be <USB_HC_Halt>
}
 8004ca8:	e2f7      	b.n	800529a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cc0:	d112      	bne.n	8004ce8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cd4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	4611      	mov	r1, r2
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f004 fc6c 	bl	80095be <USB_HC_Halt>
}
 8004ce6:	e2d8      	b.n	800529a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d140      	bne.n	8004d80 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	212c      	movs	r1, #44	; 0x2c
 8004d04:	fb01 f303 	mul.w	r3, r1, r3
 8004d08:	4413      	add	r3, r2
 8004d0a:	335c      	adds	r3, #92	; 0x5c
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d22:	2b40      	cmp	r3, #64	; 0x40
 8004d24:	d111      	bne.n	8004d4a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	212c      	movs	r1, #44	; 0x2c
 8004d2c:	fb01 f303 	mul.w	r3, r1, r3
 8004d30:	4413      	add	r3, r2
 8004d32:	333d      	adds	r3, #61	; 0x3d
 8004d34:	2201      	movs	r2, #1
 8004d36:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d44:	461a      	mov	r2, r3
 8004d46:	2340      	movs	r3, #64	; 0x40
 8004d48:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d56:	461a      	mov	r2, r3
 8004d58:	2301      	movs	r3, #1
 8004d5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	212c      	movs	r1, #44	; 0x2c
 8004d62:	fb01 f303 	mul.w	r3, r1, r3
 8004d66:	4413      	add	r3, r2
 8004d68:	3361      	adds	r3, #97	; 0x61
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	4611      	mov	r1, r2
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f004 fc20 	bl	80095be <USB_HC_Halt>
}
 8004d7e:	e28c      	b.n	800529a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d92:	2b40      	cmp	r3, #64	; 0x40
 8004d94:	d12c      	bne.n	8004df0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	212c      	movs	r1, #44	; 0x2c
 8004d9c:	fb01 f303 	mul.w	r3, r1, r3
 8004da0:	4413      	add	r3, r2
 8004da2:	3361      	adds	r3, #97	; 0x61
 8004da4:	2204      	movs	r2, #4
 8004da6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	212c      	movs	r1, #44	; 0x2c
 8004dae:	fb01 f303 	mul.w	r3, r1, r3
 8004db2:	4413      	add	r3, r2
 8004db4:	333d      	adds	r3, #61	; 0x3d
 8004db6:	2201      	movs	r2, #1
 8004db8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	212c      	movs	r1, #44	; 0x2c
 8004dc0:	fb01 f303 	mul.w	r3, r1, r3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	335c      	adds	r3, #92	; 0x5c
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f004 fbf1 	bl	80095be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de8:	461a      	mov	r2, r3
 8004dea:	2340      	movs	r3, #64	; 0x40
 8004dec:	6093      	str	r3, [r2, #8]
}
 8004dee:	e254      	b.n	800529a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b08      	cmp	r3, #8
 8004e04:	d11a      	bne.n	8004e3c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e12:	461a      	mov	r2, r3
 8004e14:	2308      	movs	r3, #8
 8004e16:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	212c      	movs	r1, #44	; 0x2c
 8004e1e:	fb01 f303 	mul.w	r3, r1, r3
 8004e22:	4413      	add	r3, r2
 8004e24:	3361      	adds	r3, #97	; 0x61
 8004e26:	2205      	movs	r2, #5
 8004e28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	b2d2      	uxtb	r2, r2
 8004e32:	4611      	mov	r1, r2
 8004e34:	4618      	mov	r0, r3
 8004e36:	f004 fbc2 	bl	80095be <USB_HC_Halt>
}
 8004e3a:	e22e      	b.n	800529a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 0310 	and.w	r3, r3, #16
 8004e4e:	2b10      	cmp	r3, #16
 8004e50:	d140      	bne.n	8004ed4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	212c      	movs	r1, #44	; 0x2c
 8004e58:	fb01 f303 	mul.w	r3, r1, r3
 8004e5c:	4413      	add	r3, r2
 8004e5e:	335c      	adds	r3, #92	; 0x5c
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	212c      	movs	r1, #44	; 0x2c
 8004e6a:	fb01 f303 	mul.w	r3, r1, r3
 8004e6e:	4413      	add	r3, r2
 8004e70:	3361      	adds	r3, #97	; 0x61
 8004e72:	2203      	movs	r2, #3
 8004e74:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	212c      	movs	r1, #44	; 0x2c
 8004e7c:	fb01 f303 	mul.w	r3, r1, r3
 8004e80:	4413      	add	r3, r2
 8004e82:	333d      	adds	r3, #61	; 0x3d
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d112      	bne.n	8004eb0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	212c      	movs	r1, #44	; 0x2c
 8004e90:	fb01 f303 	mul.w	r3, r1, r3
 8004e94:	4413      	add	r3, r2
 8004e96:	333c      	adds	r3, #60	; 0x3c
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d108      	bne.n	8004eb0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	212c      	movs	r1, #44	; 0x2c
 8004ea4:	fb01 f303 	mul.w	r3, r1, r3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	333d      	adds	r3, #61	; 0x3d
 8004eac:	2201      	movs	r2, #1
 8004eae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	4611      	mov	r1, r2
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f004 fb7f 	bl	80095be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ecc:	461a      	mov	r2, r3
 8004ece:	2310      	movs	r3, #16
 8004ed0:	6093      	str	r3, [r2, #8]
}
 8004ed2:	e1e2      	b.n	800529a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee6:	2b80      	cmp	r3, #128	; 0x80
 8004ee8:	d164      	bne.n	8004fb4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d111      	bne.n	8004f16 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	212c      	movs	r1, #44	; 0x2c
 8004ef8:	fb01 f303 	mul.w	r3, r1, r3
 8004efc:	4413      	add	r3, r2
 8004efe:	3361      	adds	r3, #97	; 0x61
 8004f00:	2206      	movs	r2, #6
 8004f02:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	4611      	mov	r1, r2
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f004 fb55 	bl	80095be <USB_HC_Halt>
 8004f14:	e044      	b.n	8004fa0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	212c      	movs	r1, #44	; 0x2c
 8004f1c:	fb01 f303 	mul.w	r3, r1, r3
 8004f20:	4413      	add	r3, r2
 8004f22:	335c      	adds	r3, #92	; 0x5c
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	202c      	movs	r0, #44	; 0x2c
 8004f2e:	fb00 f303 	mul.w	r3, r0, r3
 8004f32:	440b      	add	r3, r1
 8004f34:	335c      	adds	r3, #92	; 0x5c
 8004f36:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	212c      	movs	r1, #44	; 0x2c
 8004f3e:	fb01 f303 	mul.w	r3, r1, r3
 8004f42:	4413      	add	r3, r2
 8004f44:	335c      	adds	r3, #92	; 0x5c
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d920      	bls.n	8004f8e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	212c      	movs	r1, #44	; 0x2c
 8004f52:	fb01 f303 	mul.w	r3, r1, r3
 8004f56:	4413      	add	r3, r2
 8004f58:	335c      	adds	r3, #92	; 0x5c
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	212c      	movs	r1, #44	; 0x2c
 8004f64:	fb01 f303 	mul.w	r3, r1, r3
 8004f68:	4413      	add	r3, r2
 8004f6a:	3360      	adds	r3, #96	; 0x60
 8004f6c:	2204      	movs	r2, #4
 8004f6e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	b2d9      	uxtb	r1, r3
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	202c      	movs	r0, #44	; 0x2c
 8004f7a:	fb00 f303 	mul.w	r3, r0, r3
 8004f7e:	4413      	add	r3, r2
 8004f80:	3360      	adds	r3, #96	; 0x60
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	461a      	mov	r2, r3
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f00a fa7c 	bl	800f484 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f8c:	e008      	b.n	8004fa0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	212c      	movs	r1, #44	; 0x2c
 8004f94:	fb01 f303 	mul.w	r3, r1, r3
 8004f98:	4413      	add	r3, r2
 8004f9a:	3360      	adds	r3, #96	; 0x60
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fac:	461a      	mov	r2, r3
 8004fae:	2380      	movs	r3, #128	; 0x80
 8004fb0:	6093      	str	r3, [r2, #8]
}
 8004fb2:	e172      	b.n	800529a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fca:	d11b      	bne.n	8005004 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	212c      	movs	r1, #44	; 0x2c
 8004fd2:	fb01 f303 	mul.w	r3, r1, r3
 8004fd6:	4413      	add	r3, r2
 8004fd8:	3361      	adds	r3, #97	; 0x61
 8004fda:	2208      	movs	r2, #8
 8004fdc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	4611      	mov	r1, r2
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f004 fae8 	bl	80095be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005000:	6093      	str	r3, [r2, #8]
}
 8005002:	e14a      	b.n	800529a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	4413      	add	r3, r2
 800500c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b02      	cmp	r3, #2
 8005018:	f040 813f 	bne.w	800529a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	212c      	movs	r1, #44	; 0x2c
 8005022:	fb01 f303 	mul.w	r3, r1, r3
 8005026:	4413      	add	r3, r2
 8005028:	3361      	adds	r3, #97	; 0x61
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d17d      	bne.n	800512c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	212c      	movs	r1, #44	; 0x2c
 8005036:	fb01 f303 	mul.w	r3, r1, r3
 800503a:	4413      	add	r3, r2
 800503c:	3360      	adds	r3, #96	; 0x60
 800503e:	2201      	movs	r2, #1
 8005040:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	212c      	movs	r1, #44	; 0x2c
 8005048:	fb01 f303 	mul.w	r3, r1, r3
 800504c:	4413      	add	r3, r2
 800504e:	333f      	adds	r3, #63	; 0x3f
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	2b02      	cmp	r3, #2
 8005054:	d00a      	beq.n	800506c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	212c      	movs	r1, #44	; 0x2c
 800505c:	fb01 f303 	mul.w	r3, r1, r3
 8005060:	4413      	add	r3, r2
 8005062:	333f      	adds	r3, #63	; 0x3f
 8005064:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005066:	2b03      	cmp	r3, #3
 8005068:	f040 8100 	bne.w	800526c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d113      	bne.n	800509c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	212c      	movs	r1, #44	; 0x2c
 800507a:	fb01 f303 	mul.w	r3, r1, r3
 800507e:	4413      	add	r3, r2
 8005080:	3355      	adds	r3, #85	; 0x55
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	f083 0301 	eor.w	r3, r3, #1
 8005088:	b2d8      	uxtb	r0, r3
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	212c      	movs	r1, #44	; 0x2c
 8005090:	fb01 f303 	mul.w	r3, r1, r3
 8005094:	4413      	add	r3, r2
 8005096:	3355      	adds	r3, #85	; 0x55
 8005098:	4602      	mov	r2, r0
 800509a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	f040 80e3 	bne.w	800526c <HCD_HC_OUT_IRQHandler+0x69c>
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	212c      	movs	r1, #44	; 0x2c
 80050ac:	fb01 f303 	mul.w	r3, r1, r3
 80050b0:	4413      	add	r3, r2
 80050b2:	334c      	adds	r3, #76	; 0x4c
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 80d8 	beq.w	800526c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	212c      	movs	r1, #44	; 0x2c
 80050c2:	fb01 f303 	mul.w	r3, r1, r3
 80050c6:	4413      	add	r3, r2
 80050c8:	334c      	adds	r3, #76	; 0x4c
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	202c      	movs	r0, #44	; 0x2c
 80050d2:	fb00 f202 	mul.w	r2, r0, r2
 80050d6:	440a      	add	r2, r1
 80050d8:	3240      	adds	r2, #64	; 0x40
 80050da:	8812      	ldrh	r2, [r2, #0]
 80050dc:	4413      	add	r3, r2
 80050de:	3b01      	subs	r3, #1
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	202c      	movs	r0, #44	; 0x2c
 80050e6:	fb00 f202 	mul.w	r2, r0, r2
 80050ea:	440a      	add	r2, r1
 80050ec:	3240      	adds	r2, #64	; 0x40
 80050ee:	8812      	ldrh	r2, [r2, #0]
 80050f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 80b5 	beq.w	800526c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	212c      	movs	r1, #44	; 0x2c
 8005108:	fb01 f303 	mul.w	r3, r1, r3
 800510c:	4413      	add	r3, r2
 800510e:	3355      	adds	r3, #85	; 0x55
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	f083 0301 	eor.w	r3, r3, #1
 8005116:	b2d8      	uxtb	r0, r3
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	212c      	movs	r1, #44	; 0x2c
 800511e:	fb01 f303 	mul.w	r3, r1, r3
 8005122:	4413      	add	r3, r2
 8005124:	3355      	adds	r3, #85	; 0x55
 8005126:	4602      	mov	r2, r0
 8005128:	701a      	strb	r2, [r3, #0]
 800512a:	e09f      	b.n	800526c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	212c      	movs	r1, #44	; 0x2c
 8005132:	fb01 f303 	mul.w	r3, r1, r3
 8005136:	4413      	add	r3, r2
 8005138:	3361      	adds	r3, #97	; 0x61
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b03      	cmp	r3, #3
 800513e:	d109      	bne.n	8005154 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	212c      	movs	r1, #44	; 0x2c
 8005146:	fb01 f303 	mul.w	r3, r1, r3
 800514a:	4413      	add	r3, r2
 800514c:	3360      	adds	r3, #96	; 0x60
 800514e:	2202      	movs	r2, #2
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	e08b      	b.n	800526c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	212c      	movs	r1, #44	; 0x2c
 800515a:	fb01 f303 	mul.w	r3, r1, r3
 800515e:	4413      	add	r3, r2
 8005160:	3361      	adds	r3, #97	; 0x61
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2b04      	cmp	r3, #4
 8005166:	d109      	bne.n	800517c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	212c      	movs	r1, #44	; 0x2c
 800516e:	fb01 f303 	mul.w	r3, r1, r3
 8005172:	4413      	add	r3, r2
 8005174:	3360      	adds	r3, #96	; 0x60
 8005176:	2202      	movs	r2, #2
 8005178:	701a      	strb	r2, [r3, #0]
 800517a:	e077      	b.n	800526c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	212c      	movs	r1, #44	; 0x2c
 8005182:	fb01 f303 	mul.w	r3, r1, r3
 8005186:	4413      	add	r3, r2
 8005188:	3361      	adds	r3, #97	; 0x61
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b05      	cmp	r3, #5
 800518e:	d109      	bne.n	80051a4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	212c      	movs	r1, #44	; 0x2c
 8005196:	fb01 f303 	mul.w	r3, r1, r3
 800519a:	4413      	add	r3, r2
 800519c:	3360      	adds	r3, #96	; 0x60
 800519e:	2205      	movs	r2, #5
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	e063      	b.n	800526c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	212c      	movs	r1, #44	; 0x2c
 80051aa:	fb01 f303 	mul.w	r3, r1, r3
 80051ae:	4413      	add	r3, r2
 80051b0:	3361      	adds	r3, #97	; 0x61
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b06      	cmp	r3, #6
 80051b6:	d009      	beq.n	80051cc <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	212c      	movs	r1, #44	; 0x2c
 80051be:	fb01 f303 	mul.w	r3, r1, r3
 80051c2:	4413      	add	r3, r2
 80051c4:	3361      	adds	r3, #97	; 0x61
 80051c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d14f      	bne.n	800526c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	212c      	movs	r1, #44	; 0x2c
 80051d2:	fb01 f303 	mul.w	r3, r1, r3
 80051d6:	4413      	add	r3, r2
 80051d8:	335c      	adds	r3, #92	; 0x5c
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	1c5a      	adds	r2, r3, #1
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	202c      	movs	r0, #44	; 0x2c
 80051e4:	fb00 f303 	mul.w	r3, r0, r3
 80051e8:	440b      	add	r3, r1
 80051ea:	335c      	adds	r3, #92	; 0x5c
 80051ec:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	212c      	movs	r1, #44	; 0x2c
 80051f4:	fb01 f303 	mul.w	r3, r1, r3
 80051f8:	4413      	add	r3, r2
 80051fa:	335c      	adds	r3, #92	; 0x5c
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d912      	bls.n	8005228 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	212c      	movs	r1, #44	; 0x2c
 8005208:	fb01 f303 	mul.w	r3, r1, r3
 800520c:	4413      	add	r3, r2
 800520e:	335c      	adds	r3, #92	; 0x5c
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	212c      	movs	r1, #44	; 0x2c
 800521a:	fb01 f303 	mul.w	r3, r1, r3
 800521e:	4413      	add	r3, r2
 8005220:	3360      	adds	r3, #96	; 0x60
 8005222:	2204      	movs	r2, #4
 8005224:	701a      	strb	r2, [r3, #0]
 8005226:	e021      	b.n	800526c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	212c      	movs	r1, #44	; 0x2c
 800522e:	fb01 f303 	mul.w	r3, r1, r3
 8005232:	4413      	add	r3, r2
 8005234:	3360      	adds	r3, #96	; 0x60
 8005236:	2202      	movs	r2, #2
 8005238:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	4413      	add	r3, r2
 8005242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005250:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005258:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	4413      	add	r3, r2
 8005262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005266:	461a      	mov	r2, r3
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	4413      	add	r3, r2
 8005274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005278:	461a      	mov	r2, r3
 800527a:	2302      	movs	r3, #2
 800527c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	b2d9      	uxtb	r1, r3
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	202c      	movs	r0, #44	; 0x2c
 8005288:	fb00 f303 	mul.w	r3, r0, r3
 800528c:	4413      	add	r3, r2
 800528e:	3360      	adds	r3, #96	; 0x60
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f00a f8f5 	bl	800f484 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800529a:	bf00      	nop
 800529c:	3720      	adds	r7, #32
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b08a      	sub	sp, #40	; 0x28
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	0c5b      	lsrs	r3, r3, #17
 80052c8:	f003 030f 	and.w	r3, r3, #15
 80052cc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	091b      	lsrs	r3, r3, #4
 80052d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052d6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d004      	beq.n	80052e8 <HCD_RXQLVL_IRQHandler+0x46>
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2b05      	cmp	r3, #5
 80052e2:	f000 80a9 	beq.w	8005438 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80052e6:	e0aa      	b.n	800543e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 80a6 	beq.w	800543c <HCD_RXQLVL_IRQHandler+0x19a>
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	212c      	movs	r1, #44	; 0x2c
 80052f6:	fb01 f303 	mul.w	r3, r1, r3
 80052fa:	4413      	add	r3, r2
 80052fc:	3344      	adds	r3, #68	; 0x44
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 809b 	beq.w	800543c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	212c      	movs	r1, #44	; 0x2c
 800530c:	fb01 f303 	mul.w	r3, r1, r3
 8005310:	4413      	add	r3, r2
 8005312:	3350      	adds	r3, #80	; 0x50
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	441a      	add	r2, r3
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	202c      	movs	r0, #44	; 0x2c
 8005320:	fb00 f303 	mul.w	r3, r0, r3
 8005324:	440b      	add	r3, r1
 8005326:	334c      	adds	r3, #76	; 0x4c
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d87a      	bhi.n	8005424 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6818      	ldr	r0, [r3, #0]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	212c      	movs	r1, #44	; 0x2c
 8005338:	fb01 f303 	mul.w	r3, r1, r3
 800533c:	4413      	add	r3, r2
 800533e:	3344      	adds	r3, #68	; 0x44
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	b292      	uxth	r2, r2
 8005346:	4619      	mov	r1, r3
 8005348:	f003 fc90 	bl	8008c6c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	212c      	movs	r1, #44	; 0x2c
 8005352:	fb01 f303 	mul.w	r3, r1, r3
 8005356:	4413      	add	r3, r2
 8005358:	3344      	adds	r3, #68	; 0x44
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	441a      	add	r2, r3
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	202c      	movs	r0, #44	; 0x2c
 8005366:	fb00 f303 	mul.w	r3, r0, r3
 800536a:	440b      	add	r3, r1
 800536c:	3344      	adds	r3, #68	; 0x44
 800536e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	212c      	movs	r1, #44	; 0x2c
 8005376:	fb01 f303 	mul.w	r3, r1, r3
 800537a:	4413      	add	r3, r2
 800537c:	3350      	adds	r3, #80	; 0x50
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	441a      	add	r2, r3
 8005384:	6879      	ldr	r1, [r7, #4]
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	202c      	movs	r0, #44	; 0x2c
 800538a:	fb00 f303 	mul.w	r3, r0, r3
 800538e:	440b      	add	r3, r1
 8005390:	3350      	adds	r3, #80	; 0x50
 8005392:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	4413      	add	r3, r2
 800539c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	0cdb      	lsrs	r3, r3, #19
 80053a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053a8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	212c      	movs	r1, #44	; 0x2c
 80053b0:	fb01 f303 	mul.w	r3, r1, r3
 80053b4:	4413      	add	r3, r2
 80053b6:	3340      	adds	r3, #64	; 0x40
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	4293      	cmp	r3, r2
 80053c0:	d13c      	bne.n	800543c <HCD_RXQLVL_IRQHandler+0x19a>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d039      	beq.n	800543c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053de:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053e6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f4:	461a      	mov	r2, r3
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	212c      	movs	r1, #44	; 0x2c
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	4413      	add	r3, r2
 8005406:	3354      	adds	r3, #84	; 0x54
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	f083 0301 	eor.w	r3, r3, #1
 800540e:	b2d8      	uxtb	r0, r3
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	212c      	movs	r1, #44	; 0x2c
 8005416:	fb01 f303 	mul.w	r3, r1, r3
 800541a:	4413      	add	r3, r2
 800541c:	3354      	adds	r3, #84	; 0x54
 800541e:	4602      	mov	r2, r0
 8005420:	701a      	strb	r2, [r3, #0]
      break;
 8005422:	e00b      	b.n	800543c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	212c      	movs	r1, #44	; 0x2c
 800542a:	fb01 f303 	mul.w	r3, r1, r3
 800542e:	4413      	add	r3, r2
 8005430:	3360      	adds	r3, #96	; 0x60
 8005432:	2204      	movs	r2, #4
 8005434:	701a      	strb	r2, [r3, #0]
      break;
 8005436:	e001      	b.n	800543c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005438:	bf00      	nop
 800543a:	e000      	b.n	800543e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800543c:	bf00      	nop
  }
}
 800543e:	bf00      	nop
 8005440:	3728      	adds	r7, #40	; 0x28
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b086      	sub	sp, #24
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005472:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b02      	cmp	r3, #2
 800547c:	d10b      	bne.n	8005496 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b01      	cmp	r3, #1
 8005486:	d102      	bne.n	800548e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f009 ffdf 	bl	800f44c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f043 0302 	orr.w	r3, r3, #2
 8005494:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f003 0308 	and.w	r3, r3, #8
 800549c:	2b08      	cmp	r3, #8
 800549e:	d132      	bne.n	8005506 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f043 0308 	orr.w	r3, r3, #8
 80054a6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f003 0304 	and.w	r3, r3, #4
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d126      	bne.n	8005500 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d113      	bne.n	80054e2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80054c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054c4:	d106      	bne.n	80054d4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2102      	movs	r1, #2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f003 fd3b 	bl	8008f48 <USB_InitFSLSPClkSel>
 80054d2:	e011      	b.n	80054f8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2101      	movs	r1, #1
 80054da:	4618      	mov	r0, r3
 80054dc:	f003 fd34 	bl	8008f48 <USB_InitFSLSPClkSel>
 80054e0:	e00a      	b.n	80054f8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d106      	bne.n	80054f8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054f0:	461a      	mov	r2, r3
 80054f2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80054f6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f009 ffd1 	bl	800f4a0 <HAL_HCD_PortEnabled_Callback>
 80054fe:	e002      	b.n	8005506 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f009 ffdb 	bl	800f4bc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f003 0320 	and.w	r3, r3, #32
 800550c:	2b20      	cmp	r3, #32
 800550e:	d103      	bne.n	8005518 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f043 0320 	orr.w	r3, r3, #32
 8005516:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800551e:	461a      	mov	r2, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	6013      	str	r3, [r2, #0]
}
 8005524:	bf00      	nop
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e12b      	b.n	8005796 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d106      	bne.n	8005558 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7fc fbd2 	bl	8001cfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2224      	movs	r2, #36	; 0x24
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0201 	bic.w	r2, r2, #1
 800556e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800557e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800558e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005590:	f003 f854 	bl	800863c <HAL_RCC_GetPCLK1Freq>
 8005594:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	4a81      	ldr	r2, [pc, #516]	; (80057a0 <HAL_I2C_Init+0x274>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d807      	bhi.n	80055b0 <HAL_I2C_Init+0x84>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4a80      	ldr	r2, [pc, #512]	; (80057a4 <HAL_I2C_Init+0x278>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	bf94      	ite	ls
 80055a8:	2301      	movls	r3, #1
 80055aa:	2300      	movhi	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	e006      	b.n	80055be <HAL_I2C_Init+0x92>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4a7d      	ldr	r2, [pc, #500]	; (80057a8 <HAL_I2C_Init+0x27c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	bf94      	ite	ls
 80055b8:	2301      	movls	r3, #1
 80055ba:	2300      	movhi	r3, #0
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e0e7      	b.n	8005796 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4a78      	ldr	r2, [pc, #480]	; (80057ac <HAL_I2C_Init+0x280>)
 80055ca:	fba2 2303 	umull	r2, r3, r2, r3
 80055ce:	0c9b      	lsrs	r3, r3, #18
 80055d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	4a6a      	ldr	r2, [pc, #424]	; (80057a0 <HAL_I2C_Init+0x274>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d802      	bhi.n	8005600 <HAL_I2C_Init+0xd4>
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	3301      	adds	r3, #1
 80055fe:	e009      	b.n	8005614 <HAL_I2C_Init+0xe8>
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005606:	fb02 f303 	mul.w	r3, r2, r3
 800560a:	4a69      	ldr	r2, [pc, #420]	; (80057b0 <HAL_I2C_Init+0x284>)
 800560c:	fba2 2303 	umull	r2, r3, r2, r3
 8005610:	099b      	lsrs	r3, r3, #6
 8005612:	3301      	adds	r3, #1
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6812      	ldr	r2, [r2, #0]
 8005618:	430b      	orrs	r3, r1
 800561a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005626:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	495c      	ldr	r1, [pc, #368]	; (80057a0 <HAL_I2C_Init+0x274>)
 8005630:	428b      	cmp	r3, r1
 8005632:	d819      	bhi.n	8005668 <HAL_I2C_Init+0x13c>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	1e59      	subs	r1, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005642:	1c59      	adds	r1, r3, #1
 8005644:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005648:	400b      	ands	r3, r1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <HAL_I2C_Init+0x138>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	1e59      	subs	r1, r3, #1
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	fbb1 f3f3 	udiv	r3, r1, r3
 800565c:	3301      	adds	r3, #1
 800565e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005662:	e051      	b.n	8005708 <HAL_I2C_Init+0x1dc>
 8005664:	2304      	movs	r3, #4
 8005666:	e04f      	b.n	8005708 <HAL_I2C_Init+0x1dc>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d111      	bne.n	8005694 <HAL_I2C_Init+0x168>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	1e58      	subs	r0, r3, #1
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6859      	ldr	r1, [r3, #4]
 8005678:	460b      	mov	r3, r1
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	440b      	add	r3, r1
 800567e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005682:	3301      	adds	r3, #1
 8005684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005688:	2b00      	cmp	r3, #0
 800568a:	bf0c      	ite	eq
 800568c:	2301      	moveq	r3, #1
 800568e:	2300      	movne	r3, #0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	e012      	b.n	80056ba <HAL_I2C_Init+0x18e>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	1e58      	subs	r0, r3, #1
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6859      	ldr	r1, [r3, #4]
 800569c:	460b      	mov	r3, r1
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	440b      	add	r3, r1
 80056a2:	0099      	lsls	r1, r3, #2
 80056a4:	440b      	add	r3, r1
 80056a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80056aa:	3301      	adds	r3, #1
 80056ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	bf0c      	ite	eq
 80056b4:	2301      	moveq	r3, #1
 80056b6:	2300      	movne	r3, #0
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <HAL_I2C_Init+0x196>
 80056be:	2301      	movs	r3, #1
 80056c0:	e022      	b.n	8005708 <HAL_I2C_Init+0x1dc>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10e      	bne.n	80056e8 <HAL_I2C_Init+0x1bc>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	1e58      	subs	r0, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6859      	ldr	r1, [r3, #4]
 80056d2:	460b      	mov	r3, r1
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	440b      	add	r3, r1
 80056d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80056dc:	3301      	adds	r3, #1
 80056de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e6:	e00f      	b.n	8005708 <HAL_I2C_Init+0x1dc>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	1e58      	subs	r0, r3, #1
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6859      	ldr	r1, [r3, #4]
 80056f0:	460b      	mov	r3, r1
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	0099      	lsls	r1, r3, #2
 80056f8:	440b      	add	r3, r1
 80056fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80056fe:	3301      	adds	r3, #1
 8005700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005704:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005708:	6879      	ldr	r1, [r7, #4]
 800570a:	6809      	ldr	r1, [r1, #0]
 800570c:	4313      	orrs	r3, r2
 800570e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	69da      	ldr	r2, [r3, #28]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005736:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	6911      	ldr	r1, [r2, #16]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	68d2      	ldr	r2, [r2, #12]
 8005742:	4311      	orrs	r1, r2
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6812      	ldr	r2, [r2, #0]
 8005748:	430b      	orrs	r3, r1
 800574a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	695a      	ldr	r2, [r3, #20]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f042 0201 	orr.w	r2, r2, #1
 8005776:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2220      	movs	r2, #32
 8005782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	000186a0 	.word	0x000186a0
 80057a4:	001e847f 	.word	0x001e847f
 80057a8:	003d08ff 	.word	0x003d08ff
 80057ac:	431bde83 	.word	0x431bde83
 80057b0:	10624dd3 	.word	0x10624dd3

080057b4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e021      	b.n	800580a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2224      	movs	r2, #36	; 0x24
 80057ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 0201 	bic.w	r2, r2, #1
 80057dc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7fc fad4 	bl	8001d8c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
	...

08005814 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b088      	sub	sp, #32
 8005818:	af02      	add	r7, sp, #8
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	607a      	str	r2, [r7, #4]
 800581e:	461a      	mov	r2, r3
 8005820:	460b      	mov	r3, r1
 8005822:	817b      	strh	r3, [r7, #10]
 8005824:	4613      	mov	r3, r2
 8005826:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005828:	f7fd faae 	bl	8002d88 <HAL_GetTick>
 800582c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b20      	cmp	r3, #32
 8005838:	f040 80e0 	bne.w	80059fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	2319      	movs	r3, #25
 8005842:	2201      	movs	r2, #1
 8005844:	4970      	ldr	r1, [pc, #448]	; (8005a08 <HAL_I2C_Master_Transmit+0x1f4>)
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f001 f904 	bl	8006a54 <I2C_WaitOnFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005852:	2302      	movs	r3, #2
 8005854:	e0d3      	b.n	80059fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_I2C_Master_Transmit+0x50>
 8005860:	2302      	movs	r3, #2
 8005862:	e0cc      	b.n	80059fe <HAL_I2C_Master_Transmit+0x1ea>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b01      	cmp	r3, #1
 8005878:	d007      	beq.n	800588a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0201 	orr.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005898:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2221      	movs	r2, #33	; 0x21
 800589e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2210      	movs	r2, #16
 80058a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	893a      	ldrh	r2, [r7, #8]
 80058ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4a50      	ldr	r2, [pc, #320]	; (8005a0c <HAL_I2C_Master_Transmit+0x1f8>)
 80058ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80058cc:	8979      	ldrh	r1, [r7, #10]
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	6a3a      	ldr	r2, [r7, #32]
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f000 fdf0 	bl	80064b8 <I2C_MasterRequestWrite>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e08d      	b.n	80059fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058e2:	2300      	movs	r3, #0
 80058e4:	613b      	str	r3, [r7, #16]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	613b      	str	r3, [r7, #16]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	613b      	str	r3, [r7, #16]
 80058f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80058f8:	e066      	b.n	80059c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	6a39      	ldr	r1, [r7, #32]
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f001 f97e 	bl	8006c00 <I2C_WaitOnTXEFlagUntilTimeout>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00d      	beq.n	8005926 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	2b04      	cmp	r3, #4
 8005910:	d107      	bne.n	8005922 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005920:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e06b      	b.n	80059fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	781a      	ldrb	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800594e:	3b01      	subs	r3, #1
 8005950:	b29a      	uxth	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b04      	cmp	r3, #4
 8005962:	d11b      	bne.n	800599c <HAL_I2C_Master_Transmit+0x188>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005968:	2b00      	cmp	r3, #0
 800596a:	d017      	beq.n	800599c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	781a      	ldrb	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005994:	3b01      	subs	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	6a39      	ldr	r1, [r7, #32]
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f001 f96e 	bl	8006c82 <I2C_WaitOnBTFFlagUntilTimeout>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00d      	beq.n	80059c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b0:	2b04      	cmp	r3, #4
 80059b2:	d107      	bne.n	80059c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e01a      	b.n	80059fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d194      	bne.n	80058fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	e000      	b.n	80059fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80059fc:	2302      	movs	r3, #2
  }
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	00100002 	.word	0x00100002
 8005a0c:	ffff0000 	.word	0xffff0000

08005a10 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08c      	sub	sp, #48	; 0x30
 8005a14:	af02      	add	r7, sp, #8
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	607a      	str	r2, [r7, #4]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	817b      	strh	r3, [r7, #10]
 8005a20:	4613      	mov	r3, r2
 8005a22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a24:	f7fd f9b0 	bl	8002d88 <HAL_GetTick>
 8005a28:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b20      	cmp	r3, #32
 8005a34:	f040 820b 	bne.w	8005e4e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	2319      	movs	r3, #25
 8005a3e:	2201      	movs	r2, #1
 8005a40:	497c      	ldr	r1, [pc, #496]	; (8005c34 <HAL_I2C_Master_Receive+0x224>)
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f001 f806 	bl	8006a54 <I2C_WaitOnFlagUntilTimeout>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005a4e:	2302      	movs	r3, #2
 8005a50:	e1fe      	b.n	8005e50 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d101      	bne.n	8005a60 <HAL_I2C_Master_Receive+0x50>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e1f7      	b.n	8005e50 <HAL_I2C_Master_Receive+0x440>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d007      	beq.n	8005a86 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f042 0201 	orr.w	r2, r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2222      	movs	r2, #34	; 0x22
 8005a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2210      	movs	r2, #16
 8005aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	893a      	ldrh	r2, [r7, #8]
 8005ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4a5c      	ldr	r2, [pc, #368]	; (8005c38 <HAL_I2C_Master_Receive+0x228>)
 8005ac6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005ac8:	8979      	ldrh	r1, [r7, #10]
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 fd74 	bl	80065bc <I2C_MasterRequestRead>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e1b8      	b.n	8005e50 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d113      	bne.n	8005b0e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	623b      	str	r3, [r7, #32]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	623b      	str	r3, [r7, #32]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	623b      	str	r3, [r7, #32]
 8005afa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	e18c      	b.n	8005e28 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d11b      	bne.n	8005b4e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b26:	2300      	movs	r3, #0
 8005b28:	61fb      	str	r3, [r7, #28]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	61fb      	str	r3, [r7, #28]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	61fb      	str	r3, [r7, #28]
 8005b3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	e16c      	b.n	8005e28 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d11b      	bne.n	8005b8e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b76:	2300      	movs	r3, #0
 8005b78:	61bb      	str	r3, [r7, #24]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	61bb      	str	r3, [r7, #24]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	61bb      	str	r3, [r7, #24]
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	e14c      	b.n	8005e28 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	617b      	str	r3, [r7, #20]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	617b      	str	r3, [r7, #20]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	617b      	str	r3, [r7, #20]
 8005bb2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005bb4:	e138      	b.n	8005e28 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bba:	2b03      	cmp	r3, #3
 8005bbc:	f200 80f1 	bhi.w	8005da2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d123      	bne.n	8005c10 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f001 f899 	bl	8006d04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e139      	b.n	8005e50 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	691a      	ldr	r2, [r3, #16]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	1c5a      	adds	r2, r3, #1
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	3b01      	subs	r3, #1
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c0e:	e10b      	b.n	8005e28 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d14e      	bne.n	8005cb6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1e:	2200      	movs	r2, #0
 8005c20:	4906      	ldr	r1, [pc, #24]	; (8005c3c <HAL_I2C_Master_Receive+0x22c>)
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 ff16 	bl	8006a54 <I2C_WaitOnFlagUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d008      	beq.n	8005c40 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e10e      	b.n	8005e50 <HAL_I2C_Master_Receive+0x440>
 8005c32:	bf00      	nop
 8005c34:	00100002 	.word	0x00100002
 8005c38:	ffff0000 	.word	0xffff0000
 8005c3c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	691a      	ldr	r2, [r3, #16]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	691a      	ldr	r2, [r3, #16]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	3b01      	subs	r3, #1
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005cb4:	e0b8      	b.n	8005e28 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	4966      	ldr	r1, [pc, #408]	; (8005e58 <HAL_I2C_Master_Receive+0x448>)
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 fec7 	bl	8006a54 <I2C_WaitOnFlagUntilTimeout>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e0bf      	b.n	8005e50 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	691a      	ldr	r2, [r3, #16]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	b2d2      	uxtb	r2, r2
 8005cec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	1c5a      	adds	r2, r3, #1
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d18:	2200      	movs	r2, #0
 8005d1a:	494f      	ldr	r1, [pc, #316]	; (8005e58 <HAL_I2C_Master_Receive+0x448>)
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 fe99 	bl	8006a54 <I2C_WaitOnFlagUntilTimeout>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e091      	b.n	8005e50 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	691a      	ldr	r2, [r3, #16]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4e:	1c5a      	adds	r2, r3, #1
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	3b01      	subs	r3, #1
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d78:	b2d2      	uxtb	r2, r2
 8005d7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005da0:	e042      	b.n	8005e28 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005da4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f000 ffac 	bl	8006d04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e04c      	b.n	8005e50 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	691a      	ldr	r2, [r3, #16]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	b2d2      	uxtb	r2, r2
 8005dc2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	3b01      	subs	r3, #1
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	f003 0304 	and.w	r3, r3, #4
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d118      	bne.n	8005e28 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	691a      	ldr	r2, [r3, #16]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	1c5a      	adds	r2, r3, #1
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e12:	3b01      	subs	r3, #1
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	3b01      	subs	r3, #1
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f47f aec2 	bne.w	8005bb6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2220      	movs	r2, #32
 8005e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	e000      	b.n	8005e50 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005e4e:	2302      	movs	r3, #2
  }
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3728      	adds	r7, #40	; 0x28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	00010004 	.word	0x00010004

08005e5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af02      	add	r7, sp, #8
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	4608      	mov	r0, r1
 8005e66:	4611      	mov	r1, r2
 8005e68:	461a      	mov	r2, r3
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	817b      	strh	r3, [r7, #10]
 8005e6e:	460b      	mov	r3, r1
 8005e70:	813b      	strh	r3, [r7, #8]
 8005e72:	4613      	mov	r3, r2
 8005e74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e76:	f7fc ff87 	bl	8002d88 <HAL_GetTick>
 8005e7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b20      	cmp	r3, #32
 8005e86:	f040 80d9 	bne.w	800603c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	2319      	movs	r3, #25
 8005e90:	2201      	movs	r2, #1
 8005e92:	496d      	ldr	r1, [pc, #436]	; (8006048 <HAL_I2C_Mem_Write+0x1ec>)
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 fddd 	bl	8006a54 <I2C_WaitOnFlagUntilTimeout>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e0cc      	b.n	800603e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d101      	bne.n	8005eb2 <HAL_I2C_Mem_Write+0x56>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	e0c5      	b.n	800603e <HAL_I2C_Mem_Write+0x1e2>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d007      	beq.n	8005ed8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 0201 	orr.w	r2, r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ee6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2221      	movs	r2, #33	; 0x21
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2240      	movs	r2, #64	; 0x40
 8005ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6a3a      	ldr	r2, [r7, #32]
 8005f02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4a4d      	ldr	r2, [pc, #308]	; (800604c <HAL_I2C_Mem_Write+0x1f0>)
 8005f18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f1a:	88f8      	ldrh	r0, [r7, #6]
 8005f1c:	893a      	ldrh	r2, [r7, #8]
 8005f1e:	8979      	ldrh	r1, [r7, #10]
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	9301      	str	r3, [sp, #4]
 8005f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	4603      	mov	r3, r0
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 fc14 	bl	8006758 <I2C_RequestMemoryWrite>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d052      	beq.n	8005fdc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e081      	b.n	800603e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 fe5e 	bl	8006c00 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00d      	beq.n	8005f66 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d107      	bne.n	8005f62 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e06b      	b.n	800603e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	781a      	ldrb	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f80:	3b01      	subs	r3, #1
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	f003 0304 	and.w	r3, r3, #4
 8005fa0:	2b04      	cmp	r3, #4
 8005fa2:	d11b      	bne.n	8005fdc <HAL_I2C_Mem_Write+0x180>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d017      	beq.n	8005fdc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	781a      	ldrb	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	1c5a      	adds	r2, r3, #1
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1aa      	bne.n	8005f3a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 fe4a 	bl	8006c82 <I2C_WaitOnBTFFlagUntilTimeout>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00d      	beq.n	8006010 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff8:	2b04      	cmp	r3, #4
 8005ffa:	d107      	bne.n	800600c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800600a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e016      	b.n	800603e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800601e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	e000      	b.n	800603e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800603c:	2302      	movs	r3, #2
  }
}
 800603e:	4618      	mov	r0, r3
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	00100002 	.word	0x00100002
 800604c:	ffff0000 	.word	0xffff0000

08006050 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b08c      	sub	sp, #48	; 0x30
 8006054:	af02      	add	r7, sp, #8
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	4608      	mov	r0, r1
 800605a:	4611      	mov	r1, r2
 800605c:	461a      	mov	r2, r3
 800605e:	4603      	mov	r3, r0
 8006060:	817b      	strh	r3, [r7, #10]
 8006062:	460b      	mov	r3, r1
 8006064:	813b      	strh	r3, [r7, #8]
 8006066:	4613      	mov	r3, r2
 8006068:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800606a:	f7fc fe8d 	bl	8002d88 <HAL_GetTick>
 800606e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b20      	cmp	r3, #32
 800607a:	f040 8208 	bne.w	800648e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	2319      	movs	r3, #25
 8006084:	2201      	movs	r2, #1
 8006086:	497b      	ldr	r1, [pc, #492]	; (8006274 <HAL_I2C_Mem_Read+0x224>)
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 fce3 	bl	8006a54 <I2C_WaitOnFlagUntilTimeout>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006094:	2302      	movs	r3, #2
 8006096:	e1fb      	b.n	8006490 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d101      	bne.n	80060a6 <HAL_I2C_Mem_Read+0x56>
 80060a2:	2302      	movs	r3, #2
 80060a4:	e1f4      	b.n	8006490 <HAL_I2C_Mem_Read+0x440>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d007      	beq.n	80060cc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f042 0201 	orr.w	r2, r2, #1
 80060ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2222      	movs	r2, #34	; 0x22
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2240      	movs	r2, #64	; 0x40
 80060e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80060fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4a5b      	ldr	r2, [pc, #364]	; (8006278 <HAL_I2C_Mem_Read+0x228>)
 800610c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800610e:	88f8      	ldrh	r0, [r7, #6]
 8006110:	893a      	ldrh	r2, [r7, #8]
 8006112:	8979      	ldrh	r1, [r7, #10]
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	9301      	str	r3, [sp, #4]
 8006118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	4603      	mov	r3, r0
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f000 fbb0 	bl	8006884 <I2C_RequestMemoryRead>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e1b0      	b.n	8006490 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006132:	2b00      	cmp	r3, #0
 8006134:	d113      	bne.n	800615e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006136:	2300      	movs	r3, #0
 8006138:	623b      	str	r3, [r7, #32]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	623b      	str	r3, [r7, #32]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	623b      	str	r3, [r7, #32]
 800614a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	e184      	b.n	8006468 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006162:	2b01      	cmp	r3, #1
 8006164:	d11b      	bne.n	800619e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006174:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006176:	2300      	movs	r3, #0
 8006178:	61fb      	str	r3, [r7, #28]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	61fb      	str	r3, [r7, #28]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	61fb      	str	r3, [r7, #28]
 800618a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	e164      	b.n	8006468 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d11b      	bne.n	80061de <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061c6:	2300      	movs	r3, #0
 80061c8:	61bb      	str	r3, [r7, #24]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	61bb      	str	r3, [r7, #24]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	61bb      	str	r3, [r7, #24]
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	e144      	b.n	8006468 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061de:	2300      	movs	r3, #0
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	617b      	str	r3, [r7, #20]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	617b      	str	r3, [r7, #20]
 80061f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80061f4:	e138      	b.n	8006468 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	f200 80f1 	bhi.w	80063e2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006204:	2b01      	cmp	r3, #1
 8006206:	d123      	bne.n	8006250 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800620a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 fd79 	bl	8006d04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e139      	b.n	8006490 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	691a      	ldr	r2, [r3, #16]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	b2d2      	uxtb	r2, r2
 8006228:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006244:	b29b      	uxth	r3, r3
 8006246:	3b01      	subs	r3, #1
 8006248:	b29a      	uxth	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800624e:	e10b      	b.n	8006468 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006254:	2b02      	cmp	r3, #2
 8006256:	d14e      	bne.n	80062f6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625e:	2200      	movs	r2, #0
 8006260:	4906      	ldr	r1, [pc, #24]	; (800627c <HAL_I2C_Mem_Read+0x22c>)
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f000 fbf6 	bl	8006a54 <I2C_WaitOnFlagUntilTimeout>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d008      	beq.n	8006280 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e10e      	b.n	8006490 <HAL_I2C_Mem_Read+0x440>
 8006272:	bf00      	nop
 8006274:	00100002 	.word	0x00100002
 8006278:	ffff0000 	.word	0xffff0000
 800627c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800628e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	691a      	ldr	r2, [r3, #16]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	b2d2      	uxtb	r2, r2
 800629c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ac:	3b01      	subs	r3, #1
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	3b01      	subs	r3, #1
 80062bc:	b29a      	uxth	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	691a      	ldr	r2, [r3, #16]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	b2d2      	uxtb	r2, r2
 80062ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d4:	1c5a      	adds	r2, r3, #1
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062de:	3b01      	subs	r3, #1
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3b01      	subs	r3, #1
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062f4:	e0b8      	b.n	8006468 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fc:	2200      	movs	r2, #0
 80062fe:	4966      	ldr	r1, [pc, #408]	; (8006498 <HAL_I2C_Mem_Read+0x448>)
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 fba7 	bl	8006a54 <I2C_WaitOnFlagUntilTimeout>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e0bf      	b.n	8006490 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800631e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691a      	ldr	r2, [r3, #16]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	b2d2      	uxtb	r2, r2
 800632c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800633c:	3b01      	subs	r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006348:	b29b      	uxth	r3, r3
 800634a:	3b01      	subs	r3, #1
 800634c:	b29a      	uxth	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006358:	2200      	movs	r2, #0
 800635a:	494f      	ldr	r1, [pc, #316]	; (8006498 <HAL_I2C_Mem_Read+0x448>)
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 fb79 	bl	8006a54 <I2C_WaitOnFlagUntilTimeout>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e091      	b.n	8006490 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800637a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	691a      	ldr	r2, [r3, #16]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006398:	3b01      	subs	r3, #1
 800639a:	b29a      	uxth	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	3b01      	subs	r3, #1
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	691a      	ldr	r2, [r3, #16]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	b2d2      	uxtb	r2, r2
 80063ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	1c5a      	adds	r2, r3, #1
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ca:	3b01      	subs	r3, #1
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	3b01      	subs	r3, #1
 80063da:	b29a      	uxth	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063e0:	e042      	b.n	8006468 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 fc8c 	bl	8006d04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e04c      	b.n	8006490 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	691a      	ldr	r2, [r3, #16]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	b2d2      	uxtb	r2, r2
 8006402:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	1c5a      	adds	r2, r3, #1
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006412:	3b01      	subs	r3, #1
 8006414:	b29a      	uxth	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	f003 0304 	and.w	r3, r3, #4
 8006432:	2b04      	cmp	r3, #4
 8006434:	d118      	bne.n	8006468 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	691a      	ldr	r2, [r3, #16]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	b2d2      	uxtb	r2, r2
 8006442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006452:	3b01      	subs	r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800645e:	b29b      	uxth	r3, r3
 8006460:	3b01      	subs	r3, #1
 8006462:	b29a      	uxth	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800646c:	2b00      	cmp	r3, #0
 800646e:	f47f aec2 	bne.w	80061f6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2220      	movs	r2, #32
 8006476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	e000      	b.n	8006490 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800648e:	2302      	movs	r3, #2
  }
}
 8006490:	4618      	mov	r0, r3
 8006492:	3728      	adds	r7, #40	; 0x28
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	00010004 	.word	0x00010004

0800649c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064aa:	b2db      	uxtb	r3, r3
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af02      	add	r7, sp, #8
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	607a      	str	r2, [r7, #4]
 80064c2:	603b      	str	r3, [r7, #0]
 80064c4:	460b      	mov	r3, r1
 80064c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	d006      	beq.n	80064e2 <I2C_MasterRequestWrite+0x2a>
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d003      	beq.n	80064e2 <I2C_MasterRequestWrite+0x2a>
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064e0:	d108      	bne.n	80064f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	e00b      	b.n	800650c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f8:	2b12      	cmp	r3, #18
 80064fa:	d107      	bne.n	800650c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800650a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 fa9b 	bl	8006a54 <I2C_WaitOnFlagUntilTimeout>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00d      	beq.n	8006540 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006532:	d103      	bne.n	800653c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800653a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e035      	b.n	80065ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006548:	d108      	bne.n	800655c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800654a:	897b      	ldrh	r3, [r7, #10]
 800654c:	b2db      	uxtb	r3, r3
 800654e:	461a      	mov	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006558:	611a      	str	r2, [r3, #16]
 800655a:	e01b      	b.n	8006594 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800655c:	897b      	ldrh	r3, [r7, #10]
 800655e:	11db      	asrs	r3, r3, #7
 8006560:	b2db      	uxtb	r3, r3
 8006562:	f003 0306 	and.w	r3, r3, #6
 8006566:	b2db      	uxtb	r3, r3
 8006568:	f063 030f 	orn	r3, r3, #15
 800656c:	b2da      	uxtb	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	490e      	ldr	r1, [pc, #56]	; (80065b4 <I2C_MasterRequestWrite+0xfc>)
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 fac1 	bl	8006b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e010      	b.n	80065ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800658a:	897b      	ldrh	r3, [r7, #10]
 800658c:	b2da      	uxtb	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	4907      	ldr	r1, [pc, #28]	; (80065b8 <I2C_MasterRequestWrite+0x100>)
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 fab1 	bl	8006b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e000      	b.n	80065ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3718      	adds	r7, #24
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	00010008 	.word	0x00010008
 80065b8:	00010002 	.word	0x00010002

080065bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b088      	sub	sp, #32
 80065c0:	af02      	add	r7, sp, #8
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	607a      	str	r2, [r7, #4]
 80065c6:	603b      	str	r3, [r7, #0]
 80065c8:	460b      	mov	r3, r1
 80065ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	d006      	beq.n	80065f6 <I2C_MasterRequestRead+0x3a>
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d003      	beq.n	80065f6 <I2C_MasterRequestRead+0x3a>
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80065f4:	d108      	bne.n	8006608 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	e00b      	b.n	8006620 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660c:	2b11      	cmp	r3, #17
 800660e:	d107      	bne.n	8006620 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800661e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 fa11 	bl	8006a54 <I2C_WaitOnFlagUntilTimeout>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00d      	beq.n	8006654 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006646:	d103      	bne.n	8006650 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800664e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e079      	b.n	8006748 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800665c:	d108      	bne.n	8006670 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800665e:	897b      	ldrh	r3, [r7, #10]
 8006660:	b2db      	uxtb	r3, r3
 8006662:	f043 0301 	orr.w	r3, r3, #1
 8006666:	b2da      	uxtb	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	611a      	str	r2, [r3, #16]
 800666e:	e05f      	b.n	8006730 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006670:	897b      	ldrh	r3, [r7, #10]
 8006672:	11db      	asrs	r3, r3, #7
 8006674:	b2db      	uxtb	r3, r3
 8006676:	f003 0306 	and.w	r3, r3, #6
 800667a:	b2db      	uxtb	r3, r3
 800667c:	f063 030f 	orn	r3, r3, #15
 8006680:	b2da      	uxtb	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	4930      	ldr	r1, [pc, #192]	; (8006750 <I2C_MasterRequestRead+0x194>)
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f000 fa37 	bl	8006b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e054      	b.n	8006748 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800669e:	897b      	ldrh	r3, [r7, #10]
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	4929      	ldr	r1, [pc, #164]	; (8006754 <I2C_MasterRequestRead+0x198>)
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 fa27 	bl	8006b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e044      	b.n	8006748 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066be:	2300      	movs	r3, #0
 80066c0:	613b      	str	r3, [r7, #16]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	613b      	str	r3, [r7, #16]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	613b      	str	r3, [r7, #16]
 80066d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 f9af 	bl	8006a54 <I2C_WaitOnFlagUntilTimeout>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00d      	beq.n	8006718 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800670a:	d103      	bne.n	8006714 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006712:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e017      	b.n	8006748 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006718:	897b      	ldrh	r3, [r7, #10]
 800671a:	11db      	asrs	r3, r3, #7
 800671c:	b2db      	uxtb	r3, r3
 800671e:	f003 0306 	and.w	r3, r3, #6
 8006722:	b2db      	uxtb	r3, r3
 8006724:	f063 030e 	orn	r3, r3, #14
 8006728:	b2da      	uxtb	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	4907      	ldr	r1, [pc, #28]	; (8006754 <I2C_MasterRequestRead+0x198>)
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f000 f9e3 	bl	8006b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e000      	b.n	8006748 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3718      	adds	r7, #24
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	00010008 	.word	0x00010008
 8006754:	00010002 	.word	0x00010002

08006758 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af02      	add	r7, sp, #8
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	4608      	mov	r0, r1
 8006762:	4611      	mov	r1, r2
 8006764:	461a      	mov	r2, r3
 8006766:	4603      	mov	r3, r0
 8006768:	817b      	strh	r3, [r7, #10]
 800676a:	460b      	mov	r3, r1
 800676c:	813b      	strh	r3, [r7, #8]
 800676e:	4613      	mov	r3, r2
 8006770:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006780:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	2200      	movs	r2, #0
 800678a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f000 f960 	bl	8006a54 <I2C_WaitOnFlagUntilTimeout>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00d      	beq.n	80067b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067a8:	d103      	bne.n	80067b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e05f      	b.n	8006876 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067b6:	897b      	ldrh	r3, [r7, #10]
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	461a      	mov	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	6a3a      	ldr	r2, [r7, #32]
 80067ca:	492d      	ldr	r1, [pc, #180]	; (8006880 <I2C_RequestMemoryWrite+0x128>)
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f000 f998 	bl	8006b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e04c      	b.n	8006876 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067dc:	2300      	movs	r3, #0
 80067de:	617b      	str	r3, [r7, #20]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	617b      	str	r3, [r7, #20]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	617b      	str	r3, [r7, #20]
 80067f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067f4:	6a39      	ldr	r1, [r7, #32]
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 fa02 	bl	8006c00 <I2C_WaitOnTXEFlagUntilTimeout>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00d      	beq.n	800681e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	2b04      	cmp	r3, #4
 8006808:	d107      	bne.n	800681a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006818:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e02b      	b.n	8006876 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800681e:	88fb      	ldrh	r3, [r7, #6]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d105      	bne.n	8006830 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006824:	893b      	ldrh	r3, [r7, #8]
 8006826:	b2da      	uxtb	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	611a      	str	r2, [r3, #16]
 800682e:	e021      	b.n	8006874 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006830:	893b      	ldrh	r3, [r7, #8]
 8006832:	0a1b      	lsrs	r3, r3, #8
 8006834:	b29b      	uxth	r3, r3
 8006836:	b2da      	uxtb	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800683e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006840:	6a39      	ldr	r1, [r7, #32]
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f000 f9dc 	bl	8006c00 <I2C_WaitOnTXEFlagUntilTimeout>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00d      	beq.n	800686a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	2b04      	cmp	r3, #4
 8006854:	d107      	bne.n	8006866 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006864:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e005      	b.n	8006876 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800686a:	893b      	ldrh	r3, [r7, #8]
 800686c:	b2da      	uxtb	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	00010002 	.word	0x00010002

08006884 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b088      	sub	sp, #32
 8006888:	af02      	add	r7, sp, #8
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	4608      	mov	r0, r1
 800688e:	4611      	mov	r1, r2
 8006890:	461a      	mov	r2, r3
 8006892:	4603      	mov	r3, r0
 8006894:	817b      	strh	r3, [r7, #10]
 8006896:	460b      	mov	r3, r1
 8006898:	813b      	strh	r3, [r7, #8]
 800689a:	4613      	mov	r3, r2
 800689c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	6a3b      	ldr	r3, [r7, #32]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 f8c2 	bl	8006a54 <I2C_WaitOnFlagUntilTimeout>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00d      	beq.n	80068f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068e4:	d103      	bne.n	80068ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e0aa      	b.n	8006a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068f2:	897b      	ldrh	r3, [r7, #10]
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	461a      	mov	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006900:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	6a3a      	ldr	r2, [r7, #32]
 8006906:	4952      	ldr	r1, [pc, #328]	; (8006a50 <I2C_RequestMemoryRead+0x1cc>)
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 f8fa 	bl	8006b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e097      	b.n	8006a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006918:	2300      	movs	r3, #0
 800691a:	617b      	str	r3, [r7, #20]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	617b      	str	r3, [r7, #20]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	617b      	str	r3, [r7, #20]
 800692c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800692e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006930:	6a39      	ldr	r1, [r7, #32]
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f000 f964 	bl	8006c00 <I2C_WaitOnTXEFlagUntilTimeout>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00d      	beq.n	800695a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006942:	2b04      	cmp	r3, #4
 8006944:	d107      	bne.n	8006956 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006954:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e076      	b.n	8006a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800695a:	88fb      	ldrh	r3, [r7, #6]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d105      	bne.n	800696c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006960:	893b      	ldrh	r3, [r7, #8]
 8006962:	b2da      	uxtb	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	611a      	str	r2, [r3, #16]
 800696a:	e021      	b.n	80069b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800696c:	893b      	ldrh	r3, [r7, #8]
 800696e:	0a1b      	lsrs	r3, r3, #8
 8006970:	b29b      	uxth	r3, r3
 8006972:	b2da      	uxtb	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800697a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800697c:	6a39      	ldr	r1, [r7, #32]
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 f93e 	bl	8006c00 <I2C_WaitOnTXEFlagUntilTimeout>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00d      	beq.n	80069a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	2b04      	cmp	r3, #4
 8006990:	d107      	bne.n	80069a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e050      	b.n	8006a48 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069a6:	893b      	ldrh	r3, [r7, #8]
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b2:	6a39      	ldr	r1, [r7, #32]
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 f923 	bl	8006c00 <I2C_WaitOnTXEFlagUntilTimeout>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00d      	beq.n	80069dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c4:	2b04      	cmp	r3, #4
 80069c6:	d107      	bne.n	80069d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e035      	b.n	8006a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	6a3b      	ldr	r3, [r7, #32]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 f82b 	bl	8006a54 <I2C_WaitOnFlagUntilTimeout>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00d      	beq.n	8006a20 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a12:	d103      	bne.n	8006a1c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e013      	b.n	8006a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a20:	897b      	ldrh	r3, [r7, #10]
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	f043 0301 	orr.w	r3, r3, #1
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	6a3a      	ldr	r2, [r7, #32]
 8006a34:	4906      	ldr	r1, [pc, #24]	; (8006a50 <I2C_RequestMemoryRead+0x1cc>)
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f000 f863 	bl	8006b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e000      	b.n	8006a48 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	00010002 	.word	0x00010002

08006a54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	603b      	str	r3, [r7, #0]
 8006a60:	4613      	mov	r3, r2
 8006a62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a64:	e025      	b.n	8006ab2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6c:	d021      	beq.n	8006ab2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a6e:	f7fc f98b 	bl	8002d88 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d302      	bcc.n	8006a84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d116      	bne.n	8006ab2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9e:	f043 0220 	orr.w	r2, r3, #32
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e023      	b.n	8006afa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	0c1b      	lsrs	r3, r3, #16
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d10d      	bne.n	8006ad8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	43da      	mvns	r2, r3
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	bf0c      	ite	eq
 8006ace:	2301      	moveq	r3, #1
 8006ad0:	2300      	movne	r3, #0
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	e00c      	b.n	8006af2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	43da      	mvns	r2, r3
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	bf0c      	ite	eq
 8006aea:	2301      	moveq	r3, #1
 8006aec:	2300      	movne	r3, #0
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	461a      	mov	r2, r3
 8006af2:	79fb      	ldrb	r3, [r7, #7]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d0b6      	beq.n	8006a66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b084      	sub	sp, #16
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	607a      	str	r2, [r7, #4]
 8006b0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b10:	e051      	b.n	8006bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b20:	d123      	bne.n	8006b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b56:	f043 0204 	orr.w	r2, r3, #4
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e046      	b.n	8006bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b70:	d021      	beq.n	8006bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b72:	f7fc f909 	bl	8002d88 <HAL_GetTick>
 8006b76:	4602      	mov	r2, r0
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d302      	bcc.n	8006b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d116      	bne.n	8006bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2220      	movs	r2, #32
 8006b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba2:	f043 0220 	orr.w	r2, r3, #32
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e020      	b.n	8006bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	0c1b      	lsrs	r3, r3, #16
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d10c      	bne.n	8006bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	43da      	mvns	r2, r3
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	4013      	ands	r3, r2
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	bf14      	ite	ne
 8006bd2:	2301      	movne	r3, #1
 8006bd4:	2300      	moveq	r3, #0
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	e00b      	b.n	8006bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	43da      	mvns	r2, r3
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	4013      	ands	r3, r2
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	bf14      	ite	ne
 8006bec:	2301      	movne	r3, #1
 8006bee:	2300      	moveq	r3, #0
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d18d      	bne.n	8006b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c0c:	e02d      	b.n	8006c6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f000 f8ce 	bl	8006db0 <I2C_IsAcknowledgeFailed>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e02d      	b.n	8006c7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c24:	d021      	beq.n	8006c6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c26:	f7fc f8af 	bl	8002d88 <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d302      	bcc.n	8006c3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d116      	bne.n	8006c6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	f043 0220 	orr.w	r2, r3, #32
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e007      	b.n	8006c7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c74:	2b80      	cmp	r3, #128	; 0x80
 8006c76:	d1ca      	bne.n	8006c0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b084      	sub	sp, #16
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	60f8      	str	r0, [r7, #12]
 8006c8a:	60b9      	str	r1, [r7, #8]
 8006c8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c8e:	e02d      	b.n	8006cec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 f88d 	bl	8006db0 <I2C_IsAcknowledgeFailed>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e02d      	b.n	8006cfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca6:	d021      	beq.n	8006cec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ca8:	f7fc f86e 	bl	8002d88 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d302      	bcc.n	8006cbe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d116      	bne.n	8006cec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd8:	f043 0220 	orr.w	r2, r3, #32
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e007      	b.n	8006cfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	f003 0304 	and.w	r3, r3, #4
 8006cf6:	2b04      	cmp	r3, #4
 8006cf8:	d1ca      	bne.n	8006c90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d10:	e042      	b.n	8006d98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	f003 0310 	and.w	r3, r3, #16
 8006d1c:	2b10      	cmp	r3, #16
 8006d1e:	d119      	bne.n	8006d54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f06f 0210 	mvn.w	r2, #16
 8006d28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2220      	movs	r2, #32
 8006d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e029      	b.n	8006da8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d54:	f7fc f818 	bl	8002d88 <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d302      	bcc.n	8006d6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d116      	bne.n	8006d98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2220      	movs	r2, #32
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d84:	f043 0220 	orr.w	r2, r3, #32
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e007      	b.n	8006da8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da2:	2b40      	cmp	r3, #64	; 0x40
 8006da4:	d1b5      	bne.n	8006d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dc6:	d11b      	bne.n	8006e00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006dd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dec:	f043 0204 	orr.w	r2, r3, #4
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e000      	b.n	8006e02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
	...

08006e10 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b088      	sub	sp, #32
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e128      	b.n	8007074 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d109      	bne.n	8006e42 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a90      	ldr	r2, [pc, #576]	; (800707c <HAL_I2S_Init+0x26c>)
 8006e3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7fa ffc7 	bl	8001dd0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2202      	movs	r2, #2
 8006e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69db      	ldr	r3, [r3, #28]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	6812      	ldr	r2, [r2, #0]
 8006e54:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006e58:	f023 030f 	bic.w	r3, r3, #15
 8006e5c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2202      	movs	r2, #2
 8006e64:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d060      	beq.n	8006f30 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d102      	bne.n	8006e7c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006e76:	2310      	movs	r3, #16
 8006e78:	617b      	str	r3, [r7, #20]
 8006e7a:	e001      	b.n	8006e80 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006e7c:	2320      	movs	r3, #32
 8006e7e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	2b20      	cmp	r3, #32
 8006e86:	d802      	bhi.n	8006e8e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	005b      	lsls	r3, r3, #1
 8006e8c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006e8e:	2001      	movs	r0, #1
 8006e90:	f001 fd1a 	bl	80088c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006e94:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e9e:	d125      	bne.n	8006eec <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d010      	beq.n	8006eca <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	fbb2 f2f3 	udiv	r2, r2, r3
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	005b      	lsls	r3, r3, #1
 8006eba:	461a      	mov	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec4:	3305      	adds	r3, #5
 8006ec6:	613b      	str	r3, [r7, #16]
 8006ec8:	e01f      	b.n	8006f0a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	00db      	lsls	r3, r3, #3
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	005b      	lsls	r3, r3, #1
 8006edc:	461a      	mov	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee6:	3305      	adds	r3, #5
 8006ee8:	613b      	str	r3, [r7, #16]
 8006eea:	e00e      	b.n	8006f0a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	005b      	lsls	r3, r3, #1
 8006efc:	461a      	mov	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f06:	3305      	adds	r3, #5
 8006f08:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	4a5c      	ldr	r2, [pc, #368]	; (8007080 <HAL_I2S_Init+0x270>)
 8006f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f12:	08db      	lsrs	r3, r3, #3
 8006f14:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	085b      	lsrs	r3, r3, #1
 8006f26:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	021b      	lsls	r3, r3, #8
 8006f2c:	61bb      	str	r3, [r7, #24]
 8006f2e:	e003      	b.n	8006f38 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006f30:	2302      	movs	r3, #2
 8006f32:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006f34:	2300      	movs	r3, #0
 8006f36:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d902      	bls.n	8006f44 <HAL_I2S_Init+0x134>
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	2bff      	cmp	r3, #255	; 0xff
 8006f42:	d907      	bls.n	8006f54 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f48:	f043 0210 	orr.w	r2, r3, #16
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e08f      	b.n	8007074 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	691a      	ldr	r2, [r3, #16]
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	ea42 0103 	orr.w	r1, r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	69fa      	ldr	r2, [r7, #28]
 8006f64:	430a      	orrs	r2, r1
 8006f66:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006f72:	f023 030f 	bic.w	r3, r3, #15
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	6851      	ldr	r1, [r2, #4]
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	6892      	ldr	r2, [r2, #8]
 8006f7e:	4311      	orrs	r1, r2
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	68d2      	ldr	r2, [r2, #12]
 8006f84:	4311      	orrs	r1, r2
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	6992      	ldr	r2, [r2, #24]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f96:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a1b      	ldr	r3, [r3, #32]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d161      	bne.n	8007064 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a38      	ldr	r2, [pc, #224]	; (8007084 <HAL_I2S_Init+0x274>)
 8006fa4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a37      	ldr	r2, [pc, #220]	; (8007088 <HAL_I2S_Init+0x278>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d101      	bne.n	8006fb4 <HAL_I2S_Init+0x1a4>
 8006fb0:	4b36      	ldr	r3, [pc, #216]	; (800708c <HAL_I2S_Init+0x27c>)
 8006fb2:	e001      	b.n	8006fb8 <HAL_I2S_Init+0x1a8>
 8006fb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	6812      	ldr	r2, [r2, #0]
 8006fbe:	4932      	ldr	r1, [pc, #200]	; (8007088 <HAL_I2S_Init+0x278>)
 8006fc0:	428a      	cmp	r2, r1
 8006fc2:	d101      	bne.n	8006fc8 <HAL_I2S_Init+0x1b8>
 8006fc4:	4a31      	ldr	r2, [pc, #196]	; (800708c <HAL_I2S_Init+0x27c>)
 8006fc6:	e001      	b.n	8006fcc <HAL_I2S_Init+0x1bc>
 8006fc8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006fcc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006fd0:	f023 030f 	bic.w	r3, r3, #15
 8006fd4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a2b      	ldr	r2, [pc, #172]	; (8007088 <HAL_I2S_Init+0x278>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d101      	bne.n	8006fe4 <HAL_I2S_Init+0x1d4>
 8006fe0:	4b2a      	ldr	r3, [pc, #168]	; (800708c <HAL_I2S_Init+0x27c>)
 8006fe2:	e001      	b.n	8006fe8 <HAL_I2S_Init+0x1d8>
 8006fe4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fe8:	2202      	movs	r2, #2
 8006fea:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a25      	ldr	r2, [pc, #148]	; (8007088 <HAL_I2S_Init+0x278>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d101      	bne.n	8006ffa <HAL_I2S_Init+0x1ea>
 8006ff6:	4b25      	ldr	r3, [pc, #148]	; (800708c <HAL_I2S_Init+0x27c>)
 8006ff8:	e001      	b.n	8006ffe <HAL_I2S_Init+0x1ee>
 8006ffa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800700a:	d003      	beq.n	8007014 <HAL_I2S_Init+0x204>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d103      	bne.n	800701c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8007014:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007018:	613b      	str	r3, [r7, #16]
 800701a:	e001      	b.n	8007020 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800701c:	2300      	movs	r3, #0
 800701e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800702a:	4313      	orrs	r3, r2
 800702c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007034:	4313      	orrs	r3, r2
 8007036:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800703e:	4313      	orrs	r3, r2
 8007040:	b29a      	uxth	r2, r3
 8007042:	897b      	ldrh	r3, [r7, #10]
 8007044:	4313      	orrs	r3, r2
 8007046:	b29b      	uxth	r3, r3
 8007048:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800704c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a0d      	ldr	r2, [pc, #52]	; (8007088 <HAL_I2S_Init+0x278>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d101      	bne.n	800705c <HAL_I2S_Init+0x24c>
 8007058:	4b0c      	ldr	r3, [pc, #48]	; (800708c <HAL_I2S_Init+0x27c>)
 800705a:	e001      	b.n	8007060 <HAL_I2S_Init+0x250>
 800705c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007060:	897a      	ldrh	r2, [r7, #10]
 8007062:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3720      	adds	r7, #32
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	08007721 	.word	0x08007721
 8007080:	cccccccd 	.word	0xcccccccd
 8007084:	080078a9 	.word	0x080078a9
 8007088:	40003800 	.word	0x40003800
 800708c:	40003400 	.word	0x40003400

08007090 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	4613      	mov	r3, r2
 800709c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <HAL_I2S_Transmit_DMA+0x1a>
 80070a4:	88fb      	ldrh	r3, [r7, #6]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e08e      	b.n	80071cc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d101      	bne.n	80070be <HAL_I2S_Transmit_DMA+0x2e>
 80070ba:	2302      	movs	r3, #2
 80070bc:	e086      	b.n	80071cc <HAL_I2S_Transmit_DMA+0x13c>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d005      	beq.n	80070de <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80070da:	2302      	movs	r3, #2
 80070dc:	e076      	b.n	80071cc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2203      	movs	r2, #3
 80070e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	69db      	ldr	r3, [r3, #28]
 80070f8:	f003 0307 	and.w	r3, r3, #7
 80070fc:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	2b03      	cmp	r3, #3
 8007102:	d002      	beq.n	800710a <HAL_I2S_Transmit_DMA+0x7a>
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2b05      	cmp	r3, #5
 8007108:	d10a      	bne.n	8007120 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800710a:	88fb      	ldrh	r3, [r7, #6]
 800710c:	005b      	lsls	r3, r3, #1
 800710e:	b29a      	uxth	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8007114:	88fb      	ldrh	r3, [r7, #6]
 8007116:	005b      	lsls	r3, r3, #1
 8007118:	b29a      	uxth	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800711e:	e005      	b.n	800712c <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	88fa      	ldrh	r2, [r7, #6]
 8007124:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	88fa      	ldrh	r2, [r7, #6]
 800712a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007130:	4a28      	ldr	r2, [pc, #160]	; (80071d4 <HAL_I2S_Transmit_DMA+0x144>)
 8007132:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007138:	4a27      	ldr	r2, [pc, #156]	; (80071d8 <HAL_I2S_Transmit_DMA+0x148>)
 800713a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007140:	4a26      	ldr	r2, [pc, #152]	; (80071dc <HAL_I2S_Transmit_DMA+0x14c>)
 8007142:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800714c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007154:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800715a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800715c:	f7fc f804 	bl	8003168 <HAL_DMA_Start_IT>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00f      	beq.n	8007186 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800716a:	f043 0208 	orr.w	r2, r3, #8
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e022      	b.n	80071cc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	69db      	ldr	r3, [r3, #28]
 800718c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007190:	2b00      	cmp	r3, #0
 8007192:	d107      	bne.n	80071a4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	69da      	ldr	r2, [r3, #28]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071a2:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d107      	bne.n	80071c2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f042 0202 	orr.w	r2, r2, #2
 80071c0:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	080075ff 	.word	0x080075ff
 80071d8:	080075bd 	.word	0x080075bd
 80071dc:	0800761b 	.word	0x0800761b

080071e0 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b088      	sub	sp, #32
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071f4:	d004      	beq.n	8007200 <HAL_I2S_DMAStop+0x20>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f040 80d1 	bne.w	80073a2 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00f      	beq.n	8007228 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720c:	4618      	mov	r0, r3
 800720e:	f7fc f803 	bl	8003218 <HAL_DMA_Abort>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d007      	beq.n	8007228 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800721c:	f043 0208 	orr.w	r2, r3, #8
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8007228:	2364      	movs	r3, #100	; 0x64
 800722a:	2201      	movs	r2, #1
 800722c:	2102      	movs	r1, #2
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fb00 	bl	8007834 <I2S_WaitFlagStateUntilTimeout>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00b      	beq.n	8007252 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723e:	f043 0201 	orr.w	r2, r3, #1
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8007252:	2364      	movs	r3, #100	; 0x64
 8007254:	2200      	movs	r2, #0
 8007256:	2180      	movs	r1, #128	; 0x80
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 faeb 	bl	8007834 <I2S_WaitFlagStateUntilTimeout>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00b      	beq.n	800727c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007268:	f043 0201 	orr.w	r2, r3, #1
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	69da      	ldr	r2, [r3, #28]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800728a:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800728c:	2300      	movs	r3, #0
 800728e:	617b      	str	r3, [r7, #20]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	617b      	str	r3, [r7, #20]
 8007298:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f022 0202 	bic.w	r2, r2, #2
 80072a8:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b05      	cmp	r3, #5
 80072b4:	f040 8165 	bne.w	8007582 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00f      	beq.n	80072e0 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fb ffa7 	bl	8003218 <HAL_DMA_Abort>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d007      	beq.n	80072e0 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d4:	f043 0208 	orr.w	r2, r3, #8
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a8a      	ldr	r2, [pc, #552]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d101      	bne.n	80072ee <HAL_I2S_DMAStop+0x10e>
 80072ea:	4b8a      	ldr	r3, [pc, #552]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 80072ec:	e001      	b.n	80072f2 <HAL_I2S_DMAStop+0x112>
 80072ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072f2:	69da      	ldr	r2, [r3, #28]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4985      	ldr	r1, [pc, #532]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 80072fa:	428b      	cmp	r3, r1
 80072fc:	d101      	bne.n	8007302 <HAL_I2S_DMAStop+0x122>
 80072fe:	4b85      	ldr	r3, [pc, #532]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 8007300:	e001      	b.n	8007306 <HAL_I2S_DMAStop+0x126>
 8007302:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800730a:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 800730c:	2300      	movs	r3, #0
 800730e:	613b      	str	r3, [r7, #16]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a7e      	ldr	r2, [pc, #504]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d101      	bne.n	800731e <HAL_I2S_DMAStop+0x13e>
 800731a:	4b7e      	ldr	r3, [pc, #504]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 800731c:	e001      	b.n	8007322 <HAL_I2S_DMAStop+0x142>
 800731e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	613b      	str	r3, [r7, #16]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a79      	ldr	r2, [pc, #484]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d101      	bne.n	8007334 <HAL_I2S_DMAStop+0x154>
 8007330:	4b78      	ldr	r3, [pc, #480]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 8007332:	e001      	b.n	8007338 <HAL_I2S_DMAStop+0x158>
 8007334:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	613b      	str	r3, [r7, #16]
 800733c:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a73      	ldr	r2, [pc, #460]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d101      	bne.n	800734c <HAL_I2S_DMAStop+0x16c>
 8007348:	4b72      	ldr	r3, [pc, #456]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 800734a:	e001      	b.n	8007350 <HAL_I2S_DMAStop+0x170>
 800734c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007350:	685a      	ldr	r2, [r3, #4]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	496e      	ldr	r1, [pc, #440]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 8007358:	428b      	cmp	r3, r1
 800735a:	d101      	bne.n	8007360 <HAL_I2S_DMAStop+0x180>
 800735c:	4b6d      	ldr	r3, [pc, #436]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 800735e:	e001      	b.n	8007364 <HAL_I2S_DMAStop+0x184>
 8007360:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007364:	f022 0201 	bic.w	r2, r2, #1
 8007368:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10c      	bne.n	800738c <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007376:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800738a:	e0fa      	b.n	8007582 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a5f      	ldr	r2, [pc, #380]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d101      	bne.n	800739a <HAL_I2S_DMAStop+0x1ba>
 8007396:	4b5f      	ldr	r3, [pc, #380]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 8007398:	e001      	b.n	800739e <HAL_I2S_DMAStop+0x1be>
 800739a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800739e:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80073a0:	e0ef      	b.n	8007582 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073aa:	d005      	beq.n	80073b8 <HAL_I2S_DMAStop+0x1d8>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073b4:	f040 80e5 	bne.w	8007582 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00f      	beq.n	80073e0 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fb ff27 	bl	8003218 <HAL_DMA_Abort>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d007      	beq.n	80073e0 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d4:	f043 0208 	orr.w	r2, r3, #8
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b05      	cmp	r3, #5
 80073ea:	f040 809a 	bne.w	8007522 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00f      	beq.n	8007416 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fb ff0c 	bl	8003218 <HAL_DMA_Abort>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d007      	beq.n	8007416 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740a:	f043 0208 	orr.w	r2, r3, #8
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8007416:	f7fb fcb7 	bl	8002d88 <HAL_GetTick>
 800741a:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 800741c:	e012      	b.n	8007444 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800741e:	f7fb fcb3 	bl	8002d88 <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	2b64      	cmp	r3, #100	; 0x64
 800742a:	d90b      	bls.n	8007444 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007430:	f043 0201 	orr.w	r2, r3, #1
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a31      	ldr	r2, [pc, #196]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d101      	bne.n	8007452 <HAL_I2S_DMAStop+0x272>
 800744e:	4b31      	ldr	r3, [pc, #196]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 8007450:	e001      	b.n	8007456 <HAL_I2S_DMAStop+0x276>
 8007452:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f003 0302 	and.w	r3, r3, #2
 800745c:	2b02      	cmp	r3, #2
 800745e:	d1de      	bne.n	800741e <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8007460:	e012      	b.n	8007488 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8007462:	f7fb fc91 	bl	8002d88 <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	2b64      	cmp	r3, #100	; 0x64
 800746e:	d90b      	bls.n	8007488 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007474:	f043 0201 	orr.w	r2, r3, #1
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a20      	ldr	r2, [pc, #128]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d101      	bne.n	8007496 <HAL_I2S_DMAStop+0x2b6>
 8007492:	4b20      	ldr	r3, [pc, #128]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 8007494:	e001      	b.n	800749a <HAL_I2S_DMAStop+0x2ba>
 8007496:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a0:	2b80      	cmp	r3, #128	; 0x80
 80074a2:	d0de      	beq.n	8007462 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a19      	ldr	r2, [pc, #100]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d101      	bne.n	80074b2 <HAL_I2S_DMAStop+0x2d2>
 80074ae:	4b19      	ldr	r3, [pc, #100]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 80074b0:	e001      	b.n	80074b6 <HAL_I2S_DMAStop+0x2d6>
 80074b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074b6:	69da      	ldr	r2, [r3, #28]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4914      	ldr	r1, [pc, #80]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 80074be:	428b      	cmp	r3, r1
 80074c0:	d101      	bne.n	80074c6 <HAL_I2S_DMAStop+0x2e6>
 80074c2:	4b14      	ldr	r3, [pc, #80]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 80074c4:	e001      	b.n	80074ca <HAL_I2S_DMAStop+0x2ea>
 80074c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074ce:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80074d0:	2300      	movs	r3, #0
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a0d      	ldr	r2, [pc, #52]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d101      	bne.n	80074e2 <HAL_I2S_DMAStop+0x302>
 80074de:	4b0d      	ldr	r3, [pc, #52]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 80074e0:	e001      	b.n	80074e6 <HAL_I2S_DMAStop+0x306>
 80074e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a07      	ldr	r2, [pc, #28]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d101      	bne.n	80074fa <HAL_I2S_DMAStop+0x31a>
 80074f6:	4b07      	ldr	r3, [pc, #28]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 80074f8:	e001      	b.n	80074fe <HAL_I2S_DMAStop+0x31e>
 80074fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4902      	ldr	r1, [pc, #8]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 8007506:	428b      	cmp	r3, r1
 8007508:	d106      	bne.n	8007518 <HAL_I2S_DMAStop+0x338>
 800750a:	4b02      	ldr	r3, [pc, #8]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 800750c:	e006      	b.n	800751c <HAL_I2S_DMAStop+0x33c>
 800750e:	bf00      	nop
 8007510:	40003800 	.word	0x40003800
 8007514:	40003400 	.word	0x40003400
 8007518:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800751c:	f022 0202 	bic.w	r2, r2, #2
 8007520:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	69da      	ldr	r2, [r3, #28]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007530:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007532:	2300      	movs	r3, #0
 8007534:	60bb      	str	r3, [r7, #8]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	60bb      	str	r3, [r7, #8]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	60bb      	str	r3, [r7, #8]
 8007546:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f022 0201 	bic.w	r2, r2, #1
 8007556:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007560:	d10c      	bne.n	800757c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007566:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	77fb      	strb	r3, [r7, #31]
 800757a:	e002      	b.n	8007582 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 800758a:	7ffb      	ldrb	r3, [r7, #31]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3720      	adds	r7, #32
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10e      	bne.n	80075f0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f022 0202 	bic.w	r2, r2, #2
 80075e0:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f7f9 fefb 	bl	80013ec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80075f6:	bf00      	nop
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b084      	sub	sp, #16
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f7f9 feff 	bl	8001410 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007612:	bf00      	nop
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b084      	sub	sp, #16
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007626:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 0203 	bic.w	r2, r2, #3
 8007636:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007650:	f043 0208 	orr.w	r2, r3, #8
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f7ff ffa5 	bl	80075a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800765e:	bf00      	nop
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b082      	sub	sp, #8
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007672:	881a      	ldrh	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	1c9a      	adds	r2, r3, #2
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007688:	b29b      	uxth	r3, r3
 800768a:	3b01      	subs	r3, #1
 800768c:	b29a      	uxth	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007696:	b29b      	uxth	r3, r3
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10e      	bne.n	80076ba <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80076aa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f7f9 fe99 	bl	80013ec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80076ba:	bf00      	nop
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b082      	sub	sp, #8
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68da      	ldr	r2, [r3, #12]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	b292      	uxth	r2, r2
 80076d6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076dc:	1c9a      	adds	r2, r3, #2
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	3b01      	subs	r3, #1
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10e      	bne.n	8007718 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007708:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7ff ff3e 	bl	8007594 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007718:	bf00      	nop
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b04      	cmp	r3, #4
 800773a:	d13a      	bne.n	80077b2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b01      	cmp	r3, #1
 8007744:	d109      	bne.n	800775a <I2S_IRQHandler+0x3a>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007750:	2b40      	cmp	r3, #64	; 0x40
 8007752:	d102      	bne.n	800775a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7ff ffb4 	bl	80076c2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007760:	2b40      	cmp	r3, #64	; 0x40
 8007762:	d126      	bne.n	80077b2 <I2S_IRQHandler+0x92>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f003 0320 	and.w	r3, r3, #32
 800776e:	2b20      	cmp	r3, #32
 8007770:	d11f      	bne.n	80077b2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007780:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007782:	2300      	movs	r3, #0
 8007784:	613b      	str	r3, [r7, #16]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	613b      	str	r3, [r7, #16]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	613b      	str	r3, [r7, #16]
 8007796:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a4:	f043 0202 	orr.w	r2, r3, #2
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f7ff fefb 	bl	80075a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	d136      	bne.n	800782c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f003 0302 	and.w	r3, r3, #2
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d109      	bne.n	80077dc <I2S_IRQHandler+0xbc>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077d2:	2b80      	cmp	r3, #128	; 0x80
 80077d4:	d102      	bne.n	80077dc <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7ff ff45 	bl	8007666 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	f003 0308 	and.w	r3, r3, #8
 80077e2:	2b08      	cmp	r3, #8
 80077e4:	d122      	bne.n	800782c <I2S_IRQHandler+0x10c>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f003 0320 	and.w	r3, r3, #32
 80077f0:	2b20      	cmp	r3, #32
 80077f2:	d11b      	bne.n	800782c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	685a      	ldr	r2, [r3, #4]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007802:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007804:	2300      	movs	r3, #0
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	60fb      	str	r3, [r7, #12]
 8007810:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800781e:	f043 0204 	orr.w	r2, r3, #4
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7ff febe 	bl	80075a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800782c:	bf00      	nop
 800782e:	3718      	adds	r7, #24
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	603b      	str	r3, [r7, #0]
 8007840:	4613      	mov	r3, r2
 8007842:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8007844:	f7fb faa0 	bl	8002d88 <HAL_GetTick>
 8007848:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800784a:	e018      	b.n	800787e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007852:	d014      	beq.n	800787e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8007854:	f7fb fa98 	bl	8002d88 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	429a      	cmp	r2, r3
 8007862:	d902      	bls.n	800786a <I2S_WaitFlagStateUntilTimeout+0x36>
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d109      	bne.n	800787e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2201      	movs	r2, #1
 800786e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e00f      	b.n	800789e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	689a      	ldr	r2, [r3, #8]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	4013      	ands	r3, r2
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	429a      	cmp	r2, r3
 800788c:	bf0c      	ite	eq
 800788e:	2301      	moveq	r3, #1
 8007890:	2300      	movne	r3, #0
 8007892:	b2db      	uxtb	r3, r3
 8007894:	461a      	mov	r2, r3
 8007896:	79fb      	ldrb	r3, [r7, #7]
 8007898:	429a      	cmp	r2, r3
 800789a:	d1d7      	bne.n	800784c <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3718      	adds	r7, #24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
	...

080078a8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b088      	sub	sp, #32
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a92      	ldr	r2, [pc, #584]	; (8007b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d101      	bne.n	80078c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80078c2:	4b92      	ldr	r3, [pc, #584]	; (8007b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80078c4:	e001      	b.n	80078ca <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80078c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a8b      	ldr	r2, [pc, #556]	; (8007b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d101      	bne.n	80078e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80078e0:	4b8a      	ldr	r3, [pc, #552]	; (8007b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80078e2:	e001      	b.n	80078e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80078e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f4:	d004      	beq.n	8007900 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f040 8099 	bne.w	8007a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	f003 0302 	and.w	r3, r3, #2
 8007906:	2b02      	cmp	r3, #2
 8007908:	d107      	bne.n	800791a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f925 	bl	8007b64 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	2b01      	cmp	r3, #1
 8007922:	d107      	bne.n	8007934 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792a:	2b00      	cmp	r3, #0
 800792c:	d002      	beq.n	8007934 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f9c8 	bl	8007cc4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793a:	2b40      	cmp	r3, #64	; 0x40
 800793c:	d13a      	bne.n	80079b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	f003 0320 	and.w	r3, r3, #32
 8007944:	2b00      	cmp	r3, #0
 8007946:	d035      	beq.n	80079b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a6e      	ldr	r2, [pc, #440]	; (8007b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d101      	bne.n	8007956 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8007952:	4b6e      	ldr	r3, [pc, #440]	; (8007b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007954:	e001      	b.n	800795a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8007956:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4969      	ldr	r1, [pc, #420]	; (8007b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007962:	428b      	cmp	r3, r1
 8007964:	d101      	bne.n	800796a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8007966:	4b69      	ldr	r3, [pc, #420]	; (8007b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007968:	e001      	b.n	800796e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800796a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800796e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007972:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	685a      	ldr	r2, [r3, #4]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007982:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007984:	2300      	movs	r3, #0
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	60fb      	str	r3, [r7, #12]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	60fb      	str	r3, [r7, #12]
 8007998:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a6:	f043 0202 	orr.w	r2, r3, #2
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7ff fdfa 	bl	80075a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	f003 0308 	and.w	r3, r3, #8
 80079ba:	2b08      	cmp	r3, #8
 80079bc:	f040 80c3 	bne.w	8007b46 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f003 0320 	and.w	r3, r3, #32
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f000 80bd 	beq.w	8007b46 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80079da:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a49      	ldr	r2, [pc, #292]	; (8007b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d101      	bne.n	80079ea <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80079e6:	4b49      	ldr	r3, [pc, #292]	; (8007b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80079e8:	e001      	b.n	80079ee <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80079ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4944      	ldr	r1, [pc, #272]	; (8007b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80079f6:	428b      	cmp	r3, r1
 80079f8:	d101      	bne.n	80079fe <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80079fa:	4b44      	ldr	r3, [pc, #272]	; (8007b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80079fc:	e001      	b.n	8007a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80079fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007a06:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60bb      	str	r3, [r7, #8]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	60bb      	str	r3, [r7, #8]
 8007a14:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a22:	f043 0204 	orr.w	r2, r3, #4
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7ff fdbc 	bl	80075a8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007a30:	e089      	b.n	8007b46 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	f003 0302 	and.w	r3, r3, #2
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d107      	bne.n	8007a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d002      	beq.n	8007a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f8be 	bl	8007bc8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d107      	bne.n	8007a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f8fd 	bl	8007c60 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a6c:	2b40      	cmp	r3, #64	; 0x40
 8007a6e:	d12f      	bne.n	8007ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	f003 0320 	and.w	r3, r3, #32
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d02a      	beq.n	8007ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007a88:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a1e      	ldr	r2, [pc, #120]	; (8007b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d101      	bne.n	8007a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007a94:	4b1d      	ldr	r3, [pc, #116]	; (8007b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007a96:	e001      	b.n	8007a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007a98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a9c:	685a      	ldr	r2, [r3, #4]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4919      	ldr	r1, [pc, #100]	; (8007b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007aa4:	428b      	cmp	r3, r1
 8007aa6:	d101      	bne.n	8007aac <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007aa8:	4b18      	ldr	r3, [pc, #96]	; (8007b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007aaa:	e001      	b.n	8007ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007aac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007ab0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007ab4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac2:	f043 0202 	orr.w	r2, r3, #2
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7ff fd6c 	bl	80075a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	f003 0308 	and.w	r3, r3, #8
 8007ad6:	2b08      	cmp	r3, #8
 8007ad8:	d136      	bne.n	8007b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	f003 0320 	and.w	r3, r3, #32
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d031      	beq.n	8007b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a07      	ldr	r2, [pc, #28]	; (8007b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d101      	bne.n	8007af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007aee:	4b07      	ldr	r3, [pc, #28]	; (8007b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007af0:	e001      	b.n	8007af6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007af2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4902      	ldr	r1, [pc, #8]	; (8007b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007afe:	428b      	cmp	r3, r1
 8007b00:	d106      	bne.n	8007b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8007b02:	4b02      	ldr	r3, [pc, #8]	; (8007b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007b04:	e006      	b.n	8007b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8007b06:	bf00      	nop
 8007b08:	40003800 	.word	0x40003800
 8007b0c:	40003400 	.word	0x40003400
 8007b10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007b18:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007b28:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b36:	f043 0204 	orr.w	r2, r3, #4
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7ff fd32 	bl	80075a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007b44:	e000      	b.n	8007b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007b46:	bf00      	nop
}
 8007b48:	bf00      	nop
 8007b4a:	3720      	adds	r7, #32
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b70:	1c99      	adds	r1, r3, #2
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	6251      	str	r1, [r2, #36]	; 0x24
 8007b76:	881a      	ldrh	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	3b01      	subs	r3, #1
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d113      	bne.n	8007bbe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007ba4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d106      	bne.n	8007bbe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7ff ffc9 	bl	8007b50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007bbe:	bf00      	nop
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
	...

08007bc8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd4:	1c99      	adds	r1, r3, #2
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	6251      	str	r1, [r2, #36]	; 0x24
 8007bda:	8819      	ldrh	r1, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a1d      	ldr	r2, [pc, #116]	; (8007c58 <I2SEx_TxISR_I2SExt+0x90>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d101      	bne.n	8007bea <I2SEx_TxISR_I2SExt+0x22>
 8007be6:	4b1d      	ldr	r3, [pc, #116]	; (8007c5c <I2SEx_TxISR_I2SExt+0x94>)
 8007be8:	e001      	b.n	8007bee <I2SEx_TxISR_I2SExt+0x26>
 8007bea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007bee:	460a      	mov	r2, r1
 8007bf0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d121      	bne.n	8007c4e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a12      	ldr	r2, [pc, #72]	; (8007c58 <I2SEx_TxISR_I2SExt+0x90>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d101      	bne.n	8007c18 <I2SEx_TxISR_I2SExt+0x50>
 8007c14:	4b11      	ldr	r3, [pc, #68]	; (8007c5c <I2SEx_TxISR_I2SExt+0x94>)
 8007c16:	e001      	b.n	8007c1c <I2SEx_TxISR_I2SExt+0x54>
 8007c18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	490d      	ldr	r1, [pc, #52]	; (8007c58 <I2SEx_TxISR_I2SExt+0x90>)
 8007c24:	428b      	cmp	r3, r1
 8007c26:	d101      	bne.n	8007c2c <I2SEx_TxISR_I2SExt+0x64>
 8007c28:	4b0c      	ldr	r3, [pc, #48]	; (8007c5c <I2SEx_TxISR_I2SExt+0x94>)
 8007c2a:	e001      	b.n	8007c30 <I2SEx_TxISR_I2SExt+0x68>
 8007c2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007c34:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d106      	bne.n	8007c4e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7ff ff81 	bl	8007b50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007c4e:	bf00      	nop
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	40003800 	.word	0x40003800
 8007c5c:	40003400 	.word	0x40003400

08007c60 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68d8      	ldr	r0, [r3, #12]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c72:	1c99      	adds	r1, r3, #2
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007c78:	b282      	uxth	r2, r0
 8007c7a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	3b01      	subs	r3, #1
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d113      	bne.n	8007cbc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685a      	ldr	r2, [r3, #4]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007ca2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d106      	bne.n	8007cbc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7ff ff4a 	bl	8007b50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007cbc:	bf00      	nop
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a20      	ldr	r2, [pc, #128]	; (8007d54 <I2SEx_RxISR_I2SExt+0x90>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d101      	bne.n	8007cda <I2SEx_RxISR_I2SExt+0x16>
 8007cd6:	4b20      	ldr	r3, [pc, #128]	; (8007d58 <I2SEx_RxISR_I2SExt+0x94>)
 8007cd8:	e001      	b.n	8007cde <I2SEx_RxISR_I2SExt+0x1a>
 8007cda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007cde:	68d8      	ldr	r0, [r3, #12]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce4:	1c99      	adds	r1, r3, #2
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007cea:	b282      	uxth	r2, r0
 8007cec:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d121      	bne.n	8007d4a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a12      	ldr	r2, [pc, #72]	; (8007d54 <I2SEx_RxISR_I2SExt+0x90>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d101      	bne.n	8007d14 <I2SEx_RxISR_I2SExt+0x50>
 8007d10:	4b11      	ldr	r3, [pc, #68]	; (8007d58 <I2SEx_RxISR_I2SExt+0x94>)
 8007d12:	e001      	b.n	8007d18 <I2SEx_RxISR_I2SExt+0x54>
 8007d14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007d18:	685a      	ldr	r2, [r3, #4]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	490d      	ldr	r1, [pc, #52]	; (8007d54 <I2SEx_RxISR_I2SExt+0x90>)
 8007d20:	428b      	cmp	r3, r1
 8007d22:	d101      	bne.n	8007d28 <I2SEx_RxISR_I2SExt+0x64>
 8007d24:	4b0c      	ldr	r3, [pc, #48]	; (8007d58 <I2SEx_RxISR_I2SExt+0x94>)
 8007d26:	e001      	b.n	8007d2c <I2SEx_RxISR_I2SExt+0x68>
 8007d28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007d2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007d30:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d106      	bne.n	8007d4a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff ff03 	bl	8007b50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007d4a:	bf00      	nop
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	40003800 	.word	0x40003800
 8007d58:	40003400 	.word	0x40003400

08007d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d101      	bne.n	8007d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e267      	b.n	800823e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d075      	beq.n	8007e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d7a:	4b88      	ldr	r3, [pc, #544]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f003 030c 	and.w	r3, r3, #12
 8007d82:	2b04      	cmp	r3, #4
 8007d84:	d00c      	beq.n	8007da0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d86:	4b85      	ldr	r3, [pc, #532]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d8e:	2b08      	cmp	r3, #8
 8007d90:	d112      	bne.n	8007db8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d92:	4b82      	ldr	r3, [pc, #520]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d9e:	d10b      	bne.n	8007db8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007da0:	4b7e      	ldr	r3, [pc, #504]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d05b      	beq.n	8007e64 <HAL_RCC_OscConfig+0x108>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d157      	bne.n	8007e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e242      	b.n	800823e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dc0:	d106      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x74>
 8007dc2:	4b76      	ldr	r3, [pc, #472]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a75      	ldr	r2, [pc, #468]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dcc:	6013      	str	r3, [r2, #0]
 8007dce:	e01d      	b.n	8007e0c <HAL_RCC_OscConfig+0xb0>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dd8:	d10c      	bne.n	8007df4 <HAL_RCC_OscConfig+0x98>
 8007dda:	4b70      	ldr	r3, [pc, #448]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a6f      	ldr	r2, [pc, #444]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007de4:	6013      	str	r3, [r2, #0]
 8007de6:	4b6d      	ldr	r3, [pc, #436]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a6c      	ldr	r2, [pc, #432]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007df0:	6013      	str	r3, [r2, #0]
 8007df2:	e00b      	b.n	8007e0c <HAL_RCC_OscConfig+0xb0>
 8007df4:	4b69      	ldr	r3, [pc, #420]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a68      	ldr	r2, [pc, #416]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dfe:	6013      	str	r3, [r2, #0]
 8007e00:	4b66      	ldr	r3, [pc, #408]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a65      	ldr	r2, [pc, #404]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d013      	beq.n	8007e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e14:	f7fa ffb8 	bl	8002d88 <HAL_GetTick>
 8007e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e1a:	e008      	b.n	8007e2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e1c:	f7fa ffb4 	bl	8002d88 <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	2b64      	cmp	r3, #100	; 0x64
 8007e28:	d901      	bls.n	8007e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e207      	b.n	800823e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e2e:	4b5b      	ldr	r3, [pc, #364]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d0f0      	beq.n	8007e1c <HAL_RCC_OscConfig+0xc0>
 8007e3a:	e014      	b.n	8007e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e3c:	f7fa ffa4 	bl	8002d88 <HAL_GetTick>
 8007e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e42:	e008      	b.n	8007e56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e44:	f7fa ffa0 	bl	8002d88 <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	2b64      	cmp	r3, #100	; 0x64
 8007e50:	d901      	bls.n	8007e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e1f3      	b.n	800823e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e56:	4b51      	ldr	r3, [pc, #324]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1f0      	bne.n	8007e44 <HAL_RCC_OscConfig+0xe8>
 8007e62:	e000      	b.n	8007e66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d063      	beq.n	8007f3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e72:	4b4a      	ldr	r3, [pc, #296]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f003 030c 	and.w	r3, r3, #12
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00b      	beq.n	8007e96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e7e:	4b47      	ldr	r3, [pc, #284]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e86:	2b08      	cmp	r3, #8
 8007e88:	d11c      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e8a:	4b44      	ldr	r3, [pc, #272]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d116      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e96:	4b41      	ldr	r3, [pc, #260]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0302 	and.w	r3, r3, #2
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d005      	beq.n	8007eae <HAL_RCC_OscConfig+0x152>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d001      	beq.n	8007eae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e1c7      	b.n	800823e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eae:	4b3b      	ldr	r3, [pc, #236]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	00db      	lsls	r3, r3, #3
 8007ebc:	4937      	ldr	r1, [pc, #220]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ec2:	e03a      	b.n	8007f3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d020      	beq.n	8007f0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ecc:	4b34      	ldr	r3, [pc, #208]	; (8007fa0 <HAL_RCC_OscConfig+0x244>)
 8007ece:	2201      	movs	r2, #1
 8007ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed2:	f7fa ff59 	bl	8002d88 <HAL_GetTick>
 8007ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ed8:	e008      	b.n	8007eec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007eda:	f7fa ff55 	bl	8002d88 <HAL_GetTick>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d901      	bls.n	8007eec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e1a8      	b.n	800823e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eec:	4b2b      	ldr	r3, [pc, #172]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 0302 	and.w	r3, r3, #2
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d0f0      	beq.n	8007eda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ef8:	4b28      	ldr	r3, [pc, #160]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	00db      	lsls	r3, r3, #3
 8007f06:	4925      	ldr	r1, [pc, #148]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	600b      	str	r3, [r1, #0]
 8007f0c:	e015      	b.n	8007f3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f0e:	4b24      	ldr	r3, [pc, #144]	; (8007fa0 <HAL_RCC_OscConfig+0x244>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f14:	f7fa ff38 	bl	8002d88 <HAL_GetTick>
 8007f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f1a:	e008      	b.n	8007f2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f1c:	f7fa ff34 	bl	8002d88 <HAL_GetTick>
 8007f20:	4602      	mov	r2, r0
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d901      	bls.n	8007f2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e187      	b.n	800823e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f2e:	4b1b      	ldr	r3, [pc, #108]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0302 	and.w	r3, r3, #2
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1f0      	bne.n	8007f1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0308 	and.w	r3, r3, #8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d036      	beq.n	8007fb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d016      	beq.n	8007f7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f4e:	4b15      	ldr	r3, [pc, #84]	; (8007fa4 <HAL_RCC_OscConfig+0x248>)
 8007f50:	2201      	movs	r2, #1
 8007f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f54:	f7fa ff18 	bl	8002d88 <HAL_GetTick>
 8007f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f5a:	e008      	b.n	8007f6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f5c:	f7fa ff14 	bl	8002d88 <HAL_GetTick>
 8007f60:	4602      	mov	r2, r0
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d901      	bls.n	8007f6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e167      	b.n	800823e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f6e:	4b0b      	ldr	r3, [pc, #44]	; (8007f9c <HAL_RCC_OscConfig+0x240>)
 8007f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f72:	f003 0302 	and.w	r3, r3, #2
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d0f0      	beq.n	8007f5c <HAL_RCC_OscConfig+0x200>
 8007f7a:	e01b      	b.n	8007fb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f7c:	4b09      	ldr	r3, [pc, #36]	; (8007fa4 <HAL_RCC_OscConfig+0x248>)
 8007f7e:	2200      	movs	r2, #0
 8007f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f82:	f7fa ff01 	bl	8002d88 <HAL_GetTick>
 8007f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f88:	e00e      	b.n	8007fa8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f8a:	f7fa fefd 	bl	8002d88 <HAL_GetTick>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d907      	bls.n	8007fa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e150      	b.n	800823e <HAL_RCC_OscConfig+0x4e2>
 8007f9c:	40023800 	.word	0x40023800
 8007fa0:	42470000 	.word	0x42470000
 8007fa4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007fa8:	4b88      	ldr	r3, [pc, #544]	; (80081cc <HAL_RCC_OscConfig+0x470>)
 8007faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fac:	f003 0302 	and.w	r3, r3, #2
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1ea      	bne.n	8007f8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0304 	and.w	r3, r3, #4
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f000 8097 	beq.w	80080f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fc6:	4b81      	ldr	r3, [pc, #516]	; (80081cc <HAL_RCC_OscConfig+0x470>)
 8007fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10f      	bne.n	8007ff2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60bb      	str	r3, [r7, #8]
 8007fd6:	4b7d      	ldr	r3, [pc, #500]	; (80081cc <HAL_RCC_OscConfig+0x470>)
 8007fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fda:	4a7c      	ldr	r2, [pc, #496]	; (80081cc <HAL_RCC_OscConfig+0x470>)
 8007fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8007fe2:	4b7a      	ldr	r3, [pc, #488]	; (80081cc <HAL_RCC_OscConfig+0x470>)
 8007fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fea:	60bb      	str	r3, [r7, #8]
 8007fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ff2:	4b77      	ldr	r3, [pc, #476]	; (80081d0 <HAL_RCC_OscConfig+0x474>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d118      	bne.n	8008030 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ffe:	4b74      	ldr	r3, [pc, #464]	; (80081d0 <HAL_RCC_OscConfig+0x474>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a73      	ldr	r2, [pc, #460]	; (80081d0 <HAL_RCC_OscConfig+0x474>)
 8008004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800800a:	f7fa febd 	bl	8002d88 <HAL_GetTick>
 800800e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008010:	e008      	b.n	8008024 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008012:	f7fa feb9 	bl	8002d88 <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	2b02      	cmp	r3, #2
 800801e:	d901      	bls.n	8008024 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e10c      	b.n	800823e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008024:	4b6a      	ldr	r3, [pc, #424]	; (80081d0 <HAL_RCC_OscConfig+0x474>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800802c:	2b00      	cmp	r3, #0
 800802e:	d0f0      	beq.n	8008012 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d106      	bne.n	8008046 <HAL_RCC_OscConfig+0x2ea>
 8008038:	4b64      	ldr	r3, [pc, #400]	; (80081cc <HAL_RCC_OscConfig+0x470>)
 800803a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803c:	4a63      	ldr	r2, [pc, #396]	; (80081cc <HAL_RCC_OscConfig+0x470>)
 800803e:	f043 0301 	orr.w	r3, r3, #1
 8008042:	6713      	str	r3, [r2, #112]	; 0x70
 8008044:	e01c      	b.n	8008080 <HAL_RCC_OscConfig+0x324>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	2b05      	cmp	r3, #5
 800804c:	d10c      	bne.n	8008068 <HAL_RCC_OscConfig+0x30c>
 800804e:	4b5f      	ldr	r3, [pc, #380]	; (80081cc <HAL_RCC_OscConfig+0x470>)
 8008050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008052:	4a5e      	ldr	r2, [pc, #376]	; (80081cc <HAL_RCC_OscConfig+0x470>)
 8008054:	f043 0304 	orr.w	r3, r3, #4
 8008058:	6713      	str	r3, [r2, #112]	; 0x70
 800805a:	4b5c      	ldr	r3, [pc, #368]	; (80081cc <HAL_RCC_OscConfig+0x470>)
 800805c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800805e:	4a5b      	ldr	r2, [pc, #364]	; (80081cc <HAL_RCC_OscConfig+0x470>)
 8008060:	f043 0301 	orr.w	r3, r3, #1
 8008064:	6713      	str	r3, [r2, #112]	; 0x70
 8008066:	e00b      	b.n	8008080 <HAL_RCC_OscConfig+0x324>
 8008068:	4b58      	ldr	r3, [pc, #352]	; (80081cc <HAL_RCC_OscConfig+0x470>)
 800806a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800806c:	4a57      	ldr	r2, [pc, #348]	; (80081cc <HAL_RCC_OscConfig+0x470>)
 800806e:	f023 0301 	bic.w	r3, r3, #1
 8008072:	6713      	str	r3, [r2, #112]	; 0x70
 8008074:	4b55      	ldr	r3, [pc, #340]	; (80081cc <HAL_RCC_OscConfig+0x470>)
 8008076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008078:	4a54      	ldr	r2, [pc, #336]	; (80081cc <HAL_RCC_OscConfig+0x470>)
 800807a:	f023 0304 	bic.w	r3, r3, #4
 800807e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d015      	beq.n	80080b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008088:	f7fa fe7e 	bl	8002d88 <HAL_GetTick>
 800808c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800808e:	e00a      	b.n	80080a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008090:	f7fa fe7a 	bl	8002d88 <HAL_GetTick>
 8008094:	4602      	mov	r2, r0
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	f241 3288 	movw	r2, #5000	; 0x1388
 800809e:	4293      	cmp	r3, r2
 80080a0:	d901      	bls.n	80080a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80080a2:	2303      	movs	r3, #3
 80080a4:	e0cb      	b.n	800823e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080a6:	4b49      	ldr	r3, [pc, #292]	; (80081cc <HAL_RCC_OscConfig+0x470>)
 80080a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d0ee      	beq.n	8008090 <HAL_RCC_OscConfig+0x334>
 80080b2:	e014      	b.n	80080de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080b4:	f7fa fe68 	bl	8002d88 <HAL_GetTick>
 80080b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080ba:	e00a      	b.n	80080d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080bc:	f7fa fe64 	bl	8002d88 <HAL_GetTick>
 80080c0:	4602      	mov	r2, r0
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d901      	bls.n	80080d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e0b5      	b.n	800823e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080d2:	4b3e      	ldr	r3, [pc, #248]	; (80081cc <HAL_RCC_OscConfig+0x470>)
 80080d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d6:	f003 0302 	and.w	r3, r3, #2
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1ee      	bne.n	80080bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080de:	7dfb      	ldrb	r3, [r7, #23]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d105      	bne.n	80080f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080e4:	4b39      	ldr	r3, [pc, #228]	; (80081cc <HAL_RCC_OscConfig+0x470>)
 80080e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e8:	4a38      	ldr	r2, [pc, #224]	; (80081cc <HAL_RCC_OscConfig+0x470>)
 80080ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 80a1 	beq.w	800823c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80080fa:	4b34      	ldr	r3, [pc, #208]	; (80081cc <HAL_RCC_OscConfig+0x470>)
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	f003 030c 	and.w	r3, r3, #12
 8008102:	2b08      	cmp	r3, #8
 8008104:	d05c      	beq.n	80081c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	2b02      	cmp	r3, #2
 800810c:	d141      	bne.n	8008192 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800810e:	4b31      	ldr	r3, [pc, #196]	; (80081d4 <HAL_RCC_OscConfig+0x478>)
 8008110:	2200      	movs	r2, #0
 8008112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008114:	f7fa fe38 	bl	8002d88 <HAL_GetTick>
 8008118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800811a:	e008      	b.n	800812e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800811c:	f7fa fe34 	bl	8002d88 <HAL_GetTick>
 8008120:	4602      	mov	r2, r0
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	2b02      	cmp	r3, #2
 8008128:	d901      	bls.n	800812e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800812a:	2303      	movs	r3, #3
 800812c:	e087      	b.n	800823e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800812e:	4b27      	ldr	r3, [pc, #156]	; (80081cc <HAL_RCC_OscConfig+0x470>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1f0      	bne.n	800811c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	69da      	ldr	r2, [r3, #28]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a1b      	ldr	r3, [r3, #32]
 8008142:	431a      	orrs	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008148:	019b      	lsls	r3, r3, #6
 800814a:	431a      	orrs	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008150:	085b      	lsrs	r3, r3, #1
 8008152:	3b01      	subs	r3, #1
 8008154:	041b      	lsls	r3, r3, #16
 8008156:	431a      	orrs	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815c:	061b      	lsls	r3, r3, #24
 800815e:	491b      	ldr	r1, [pc, #108]	; (80081cc <HAL_RCC_OscConfig+0x470>)
 8008160:	4313      	orrs	r3, r2
 8008162:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008164:	4b1b      	ldr	r3, [pc, #108]	; (80081d4 <HAL_RCC_OscConfig+0x478>)
 8008166:	2201      	movs	r2, #1
 8008168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800816a:	f7fa fe0d 	bl	8002d88 <HAL_GetTick>
 800816e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008170:	e008      	b.n	8008184 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008172:	f7fa fe09 	bl	8002d88 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	2b02      	cmp	r3, #2
 800817e:	d901      	bls.n	8008184 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e05c      	b.n	800823e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008184:	4b11      	ldr	r3, [pc, #68]	; (80081cc <HAL_RCC_OscConfig+0x470>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d0f0      	beq.n	8008172 <HAL_RCC_OscConfig+0x416>
 8008190:	e054      	b.n	800823c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008192:	4b10      	ldr	r3, [pc, #64]	; (80081d4 <HAL_RCC_OscConfig+0x478>)
 8008194:	2200      	movs	r2, #0
 8008196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008198:	f7fa fdf6 	bl	8002d88 <HAL_GetTick>
 800819c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800819e:	e008      	b.n	80081b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081a0:	f7fa fdf2 	bl	8002d88 <HAL_GetTick>
 80081a4:	4602      	mov	r2, r0
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d901      	bls.n	80081b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80081ae:	2303      	movs	r3, #3
 80081b0:	e045      	b.n	800823e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081b2:	4b06      	ldr	r3, [pc, #24]	; (80081cc <HAL_RCC_OscConfig+0x470>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1f0      	bne.n	80081a0 <HAL_RCC_OscConfig+0x444>
 80081be:	e03d      	b.n	800823c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d107      	bne.n	80081d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e038      	b.n	800823e <HAL_RCC_OscConfig+0x4e2>
 80081cc:	40023800 	.word	0x40023800
 80081d0:	40007000 	.word	0x40007000
 80081d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80081d8:	4b1b      	ldr	r3, [pc, #108]	; (8008248 <HAL_RCC_OscConfig+0x4ec>)
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d028      	beq.n	8008238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d121      	bne.n	8008238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081fe:	429a      	cmp	r2, r3
 8008200:	d11a      	bne.n	8008238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008208:	4013      	ands	r3, r2
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800820e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008210:	4293      	cmp	r3, r2
 8008212:	d111      	bne.n	8008238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800821e:	085b      	lsrs	r3, r3, #1
 8008220:	3b01      	subs	r3, #1
 8008222:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008224:	429a      	cmp	r2, r3
 8008226:	d107      	bne.n	8008238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008232:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008234:	429a      	cmp	r2, r3
 8008236:	d001      	beq.n	800823c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e000      	b.n	800823e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3718      	adds	r7, #24
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	40023800 	.word	0x40023800

0800824c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d101      	bne.n	8008260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	e0cc      	b.n	80083fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008260:	4b68      	ldr	r3, [pc, #416]	; (8008404 <HAL_RCC_ClockConfig+0x1b8>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 0307 	and.w	r3, r3, #7
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	429a      	cmp	r2, r3
 800826c:	d90c      	bls.n	8008288 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800826e:	4b65      	ldr	r3, [pc, #404]	; (8008404 <HAL_RCC_ClockConfig+0x1b8>)
 8008270:	683a      	ldr	r2, [r7, #0]
 8008272:	b2d2      	uxtb	r2, r2
 8008274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008276:	4b63      	ldr	r3, [pc, #396]	; (8008404 <HAL_RCC_ClockConfig+0x1b8>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 0307 	and.w	r3, r3, #7
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	429a      	cmp	r2, r3
 8008282:	d001      	beq.n	8008288 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e0b8      	b.n	80083fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0302 	and.w	r3, r3, #2
 8008290:	2b00      	cmp	r3, #0
 8008292:	d020      	beq.n	80082d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0304 	and.w	r3, r3, #4
 800829c:	2b00      	cmp	r3, #0
 800829e:	d005      	beq.n	80082ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082a0:	4b59      	ldr	r3, [pc, #356]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	4a58      	ldr	r2, [pc, #352]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 80082a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80082aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0308 	and.w	r3, r3, #8
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d005      	beq.n	80082c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80082b8:	4b53      	ldr	r3, [pc, #332]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	4a52      	ldr	r2, [pc, #328]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 80082be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80082c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082c4:	4b50      	ldr	r3, [pc, #320]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	494d      	ldr	r1, [pc, #308]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 80082d2:	4313      	orrs	r3, r2
 80082d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d044      	beq.n	800836c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d107      	bne.n	80082fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082ea:	4b47      	ldr	r3, [pc, #284]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d119      	bne.n	800832a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e07f      	b.n	80083fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d003      	beq.n	800830a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008306:	2b03      	cmp	r3, #3
 8008308:	d107      	bne.n	800831a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800830a:	4b3f      	ldr	r3, [pc, #252]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d109      	bne.n	800832a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e06f      	b.n	80083fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800831a:	4b3b      	ldr	r3, [pc, #236]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 0302 	and.w	r3, r3, #2
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e067      	b.n	80083fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800832a:	4b37      	ldr	r3, [pc, #220]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f023 0203 	bic.w	r2, r3, #3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	4934      	ldr	r1, [pc, #208]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 8008338:	4313      	orrs	r3, r2
 800833a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800833c:	f7fa fd24 	bl	8002d88 <HAL_GetTick>
 8008340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008342:	e00a      	b.n	800835a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008344:	f7fa fd20 	bl	8002d88 <HAL_GetTick>
 8008348:	4602      	mov	r2, r0
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008352:	4293      	cmp	r3, r2
 8008354:	d901      	bls.n	800835a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e04f      	b.n	80083fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800835a:	4b2b      	ldr	r3, [pc, #172]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	f003 020c 	and.w	r2, r3, #12
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	429a      	cmp	r2, r3
 800836a:	d1eb      	bne.n	8008344 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800836c:	4b25      	ldr	r3, [pc, #148]	; (8008404 <HAL_RCC_ClockConfig+0x1b8>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0307 	and.w	r3, r3, #7
 8008374:	683a      	ldr	r2, [r7, #0]
 8008376:	429a      	cmp	r2, r3
 8008378:	d20c      	bcs.n	8008394 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800837a:	4b22      	ldr	r3, [pc, #136]	; (8008404 <HAL_RCC_ClockConfig+0x1b8>)
 800837c:	683a      	ldr	r2, [r7, #0]
 800837e:	b2d2      	uxtb	r2, r2
 8008380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008382:	4b20      	ldr	r3, [pc, #128]	; (8008404 <HAL_RCC_ClockConfig+0x1b8>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 0307 	and.w	r3, r3, #7
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	429a      	cmp	r2, r3
 800838e:	d001      	beq.n	8008394 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e032      	b.n	80083fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0304 	and.w	r3, r3, #4
 800839c:	2b00      	cmp	r3, #0
 800839e:	d008      	beq.n	80083b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083a0:	4b19      	ldr	r3, [pc, #100]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	4916      	ldr	r1, [pc, #88]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0308 	and.w	r3, r3, #8
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d009      	beq.n	80083d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80083be:	4b12      	ldr	r3, [pc, #72]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	490e      	ldr	r1, [pc, #56]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 80083ce:	4313      	orrs	r3, r2
 80083d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80083d2:	f000 f821 	bl	8008418 <HAL_RCC_GetSysClockFreq>
 80083d6:	4602      	mov	r2, r0
 80083d8:	4b0b      	ldr	r3, [pc, #44]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	091b      	lsrs	r3, r3, #4
 80083de:	f003 030f 	and.w	r3, r3, #15
 80083e2:	490a      	ldr	r1, [pc, #40]	; (800840c <HAL_RCC_ClockConfig+0x1c0>)
 80083e4:	5ccb      	ldrb	r3, [r1, r3]
 80083e6:	fa22 f303 	lsr.w	r3, r2, r3
 80083ea:	4a09      	ldr	r2, [pc, #36]	; (8008410 <HAL_RCC_ClockConfig+0x1c4>)
 80083ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80083ee:	4b09      	ldr	r3, [pc, #36]	; (8008414 <HAL_RCC_ClockConfig+0x1c8>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fa fc84 	bl	8002d00 <HAL_InitTick>

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	40023c00 	.word	0x40023c00
 8008408:	40023800 	.word	0x40023800
 800840c:	0800fc38 	.word	0x0800fc38
 8008410:	20000000 	.word	0x20000000
 8008414:	20000070 	.word	0x20000070

08008418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800841c:	b094      	sub	sp, #80	; 0x50
 800841e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008420:	2300      	movs	r3, #0
 8008422:	647b      	str	r3, [r7, #68]	; 0x44
 8008424:	2300      	movs	r3, #0
 8008426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008428:	2300      	movs	r3, #0
 800842a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800842c:	2300      	movs	r3, #0
 800842e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008430:	4b79      	ldr	r3, [pc, #484]	; (8008618 <HAL_RCC_GetSysClockFreq+0x200>)
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	f003 030c 	and.w	r3, r3, #12
 8008438:	2b08      	cmp	r3, #8
 800843a:	d00d      	beq.n	8008458 <HAL_RCC_GetSysClockFreq+0x40>
 800843c:	2b08      	cmp	r3, #8
 800843e:	f200 80e1 	bhi.w	8008604 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008442:	2b00      	cmp	r3, #0
 8008444:	d002      	beq.n	800844c <HAL_RCC_GetSysClockFreq+0x34>
 8008446:	2b04      	cmp	r3, #4
 8008448:	d003      	beq.n	8008452 <HAL_RCC_GetSysClockFreq+0x3a>
 800844a:	e0db      	b.n	8008604 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800844c:	4b73      	ldr	r3, [pc, #460]	; (800861c <HAL_RCC_GetSysClockFreq+0x204>)
 800844e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008450:	e0db      	b.n	800860a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008452:	4b73      	ldr	r3, [pc, #460]	; (8008620 <HAL_RCC_GetSysClockFreq+0x208>)
 8008454:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008456:	e0d8      	b.n	800860a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008458:	4b6f      	ldr	r3, [pc, #444]	; (8008618 <HAL_RCC_GetSysClockFreq+0x200>)
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008460:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008462:	4b6d      	ldr	r3, [pc, #436]	; (8008618 <HAL_RCC_GetSysClockFreq+0x200>)
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d063      	beq.n	8008536 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800846e:	4b6a      	ldr	r3, [pc, #424]	; (8008618 <HAL_RCC_GetSysClockFreq+0x200>)
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	099b      	lsrs	r3, r3, #6
 8008474:	2200      	movs	r2, #0
 8008476:	63bb      	str	r3, [r7, #56]	; 0x38
 8008478:	63fa      	str	r2, [r7, #60]	; 0x3c
 800847a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008480:	633b      	str	r3, [r7, #48]	; 0x30
 8008482:	2300      	movs	r3, #0
 8008484:	637b      	str	r3, [r7, #52]	; 0x34
 8008486:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800848a:	4622      	mov	r2, r4
 800848c:	462b      	mov	r3, r5
 800848e:	f04f 0000 	mov.w	r0, #0
 8008492:	f04f 0100 	mov.w	r1, #0
 8008496:	0159      	lsls	r1, r3, #5
 8008498:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800849c:	0150      	lsls	r0, r2, #5
 800849e:	4602      	mov	r2, r0
 80084a0:	460b      	mov	r3, r1
 80084a2:	4621      	mov	r1, r4
 80084a4:	1a51      	subs	r1, r2, r1
 80084a6:	6139      	str	r1, [r7, #16]
 80084a8:	4629      	mov	r1, r5
 80084aa:	eb63 0301 	sbc.w	r3, r3, r1
 80084ae:	617b      	str	r3, [r7, #20]
 80084b0:	f04f 0200 	mov.w	r2, #0
 80084b4:	f04f 0300 	mov.w	r3, #0
 80084b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80084bc:	4659      	mov	r1, fp
 80084be:	018b      	lsls	r3, r1, #6
 80084c0:	4651      	mov	r1, sl
 80084c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80084c6:	4651      	mov	r1, sl
 80084c8:	018a      	lsls	r2, r1, #6
 80084ca:	4651      	mov	r1, sl
 80084cc:	ebb2 0801 	subs.w	r8, r2, r1
 80084d0:	4659      	mov	r1, fp
 80084d2:	eb63 0901 	sbc.w	r9, r3, r1
 80084d6:	f04f 0200 	mov.w	r2, #0
 80084da:	f04f 0300 	mov.w	r3, #0
 80084de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80084e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80084e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80084ea:	4690      	mov	r8, r2
 80084ec:	4699      	mov	r9, r3
 80084ee:	4623      	mov	r3, r4
 80084f0:	eb18 0303 	adds.w	r3, r8, r3
 80084f4:	60bb      	str	r3, [r7, #8]
 80084f6:	462b      	mov	r3, r5
 80084f8:	eb49 0303 	adc.w	r3, r9, r3
 80084fc:	60fb      	str	r3, [r7, #12]
 80084fe:	f04f 0200 	mov.w	r2, #0
 8008502:	f04f 0300 	mov.w	r3, #0
 8008506:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800850a:	4629      	mov	r1, r5
 800850c:	024b      	lsls	r3, r1, #9
 800850e:	4621      	mov	r1, r4
 8008510:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008514:	4621      	mov	r1, r4
 8008516:	024a      	lsls	r2, r1, #9
 8008518:	4610      	mov	r0, r2
 800851a:	4619      	mov	r1, r3
 800851c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800851e:	2200      	movs	r2, #0
 8008520:	62bb      	str	r3, [r7, #40]	; 0x28
 8008522:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008524:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008528:	f7f8 faac 	bl	8000a84 <__aeabi_uldivmod>
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	4613      	mov	r3, r2
 8008532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008534:	e058      	b.n	80085e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008536:	4b38      	ldr	r3, [pc, #224]	; (8008618 <HAL_RCC_GetSysClockFreq+0x200>)
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	099b      	lsrs	r3, r3, #6
 800853c:	2200      	movs	r2, #0
 800853e:	4618      	mov	r0, r3
 8008540:	4611      	mov	r1, r2
 8008542:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008546:	623b      	str	r3, [r7, #32]
 8008548:	2300      	movs	r3, #0
 800854a:	627b      	str	r3, [r7, #36]	; 0x24
 800854c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008550:	4642      	mov	r2, r8
 8008552:	464b      	mov	r3, r9
 8008554:	f04f 0000 	mov.w	r0, #0
 8008558:	f04f 0100 	mov.w	r1, #0
 800855c:	0159      	lsls	r1, r3, #5
 800855e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008562:	0150      	lsls	r0, r2, #5
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	4641      	mov	r1, r8
 800856a:	ebb2 0a01 	subs.w	sl, r2, r1
 800856e:	4649      	mov	r1, r9
 8008570:	eb63 0b01 	sbc.w	fp, r3, r1
 8008574:	f04f 0200 	mov.w	r2, #0
 8008578:	f04f 0300 	mov.w	r3, #0
 800857c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008580:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008584:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008588:	ebb2 040a 	subs.w	r4, r2, sl
 800858c:	eb63 050b 	sbc.w	r5, r3, fp
 8008590:	f04f 0200 	mov.w	r2, #0
 8008594:	f04f 0300 	mov.w	r3, #0
 8008598:	00eb      	lsls	r3, r5, #3
 800859a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800859e:	00e2      	lsls	r2, r4, #3
 80085a0:	4614      	mov	r4, r2
 80085a2:	461d      	mov	r5, r3
 80085a4:	4643      	mov	r3, r8
 80085a6:	18e3      	adds	r3, r4, r3
 80085a8:	603b      	str	r3, [r7, #0]
 80085aa:	464b      	mov	r3, r9
 80085ac:	eb45 0303 	adc.w	r3, r5, r3
 80085b0:	607b      	str	r3, [r7, #4]
 80085b2:	f04f 0200 	mov.w	r2, #0
 80085b6:	f04f 0300 	mov.w	r3, #0
 80085ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80085be:	4629      	mov	r1, r5
 80085c0:	028b      	lsls	r3, r1, #10
 80085c2:	4621      	mov	r1, r4
 80085c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80085c8:	4621      	mov	r1, r4
 80085ca:	028a      	lsls	r2, r1, #10
 80085cc:	4610      	mov	r0, r2
 80085ce:	4619      	mov	r1, r3
 80085d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085d2:	2200      	movs	r2, #0
 80085d4:	61bb      	str	r3, [r7, #24]
 80085d6:	61fa      	str	r2, [r7, #28]
 80085d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085dc:	f7f8 fa52 	bl	8000a84 <__aeabi_uldivmod>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	4613      	mov	r3, r2
 80085e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80085e8:	4b0b      	ldr	r3, [pc, #44]	; (8008618 <HAL_RCC_GetSysClockFreq+0x200>)
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	0c1b      	lsrs	r3, r3, #16
 80085ee:	f003 0303 	and.w	r3, r3, #3
 80085f2:	3301      	adds	r3, #1
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80085f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008600:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008602:	e002      	b.n	800860a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008604:	4b05      	ldr	r3, [pc, #20]	; (800861c <HAL_RCC_GetSysClockFreq+0x204>)
 8008606:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800860a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800860c:	4618      	mov	r0, r3
 800860e:	3750      	adds	r7, #80	; 0x50
 8008610:	46bd      	mov	sp, r7
 8008612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008616:	bf00      	nop
 8008618:	40023800 	.word	0x40023800
 800861c:	00f42400 	.word	0x00f42400
 8008620:	007a1200 	.word	0x007a1200

08008624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008624:	b480      	push	{r7}
 8008626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008628:	4b03      	ldr	r3, [pc, #12]	; (8008638 <HAL_RCC_GetHCLKFreq+0x14>)
 800862a:	681b      	ldr	r3, [r3, #0]
}
 800862c:	4618      	mov	r0, r3
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	20000000 	.word	0x20000000

0800863c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008640:	f7ff fff0 	bl	8008624 <HAL_RCC_GetHCLKFreq>
 8008644:	4602      	mov	r2, r0
 8008646:	4b05      	ldr	r3, [pc, #20]	; (800865c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	0a9b      	lsrs	r3, r3, #10
 800864c:	f003 0307 	and.w	r3, r3, #7
 8008650:	4903      	ldr	r1, [pc, #12]	; (8008660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008652:	5ccb      	ldrb	r3, [r1, r3]
 8008654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008658:	4618      	mov	r0, r3
 800865a:	bd80      	pop	{r7, pc}
 800865c:	40023800 	.word	0x40023800
 8008660:	0800fc48 	.word	0x0800fc48

08008664 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b086      	sub	sp, #24
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800866c:	2300      	movs	r3, #0
 800866e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008670:	2300      	movs	r3, #0
 8008672:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 0301 	and.w	r3, r3, #1
 800867c:	2b00      	cmp	r3, #0
 800867e:	d105      	bne.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008688:	2b00      	cmp	r3, #0
 800868a:	d038      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800868c:	4b68      	ldr	r3, [pc, #416]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800868e:	2200      	movs	r2, #0
 8008690:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008692:	f7fa fb79 	bl	8002d88 <HAL_GetTick>
 8008696:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008698:	e008      	b.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800869a:	f7fa fb75 	bl	8002d88 <HAL_GetTick>
 800869e:	4602      	mov	r2, r0
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d901      	bls.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086a8:	2303      	movs	r3, #3
 80086aa:	e0bd      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80086ac:	4b61      	ldr	r3, [pc, #388]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1f0      	bne.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	019b      	lsls	r3, r3, #6
 80086c2:	431a      	orrs	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	071b      	lsls	r3, r3, #28
 80086ca:	495a      	ldr	r1, [pc, #360]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086cc:	4313      	orrs	r3, r2
 80086ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80086d2:	4b57      	ldr	r3, [pc, #348]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80086d4:	2201      	movs	r2, #1
 80086d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80086d8:	f7fa fb56 	bl	8002d88 <HAL_GetTick>
 80086dc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80086de:	e008      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80086e0:	f7fa fb52 	bl	8002d88 <HAL_GetTick>
 80086e4:	4602      	mov	r2, r0
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d901      	bls.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e09a      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80086f2:	4b50      	ldr	r3, [pc, #320]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d0f0      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 0302 	and.w	r3, r3, #2
 8008706:	2b00      	cmp	r3, #0
 8008708:	f000 8083 	beq.w	8008812 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800870c:	2300      	movs	r3, #0
 800870e:	60fb      	str	r3, [r7, #12]
 8008710:	4b48      	ldr	r3, [pc, #288]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008714:	4a47      	ldr	r2, [pc, #284]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800871a:	6413      	str	r3, [r2, #64]	; 0x40
 800871c:	4b45      	ldr	r3, [pc, #276]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800871e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008724:	60fb      	str	r3, [r7, #12]
 8008726:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008728:	4b43      	ldr	r3, [pc, #268]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a42      	ldr	r2, [pc, #264]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800872e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008732:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008734:	f7fa fb28 	bl	8002d88 <HAL_GetTick>
 8008738:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800873a:	e008      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800873c:	f7fa fb24 	bl	8002d88 <HAL_GetTick>
 8008740:	4602      	mov	r2, r0
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	2b02      	cmp	r3, #2
 8008748:	d901      	bls.n	800874e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e06c      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800874e:	4b3a      	ldr	r3, [pc, #232]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008756:	2b00      	cmp	r3, #0
 8008758:	d0f0      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800875a:	4b36      	ldr	r3, [pc, #216]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800875c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800875e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008762:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d02f      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x166>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	429a      	cmp	r2, r3
 8008776:	d028      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008778:	4b2e      	ldr	r3, [pc, #184]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800877a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800877c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008780:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008782:	4b2e      	ldr	r3, [pc, #184]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008784:	2201      	movs	r2, #1
 8008786:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008788:	4b2c      	ldr	r3, [pc, #176]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800878a:	2200      	movs	r2, #0
 800878c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800878e:	4a29      	ldr	r2, [pc, #164]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008794:	4b27      	ldr	r3, [pc, #156]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008798:	f003 0301 	and.w	r3, r3, #1
 800879c:	2b01      	cmp	r3, #1
 800879e:	d114      	bne.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80087a0:	f7fa faf2 	bl	8002d88 <HAL_GetTick>
 80087a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087a6:	e00a      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087a8:	f7fa faee 	bl	8002d88 <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d901      	bls.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e034      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087be:	4b1d      	ldr	r3, [pc, #116]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087c2:	f003 0302 	and.w	r3, r3, #2
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d0ee      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087d6:	d10d      	bne.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80087d8:	4b16      	ldr	r3, [pc, #88]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80087e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087ec:	4911      	ldr	r1, [pc, #68]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087ee:	4313      	orrs	r3, r2
 80087f0:	608b      	str	r3, [r1, #8]
 80087f2:	e005      	b.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80087f4:	4b0f      	ldr	r3, [pc, #60]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	4a0e      	ldr	r2, [pc, #56]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80087fe:	6093      	str	r3, [r2, #8]
 8008800:	4b0c      	ldr	r3, [pc, #48]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008802:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800880c:	4909      	ldr	r1, [pc, #36]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800880e:	4313      	orrs	r3, r2
 8008810:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0308 	and.w	r3, r3, #8
 800881a:	2b00      	cmp	r3, #0
 800881c:	d003      	beq.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	7d1a      	ldrb	r2, [r3, #20]
 8008822:	4b07      	ldr	r3, [pc, #28]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8008824:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3718      	adds	r7, #24
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	42470068 	.word	0x42470068
 8008834:	40023800 	.word	0x40023800
 8008838:	40007000 	.word	0x40007000
 800883c:	42470e40 	.word	0x42470e40
 8008840:	424711e0 	.word	0x424711e0

08008844 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2203      	movs	r2, #3
 8008850:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8008852:	4b1c      	ldr	r3, [pc, #112]	; (80088c4 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8008854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008858:	099b      	lsrs	r3, r3, #6
 800885a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008862:	4b18      	ldr	r3, [pc, #96]	; (80088c4 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8008864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008868:	0f1b      	lsrs	r3, r3, #28
 800886a:	f003 0207 	and.w	r2, r3, #7
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 8008872:	4b14      	ldr	r3, [pc, #80]	; (80088c4 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8008874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008878:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8008880:	4b10      	ldr	r3, [pc, #64]	; (80088c4 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008888:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800888a:	4b0e      	ldr	r3, [pc, #56]	; (80088c4 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800888c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800888e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	431a      	orrs	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 800889a:	4b0a      	ldr	r3, [pc, #40]	; (80088c4 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800889c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d103      	bne.n	80088b0 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80088ae:	e002      	b.n	80088b6 <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	751a      	strb	r2, [r3, #20]
}
 80088b6:	bf00      	nop
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	40023800 	.word	0x40023800

080088c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b087      	sub	sp, #28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80088d8:	2300      	movs	r3, #0
 80088da:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80088dc:	2300      	movs	r3, #0
 80088de:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d140      	bne.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80088e6:	4b24      	ldr	r3, [pc, #144]	; (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088ee:	60fb      	str	r3, [r7, #12]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d005      	beq.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d131      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80088fc:	4b1f      	ldr	r3, [pc, #124]	; (800897c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80088fe:	617b      	str	r3, [r7, #20]
          break;
 8008900:	e031      	b.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008902:	4b1d      	ldr	r3, [pc, #116]	; (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800890a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800890e:	d109      	bne.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008910:	4b19      	ldr	r3, [pc, #100]	; (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008916:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800891a:	4a19      	ldr	r2, [pc, #100]	; (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800891c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008920:	613b      	str	r3, [r7, #16]
 8008922:	e008      	b.n	8008936 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008924:	4b14      	ldr	r3, [pc, #80]	; (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800892a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800892e:	4a15      	ldr	r2, [pc, #84]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8008930:	fbb2 f3f3 	udiv	r3, r2, r3
 8008934:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008936:	4b10      	ldr	r3, [pc, #64]	; (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800893c:	099b      	lsrs	r3, r3, #6
 800893e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	fb02 f303 	mul.w	r3, r2, r3
 8008948:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800894a:	4b0b      	ldr	r3, [pc, #44]	; (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800894c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008950:	0f1b      	lsrs	r3, r3, #28
 8008952:	f003 0307 	and.w	r3, r3, #7
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	fbb2 f3f3 	udiv	r3, r2, r3
 800895c:	617b      	str	r3, [r7, #20]
          break;
 800895e:	e002      	b.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008960:	2300      	movs	r3, #0
 8008962:	617b      	str	r3, [r7, #20]
          break;
 8008964:	bf00      	nop
        }
      }
      break;
 8008966:	bf00      	nop
    }
  }
  return frequency;
 8008968:	697b      	ldr	r3, [r7, #20]
}
 800896a:	4618      	mov	r0, r3
 800896c:	371c      	adds	r7, #28
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	40023800 	.word	0x40023800
 800897c:	00bb8000 	.word	0x00bb8000
 8008980:	007a1200 	.word	0x007a1200
 8008984:	00f42400 	.word	0x00f42400

08008988 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008988:	b084      	sub	sp, #16
 800898a:	b580      	push	{r7, lr}
 800898c:	b084      	sub	sp, #16
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	f107 001c 	add.w	r0, r7, #28
 8008996:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800899a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899c:	2b01      	cmp	r3, #1
 800899e:	d122      	bne.n	80089e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80089b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80089c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d105      	bne.n	80089da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 f9c0 	bl	8008d60 <USB_CoreReset>
 80089e0:	4603      	mov	r3, r0
 80089e2:	73fb      	strb	r3, [r7, #15]
 80089e4:	e01a      	b.n	8008a1c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f9b4 	bl	8008d60 <USB_CoreReset>
 80089f8:	4603      	mov	r3, r0
 80089fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80089fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d106      	bne.n	8008a10 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	639a      	str	r2, [r3, #56]	; 0x38
 8008a0e:	e005      	b.n	8008a1c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d10b      	bne.n	8008a3a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	f043 0206 	orr.w	r2, r3, #6
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	f043 0220 	orr.w	r2, r3, #32
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a46:	b004      	add	sp, #16
 8008a48:	4770      	bx	lr

08008a4a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b083      	sub	sp, #12
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	f043 0201 	orr.w	r2, r3, #1
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	f023 0201 	bic.w	r2, r3, #1
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	370c      	adds	r7, #12
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b084      	sub	sp, #16
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	460b      	mov	r3, r1
 8008a98:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008aaa:	78fb      	ldrb	r3, [r7, #3]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d115      	bne.n	8008adc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008abc:	2001      	movs	r0, #1
 8008abe:	f7fa f96f 	bl	8002da0 <HAL_Delay>
      ms++;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 f93a 	bl	8008d42 <USB_GetMode>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d01e      	beq.n	8008b12 <USB_SetCurrentMode+0x84>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2b31      	cmp	r3, #49	; 0x31
 8008ad8:	d9f0      	bls.n	8008abc <USB_SetCurrentMode+0x2e>
 8008ada:	e01a      	b.n	8008b12 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008adc:	78fb      	ldrb	r3, [r7, #3]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d115      	bne.n	8008b0e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008aee:	2001      	movs	r0, #1
 8008af0:	f7fa f956 	bl	8002da0 <HAL_Delay>
      ms++;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	3301      	adds	r3, #1
 8008af8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f921 	bl	8008d42 <USB_GetMode>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d005      	beq.n	8008b12 <USB_SetCurrentMode+0x84>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2b31      	cmp	r3, #49	; 0x31
 8008b0a:	d9f0      	bls.n	8008aee <USB_SetCurrentMode+0x60>
 8008b0c:	e001      	b.n	8008b12 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e005      	b.n	8008b1e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2b32      	cmp	r3, #50	; 0x32
 8008b16:	d101      	bne.n	8008b1c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e000      	b.n	8008b1e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
	...

08008b28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b32:	2300      	movs	r3, #0
 8008b34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	4a13      	ldr	r2, [pc, #76]	; (8008b8c <USB_FlushTxFifo+0x64>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d901      	bls.n	8008b48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e01b      	b.n	8008b80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	daf2      	bge.n	8008b36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008b50:	2300      	movs	r3, #0
 8008b52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	019b      	lsls	r3, r3, #6
 8008b58:	f043 0220 	orr.w	r2, r3, #32
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	3301      	adds	r3, #1
 8008b64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	4a08      	ldr	r2, [pc, #32]	; (8008b8c <USB_FlushTxFifo+0x64>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d901      	bls.n	8008b72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e006      	b.n	8008b80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	f003 0320 	and.w	r3, r3, #32
 8008b7a:	2b20      	cmp	r3, #32
 8008b7c:	d0f0      	beq.n	8008b60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3714      	adds	r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr
 8008b8c:	00030d40 	.word	0x00030d40

08008b90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	4a11      	ldr	r2, [pc, #68]	; (8008bec <USB_FlushRxFifo+0x5c>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d901      	bls.n	8008bae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e018      	b.n	8008be0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	daf2      	bge.n	8008b9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2210      	movs	r2, #16
 8008bbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	4a08      	ldr	r2, [pc, #32]	; (8008bec <USB_FlushRxFifo+0x5c>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d901      	bls.n	8008bd2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e006      	b.n	8008be0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	f003 0310 	and.w	r3, r3, #16
 8008bda:	2b10      	cmp	r3, #16
 8008bdc:	d0f0      	beq.n	8008bc0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3714      	adds	r7, #20
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr
 8008bec:	00030d40 	.word	0x00030d40

08008bf0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b089      	sub	sp, #36	; 0x24
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	460b      	mov	r3, r1
 8008c00:	71fb      	strb	r3, [r7, #7]
 8008c02:	4613      	mov	r3, r2
 8008c04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008c0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d123      	bne.n	8008c5e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008c16:	88bb      	ldrh	r3, [r7, #4]
 8008c18:	3303      	adds	r3, #3
 8008c1a:	089b      	lsrs	r3, r3, #2
 8008c1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008c1e:	2300      	movs	r3, #0
 8008c20:	61bb      	str	r3, [r7, #24]
 8008c22:	e018      	b.n	8008c56 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008c24:	79fb      	ldrb	r3, [r7, #7]
 8008c26:	031a      	lsls	r2, r3, #12
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c30:	461a      	mov	r2, r3
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	3301      	adds	r3, #1
 8008c42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	3301      	adds	r3, #1
 8008c48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	3301      	adds	r3, #1
 8008c54:	61bb      	str	r3, [r7, #24]
 8008c56:	69ba      	ldr	r2, [r7, #24]
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d3e2      	bcc.n	8008c24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3724      	adds	r7, #36	; 0x24
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b08b      	sub	sp, #44	; 0x2c
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	4613      	mov	r3, r2
 8008c78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008c82:	88fb      	ldrh	r3, [r7, #6]
 8008c84:	089b      	lsrs	r3, r3, #2
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008c8a:	88fb      	ldrh	r3, [r7, #6]
 8008c8c:	f003 0303 	and.w	r3, r3, #3
 8008c90:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008c92:	2300      	movs	r3, #0
 8008c94:	623b      	str	r3, [r7, #32]
 8008c96:	e014      	b.n	8008cc2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca2:	601a      	str	r2, [r3, #0]
    pDest++;
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	3301      	adds	r3, #1
 8008cae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb8:	3301      	adds	r3, #1
 8008cba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008cbc:	6a3b      	ldr	r3, [r7, #32]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	623b      	str	r3, [r7, #32]
 8008cc2:	6a3a      	ldr	r2, [r7, #32]
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d3e6      	bcc.n	8008c98 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008cca:	8bfb      	ldrh	r3, [r7, #30]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d01e      	beq.n	8008d0e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cda:	461a      	mov	r2, r3
 8008cdc:	f107 0310 	add.w	r3, r7, #16
 8008ce0:	6812      	ldr	r2, [r2, #0]
 8008ce2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008ce4:	693a      	ldr	r2, [r7, #16]
 8008ce6:	6a3b      	ldr	r3, [r7, #32]
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	00db      	lsls	r3, r3, #3
 8008cec:	fa22 f303 	lsr.w	r3, r2, r3
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf4:	701a      	strb	r2, [r3, #0]
      i++;
 8008cf6:	6a3b      	ldr	r3, [r7, #32]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	623b      	str	r3, [r7, #32]
      pDest++;
 8008cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfe:	3301      	adds	r3, #1
 8008d00:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008d02:	8bfb      	ldrh	r3, [r7, #30]
 8008d04:	3b01      	subs	r3, #1
 8008d06:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008d08:	8bfb      	ldrh	r3, [r7, #30]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1ea      	bne.n	8008ce4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	372c      	adds	r7, #44	; 0x2c
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	695b      	ldr	r3, [r3, #20]
 8008d28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	4013      	ands	r3, r2
 8008d32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008d34:	68fb      	ldr	r3, [r7, #12]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3714      	adds	r7, #20
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr

08008d42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008d42:	b480      	push	{r7}
 8008d44:	b083      	sub	sp, #12
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	695b      	ldr	r3, [r3, #20]
 8008d4e:	f003 0301 	and.w	r3, r3, #1
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
	...

08008d60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	4a13      	ldr	r2, [pc, #76]	; (8008dc4 <USB_CoreReset+0x64>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d901      	bls.n	8008d7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e01b      	b.n	8008db6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	691b      	ldr	r3, [r3, #16]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	daf2      	bge.n	8008d6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008d86:	2300      	movs	r3, #0
 8008d88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	f043 0201 	orr.w	r2, r3, #1
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	4a09      	ldr	r2, [pc, #36]	; (8008dc4 <USB_CoreReset+0x64>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d901      	bls.n	8008da8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e006      	b.n	8008db6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	691b      	ldr	r3, [r3, #16]
 8008dac:	f003 0301 	and.w	r3, r3, #1
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d0f0      	beq.n	8008d96 <USB_CoreReset+0x36>

  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3714      	adds	r7, #20
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	00030d40 	.word	0x00030d40

08008dc8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008dc8:	b084      	sub	sp, #16
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b086      	sub	sp, #24
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
 8008dd2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008dd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008de8:	461a      	mov	r2, r3
 8008dea:	2300      	movs	r3, #0
 8008dec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d018      	beq.n	8008e50 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d10a      	bne.n	8008e3a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e32:	f043 0304 	orr.w	r3, r3, #4
 8008e36:	6013      	str	r3, [r2, #0]
 8008e38:	e014      	b.n	8008e64 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e48:	f023 0304 	bic.w	r3, r3, #4
 8008e4c:	6013      	str	r3, [r2, #0]
 8008e4e:	e009      	b.n	8008e64 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e5e:	f023 0304 	bic.w	r3, r3, #4
 8008e62:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e64:	2110      	movs	r1, #16
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f7ff fe5e 	bl	8008b28 <USB_FlushTxFifo>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d001      	beq.n	8008e76 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f7ff fe8a 	bl	8008b90 <USB_FlushRxFifo>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d001      	beq.n	8008e86 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008e86:	2300      	movs	r3, #0
 8008e88:	613b      	str	r3, [r7, #16]
 8008e8a:	e015      	b.n	8008eb8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	015a      	lsls	r2, r3, #5
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	4413      	add	r3, r2
 8008e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e98:	461a      	mov	r2, r3
 8008e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e9e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	015a      	lsls	r2, r3, #5
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eac:	461a      	mov	r2, r3
 8008eae:	2300      	movs	r3, #0
 8008eb0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	613b      	str	r3, [r7, #16]
 8008eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eba:	693a      	ldr	r2, [r7, #16]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d3e5      	bcc.n	8008e8c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8008ecc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00b      	beq.n	8008ef2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ee0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a13      	ldr	r2, [pc, #76]	; (8008f34 <USB_HostInit+0x16c>)
 8008ee6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a13      	ldr	r2, [pc, #76]	; (8008f38 <USB_HostInit+0x170>)
 8008eec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008ef0:	e009      	b.n	8008f06 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2280      	movs	r2, #128	; 0x80
 8008ef6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a10      	ldr	r2, [pc, #64]	; (8008f3c <USB_HostInit+0x174>)
 8008efc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a0f      	ldr	r2, [pc, #60]	; (8008f40 <USB_HostInit+0x178>)
 8008f02:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d105      	bne.n	8008f18 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	f043 0210 	orr.w	r2, r3, #16
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	699a      	ldr	r2, [r3, #24]
 8008f1c:	4b09      	ldr	r3, [pc, #36]	; (8008f44 <USB_HostInit+0x17c>)
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3718      	adds	r7, #24
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f30:	b004      	add	sp, #16
 8008f32:	4770      	bx	lr
 8008f34:	01000200 	.word	0x01000200
 8008f38:	00e00300 	.word	0x00e00300
 8008f3c:	00600080 	.word	0x00600080
 8008f40:	004000e0 	.word	0x004000e0
 8008f44:	a3200008 	.word	0xa3200008

08008f48 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	460b      	mov	r3, r1
 8008f52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f66:	f023 0303 	bic.w	r3, r3, #3
 8008f6a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	78fb      	ldrb	r3, [r7, #3]
 8008f76:	f003 0303 	and.w	r3, r3, #3
 8008f7a:	68f9      	ldr	r1, [r7, #12]
 8008f7c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008f80:	4313      	orrs	r3, r2
 8008f82:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008f84:	78fb      	ldrb	r3, [r7, #3]
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d107      	bne.n	8008f9a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f90:	461a      	mov	r2, r3
 8008f92:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008f96:	6053      	str	r3, [r2, #4]
 8008f98:	e009      	b.n	8008fae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008f9a:	78fb      	ldrb	r3, [r7, #3]
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d106      	bne.n	8008fae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	f241 7370 	movw	r3, #6000	; 0x1770
 8008fac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3714      	adds	r7, #20
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008fdc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fea:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008fec:	2064      	movs	r0, #100	; 0x64
 8008fee:	f7f9 fed7 	bl	8002da0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008ffa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ffe:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009000:	200a      	movs	r0, #10
 8009002:	f7f9 fecd 	bl	8002da0 <HAL_Delay>

  return HAL_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	460b      	mov	r3, r1
 800901a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009020:	2300      	movs	r3, #0
 8009022:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009034:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800903c:	2b00      	cmp	r3, #0
 800903e:	d109      	bne.n	8009054 <USB_DriveVbus+0x44>
 8009040:	78fb      	ldrb	r3, [r7, #3]
 8009042:	2b01      	cmp	r3, #1
 8009044:	d106      	bne.n	8009054 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800904e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009052:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800905a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800905e:	d109      	bne.n	8009074 <USB_DriveVbus+0x64>
 8009060:	78fb      	ldrb	r3, [r7, #3]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d106      	bne.n	8009074 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800906e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009072:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3714      	adds	r7, #20
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr

08009082 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009082:	b480      	push	{r7}
 8009084:	b085      	sub	sp, #20
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800908e:	2300      	movs	r3, #0
 8009090:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	0c5b      	lsrs	r3, r3, #17
 80090a0:	f003 0303 	and.w	r3, r3, #3
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	b29b      	uxth	r3, r3
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
	...

080090d4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b088      	sub	sp, #32
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	4608      	mov	r0, r1
 80090de:	4611      	mov	r1, r2
 80090e0:	461a      	mov	r2, r3
 80090e2:	4603      	mov	r3, r0
 80090e4:	70fb      	strb	r3, [r7, #3]
 80090e6:	460b      	mov	r3, r1
 80090e8:	70bb      	strb	r3, [r7, #2]
 80090ea:	4613      	mov	r3, r2
 80090ec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80090ee:	2300      	movs	r3, #0
 80090f0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80090f6:	78fb      	ldrb	r3, [r7, #3]
 80090f8:	015a      	lsls	r2, r3, #5
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	4413      	add	r3, r2
 80090fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009102:	461a      	mov	r2, r3
 8009104:	f04f 33ff 	mov.w	r3, #4294967295
 8009108:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800910a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800910e:	2b03      	cmp	r3, #3
 8009110:	d87e      	bhi.n	8009210 <USB_HC_Init+0x13c>
 8009112:	a201      	add	r2, pc, #4	; (adr r2, 8009118 <USB_HC_Init+0x44>)
 8009114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009118:	08009129 	.word	0x08009129
 800911c:	080091d3 	.word	0x080091d3
 8009120:	08009129 	.word	0x08009129
 8009124:	08009195 	.word	0x08009195
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009128:	78fb      	ldrb	r3, [r7, #3]
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	4413      	add	r3, r2
 8009130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009134:	461a      	mov	r2, r3
 8009136:	f240 439d 	movw	r3, #1181	; 0x49d
 800913a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800913c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009140:	2b00      	cmp	r3, #0
 8009142:	da10      	bge.n	8009166 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009144:	78fb      	ldrb	r3, [r7, #3]
 8009146:	015a      	lsls	r2, r3, #5
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	4413      	add	r3, r2
 800914c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	78fa      	ldrb	r2, [r7, #3]
 8009154:	0151      	lsls	r1, r2, #5
 8009156:	693a      	ldr	r2, [r7, #16]
 8009158:	440a      	add	r2, r1
 800915a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800915e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009162:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009164:	e057      	b.n	8009216 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800916a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800916e:	2b00      	cmp	r3, #0
 8009170:	d051      	beq.n	8009216 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009172:	78fb      	ldrb	r3, [r7, #3]
 8009174:	015a      	lsls	r2, r3, #5
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	4413      	add	r3, r2
 800917a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	78fa      	ldrb	r2, [r7, #3]
 8009182:	0151      	lsls	r1, r2, #5
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	440a      	add	r2, r1
 8009188:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800918c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009190:	60d3      	str	r3, [r2, #12]
      break;
 8009192:	e040      	b.n	8009216 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009194:	78fb      	ldrb	r3, [r7, #3]
 8009196:	015a      	lsls	r2, r3, #5
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	4413      	add	r3, r2
 800919c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091a0:	461a      	mov	r2, r3
 80091a2:	f240 639d 	movw	r3, #1693	; 0x69d
 80091a6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80091a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	da34      	bge.n	800921a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80091b0:	78fb      	ldrb	r3, [r7, #3]
 80091b2:	015a      	lsls	r2, r3, #5
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	4413      	add	r3, r2
 80091b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	78fa      	ldrb	r2, [r7, #3]
 80091c0:	0151      	lsls	r1, r2, #5
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	440a      	add	r2, r1
 80091c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091ce:	60d3      	str	r3, [r2, #12]
      }

      break;
 80091d0:	e023      	b.n	800921a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80091d2:	78fb      	ldrb	r3, [r7, #3]
 80091d4:	015a      	lsls	r2, r3, #5
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	4413      	add	r3, r2
 80091da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091de:	461a      	mov	r2, r3
 80091e0:	f240 2325 	movw	r3, #549	; 0x225
 80091e4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80091e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	da17      	bge.n	800921e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80091ee:	78fb      	ldrb	r3, [r7, #3]
 80091f0:	015a      	lsls	r2, r3, #5
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	4413      	add	r3, r2
 80091f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	78fa      	ldrb	r2, [r7, #3]
 80091fe:	0151      	lsls	r1, r2, #5
 8009200:	693a      	ldr	r2, [r7, #16]
 8009202:	440a      	add	r2, r1
 8009204:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009208:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800920c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800920e:	e006      	b.n	800921e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	77fb      	strb	r3, [r7, #31]
      break;
 8009214:	e004      	b.n	8009220 <USB_HC_Init+0x14c>
      break;
 8009216:	bf00      	nop
 8009218:	e002      	b.n	8009220 <USB_HC_Init+0x14c>
      break;
 800921a:	bf00      	nop
 800921c:	e000      	b.n	8009220 <USB_HC_Init+0x14c>
      break;
 800921e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009220:	78fb      	ldrb	r3, [r7, #3]
 8009222:	015a      	lsls	r2, r3, #5
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	4413      	add	r3, r2
 8009228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	78fa      	ldrb	r2, [r7, #3]
 8009230:	0151      	lsls	r1, r2, #5
 8009232:	693a      	ldr	r2, [r7, #16]
 8009234:	440a      	add	r2, r1
 8009236:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800923a:	f043 0302 	orr.w	r3, r3, #2
 800923e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009246:	699a      	ldr	r2, [r3, #24]
 8009248:	78fb      	ldrb	r3, [r7, #3]
 800924a:	f003 030f 	and.w	r3, r3, #15
 800924e:	2101      	movs	r1, #1
 8009250:	fa01 f303 	lsl.w	r3, r1, r3
 8009254:	6939      	ldr	r1, [r7, #16]
 8009256:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800925a:	4313      	orrs	r3, r2
 800925c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800926a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800926e:	2b00      	cmp	r3, #0
 8009270:	da03      	bge.n	800927a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009276:	61bb      	str	r3, [r7, #24]
 8009278:	e001      	b.n	800927e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800927a:	2300      	movs	r3, #0
 800927c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7ff feff 	bl	8009082 <USB_GetHostSpeed>
 8009284:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009286:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800928a:	2b02      	cmp	r3, #2
 800928c:	d106      	bne.n	800929c <USB_HC_Init+0x1c8>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2b02      	cmp	r3, #2
 8009292:	d003      	beq.n	800929c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009298:	617b      	str	r3, [r7, #20]
 800929a:	e001      	b.n	80092a0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800929c:	2300      	movs	r3, #0
 800929e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80092a0:	787b      	ldrb	r3, [r7, #1]
 80092a2:	059b      	lsls	r3, r3, #22
 80092a4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80092a8:	78bb      	ldrb	r3, [r7, #2]
 80092aa:	02db      	lsls	r3, r3, #11
 80092ac:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80092b0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80092b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80092b6:	049b      	lsls	r3, r3, #18
 80092b8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80092bc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80092be:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80092c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80092c4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80092ca:	78fb      	ldrb	r3, [r7, #3]
 80092cc:	0159      	lsls	r1, r3, #5
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	440b      	add	r3, r1
 80092d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092d6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80092dc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80092de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80092e2:	2b03      	cmp	r3, #3
 80092e4:	d003      	beq.n	80092ee <USB_HC_Init+0x21a>
 80092e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d10f      	bne.n	800930e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80092ee:	78fb      	ldrb	r3, [r7, #3]
 80092f0:	015a      	lsls	r2, r3, #5
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	4413      	add	r3, r2
 80092f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	78fa      	ldrb	r2, [r7, #3]
 80092fe:	0151      	lsls	r1, r2, #5
 8009300:	693a      	ldr	r2, [r7, #16]
 8009302:	440a      	add	r2, r1
 8009304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009308:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800930c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800930e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3720      	adds	r7, #32
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b08c      	sub	sp, #48	; 0x30
 800931c:	af02      	add	r7, sp, #8
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	4613      	mov	r3, r2
 8009324:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	785b      	ldrb	r3, [r3, #1]
 800932e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009334:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800933a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800933e:	2b00      	cmp	r3, #0
 8009340:	d02d      	beq.n	800939e <USB_HC_StartXfer+0x86>
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	791b      	ldrb	r3, [r3, #4]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d129      	bne.n	800939e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800934a:	79fb      	ldrb	r3, [r7, #7]
 800934c:	2b01      	cmp	r3, #1
 800934e:	d117      	bne.n	8009380 <USB_HC_StartXfer+0x68>
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	79db      	ldrb	r3, [r3, #7]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d003      	beq.n	8009360 <USB_HC_StartXfer+0x48>
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	79db      	ldrb	r3, [r3, #7]
 800935c:	2b02      	cmp	r3, #2
 800935e:	d10f      	bne.n	8009380 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	015a      	lsls	r2, r3, #5
 8009364:	6a3b      	ldr	r3, [r7, #32]
 8009366:	4413      	add	r3, r2
 8009368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	69fa      	ldr	r2, [r7, #28]
 8009370:	0151      	lsls	r1, r2, #5
 8009372:	6a3a      	ldr	r2, [r7, #32]
 8009374:	440a      	add	r2, r1
 8009376:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800937a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800937e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009380:	79fb      	ldrb	r3, [r7, #7]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d10b      	bne.n	800939e <USB_HC_StartXfer+0x86>
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	795b      	ldrb	r3, [r3, #5]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d107      	bne.n	800939e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	785b      	ldrb	r3, [r3, #1]
 8009392:	4619      	mov	r1, r3
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f000 fa0f 	bl	80097b8 <USB_DoPing>
      return HAL_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	e0f8      	b.n	8009590 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d018      	beq.n	80093d8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	695b      	ldr	r3, [r3, #20]
 80093aa:	68ba      	ldr	r2, [r7, #8]
 80093ac:	8912      	ldrh	r2, [r2, #8]
 80093ae:	4413      	add	r3, r2
 80093b0:	3b01      	subs	r3, #1
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	8912      	ldrh	r2, [r2, #8]
 80093b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80093ba:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80093bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80093be:	8b7b      	ldrh	r3, [r7, #26]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d90b      	bls.n	80093dc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80093c4:	8b7b      	ldrh	r3, [r7, #26]
 80093c6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80093c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	8912      	ldrh	r2, [r2, #8]
 80093ce:	fb03 f202 	mul.w	r2, r3, r2
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	611a      	str	r2, [r3, #16]
 80093d6:	e001      	b.n	80093dc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80093d8:	2301      	movs	r3, #1
 80093da:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	78db      	ldrb	r3, [r3, #3]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d007      	beq.n	80093f4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80093e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80093e6:	68ba      	ldr	r2, [r7, #8]
 80093e8:	8912      	ldrh	r2, [r2, #8]
 80093ea:	fb03 f202 	mul.w	r2, r3, r2
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	611a      	str	r2, [r3, #16]
 80093f2:	e003      	b.n	80093fc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	695a      	ldr	r2, [r3, #20]
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009404:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009406:	04d9      	lsls	r1, r3, #19
 8009408:	4b63      	ldr	r3, [pc, #396]	; (8009598 <USB_HC_StartXfer+0x280>)
 800940a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800940c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	7a9b      	ldrb	r3, [r3, #10]
 8009412:	075b      	lsls	r3, r3, #29
 8009414:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009418:	69f9      	ldr	r1, [r7, #28]
 800941a:	0148      	lsls	r0, r1, #5
 800941c:	6a39      	ldr	r1, [r7, #32]
 800941e:	4401      	add	r1, r0
 8009420:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009424:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009426:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009428:	79fb      	ldrb	r3, [r7, #7]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d009      	beq.n	8009442 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	68d9      	ldr	r1, [r3, #12]
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	015a      	lsls	r2, r3, #5
 8009436:	6a3b      	ldr	r3, [r7, #32]
 8009438:	4413      	add	r3, r2
 800943a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800943e:	460a      	mov	r2, r1
 8009440:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009442:	6a3b      	ldr	r3, [r7, #32]
 8009444:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	f003 0301 	and.w	r3, r3, #1
 800944e:	2b00      	cmp	r3, #0
 8009450:	bf0c      	ite	eq
 8009452:	2301      	moveq	r3, #1
 8009454:	2300      	movne	r3, #0
 8009456:	b2db      	uxtb	r3, r3
 8009458:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	015a      	lsls	r2, r3, #5
 800945e:	6a3b      	ldr	r3, [r7, #32]
 8009460:	4413      	add	r3, r2
 8009462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	69fa      	ldr	r2, [r7, #28]
 800946a:	0151      	lsls	r1, r2, #5
 800946c:	6a3a      	ldr	r2, [r7, #32]
 800946e:	440a      	add	r2, r1
 8009470:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009474:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009478:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	015a      	lsls	r2, r3, #5
 800947e:	6a3b      	ldr	r3, [r7, #32]
 8009480:	4413      	add	r3, r2
 8009482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	7e7b      	ldrb	r3, [r7, #25]
 800948a:	075b      	lsls	r3, r3, #29
 800948c:	69f9      	ldr	r1, [r7, #28]
 800948e:	0148      	lsls	r0, r1, #5
 8009490:	6a39      	ldr	r1, [r7, #32]
 8009492:	4401      	add	r1, r0
 8009494:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009498:	4313      	orrs	r3, r2
 800949a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	015a      	lsls	r2, r3, #5
 80094a0:	6a3b      	ldr	r3, [r7, #32]
 80094a2:	4413      	add	r3, r2
 80094a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80094b2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	78db      	ldrb	r3, [r3, #3]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d004      	beq.n	80094c6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094c2:	613b      	str	r3, [r7, #16]
 80094c4:	e003      	b.n	80094ce <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094cc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094d4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	015a      	lsls	r2, r3, #5
 80094da:	6a3b      	ldr	r3, [r7, #32]
 80094dc:	4413      	add	r3, r2
 80094de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094e2:	461a      	mov	r2, r3
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80094e8:	79fb      	ldrb	r3, [r7, #7]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d001      	beq.n	80094f2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80094ee:	2300      	movs	r3, #0
 80094f0:	e04e      	b.n	8009590 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	78db      	ldrb	r3, [r3, #3]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d149      	bne.n	800958e <USB_HC_StartXfer+0x276>
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	695b      	ldr	r3, [r3, #20]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d045      	beq.n	800958e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	79db      	ldrb	r3, [r3, #7]
 8009506:	2b03      	cmp	r3, #3
 8009508:	d830      	bhi.n	800956c <USB_HC_StartXfer+0x254>
 800950a:	a201      	add	r2, pc, #4	; (adr r2, 8009510 <USB_HC_StartXfer+0x1f8>)
 800950c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009510:	08009521 	.word	0x08009521
 8009514:	08009545 	.word	0x08009545
 8009518:	08009521 	.word	0x08009521
 800951c:	08009545 	.word	0x08009545
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	695b      	ldr	r3, [r3, #20]
 8009524:	3303      	adds	r3, #3
 8009526:	089b      	lsrs	r3, r3, #2
 8009528:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800952a:	8afa      	ldrh	r2, [r7, #22]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009530:	b29b      	uxth	r3, r3
 8009532:	429a      	cmp	r2, r3
 8009534:	d91c      	bls.n	8009570 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	f043 0220 	orr.w	r2, r3, #32
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	619a      	str	r2, [r3, #24]
        }
        break;
 8009542:	e015      	b.n	8009570 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	695b      	ldr	r3, [r3, #20]
 8009548:	3303      	adds	r3, #3
 800954a:	089b      	lsrs	r3, r3, #2
 800954c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800954e:	8afa      	ldrh	r2, [r7, #22]
 8009550:	6a3b      	ldr	r3, [r7, #32]
 8009552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	b29b      	uxth	r3, r3
 800955a:	429a      	cmp	r2, r3
 800955c:	d90a      	bls.n	8009574 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	619a      	str	r2, [r3, #24]
        }
        break;
 800956a:	e003      	b.n	8009574 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800956c:	bf00      	nop
 800956e:	e002      	b.n	8009576 <USB_HC_StartXfer+0x25e>
        break;
 8009570:	bf00      	nop
 8009572:	e000      	b.n	8009576 <USB_HC_StartXfer+0x25e>
        break;
 8009574:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	68d9      	ldr	r1, [r3, #12]
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	785a      	ldrb	r2, [r3, #1]
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	695b      	ldr	r3, [r3, #20]
 8009582:	b29b      	uxth	r3, r3
 8009584:	2000      	movs	r0, #0
 8009586:	9000      	str	r0, [sp, #0]
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f7ff fb31 	bl	8008bf0 <USB_WritePacket>
  }

  return HAL_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3728      	adds	r7, #40	; 0x28
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	1ff80000 	.word	0x1ff80000

0800959c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095ae:	695b      	ldr	r3, [r3, #20]
 80095b0:	b29b      	uxth	r3, r3
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3714      	adds	r7, #20
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr

080095be <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80095be:	b480      	push	{r7}
 80095c0:	b089      	sub	sp, #36	; 0x24
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
 80095c6:	460b      	mov	r3, r1
 80095c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80095ce:	78fb      	ldrb	r3, [r7, #3]
 80095d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80095d2:	2300      	movs	r3, #0
 80095d4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	015a      	lsls	r2, r3, #5
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	4413      	add	r3, r2
 80095de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	0c9b      	lsrs	r3, r3, #18
 80095e6:	f003 0303 	and.w	r3, r3, #3
 80095ea:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	015a      	lsls	r2, r3, #5
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	0fdb      	lsrs	r3, r3, #31
 80095fc:	f003 0301 	and.w	r3, r3, #1
 8009600:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	f003 0320 	and.w	r3, r3, #32
 800960a:	2b20      	cmp	r3, #32
 800960c:	d104      	bne.n	8009618 <USB_HC_Halt+0x5a>
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d101      	bne.n	8009618 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009614:	2300      	movs	r3, #0
 8009616:	e0c8      	b.n	80097aa <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d002      	beq.n	8009624 <USB_HC_Halt+0x66>
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	2b02      	cmp	r3, #2
 8009622:	d163      	bne.n	80096ec <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	015a      	lsls	r2, r3, #5
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	4413      	add	r3, r2
 800962c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	69ba      	ldr	r2, [r7, #24]
 8009634:	0151      	lsls	r1, r2, #5
 8009636:	69fa      	ldr	r2, [r7, #28]
 8009638:	440a      	add	r2, r1
 800963a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800963e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009642:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	f003 0320 	and.w	r3, r3, #32
 800964c:	2b00      	cmp	r3, #0
 800964e:	f040 80ab 	bne.w	80097a8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009656:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800965a:	2b00      	cmp	r3, #0
 800965c:	d133      	bne.n	80096c6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	015a      	lsls	r2, r3, #5
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	4413      	add	r3, r2
 8009666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	69ba      	ldr	r2, [r7, #24]
 800966e:	0151      	lsls	r1, r2, #5
 8009670:	69fa      	ldr	r2, [r7, #28]
 8009672:	440a      	add	r2, r1
 8009674:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009678:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800967c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	015a      	lsls	r2, r3, #5
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	4413      	add	r3, r2
 8009686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	69ba      	ldr	r2, [r7, #24]
 800968e:	0151      	lsls	r1, r2, #5
 8009690:	69fa      	ldr	r2, [r7, #28]
 8009692:	440a      	add	r2, r1
 8009694:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009698:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800969c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	3301      	adds	r3, #1
 80096a2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096aa:	d81d      	bhi.n	80096e8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	015a      	lsls	r2, r3, #5
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	4413      	add	r3, r2
 80096b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096c2:	d0ec      	beq.n	800969e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80096c4:	e070      	b.n	80097a8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	015a      	lsls	r2, r3, #5
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	4413      	add	r3, r2
 80096ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	69ba      	ldr	r2, [r7, #24]
 80096d6:	0151      	lsls	r1, r2, #5
 80096d8:	69fa      	ldr	r2, [r7, #28]
 80096da:	440a      	add	r2, r1
 80096dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096e4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80096e6:	e05f      	b.n	80097a8 <USB_HC_Halt+0x1ea>
            break;
 80096e8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80096ea:	e05d      	b.n	80097a8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	015a      	lsls	r2, r3, #5
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	4413      	add	r3, r2
 80096f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	69ba      	ldr	r2, [r7, #24]
 80096fc:	0151      	lsls	r1, r2, #5
 80096fe:	69fa      	ldr	r2, [r7, #28]
 8009700:	440a      	add	r2, r1
 8009702:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009706:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800970a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009718:	2b00      	cmp	r3, #0
 800971a:	d133      	bne.n	8009784 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	015a      	lsls	r2, r3, #5
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	4413      	add	r3, r2
 8009724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	69ba      	ldr	r2, [r7, #24]
 800972c:	0151      	lsls	r1, r2, #5
 800972e:	69fa      	ldr	r2, [r7, #28]
 8009730:	440a      	add	r2, r1
 8009732:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009736:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800973a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	015a      	lsls	r2, r3, #5
 8009740:	69fb      	ldr	r3, [r7, #28]
 8009742:	4413      	add	r3, r2
 8009744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	69ba      	ldr	r2, [r7, #24]
 800974c:	0151      	lsls	r1, r2, #5
 800974e:	69fa      	ldr	r2, [r7, #28]
 8009750:	440a      	add	r2, r1
 8009752:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009756:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800975a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	3301      	adds	r3, #1
 8009760:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009768:	d81d      	bhi.n	80097a6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	015a      	lsls	r2, r3, #5
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	4413      	add	r3, r2
 8009772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800977c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009780:	d0ec      	beq.n	800975c <USB_HC_Halt+0x19e>
 8009782:	e011      	b.n	80097a8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	015a      	lsls	r2, r3, #5
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	4413      	add	r3, r2
 800978c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	69ba      	ldr	r2, [r7, #24]
 8009794:	0151      	lsls	r1, r2, #5
 8009796:	69fa      	ldr	r2, [r7, #28]
 8009798:	440a      	add	r2, r1
 800979a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800979e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80097a2:	6013      	str	r3, [r2, #0]
 80097a4:	e000      	b.n	80097a8 <USB_HC_Halt+0x1ea>
          break;
 80097a6:	bf00      	nop
    }
  }

  return HAL_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3724      	adds	r7, #36	; 0x24
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
	...

080097b8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b087      	sub	sp, #28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	460b      	mov	r3, r1
 80097c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80097c8:	78fb      	ldrb	r3, [r7, #3]
 80097ca:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80097cc:	2301      	movs	r3, #1
 80097ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	04da      	lsls	r2, r3, #19
 80097d4:	4b15      	ldr	r3, [pc, #84]	; (800982c <USB_DoPing+0x74>)
 80097d6:	4013      	ands	r3, r2
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	0151      	lsls	r1, r2, #5
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	440a      	add	r2, r1
 80097e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80097e8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	015a      	lsls	r2, r3, #5
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	4413      	add	r3, r2
 80097f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009800:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009808:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	015a      	lsls	r2, r3, #5
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	4413      	add	r3, r2
 8009812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009816:	461a      	mov	r2, r3
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	371c      	adds	r7, #28
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	1ff80000 	.word	0x1ff80000

08009830 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b088      	sub	sp, #32
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009840:	2300      	movs	r3, #0
 8009842:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f7ff f911 	bl	8008a6c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800984a:	2110      	movs	r1, #16
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7ff f96b 	bl	8008b28 <USB_FlushTxFifo>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d001      	beq.n	800985c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f7ff f997 	bl	8008b90 <USB_FlushRxFifo>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d001      	beq.n	800986c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800986c:	2300      	movs	r3, #0
 800986e:	61bb      	str	r3, [r7, #24]
 8009870:	e01f      	b.n	80098b2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	015a      	lsls	r2, r3, #5
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	4413      	add	r3, r2
 800987a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009888:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009890:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009898:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	015a      	lsls	r2, r3, #5
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	4413      	add	r3, r2
 80098a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098a6:	461a      	mov	r2, r3
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	3301      	adds	r3, #1
 80098b0:	61bb      	str	r3, [r7, #24]
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	2b0f      	cmp	r3, #15
 80098b6:	d9dc      	bls.n	8009872 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80098b8:	2300      	movs	r3, #0
 80098ba:	61bb      	str	r3, [r7, #24]
 80098bc:	e034      	b.n	8009928 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	015a      	lsls	r2, r3, #5
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	4413      	add	r3, r2
 80098c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80098e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	015a      	lsls	r2, r3, #5
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	4413      	add	r3, r2
 80098ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098f2:	461a      	mov	r2, r3
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	3301      	adds	r3, #1
 80098fc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009904:	d80c      	bhi.n	8009920 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	015a      	lsls	r2, r3, #5
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	4413      	add	r3, r2
 800990e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800991c:	d0ec      	beq.n	80098f8 <USB_StopHost+0xc8>
 800991e:	e000      	b.n	8009922 <USB_StopHost+0xf2>
        break;
 8009920:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	3301      	adds	r3, #1
 8009926:	61bb      	str	r3, [r7, #24]
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	2b0f      	cmp	r3, #15
 800992c:	d9c7      	bls.n	80098be <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009934:	461a      	mov	r2, r3
 8009936:	f04f 33ff 	mov.w	r3, #4294967295
 800993a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f04f 32ff 	mov.w	r2, #4294967295
 8009942:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f7ff f880 	bl	8008a4a <USB_EnableGlobalInt>

  return ret;
 800994a:	7ffb      	ldrb	r3, [r7, #31]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3720      	adds	r7, #32
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8009958:	4904      	ldr	r1, [pc, #16]	; (800996c <MX_FATFS_Init+0x18>)
 800995a:	4805      	ldr	r0, [pc, #20]	; (8009970 <MX_FATFS_Init+0x1c>)
 800995c:	f005 fc98 	bl	800f290 <FATFS_LinkDriver>
 8009960:	4603      	mov	r3, r0
 8009962:	461a      	mov	r2, r3
 8009964:	4b03      	ldr	r3, [pc, #12]	; (8009974 <MX_FATFS_Init+0x20>)
 8009966:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009968:	bf00      	nop
 800996a:	bd80      	pop	{r7, pc}
 800996c:	20001518 	.word	0x20001518
 8009970:	0800fc58 	.word	0x0800fc58
 8009974:	20001514 	.word	0x20001514

08009978 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009978:	b480      	push	{r7}
 800997a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800997c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800997e:	4618      	mov	r0, r3
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	4603      	mov	r3, r0
 8009990:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	4603      	mov	r3, r0
 80099a8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80099ae:	79fb      	ldrb	r3, [r7, #7]
 80099b0:	4619      	mov	r1, r3
 80099b2:	4808      	ldr	r0, [pc, #32]	; (80099d4 <USBH_status+0x34>)
 80099b4:	f000 fe32 	bl	800a61c <USBH_MSC_UnitIsReady>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d002      	beq.n	80099c4 <USBH_status+0x24>
  {
    res = RES_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	73fb      	strb	r3, [r7, #15]
 80099c2:	e001      	b.n	80099c8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	20001780 	.word	0x20001780

080099d8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b094      	sub	sp, #80	; 0x50
 80099dc:	af02      	add	r7, sp, #8
 80099de:	60b9      	str	r1, [r7, #8]
 80099e0:	607a      	str	r2, [r7, #4]
 80099e2:	603b      	str	r3, [r7, #0]
 80099e4:	4603      	mov	r3, r0
 80099e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80099e8:	2301      	movs	r3, #1
 80099ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80099ee:	7bf9      	ldrb	r1, [r7, #15]
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	4813      	ldr	r0, [pc, #76]	; (8009a48 <USBH_read+0x70>)
 80099fa:	f000 fe59 	bl	800a6b0 <USBH_MSC_Read>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d103      	bne.n	8009a0c <USBH_read+0x34>
  {
    res = RES_OK;
 8009a04:	2300      	movs	r3, #0
 8009a06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009a0a:	e017      	b.n	8009a3c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009a0c:	f107 0210 	add.w	r2, r7, #16
 8009a10:	7bfb      	ldrb	r3, [r7, #15]
 8009a12:	4619      	mov	r1, r3
 8009a14:	480c      	ldr	r0, [pc, #48]	; (8009a48 <USBH_read+0x70>)
 8009a16:	f000 fe27 	bl	800a668 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009a1a:	7f7b      	ldrb	r3, [r7, #29]
 8009a1c:	2b3a      	cmp	r3, #58	; 0x3a
 8009a1e:	d005      	beq.n	8009a2c <USBH_read+0x54>
 8009a20:	2b3a      	cmp	r3, #58	; 0x3a
 8009a22:	dc07      	bgt.n	8009a34 <USBH_read+0x5c>
 8009a24:	2b04      	cmp	r3, #4
 8009a26:	d001      	beq.n	8009a2c <USBH_read+0x54>
 8009a28:	2b28      	cmp	r3, #40	; 0x28
 8009a2a:	d103      	bne.n	8009a34 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009a32:	e003      	b.n	8009a3c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009a3a:	bf00      	nop
    }
  }

  return res;
 8009a3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3748      	adds	r7, #72	; 0x48
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	20001780 	.word	0x20001780

08009a4c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b094      	sub	sp, #80	; 0x50
 8009a50:	af02      	add	r7, sp, #8
 8009a52:	60b9      	str	r1, [r7, #8]
 8009a54:	607a      	str	r2, [r7, #4]
 8009a56:	603b      	str	r3, [r7, #0]
 8009a58:	4603      	mov	r3, r0
 8009a5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8009a62:	7bf9      	ldrb	r1, [r7, #15]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	9300      	str	r3, [sp, #0]
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	4817      	ldr	r0, [pc, #92]	; (8009acc <USBH_write+0x80>)
 8009a6e:	f000 fe88 	bl	800a782 <USBH_MSC_Write>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d103      	bne.n	8009a80 <USBH_write+0x34>
  {
    res = RES_OK;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009a7e:	e01f      	b.n	8009ac0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009a80:	f107 0210 	add.w	r2, r7, #16
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
 8009a86:	4619      	mov	r1, r3
 8009a88:	4810      	ldr	r0, [pc, #64]	; (8009acc <USBH_write+0x80>)
 8009a8a:	f000 fded 	bl	800a668 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009a8e:	7f7b      	ldrb	r3, [r7, #29]
 8009a90:	2b3a      	cmp	r3, #58	; 0x3a
 8009a92:	d00d      	beq.n	8009ab0 <USBH_write+0x64>
 8009a94:	2b3a      	cmp	r3, #58	; 0x3a
 8009a96:	dc0f      	bgt.n	8009ab8 <USBH_write+0x6c>
 8009a98:	2b28      	cmp	r3, #40	; 0x28
 8009a9a:	d009      	beq.n	8009ab0 <USBH_write+0x64>
 8009a9c:	2b28      	cmp	r3, #40	; 0x28
 8009a9e:	dc0b      	bgt.n	8009ab8 <USBH_write+0x6c>
 8009aa0:	2b04      	cmp	r3, #4
 8009aa2:	d005      	beq.n	8009ab0 <USBH_write+0x64>
 8009aa4:	2b27      	cmp	r3, #39	; 0x27
 8009aa6:	d107      	bne.n	8009ab8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009aae:	e007      	b.n	8009ac0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009ab6:	e003      	b.n	8009ac0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009abe:	bf00      	nop
    }
  }

  return res;
 8009ac0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3748      	adds	r7, #72	; 0x48
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	20001780 	.word	0x20001780

08009ad0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b090      	sub	sp, #64	; 0x40
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	603a      	str	r2, [r7, #0]
 8009ada:	71fb      	strb	r3, [r7, #7]
 8009adc:	460b      	mov	r3, r1
 8009ade:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8009ae6:	79bb      	ldrb	r3, [r7, #6]
 8009ae8:	2b03      	cmp	r3, #3
 8009aea:	d852      	bhi.n	8009b92 <USBH_ioctl+0xc2>
 8009aec:	a201      	add	r2, pc, #4	; (adr r2, 8009af4 <USBH_ioctl+0x24>)
 8009aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af2:	bf00      	nop
 8009af4:	08009b05 	.word	0x08009b05
 8009af8:	08009b0d 	.word	0x08009b0d
 8009afc:	08009b37 	.word	0x08009b37
 8009b00:	08009b63 	.word	0x08009b63
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009b0a:	e045      	b.n	8009b98 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009b0c:	f107 0208 	add.w	r2, r7, #8
 8009b10:	79fb      	ldrb	r3, [r7, #7]
 8009b12:	4619      	mov	r1, r3
 8009b14:	4823      	ldr	r0, [pc, #140]	; (8009ba4 <USBH_ioctl+0xd4>)
 8009b16:	f000 fda7 	bl	800a668 <USBH_MSC_GetLUNInfo>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d106      	bne.n	8009b2e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009b26:	2300      	movs	r3, #0
 8009b28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009b2c:	e034      	b.n	8009b98 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009b34:	e030      	b.n	8009b98 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009b36:	f107 0208 	add.w	r2, r7, #8
 8009b3a:	79fb      	ldrb	r3, [r7, #7]
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	4819      	ldr	r0, [pc, #100]	; (8009ba4 <USBH_ioctl+0xd4>)
 8009b40:	f000 fd92 	bl	800a668 <USBH_MSC_GetLUNInfo>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d107      	bne.n	8009b5a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8009b4a:	8a3b      	ldrh	r3, [r7, #16]
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009b52:	2300      	movs	r3, #0
 8009b54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009b58:	e01e      	b.n	8009b98 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009b60:	e01a      	b.n	8009b98 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009b62:	f107 0208 	add.w	r2, r7, #8
 8009b66:	79fb      	ldrb	r3, [r7, #7]
 8009b68:	4619      	mov	r1, r3
 8009b6a:	480e      	ldr	r0, [pc, #56]	; (8009ba4 <USBH_ioctl+0xd4>)
 8009b6c:	f000 fd7c 	bl	800a668 <USBH_MSC_GetLUNInfo>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d109      	bne.n	8009b8a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8009b76:	8a3b      	ldrh	r3, [r7, #16]
 8009b78:	0a5b      	lsrs	r3, r3, #9
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009b88:	e006      	b.n	8009b98 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009b90:	e002      	b.n	8009b98 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8009b92:	2304      	movs	r3, #4
 8009b94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8009b98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3740      	adds	r7, #64	; 0x40
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	20001780 	.word	0x20001780

08009ba8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009ba8:	b590      	push	{r4, r7, lr}
 8009baa:	b089      	sub	sp, #36	; 0x24
 8009bac:	af04      	add	r7, sp, #16
 8009bae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bb6:	7919      	ldrb	r1, [r3, #4]
 8009bb8:	2350      	movs	r3, #80	; 0x50
 8009bba:	2206      	movs	r2, #6
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f001 fc6b 	bl	800b498 <USBH_FindInterface>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8009bc6:	7bfb      	ldrb	r3, [r7, #15]
 8009bc8:	2bff      	cmp	r3, #255	; 0xff
 8009bca:	d002      	beq.n	8009bd2 <USBH_MSC_InterfaceInit+0x2a>
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d901      	bls.n	8009bd6 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009bd2:	2302      	movs	r3, #2
 8009bd4:	e106      	b.n	8009de4 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8009bd6:	7bfb      	ldrb	r3, [r7, #15]
 8009bd8:	4619      	mov	r1, r3
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f001 fc40 	bl	800b460 <USBH_SelectInterface>
 8009be0:	4603      	mov	r3, r0
 8009be2:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009be4:	7bbb      	ldrb	r3, [r7, #14]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d001      	beq.n	8009bee <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8009bea:	2302      	movs	r3, #2
 8009bec:	e0fa      	b.n	8009de4 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009bf4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009bf8:	f005 fe96 	bl	800f928 <malloc>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c06:	69db      	ldr	r3, [r3, #28]
 8009c08:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d101      	bne.n	8009c14 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8009c10:	2302      	movs	r3, #2
 8009c12:	e0e7      	b.n	8009de4 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8009c14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c18:	2100      	movs	r1, #0
 8009c1a:	68b8      	ldr	r0, [r7, #8]
 8009c1c:	f005 fea2 	bl	800f964 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	211a      	movs	r1, #26
 8009c26:	fb01 f303 	mul.w	r3, r1, r3
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	b25b      	sxtb	r3, r3
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	da16      	bge.n	8009c66 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	211a      	movs	r1, #26
 8009c3e:	fb01 f303 	mul.w	r3, r1, r3
 8009c42:	4413      	add	r3, r2
 8009c44:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009c48:	781a      	ldrb	r2, [r3, #0]
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009c4e:	7bfb      	ldrb	r3, [r7, #15]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	211a      	movs	r1, #26
 8009c54:	fb01 f303 	mul.w	r3, r1, r3
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009c5e:	881a      	ldrh	r2, [r3, #0]
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	815a      	strh	r2, [r3, #10]
 8009c64:	e015      	b.n	8009c92 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009c66:	7bfb      	ldrb	r3, [r7, #15]
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	211a      	movs	r1, #26
 8009c6c:	fb01 f303 	mul.w	r3, r1, r3
 8009c70:	4413      	add	r3, r2
 8009c72:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009c76:	781a      	ldrb	r2, [r3, #0]
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009c7c:	7bfb      	ldrb	r3, [r7, #15]
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	211a      	movs	r1, #26
 8009c82:	fb01 f303 	mul.w	r3, r1, r3
 8009c86:	4413      	add	r3, r2
 8009c88:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009c8c:	881a      	ldrh	r2, [r3, #0]
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009c92:	7bfb      	ldrb	r3, [r7, #15]
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	211a      	movs	r1, #26
 8009c98:	fb01 f303 	mul.w	r3, r1, r3
 8009c9c:	4413      	add	r3, r2
 8009c9e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	b25b      	sxtb	r3, r3
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	da16      	bge.n	8009cd8 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009caa:	7bfb      	ldrb	r3, [r7, #15]
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	211a      	movs	r1, #26
 8009cb0:	fb01 f303 	mul.w	r3, r1, r3
 8009cb4:	4413      	add	r3, r2
 8009cb6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009cba:	781a      	ldrb	r2, [r3, #0]
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	211a      	movs	r1, #26
 8009cc6:	fb01 f303 	mul.w	r3, r1, r3
 8009cca:	4413      	add	r3, r2
 8009ccc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009cd0:	881a      	ldrh	r2, [r3, #0]
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	815a      	strh	r2, [r3, #10]
 8009cd6:	e015      	b.n	8009d04 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009cd8:	7bfb      	ldrb	r3, [r7, #15]
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	211a      	movs	r1, #26
 8009cde:	fb01 f303 	mul.w	r3, r1, r3
 8009ce2:	4413      	add	r3, r2
 8009ce4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009ce8:	781a      	ldrb	r2, [r3, #0]
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009cee:	7bfb      	ldrb	r3, [r7, #15]
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	211a      	movs	r1, #26
 8009cf4:	fb01 f303 	mul.w	r3, r1, r3
 8009cf8:	4413      	add	r3, r2
 8009cfa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009cfe:	881a      	ldrh	r2, [r3, #0]
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	2200      	movs	r2, #0
 8009d08:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	2200      	movs	r2, #0
 8009d14:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	799b      	ldrb	r3, [r3, #6]
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f002 fed6 	bl	800cace <USBH_AllocPipe>
 8009d22:	4603      	mov	r3, r0
 8009d24:	461a      	mov	r2, r3
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	79db      	ldrb	r3, [r3, #7]
 8009d2e:	4619      	mov	r1, r3
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f002 fecc 	bl	800cace <USBH_AllocPipe>
 8009d36:	4603      	mov	r3, r0
 8009d38:	461a      	mov	r2, r3
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 fdc4 	bl	800a8cc <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	799b      	ldrb	r3, [r3, #6]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d01e      	beq.n	8009d8a <USBH_MSC_InterfaceInit+0x1e2>
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	891b      	ldrh	r3, [r3, #8]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d01a      	beq.n	8009d8a <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	7959      	ldrb	r1, [r3, #5]
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	7998      	ldrb	r0, [r3, #6]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	8912      	ldrh	r2, [r2, #8]
 8009d6c:	9202      	str	r2, [sp, #8]
 8009d6e:	2202      	movs	r2, #2
 8009d70:	9201      	str	r2, [sp, #4]
 8009d72:	9300      	str	r3, [sp, #0]
 8009d74:	4623      	mov	r3, r4
 8009d76:	4602      	mov	r2, r0
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f002 fe79 	bl	800ca70 <USBH_OpenPipe>
 8009d7e:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	79db      	ldrb	r3, [r3, #7]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d02c      	beq.n	8009de2 <USBH_MSC_InterfaceInit+0x23a>
 8009d88:	e001      	b.n	8009d8e <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8009d8a:	2303      	movs	r3, #3
 8009d8c:	e02a      	b.n	8009de4 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	895b      	ldrh	r3, [r3, #10]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d025      	beq.n	8009de2 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	7919      	ldrb	r1, [r3, #4]
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	79d8      	ldrb	r0, [r3, #7]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009daa:	68ba      	ldr	r2, [r7, #8]
 8009dac:	8952      	ldrh	r2, [r2, #10]
 8009dae:	9202      	str	r2, [sp, #8]
 8009db0:	2202      	movs	r2, #2
 8009db2:	9201      	str	r2, [sp, #4]
 8009db4:	9300      	str	r3, [sp, #0]
 8009db6:	4623      	mov	r3, r4
 8009db8:	4602      	mov	r2, r0
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f002 fe58 	bl	800ca70 <USBH_OpenPipe>
 8009dc0:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	791b      	ldrb	r3, [r3, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	4619      	mov	r1, r3
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f005 fceb 	bl	800f7a6 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	795b      	ldrb	r3, [r3, #5]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f005 fce4 	bl	800f7a6 <USBH_LL_SetToggle>

  return USBH_OK;
 8009dde:	2300      	movs	r3, #0
 8009de0:	e000      	b.n	8009de4 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8009de2:	2303      	movs	r3, #3
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3714      	adds	r7, #20
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd90      	pop	{r4, r7, pc}

08009dec <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dfa:	69db      	ldr	r3, [r3, #28]
 8009dfc:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	795b      	ldrb	r3, [r3, #5]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00e      	beq.n	8009e24 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	795b      	ldrb	r3, [r3, #5]
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f002 fe4e 	bl	800caae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	795b      	ldrb	r3, [r3, #5]
 8009e16:	4619      	mov	r1, r3
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f002 fe79 	bl	800cb10 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	791b      	ldrb	r3, [r3, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00e      	beq.n	8009e4a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	791b      	ldrb	r3, [r3, #4]
 8009e30:	4619      	mov	r1, r3
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f002 fe3b 	bl	800caae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	791b      	ldrb	r3, [r3, #4]
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f002 fe66 	bl	800cb10 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2200      	movs	r2, #0
 8009e48:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e50:	69db      	ldr	r3, [r3, #28]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d00b      	beq.n	8009e6e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e5c:	69db      	ldr	r3, [r3, #28]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f005 fd6a 	bl	800f938 <free>
    phost->pActiveClass->pData = 0U;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e86:	69db      	ldr	r3, [r3, #28]
 8009e88:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	7b9b      	ldrb	r3, [r3, #14]
 8009e92:	2b03      	cmp	r3, #3
 8009e94:	d041      	beq.n	8009f1a <USBH_MSC_ClassRequest+0xa2>
 8009e96:	2b03      	cmp	r3, #3
 8009e98:	dc4b      	bgt.n	8009f32 <USBH_MSC_ClassRequest+0xba>
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d001      	beq.n	8009ea2 <USBH_MSC_ClassRequest+0x2a>
 8009e9e:	2b02      	cmp	r3, #2
 8009ea0:	d147      	bne.n	8009f32 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fcf1 	bl	800a88e <USBH_MSC_BOT_REQ_GetMaxLUN>
 8009eac:	4603      	mov	r3, r0
 8009eae:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8009eb0:	7bfb      	ldrb	r3, [r7, #15]
 8009eb2:	2b03      	cmp	r3, #3
 8009eb4:	d104      	bne.n	8009ec0 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8009ec0:	7bfb      	ldrb	r3, [r7, #15]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d137      	bne.n	8009f36 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	2b02      	cmp	r3, #2
 8009ecc:	d804      	bhi.n	8009ed8 <USBH_MSC_ClassRequest+0x60>
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	b2da      	uxtb	r2, r3
 8009ed6:	e000      	b.n	8009eda <USBH_MSC_ClassRequest+0x62>
 8009ed8:	2202      	movs	r2, #2
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009ede:	2300      	movs	r3, #0
 8009ee0:	73bb      	strb	r3, [r7, #14]
 8009ee2:	e014      	b.n	8009f0e <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009ee4:	7bbb      	ldrb	r3, [r7, #14]
 8009ee6:	68ba      	ldr	r2, [r7, #8]
 8009ee8:	2134      	movs	r1, #52	; 0x34
 8009eea:	fb01 f303 	mul.w	r3, r1, r3
 8009eee:	4413      	add	r3, r2
 8009ef0:	3392      	adds	r3, #146	; 0x92
 8009ef2:	2202      	movs	r2, #2
 8009ef4:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8009ef6:	7bbb      	ldrb	r3, [r7, #14]
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	2134      	movs	r1, #52	; 0x34
 8009efc:	fb01 f303 	mul.w	r3, r1, r3
 8009f00:	4413      	add	r3, r2
 8009f02:	33c1      	adds	r3, #193	; 0xc1
 8009f04:	2200      	movs	r2, #0
 8009f06:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009f08:	7bbb      	ldrb	r3, [r7, #14]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	73bb      	strb	r3, [r7, #14]
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	7bba      	ldrb	r2, [r7, #14]
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d3e5      	bcc.n	8009ee4 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8009f18:	e00d      	b.n	8009f36 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f002 f888 	bl	800c032 <USBH_ClrFeature>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d108      	bne.n	8009f3a <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	7bda      	ldrb	r2, [r3, #15]
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	739a      	strb	r2, [r3, #14]
      }
      break;
 8009f30:	e003      	b.n	8009f3a <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8009f32:	bf00      	nop
 8009f34:	e002      	b.n	8009f3c <USBH_MSC_ClassRequest+0xc4>
      break;
 8009f36:	bf00      	nop
 8009f38:	e000      	b.n	8009f3c <USBH_MSC_ClassRequest+0xc4>
      break;
 8009f3a:	bf00      	nop
  }

  return status;
 8009f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
	...

08009f48 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f56:	69db      	ldr	r3, [r3, #28]
 8009f58:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8009f62:	2301      	movs	r3, #1
 8009f64:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	7b1b      	ldrb	r3, [r3, #12]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d003      	beq.n	8009f76 <USBH_MSC_Process+0x2e>
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	f000 8271 	beq.w	800a456 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009f74:	e272      	b.n	800a45c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	429a      	cmp	r2, r3
 8009f84:	f080 824f 	bcs.w	800a426 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f8e:	4619      	mov	r1, r3
 8009f90:	693a      	ldr	r2, [r7, #16]
 8009f92:	2334      	movs	r3, #52	; 0x34
 8009f94:	fb01 f303 	mul.w	r3, r1, r3
 8009f98:	4413      	add	r3, r2
 8009f9a:	3391      	adds	r3, #145	; 0x91
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	693a      	ldr	r2, [r7, #16]
 8009faa:	2334      	movs	r3, #52	; 0x34
 8009fac:	fb01 f303 	mul.w	r3, r1, r3
 8009fb0:	4413      	add	r3, r2
 8009fb2:	3390      	adds	r3, #144	; 0x90
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	2b08      	cmp	r3, #8
 8009fb8:	f200 8243 	bhi.w	800a442 <USBH_MSC_Process+0x4fa>
 8009fbc:	a201      	add	r2, pc, #4	; (adr r2, 8009fc4 <USBH_MSC_Process+0x7c>)
 8009fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc2:	bf00      	nop
 8009fc4:	08009fe9 	.word	0x08009fe9
 8009fc8:	0800a443 	.word	0x0800a443
 8009fcc:	0800a0b1 	.word	0x0800a0b1
 8009fd0:	0800a235 	.word	0x0800a235
 8009fd4:	0800a00f 	.word	0x0800a00f
 8009fd8:	0800a301 	.word	0x0800a301
 8009fdc:	0800a443 	.word	0x0800a443
 8009fe0:	0800a443 	.word	0x0800a443
 8009fe4:	0800a415 	.word	0x0800a415
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fee:	4619      	mov	r1, r3
 8009ff0:	693a      	ldr	r2, [r7, #16]
 8009ff2:	2334      	movs	r3, #52	; 0x34
 8009ff4:	fb01 f303 	mul.w	r3, r1, r3
 8009ff8:	4413      	add	r3, r2
 8009ffa:	3390      	adds	r3, #144	; 0x90
 8009ffc:	2204      	movs	r2, #4
 8009ffe:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800a00c:	e222      	b.n	800a454 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a014:	b2d9      	uxtb	r1, r3
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a01c:	461a      	mov	r2, r3
 800a01e:	2334      	movs	r3, #52	; 0x34
 800a020:	fb02 f303 	mul.w	r3, r2, r3
 800a024:	3398      	adds	r3, #152	; 0x98
 800a026:	693a      	ldr	r2, [r7, #16]
 800a028:	4413      	add	r3, r2
 800a02a:	3307      	adds	r3, #7
 800a02c:	461a      	mov	r2, r3
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 ff6a 	bl	800af08 <USBH_MSC_SCSI_Inquiry>
 800a034:	4603      	mov	r3, r0
 800a036:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a038:	7bfb      	ldrb	r3, [r7, #15]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d10b      	bne.n	800a056 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a044:	4619      	mov	r1, r3
 800a046:	693a      	ldr	r2, [r7, #16]
 800a048:	2334      	movs	r3, #52	; 0x34
 800a04a:	fb01 f303 	mul.w	r3, r1, r3
 800a04e:	4413      	add	r3, r2
 800a050:	3390      	adds	r3, #144	; 0x90
 800a052:	2202      	movs	r2, #2
 800a054:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800a056:	7bfb      	ldrb	r3, [r7, #15]
 800a058:	2b02      	cmp	r3, #2
 800a05a:	d10c      	bne.n	800a076 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a062:	4619      	mov	r1, r3
 800a064:	693a      	ldr	r2, [r7, #16]
 800a066:	2334      	movs	r3, #52	; 0x34
 800a068:	fb01 f303 	mul.w	r3, r1, r3
 800a06c:	4413      	add	r3, r2
 800a06e:	3390      	adds	r3, #144	; 0x90
 800a070:	2205      	movs	r2, #5
 800a072:	701a      	strb	r2, [r3, #0]
            break;
 800a074:	e1e7      	b.n	800a446 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a076:	7bfb      	ldrb	r3, [r7, #15]
 800a078:	2b04      	cmp	r3, #4
 800a07a:	f040 81e4 	bne.w	800a446 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a084:	4619      	mov	r1, r3
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	2334      	movs	r3, #52	; 0x34
 800a08a:	fb01 f303 	mul.w	r3, r1, r3
 800a08e:	4413      	add	r3, r2
 800a090:	3390      	adds	r3, #144	; 0x90
 800a092:	2201      	movs	r2, #1
 800a094:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a09c:	4619      	mov	r1, r3
 800a09e:	693a      	ldr	r2, [r7, #16]
 800a0a0:	2334      	movs	r3, #52	; 0x34
 800a0a2:	fb01 f303 	mul.w	r3, r1, r3
 800a0a6:	4413      	add	r3, r2
 800a0a8:	3391      	adds	r3, #145	; 0x91
 800a0aa:	2202      	movs	r2, #2
 800a0ac:	701a      	strb	r2, [r3, #0]
            break;
 800a0ae:	e1ca      	b.n	800a446 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 fe66 	bl	800ad8c <USBH_MSC_SCSI_TestUnitReady>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800a0c4:	7bbb      	ldrb	r3, [r7, #14]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d149      	bne.n	800a15e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	693a      	ldr	r2, [r7, #16]
 800a0d4:	2334      	movs	r3, #52	; 0x34
 800a0d6:	fb01 f303 	mul.w	r3, r1, r3
 800a0da:	4413      	add	r3, r2
 800a0dc:	3392      	adds	r3, #146	; 0x92
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d00c      	beq.n	800a0fe <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	693a      	ldr	r2, [r7, #16]
 800a0ee:	2334      	movs	r3, #52	; 0x34
 800a0f0:	fb01 f303 	mul.w	r3, r1, r3
 800a0f4:	4413      	add	r3, r2
 800a0f6:	33c1      	adds	r3, #193	; 0xc1
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	701a      	strb	r2, [r3, #0]
 800a0fc:	e00b      	b.n	800a116 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a104:	4619      	mov	r1, r3
 800a106:	693a      	ldr	r2, [r7, #16]
 800a108:	2334      	movs	r3, #52	; 0x34
 800a10a:	fb01 f303 	mul.w	r3, r1, r3
 800a10e:	4413      	add	r3, r2
 800a110:	33c1      	adds	r3, #193	; 0xc1
 800a112:	2200      	movs	r2, #0
 800a114:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a11c:	4619      	mov	r1, r3
 800a11e:	693a      	ldr	r2, [r7, #16]
 800a120:	2334      	movs	r3, #52	; 0x34
 800a122:	fb01 f303 	mul.w	r3, r1, r3
 800a126:	4413      	add	r3, r2
 800a128:	3390      	adds	r3, #144	; 0x90
 800a12a:	2203      	movs	r2, #3
 800a12c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a134:	4619      	mov	r1, r3
 800a136:	693a      	ldr	r2, [r7, #16]
 800a138:	2334      	movs	r3, #52	; 0x34
 800a13a:	fb01 f303 	mul.w	r3, r1, r3
 800a13e:	4413      	add	r3, r2
 800a140:	3391      	adds	r3, #145	; 0x91
 800a142:	2200      	movs	r2, #0
 800a144:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a14c:	4619      	mov	r1, r3
 800a14e:	693a      	ldr	r2, [r7, #16]
 800a150:	2334      	movs	r3, #52	; 0x34
 800a152:	fb01 f303 	mul.w	r3, r1, r3
 800a156:	4413      	add	r3, r2
 800a158:	3392      	adds	r3, #146	; 0x92
 800a15a:	2200      	movs	r2, #0
 800a15c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800a15e:	7bbb      	ldrb	r3, [r7, #14]
 800a160:	2b02      	cmp	r3, #2
 800a162:	d14a      	bne.n	800a1fa <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a16a:	4619      	mov	r1, r3
 800a16c:	693a      	ldr	r2, [r7, #16]
 800a16e:	2334      	movs	r3, #52	; 0x34
 800a170:	fb01 f303 	mul.w	r3, r1, r3
 800a174:	4413      	add	r3, r2
 800a176:	3392      	adds	r3, #146	; 0x92
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d00c      	beq.n	800a198 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a184:	4619      	mov	r1, r3
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	2334      	movs	r3, #52	; 0x34
 800a18a:	fb01 f303 	mul.w	r3, r1, r3
 800a18e:	4413      	add	r3, r2
 800a190:	33c1      	adds	r3, #193	; 0xc1
 800a192:	2201      	movs	r2, #1
 800a194:	701a      	strb	r2, [r3, #0]
 800a196:	e00b      	b.n	800a1b0 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a19e:	4619      	mov	r1, r3
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	2334      	movs	r3, #52	; 0x34
 800a1a4:	fb01 f303 	mul.w	r3, r1, r3
 800a1a8:	4413      	add	r3, r2
 800a1aa:	33c1      	adds	r3, #193	; 0xc1
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	693a      	ldr	r2, [r7, #16]
 800a1ba:	2334      	movs	r3, #52	; 0x34
 800a1bc:	fb01 f303 	mul.w	r3, r1, r3
 800a1c0:	4413      	add	r3, r2
 800a1c2:	3390      	adds	r3, #144	; 0x90
 800a1c4:	2205      	movs	r2, #5
 800a1c6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	693a      	ldr	r2, [r7, #16]
 800a1d2:	2334      	movs	r3, #52	; 0x34
 800a1d4:	fb01 f303 	mul.w	r3, r1, r3
 800a1d8:	4413      	add	r3, r2
 800a1da:	3391      	adds	r3, #145	; 0x91
 800a1dc:	2201      	movs	r2, #1
 800a1de:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	693a      	ldr	r2, [r7, #16]
 800a1ea:	2334      	movs	r3, #52	; 0x34
 800a1ec:	fb01 f303 	mul.w	r3, r1, r3
 800a1f0:	4413      	add	r3, r2
 800a1f2:	3392      	adds	r3, #146	; 0x92
 800a1f4:	2202      	movs	r2, #2
 800a1f6:	701a      	strb	r2, [r3, #0]
            break;
 800a1f8:	e127      	b.n	800a44a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800a1fa:	7bbb      	ldrb	r3, [r7, #14]
 800a1fc:	2b04      	cmp	r3, #4
 800a1fe:	f040 8124 	bne.w	800a44a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a208:	4619      	mov	r1, r3
 800a20a:	693a      	ldr	r2, [r7, #16]
 800a20c:	2334      	movs	r3, #52	; 0x34
 800a20e:	fb01 f303 	mul.w	r3, r1, r3
 800a212:	4413      	add	r3, r2
 800a214:	3390      	adds	r3, #144	; 0x90
 800a216:	2201      	movs	r2, #1
 800a218:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a220:	4619      	mov	r1, r3
 800a222:	693a      	ldr	r2, [r7, #16]
 800a224:	2334      	movs	r3, #52	; 0x34
 800a226:	fb01 f303 	mul.w	r3, r1, r3
 800a22a:	4413      	add	r3, r2
 800a22c:	3391      	adds	r3, #145	; 0x91
 800a22e:	2202      	movs	r2, #2
 800a230:	701a      	strb	r2, [r3, #0]
            break;
 800a232:	e10a      	b.n	800a44a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a23a:	b2d9      	uxtb	r1, r3
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a242:	461a      	mov	r2, r3
 800a244:	2334      	movs	r3, #52	; 0x34
 800a246:	fb02 f303 	mul.w	r3, r2, r3
 800a24a:	3390      	adds	r3, #144	; 0x90
 800a24c:	693a      	ldr	r2, [r7, #16]
 800a24e:	4413      	add	r3, r2
 800a250:	3304      	adds	r3, #4
 800a252:	461a      	mov	r2, r3
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 fddc 	bl	800ae12 <USBH_MSC_SCSI_ReadCapacity>
 800a25a:	4603      	mov	r3, r0
 800a25c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a25e:	7bfb      	ldrb	r3, [r7, #15]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d120      	bne.n	800a2a6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a26a:	4619      	mov	r1, r3
 800a26c:	693a      	ldr	r2, [r7, #16]
 800a26e:	2334      	movs	r3, #52	; 0x34
 800a270:	fb01 f303 	mul.w	r3, r1, r3
 800a274:	4413      	add	r3, r2
 800a276:	3390      	adds	r3, #144	; 0x90
 800a278:	2201      	movs	r2, #1
 800a27a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a282:	4619      	mov	r1, r3
 800a284:	693a      	ldr	r2, [r7, #16]
 800a286:	2334      	movs	r3, #52	; 0x34
 800a288:	fb01 f303 	mul.w	r3, r1, r3
 800a28c:	4413      	add	r3, r2
 800a28e:	3391      	adds	r3, #145	; 0x91
 800a290:	2200      	movs	r2, #0
 800a292:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a29a:	3301      	adds	r3, #1
 800a29c:	b29a      	uxth	r2, r3
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a2a4:	e0d3      	b.n	800a44e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800a2a6:	7bfb      	ldrb	r3, [r7, #15]
 800a2a8:	2b02      	cmp	r3, #2
 800a2aa:	d10c      	bne.n	800a2c6 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	693a      	ldr	r2, [r7, #16]
 800a2b6:	2334      	movs	r3, #52	; 0x34
 800a2b8:	fb01 f303 	mul.w	r3, r1, r3
 800a2bc:	4413      	add	r3, r2
 800a2be:	3390      	adds	r3, #144	; 0x90
 800a2c0:	2205      	movs	r2, #5
 800a2c2:	701a      	strb	r2, [r3, #0]
            break;
 800a2c4:	e0c3      	b.n	800a44e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a2c6:	7bfb      	ldrb	r3, [r7, #15]
 800a2c8:	2b04      	cmp	r3, #4
 800a2ca:	f040 80c0 	bne.w	800a44e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	693a      	ldr	r2, [r7, #16]
 800a2d8:	2334      	movs	r3, #52	; 0x34
 800a2da:	fb01 f303 	mul.w	r3, r1, r3
 800a2de:	4413      	add	r3, r2
 800a2e0:	3390      	adds	r3, #144	; 0x90
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	693a      	ldr	r2, [r7, #16]
 800a2f0:	2334      	movs	r3, #52	; 0x34
 800a2f2:	fb01 f303 	mul.w	r3, r1, r3
 800a2f6:	4413      	add	r3, r2
 800a2f8:	3391      	adds	r3, #145	; 0x91
 800a2fa:	2202      	movs	r2, #2
 800a2fc:	701a      	strb	r2, [r3, #0]
            break;
 800a2fe:	e0a6      	b.n	800a44e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a306:	b2d9      	uxtb	r1, r3
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a30e:	461a      	mov	r2, r3
 800a310:	2334      	movs	r3, #52	; 0x34
 800a312:	fb02 f303 	mul.w	r3, r2, r3
 800a316:	3398      	adds	r3, #152	; 0x98
 800a318:	693a      	ldr	r2, [r7, #16]
 800a31a:	4413      	add	r3, r2
 800a31c:	3304      	adds	r3, #4
 800a31e:	461a      	mov	r2, r3
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 fe96 	bl	800b052 <USBH_MSC_SCSI_RequestSense>
 800a326:	4603      	mov	r3, r0
 800a328:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a32a:	7bfb      	ldrb	r3, [r7, #15]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d145      	bne.n	800a3bc <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a336:	4619      	mov	r1, r3
 800a338:	693a      	ldr	r2, [r7, #16]
 800a33a:	2334      	movs	r3, #52	; 0x34
 800a33c:	fb01 f303 	mul.w	r3, r1, r3
 800a340:	4413      	add	r3, r2
 800a342:	339c      	adds	r3, #156	; 0x9c
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	2b06      	cmp	r3, #6
 800a348:	d00c      	beq.n	800a364 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a350:	4619      	mov	r1, r3
 800a352:	693a      	ldr	r2, [r7, #16]
 800a354:	2334      	movs	r3, #52	; 0x34
 800a356:	fb01 f303 	mul.w	r3, r1, r3
 800a35a:	4413      	add	r3, r2
 800a35c:	339c      	adds	r3, #156	; 0x9c
 800a35e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a360:	2b02      	cmp	r3, #2
 800a362:	d117      	bne.n	800a394 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	f242 720f 	movw	r2, #9999	; 0x270f
 800a376:	4293      	cmp	r3, r2
 800a378:	d80c      	bhi.n	800a394 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a380:	4619      	mov	r1, r3
 800a382:	693a      	ldr	r2, [r7, #16]
 800a384:	2334      	movs	r3, #52	; 0x34
 800a386:	fb01 f303 	mul.w	r3, r1, r3
 800a38a:	4413      	add	r3, r2
 800a38c:	3390      	adds	r3, #144	; 0x90
 800a38e:	2202      	movs	r2, #2
 800a390:	701a      	strb	r2, [r3, #0]
                  break;
 800a392:	e05f      	b.n	800a454 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a39a:	4619      	mov	r1, r3
 800a39c:	693a      	ldr	r2, [r7, #16]
 800a39e:	2334      	movs	r3, #52	; 0x34
 800a3a0:	fb01 f303 	mul.w	r3, r1, r3
 800a3a4:	4413      	add	r3, r2
 800a3a6:	3390      	adds	r3, #144	; 0x90
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d10c      	bne.n	800a3dc <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	693a      	ldr	r2, [r7, #16]
 800a3cc:	2334      	movs	r3, #52	; 0x34
 800a3ce:	fb01 f303 	mul.w	r3, r1, r3
 800a3d2:	4413      	add	r3, r2
 800a3d4:	3390      	adds	r3, #144	; 0x90
 800a3d6:	2208      	movs	r2, #8
 800a3d8:	701a      	strb	r2, [r3, #0]
            break;
 800a3da:	e03a      	b.n	800a452 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
 800a3de:	2b04      	cmp	r3, #4
 800a3e0:	d137      	bne.n	800a452 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	693a      	ldr	r2, [r7, #16]
 800a3ec:	2334      	movs	r3, #52	; 0x34
 800a3ee:	fb01 f303 	mul.w	r3, r1, r3
 800a3f2:	4413      	add	r3, r2
 800a3f4:	3390      	adds	r3, #144	; 0x90
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a400:	4619      	mov	r1, r3
 800a402:	693a      	ldr	r2, [r7, #16]
 800a404:	2334      	movs	r3, #52	; 0x34
 800a406:	fb01 f303 	mul.w	r3, r1, r3
 800a40a:	4413      	add	r3, r2
 800a40c:	3391      	adds	r3, #145	; 0x91
 800a40e:	2202      	movs	r2, #2
 800a410:	701a      	strb	r2, [r3, #0]
            break;
 800a412:	e01e      	b.n	800a452 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a41a:	3301      	adds	r3, #1
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a424:	e016      	b.n	800a454 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	2200      	movs	r2, #0
 800a42a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	2201      	movs	r2, #1
 800a432:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a43a:	2102      	movs	r1, #2
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	4798      	blx	r3
      break;
 800a440:	e00c      	b.n	800a45c <USBH_MSC_Process+0x514>
            break;
 800a442:	bf00      	nop
 800a444:	e00a      	b.n	800a45c <USBH_MSC_Process+0x514>
            break;
 800a446:	bf00      	nop
 800a448:	e008      	b.n	800a45c <USBH_MSC_Process+0x514>
            break;
 800a44a:	bf00      	nop
 800a44c:	e006      	b.n	800a45c <USBH_MSC_Process+0x514>
            break;
 800a44e:	bf00      	nop
 800a450:	e004      	b.n	800a45c <USBH_MSC_Process+0x514>
            break;
 800a452:	bf00      	nop
      break;
 800a454:	e002      	b.n	800a45c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800a456:	2300      	movs	r3, #0
 800a458:	75fb      	strb	r3, [r7, #23]
      break;
 800a45a:	bf00      	nop
  }
  return error;
 800a45c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3718      	adds	r7, #24
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop

0800a468 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	370c      	adds	r7, #12
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b088      	sub	sp, #32
 800a482:	af02      	add	r7, sp, #8
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	460b      	mov	r3, r1
 800a488:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a490:	69db      	ldr	r3, [r3, #28]
 800a492:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800a494:	2301      	movs	r3, #1
 800a496:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800a498:	2301      	movs	r3, #1
 800a49a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800a49c:	78fb      	ldrb	r3, [r7, #3]
 800a49e:	693a      	ldr	r2, [r7, #16]
 800a4a0:	2134      	movs	r1, #52	; 0x34
 800a4a2:	fb01 f303 	mul.w	r3, r1, r3
 800a4a6:	4413      	add	r3, r2
 800a4a8:	3390      	adds	r3, #144	; 0x90
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	2b07      	cmp	r3, #7
 800a4ae:	d03c      	beq.n	800a52a <USBH_MSC_RdWrProcess+0xac>
 800a4b0:	2b07      	cmp	r3, #7
 800a4b2:	f300 80a7 	bgt.w	800a604 <USBH_MSC_RdWrProcess+0x186>
 800a4b6:	2b05      	cmp	r3, #5
 800a4b8:	d06c      	beq.n	800a594 <USBH_MSC_RdWrProcess+0x116>
 800a4ba:	2b06      	cmp	r3, #6
 800a4bc:	f040 80a2 	bne.w	800a604 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800a4c0:	78f9      	ldrb	r1, [r7, #3]
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	9300      	str	r3, [sp, #0]
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 fea5 	bl	800b21a <USBH_MSC_SCSI_Read>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a4d4:	7bfb      	ldrb	r3, [r7, #15]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d10b      	bne.n	800a4f2 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a4da:	78fb      	ldrb	r3, [r7, #3]
 800a4dc:	693a      	ldr	r2, [r7, #16]
 800a4de:	2134      	movs	r1, #52	; 0x34
 800a4e0:	fb01 f303 	mul.w	r3, r1, r3
 800a4e4:	4413      	add	r3, r2
 800a4e6:	3390      	adds	r3, #144	; 0x90
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a4f0:	e08a      	b.n	800a608 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800a4f2:	7bfb      	ldrb	r3, [r7, #15]
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	d109      	bne.n	800a50c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a4f8:	78fb      	ldrb	r3, [r7, #3]
 800a4fa:	693a      	ldr	r2, [r7, #16]
 800a4fc:	2134      	movs	r1, #52	; 0x34
 800a4fe:	fb01 f303 	mul.w	r3, r1, r3
 800a502:	4413      	add	r3, r2
 800a504:	3390      	adds	r3, #144	; 0x90
 800a506:	2205      	movs	r2, #5
 800a508:	701a      	strb	r2, [r3, #0]
      break;
 800a50a:	e07d      	b.n	800a608 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a50c:	7bfb      	ldrb	r3, [r7, #15]
 800a50e:	2b04      	cmp	r3, #4
 800a510:	d17a      	bne.n	800a608 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a512:	78fb      	ldrb	r3, [r7, #3]
 800a514:	693a      	ldr	r2, [r7, #16]
 800a516:	2134      	movs	r1, #52	; 0x34
 800a518:	fb01 f303 	mul.w	r3, r1, r3
 800a51c:	4413      	add	r3, r2
 800a51e:	3390      	adds	r3, #144	; 0x90
 800a520:	2208      	movs	r2, #8
 800a522:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a524:	2302      	movs	r3, #2
 800a526:	75fb      	strb	r3, [r7, #23]
      break;
 800a528:	e06e      	b.n	800a608 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800a52a:	78f9      	ldrb	r1, [r7, #3]
 800a52c:	2300      	movs	r3, #0
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	2300      	movs	r3, #0
 800a532:	2200      	movs	r2, #0
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 fe05 	bl	800b144 <USBH_MSC_SCSI_Write>
 800a53a:	4603      	mov	r3, r0
 800a53c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a53e:	7bfb      	ldrb	r3, [r7, #15]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d10b      	bne.n	800a55c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a544:	78fb      	ldrb	r3, [r7, #3]
 800a546:	693a      	ldr	r2, [r7, #16]
 800a548:	2134      	movs	r1, #52	; 0x34
 800a54a:	fb01 f303 	mul.w	r3, r1, r3
 800a54e:	4413      	add	r3, r2
 800a550:	3390      	adds	r3, #144	; 0x90
 800a552:	2201      	movs	r2, #1
 800a554:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a556:	2300      	movs	r3, #0
 800a558:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a55a:	e057      	b.n	800a60c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800a55c:	7bfb      	ldrb	r3, [r7, #15]
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d109      	bne.n	800a576 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a562:	78fb      	ldrb	r3, [r7, #3]
 800a564:	693a      	ldr	r2, [r7, #16]
 800a566:	2134      	movs	r1, #52	; 0x34
 800a568:	fb01 f303 	mul.w	r3, r1, r3
 800a56c:	4413      	add	r3, r2
 800a56e:	3390      	adds	r3, #144	; 0x90
 800a570:	2205      	movs	r2, #5
 800a572:	701a      	strb	r2, [r3, #0]
      break;
 800a574:	e04a      	b.n	800a60c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a576:	7bfb      	ldrb	r3, [r7, #15]
 800a578:	2b04      	cmp	r3, #4
 800a57a:	d147      	bne.n	800a60c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a57c:	78fb      	ldrb	r3, [r7, #3]
 800a57e:	693a      	ldr	r2, [r7, #16]
 800a580:	2134      	movs	r1, #52	; 0x34
 800a582:	fb01 f303 	mul.w	r3, r1, r3
 800a586:	4413      	add	r3, r2
 800a588:	3390      	adds	r3, #144	; 0x90
 800a58a:	2208      	movs	r2, #8
 800a58c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a58e:	2302      	movs	r3, #2
 800a590:	75fb      	strb	r3, [r7, #23]
      break;
 800a592:	e03b      	b.n	800a60c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800a594:	78fb      	ldrb	r3, [r7, #3]
 800a596:	2234      	movs	r2, #52	; 0x34
 800a598:	fb02 f303 	mul.w	r3, r2, r3
 800a59c:	3398      	adds	r3, #152	; 0x98
 800a59e:	693a      	ldr	r2, [r7, #16]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	1d1a      	adds	r2, r3, #4
 800a5a4:	78fb      	ldrb	r3, [r7, #3]
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 fd52 	bl	800b052 <USBH_MSC_SCSI_RequestSense>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a5b2:	7bfb      	ldrb	r3, [r7, #15]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d113      	bne.n	800a5e0 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a5b8:	78fb      	ldrb	r3, [r7, #3]
 800a5ba:	693a      	ldr	r2, [r7, #16]
 800a5bc:	2134      	movs	r1, #52	; 0x34
 800a5be:	fb01 f303 	mul.w	r3, r1, r3
 800a5c2:	4413      	add	r3, r2
 800a5c4:	3390      	adds	r3, #144	; 0x90
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800a5ca:	78fb      	ldrb	r3, [r7, #3]
 800a5cc:	693a      	ldr	r2, [r7, #16]
 800a5ce:	2134      	movs	r1, #52	; 0x34
 800a5d0:	fb01 f303 	mul.w	r3, r1, r3
 800a5d4:	4413      	add	r3, r2
 800a5d6:	3391      	adds	r3, #145	; 0x91
 800a5d8:	2202      	movs	r2, #2
 800a5da:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800a5dc:	2302      	movs	r3, #2
 800a5de:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800a5e0:	7bfb      	ldrb	r3, [r7, #15]
 800a5e2:	2b02      	cmp	r3, #2
 800a5e4:	d014      	beq.n	800a610 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a5e6:	7bfb      	ldrb	r3, [r7, #15]
 800a5e8:	2b04      	cmp	r3, #4
 800a5ea:	d111      	bne.n	800a610 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a5ec:	78fb      	ldrb	r3, [r7, #3]
 800a5ee:	693a      	ldr	r2, [r7, #16]
 800a5f0:	2134      	movs	r1, #52	; 0x34
 800a5f2:	fb01 f303 	mul.w	r3, r1, r3
 800a5f6:	4413      	add	r3, r2
 800a5f8:	3390      	adds	r3, #144	; 0x90
 800a5fa:	2208      	movs	r2, #8
 800a5fc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a5fe:	2302      	movs	r3, #2
 800a600:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a602:	e005      	b.n	800a610 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800a604:	bf00      	nop
 800a606:	e004      	b.n	800a612 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a608:	bf00      	nop
 800a60a:	e002      	b.n	800a612 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a60c:	bf00      	nop
 800a60e:	e000      	b.n	800a612 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a610:	bf00      	nop

  }
  return error;
 800a612:	7dfb      	ldrb	r3, [r7, #23]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3718      	adds	r7, #24
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	460b      	mov	r3, r1
 800a626:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a62e:	69db      	ldr	r3, [r3, #28]
 800a630:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	b2db      	uxtb	r3, r3
 800a638:	2b0b      	cmp	r3, #11
 800a63a:	d10c      	bne.n	800a656 <USBH_MSC_UnitIsReady+0x3a>
 800a63c:	78fb      	ldrb	r3, [r7, #3]
 800a63e:	68ba      	ldr	r2, [r7, #8]
 800a640:	2134      	movs	r1, #52	; 0x34
 800a642:	fb01 f303 	mul.w	r3, r1, r3
 800a646:	4413      	add	r3, r2
 800a648:	3391      	adds	r3, #145	; 0x91
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d102      	bne.n	800a656 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800a650:	2301      	movs	r3, #1
 800a652:	73fb      	strb	r3, [r7, #15]
 800a654:	e001      	b.n	800a65a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800a656:	2300      	movs	r3, #0
 800a658:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a65a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3714      	adds	r7, #20
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b086      	sub	sp, #24
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	460b      	mov	r3, r1
 800a672:	607a      	str	r2, [r7, #4]
 800a674:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a67c:	69db      	ldr	r3, [r3, #28]
 800a67e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	b2db      	uxtb	r3, r3
 800a686:	2b0b      	cmp	r3, #11
 800a688:	d10d      	bne.n	800a6a6 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800a68a:	7afb      	ldrb	r3, [r7, #11]
 800a68c:	2234      	movs	r2, #52	; 0x34
 800a68e:	fb02 f303 	mul.w	r3, r2, r3
 800a692:	3390      	adds	r3, #144	; 0x90
 800a694:	697a      	ldr	r2, [r7, #20]
 800a696:	4413      	add	r3, r2
 800a698:	2234      	movs	r2, #52	; 0x34
 800a69a:	4619      	mov	r1, r3
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f005 f953 	bl	800f948 <memcpy>
    return USBH_OK;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	e000      	b.n	800a6a8 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800a6a6:	2302      	movs	r3, #2
  }
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3718      	adds	r7, #24
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b088      	sub	sp, #32
 800a6b4:	af02      	add	r7, sp, #8
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	607a      	str	r2, [r7, #4]
 800a6ba:	603b      	str	r3, [r7, #0]
 800a6bc:	460b      	mov	r3, r1
 800a6be:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6c6:	69db      	ldr	r3, [r3, #28]
 800a6c8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00e      	beq.n	800a6f4 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a6dc:	2b0b      	cmp	r3, #11
 800a6de:	d109      	bne.n	800a6f4 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a6e0:	7afb      	ldrb	r3, [r7, #11]
 800a6e2:	697a      	ldr	r2, [r7, #20]
 800a6e4:	2134      	movs	r1, #52	; 0x34
 800a6e6:	fb01 f303 	mul.w	r3, r1, r3
 800a6ea:	4413      	add	r3, r2
 800a6ec:	3390      	adds	r3, #144	; 0x90
 800a6ee:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d001      	beq.n	800a6f8 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800a6f4:	2302      	movs	r3, #2
 800a6f6:	e040      	b.n	800a77a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	2206      	movs	r2, #6
 800a6fc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800a6fe:	7afb      	ldrb	r3, [r7, #11]
 800a700:	697a      	ldr	r2, [r7, #20]
 800a702:	2134      	movs	r1, #52	; 0x34
 800a704:	fb01 f303 	mul.w	r3, r1, r3
 800a708:	4413      	add	r3, r2
 800a70a:	3390      	adds	r3, #144	; 0x90
 800a70c:	2206      	movs	r2, #6
 800a70e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a710:	7afb      	ldrb	r3, [r7, #11]
 800a712:	b29a      	uxth	r2, r3
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800a71a:	7af9      	ldrb	r1, [r7, #11]
 800a71c:	6a3b      	ldr	r3, [r7, #32]
 800a71e:	9300      	str	r3, [sp, #0]
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	68f8      	ldr	r0, [r7, #12]
 800a726:	f000 fd78 	bl	800b21a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a730:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a732:	e016      	b.n	800a762 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	1ad2      	subs	r2, r2, r3
 800a73e:	6a3b      	ldr	r3, [r7, #32]
 800a740:	f242 7110 	movw	r1, #10000	; 0x2710
 800a744:	fb01 f303 	mul.w	r3, r1, r3
 800a748:	429a      	cmp	r2, r3
 800a74a:	d805      	bhi.n	800a758 <USBH_MSC_Read+0xa8>
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a752:	b2db      	uxtb	r3, r3
 800a754:	2b00      	cmp	r3, #0
 800a756:	d104      	bne.n	800a762 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	2201      	movs	r2, #1
 800a75c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a75e:	2302      	movs	r3, #2
 800a760:	e00b      	b.n	800a77a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a762:	7afb      	ldrb	r3, [r7, #11]
 800a764:	4619      	mov	r1, r3
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	f7ff fe89 	bl	800a47e <USBH_MSC_RdWrProcess>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d0e0      	beq.n	800a734 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	2201      	movs	r2, #1
 800a776:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3718      	adds	r7, #24
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b088      	sub	sp, #32
 800a786:	af02      	add	r7, sp, #8
 800a788:	60f8      	str	r0, [r7, #12]
 800a78a:	607a      	str	r2, [r7, #4]
 800a78c:	603b      	str	r3, [r7, #0]
 800a78e:	460b      	mov	r3, r1
 800a790:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a798:	69db      	ldr	r3, [r3, #28]
 800a79a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d00e      	beq.n	800a7c6 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a7ae:	2b0b      	cmp	r3, #11
 800a7b0:	d109      	bne.n	800a7c6 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a7b2:	7afb      	ldrb	r3, [r7, #11]
 800a7b4:	697a      	ldr	r2, [r7, #20]
 800a7b6:	2134      	movs	r1, #52	; 0x34
 800a7b8:	fb01 f303 	mul.w	r3, r1, r3
 800a7bc:	4413      	add	r3, r2
 800a7be:	3390      	adds	r3, #144	; 0x90
 800a7c0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d001      	beq.n	800a7ca <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800a7c6:	2302      	movs	r3, #2
 800a7c8:	e040      	b.n	800a84c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	2207      	movs	r2, #7
 800a7ce:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800a7d0:	7afb      	ldrb	r3, [r7, #11]
 800a7d2:	697a      	ldr	r2, [r7, #20]
 800a7d4:	2134      	movs	r1, #52	; 0x34
 800a7d6:	fb01 f303 	mul.w	r3, r1, r3
 800a7da:	4413      	add	r3, r2
 800a7dc:	3390      	adds	r3, #144	; 0x90
 800a7de:	2207      	movs	r2, #7
 800a7e0:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a7e2:	7afb      	ldrb	r3, [r7, #11]
 800a7e4:	b29a      	uxth	r2, r3
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800a7ec:	7af9      	ldrb	r1, [r7, #11]
 800a7ee:	6a3b      	ldr	r3, [r7, #32]
 800a7f0:	9300      	str	r3, [sp, #0]
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f000 fca4 	bl	800b144 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a802:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a804:	e016      	b.n	800a834 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	1ad2      	subs	r2, r2, r3
 800a810:	6a3b      	ldr	r3, [r7, #32]
 800a812:	f242 7110 	movw	r1, #10000	; 0x2710
 800a816:	fb01 f303 	mul.w	r3, r1, r3
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d805      	bhi.n	800a82a <USBH_MSC_Write+0xa8>
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a824:	b2db      	uxtb	r3, r3
 800a826:	2b00      	cmp	r3, #0
 800a828:	d104      	bne.n	800a834 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	2201      	movs	r2, #1
 800a82e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a830:	2302      	movs	r3, #2
 800a832:	e00b      	b.n	800a84c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a834:	7afb      	ldrb	r3, [r7, #11]
 800a836:	4619      	mov	r1, r3
 800a838:	68f8      	ldr	r0, [r7, #12]
 800a83a:	f7ff fe20 	bl	800a47e <USBH_MSC_RdWrProcess>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b01      	cmp	r3, #1
 800a842:	d0e0      	beq.n	800a806 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	2201      	movs	r2, #1
 800a848:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3718      	adds	r7, #24
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2221      	movs	r2, #33	; 0x21
 800a860:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	22ff      	movs	r2, #255	; 0xff
 800a866:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800a87a:	2200      	movs	r2, #0
 800a87c:	2100      	movs	r1, #0
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f001 fea4 	bl	800c5cc <USBH_CtlReq>
 800a884:	4603      	mov	r3, r0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b082      	sub	sp, #8
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
 800a896:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	22a1      	movs	r2, #161	; 0xa1
 800a89c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	22fe      	movs	r2, #254	; 0xfe
 800a8a2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	6839      	ldr	r1, [r7, #0]
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f001 fe86 	bl	800c5cc <USBH_CtlReq>
 800a8c0:	4603      	mov	r3, r0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3708      	adds	r7, #8
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
	...

0800a8cc <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8da:	69db      	ldr	r3, [r3, #28]
 800a8dc:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	4a09      	ldr	r2, [pc, #36]	; (800a908 <USBH_MSC_BOT_Init+0x3c>)
 800a8e2:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	4a09      	ldr	r2, [pc, #36]	; (800a90c <USBH_MSC_BOT_Init+0x40>)
 800a8e8:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800a8fa:	2300      	movs	r3, #0
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3714      	adds	r7, #20
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr
 800a908:	43425355 	.word	0x43425355
 800a90c:	20304050 	.word	0x20304050

0800a910 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b088      	sub	sp, #32
 800a914:	af02      	add	r7, sp, #8
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	460b      	mov	r3, r1
 800a91a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800a91c:	2301      	movs	r3, #1
 800a91e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800a920:	2301      	movs	r3, #1
 800a922:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800a924:	2301      	movs	r3, #1
 800a926:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a928:	2300      	movs	r3, #0
 800a92a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a932:	69db      	ldr	r3, [r3, #28]
 800a934:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800a936:	2300      	movs	r3, #0
 800a938:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a940:	3b01      	subs	r3, #1
 800a942:	2b0a      	cmp	r3, #10
 800a944:	f200 819e 	bhi.w	800ac84 <USBH_MSC_BOT_Process+0x374>
 800a948:	a201      	add	r2, pc, #4	; (adr r2, 800a950 <USBH_MSC_BOT_Process+0x40>)
 800a94a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a94e:	bf00      	nop
 800a950:	0800a97d 	.word	0x0800a97d
 800a954:	0800a9a5 	.word	0x0800a9a5
 800a958:	0800aa0f 	.word	0x0800aa0f
 800a95c:	0800aa2d 	.word	0x0800aa2d
 800a960:	0800aab1 	.word	0x0800aab1
 800a964:	0800aad3 	.word	0x0800aad3
 800a968:	0800ab6b 	.word	0x0800ab6b
 800a96c:	0800ab87 	.word	0x0800ab87
 800a970:	0800abd9 	.word	0x0800abd9
 800a974:	0800ac09 	.word	0x0800ac09
 800a978:	0800ac6b 	.word	0x0800ac6b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	78fa      	ldrb	r2, [r7, #3]
 800a980:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	2202      	movs	r2, #2
 800a988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	795b      	ldrb	r3, [r3, #5]
 800a996:	2201      	movs	r2, #1
 800a998:	9200      	str	r2, [sp, #0]
 800a99a:	221f      	movs	r2, #31
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f002 f824 	bl	800c9ea <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a9a2:	e17e      	b.n	800aca2 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	795b      	ldrb	r3, [r3, #5]
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f004 feda 	bl	800f764 <USBH_LL_GetURBState>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a9b4:	7d3b      	ldrb	r3, [r7, #20]
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d118      	bne.n	800a9ec <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00f      	beq.n	800a9e2 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a9c8:	b25b      	sxtb	r3, r3
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	da04      	bge.n	800a9d8 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	2203      	movs	r2, #3
 800a9d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a9d6:	e157      	b.n	800ac88 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	2205      	movs	r2, #5
 800a9dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a9e0:	e152      	b.n	800ac88 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	2207      	movs	r2, #7
 800a9e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a9ea:	e14d      	b.n	800ac88 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a9ec:	7d3b      	ldrb	r3, [r7, #20]
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d104      	bne.n	800a9fc <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a9fa:	e145      	b.n	800ac88 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800a9fc:	7d3b      	ldrb	r3, [r7, #20]
 800a9fe:	2b05      	cmp	r3, #5
 800aa00:	f040 8142 	bne.w	800ac88 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	220a      	movs	r2, #10
 800aa08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aa0c:	e13c      	b.n	800ac88 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	895a      	ldrh	r2, [r3, #10]
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	791b      	ldrb	r3, [r3, #4]
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f002 f809 	bl	800ca34 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	2204      	movs	r2, #4
 800aa26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800aa2a:	e13a      	b.n	800aca2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	791b      	ldrb	r3, [r3, #4]
 800aa30:	4619      	mov	r1, r3
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f004 fe96 	bl	800f764 <USBH_LL_GetURBState>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800aa3c:	7d3b      	ldrb	r3, [r7, #20]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d12d      	bne.n	800aa9e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa46:	693a      	ldr	r2, [r7, #16]
 800aa48:	8952      	ldrh	r2, [r2, #10]
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d910      	bls.n	800aa70 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa54:	693a      	ldr	r2, [r7, #16]
 800aa56:	8952      	ldrh	r2, [r2, #10]
 800aa58:	441a      	add	r2, r3
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa64:	693a      	ldr	r2, [r7, #16]
 800aa66:	8952      	ldrh	r2, [r2, #10]
 800aa68:	1a9a      	subs	r2, r3, r2
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	65da      	str	r2, [r3, #92]	; 0x5c
 800aa6e:	e002      	b.n	800aa76 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	2200      	movs	r2, #0
 800aa74:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00a      	beq.n	800aa94 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	895a      	ldrh	r2, [r3, #10]
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	791b      	ldrb	r3, [r3, #4]
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f001 ffd1 	bl	800ca34 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800aa92:	e0fb      	b.n	800ac8c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	2207      	movs	r2, #7
 800aa98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aa9c:	e0f6      	b.n	800ac8c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800aa9e:	7d3b      	ldrb	r3, [r7, #20]
 800aaa0:	2b05      	cmp	r3, #5
 800aaa2:	f040 80f3 	bne.w	800ac8c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	2209      	movs	r2, #9
 800aaaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aaae:	e0ed      	b.n	800ac8c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	891a      	ldrh	r2, [r3, #8]
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	795b      	ldrb	r3, [r3, #5]
 800aabe:	2001      	movs	r0, #1
 800aac0:	9000      	str	r0, [sp, #0]
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f001 ff91 	bl	800c9ea <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	2206      	movs	r2, #6
 800aacc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aad0:	e0e7      	b.n	800aca2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	795b      	ldrb	r3, [r3, #5]
 800aad6:	4619      	mov	r1, r3
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f004 fe43 	bl	800f764 <USBH_LL_GetURBState>
 800aade:	4603      	mov	r3, r0
 800aae0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800aae2:	7d3b      	ldrb	r3, [r7, #20]
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d12f      	bne.n	800ab48 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaec:	693a      	ldr	r2, [r7, #16]
 800aaee:	8912      	ldrh	r2, [r2, #8]
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d910      	bls.n	800ab16 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aafa:	693a      	ldr	r2, [r7, #16]
 800aafc:	8912      	ldrh	r2, [r2, #8]
 800aafe:	441a      	add	r2, r3
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab0a:	693a      	ldr	r2, [r7, #16]
 800ab0c:	8912      	ldrh	r2, [r2, #8]
 800ab0e:	1a9a      	subs	r2, r3, r2
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	65da      	str	r2, [r3, #92]	; 0x5c
 800ab14:	e002      	b.n	800ab1c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00c      	beq.n	800ab3e <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	891a      	ldrh	r2, [r3, #8]
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	795b      	ldrb	r3, [r3, #5]
 800ab32:	2001      	movs	r0, #1
 800ab34:	9000      	str	r0, [sp, #0]
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f001 ff57 	bl	800c9ea <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800ab3c:	e0a8      	b.n	800ac90 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	2207      	movs	r2, #7
 800ab42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ab46:	e0a3      	b.n	800ac90 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ab48:	7d3b      	ldrb	r3, [r7, #20]
 800ab4a:	2b02      	cmp	r3, #2
 800ab4c:	d104      	bne.n	800ab58 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	2205      	movs	r2, #5
 800ab52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ab56:	e09b      	b.n	800ac90 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800ab58:	7d3b      	ldrb	r3, [r7, #20]
 800ab5a:	2b05      	cmp	r3, #5
 800ab5c:	f040 8098 	bne.w	800ac90 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	220a      	movs	r2, #10
 800ab64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ab68:	e092      	b.n	800ac90 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	791b      	ldrb	r3, [r3, #4]
 800ab74:	220d      	movs	r2, #13
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f001 ff5c 	bl	800ca34 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	2208      	movs	r2, #8
 800ab80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ab84:	e08d      	b.n	800aca2 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	791b      	ldrb	r3, [r3, #4]
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f004 fde9 	bl	800f764 <USBH_LL_GetURBState>
 800ab92:	4603      	mov	r3, r0
 800ab94:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800ab96:	7d3b      	ldrb	r3, [r7, #20]
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d115      	bne.n	800abc8 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 f8a9 	bl	800ad04 <USBH_MSC_DecodeCSW>
 800abb2:	4603      	mov	r3, r0
 800abb4:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800abb6:	7d7b      	ldrb	r3, [r7, #21]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d102      	bne.n	800abc2 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800abbc:	2300      	movs	r3, #0
 800abbe:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800abc0:	e068      	b.n	800ac94 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800abc2:	2302      	movs	r3, #2
 800abc4:	75fb      	strb	r3, [r7, #23]
      break;
 800abc6:	e065      	b.n	800ac94 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800abc8:	7d3b      	ldrb	r3, [r7, #20]
 800abca:	2b05      	cmp	r3, #5
 800abcc:	d162      	bne.n	800ac94 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	2209      	movs	r2, #9
 800abd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800abd6:	e05d      	b.n	800ac94 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800abd8:	78fb      	ldrb	r3, [r7, #3]
 800abda:	2200      	movs	r2, #0
 800abdc:	4619      	mov	r1, r3
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 f864 	bl	800acac <USBH_MSC_BOT_Abort>
 800abe4:	4603      	mov	r3, r0
 800abe6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800abe8:	7dbb      	ldrb	r3, [r7, #22]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d104      	bne.n	800abf8 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	2207      	movs	r2, #7
 800abf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800abf6:	e04f      	b.n	800ac98 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800abf8:	7dbb      	ldrb	r3, [r7, #22]
 800abfa:	2b04      	cmp	r3, #4
 800abfc:	d14c      	bne.n	800ac98 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	220b      	movs	r2, #11
 800ac02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ac06:	e047      	b.n	800ac98 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800ac08:	78fb      	ldrb	r3, [r7, #3]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 f84c 	bl	800acac <USBH_MSC_BOT_Abort>
 800ac14:	4603      	mov	r3, r0
 800ac16:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800ac18:	7dbb      	ldrb	r3, [r7, #22]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d11d      	bne.n	800ac5a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	795b      	ldrb	r3, [r3, #5]
 800ac22:	4619      	mov	r1, r3
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f004 fdee 	bl	800f806 <USBH_LL_GetToggle>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	7959      	ldrb	r1, [r3, #5]
 800ac32:	7bfb      	ldrb	r3, [r7, #15]
 800ac34:	f1c3 0301 	rsb	r3, r3, #1
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f004 fdb2 	bl	800f7a6 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	791b      	ldrb	r3, [r3, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	4619      	mov	r1, r3
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f004 fdab 	bl	800f7a6 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	2209      	movs	r2, #9
 800ac54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800ac58:	e020      	b.n	800ac9c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800ac5a:	7dbb      	ldrb	r3, [r7, #22]
 800ac5c:	2b04      	cmp	r3, #4
 800ac5e:	d11d      	bne.n	800ac9c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	220b      	movs	r2, #11
 800ac64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ac68:	e018      	b.n	800ac9c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f7ff fdf2 	bl	800a854 <USBH_MSC_BOT_REQ_Reset>
 800ac70:	4603      	mov	r3, r0
 800ac72:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800ac74:	7dfb      	ldrb	r3, [r7, #23]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d112      	bne.n	800aca0 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800ac82:	e00d      	b.n	800aca0 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800ac84:	bf00      	nop
 800ac86:	e00c      	b.n	800aca2 <USBH_MSC_BOT_Process+0x392>
      break;
 800ac88:	bf00      	nop
 800ac8a:	e00a      	b.n	800aca2 <USBH_MSC_BOT_Process+0x392>
      break;
 800ac8c:	bf00      	nop
 800ac8e:	e008      	b.n	800aca2 <USBH_MSC_BOT_Process+0x392>
      break;
 800ac90:	bf00      	nop
 800ac92:	e006      	b.n	800aca2 <USBH_MSC_BOT_Process+0x392>
      break;
 800ac94:	bf00      	nop
 800ac96:	e004      	b.n	800aca2 <USBH_MSC_BOT_Process+0x392>
      break;
 800ac98:	bf00      	nop
 800ac9a:	e002      	b.n	800aca2 <USBH_MSC_BOT_Process+0x392>
      break;
 800ac9c:	bf00      	nop
 800ac9e:	e000      	b.n	800aca2 <USBH_MSC_BOT_Process+0x392>
      break;
 800aca0:	bf00      	nop
  }
  return status;
 800aca2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3718      	adds	r7, #24
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	460b      	mov	r3, r1
 800acb6:	70fb      	strb	r3, [r7, #3]
 800acb8:	4613      	mov	r3, r2
 800acba:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800acbc:	2302      	movs	r3, #2
 800acbe:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acc6:	69db      	ldr	r3, [r3, #28]
 800acc8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800acca:	78bb      	ldrb	r3, [r7, #2]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d002      	beq.n	800acd6 <USBH_MSC_BOT_Abort+0x2a>
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d009      	beq.n	800ace8 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800acd4:	e011      	b.n	800acfa <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	79db      	ldrb	r3, [r3, #7]
 800acda:	4619      	mov	r1, r3
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f001 f9a8 	bl	800c032 <USBH_ClrFeature>
 800ace2:	4603      	mov	r3, r0
 800ace4:	73fb      	strb	r3, [r7, #15]
      break;
 800ace6:	e008      	b.n	800acfa <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	799b      	ldrb	r3, [r3, #6]
 800acec:	4619      	mov	r1, r3
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f001 f99f 	bl	800c032 <USBH_ClrFeature>
 800acf4:	4603      	mov	r3, r0
 800acf6:	73fb      	strb	r3, [r7, #15]
      break;
 800acf8:	bf00      	nop
  }
  return status;
 800acfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3710      	adds	r7, #16
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad12:	69db      	ldr	r3, [r3, #28]
 800ad14:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800ad16:	2301      	movs	r3, #1
 800ad18:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	791b      	ldrb	r3, [r3, #4]
 800ad1e:	4619      	mov	r1, r3
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f004 fc8d 	bl	800f640 <USBH_LL_GetLastXferSize>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b0d      	cmp	r3, #13
 800ad2a:	d002      	beq.n	800ad32 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800ad2c:	2302      	movs	r3, #2
 800ad2e:	73fb      	strb	r3, [r7, #15]
 800ad30:	e024      	b.n	800ad7c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad36:	4a14      	ldr	r2, [pc, #80]	; (800ad88 <USBH_MSC_DecodeCSW+0x84>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d11d      	bne.n	800ad78 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d119      	bne.n	800ad7c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d102      	bne.n	800ad58 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800ad52:	2300      	movs	r3, #0
 800ad54:	73fb      	strb	r3, [r7, #15]
 800ad56:	e011      	b.n	800ad7c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d102      	bne.n	800ad68 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800ad62:	2301      	movs	r3, #1
 800ad64:	73fb      	strb	r3, [r7, #15]
 800ad66:	e009      	b.n	800ad7c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d104      	bne.n	800ad7c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800ad72:	2302      	movs	r3, #2
 800ad74:	73fb      	strb	r3, [r7, #15]
 800ad76:	e001      	b.n	800ad7c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800ad78:	2302      	movs	r3, #2
 800ad7a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800ad7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	53425355 	.word	0x53425355

0800ad8c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	460b      	mov	r3, r1
 800ad96:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ad98:	2302      	movs	r3, #2
 800ad9a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ada2:	69db      	ldr	r3, [r3, #28]
 800ada4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800adac:	2b01      	cmp	r3, #1
 800adae:	d002      	beq.n	800adb6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800adb0:	2b02      	cmp	r3, #2
 800adb2:	d021      	beq.n	800adf8 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800adb4:	e028      	b.n	800ae08 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	2200      	movs	r2, #0
 800adba:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	2200      	movs	r2, #0
 800adc0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	220a      	movs	r2, #10
 800adc8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	3363      	adds	r3, #99	; 0x63
 800add0:	2210      	movs	r2, #16
 800add2:	2100      	movs	r1, #0
 800add4:	4618      	mov	r0, r3
 800add6:	f004 fdc5 	bl	800f964 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	2200      	movs	r2, #0
 800adde:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	2201      	movs	r2, #1
 800ade6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	2202      	movs	r2, #2
 800adee:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800adf2:	2301      	movs	r3, #1
 800adf4:	73fb      	strb	r3, [r7, #15]
      break;
 800adf6:	e007      	b.n	800ae08 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800adf8:	78fb      	ldrb	r3, [r7, #3]
 800adfa:	4619      	mov	r1, r3
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f7ff fd87 	bl	800a910 <USBH_MSC_BOT_Process>
 800ae02:	4603      	mov	r3, r0
 800ae04:	73fb      	strb	r3, [r7, #15]
      break;
 800ae06:	bf00      	nop
  }

  return error;
 800ae08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b086      	sub	sp, #24
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	60f8      	str	r0, [r7, #12]
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	607a      	str	r2, [r7, #4]
 800ae1e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800ae20:	2301      	movs	r3, #1
 800ae22:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae2a:	69db      	ldr	r3, [r3, #28]
 800ae2c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d002      	beq.n	800ae3e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	d027      	beq.n	800ae8c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800ae3c:	e05f      	b.n	800aefe <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	2208      	movs	r2, #8
 800ae42:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	2280      	movs	r2, #128	; 0x80
 800ae48:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	220a      	movs	r2, #10
 800ae50:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	3363      	adds	r3, #99	; 0x63
 800ae58:	2210      	movs	r2, #16
 800ae5a:	2100      	movs	r1, #0
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f004 fd81 	bl	800f964 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	2225      	movs	r2, #37	; 0x25
 800ae66:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	2202      	movs	r2, #2
 800ae76:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	f103 0210 	add.w	r2, r3, #16
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ae86:	2301      	movs	r3, #1
 800ae88:	75fb      	strb	r3, [r7, #23]
      break;
 800ae8a:	e038      	b.n	800aefe <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ae8c:	7afb      	ldrb	r3, [r7, #11]
 800ae8e:	4619      	mov	r1, r3
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f7ff fd3d 	bl	800a910 <USBH_MSC_BOT_Process>
 800ae96:	4603      	mov	r3, r0
 800ae98:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ae9a:	7dfb      	ldrb	r3, [r7, #23]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d12d      	bne.n	800aefc <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aea6:	3303      	adds	r3, #3
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	461a      	mov	r2, r3
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aeb2:	3302      	adds	r3, #2
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	021b      	lsls	r3, r3, #8
 800aeb8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aec0:	3301      	adds	r3, #1
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800aec6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	061b      	lsls	r3, r3, #24
 800aed2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aede:	3307      	adds	r3, #7
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	b29a      	uxth	r2, r3
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aeea:	3306      	adds	r3, #6
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	021b      	lsls	r3, r3, #8
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	4313      	orrs	r3, r2
 800aef6:	b29a      	uxth	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	809a      	strh	r2, [r3, #4]
      break;
 800aefc:	bf00      	nop
  }

  return error;
 800aefe:	7dfb      	ldrb	r3, [r7, #23]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3718      	adds	r7, #24
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	460b      	mov	r3, r1
 800af12:	607a      	str	r2, [r7, #4]
 800af14:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800af16:	2302      	movs	r3, #2
 800af18:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af20:	69db      	ldr	r3, [r3, #28]
 800af22:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d002      	beq.n	800af34 <USBH_MSC_SCSI_Inquiry+0x2c>
 800af2e:	2b02      	cmp	r3, #2
 800af30:	d03d      	beq.n	800afae <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800af32:	e089      	b.n	800b048 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	2224      	movs	r2, #36	; 0x24
 800af38:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	2280      	movs	r2, #128	; 0x80
 800af3e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	220a      	movs	r2, #10
 800af46:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	3363      	adds	r3, #99	; 0x63
 800af4e:	220a      	movs	r2, #10
 800af50:	2100      	movs	r1, #0
 800af52:	4618      	mov	r0, r3
 800af54:	f004 fd06 	bl	800f964 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	2212      	movs	r2, #18
 800af5c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800af60:	7afb      	ldrb	r3, [r7, #11]
 800af62:	015b      	lsls	r3, r3, #5
 800af64:	b2da      	uxtb	r2, r3
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	2200      	movs	r2, #0
 800af70:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	2200      	movs	r2, #0
 800af78:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	2224      	movs	r2, #36	; 0x24
 800af80:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	2200      	movs	r2, #0
 800af88:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	2201      	movs	r2, #1
 800af90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	2202      	movs	r2, #2
 800af98:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	f103 0210 	add.w	r2, r3, #16
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800afa8:	2301      	movs	r3, #1
 800afaa:	75fb      	strb	r3, [r7, #23]
      break;
 800afac:	e04c      	b.n	800b048 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800afae:	7afb      	ldrb	r3, [r7, #11]
 800afb0:	4619      	mov	r1, r3
 800afb2:	68f8      	ldr	r0, [r7, #12]
 800afb4:	f7ff fcac 	bl	800a910 <USBH_MSC_BOT_Process>
 800afb8:	4603      	mov	r3, r0
 800afba:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800afbc:	7dfb      	ldrb	r3, [r7, #23]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d141      	bne.n	800b046 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800afc2:	2222      	movs	r2, #34	; 0x22
 800afc4:	2100      	movs	r1, #0
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f004 fccc 	bl	800f964 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	f003 031f 	and.w	r3, r3, #31
 800afd8:	b2da      	uxtb	r2, r3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	095b      	lsrs	r3, r3, #5
 800afe8:	b2da      	uxtb	r2, r3
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aff4:	3301      	adds	r3, #1
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	b25b      	sxtb	r3, r3
 800affa:	2b00      	cmp	r3, #0
 800affc:	da03      	bge.n	800b006 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2201      	movs	r2, #1
 800b002:	709a      	strb	r2, [r3, #2]
 800b004:	e002      	b.n	800b00c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	1cd8      	adds	r0, r3, #3
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b016:	3308      	adds	r3, #8
 800b018:	2208      	movs	r2, #8
 800b01a:	4619      	mov	r1, r3
 800b01c:	f004 fc94 	bl	800f948 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f103 000c 	add.w	r0, r3, #12
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b02c:	3310      	adds	r3, #16
 800b02e:	2210      	movs	r2, #16
 800b030:	4619      	mov	r1, r3
 800b032:	f004 fc89 	bl	800f948 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	331d      	adds	r3, #29
 800b03a:	693a      	ldr	r2, [r7, #16]
 800b03c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800b040:	3220      	adds	r2, #32
 800b042:	6812      	ldr	r2, [r2, #0]
 800b044:	601a      	str	r2, [r3, #0]
      break;
 800b046:	bf00      	nop
  }

  return error;
 800b048:	7dfb      	ldrb	r3, [r7, #23]
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3718      	adds	r7, #24
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b086      	sub	sp, #24
 800b056:	af00      	add	r7, sp, #0
 800b058:	60f8      	str	r0, [r7, #12]
 800b05a:	460b      	mov	r3, r1
 800b05c:	607a      	str	r2, [r7, #4]
 800b05e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b060:	2302      	movs	r3, #2
 800b062:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b06a:	69db      	ldr	r3, [r3, #28]
 800b06c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b074:	2b01      	cmp	r3, #1
 800b076:	d002      	beq.n	800b07e <USBH_MSC_SCSI_RequestSense+0x2c>
 800b078:	2b02      	cmp	r3, #2
 800b07a:	d03d      	beq.n	800b0f8 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800b07c:	e05d      	b.n	800b13a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	220e      	movs	r2, #14
 800b082:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	2280      	movs	r2, #128	; 0x80
 800b088:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	220a      	movs	r2, #10
 800b090:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	3363      	adds	r3, #99	; 0x63
 800b098:	2210      	movs	r2, #16
 800b09a:	2100      	movs	r1, #0
 800b09c:	4618      	mov	r0, r3
 800b09e:	f004 fc61 	bl	800f964 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	2203      	movs	r2, #3
 800b0a6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b0aa:	7afb      	ldrb	r3, [r7, #11]
 800b0ac:	015b      	lsls	r3, r3, #5
 800b0ae:	b2da      	uxtb	r2, r3
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	220e      	movs	r2, #14
 800b0ca:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	2202      	movs	r2, #2
 800b0e2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	f103 0210 	add.w	r2, r3, #16
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	75fb      	strb	r3, [r7, #23]
      break;
 800b0f6:	e020      	b.n	800b13a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b0f8:	7afb      	ldrb	r3, [r7, #11]
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	68f8      	ldr	r0, [r7, #12]
 800b0fe:	f7ff fc07 	bl	800a910 <USBH_MSC_BOT_Process>
 800b102:	4603      	mov	r3, r0
 800b104:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b106:	7dfb      	ldrb	r3, [r7, #23]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d115      	bne.n	800b138 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b112:	3302      	adds	r3, #2
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	f003 030f 	and.w	r3, r3, #15
 800b11a:	b2da      	uxtb	r2, r3
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b126:	7b1a      	ldrb	r2, [r3, #12]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b132:	7b5a      	ldrb	r2, [r3, #13]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	709a      	strb	r2, [r3, #2]
      break;
 800b138:	bf00      	nop
  }

  return error;
 800b13a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3718      	adds	r7, #24
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b086      	sub	sp, #24
 800b148:	af00      	add	r7, sp, #0
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	607a      	str	r2, [r7, #4]
 800b14e:	603b      	str	r3, [r7, #0]
 800b150:	460b      	mov	r3, r1
 800b152:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b154:	2302      	movs	r3, #2
 800b156:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b15e:	69db      	ldr	r3, [r3, #28]
 800b160:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d002      	beq.n	800b172 <USBH_MSC_SCSI_Write+0x2e>
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	d047      	beq.n	800b200 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b170:	e04e      	b.n	800b210 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b178:	461a      	mov	r2, r3
 800b17a:	6a3b      	ldr	r3, [r7, #32]
 800b17c:	fb03 f202 	mul.w	r2, r3, r2
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	2200      	movs	r2, #0
 800b188:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	220a      	movs	r2, #10
 800b190:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	3363      	adds	r3, #99	; 0x63
 800b198:	2210      	movs	r2, #16
 800b19a:	2100      	movs	r1, #0
 800b19c:	4618      	mov	r0, r3
 800b19e:	f004 fbe1 	bl	800f964 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	222a      	movs	r2, #42	; 0x2a
 800b1a6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b1aa:	79fa      	ldrb	r2, [r7, #7]
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b1b2:	79ba      	ldrb	r2, [r7, #6]
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b1ba:	797a      	ldrb	r2, [r7, #5]
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b1c2:	1d3b      	adds	r3, r7, #4
 800b1c4:	781a      	ldrb	r2, [r3, #0]
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b1cc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b1d6:	f107 0320 	add.w	r3, r7, #32
 800b1da:	781a      	ldrb	r2, [r3, #0]
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	2202      	movs	r2, #2
 800b1ee:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	683a      	ldr	r2, [r7, #0]
 800b1f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	75fb      	strb	r3, [r7, #23]
      break;
 800b1fe:	e007      	b.n	800b210 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b200:	7afb      	ldrb	r3, [r7, #11]
 800b202:	4619      	mov	r1, r3
 800b204:	68f8      	ldr	r0, [r7, #12]
 800b206:	f7ff fb83 	bl	800a910 <USBH_MSC_BOT_Process>
 800b20a:	4603      	mov	r3, r0
 800b20c:	75fb      	strb	r3, [r7, #23]
      break;
 800b20e:	bf00      	nop
  }

  return error;
 800b210:	7dfb      	ldrb	r3, [r7, #23]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3718      	adds	r7, #24
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}

0800b21a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b086      	sub	sp, #24
 800b21e:	af00      	add	r7, sp, #0
 800b220:	60f8      	str	r0, [r7, #12]
 800b222:	607a      	str	r2, [r7, #4]
 800b224:	603b      	str	r3, [r7, #0]
 800b226:	460b      	mov	r3, r1
 800b228:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b22a:	2302      	movs	r3, #2
 800b22c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b234:	69db      	ldr	r3, [r3, #28]
 800b236:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d002      	beq.n	800b248 <USBH_MSC_SCSI_Read+0x2e>
 800b242:	2b02      	cmp	r3, #2
 800b244:	d047      	beq.n	800b2d6 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b246:	e04e      	b.n	800b2e6 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b24e:	461a      	mov	r2, r3
 800b250:	6a3b      	ldr	r3, [r7, #32]
 800b252:	fb03 f202 	mul.w	r2, r3, r2
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	2280      	movs	r2, #128	; 0x80
 800b25e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	220a      	movs	r2, #10
 800b266:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	3363      	adds	r3, #99	; 0x63
 800b26e:	2210      	movs	r2, #16
 800b270:	2100      	movs	r1, #0
 800b272:	4618      	mov	r0, r3
 800b274:	f004 fb76 	bl	800f964 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	2228      	movs	r2, #40	; 0x28
 800b27c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b280:	79fa      	ldrb	r2, [r7, #7]
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b288:	79ba      	ldrb	r2, [r7, #6]
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b290:	797a      	ldrb	r2, [r7, #5]
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b298:	1d3b      	adds	r3, r7, #4
 800b29a:	781a      	ldrb	r2, [r3, #0]
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b2a2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b2ac:	f107 0320 	add.w	r3, r7, #32
 800b2b0:	781a      	ldrb	r2, [r3, #0]
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	2202      	movs	r2, #2
 800b2c4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	683a      	ldr	r2, [r7, #0]
 800b2cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	75fb      	strb	r3, [r7, #23]
      break;
 800b2d4:	e007      	b.n	800b2e6 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b2d6:	7afb      	ldrb	r3, [r7, #11]
 800b2d8:	4619      	mov	r1, r3
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	f7ff fb18 	bl	800a910 <USBH_MSC_BOT_Process>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	75fb      	strb	r3, [r7, #23]
      break;
 800b2e4:	bf00      	nop
  }

  return error;
 800b2e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3718      	adds	r7, #24
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	4613      	mov	r3, r2
 800b2fc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d101      	bne.n	800b308 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b304:	2302      	movs	r3, #2
 800b306:	e029      	b.n	800b35c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	79fa      	ldrb	r2, [r7, #7]
 800b30c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2200      	movs	r2, #0
 800b314:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2200      	movs	r2, #0
 800b31c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b320:	68f8      	ldr	r0, [r7, #12]
 800b322:	f000 f81f 	bl	800b364 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2200      	movs	r2, #0
 800b32a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2200      	movs	r2, #0
 800b332:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2200      	movs	r2, #0
 800b33a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2200      	movs	r2, #0
 800b342:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d003      	beq.n	800b354 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	68ba      	ldr	r2, [r7, #8]
 800b350:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b354:	68f8      	ldr	r0, [r7, #12]
 800b356:	f004 f8bf 	bl	800f4d8 <USBH_LL_Init>

  return USBH_OK;
 800b35a:	2300      	movs	r3, #0
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3710      	adds	r7, #16
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b36c:	2300      	movs	r3, #0
 800b36e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b370:	2300      	movs	r3, #0
 800b372:	60fb      	str	r3, [r7, #12]
 800b374:	e009      	b.n	800b38a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	33e0      	adds	r3, #224	; 0xe0
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	4413      	add	r3, r2
 800b380:	2200      	movs	r2, #0
 800b382:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	3301      	adds	r3, #1
 800b388:	60fb      	str	r3, [r7, #12]
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2b0f      	cmp	r3, #15
 800b38e:	d9f2      	bls.n	800b376 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b390:	2300      	movs	r3, #0
 800b392:	60fb      	str	r3, [r7, #12]
 800b394:	e009      	b.n	800b3aa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	4413      	add	r3, r2
 800b39c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	60fb      	str	r3, [r7, #12]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3b0:	d3f1      	bcc.n	800b396 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2240      	movs	r2, #64	; 0x40
 800b3d6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b3fe:	2300      	movs	r3, #0
}
 800b400:	4618      	mov	r0, r3
 800b402:	3714      	adds	r7, #20
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b416:	2300      	movs	r3, #0
 800b418:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d016      	beq.n	800b44e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b426:	2b00      	cmp	r3, #0
 800b428:	d10e      	bne.n	800b448 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b430:	1c59      	adds	r1, r3, #1
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	33de      	adds	r3, #222	; 0xde
 800b43c:	6839      	ldr	r1, [r7, #0]
 800b43e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b442:	2300      	movs	r3, #0
 800b444:	73fb      	strb	r3, [r7, #15]
 800b446:	e004      	b.n	800b452 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b448:	2302      	movs	r3, #2
 800b44a:	73fb      	strb	r3, [r7, #15]
 800b44c:	e001      	b.n	800b452 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b44e:	2302      	movs	r3, #2
 800b450:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b452:	7bfb      	ldrb	r3, [r7, #15]
}
 800b454:	4618      	mov	r0, r3
 800b456:	3714      	adds	r7, #20
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr

0800b460 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b460:	b480      	push	{r7}
 800b462:	b085      	sub	sp, #20
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	460b      	mov	r3, r1
 800b46a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b46c:	2300      	movs	r3, #0
 800b46e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b476:	78fa      	ldrb	r2, [r7, #3]
 800b478:	429a      	cmp	r2, r3
 800b47a:	d204      	bcs.n	800b486 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	78fa      	ldrb	r2, [r7, #3]
 800b480:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b484:	e001      	b.n	800b48a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b486:	2302      	movs	r3, #2
 800b488:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b48a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3714      	adds	r7, #20
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr

0800b498 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b498:	b480      	push	{r7}
 800b49a:	b087      	sub	sp, #28
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	4608      	mov	r0, r1
 800b4a2:	4611      	mov	r1, r2
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	70fb      	strb	r3, [r7, #3]
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	70bb      	strb	r3, [r7, #2]
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b4c0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b4c2:	e025      	b.n	800b510 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b4c4:	7dfb      	ldrb	r3, [r7, #23]
 800b4c6:	221a      	movs	r2, #26
 800b4c8:	fb02 f303 	mul.w	r3, r2, r3
 800b4cc:	3308      	adds	r3, #8
 800b4ce:	68fa      	ldr	r2, [r7, #12]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	3302      	adds	r3, #2
 800b4d4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	795b      	ldrb	r3, [r3, #5]
 800b4da:	78fa      	ldrb	r2, [r7, #3]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d002      	beq.n	800b4e6 <USBH_FindInterface+0x4e>
 800b4e0:	78fb      	ldrb	r3, [r7, #3]
 800b4e2:	2bff      	cmp	r3, #255	; 0xff
 800b4e4:	d111      	bne.n	800b50a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b4ea:	78ba      	ldrb	r2, [r7, #2]
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d002      	beq.n	800b4f6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b4f0:	78bb      	ldrb	r3, [r7, #2]
 800b4f2:	2bff      	cmp	r3, #255	; 0xff
 800b4f4:	d109      	bne.n	800b50a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b4fa:	787a      	ldrb	r2, [r7, #1]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d002      	beq.n	800b506 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b500:	787b      	ldrb	r3, [r7, #1]
 800b502:	2bff      	cmp	r3, #255	; 0xff
 800b504:	d101      	bne.n	800b50a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b506:	7dfb      	ldrb	r3, [r7, #23]
 800b508:	e006      	b.n	800b518 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b50a:	7dfb      	ldrb	r3, [r7, #23]
 800b50c:	3301      	adds	r3, #1
 800b50e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b510:	7dfb      	ldrb	r3, [r7, #23]
 800b512:	2b01      	cmp	r3, #1
 800b514:	d9d6      	bls.n	800b4c4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b516:	23ff      	movs	r3, #255	; 0xff
}
 800b518:	4618      	mov	r0, r3
 800b51a:	371c      	adds	r7, #28
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f004 f80f 	bl	800f550 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b532:	2101      	movs	r1, #1
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f004 f928 	bl	800f78a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b53a:	2300      	movs	r3, #0
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3708      	adds	r7, #8
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b088      	sub	sp, #32
 800b548:	af04      	add	r7, sp, #16
 800b54a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b54c:	2302      	movs	r3, #2
 800b54e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b550:	2300      	movs	r3, #0
 800b552:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b55a:	b2db      	uxtb	r3, r3
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d102      	bne.n	800b566 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2203      	movs	r2, #3
 800b564:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	781b      	ldrb	r3, [r3, #0]
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	2b0b      	cmp	r3, #11
 800b56e:	f200 81be 	bhi.w	800b8ee <USBH_Process+0x3aa>
 800b572:	a201      	add	r2, pc, #4	; (adr r2, 800b578 <USBH_Process+0x34>)
 800b574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b578:	0800b5a9 	.word	0x0800b5a9
 800b57c:	0800b5db 	.word	0x0800b5db
 800b580:	0800b643 	.word	0x0800b643
 800b584:	0800b889 	.word	0x0800b889
 800b588:	0800b8ef 	.word	0x0800b8ef
 800b58c:	0800b6e7 	.word	0x0800b6e7
 800b590:	0800b82f 	.word	0x0800b82f
 800b594:	0800b71d 	.word	0x0800b71d
 800b598:	0800b73d 	.word	0x0800b73d
 800b59c:	0800b75d 	.word	0x0800b75d
 800b5a0:	0800b7a1 	.word	0x0800b7a1
 800b5a4:	0800b871 	.word	0x0800b871
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f000 819e 	beq.w	800b8f2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b5bc:	20c8      	movs	r0, #200	; 0xc8
 800b5be:	f004 f952 	bl	800f866 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f004 f821 	bl	800f60a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b5d8:	e18b      	b.n	800b8f2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d107      	bne.n	800b5f4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2202      	movs	r2, #2
 800b5f0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b5f2:	e18d      	b.n	800b910 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b5fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b5fe:	d914      	bls.n	800b62a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b606:	3301      	adds	r3, #1
 800b608:	b2da      	uxtb	r2, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b616:	2b03      	cmp	r3, #3
 800b618:	d903      	bls.n	800b622 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	220d      	movs	r2, #13
 800b61e:	701a      	strb	r2, [r3, #0]
      break;
 800b620:	e176      	b.n	800b910 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2200      	movs	r2, #0
 800b626:	701a      	strb	r2, [r3, #0]
      break;
 800b628:	e172      	b.n	800b910 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b630:	f103 020a 	add.w	r2, r3, #10
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b63a:	200a      	movs	r0, #10
 800b63c:	f004 f913 	bl	800f866 <USBH_Delay>
      break;
 800b640:	e166      	b.n	800b910 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d005      	beq.n	800b658 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b652:	2104      	movs	r1, #4
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b658:	2064      	movs	r0, #100	; 0x64
 800b65a:	f004 f904 	bl	800f866 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f003 ffac 	bl	800f5bc <USBH_LL_GetSpeed>
 800b664:	4603      	mov	r3, r0
 800b666:	461a      	mov	r2, r3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2205      	movs	r2, #5
 800b672:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b674:	2100      	movs	r1, #0
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f001 fa29 	bl	800cace <USBH_AllocPipe>
 800b67c:	4603      	mov	r3, r0
 800b67e:	461a      	mov	r2, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b684:	2180      	movs	r1, #128	; 0x80
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f001 fa21 	bl	800cace <USBH_AllocPipe>
 800b68c:	4603      	mov	r3, r0
 800b68e:	461a      	mov	r2, r3
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	7919      	ldrb	r1, [r3, #4]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b6a8:	b292      	uxth	r2, r2
 800b6aa:	9202      	str	r2, [sp, #8]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	9201      	str	r2, [sp, #4]
 800b6b0:	9300      	str	r3, [sp, #0]
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2280      	movs	r2, #128	; 0x80
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f001 f9da 	bl	800ca70 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	7959      	ldrb	r1, [r3, #5]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b6cc:	687a      	ldr	r2, [r7, #4]
 800b6ce:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b6d0:	b292      	uxth	r2, r2
 800b6d2:	9202      	str	r2, [sp, #8]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	9201      	str	r2, [sp, #4]
 800b6d8:	9300      	str	r3, [sp, #0]
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2200      	movs	r2, #0
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f001 f9c6 	bl	800ca70 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b6e4:	e114      	b.n	800b910 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 f918 	bl	800b91c <USBH_HandleEnum>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b6f0:	7bbb      	ldrb	r3, [r7, #14]
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f040 80fe 	bne.w	800b8f6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d103      	bne.n	800b714 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2208      	movs	r2, #8
 800b710:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b712:	e0f0      	b.n	800b8f6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2207      	movs	r2, #7
 800b718:	701a      	strb	r2, [r3, #0]
      break;
 800b71a:	e0ec      	b.n	800b8f6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b722:	2b00      	cmp	r3, #0
 800b724:	f000 80e9 	beq.w	800b8fa <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b72e:	2101      	movs	r1, #1
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2208      	movs	r2, #8
 800b738:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b73a:	e0de      	b.n	800b8fa <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b742:	b29b      	uxth	r3, r3
 800b744:	4619      	mov	r1, r3
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 fc2c 	bl	800bfa4 <USBH_SetCfg>
 800b74c:	4603      	mov	r3, r0
 800b74e:	2b00      	cmp	r3, #0
 800b750:	f040 80d5 	bne.w	800b8fe <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2209      	movs	r2, #9
 800b758:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b75a:	e0d0      	b.n	800b8fe <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b762:	f003 0320 	and.w	r3, r3, #32
 800b766:	2b00      	cmp	r3, #0
 800b768:	d016      	beq.n	800b798 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b76a:	2101      	movs	r1, #1
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 fc3c 	bl	800bfea <USBH_SetFeature>
 800b772:	4603      	mov	r3, r0
 800b774:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b776:	7bbb      	ldrb	r3, [r7, #14]
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d103      	bne.n	800b786 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	220a      	movs	r2, #10
 800b782:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b784:	e0bd      	b.n	800b902 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800b786:	7bbb      	ldrb	r3, [r7, #14]
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	2b03      	cmp	r3, #3
 800b78c:	f040 80b9 	bne.w	800b902 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	220a      	movs	r2, #10
 800b794:	701a      	strb	r2, [r3, #0]
      break;
 800b796:	e0b4      	b.n	800b902 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	220a      	movs	r2, #10
 800b79c:	701a      	strb	r2, [r3, #0]
      break;
 800b79e:	e0b0      	b.n	800b902 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	f000 80ad 	beq.w	800b906 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	73fb      	strb	r3, [r7, #15]
 800b7b8:	e016      	b.n	800b7e8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b7ba:	7bfa      	ldrb	r2, [r7, #15]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	32de      	adds	r2, #222	; 0xde
 800b7c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c4:	791a      	ldrb	r2, [r3, #4]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d108      	bne.n	800b7e2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b7d0:	7bfa      	ldrb	r2, [r7, #15]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	32de      	adds	r2, #222	; 0xde
 800b7d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b7e0:	e005      	b.n	800b7ee <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b7e2:	7bfb      	ldrb	r3, [r7, #15]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	73fb      	strb	r3, [r7, #15]
 800b7e8:	7bfb      	ldrb	r3, [r7, #15]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d0e5      	beq.n	800b7ba <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d016      	beq.n	800b826 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7fe:	689b      	ldr	r3, [r3, #8]
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	4798      	blx	r3
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d109      	bne.n	800b81e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2206      	movs	r2, #6
 800b80e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b816:	2103      	movs	r1, #3
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b81c:	e073      	b.n	800b906 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	220d      	movs	r2, #13
 800b822:	701a      	strb	r2, [r3, #0]
      break;
 800b824:	e06f      	b.n	800b906 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	220d      	movs	r2, #13
 800b82a:	701a      	strb	r2, [r3, #0]
      break;
 800b82c:	e06b      	b.n	800b906 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b834:	2b00      	cmp	r3, #0
 800b836:	d017      	beq.n	800b868 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b83e:	691b      	ldr	r3, [r3, #16]
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	4798      	blx	r3
 800b844:	4603      	mov	r3, r0
 800b846:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b848:	7bbb      	ldrb	r3, [r7, #14]
 800b84a:	b2db      	uxtb	r3, r3
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d103      	bne.n	800b858 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	220b      	movs	r2, #11
 800b854:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b856:	e058      	b.n	800b90a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800b858:	7bbb      	ldrb	r3, [r7, #14]
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	2b02      	cmp	r3, #2
 800b85e:	d154      	bne.n	800b90a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	220d      	movs	r2, #13
 800b864:	701a      	strb	r2, [r3, #0]
      break;
 800b866:	e050      	b.n	800b90a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	220d      	movs	r2, #13
 800b86c:	701a      	strb	r2, [r3, #0]
      break;
 800b86e:	e04c      	b.n	800b90a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b876:	2b00      	cmp	r3, #0
 800b878:	d049      	beq.n	800b90e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b880:	695b      	ldr	r3, [r3, #20]
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	4798      	blx	r3
      }
      break;
 800b886:	e042      	b.n	800b90e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f7ff fd67 	bl	800b364 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d009      	beq.n	800b8b4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8a6:	68db      	ldr	r3, [r3, #12]
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d005      	beq.n	800b8ca <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b8c4:	2105      	movs	r1, #5
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d107      	bne.n	800b8e6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f7ff fe20 	bl	800b524 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b8e4:	e014      	b.n	800b910 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f003 fe32 	bl	800f550 <USBH_LL_Start>
      break;
 800b8ec:	e010      	b.n	800b910 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800b8ee:	bf00      	nop
 800b8f0:	e00e      	b.n	800b910 <USBH_Process+0x3cc>
      break;
 800b8f2:	bf00      	nop
 800b8f4:	e00c      	b.n	800b910 <USBH_Process+0x3cc>
      break;
 800b8f6:	bf00      	nop
 800b8f8:	e00a      	b.n	800b910 <USBH_Process+0x3cc>
    break;
 800b8fa:	bf00      	nop
 800b8fc:	e008      	b.n	800b910 <USBH_Process+0x3cc>
      break;
 800b8fe:	bf00      	nop
 800b900:	e006      	b.n	800b910 <USBH_Process+0x3cc>
      break;
 800b902:	bf00      	nop
 800b904:	e004      	b.n	800b910 <USBH_Process+0x3cc>
      break;
 800b906:	bf00      	nop
 800b908:	e002      	b.n	800b910 <USBH_Process+0x3cc>
      break;
 800b90a:	bf00      	nop
 800b90c:	e000      	b.n	800b910 <USBH_Process+0x3cc>
      break;
 800b90e:	bf00      	nop
  }
  return USBH_OK;
 800b910:	2300      	movs	r3, #0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3710      	adds	r7, #16
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop

0800b91c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b088      	sub	sp, #32
 800b920:	af04      	add	r7, sp, #16
 800b922:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b924:	2301      	movs	r3, #1
 800b926:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b928:	2301      	movs	r3, #1
 800b92a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	785b      	ldrb	r3, [r3, #1]
 800b930:	2b07      	cmp	r3, #7
 800b932:	f200 81c1 	bhi.w	800bcb8 <USBH_HandleEnum+0x39c>
 800b936:	a201      	add	r2, pc, #4	; (adr r2, 800b93c <USBH_HandleEnum+0x20>)
 800b938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b93c:	0800b95d 	.word	0x0800b95d
 800b940:	0800ba1b 	.word	0x0800ba1b
 800b944:	0800ba85 	.word	0x0800ba85
 800b948:	0800bb13 	.word	0x0800bb13
 800b94c:	0800bb7d 	.word	0x0800bb7d
 800b950:	0800bbed 	.word	0x0800bbed
 800b954:	0800bc33 	.word	0x0800bc33
 800b958:	0800bc79 	.word	0x0800bc79
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b95c:	2108      	movs	r1, #8
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 fa50 	bl	800be04 <USBH_Get_DevDesc>
 800b964:	4603      	mov	r3, r0
 800b966:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b968:	7bbb      	ldrb	r3, [r7, #14]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d130      	bne.n	800b9d0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2201      	movs	r2, #1
 800b97c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	7919      	ldrb	r1, [r3, #4]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b992:	b292      	uxth	r2, r2
 800b994:	9202      	str	r2, [sp, #8]
 800b996:	2200      	movs	r2, #0
 800b998:	9201      	str	r2, [sp, #4]
 800b99a:	9300      	str	r3, [sp, #0]
 800b99c:	4603      	mov	r3, r0
 800b99e:	2280      	movs	r2, #128	; 0x80
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f001 f865 	bl	800ca70 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	7959      	ldrb	r1, [r3, #5]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b9ba:	b292      	uxth	r2, r2
 800b9bc:	9202      	str	r2, [sp, #8]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	9201      	str	r2, [sp, #4]
 800b9c2:	9300      	str	r3, [sp, #0]
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f001 f851 	bl	800ca70 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b9ce:	e175      	b.n	800bcbc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b9d0:	7bbb      	ldrb	r3, [r7, #14]
 800b9d2:	2b03      	cmp	r3, #3
 800b9d4:	f040 8172 	bne.w	800bcbc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b9de:	3301      	adds	r3, #1
 800b9e0:	b2da      	uxtb	r2, r3
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b9ee:	2b03      	cmp	r3, #3
 800b9f0:	d903      	bls.n	800b9fa <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	220d      	movs	r2, #13
 800b9f6:	701a      	strb	r2, [r3, #0]
      break;
 800b9f8:	e160      	b.n	800bcbc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	795b      	ldrb	r3, [r3, #5]
 800b9fe:	4619      	mov	r1, r3
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f001 f885 	bl	800cb10 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	791b      	ldrb	r3, [r3, #4]
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f001 f87f 	bl	800cb10 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2200      	movs	r2, #0
 800ba16:	701a      	strb	r2, [r3, #0]
      break;
 800ba18:	e150      	b.n	800bcbc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ba1a:	2112      	movs	r1, #18
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f000 f9f1 	bl	800be04 <USBH_Get_DevDesc>
 800ba22:	4603      	mov	r3, r0
 800ba24:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ba26:	7bbb      	ldrb	r3, [r7, #14]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d103      	bne.n	800ba34 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2202      	movs	r2, #2
 800ba30:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ba32:	e145      	b.n	800bcc0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba34:	7bbb      	ldrb	r3, [r7, #14]
 800ba36:	2b03      	cmp	r3, #3
 800ba38:	f040 8142 	bne.w	800bcc0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ba42:	3301      	adds	r3, #1
 800ba44:	b2da      	uxtb	r2, r3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ba52:	2b03      	cmp	r3, #3
 800ba54:	d903      	bls.n	800ba5e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	220d      	movs	r2, #13
 800ba5a:	701a      	strb	r2, [r3, #0]
      break;
 800ba5c:	e130      	b.n	800bcc0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	795b      	ldrb	r3, [r3, #5]
 800ba62:	4619      	mov	r1, r3
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f001 f853 	bl	800cb10 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	791b      	ldrb	r3, [r3, #4]
 800ba6e:	4619      	mov	r1, r3
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f001 f84d 	bl	800cb10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	701a      	strb	r2, [r3, #0]
      break;
 800ba82:	e11d      	b.n	800bcc0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ba84:	2101      	movs	r1, #1
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 fa68 	bl	800bf5c <USBH_SetAddress>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ba90:	7bbb      	ldrb	r3, [r7, #14]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d132      	bne.n	800bafc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ba96:	2002      	movs	r0, #2
 800ba98:	f003 fee5 	bl	800f866 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2203      	movs	r2, #3
 800baa8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	7919      	ldrb	r1, [r3, #4]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800babe:	b292      	uxth	r2, r2
 800bac0:	9202      	str	r2, [sp, #8]
 800bac2:	2200      	movs	r2, #0
 800bac4:	9201      	str	r2, [sp, #4]
 800bac6:	9300      	str	r3, [sp, #0]
 800bac8:	4603      	mov	r3, r0
 800baca:	2280      	movs	r2, #128	; 0x80
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 ffcf 	bl	800ca70 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	7959      	ldrb	r1, [r3, #5]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bae2:	687a      	ldr	r2, [r7, #4]
 800bae4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bae6:	b292      	uxth	r2, r2
 800bae8:	9202      	str	r2, [sp, #8]
 800baea:	2200      	movs	r2, #0
 800baec:	9201      	str	r2, [sp, #4]
 800baee:	9300      	str	r3, [sp, #0]
 800baf0:	4603      	mov	r3, r0
 800baf2:	2200      	movs	r2, #0
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 ffbb 	bl	800ca70 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bafa:	e0e3      	b.n	800bcc4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bafc:	7bbb      	ldrb	r3, [r7, #14]
 800bafe:	2b03      	cmp	r3, #3
 800bb00:	f040 80e0 	bne.w	800bcc4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	220d      	movs	r2, #13
 800bb08:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	705a      	strb	r2, [r3, #1]
      break;
 800bb10:	e0d8      	b.n	800bcc4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800bb12:	2109      	movs	r1, #9
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 f99d 	bl	800be54 <USBH_Get_CfgDesc>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bb1e:	7bbb      	ldrb	r3, [r7, #14]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d103      	bne.n	800bb2c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2204      	movs	r2, #4
 800bb28:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bb2a:	e0cd      	b.n	800bcc8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bb2c:	7bbb      	ldrb	r3, [r7, #14]
 800bb2e:	2b03      	cmp	r3, #3
 800bb30:	f040 80ca 	bne.w	800bcc8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	b2da      	uxtb	r2, r3
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bb4a:	2b03      	cmp	r3, #3
 800bb4c:	d903      	bls.n	800bb56 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	220d      	movs	r2, #13
 800bb52:	701a      	strb	r2, [r3, #0]
      break;
 800bb54:	e0b8      	b.n	800bcc8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	795b      	ldrb	r3, [r3, #5]
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 ffd7 	bl	800cb10 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	791b      	ldrb	r3, [r3, #4]
 800bb66:	4619      	mov	r1, r3
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 ffd1 	bl	800cb10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2200      	movs	r2, #0
 800bb78:	701a      	strb	r2, [r3, #0]
      break;
 800bb7a:	e0a5      	b.n	800bcc8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800bb82:	4619      	mov	r1, r3
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 f965 	bl	800be54 <USBH_Get_CfgDesc>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bb8e:	7bbb      	ldrb	r3, [r7, #14]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d103      	bne.n	800bb9c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2205      	movs	r2, #5
 800bb98:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bb9a:	e097      	b.n	800bccc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bb9c:	7bbb      	ldrb	r3, [r7, #14]
 800bb9e:	2b03      	cmp	r3, #3
 800bba0:	f040 8094 	bne.w	800bccc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bbaa:	3301      	adds	r3, #1
 800bbac:	b2da      	uxtb	r2, r3
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bbba:	2b03      	cmp	r3, #3
 800bbbc:	d903      	bls.n	800bbc6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	220d      	movs	r2, #13
 800bbc2:	701a      	strb	r2, [r3, #0]
      break;
 800bbc4:	e082      	b.n	800bccc <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	795b      	ldrb	r3, [r3, #5]
 800bbca:	4619      	mov	r1, r3
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 ff9f 	bl	800cb10 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	791b      	ldrb	r3, [r3, #4]
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f000 ff99 	bl	800cb10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	701a      	strb	r2, [r3, #0]
      break;
 800bbea:	e06f      	b.n	800bccc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d019      	beq.n	800bc2a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bc02:	23ff      	movs	r3, #255	; 0xff
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f000 f949 	bl	800be9c <USBH_Get_StringDesc>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bc0e:	7bbb      	ldrb	r3, [r7, #14]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d103      	bne.n	800bc1c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2206      	movs	r2, #6
 800bc18:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bc1a:	e059      	b.n	800bcd0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bc1c:	7bbb      	ldrb	r3, [r7, #14]
 800bc1e:	2b03      	cmp	r3, #3
 800bc20:	d156      	bne.n	800bcd0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2206      	movs	r2, #6
 800bc26:	705a      	strb	r2, [r3, #1]
      break;
 800bc28:	e052      	b.n	800bcd0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2206      	movs	r2, #6
 800bc2e:	705a      	strb	r2, [r3, #1]
      break;
 800bc30:	e04e      	b.n	800bcd0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d019      	beq.n	800bc70 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bc48:	23ff      	movs	r3, #255	; 0xff
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 f926 	bl	800be9c <USBH_Get_StringDesc>
 800bc50:	4603      	mov	r3, r0
 800bc52:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bc54:	7bbb      	ldrb	r3, [r7, #14]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d103      	bne.n	800bc62 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2207      	movs	r2, #7
 800bc5e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bc60:	e038      	b.n	800bcd4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bc62:	7bbb      	ldrb	r3, [r7, #14]
 800bc64:	2b03      	cmp	r3, #3
 800bc66:	d135      	bne.n	800bcd4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2207      	movs	r2, #7
 800bc6c:	705a      	strb	r2, [r3, #1]
      break;
 800bc6e:	e031      	b.n	800bcd4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2207      	movs	r2, #7
 800bc74:	705a      	strb	r2, [r3, #1]
      break;
 800bc76:	e02d      	b.n	800bcd4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d017      	beq.n	800bcb2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bc8e:	23ff      	movs	r3, #255	; 0xff
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 f903 	bl	800be9c <USBH_Get_StringDesc>
 800bc96:	4603      	mov	r3, r0
 800bc98:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bc9a:	7bbb      	ldrb	r3, [r7, #14]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d102      	bne.n	800bca6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800bca0:	2300      	movs	r3, #0
 800bca2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800bca4:	e018      	b.n	800bcd8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bca6:	7bbb      	ldrb	r3, [r7, #14]
 800bca8:	2b03      	cmp	r3, #3
 800bcaa:	d115      	bne.n	800bcd8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800bcac:	2300      	movs	r3, #0
 800bcae:	73fb      	strb	r3, [r7, #15]
      break;
 800bcb0:	e012      	b.n	800bcd8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	73fb      	strb	r3, [r7, #15]
      break;
 800bcb6:	e00f      	b.n	800bcd8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800bcb8:	bf00      	nop
 800bcba:	e00e      	b.n	800bcda <USBH_HandleEnum+0x3be>
      break;
 800bcbc:	bf00      	nop
 800bcbe:	e00c      	b.n	800bcda <USBH_HandleEnum+0x3be>
      break;
 800bcc0:	bf00      	nop
 800bcc2:	e00a      	b.n	800bcda <USBH_HandleEnum+0x3be>
      break;
 800bcc4:	bf00      	nop
 800bcc6:	e008      	b.n	800bcda <USBH_HandleEnum+0x3be>
      break;
 800bcc8:	bf00      	nop
 800bcca:	e006      	b.n	800bcda <USBH_HandleEnum+0x3be>
      break;
 800bccc:	bf00      	nop
 800bcce:	e004      	b.n	800bcda <USBH_HandleEnum+0x3be>
      break;
 800bcd0:	bf00      	nop
 800bcd2:	e002      	b.n	800bcda <USBH_HandleEnum+0x3be>
      break;
 800bcd4:	bf00      	nop
 800bcd6:	e000      	b.n	800bcda <USBH_HandleEnum+0x3be>
      break;
 800bcd8:	bf00      	nop
  }
  return Status;
 800bcda:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3710      	adds	r7, #16
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	683a      	ldr	r2, [r7, #0]
 800bcf2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800bcf6:	bf00      	nop
 800bcf8:	370c      	adds	r7, #12
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr

0800bd02 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b082      	sub	sp, #8
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bd10:	1c5a      	adds	r2, r3, #1
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 f804 	bl	800bd26 <USBH_HandleSof>
}
 800bd1e:	bf00      	nop
 800bd20:	3708      	adds	r7, #8
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}

0800bd26 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bd26:	b580      	push	{r7, lr}
 800bd28:	b082      	sub	sp, #8
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	2b0b      	cmp	r3, #11
 800bd36:	d10a      	bne.n	800bd4e <USBH_HandleSof+0x28>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d005      	beq.n	800bd4e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd48:	699b      	ldr	r3, [r3, #24]
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	4798      	blx	r3
  }
}
 800bd4e:	bf00      	nop
 800bd50:	3708      	adds	r7, #8
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800bd56:	b480      	push	{r7}
 800bd58:	b083      	sub	sp, #12
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2201      	movs	r2, #1
 800bd62:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800bd66:	bf00      	nop
}
 800bd68:	370c      	adds	r7, #12
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr

0800bd72 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800bd72:	b480      	push	{r7}
 800bd74:	b083      	sub	sp, #12
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800bd82:	bf00      	nop
}
 800bd84:	370c      	adds	r7, #12
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr

0800bd8e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800bd8e:	b480      	push	{r7}
 800bd90:	b083      	sub	sp, #12
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2201      	movs	r2, #1
 800bd9a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2200      	movs	r2, #0
 800bda2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bdae:	2300      	movs	r3, #0
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f003 fbd2 	bl	800f586 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	791b      	ldrb	r3, [r3, #4]
 800bde6:	4619      	mov	r1, r3
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 fe91 	bl	800cb10 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	795b      	ldrb	r3, [r3, #5]
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 fe8b 	bl	800cb10 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3708      	adds	r7, #8
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b086      	sub	sp, #24
 800be08:	af02      	add	r7, sp, #8
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	460b      	mov	r3, r1
 800be0e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800be16:	78fb      	ldrb	r3, [r7, #3]
 800be18:	b29b      	uxth	r3, r3
 800be1a:	9300      	str	r3, [sp, #0]
 800be1c:	4613      	mov	r3, r2
 800be1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800be22:	2100      	movs	r1, #0
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 f864 	bl	800bef2 <USBH_GetDescriptor>
 800be2a:	4603      	mov	r3, r0
 800be2c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800be2e:	7bfb      	ldrb	r3, [r7, #15]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d10a      	bne.n	800be4a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f203 3026 	addw	r0, r3, #806	; 0x326
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800be40:	78fa      	ldrb	r2, [r7, #3]
 800be42:	b292      	uxth	r2, r2
 800be44:	4619      	mov	r1, r3
 800be46:	f000 f918 	bl	800c07a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800be4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3710      	adds	r7, #16
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800be54:	b580      	push	{r7, lr}
 800be56:	b086      	sub	sp, #24
 800be58:	af02      	add	r7, sp, #8
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	460b      	mov	r3, r1
 800be5e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	331c      	adds	r3, #28
 800be64:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800be66:	887b      	ldrh	r3, [r7, #2]
 800be68:	9300      	str	r3, [sp, #0]
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be70:	2100      	movs	r1, #0
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 f83d 	bl	800bef2 <USBH_GetDescriptor>
 800be78:	4603      	mov	r3, r0
 800be7a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800be7c:	7bfb      	ldrb	r3, [r7, #15]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d107      	bne.n	800be92 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800be82:	887b      	ldrh	r3, [r7, #2]
 800be84:	461a      	mov	r2, r3
 800be86:	68b9      	ldr	r1, [r7, #8]
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f000 f987 	bl	800c19c <USBH_ParseCfgDesc>
 800be8e:	4603      	mov	r3, r0
 800be90:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800be92:	7bfb      	ldrb	r3, [r7, #15]
}
 800be94:	4618      	mov	r0, r3
 800be96:	3710      	adds	r7, #16
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b088      	sub	sp, #32
 800bea0:	af02      	add	r7, sp, #8
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	607a      	str	r2, [r7, #4]
 800bea6:	461a      	mov	r2, r3
 800bea8:	460b      	mov	r3, r1
 800beaa:	72fb      	strb	r3, [r7, #11]
 800beac:	4613      	mov	r3, r2
 800beae:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800beb0:	7afb      	ldrb	r3, [r7, #11]
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800beb8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800bec0:	893b      	ldrh	r3, [r7, #8]
 800bec2:	9300      	str	r3, [sp, #0]
 800bec4:	460b      	mov	r3, r1
 800bec6:	2100      	movs	r1, #0
 800bec8:	68f8      	ldr	r0, [r7, #12]
 800beca:	f000 f812 	bl	800bef2 <USBH_GetDescriptor>
 800bece:	4603      	mov	r3, r0
 800bed0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800bed2:	7dfb      	ldrb	r3, [r7, #23]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d107      	bne.n	800bee8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bede:	893a      	ldrh	r2, [r7, #8]
 800bee0:	6879      	ldr	r1, [r7, #4]
 800bee2:	4618      	mov	r0, r3
 800bee4:	f000 fb24 	bl	800c530 <USBH_ParseStringDesc>
  }

  return status;
 800bee8:	7dfb      	ldrb	r3, [r7, #23]
}
 800beea:	4618      	mov	r0, r3
 800beec:	3718      	adds	r7, #24
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}

0800bef2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800bef2:	b580      	push	{r7, lr}
 800bef4:	b084      	sub	sp, #16
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	60f8      	str	r0, [r7, #12]
 800befa:	607b      	str	r3, [r7, #4]
 800befc:	460b      	mov	r3, r1
 800befe:	72fb      	strb	r3, [r7, #11]
 800bf00:	4613      	mov	r3, r2
 800bf02:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	789b      	ldrb	r3, [r3, #2]
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d11c      	bne.n	800bf46 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bf0c:	7afb      	ldrb	r3, [r7, #11]
 800bf0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bf12:	b2da      	uxtb	r2, r3
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2206      	movs	r2, #6
 800bf1c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	893a      	ldrh	r2, [r7, #8]
 800bf22:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bf24:	893b      	ldrh	r3, [r7, #8]
 800bf26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bf2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf2e:	d104      	bne.n	800bf3a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f240 4209 	movw	r2, #1033	; 0x409
 800bf36:	829a      	strh	r2, [r3, #20]
 800bf38:	e002      	b.n	800bf40 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	8b3a      	ldrh	r2, [r7, #24]
 800bf44:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bf46:	8b3b      	ldrh	r3, [r7, #24]
 800bf48:	461a      	mov	r2, r3
 800bf4a:	6879      	ldr	r1, [r7, #4]
 800bf4c:	68f8      	ldr	r0, [r7, #12]
 800bf4e:	f000 fb3d 	bl	800c5cc <USBH_CtlReq>
 800bf52:	4603      	mov	r3, r0
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3710      	adds	r7, #16
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	460b      	mov	r3, r1
 800bf66:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	789b      	ldrb	r3, [r3, #2]
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d10f      	bne.n	800bf90 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2205      	movs	r2, #5
 800bf7a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bf7c:	78fb      	ldrb	r3, [r7, #3]
 800bf7e:	b29a      	uxth	r2, r3
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bf90:	2200      	movs	r2, #0
 800bf92:	2100      	movs	r1, #0
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 fb19 	bl	800c5cc <USBH_CtlReq>
 800bf9a:	4603      	mov	r3, r0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3708      	adds	r7, #8
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	460b      	mov	r3, r1
 800bfae:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	789b      	ldrb	r3, [r3, #2]
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d10e      	bne.n	800bfd6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2209      	movs	r2, #9
 800bfc2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	887a      	ldrh	r2, [r7, #2]
 800bfc8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	2100      	movs	r1, #0
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 faf6 	bl	800c5cc <USBH_CtlReq>
 800bfe0:	4603      	mov	r3, r0
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3708      	adds	r7, #8
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b082      	sub	sp, #8
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
 800bff2:	460b      	mov	r3, r1
 800bff4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	789b      	ldrb	r3, [r3, #2]
 800bffa:	2b01      	cmp	r3, #1
 800bffc:	d10f      	bne.n	800c01e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2200      	movs	r2, #0
 800c002:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2203      	movs	r2, #3
 800c008:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c00a:	78fb      	ldrb	r3, [r7, #3]
 800c00c:	b29a      	uxth	r2, r3
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2200      	movs	r2, #0
 800c016:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c01e:	2200      	movs	r2, #0
 800c020:	2100      	movs	r1, #0
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 fad2 	bl	800c5cc <USBH_CtlReq>
 800c028:	4603      	mov	r3, r0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3708      	adds	r7, #8
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}

0800c032 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c032:	b580      	push	{r7, lr}
 800c034:	b082      	sub	sp, #8
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
 800c03a:	460b      	mov	r3, r1
 800c03c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	789b      	ldrb	r3, [r3, #2]
 800c042:	2b01      	cmp	r3, #1
 800c044:	d10f      	bne.n	800c066 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2202      	movs	r2, #2
 800c04a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2201      	movs	r2, #1
 800c050:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2200      	movs	r2, #0
 800c056:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c058:	78fb      	ldrb	r3, [r7, #3]
 800c05a:	b29a      	uxth	r2, r3
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2200      	movs	r2, #0
 800c064:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800c066:	2200      	movs	r2, #0
 800c068:	2100      	movs	r1, #0
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 faae 	bl	800c5cc <USBH_CtlReq>
 800c070:	4603      	mov	r3, r0
}
 800c072:	4618      	mov	r0, r3
 800c074:	3708      	adds	r7, #8
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}

0800c07a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c07a:	b480      	push	{r7}
 800c07c:	b085      	sub	sp, #20
 800c07e:	af00      	add	r7, sp, #0
 800c080:	60f8      	str	r0, [r7, #12]
 800c082:	60b9      	str	r1, [r7, #8]
 800c084:	4613      	mov	r3, r2
 800c086:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	781a      	ldrb	r2, [r3, #0]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	785a      	ldrb	r2, [r3, #1]
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	3302      	adds	r3, #2
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	3303      	adds	r3, #3
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	b29b      	uxth	r3, r3
 800c0a8:	021b      	lsls	r3, r3, #8
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	b29a      	uxth	r2, r3
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	791a      	ldrb	r2, [r3, #4]
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	795a      	ldrb	r2, [r3, #5]
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	799a      	ldrb	r2, [r3, #6]
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	79da      	ldrb	r2, [r3, #7]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	79db      	ldrb	r3, [r3, #7]
 800c0d8:	2b20      	cmp	r3, #32
 800c0da:	dc11      	bgt.n	800c100 <USBH_ParseDevDesc+0x86>
 800c0dc:	2b08      	cmp	r3, #8
 800c0de:	db16      	blt.n	800c10e <USBH_ParseDevDesc+0x94>
 800c0e0:	3b08      	subs	r3, #8
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c0e8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c0ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	bf14      	ite	ne
 800c0f4:	2301      	movne	r3, #1
 800c0f6:	2300      	moveq	r3, #0
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d102      	bne.n	800c104 <USBH_ParseDevDesc+0x8a>
 800c0fe:	e006      	b.n	800c10e <USBH_ParseDevDesc+0x94>
 800c100:	2b40      	cmp	r3, #64	; 0x40
 800c102:	d104      	bne.n	800c10e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	79da      	ldrb	r2, [r3, #7]
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	71da      	strb	r2, [r3, #7]
      break;
 800c10c:	e003      	b.n	800c116 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2240      	movs	r2, #64	; 0x40
 800c112:	71da      	strb	r2, [r3, #7]
      break;
 800c114:	bf00      	nop
  }

  if (length > 8U)
 800c116:	88fb      	ldrh	r3, [r7, #6]
 800c118:	2b08      	cmp	r3, #8
 800c11a:	d939      	bls.n	800c190 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	3308      	adds	r3, #8
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	b29a      	uxth	r2, r3
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	3309      	adds	r3, #9
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	b29b      	uxth	r3, r3
 800c12c:	021b      	lsls	r3, r3, #8
 800c12e:	b29b      	uxth	r3, r3
 800c130:	4313      	orrs	r3, r2
 800c132:	b29a      	uxth	r2, r3
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	330a      	adds	r3, #10
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	b29a      	uxth	r2, r3
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	330b      	adds	r3, #11
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	b29b      	uxth	r3, r3
 800c148:	021b      	lsls	r3, r3, #8
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	4313      	orrs	r3, r2
 800c14e:	b29a      	uxth	r2, r3
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	330c      	adds	r3, #12
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	b29a      	uxth	r2, r3
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	330d      	adds	r3, #13
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	b29b      	uxth	r3, r3
 800c164:	021b      	lsls	r3, r3, #8
 800c166:	b29b      	uxth	r3, r3
 800c168:	4313      	orrs	r3, r2
 800c16a:	b29a      	uxth	r2, r3
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	7b9a      	ldrb	r2, [r3, #14]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	7bda      	ldrb	r2, [r3, #15]
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	7c1a      	ldrb	r2, [r3, #16]
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	7c5a      	ldrb	r2, [r3, #17]
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	745a      	strb	r2, [r3, #17]
  }
}
 800c190:	bf00      	nop
 800c192:	3714      	adds	r7, #20
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr

0800c19c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b08c      	sub	sp, #48	; 0x30
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	60f8      	str	r0, [r7, #12]
 800c1a4:	60b9      	str	r1, [r7, #8]
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c1b0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	781a      	ldrb	r2, [r3, #0]
 800c1d0:	6a3b      	ldr	r3, [r7, #32]
 800c1d2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	785a      	ldrb	r2, [r3, #1]
 800c1d8:	6a3b      	ldr	r3, [r7, #32]
 800c1da:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	3302      	adds	r3, #2
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	b29a      	uxth	r2, r3
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	3303      	adds	r3, #3
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	b29b      	uxth	r3, r3
 800c1ec:	021b      	lsls	r3, r3, #8
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1f8:	bf28      	it	cs
 800c1fa:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c1fe:	b29a      	uxth	r2, r3
 800c200:	6a3b      	ldr	r3, [r7, #32]
 800c202:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	791a      	ldrb	r2, [r3, #4]
 800c208:	6a3b      	ldr	r3, [r7, #32]
 800c20a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	795a      	ldrb	r2, [r3, #5]
 800c210:	6a3b      	ldr	r3, [r7, #32]
 800c212:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	799a      	ldrb	r2, [r3, #6]
 800c218:	6a3b      	ldr	r3, [r7, #32]
 800c21a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	79da      	ldrb	r2, [r3, #7]
 800c220:	6a3b      	ldr	r3, [r7, #32]
 800c222:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	7a1a      	ldrb	r2, [r3, #8]
 800c228:	6a3b      	ldr	r3, [r7, #32]
 800c22a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800c22c:	6a3b      	ldr	r3, [r7, #32]
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	2b09      	cmp	r3, #9
 800c232:	d002      	beq.n	800c23a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c234:	6a3b      	ldr	r3, [r7, #32]
 800c236:	2209      	movs	r2, #9
 800c238:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c23a:	88fb      	ldrh	r3, [r7, #6]
 800c23c:	2b09      	cmp	r3, #9
 800c23e:	f240 809d 	bls.w	800c37c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800c242:	2309      	movs	r3, #9
 800c244:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c246:	2300      	movs	r3, #0
 800c248:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c24a:	e081      	b.n	800c350 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c24c:	f107 0316 	add.w	r3, r7, #22
 800c250:	4619      	mov	r1, r3
 800c252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c254:	f000 f99f 	bl	800c596 <USBH_GetNextDesc>
 800c258:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c25c:	785b      	ldrb	r3, [r3, #1]
 800c25e:	2b04      	cmp	r3, #4
 800c260:	d176      	bne.n	800c350 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	2b09      	cmp	r3, #9
 800c268:	d002      	beq.n	800c270 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26c:	2209      	movs	r2, #9
 800c26e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c274:	221a      	movs	r2, #26
 800c276:	fb02 f303 	mul.w	r3, r2, r3
 800c27a:	3308      	adds	r3, #8
 800c27c:	6a3a      	ldr	r2, [r7, #32]
 800c27e:	4413      	add	r3, r2
 800c280:	3302      	adds	r3, #2
 800c282:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c286:	69f8      	ldr	r0, [r7, #28]
 800c288:	f000 f87e 	bl	800c388 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c28c:	2300      	movs	r3, #0
 800c28e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c292:	2300      	movs	r3, #0
 800c294:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c296:	e043      	b.n	800c320 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c298:	f107 0316 	add.w	r3, r7, #22
 800c29c:	4619      	mov	r1, r3
 800c29e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2a0:	f000 f979 	bl	800c596 <USBH_GetNextDesc>
 800c2a4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a8:	785b      	ldrb	r3, [r3, #1]
 800c2aa:	2b05      	cmp	r3, #5
 800c2ac:	d138      	bne.n	800c320 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800c2ae:	69fb      	ldr	r3, [r7, #28]
 800c2b0:	795b      	ldrb	r3, [r3, #5]
 800c2b2:	2b01      	cmp	r3, #1
 800c2b4:	d10f      	bne.n	800c2d6 <USBH_ParseCfgDesc+0x13a>
 800c2b6:	69fb      	ldr	r3, [r7, #28]
 800c2b8:	799b      	ldrb	r3, [r3, #6]
 800c2ba:	2b02      	cmp	r3, #2
 800c2bc:	d10b      	bne.n	800c2d6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c2be:	69fb      	ldr	r3, [r7, #28]
 800c2c0:	79db      	ldrb	r3, [r3, #7]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d10f      	bne.n	800c2e6 <USBH_ParseCfgDesc+0x14a>
 800c2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	2b09      	cmp	r3, #9
 800c2cc:	d00b      	beq.n	800c2e6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800c2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d0:	2209      	movs	r2, #9
 800c2d2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c2d4:	e007      	b.n	800c2e6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800c2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	2b07      	cmp	r3, #7
 800c2dc:	d004      	beq.n	800c2e8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e0:	2207      	movs	r2, #7
 800c2e2:	701a      	strb	r2, [r3, #0]
 800c2e4:	e000      	b.n	800c2e8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c2e6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c2e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c2f0:	3201      	adds	r2, #1
 800c2f2:	00d2      	lsls	r2, r2, #3
 800c2f4:	211a      	movs	r1, #26
 800c2f6:	fb01 f303 	mul.w	r3, r1, r3
 800c2fa:	4413      	add	r3, r2
 800c2fc:	3308      	adds	r3, #8
 800c2fe:	6a3a      	ldr	r2, [r7, #32]
 800c300:	4413      	add	r3, r2
 800c302:	3304      	adds	r3, #4
 800c304:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c308:	69b9      	ldr	r1, [r7, #24]
 800c30a:	68f8      	ldr	r0, [r7, #12]
 800c30c:	f000 f86b 	bl	800c3e6 <USBH_ParseEPDesc>
 800c310:	4603      	mov	r3, r0
 800c312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c316:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c31a:	3301      	adds	r3, #1
 800c31c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	791b      	ldrb	r3, [r3, #4]
 800c324:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c328:	429a      	cmp	r2, r3
 800c32a:	d204      	bcs.n	800c336 <USBH_ParseCfgDesc+0x19a>
 800c32c:	6a3b      	ldr	r3, [r7, #32]
 800c32e:	885a      	ldrh	r2, [r3, #2]
 800c330:	8afb      	ldrh	r3, [r7, #22]
 800c332:	429a      	cmp	r2, r3
 800c334:	d8b0      	bhi.n	800c298 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c336:	69fb      	ldr	r3, [r7, #28]
 800c338:	791b      	ldrb	r3, [r3, #4]
 800c33a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c33e:	429a      	cmp	r2, r3
 800c340:	d201      	bcs.n	800c346 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800c342:	2303      	movs	r3, #3
 800c344:	e01c      	b.n	800c380 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800c346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c34a:	3301      	adds	r3, #1
 800c34c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c354:	2b01      	cmp	r3, #1
 800c356:	d805      	bhi.n	800c364 <USBH_ParseCfgDesc+0x1c8>
 800c358:	6a3b      	ldr	r3, [r7, #32]
 800c35a:	885a      	ldrh	r2, [r3, #2]
 800c35c:	8afb      	ldrh	r3, [r7, #22]
 800c35e:	429a      	cmp	r2, r3
 800c360:	f63f af74 	bhi.w	800c24c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c364:	6a3b      	ldr	r3, [r7, #32]
 800c366:	791b      	ldrb	r3, [r3, #4]
 800c368:	2b02      	cmp	r3, #2
 800c36a:	bf28      	it	cs
 800c36c:	2302      	movcs	r3, #2
 800c36e:	b2db      	uxtb	r3, r3
 800c370:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c374:	429a      	cmp	r2, r3
 800c376:	d201      	bcs.n	800c37c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800c378:	2303      	movs	r3, #3
 800c37a:	e001      	b.n	800c380 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800c37c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c380:	4618      	mov	r0, r3
 800c382:	3730      	adds	r7, #48	; 0x30
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	781a      	ldrb	r2, [r3, #0]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	785a      	ldrb	r2, [r3, #1]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	789a      	ldrb	r2, [r3, #2]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	78da      	ldrb	r2, [r3, #3]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	791a      	ldrb	r2, [r3, #4]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	795a      	ldrb	r2, [r3, #5]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	799a      	ldrb	r2, [r3, #6]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	79da      	ldrb	r2, [r3, #7]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	7a1a      	ldrb	r2, [r3, #8]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	721a      	strb	r2, [r3, #8]
}
 800c3da:	bf00      	nop
 800c3dc:	370c      	adds	r7, #12
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr

0800c3e6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800c3e6:	b480      	push	{r7}
 800c3e8:	b087      	sub	sp, #28
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	60f8      	str	r0, [r7, #12]
 800c3ee:	60b9      	str	r1, [r7, #8]
 800c3f0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	781a      	ldrb	r2, [r3, #0]
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	785a      	ldrb	r2, [r3, #1]
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	789a      	ldrb	r2, [r3, #2]
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	78da      	ldrb	r2, [r3, #3]
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	3304      	adds	r3, #4
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	b29a      	uxth	r2, r3
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	3305      	adds	r3, #5
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	b29b      	uxth	r3, r3
 800c426:	021b      	lsls	r3, r3, #8
 800c428:	b29b      	uxth	r3, r3
 800c42a:	4313      	orrs	r3, r2
 800c42c:	b29a      	uxth	r2, r3
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	799a      	ldrb	r2, [r3, #6]
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	889b      	ldrh	r3, [r3, #4]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d102      	bne.n	800c448 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800c442:	2303      	movs	r3, #3
 800c444:	75fb      	strb	r3, [r7, #23]
 800c446:	e033      	b.n	800c4b0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	889b      	ldrh	r3, [r3, #4]
 800c44c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c450:	f023 0307 	bic.w	r3, r3, #7
 800c454:	b29a      	uxth	r2, r3
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	889b      	ldrh	r3, [r3, #4]
 800c45e:	b21a      	sxth	r2, r3
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	3304      	adds	r3, #4
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	b299      	uxth	r1, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	3305      	adds	r3, #5
 800c46c:	781b      	ldrb	r3, [r3, #0]
 800c46e:	b29b      	uxth	r3, r3
 800c470:	021b      	lsls	r3, r3, #8
 800c472:	b29b      	uxth	r3, r3
 800c474:	430b      	orrs	r3, r1
 800c476:	b29b      	uxth	r3, r3
 800c478:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d110      	bne.n	800c4a2 <USBH_ParseEPDesc+0xbc>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	3304      	adds	r3, #4
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	b299      	uxth	r1, r3
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	3305      	adds	r3, #5
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	b29b      	uxth	r3, r3
 800c490:	021b      	lsls	r3, r3, #8
 800c492:	b29b      	uxth	r3, r3
 800c494:	430b      	orrs	r3, r1
 800c496:	b29b      	uxth	r3, r3
 800c498:	b21b      	sxth	r3, r3
 800c49a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c49e:	b21b      	sxth	r3, r3
 800c4a0:	e001      	b.n	800c4a6 <USBH_ParseEPDesc+0xc0>
 800c4a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	b21b      	sxth	r3, r3
 800c4aa:	b29a      	uxth	r2, r3
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d116      	bne.n	800c4e8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	78db      	ldrb	r3, [r3, #3]
 800c4be:	f003 0303 	and.w	r3, r3, #3
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	d005      	beq.n	800c4d2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	78db      	ldrb	r3, [r3, #3]
 800c4ca:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c4ce:	2b03      	cmp	r3, #3
 800c4d0:	d127      	bne.n	800c522 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	799b      	ldrb	r3, [r3, #6]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d003      	beq.n	800c4e2 <USBH_ParseEPDesc+0xfc>
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	799b      	ldrb	r3, [r3, #6]
 800c4de:	2b10      	cmp	r3, #16
 800c4e0:	d91f      	bls.n	800c522 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c4e2:	2303      	movs	r3, #3
 800c4e4:	75fb      	strb	r3, [r7, #23]
 800c4e6:	e01c      	b.n	800c522 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	78db      	ldrb	r3, [r3, #3]
 800c4ec:	f003 0303 	and.w	r3, r3, #3
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	d10a      	bne.n	800c50a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	799b      	ldrb	r3, [r3, #6]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d003      	beq.n	800c504 <USBH_ParseEPDesc+0x11e>
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	799b      	ldrb	r3, [r3, #6]
 800c500:	2b10      	cmp	r3, #16
 800c502:	d90e      	bls.n	800c522 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c504:	2303      	movs	r3, #3
 800c506:	75fb      	strb	r3, [r7, #23]
 800c508:	e00b      	b.n	800c522 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	78db      	ldrb	r3, [r3, #3]
 800c50e:	f003 0303 	and.w	r3, r3, #3
 800c512:	2b03      	cmp	r3, #3
 800c514:	d105      	bne.n	800c522 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	799b      	ldrb	r3, [r3, #6]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d101      	bne.n	800c522 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c51e:	2303      	movs	r3, #3
 800c520:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800c522:	7dfb      	ldrb	r3, [r7, #23]
}
 800c524:	4618      	mov	r0, r3
 800c526:	371c      	adds	r7, #28
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr

0800c530 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c530:	b480      	push	{r7}
 800c532:	b087      	sub	sp, #28
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	4613      	mov	r3, r2
 800c53c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	3301      	adds	r3, #1
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	2b03      	cmp	r3, #3
 800c546:	d120      	bne.n	800c58a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	1e9a      	subs	r2, r3, #2
 800c54e:	88fb      	ldrh	r3, [r7, #6]
 800c550:	4293      	cmp	r3, r2
 800c552:	bf28      	it	cs
 800c554:	4613      	movcs	r3, r2
 800c556:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	3302      	adds	r3, #2
 800c55c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c55e:	2300      	movs	r3, #0
 800c560:	82fb      	strh	r3, [r7, #22]
 800c562:	e00b      	b.n	800c57c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c564:	8afb      	ldrh	r3, [r7, #22]
 800c566:	68fa      	ldr	r2, [r7, #12]
 800c568:	4413      	add	r3, r2
 800c56a:	781a      	ldrb	r2, [r3, #0]
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	3301      	adds	r3, #1
 800c574:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c576:	8afb      	ldrh	r3, [r7, #22]
 800c578:	3302      	adds	r3, #2
 800c57a:	82fb      	strh	r3, [r7, #22]
 800c57c:	8afa      	ldrh	r2, [r7, #22]
 800c57e:	8abb      	ldrh	r3, [r7, #20]
 800c580:	429a      	cmp	r2, r3
 800c582:	d3ef      	bcc.n	800c564 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	2200      	movs	r2, #0
 800c588:	701a      	strb	r2, [r3, #0]
  }
}
 800c58a:	bf00      	nop
 800c58c:	371c      	adds	r7, #28
 800c58e:	46bd      	mov	sp, r7
 800c590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c594:	4770      	bx	lr

0800c596 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c596:	b480      	push	{r7}
 800c598:	b085      	sub	sp, #20
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
 800c59e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	881a      	ldrh	r2, [r3, #0]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	4413      	add	r3, r2
 800c5ac:	b29a      	uxth	r2, r3
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c5be:	68fb      	ldr	r3, [r7, #12]
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3714      	adds	r7, #20
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr

0800c5cc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b086      	sub	sp, #24
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	60f8      	str	r0, [r7, #12]
 800c5d4:	60b9      	str	r1, [r7, #8]
 800c5d6:	4613      	mov	r3, r2
 800c5d8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	789b      	ldrb	r3, [r3, #2]
 800c5e2:	2b01      	cmp	r3, #1
 800c5e4:	d002      	beq.n	800c5ec <USBH_CtlReq+0x20>
 800c5e6:	2b02      	cmp	r3, #2
 800c5e8:	d00f      	beq.n	800c60a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c5ea:	e027      	b.n	800c63c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	68ba      	ldr	r2, [r7, #8]
 800c5f0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	88fa      	ldrh	r2, [r7, #6]
 800c5f6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2202      	movs	r2, #2
 800c602:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c604:	2301      	movs	r3, #1
 800c606:	75fb      	strb	r3, [r7, #23]
      break;
 800c608:	e018      	b.n	800c63c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c60a:	68f8      	ldr	r0, [r7, #12]
 800c60c:	f000 f81c 	bl	800c648 <USBH_HandleControl>
 800c610:	4603      	mov	r3, r0
 800c612:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c614:	7dfb      	ldrb	r3, [r7, #23]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d002      	beq.n	800c620 <USBH_CtlReq+0x54>
 800c61a:	7dfb      	ldrb	r3, [r7, #23]
 800c61c:	2b03      	cmp	r3, #3
 800c61e:	d106      	bne.n	800c62e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2201      	movs	r2, #1
 800c624:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2200      	movs	r2, #0
 800c62a:	761a      	strb	r2, [r3, #24]
      break;
 800c62c:	e005      	b.n	800c63a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c62e:	7dfb      	ldrb	r3, [r7, #23]
 800c630:	2b02      	cmp	r3, #2
 800c632:	d102      	bne.n	800c63a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2201      	movs	r2, #1
 800c638:	709a      	strb	r2, [r3, #2]
      break;
 800c63a:	bf00      	nop
  }
  return status;
 800c63c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3718      	adds	r7, #24
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
	...

0800c648 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b086      	sub	sp, #24
 800c64c:	af02      	add	r7, sp, #8
 800c64e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c650:	2301      	movs	r3, #1
 800c652:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c654:	2300      	movs	r3, #0
 800c656:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	7e1b      	ldrb	r3, [r3, #24]
 800c65c:	3b01      	subs	r3, #1
 800c65e:	2b0a      	cmp	r3, #10
 800c660:	f200 8156 	bhi.w	800c910 <USBH_HandleControl+0x2c8>
 800c664:	a201      	add	r2, pc, #4	; (adr r2, 800c66c <USBH_HandleControl+0x24>)
 800c666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c66a:	bf00      	nop
 800c66c:	0800c699 	.word	0x0800c699
 800c670:	0800c6b3 	.word	0x0800c6b3
 800c674:	0800c71d 	.word	0x0800c71d
 800c678:	0800c743 	.word	0x0800c743
 800c67c:	0800c77b 	.word	0x0800c77b
 800c680:	0800c7a5 	.word	0x0800c7a5
 800c684:	0800c7f7 	.word	0x0800c7f7
 800c688:	0800c819 	.word	0x0800c819
 800c68c:	0800c855 	.word	0x0800c855
 800c690:	0800c87b 	.word	0x0800c87b
 800c694:	0800c8b9 	.word	0x0800c8b9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f103 0110 	add.w	r1, r3, #16
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	795b      	ldrb	r3, [r3, #5]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f000 f943 	bl	800c930 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2202      	movs	r2, #2
 800c6ae:	761a      	strb	r2, [r3, #24]
      break;
 800c6b0:	e139      	b.n	800c926 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	795b      	ldrb	r3, [r3, #5]
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f003 f853 	bl	800f764 <USBH_LL_GetURBState>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c6c2:	7bbb      	ldrb	r3, [r7, #14]
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d11e      	bne.n	800c706 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	7c1b      	ldrb	r3, [r3, #16]
 800c6cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c6d0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	8adb      	ldrh	r3, [r3, #22]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d00a      	beq.n	800c6f0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c6da:	7b7b      	ldrb	r3, [r7, #13]
 800c6dc:	2b80      	cmp	r3, #128	; 0x80
 800c6de:	d103      	bne.n	800c6e8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2203      	movs	r2, #3
 800c6e4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c6e6:	e115      	b.n	800c914 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2205      	movs	r2, #5
 800c6ec:	761a      	strb	r2, [r3, #24]
      break;
 800c6ee:	e111      	b.n	800c914 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c6f0:	7b7b      	ldrb	r3, [r7, #13]
 800c6f2:	2b80      	cmp	r3, #128	; 0x80
 800c6f4:	d103      	bne.n	800c6fe <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2209      	movs	r2, #9
 800c6fa:	761a      	strb	r2, [r3, #24]
      break;
 800c6fc:	e10a      	b.n	800c914 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2207      	movs	r2, #7
 800c702:	761a      	strb	r2, [r3, #24]
      break;
 800c704:	e106      	b.n	800c914 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c706:	7bbb      	ldrb	r3, [r7, #14]
 800c708:	2b04      	cmp	r3, #4
 800c70a:	d003      	beq.n	800c714 <USBH_HandleControl+0xcc>
 800c70c:	7bbb      	ldrb	r3, [r7, #14]
 800c70e:	2b02      	cmp	r3, #2
 800c710:	f040 8100 	bne.w	800c914 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	220b      	movs	r2, #11
 800c718:	761a      	strb	r2, [r3, #24]
      break;
 800c71a:	e0fb      	b.n	800c914 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c722:	b29a      	uxth	r2, r3
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6899      	ldr	r1, [r3, #8]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	899a      	ldrh	r2, [r3, #12]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	791b      	ldrb	r3, [r3, #4]
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f000 f93a 	bl	800c9ae <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2204      	movs	r2, #4
 800c73e:	761a      	strb	r2, [r3, #24]
      break;
 800c740:	e0f1      	b.n	800c926 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	791b      	ldrb	r3, [r3, #4]
 800c746:	4619      	mov	r1, r3
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f003 f80b 	bl	800f764 <USBH_LL_GetURBState>
 800c74e:	4603      	mov	r3, r0
 800c750:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c752:	7bbb      	ldrb	r3, [r7, #14]
 800c754:	2b01      	cmp	r3, #1
 800c756:	d102      	bne.n	800c75e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2209      	movs	r2, #9
 800c75c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c75e:	7bbb      	ldrb	r3, [r7, #14]
 800c760:	2b05      	cmp	r3, #5
 800c762:	d102      	bne.n	800c76a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c764:	2303      	movs	r3, #3
 800c766:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c768:	e0d6      	b.n	800c918 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c76a:	7bbb      	ldrb	r3, [r7, #14]
 800c76c:	2b04      	cmp	r3, #4
 800c76e:	f040 80d3 	bne.w	800c918 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	220b      	movs	r2, #11
 800c776:	761a      	strb	r2, [r3, #24]
      break;
 800c778:	e0ce      	b.n	800c918 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6899      	ldr	r1, [r3, #8]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	899a      	ldrh	r2, [r3, #12]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	795b      	ldrb	r3, [r3, #5]
 800c786:	2001      	movs	r0, #1
 800c788:	9000      	str	r0, [sp, #0]
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 f8ea 	bl	800c964 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c796:	b29a      	uxth	r2, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2206      	movs	r2, #6
 800c7a0:	761a      	strb	r2, [r3, #24]
      break;
 800c7a2:	e0c0      	b.n	800c926 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	795b      	ldrb	r3, [r3, #5]
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f002 ffda 	bl	800f764 <USBH_LL_GetURBState>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c7b4:	7bbb      	ldrb	r3, [r7, #14]
 800c7b6:	2b01      	cmp	r3, #1
 800c7b8:	d103      	bne.n	800c7c2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2207      	movs	r2, #7
 800c7be:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c7c0:	e0ac      	b.n	800c91c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c7c2:	7bbb      	ldrb	r3, [r7, #14]
 800c7c4:	2b05      	cmp	r3, #5
 800c7c6:	d105      	bne.n	800c7d4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	220c      	movs	r2, #12
 800c7cc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c7ce:	2303      	movs	r3, #3
 800c7d0:	73fb      	strb	r3, [r7, #15]
      break;
 800c7d2:	e0a3      	b.n	800c91c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c7d4:	7bbb      	ldrb	r3, [r7, #14]
 800c7d6:	2b02      	cmp	r3, #2
 800c7d8:	d103      	bne.n	800c7e2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2205      	movs	r2, #5
 800c7de:	761a      	strb	r2, [r3, #24]
      break;
 800c7e0:	e09c      	b.n	800c91c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c7e2:	7bbb      	ldrb	r3, [r7, #14]
 800c7e4:	2b04      	cmp	r3, #4
 800c7e6:	f040 8099 	bne.w	800c91c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	220b      	movs	r2, #11
 800c7ee:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c7f0:	2302      	movs	r3, #2
 800c7f2:	73fb      	strb	r3, [r7, #15]
      break;
 800c7f4:	e092      	b.n	800c91c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	791b      	ldrb	r3, [r3, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	2100      	movs	r1, #0
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 f8d5 	bl	800c9ae <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c80a:	b29a      	uxth	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2208      	movs	r2, #8
 800c814:	761a      	strb	r2, [r3, #24]

      break;
 800c816:	e086      	b.n	800c926 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	791b      	ldrb	r3, [r3, #4]
 800c81c:	4619      	mov	r1, r3
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f002 ffa0 	bl	800f764 <USBH_LL_GetURBState>
 800c824:	4603      	mov	r3, r0
 800c826:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c828:	7bbb      	ldrb	r3, [r7, #14]
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d105      	bne.n	800c83a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	220d      	movs	r2, #13
 800c832:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c834:	2300      	movs	r3, #0
 800c836:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c838:	e072      	b.n	800c920 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c83a:	7bbb      	ldrb	r3, [r7, #14]
 800c83c:	2b04      	cmp	r3, #4
 800c83e:	d103      	bne.n	800c848 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	220b      	movs	r2, #11
 800c844:	761a      	strb	r2, [r3, #24]
      break;
 800c846:	e06b      	b.n	800c920 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c848:	7bbb      	ldrb	r3, [r7, #14]
 800c84a:	2b05      	cmp	r3, #5
 800c84c:	d168      	bne.n	800c920 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c84e:	2303      	movs	r3, #3
 800c850:	73fb      	strb	r3, [r7, #15]
      break;
 800c852:	e065      	b.n	800c920 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	795b      	ldrb	r3, [r3, #5]
 800c858:	2201      	movs	r2, #1
 800c85a:	9200      	str	r2, [sp, #0]
 800c85c:	2200      	movs	r2, #0
 800c85e:	2100      	movs	r1, #0
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f000 f87f 	bl	800c964 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c86c:	b29a      	uxth	r2, r3
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	220a      	movs	r2, #10
 800c876:	761a      	strb	r2, [r3, #24]
      break;
 800c878:	e055      	b.n	800c926 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	795b      	ldrb	r3, [r3, #5]
 800c87e:	4619      	mov	r1, r3
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f002 ff6f 	bl	800f764 <USBH_LL_GetURBState>
 800c886:	4603      	mov	r3, r0
 800c888:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c88a:	7bbb      	ldrb	r3, [r7, #14]
 800c88c:	2b01      	cmp	r3, #1
 800c88e:	d105      	bne.n	800c89c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c890:	2300      	movs	r3, #0
 800c892:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	220d      	movs	r2, #13
 800c898:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c89a:	e043      	b.n	800c924 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c89c:	7bbb      	ldrb	r3, [r7, #14]
 800c89e:	2b02      	cmp	r3, #2
 800c8a0:	d103      	bne.n	800c8aa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2209      	movs	r2, #9
 800c8a6:	761a      	strb	r2, [r3, #24]
      break;
 800c8a8:	e03c      	b.n	800c924 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c8aa:	7bbb      	ldrb	r3, [r7, #14]
 800c8ac:	2b04      	cmp	r3, #4
 800c8ae:	d139      	bne.n	800c924 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	220b      	movs	r2, #11
 800c8b4:	761a      	strb	r2, [r3, #24]
      break;
 800c8b6:	e035      	b.n	800c924 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	7e5b      	ldrb	r3, [r3, #25]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	b2da      	uxtb	r2, r3
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	765a      	strb	r2, [r3, #25]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	7e5b      	ldrb	r3, [r3, #25]
 800c8c8:	2b02      	cmp	r3, #2
 800c8ca:	d806      	bhi.n	800c8da <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c8d8:	e025      	b.n	800c926 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c8e0:	2106      	movs	r1, #6
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	795b      	ldrb	r3, [r3, #5]
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 f90c 	bl	800cb10 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	791b      	ldrb	r3, [r3, #4]
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 f906 	bl	800cb10 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2200      	movs	r2, #0
 800c908:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c90a:	2302      	movs	r3, #2
 800c90c:	73fb      	strb	r3, [r7, #15]
      break;
 800c90e:	e00a      	b.n	800c926 <USBH_HandleControl+0x2de>

    default:
      break;
 800c910:	bf00      	nop
 800c912:	e008      	b.n	800c926 <USBH_HandleControl+0x2de>
      break;
 800c914:	bf00      	nop
 800c916:	e006      	b.n	800c926 <USBH_HandleControl+0x2de>
      break;
 800c918:	bf00      	nop
 800c91a:	e004      	b.n	800c926 <USBH_HandleControl+0x2de>
      break;
 800c91c:	bf00      	nop
 800c91e:	e002      	b.n	800c926 <USBH_HandleControl+0x2de>
      break;
 800c920:	bf00      	nop
 800c922:	e000      	b.n	800c926 <USBH_HandleControl+0x2de>
      break;
 800c924:	bf00      	nop
  }

  return status;
 800c926:	7bfb      	ldrb	r3, [r7, #15]
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3710      	adds	r7, #16
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b088      	sub	sp, #32
 800c934:	af04      	add	r7, sp, #16
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	4613      	mov	r3, r2
 800c93c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c93e:	79f9      	ldrb	r1, [r7, #7]
 800c940:	2300      	movs	r3, #0
 800c942:	9303      	str	r3, [sp, #12]
 800c944:	2308      	movs	r3, #8
 800c946:	9302      	str	r3, [sp, #8]
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	9301      	str	r3, [sp, #4]
 800c94c:	2300      	movs	r3, #0
 800c94e:	9300      	str	r3, [sp, #0]
 800c950:	2300      	movs	r3, #0
 800c952:	2200      	movs	r2, #0
 800c954:	68f8      	ldr	r0, [r7, #12]
 800c956:	f002 fed4 	bl	800f702 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c95a:	2300      	movs	r3, #0
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3710      	adds	r7, #16
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b088      	sub	sp, #32
 800c968:	af04      	add	r7, sp, #16
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	4611      	mov	r1, r2
 800c970:	461a      	mov	r2, r3
 800c972:	460b      	mov	r3, r1
 800c974:	80fb      	strh	r3, [r7, #6]
 800c976:	4613      	mov	r3, r2
 800c978:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c980:	2b00      	cmp	r3, #0
 800c982:	d001      	beq.n	800c988 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c984:	2300      	movs	r3, #0
 800c986:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c988:	7979      	ldrb	r1, [r7, #5]
 800c98a:	7e3b      	ldrb	r3, [r7, #24]
 800c98c:	9303      	str	r3, [sp, #12]
 800c98e:	88fb      	ldrh	r3, [r7, #6]
 800c990:	9302      	str	r3, [sp, #8]
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	9301      	str	r3, [sp, #4]
 800c996:	2301      	movs	r3, #1
 800c998:	9300      	str	r3, [sp, #0]
 800c99a:	2300      	movs	r3, #0
 800c99c:	2200      	movs	r2, #0
 800c99e:	68f8      	ldr	r0, [r7, #12]
 800c9a0:	f002 feaf 	bl	800f702 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c9a4:	2300      	movs	r3, #0
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3710      	adds	r7, #16
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}

0800c9ae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c9ae:	b580      	push	{r7, lr}
 800c9b0:	b088      	sub	sp, #32
 800c9b2:	af04      	add	r7, sp, #16
 800c9b4:	60f8      	str	r0, [r7, #12]
 800c9b6:	60b9      	str	r1, [r7, #8]
 800c9b8:	4611      	mov	r1, r2
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	460b      	mov	r3, r1
 800c9be:	80fb      	strh	r3, [r7, #6]
 800c9c0:	4613      	mov	r3, r2
 800c9c2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c9c4:	7979      	ldrb	r1, [r7, #5]
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	9303      	str	r3, [sp, #12]
 800c9ca:	88fb      	ldrh	r3, [r7, #6]
 800c9cc:	9302      	str	r3, [sp, #8]
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	9301      	str	r3, [sp, #4]
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	9300      	str	r3, [sp, #0]
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	2201      	movs	r2, #1
 800c9da:	68f8      	ldr	r0, [r7, #12]
 800c9dc:	f002 fe91 	bl	800f702 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c9e0:	2300      	movs	r3, #0

}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3710      	adds	r7, #16
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	b088      	sub	sp, #32
 800c9ee:	af04      	add	r7, sp, #16
 800c9f0:	60f8      	str	r0, [r7, #12]
 800c9f2:	60b9      	str	r1, [r7, #8]
 800c9f4:	4611      	mov	r1, r2
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	80fb      	strh	r3, [r7, #6]
 800c9fc:	4613      	mov	r3, r2
 800c9fe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d001      	beq.n	800ca0e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ca0e:	7979      	ldrb	r1, [r7, #5]
 800ca10:	7e3b      	ldrb	r3, [r7, #24]
 800ca12:	9303      	str	r3, [sp, #12]
 800ca14:	88fb      	ldrh	r3, [r7, #6]
 800ca16:	9302      	str	r3, [sp, #8]
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	9301      	str	r3, [sp, #4]
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	9300      	str	r3, [sp, #0]
 800ca20:	2302      	movs	r3, #2
 800ca22:	2200      	movs	r2, #0
 800ca24:	68f8      	ldr	r0, [r7, #12]
 800ca26:	f002 fe6c 	bl	800f702 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ca2a:	2300      	movs	r3, #0
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3710      	adds	r7, #16
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b088      	sub	sp, #32
 800ca38:	af04      	add	r7, sp, #16
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	60b9      	str	r1, [r7, #8]
 800ca3e:	4611      	mov	r1, r2
 800ca40:	461a      	mov	r2, r3
 800ca42:	460b      	mov	r3, r1
 800ca44:	80fb      	strh	r3, [r7, #6]
 800ca46:	4613      	mov	r3, r2
 800ca48:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ca4a:	7979      	ldrb	r1, [r7, #5]
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	9303      	str	r3, [sp, #12]
 800ca50:	88fb      	ldrh	r3, [r7, #6]
 800ca52:	9302      	str	r3, [sp, #8]
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	9301      	str	r3, [sp, #4]
 800ca58:	2301      	movs	r3, #1
 800ca5a:	9300      	str	r3, [sp, #0]
 800ca5c:	2302      	movs	r3, #2
 800ca5e:	2201      	movs	r2, #1
 800ca60:	68f8      	ldr	r0, [r7, #12]
 800ca62:	f002 fe4e 	bl	800f702 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ca66:	2300      	movs	r3, #0
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3710      	adds	r7, #16
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b086      	sub	sp, #24
 800ca74:	af04      	add	r7, sp, #16
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	4608      	mov	r0, r1
 800ca7a:	4611      	mov	r1, r2
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	4603      	mov	r3, r0
 800ca80:	70fb      	strb	r3, [r7, #3]
 800ca82:	460b      	mov	r3, r1
 800ca84:	70bb      	strb	r3, [r7, #2]
 800ca86:	4613      	mov	r3, r2
 800ca88:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ca8a:	7878      	ldrb	r0, [r7, #1]
 800ca8c:	78ba      	ldrb	r2, [r7, #2]
 800ca8e:	78f9      	ldrb	r1, [r7, #3]
 800ca90:	8b3b      	ldrh	r3, [r7, #24]
 800ca92:	9302      	str	r3, [sp, #8]
 800ca94:	7d3b      	ldrb	r3, [r7, #20]
 800ca96:	9301      	str	r3, [sp, #4]
 800ca98:	7c3b      	ldrb	r3, [r7, #16]
 800ca9a:	9300      	str	r3, [sp, #0]
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f002 fde1 	bl	800f666 <USBH_LL_OpenPipe>

  return USBH_OK;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3708      	adds	r7, #8
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}

0800caae <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800caae:	b580      	push	{r7, lr}
 800cab0:	b082      	sub	sp, #8
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	6078      	str	r0, [r7, #4]
 800cab6:	460b      	mov	r3, r1
 800cab8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800caba:	78fb      	ldrb	r3, [r7, #3]
 800cabc:	4619      	mov	r1, r3
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f002 fe00 	bl	800f6c4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800cac4:	2300      	movs	r3, #0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3708      	adds	r7, #8
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800cace:	b580      	push	{r7, lr}
 800cad0:	b084      	sub	sp, #16
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
 800cad6:	460b      	mov	r3, r1
 800cad8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f000 f836 	bl	800cb4c <USBH_GetFreePipe>
 800cae0:	4603      	mov	r3, r0
 800cae2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800cae4:	89fb      	ldrh	r3, [r7, #14]
 800cae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800caea:	4293      	cmp	r3, r2
 800caec:	d00a      	beq.n	800cb04 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800caee:	78fa      	ldrb	r2, [r7, #3]
 800caf0:	89fb      	ldrh	r3, [r7, #14]
 800caf2:	f003 030f 	and.w	r3, r3, #15
 800caf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cafa:	6879      	ldr	r1, [r7, #4]
 800cafc:	33e0      	adds	r3, #224	; 0xe0
 800cafe:	009b      	lsls	r3, r3, #2
 800cb00:	440b      	add	r3, r1
 800cb02:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800cb04:	89fb      	ldrh	r3, [r7, #14]
 800cb06:	b2db      	uxtb	r3, r3
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3710      	adds	r7, #16
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	460b      	mov	r3, r1
 800cb1a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800cb1c:	78fb      	ldrb	r3, [r7, #3]
 800cb1e:	2b0f      	cmp	r3, #15
 800cb20:	d80d      	bhi.n	800cb3e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800cb22:	78fb      	ldrb	r3, [r7, #3]
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	33e0      	adds	r3, #224	; 0xe0
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	4413      	add	r3, r2
 800cb2c:	685a      	ldr	r2, [r3, #4]
 800cb2e:	78fb      	ldrb	r3, [r7, #3]
 800cb30:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800cb34:	6879      	ldr	r1, [r7, #4]
 800cb36:	33e0      	adds	r3, #224	; 0xe0
 800cb38:	009b      	lsls	r3, r3, #2
 800cb3a:	440b      	add	r3, r1
 800cb3c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800cb3e:	2300      	movs	r3, #0
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	370c      	adds	r7, #12
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr

0800cb4c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b085      	sub	sp, #20
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800cb54:	2300      	movs	r3, #0
 800cb56:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800cb58:	2300      	movs	r3, #0
 800cb5a:	73fb      	strb	r3, [r7, #15]
 800cb5c:	e00f      	b.n	800cb7e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800cb5e:	7bfb      	ldrb	r3, [r7, #15]
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	33e0      	adds	r3, #224	; 0xe0
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	4413      	add	r3, r2
 800cb68:	685b      	ldr	r3, [r3, #4]
 800cb6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d102      	bne.n	800cb78 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800cb72:	7bfb      	ldrb	r3, [r7, #15]
 800cb74:	b29b      	uxth	r3, r3
 800cb76:	e007      	b.n	800cb88 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800cb78:	7bfb      	ldrb	r3, [r7, #15]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	73fb      	strb	r3, [r7, #15]
 800cb7e:	7bfb      	ldrb	r3, [r7, #15]
 800cb80:	2b0f      	cmp	r3, #15
 800cb82:	d9ec      	bls.n	800cb5e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800cb84:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3714      	adds	r7, #20
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr

0800cb94 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cb9e:	79fb      	ldrb	r3, [r7, #7]
 800cba0:	4a08      	ldr	r2, [pc, #32]	; (800cbc4 <disk_status+0x30>)
 800cba2:	009b      	lsls	r3, r3, #2
 800cba4:	4413      	add	r3, r2
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	79fa      	ldrb	r2, [r7, #7]
 800cbac:	4905      	ldr	r1, [pc, #20]	; (800cbc4 <disk_status+0x30>)
 800cbae:	440a      	add	r2, r1
 800cbb0:	7a12      	ldrb	r2, [r2, #8]
 800cbb2:	4610      	mov	r0, r2
 800cbb4:	4798      	blx	r3
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cbba:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3710      	adds	r7, #16
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	20001774 	.word	0x20001774

0800cbc8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b084      	sub	sp, #16
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	4603      	mov	r3, r0
 800cbd0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cbd6:	79fb      	ldrb	r3, [r7, #7]
 800cbd8:	4a0d      	ldr	r2, [pc, #52]	; (800cc10 <disk_initialize+0x48>)
 800cbda:	5cd3      	ldrb	r3, [r2, r3]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d111      	bne.n	800cc04 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cbe0:	79fb      	ldrb	r3, [r7, #7]
 800cbe2:	4a0b      	ldr	r2, [pc, #44]	; (800cc10 <disk_initialize+0x48>)
 800cbe4:	2101      	movs	r1, #1
 800cbe6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cbe8:	79fb      	ldrb	r3, [r7, #7]
 800cbea:	4a09      	ldr	r2, [pc, #36]	; (800cc10 <disk_initialize+0x48>)
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	4413      	add	r3, r2
 800cbf0:	685b      	ldr	r3, [r3, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	79fa      	ldrb	r2, [r7, #7]
 800cbf6:	4906      	ldr	r1, [pc, #24]	; (800cc10 <disk_initialize+0x48>)
 800cbf8:	440a      	add	r2, r1
 800cbfa:	7a12      	ldrb	r2, [r2, #8]
 800cbfc:	4610      	mov	r0, r2
 800cbfe:	4798      	blx	r3
 800cc00:	4603      	mov	r3, r0
 800cc02:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cc04:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3710      	adds	r7, #16
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	20001774 	.word	0x20001774

0800cc14 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cc14:	b590      	push	{r4, r7, lr}
 800cc16:	b087      	sub	sp, #28
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	60b9      	str	r1, [r7, #8]
 800cc1c:	607a      	str	r2, [r7, #4]
 800cc1e:	603b      	str	r3, [r7, #0]
 800cc20:	4603      	mov	r3, r0
 800cc22:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cc24:	7bfb      	ldrb	r3, [r7, #15]
 800cc26:	4a0a      	ldr	r2, [pc, #40]	; (800cc50 <disk_read+0x3c>)
 800cc28:	009b      	lsls	r3, r3, #2
 800cc2a:	4413      	add	r3, r2
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	689c      	ldr	r4, [r3, #8]
 800cc30:	7bfb      	ldrb	r3, [r7, #15]
 800cc32:	4a07      	ldr	r2, [pc, #28]	; (800cc50 <disk_read+0x3c>)
 800cc34:	4413      	add	r3, r2
 800cc36:	7a18      	ldrb	r0, [r3, #8]
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	68b9      	ldr	r1, [r7, #8]
 800cc3e:	47a0      	blx	r4
 800cc40:	4603      	mov	r3, r0
 800cc42:	75fb      	strb	r3, [r7, #23]
  return res;
 800cc44:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	371c      	adds	r7, #28
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd90      	pop	{r4, r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	20001774 	.word	0x20001774

0800cc54 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cc54:	b590      	push	{r4, r7, lr}
 800cc56:	b087      	sub	sp, #28
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	60b9      	str	r1, [r7, #8]
 800cc5c:	607a      	str	r2, [r7, #4]
 800cc5e:	603b      	str	r3, [r7, #0]
 800cc60:	4603      	mov	r3, r0
 800cc62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cc64:	7bfb      	ldrb	r3, [r7, #15]
 800cc66:	4a0a      	ldr	r2, [pc, #40]	; (800cc90 <disk_write+0x3c>)
 800cc68:	009b      	lsls	r3, r3, #2
 800cc6a:	4413      	add	r3, r2
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	68dc      	ldr	r4, [r3, #12]
 800cc70:	7bfb      	ldrb	r3, [r7, #15]
 800cc72:	4a07      	ldr	r2, [pc, #28]	; (800cc90 <disk_write+0x3c>)
 800cc74:	4413      	add	r3, r2
 800cc76:	7a18      	ldrb	r0, [r3, #8]
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	687a      	ldr	r2, [r7, #4]
 800cc7c:	68b9      	ldr	r1, [r7, #8]
 800cc7e:	47a0      	blx	r4
 800cc80:	4603      	mov	r3, r0
 800cc82:	75fb      	strb	r3, [r7, #23]
  return res;
 800cc84:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	371c      	adds	r7, #28
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd90      	pop	{r4, r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	20001774 	.word	0x20001774

0800cc94 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	603a      	str	r2, [r7, #0]
 800cc9e:	71fb      	strb	r3, [r7, #7]
 800cca0:	460b      	mov	r3, r1
 800cca2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cca4:	79fb      	ldrb	r3, [r7, #7]
 800cca6:	4a09      	ldr	r2, [pc, #36]	; (800cccc <disk_ioctl+0x38>)
 800cca8:	009b      	lsls	r3, r3, #2
 800ccaa:	4413      	add	r3, r2
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	691b      	ldr	r3, [r3, #16]
 800ccb0:	79fa      	ldrb	r2, [r7, #7]
 800ccb2:	4906      	ldr	r1, [pc, #24]	; (800cccc <disk_ioctl+0x38>)
 800ccb4:	440a      	add	r2, r1
 800ccb6:	7a10      	ldrb	r0, [r2, #8]
 800ccb8:	79b9      	ldrb	r1, [r7, #6]
 800ccba:	683a      	ldr	r2, [r7, #0]
 800ccbc:	4798      	blx	r3
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	73fb      	strb	r3, [r7, #15]
  return res;
 800ccc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3710      	adds	r7, #16
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	20001774 	.word	0x20001774

0800ccd0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b085      	sub	sp, #20
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	3301      	adds	r3, #1
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cce0:	89fb      	ldrh	r3, [r7, #14]
 800cce2:	021b      	lsls	r3, r3, #8
 800cce4:	b21a      	sxth	r2, r3
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	b21b      	sxth	r3, r3
 800ccec:	4313      	orrs	r3, r2
 800ccee:	b21b      	sxth	r3, r3
 800ccf0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ccf2:	89fb      	ldrh	r3, [r7, #14]
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3714      	adds	r7, #20
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr

0800cd00 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cd00:	b480      	push	{r7}
 800cd02:	b085      	sub	sp, #20
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	3303      	adds	r3, #3
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	021b      	lsls	r3, r3, #8
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	3202      	adds	r2, #2
 800cd18:	7812      	ldrb	r2, [r2, #0]
 800cd1a:	4313      	orrs	r3, r2
 800cd1c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	021b      	lsls	r3, r3, #8
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	3201      	adds	r2, #1
 800cd26:	7812      	ldrb	r2, [r2, #0]
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	021b      	lsls	r3, r3, #8
 800cd30:	687a      	ldr	r2, [r7, #4]
 800cd32:	7812      	ldrb	r2, [r2, #0]
 800cd34:	4313      	orrs	r3, r2
 800cd36:	60fb      	str	r3, [r7, #12]
	return rv;
 800cd38:	68fb      	ldr	r3, [r7, #12]
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3714      	adds	r7, #20
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd44:	4770      	bx	lr

0800cd46 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cd46:	b480      	push	{r7}
 800cd48:	b083      	sub	sp, #12
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
 800cd4e:	460b      	mov	r3, r1
 800cd50:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	1c5a      	adds	r2, r3, #1
 800cd56:	607a      	str	r2, [r7, #4]
 800cd58:	887a      	ldrh	r2, [r7, #2]
 800cd5a:	b2d2      	uxtb	r2, r2
 800cd5c:	701a      	strb	r2, [r3, #0]
 800cd5e:	887b      	ldrh	r3, [r7, #2]
 800cd60:	0a1b      	lsrs	r3, r3, #8
 800cd62:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	1c5a      	adds	r2, r3, #1
 800cd68:	607a      	str	r2, [r7, #4]
 800cd6a:	887a      	ldrh	r2, [r7, #2]
 800cd6c:	b2d2      	uxtb	r2, r2
 800cd6e:	701a      	strb	r2, [r3, #0]
}
 800cd70:	bf00      	nop
 800cd72:	370c      	adds	r7, #12
 800cd74:	46bd      	mov	sp, r7
 800cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7a:	4770      	bx	lr

0800cd7c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b083      	sub	sp, #12
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	1c5a      	adds	r2, r3, #1
 800cd8a:	607a      	str	r2, [r7, #4]
 800cd8c:	683a      	ldr	r2, [r7, #0]
 800cd8e:	b2d2      	uxtb	r2, r2
 800cd90:	701a      	strb	r2, [r3, #0]
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	0a1b      	lsrs	r3, r3, #8
 800cd96:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	1c5a      	adds	r2, r3, #1
 800cd9c:	607a      	str	r2, [r7, #4]
 800cd9e:	683a      	ldr	r2, [r7, #0]
 800cda0:	b2d2      	uxtb	r2, r2
 800cda2:	701a      	strb	r2, [r3, #0]
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	0a1b      	lsrs	r3, r3, #8
 800cda8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	1c5a      	adds	r2, r3, #1
 800cdae:	607a      	str	r2, [r7, #4]
 800cdb0:	683a      	ldr	r2, [r7, #0]
 800cdb2:	b2d2      	uxtb	r2, r2
 800cdb4:	701a      	strb	r2, [r3, #0]
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	0a1b      	lsrs	r3, r3, #8
 800cdba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	1c5a      	adds	r2, r3, #1
 800cdc0:	607a      	str	r2, [r7, #4]
 800cdc2:	683a      	ldr	r2, [r7, #0]
 800cdc4:	b2d2      	uxtb	r2, r2
 800cdc6:	701a      	strb	r2, [r3, #0]
}
 800cdc8:	bf00      	nop
 800cdca:	370c      	adds	r7, #12
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr

0800cdd4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cdd4:	b480      	push	{r7}
 800cdd6:	b087      	sub	sp, #28
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d00d      	beq.n	800ce0a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cdee:	693a      	ldr	r2, [r7, #16]
 800cdf0:	1c53      	adds	r3, r2, #1
 800cdf2:	613b      	str	r3, [r7, #16]
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	1c59      	adds	r1, r3, #1
 800cdf8:	6179      	str	r1, [r7, #20]
 800cdfa:	7812      	ldrb	r2, [r2, #0]
 800cdfc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	3b01      	subs	r3, #1
 800ce02:	607b      	str	r3, [r7, #4]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d1f1      	bne.n	800cdee <mem_cpy+0x1a>
	}
}
 800ce0a:	bf00      	nop
 800ce0c:	371c      	adds	r7, #28
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce14:	4770      	bx	lr

0800ce16 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ce16:	b480      	push	{r7}
 800ce18:	b087      	sub	sp, #28
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	60f8      	str	r0, [r7, #12]
 800ce1e:	60b9      	str	r1, [r7, #8]
 800ce20:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	1c5a      	adds	r2, r3, #1
 800ce2a:	617a      	str	r2, [r7, #20]
 800ce2c:	68ba      	ldr	r2, [r7, #8]
 800ce2e:	b2d2      	uxtb	r2, r2
 800ce30:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	3b01      	subs	r3, #1
 800ce36:	607b      	str	r3, [r7, #4]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d1f3      	bne.n	800ce26 <mem_set+0x10>
}
 800ce3e:	bf00      	nop
 800ce40:	bf00      	nop
 800ce42:	371c      	adds	r7, #28
 800ce44:	46bd      	mov	sp, r7
 800ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4a:	4770      	bx	lr

0800ce4c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ce4c:	b480      	push	{r7}
 800ce4e:	b089      	sub	sp, #36	; 0x24
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	60f8      	str	r0, [r7, #12]
 800ce54:	60b9      	str	r1, [r7, #8]
 800ce56:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	61fb      	str	r3, [r7, #28]
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ce60:	2300      	movs	r3, #0
 800ce62:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	1c5a      	adds	r2, r3, #1
 800ce68:	61fa      	str	r2, [r7, #28]
 800ce6a:	781b      	ldrb	r3, [r3, #0]
 800ce6c:	4619      	mov	r1, r3
 800ce6e:	69bb      	ldr	r3, [r7, #24]
 800ce70:	1c5a      	adds	r2, r3, #1
 800ce72:	61ba      	str	r2, [r7, #24]
 800ce74:	781b      	ldrb	r3, [r3, #0]
 800ce76:	1acb      	subs	r3, r1, r3
 800ce78:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	3b01      	subs	r3, #1
 800ce7e:	607b      	str	r3, [r7, #4]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d002      	beq.n	800ce8c <mem_cmp+0x40>
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d0eb      	beq.n	800ce64 <mem_cmp+0x18>

	return r;
 800ce8c:	697b      	ldr	r3, [r7, #20]
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3724      	adds	r7, #36	; 0x24
 800ce92:	46bd      	mov	sp, r7
 800ce94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce98:	4770      	bx	lr

0800ce9a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ce9a:	b480      	push	{r7}
 800ce9c:	b083      	sub	sp, #12
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
 800cea2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cea4:	e002      	b.n	800ceac <chk_chr+0x12>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	607b      	str	r3, [r7, #4]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	781b      	ldrb	r3, [r3, #0]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d005      	beq.n	800cec0 <chk_chr+0x26>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	781b      	ldrb	r3, [r3, #0]
 800ceb8:	461a      	mov	r2, r3
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d1f2      	bne.n	800cea6 <chk_chr+0xc>
	return *str;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	781b      	ldrb	r3, [r3, #0]
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	370c      	adds	r7, #12
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr

0800ced0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b085      	sub	sp, #20
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ceda:	2300      	movs	r3, #0
 800cedc:	60bb      	str	r3, [r7, #8]
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	60fb      	str	r3, [r7, #12]
 800cee2:	e029      	b.n	800cf38 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cee4:	4a27      	ldr	r2, [pc, #156]	; (800cf84 <chk_lock+0xb4>)
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	011b      	lsls	r3, r3, #4
 800ceea:	4413      	add	r3, r2
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d01d      	beq.n	800cf2e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cef2:	4a24      	ldr	r2, [pc, #144]	; (800cf84 <chk_lock+0xb4>)
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	011b      	lsls	r3, r3, #4
 800cef8:	4413      	add	r3, r2
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d116      	bne.n	800cf32 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cf04:	4a1f      	ldr	r2, [pc, #124]	; (800cf84 <chk_lock+0xb4>)
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	011b      	lsls	r3, r3, #4
 800cf0a:	4413      	add	r3, r2
 800cf0c:	3304      	adds	r3, #4
 800cf0e:	681a      	ldr	r2, [r3, #0]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d10c      	bne.n	800cf32 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cf18:	4a1a      	ldr	r2, [pc, #104]	; (800cf84 <chk_lock+0xb4>)
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	011b      	lsls	r3, r3, #4
 800cf1e:	4413      	add	r3, r2
 800cf20:	3308      	adds	r3, #8
 800cf22:	681a      	ldr	r2, [r3, #0]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d102      	bne.n	800cf32 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cf2c:	e007      	b.n	800cf3e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cf2e:	2301      	movs	r3, #1
 800cf30:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	3301      	adds	r3, #1
 800cf36:	60fb      	str	r3, [r7, #12]
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	2b01      	cmp	r3, #1
 800cf3c:	d9d2      	bls.n	800cee4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2b02      	cmp	r3, #2
 800cf42:	d109      	bne.n	800cf58 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d102      	bne.n	800cf50 <chk_lock+0x80>
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	2b02      	cmp	r3, #2
 800cf4e:	d101      	bne.n	800cf54 <chk_lock+0x84>
 800cf50:	2300      	movs	r3, #0
 800cf52:	e010      	b.n	800cf76 <chk_lock+0xa6>
 800cf54:	2312      	movs	r3, #18
 800cf56:	e00e      	b.n	800cf76 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d108      	bne.n	800cf70 <chk_lock+0xa0>
 800cf5e:	4a09      	ldr	r2, [pc, #36]	; (800cf84 <chk_lock+0xb4>)
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	011b      	lsls	r3, r3, #4
 800cf64:	4413      	add	r3, r2
 800cf66:	330c      	adds	r3, #12
 800cf68:	881b      	ldrh	r3, [r3, #0]
 800cf6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf6e:	d101      	bne.n	800cf74 <chk_lock+0xa4>
 800cf70:	2310      	movs	r3, #16
 800cf72:	e000      	b.n	800cf76 <chk_lock+0xa6>
 800cf74:	2300      	movs	r3, #0
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3714      	adds	r7, #20
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr
 800cf82:	bf00      	nop
 800cf84:	20001754 	.word	0x20001754

0800cf88 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b083      	sub	sp, #12
 800cf8c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	607b      	str	r3, [r7, #4]
 800cf92:	e002      	b.n	800cf9a <enq_lock+0x12>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	3301      	adds	r3, #1
 800cf98:	607b      	str	r3, [r7, #4]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d806      	bhi.n	800cfae <enq_lock+0x26>
 800cfa0:	4a09      	ldr	r2, [pc, #36]	; (800cfc8 <enq_lock+0x40>)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	011b      	lsls	r3, r3, #4
 800cfa6:	4413      	add	r3, r2
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d1f2      	bne.n	800cf94 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2b02      	cmp	r3, #2
 800cfb2:	bf14      	ite	ne
 800cfb4:	2301      	movne	r3, #1
 800cfb6:	2300      	moveq	r3, #0
 800cfb8:	b2db      	uxtb	r3, r3
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	370c      	adds	r7, #12
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc4:	4770      	bx	lr
 800cfc6:	bf00      	nop
 800cfc8:	20001754 	.word	0x20001754

0800cfcc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b085      	sub	sp, #20
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	60fb      	str	r3, [r7, #12]
 800cfda:	e01f      	b.n	800d01c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cfdc:	4a41      	ldr	r2, [pc, #260]	; (800d0e4 <inc_lock+0x118>)
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	011b      	lsls	r3, r3, #4
 800cfe2:	4413      	add	r3, r2
 800cfe4:	681a      	ldr	r2, [r3, #0]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d113      	bne.n	800d016 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cfee:	4a3d      	ldr	r2, [pc, #244]	; (800d0e4 <inc_lock+0x118>)
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	011b      	lsls	r3, r3, #4
 800cff4:	4413      	add	r3, r2
 800cff6:	3304      	adds	r3, #4
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cffe:	429a      	cmp	r2, r3
 800d000:	d109      	bne.n	800d016 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d002:	4a38      	ldr	r2, [pc, #224]	; (800d0e4 <inc_lock+0x118>)
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	011b      	lsls	r3, r3, #4
 800d008:	4413      	add	r3, r2
 800d00a:	3308      	adds	r3, #8
 800d00c:	681a      	ldr	r2, [r3, #0]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d012:	429a      	cmp	r2, r3
 800d014:	d006      	beq.n	800d024 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	3301      	adds	r3, #1
 800d01a:	60fb      	str	r3, [r7, #12]
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2b01      	cmp	r3, #1
 800d020:	d9dc      	bls.n	800cfdc <inc_lock+0x10>
 800d022:	e000      	b.n	800d026 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d024:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d132      	bne.n	800d092 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d02c:	2300      	movs	r3, #0
 800d02e:	60fb      	str	r3, [r7, #12]
 800d030:	e002      	b.n	800d038 <inc_lock+0x6c>
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	3301      	adds	r3, #1
 800d036:	60fb      	str	r3, [r7, #12]
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	2b01      	cmp	r3, #1
 800d03c:	d806      	bhi.n	800d04c <inc_lock+0x80>
 800d03e:	4a29      	ldr	r2, [pc, #164]	; (800d0e4 <inc_lock+0x118>)
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	011b      	lsls	r3, r3, #4
 800d044:	4413      	add	r3, r2
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d1f2      	bne.n	800d032 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2b02      	cmp	r3, #2
 800d050:	d101      	bne.n	800d056 <inc_lock+0x8a>
 800d052:	2300      	movs	r3, #0
 800d054:	e040      	b.n	800d0d8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	4922      	ldr	r1, [pc, #136]	; (800d0e4 <inc_lock+0x118>)
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	011b      	lsls	r3, r3, #4
 800d060:	440b      	add	r3, r1
 800d062:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	689a      	ldr	r2, [r3, #8]
 800d068:	491e      	ldr	r1, [pc, #120]	; (800d0e4 <inc_lock+0x118>)
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	011b      	lsls	r3, r3, #4
 800d06e:	440b      	add	r3, r1
 800d070:	3304      	adds	r3, #4
 800d072:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	695a      	ldr	r2, [r3, #20]
 800d078:	491a      	ldr	r1, [pc, #104]	; (800d0e4 <inc_lock+0x118>)
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	011b      	lsls	r3, r3, #4
 800d07e:	440b      	add	r3, r1
 800d080:	3308      	adds	r3, #8
 800d082:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d084:	4a17      	ldr	r2, [pc, #92]	; (800d0e4 <inc_lock+0x118>)
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	011b      	lsls	r3, r3, #4
 800d08a:	4413      	add	r3, r2
 800d08c:	330c      	adds	r3, #12
 800d08e:	2200      	movs	r2, #0
 800d090:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d009      	beq.n	800d0ac <inc_lock+0xe0>
 800d098:	4a12      	ldr	r2, [pc, #72]	; (800d0e4 <inc_lock+0x118>)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	011b      	lsls	r3, r3, #4
 800d09e:	4413      	add	r3, r2
 800d0a0:	330c      	adds	r3, #12
 800d0a2:	881b      	ldrh	r3, [r3, #0]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d001      	beq.n	800d0ac <inc_lock+0xe0>
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	e015      	b.n	800d0d8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d108      	bne.n	800d0c4 <inc_lock+0xf8>
 800d0b2:	4a0c      	ldr	r2, [pc, #48]	; (800d0e4 <inc_lock+0x118>)
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	011b      	lsls	r3, r3, #4
 800d0b8:	4413      	add	r3, r2
 800d0ba:	330c      	adds	r3, #12
 800d0bc:	881b      	ldrh	r3, [r3, #0]
 800d0be:	3301      	adds	r3, #1
 800d0c0:	b29a      	uxth	r2, r3
 800d0c2:	e001      	b.n	800d0c8 <inc_lock+0xfc>
 800d0c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0c8:	4906      	ldr	r1, [pc, #24]	; (800d0e4 <inc_lock+0x118>)
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	011b      	lsls	r3, r3, #4
 800d0ce:	440b      	add	r3, r1
 800d0d0:	330c      	adds	r3, #12
 800d0d2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	3301      	adds	r3, #1
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3714      	adds	r7, #20
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr
 800d0e4:	20001754 	.word	0x20001754

0800d0e8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b085      	sub	sp, #20
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	3b01      	subs	r3, #1
 800d0f4:	607b      	str	r3, [r7, #4]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2b01      	cmp	r3, #1
 800d0fa:	d825      	bhi.n	800d148 <dec_lock+0x60>
		n = Files[i].ctr;
 800d0fc:	4a17      	ldr	r2, [pc, #92]	; (800d15c <dec_lock+0x74>)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	011b      	lsls	r3, r3, #4
 800d102:	4413      	add	r3, r2
 800d104:	330c      	adds	r3, #12
 800d106:	881b      	ldrh	r3, [r3, #0]
 800d108:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d10a:	89fb      	ldrh	r3, [r7, #14]
 800d10c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d110:	d101      	bne.n	800d116 <dec_lock+0x2e>
 800d112:	2300      	movs	r3, #0
 800d114:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d116:	89fb      	ldrh	r3, [r7, #14]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d002      	beq.n	800d122 <dec_lock+0x3a>
 800d11c:	89fb      	ldrh	r3, [r7, #14]
 800d11e:	3b01      	subs	r3, #1
 800d120:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d122:	4a0e      	ldr	r2, [pc, #56]	; (800d15c <dec_lock+0x74>)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	011b      	lsls	r3, r3, #4
 800d128:	4413      	add	r3, r2
 800d12a:	330c      	adds	r3, #12
 800d12c:	89fa      	ldrh	r2, [r7, #14]
 800d12e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d130:	89fb      	ldrh	r3, [r7, #14]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d105      	bne.n	800d142 <dec_lock+0x5a>
 800d136:	4a09      	ldr	r2, [pc, #36]	; (800d15c <dec_lock+0x74>)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	011b      	lsls	r3, r3, #4
 800d13c:	4413      	add	r3, r2
 800d13e:	2200      	movs	r2, #0
 800d140:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d142:	2300      	movs	r3, #0
 800d144:	737b      	strb	r3, [r7, #13]
 800d146:	e001      	b.n	800d14c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d148:	2302      	movs	r3, #2
 800d14a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d14c:	7b7b      	ldrb	r3, [r7, #13]
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3714      	adds	r7, #20
 800d152:	46bd      	mov	sp, r7
 800d154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d158:	4770      	bx	lr
 800d15a:	bf00      	nop
 800d15c:	20001754 	.word	0x20001754

0800d160 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d160:	b480      	push	{r7}
 800d162:	b085      	sub	sp, #20
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d168:	2300      	movs	r3, #0
 800d16a:	60fb      	str	r3, [r7, #12]
 800d16c:	e010      	b.n	800d190 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d16e:	4a0d      	ldr	r2, [pc, #52]	; (800d1a4 <clear_lock+0x44>)
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	011b      	lsls	r3, r3, #4
 800d174:	4413      	add	r3, r2
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d105      	bne.n	800d18a <clear_lock+0x2a>
 800d17e:	4a09      	ldr	r2, [pc, #36]	; (800d1a4 <clear_lock+0x44>)
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	011b      	lsls	r3, r3, #4
 800d184:	4413      	add	r3, r2
 800d186:	2200      	movs	r2, #0
 800d188:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	3301      	adds	r3, #1
 800d18e:	60fb      	str	r3, [r7, #12]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2b01      	cmp	r3, #1
 800d194:	d9eb      	bls.n	800d16e <clear_lock+0xe>
	}
}
 800d196:	bf00      	nop
 800d198:	bf00      	nop
 800d19a:	3714      	adds	r7, #20
 800d19c:	46bd      	mov	sp, r7
 800d19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a2:	4770      	bx	lr
 800d1a4:	20001754 	.word	0x20001754

0800d1a8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b086      	sub	sp, #24
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	78db      	ldrb	r3, [r3, #3]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d034      	beq.n	800d226 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	7858      	ldrb	r0, [r3, #1]
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	697a      	ldr	r2, [r7, #20]
 800d1d0:	f7ff fd40 	bl	800cc54 <disk_write>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d002      	beq.n	800d1e0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d1da:	2301      	movs	r3, #1
 800d1dc:	73fb      	strb	r3, [r7, #15]
 800d1de:	e022      	b.n	800d226 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6a1b      	ldr	r3, [r3, #32]
 800d1ea:	697a      	ldr	r2, [r7, #20]
 800d1ec:	1ad2      	subs	r2, r2, r3
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	699b      	ldr	r3, [r3, #24]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d217      	bcs.n	800d226 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	789b      	ldrb	r3, [r3, #2]
 800d1fa:	613b      	str	r3, [r7, #16]
 800d1fc:	e010      	b.n	800d220 <sync_window+0x78>
					wsect += fs->fsize;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	699b      	ldr	r3, [r3, #24]
 800d202:	697a      	ldr	r2, [r7, #20]
 800d204:	4413      	add	r3, r2
 800d206:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	7858      	ldrb	r0, [r3, #1]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d212:	2301      	movs	r3, #1
 800d214:	697a      	ldr	r2, [r7, #20]
 800d216:	f7ff fd1d 	bl	800cc54 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	3b01      	subs	r3, #1
 800d21e:	613b      	str	r3, [r7, #16]
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	2b01      	cmp	r3, #1
 800d224:	d8eb      	bhi.n	800d1fe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d226:	7bfb      	ldrb	r3, [r7, #15]
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3718      	adds	r7, #24
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d23a:	2300      	movs	r3, #0
 800d23c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d242:	683a      	ldr	r2, [r7, #0]
 800d244:	429a      	cmp	r2, r3
 800d246:	d01b      	beq.n	800d280 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f7ff ffad 	bl	800d1a8 <sync_window>
 800d24e:	4603      	mov	r3, r0
 800d250:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d252:	7bfb      	ldrb	r3, [r7, #15]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d113      	bne.n	800d280 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	7858      	ldrb	r0, [r3, #1]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d262:	2301      	movs	r3, #1
 800d264:	683a      	ldr	r2, [r7, #0]
 800d266:	f7ff fcd5 	bl	800cc14 <disk_read>
 800d26a:	4603      	mov	r3, r0
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d004      	beq.n	800d27a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d270:	f04f 33ff 	mov.w	r3, #4294967295
 800d274:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d276:	2301      	movs	r3, #1
 800d278:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	683a      	ldr	r2, [r7, #0]
 800d27e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800d280:	7bfb      	ldrb	r3, [r7, #15]
}
 800d282:	4618      	mov	r0, r3
 800d284:	3710      	adds	r7, #16
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
	...

0800d28c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f7ff ff87 	bl	800d1a8 <sync_window>
 800d29a:	4603      	mov	r3, r0
 800d29c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d29e:	7bfb      	ldrb	r3, [r7, #15]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d158      	bne.n	800d356 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	2b03      	cmp	r3, #3
 800d2aa:	d148      	bne.n	800d33e <sync_fs+0xb2>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	791b      	ldrb	r3, [r3, #4]
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d144      	bne.n	800d33e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	3330      	adds	r3, #48	; 0x30
 800d2b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2bc:	2100      	movs	r1, #0
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7ff fda9 	bl	800ce16 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	3330      	adds	r3, #48	; 0x30
 800d2c8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d2cc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7ff fd38 	bl	800cd46 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	3330      	adds	r3, #48	; 0x30
 800d2da:	4921      	ldr	r1, [pc, #132]	; (800d360 <sync_fs+0xd4>)
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7ff fd4d 	bl	800cd7c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	3330      	adds	r3, #48	; 0x30
 800d2e6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d2ea:	491e      	ldr	r1, [pc, #120]	; (800d364 <sync_fs+0xd8>)
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7ff fd45 	bl	800cd7c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	3330      	adds	r3, #48	; 0x30
 800d2f6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	691b      	ldr	r3, [r3, #16]
 800d2fe:	4619      	mov	r1, r3
 800d300:	4610      	mov	r0, r2
 800d302:	f7ff fd3b 	bl	800cd7c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	3330      	adds	r3, #48	; 0x30
 800d30a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	68db      	ldr	r3, [r3, #12]
 800d312:	4619      	mov	r1, r3
 800d314:	4610      	mov	r0, r2
 800d316:	f7ff fd31 	bl	800cd7c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	69db      	ldr	r3, [r3, #28]
 800d31e:	1c5a      	adds	r2, r3, #1
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	7858      	ldrb	r0, [r3, #1]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d332:	2301      	movs	r3, #1
 800d334:	f7ff fc8e 	bl	800cc54 <disk_write>
			fs->fsi_flag = 0;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2200      	movs	r2, #0
 800d33c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	785b      	ldrb	r3, [r3, #1]
 800d342:	2200      	movs	r2, #0
 800d344:	2100      	movs	r1, #0
 800d346:	4618      	mov	r0, r3
 800d348:	f7ff fca4 	bl	800cc94 <disk_ioctl>
 800d34c:	4603      	mov	r3, r0
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d001      	beq.n	800d356 <sync_fs+0xca>
 800d352:	2301      	movs	r3, #1
 800d354:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d356:	7bfb      	ldrb	r3, [r7, #15]
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3710      	adds	r7, #16
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}
 800d360:	41615252 	.word	0x41615252
 800d364:	61417272 	.word	0x61417272

0800d368 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d368:	b480      	push	{r7}
 800d36a:	b083      	sub	sp, #12
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	3b02      	subs	r3, #2
 800d376:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	695b      	ldr	r3, [r3, #20]
 800d37c:	3b02      	subs	r3, #2
 800d37e:	683a      	ldr	r2, [r7, #0]
 800d380:	429a      	cmp	r2, r3
 800d382:	d301      	bcc.n	800d388 <clust2sect+0x20>
 800d384:	2300      	movs	r3, #0
 800d386:	e008      	b.n	800d39a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	895b      	ldrh	r3, [r3, #10]
 800d38c:	461a      	mov	r2, r3
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	fb03 f202 	mul.w	r2, r3, r2
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d398:	4413      	add	r3, r2
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	370c      	adds	r7, #12
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a4:	4770      	bx	lr

0800d3a6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d3a6:	b580      	push	{r7, lr}
 800d3a8:	b086      	sub	sp, #24
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
 800d3ae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	2b01      	cmp	r3, #1
 800d3ba:	d904      	bls.n	800d3c6 <get_fat+0x20>
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	695b      	ldr	r3, [r3, #20]
 800d3c0:	683a      	ldr	r2, [r7, #0]
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d302      	bcc.n	800d3cc <get_fat+0x26>
		val = 1;	/* Internal error */
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	617b      	str	r3, [r7, #20]
 800d3ca:	e08f      	b.n	800d4ec <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d3cc:	f04f 33ff 	mov.w	r3, #4294967295
 800d3d0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	2b03      	cmp	r3, #3
 800d3d8:	d062      	beq.n	800d4a0 <get_fat+0xfa>
 800d3da:	2b03      	cmp	r3, #3
 800d3dc:	dc7c      	bgt.n	800d4d8 <get_fat+0x132>
 800d3de:	2b01      	cmp	r3, #1
 800d3e0:	d002      	beq.n	800d3e8 <get_fat+0x42>
 800d3e2:	2b02      	cmp	r3, #2
 800d3e4:	d042      	beq.n	800d46c <get_fat+0xc6>
 800d3e6:	e077      	b.n	800d4d8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	60fb      	str	r3, [r7, #12]
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	085b      	lsrs	r3, r3, #1
 800d3f0:	68fa      	ldr	r2, [r7, #12]
 800d3f2:	4413      	add	r3, r2
 800d3f4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	6a1a      	ldr	r2, [r3, #32]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	0a5b      	lsrs	r3, r3, #9
 800d3fe:	4413      	add	r3, r2
 800d400:	4619      	mov	r1, r3
 800d402:	6938      	ldr	r0, [r7, #16]
 800d404:	f7ff ff14 	bl	800d230 <move_window>
 800d408:	4603      	mov	r3, r0
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d167      	bne.n	800d4de <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	1c5a      	adds	r2, r3, #1
 800d412:	60fa      	str	r2, [r7, #12]
 800d414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d418:	693a      	ldr	r2, [r7, #16]
 800d41a:	4413      	add	r3, r2
 800d41c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d420:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	6a1a      	ldr	r2, [r3, #32]
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	0a5b      	lsrs	r3, r3, #9
 800d42a:	4413      	add	r3, r2
 800d42c:	4619      	mov	r1, r3
 800d42e:	6938      	ldr	r0, [r7, #16]
 800d430:	f7ff fefe 	bl	800d230 <move_window>
 800d434:	4603      	mov	r3, r0
 800d436:	2b00      	cmp	r3, #0
 800d438:	d153      	bne.n	800d4e2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d440:	693a      	ldr	r2, [r7, #16]
 800d442:	4413      	add	r3, r2
 800d444:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d448:	021b      	lsls	r3, r3, #8
 800d44a:	461a      	mov	r2, r3
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	4313      	orrs	r3, r2
 800d450:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	f003 0301 	and.w	r3, r3, #1
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d002      	beq.n	800d462 <get_fat+0xbc>
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	091b      	lsrs	r3, r3, #4
 800d460:	e002      	b.n	800d468 <get_fat+0xc2>
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d468:	617b      	str	r3, [r7, #20]
			break;
 800d46a:	e03f      	b.n	800d4ec <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	6a1a      	ldr	r2, [r3, #32]
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	0a1b      	lsrs	r3, r3, #8
 800d474:	4413      	add	r3, r2
 800d476:	4619      	mov	r1, r3
 800d478:	6938      	ldr	r0, [r7, #16]
 800d47a:	f7ff fed9 	bl	800d230 <move_window>
 800d47e:	4603      	mov	r3, r0
 800d480:	2b00      	cmp	r3, #0
 800d482:	d130      	bne.n	800d4e6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	005b      	lsls	r3, r3, #1
 800d48e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d492:	4413      	add	r3, r2
 800d494:	4618      	mov	r0, r3
 800d496:	f7ff fc1b 	bl	800ccd0 <ld_word>
 800d49a:	4603      	mov	r3, r0
 800d49c:	617b      	str	r3, [r7, #20]
			break;
 800d49e:	e025      	b.n	800d4ec <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	6a1a      	ldr	r2, [r3, #32]
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	09db      	lsrs	r3, r3, #7
 800d4a8:	4413      	add	r3, r2
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	6938      	ldr	r0, [r7, #16]
 800d4ae:	f7ff febf 	bl	800d230 <move_window>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d118      	bne.n	800d4ea <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	009b      	lsls	r3, r3, #2
 800d4c2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d4c6:	4413      	add	r3, r2
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7ff fc19 	bl	800cd00 <ld_dword>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d4d4:	617b      	str	r3, [r7, #20]
			break;
 800d4d6:	e009      	b.n	800d4ec <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d4d8:	2301      	movs	r3, #1
 800d4da:	617b      	str	r3, [r7, #20]
 800d4dc:	e006      	b.n	800d4ec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4de:	bf00      	nop
 800d4e0:	e004      	b.n	800d4ec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4e2:	bf00      	nop
 800d4e4:	e002      	b.n	800d4ec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d4e6:	bf00      	nop
 800d4e8:	e000      	b.n	800d4ec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d4ea:	bf00      	nop
		}
	}

	return val;
 800d4ec:	697b      	ldr	r3, [r7, #20]
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3718      	adds	r7, #24
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}

0800d4f6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d4f6:	b590      	push	{r4, r7, lr}
 800d4f8:	b089      	sub	sp, #36	; 0x24
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	60f8      	str	r0, [r7, #12]
 800d4fe:	60b9      	str	r1, [r7, #8]
 800d500:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d502:	2302      	movs	r3, #2
 800d504:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	2b01      	cmp	r3, #1
 800d50a:	f240 80d2 	bls.w	800d6b2 <put_fat+0x1bc>
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	695b      	ldr	r3, [r3, #20]
 800d512:	68ba      	ldr	r2, [r7, #8]
 800d514:	429a      	cmp	r2, r3
 800d516:	f080 80cc 	bcs.w	800d6b2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	2b03      	cmp	r3, #3
 800d520:	f000 8096 	beq.w	800d650 <put_fat+0x15a>
 800d524:	2b03      	cmp	r3, #3
 800d526:	f300 80cd 	bgt.w	800d6c4 <put_fat+0x1ce>
 800d52a:	2b01      	cmp	r3, #1
 800d52c:	d002      	beq.n	800d534 <put_fat+0x3e>
 800d52e:	2b02      	cmp	r3, #2
 800d530:	d06e      	beq.n	800d610 <put_fat+0x11a>
 800d532:	e0c7      	b.n	800d6c4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	61bb      	str	r3, [r7, #24]
 800d538:	69bb      	ldr	r3, [r7, #24]
 800d53a:	085b      	lsrs	r3, r3, #1
 800d53c:	69ba      	ldr	r2, [r7, #24]
 800d53e:	4413      	add	r3, r2
 800d540:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	6a1a      	ldr	r2, [r3, #32]
 800d546:	69bb      	ldr	r3, [r7, #24]
 800d548:	0a5b      	lsrs	r3, r3, #9
 800d54a:	4413      	add	r3, r2
 800d54c:	4619      	mov	r1, r3
 800d54e:	68f8      	ldr	r0, [r7, #12]
 800d550:	f7ff fe6e 	bl	800d230 <move_window>
 800d554:	4603      	mov	r3, r0
 800d556:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d558:	7ffb      	ldrb	r3, [r7, #31]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	f040 80ab 	bne.w	800d6b6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d566:	69bb      	ldr	r3, [r7, #24]
 800d568:	1c59      	adds	r1, r3, #1
 800d56a:	61b9      	str	r1, [r7, #24]
 800d56c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d570:	4413      	add	r3, r2
 800d572:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	f003 0301 	and.w	r3, r3, #1
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d00d      	beq.n	800d59a <put_fat+0xa4>
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	b25b      	sxtb	r3, r3
 800d584:	f003 030f 	and.w	r3, r3, #15
 800d588:	b25a      	sxtb	r2, r3
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	b2db      	uxtb	r3, r3
 800d58e:	011b      	lsls	r3, r3, #4
 800d590:	b25b      	sxtb	r3, r3
 800d592:	4313      	orrs	r3, r2
 800d594:	b25b      	sxtb	r3, r3
 800d596:	b2db      	uxtb	r3, r3
 800d598:	e001      	b.n	800d59e <put_fat+0xa8>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	b2db      	uxtb	r3, r3
 800d59e:	697a      	ldr	r2, [r7, #20]
 800d5a0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	6a1a      	ldr	r2, [r3, #32]
 800d5ac:	69bb      	ldr	r3, [r7, #24]
 800d5ae:	0a5b      	lsrs	r3, r3, #9
 800d5b0:	4413      	add	r3, r2
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	68f8      	ldr	r0, [r7, #12]
 800d5b6:	f7ff fe3b 	bl	800d230 <move_window>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d5be:	7ffb      	ldrb	r3, [r7, #31]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d17a      	bne.n	800d6ba <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5d0:	4413      	add	r3, r2
 800d5d2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	f003 0301 	and.w	r3, r3, #1
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d003      	beq.n	800d5e6 <put_fat+0xf0>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	091b      	lsrs	r3, r3, #4
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	e00e      	b.n	800d604 <put_fat+0x10e>
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	b25b      	sxtb	r3, r3
 800d5ec:	f023 030f 	bic.w	r3, r3, #15
 800d5f0:	b25a      	sxtb	r2, r3
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	0a1b      	lsrs	r3, r3, #8
 800d5f6:	b25b      	sxtb	r3, r3
 800d5f8:	f003 030f 	and.w	r3, r3, #15
 800d5fc:	b25b      	sxtb	r3, r3
 800d5fe:	4313      	orrs	r3, r2
 800d600:	b25b      	sxtb	r3, r3
 800d602:	b2db      	uxtb	r3, r3
 800d604:	697a      	ldr	r2, [r7, #20]
 800d606:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2201      	movs	r2, #1
 800d60c:	70da      	strb	r2, [r3, #3]
			break;
 800d60e:	e059      	b.n	800d6c4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6a1a      	ldr	r2, [r3, #32]
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	0a1b      	lsrs	r3, r3, #8
 800d618:	4413      	add	r3, r2
 800d61a:	4619      	mov	r1, r3
 800d61c:	68f8      	ldr	r0, [r7, #12]
 800d61e:	f7ff fe07 	bl	800d230 <move_window>
 800d622:	4603      	mov	r3, r0
 800d624:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d626:	7ffb      	ldrb	r3, [r7, #31]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d148      	bne.n	800d6be <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	005b      	lsls	r3, r3, #1
 800d636:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d63a:	4413      	add	r3, r2
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	b292      	uxth	r2, r2
 800d640:	4611      	mov	r1, r2
 800d642:	4618      	mov	r0, r3
 800d644:	f7ff fb7f 	bl	800cd46 <st_word>
			fs->wflag = 1;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2201      	movs	r2, #1
 800d64c:	70da      	strb	r2, [r3, #3]
			break;
 800d64e:	e039      	b.n	800d6c4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	6a1a      	ldr	r2, [r3, #32]
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	09db      	lsrs	r3, r3, #7
 800d658:	4413      	add	r3, r2
 800d65a:	4619      	mov	r1, r3
 800d65c:	68f8      	ldr	r0, [r7, #12]
 800d65e:	f7ff fde7 	bl	800d230 <move_window>
 800d662:	4603      	mov	r3, r0
 800d664:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d666:	7ffb      	ldrb	r3, [r7, #31]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d12a      	bne.n	800d6c2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	009b      	lsls	r3, r3, #2
 800d67c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d680:	4413      	add	r3, r2
 800d682:	4618      	mov	r0, r3
 800d684:	f7ff fb3c 	bl	800cd00 <ld_dword>
 800d688:	4603      	mov	r3, r0
 800d68a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d68e:	4323      	orrs	r3, r4
 800d690:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	009b      	lsls	r3, r3, #2
 800d69c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d6a0:	4413      	add	r3, r2
 800d6a2:	6879      	ldr	r1, [r7, #4]
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7ff fb69 	bl	800cd7c <st_dword>
			fs->wflag = 1;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	70da      	strb	r2, [r3, #3]
			break;
 800d6b0:	e008      	b.n	800d6c4 <put_fat+0x1ce>
		}
	}
 800d6b2:	bf00      	nop
 800d6b4:	e006      	b.n	800d6c4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d6b6:	bf00      	nop
 800d6b8:	e004      	b.n	800d6c4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d6ba:	bf00      	nop
 800d6bc:	e002      	b.n	800d6c4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d6be:	bf00      	nop
 800d6c0:	e000      	b.n	800d6c4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d6c2:	bf00      	nop
	return res;
 800d6c4:	7ffb      	ldrb	r3, [r7, #31]
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3724      	adds	r7, #36	; 0x24
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd90      	pop	{r4, r7, pc}

0800d6ce <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d6ce:	b580      	push	{r7, lr}
 800d6d0:	b088      	sub	sp, #32
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	60f8      	str	r0, [r7, #12]
 800d6d6:	60b9      	str	r1, [r7, #8]
 800d6d8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	d904      	bls.n	800d6f4 <remove_chain+0x26>
 800d6ea:	69bb      	ldr	r3, [r7, #24]
 800d6ec:	695b      	ldr	r3, [r3, #20]
 800d6ee:	68ba      	ldr	r2, [r7, #8]
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d301      	bcc.n	800d6f8 <remove_chain+0x2a>
 800d6f4:	2302      	movs	r3, #2
 800d6f6:	e04b      	b.n	800d790 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d00c      	beq.n	800d718 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d702:	6879      	ldr	r1, [r7, #4]
 800d704:	69b8      	ldr	r0, [r7, #24]
 800d706:	f7ff fef6 	bl	800d4f6 <put_fat>
 800d70a:	4603      	mov	r3, r0
 800d70c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d70e:	7ffb      	ldrb	r3, [r7, #31]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d001      	beq.n	800d718 <remove_chain+0x4a>
 800d714:	7ffb      	ldrb	r3, [r7, #31]
 800d716:	e03b      	b.n	800d790 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d718:	68b9      	ldr	r1, [r7, #8]
 800d71a:	68f8      	ldr	r0, [r7, #12]
 800d71c:	f7ff fe43 	bl	800d3a6 <get_fat>
 800d720:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d031      	beq.n	800d78c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	2b01      	cmp	r3, #1
 800d72c:	d101      	bne.n	800d732 <remove_chain+0x64>
 800d72e:	2302      	movs	r3, #2
 800d730:	e02e      	b.n	800d790 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d738:	d101      	bne.n	800d73e <remove_chain+0x70>
 800d73a:	2301      	movs	r3, #1
 800d73c:	e028      	b.n	800d790 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d73e:	2200      	movs	r2, #0
 800d740:	68b9      	ldr	r1, [r7, #8]
 800d742:	69b8      	ldr	r0, [r7, #24]
 800d744:	f7ff fed7 	bl	800d4f6 <put_fat>
 800d748:	4603      	mov	r3, r0
 800d74a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d74c:	7ffb      	ldrb	r3, [r7, #31]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d001      	beq.n	800d756 <remove_chain+0x88>
 800d752:	7ffb      	ldrb	r3, [r7, #31]
 800d754:	e01c      	b.n	800d790 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	691a      	ldr	r2, [r3, #16]
 800d75a:	69bb      	ldr	r3, [r7, #24]
 800d75c:	695b      	ldr	r3, [r3, #20]
 800d75e:	3b02      	subs	r3, #2
 800d760:	429a      	cmp	r2, r3
 800d762:	d20b      	bcs.n	800d77c <remove_chain+0xae>
			fs->free_clst++;
 800d764:	69bb      	ldr	r3, [r7, #24]
 800d766:	691b      	ldr	r3, [r3, #16]
 800d768:	1c5a      	adds	r2, r3, #1
 800d76a:	69bb      	ldr	r3, [r7, #24]
 800d76c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d76e:	69bb      	ldr	r3, [r7, #24]
 800d770:	791b      	ldrb	r3, [r3, #4]
 800d772:	f043 0301 	orr.w	r3, r3, #1
 800d776:	b2da      	uxtb	r2, r3
 800d778:	69bb      	ldr	r3, [r7, #24]
 800d77a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d780:	69bb      	ldr	r3, [r7, #24]
 800d782:	695b      	ldr	r3, [r3, #20]
 800d784:	68ba      	ldr	r2, [r7, #8]
 800d786:	429a      	cmp	r2, r3
 800d788:	d3c6      	bcc.n	800d718 <remove_chain+0x4a>
 800d78a:	e000      	b.n	800d78e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d78c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d78e:	2300      	movs	r3, #0
}
 800d790:	4618      	mov	r0, r3
 800d792:	3720      	adds	r7, #32
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b088      	sub	sp, #32
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d10d      	bne.n	800d7ca <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	68db      	ldr	r3, [r3, #12]
 800d7b2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d7b4:	69bb      	ldr	r3, [r7, #24]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d004      	beq.n	800d7c4 <create_chain+0x2c>
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	695b      	ldr	r3, [r3, #20]
 800d7be:	69ba      	ldr	r2, [r7, #24]
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	d31b      	bcc.n	800d7fc <create_chain+0x64>
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	61bb      	str	r3, [r7, #24]
 800d7c8:	e018      	b.n	800d7fc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d7ca:	6839      	ldr	r1, [r7, #0]
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f7ff fdea 	bl	800d3a6 <get_fat>
 800d7d2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d801      	bhi.n	800d7de <create_chain+0x46>
 800d7da:	2301      	movs	r3, #1
 800d7dc:	e070      	b.n	800d8c0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7e4:	d101      	bne.n	800d7ea <create_chain+0x52>
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	e06a      	b.n	800d8c0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	695b      	ldr	r3, [r3, #20]
 800d7ee:	68fa      	ldr	r2, [r7, #12]
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	d201      	bcs.n	800d7f8 <create_chain+0x60>
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	e063      	b.n	800d8c0 <create_chain+0x128>
		scl = clst;
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d7fc:	69bb      	ldr	r3, [r7, #24]
 800d7fe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d800:	69fb      	ldr	r3, [r7, #28]
 800d802:	3301      	adds	r3, #1
 800d804:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	695b      	ldr	r3, [r3, #20]
 800d80a:	69fa      	ldr	r2, [r7, #28]
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d307      	bcc.n	800d820 <create_chain+0x88>
				ncl = 2;
 800d810:	2302      	movs	r3, #2
 800d812:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d814:	69fa      	ldr	r2, [r7, #28]
 800d816:	69bb      	ldr	r3, [r7, #24]
 800d818:	429a      	cmp	r2, r3
 800d81a:	d901      	bls.n	800d820 <create_chain+0x88>
 800d81c:	2300      	movs	r3, #0
 800d81e:	e04f      	b.n	800d8c0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d820:	69f9      	ldr	r1, [r7, #28]
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f7ff fdbf 	bl	800d3a6 <get_fat>
 800d828:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d00e      	beq.n	800d84e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	2b01      	cmp	r3, #1
 800d834:	d003      	beq.n	800d83e <create_chain+0xa6>
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d83c:	d101      	bne.n	800d842 <create_chain+0xaa>
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	e03e      	b.n	800d8c0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d842:	69fa      	ldr	r2, [r7, #28]
 800d844:	69bb      	ldr	r3, [r7, #24]
 800d846:	429a      	cmp	r2, r3
 800d848:	d1da      	bne.n	800d800 <create_chain+0x68>
 800d84a:	2300      	movs	r3, #0
 800d84c:	e038      	b.n	800d8c0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d84e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d850:	f04f 32ff 	mov.w	r2, #4294967295
 800d854:	69f9      	ldr	r1, [r7, #28]
 800d856:	6938      	ldr	r0, [r7, #16]
 800d858:	f7ff fe4d 	bl	800d4f6 <put_fat>
 800d85c:	4603      	mov	r3, r0
 800d85e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d860:	7dfb      	ldrb	r3, [r7, #23]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d109      	bne.n	800d87a <create_chain+0xe2>
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d006      	beq.n	800d87a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d86c:	69fa      	ldr	r2, [r7, #28]
 800d86e:	6839      	ldr	r1, [r7, #0]
 800d870:	6938      	ldr	r0, [r7, #16]
 800d872:	f7ff fe40 	bl	800d4f6 <put_fat>
 800d876:	4603      	mov	r3, r0
 800d878:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d87a:	7dfb      	ldrb	r3, [r7, #23]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d116      	bne.n	800d8ae <create_chain+0x116>
		fs->last_clst = ncl;
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	69fa      	ldr	r2, [r7, #28]
 800d884:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	691a      	ldr	r2, [r3, #16]
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	695b      	ldr	r3, [r3, #20]
 800d88e:	3b02      	subs	r3, #2
 800d890:	429a      	cmp	r2, r3
 800d892:	d804      	bhi.n	800d89e <create_chain+0x106>
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	691b      	ldr	r3, [r3, #16]
 800d898:	1e5a      	subs	r2, r3, #1
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	791b      	ldrb	r3, [r3, #4]
 800d8a2:	f043 0301 	orr.w	r3, r3, #1
 800d8a6:	b2da      	uxtb	r2, r3
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	711a      	strb	r2, [r3, #4]
 800d8ac:	e007      	b.n	800d8be <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d8ae:	7dfb      	ldrb	r3, [r7, #23]
 800d8b0:	2b01      	cmp	r3, #1
 800d8b2:	d102      	bne.n	800d8ba <create_chain+0x122>
 800d8b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d8b8:	e000      	b.n	800d8bc <create_chain+0x124>
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d8be:	69fb      	ldr	r3, [r7, #28]
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3720      	adds	r7, #32
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}

0800d8c8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b087      	sub	sp, #28
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8dc:	3304      	adds	r3, #4
 800d8de:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	0a5b      	lsrs	r3, r3, #9
 800d8e4:	68fa      	ldr	r2, [r7, #12]
 800d8e6:	8952      	ldrh	r2, [r2, #10]
 800d8e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8ec:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	1d1a      	adds	r2, r3, #4
 800d8f2:	613a      	str	r2, [r7, #16]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d101      	bne.n	800d902 <clmt_clust+0x3a>
 800d8fe:	2300      	movs	r3, #0
 800d900:	e010      	b.n	800d924 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d902:	697a      	ldr	r2, [r7, #20]
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	429a      	cmp	r2, r3
 800d908:	d307      	bcc.n	800d91a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d90a:	697a      	ldr	r2, [r7, #20]
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	1ad3      	subs	r3, r2, r3
 800d910:	617b      	str	r3, [r7, #20]
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	3304      	adds	r3, #4
 800d916:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d918:	e7e9      	b.n	800d8ee <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d91a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	681a      	ldr	r2, [r3, #0]
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	4413      	add	r3, r2
}
 800d924:	4618      	mov	r0, r3
 800d926:	371c      	adds	r7, #28
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr

0800d930 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b086      	sub	sp, #24
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d946:	d204      	bcs.n	800d952 <dir_sdi+0x22>
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	f003 031f 	and.w	r3, r3, #31
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d001      	beq.n	800d956 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d952:	2302      	movs	r3, #2
 800d954:	e063      	b.n	800da1e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	683a      	ldr	r2, [r7, #0]
 800d95a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	689b      	ldr	r3, [r3, #8]
 800d960:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d106      	bne.n	800d976 <dir_sdi+0x46>
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	2b02      	cmp	r3, #2
 800d96e:	d902      	bls.n	800d976 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d974:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d10c      	bne.n	800d996 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	095b      	lsrs	r3, r3, #5
 800d980:	693a      	ldr	r2, [r7, #16]
 800d982:	8912      	ldrh	r2, [r2, #8]
 800d984:	4293      	cmp	r3, r2
 800d986:	d301      	bcc.n	800d98c <dir_sdi+0x5c>
 800d988:	2302      	movs	r3, #2
 800d98a:	e048      	b.n	800da1e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	61da      	str	r2, [r3, #28]
 800d994:	e029      	b.n	800d9ea <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	895b      	ldrh	r3, [r3, #10]
 800d99a:	025b      	lsls	r3, r3, #9
 800d99c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d99e:	e019      	b.n	800d9d4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6979      	ldr	r1, [r7, #20]
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7ff fcfe 	bl	800d3a6 <get_fat>
 800d9aa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9b2:	d101      	bne.n	800d9b8 <dir_sdi+0x88>
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	e032      	b.n	800da1e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	2b01      	cmp	r3, #1
 800d9bc:	d904      	bls.n	800d9c8 <dir_sdi+0x98>
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	695b      	ldr	r3, [r3, #20]
 800d9c2:	697a      	ldr	r2, [r7, #20]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d301      	bcc.n	800d9cc <dir_sdi+0x9c>
 800d9c8:	2302      	movs	r3, #2
 800d9ca:	e028      	b.n	800da1e <dir_sdi+0xee>
			ofs -= csz;
 800d9cc:	683a      	ldr	r2, [r7, #0]
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	1ad3      	subs	r3, r2, r3
 800d9d2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d9d4:	683a      	ldr	r2, [r7, #0]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d2e1      	bcs.n	800d9a0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d9dc:	6979      	ldr	r1, [r7, #20]
 800d9de:	6938      	ldr	r0, [r7, #16]
 800d9e0:	f7ff fcc2 	bl	800d368 <clust2sect>
 800d9e4:	4602      	mov	r2, r0
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	697a      	ldr	r2, [r7, #20]
 800d9ee:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	69db      	ldr	r3, [r3, #28]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d101      	bne.n	800d9fc <dir_sdi+0xcc>
 800d9f8:	2302      	movs	r3, #2
 800d9fa:	e010      	b.n	800da1e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	69da      	ldr	r2, [r3, #28]
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	0a5b      	lsrs	r3, r3, #9
 800da04:	441a      	add	r2, r3
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da16:	441a      	add	r2, r3
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800da1c:	2300      	movs	r3, #0
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3718      	adds	r7, #24
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}

0800da26 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800da26:	b580      	push	{r7, lr}
 800da28:	b086      	sub	sp, #24
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
 800da2e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	695b      	ldr	r3, [r3, #20]
 800da3a:	3320      	adds	r3, #32
 800da3c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	69db      	ldr	r3, [r3, #28]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d003      	beq.n	800da4e <dir_next+0x28>
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800da4c:	d301      	bcc.n	800da52 <dir_next+0x2c>
 800da4e:	2304      	movs	r3, #4
 800da50:	e0aa      	b.n	800dba8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da58:	2b00      	cmp	r3, #0
 800da5a:	f040 8098 	bne.w	800db8e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	69db      	ldr	r3, [r3, #28]
 800da62:	1c5a      	adds	r2, r3, #1
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	699b      	ldr	r3, [r3, #24]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d10b      	bne.n	800da88 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	095b      	lsrs	r3, r3, #5
 800da74:	68fa      	ldr	r2, [r7, #12]
 800da76:	8912      	ldrh	r2, [r2, #8]
 800da78:	4293      	cmp	r3, r2
 800da7a:	f0c0 8088 	bcc.w	800db8e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2200      	movs	r2, #0
 800da82:	61da      	str	r2, [r3, #28]
 800da84:	2304      	movs	r3, #4
 800da86:	e08f      	b.n	800dba8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	0a5b      	lsrs	r3, r3, #9
 800da8c:	68fa      	ldr	r2, [r7, #12]
 800da8e:	8952      	ldrh	r2, [r2, #10]
 800da90:	3a01      	subs	r2, #1
 800da92:	4013      	ands	r3, r2
 800da94:	2b00      	cmp	r3, #0
 800da96:	d17a      	bne.n	800db8e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	699b      	ldr	r3, [r3, #24]
 800da9e:	4619      	mov	r1, r3
 800daa0:	4610      	mov	r0, r2
 800daa2:	f7ff fc80 	bl	800d3a6 <get_fat>
 800daa6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	2b01      	cmp	r3, #1
 800daac:	d801      	bhi.n	800dab2 <dir_next+0x8c>
 800daae:	2302      	movs	r3, #2
 800dab0:	e07a      	b.n	800dba8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dab8:	d101      	bne.n	800dabe <dir_next+0x98>
 800daba:	2301      	movs	r3, #1
 800dabc:	e074      	b.n	800dba8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	695b      	ldr	r3, [r3, #20]
 800dac2:	697a      	ldr	r2, [r7, #20]
 800dac4:	429a      	cmp	r2, r3
 800dac6:	d358      	bcc.n	800db7a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d104      	bne.n	800dad8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2200      	movs	r2, #0
 800dad2:	61da      	str	r2, [r3, #28]
 800dad4:	2304      	movs	r3, #4
 800dad6:	e067      	b.n	800dba8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dad8:	687a      	ldr	r2, [r7, #4]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	699b      	ldr	r3, [r3, #24]
 800dade:	4619      	mov	r1, r3
 800dae0:	4610      	mov	r0, r2
 800dae2:	f7ff fe59 	bl	800d798 <create_chain>
 800dae6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d101      	bne.n	800daf2 <dir_next+0xcc>
 800daee:	2307      	movs	r3, #7
 800daf0:	e05a      	b.n	800dba8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	d101      	bne.n	800dafc <dir_next+0xd6>
 800daf8:	2302      	movs	r3, #2
 800dafa:	e055      	b.n	800dba8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db02:	d101      	bne.n	800db08 <dir_next+0xe2>
 800db04:	2301      	movs	r3, #1
 800db06:	e04f      	b.n	800dba8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800db08:	68f8      	ldr	r0, [r7, #12]
 800db0a:	f7ff fb4d 	bl	800d1a8 <sync_window>
 800db0e:	4603      	mov	r3, r0
 800db10:	2b00      	cmp	r3, #0
 800db12:	d001      	beq.n	800db18 <dir_next+0xf2>
 800db14:	2301      	movs	r3, #1
 800db16:	e047      	b.n	800dba8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	3330      	adds	r3, #48	; 0x30
 800db1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db20:	2100      	movs	r1, #0
 800db22:	4618      	mov	r0, r3
 800db24:	f7ff f977 	bl	800ce16 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db28:	2300      	movs	r3, #0
 800db2a:	613b      	str	r3, [r7, #16]
 800db2c:	6979      	ldr	r1, [r7, #20]
 800db2e:	68f8      	ldr	r0, [r7, #12]
 800db30:	f7ff fc1a 	bl	800d368 <clust2sect>
 800db34:	4602      	mov	r2, r0
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	62da      	str	r2, [r3, #44]	; 0x2c
 800db3a:	e012      	b.n	800db62 <dir_next+0x13c>
						fs->wflag = 1;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2201      	movs	r2, #1
 800db40:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800db42:	68f8      	ldr	r0, [r7, #12]
 800db44:	f7ff fb30 	bl	800d1a8 <sync_window>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d001      	beq.n	800db52 <dir_next+0x12c>
 800db4e:	2301      	movs	r3, #1
 800db50:	e02a      	b.n	800dba8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	3301      	adds	r3, #1
 800db56:	613b      	str	r3, [r7, #16]
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db5c:	1c5a      	adds	r2, r3, #1
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	62da      	str	r2, [r3, #44]	; 0x2c
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	895b      	ldrh	r3, [r3, #10]
 800db66:	461a      	mov	r2, r3
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	4293      	cmp	r3, r2
 800db6c:	d3e6      	bcc.n	800db3c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	1ad2      	subs	r2, r2, r3
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	697a      	ldr	r2, [r7, #20]
 800db7e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800db80:	6979      	ldr	r1, [r7, #20]
 800db82:	68f8      	ldr	r0, [r7, #12]
 800db84:	f7ff fbf0 	bl	800d368 <clust2sect>
 800db88:	4602      	mov	r2, r0
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	68ba      	ldr	r2, [r7, #8]
 800db92:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dba0:	441a      	add	r2, r3
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dba6:	2300      	movs	r3, #0
}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	3718      	adds	r7, #24
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b086      	sub	sp, #24
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dbc0:	2100      	movs	r1, #0
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f7ff feb4 	bl	800d930 <dir_sdi>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dbcc:	7dfb      	ldrb	r3, [r7, #23]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d12b      	bne.n	800dc2a <dir_alloc+0x7a>
		n = 0;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	69db      	ldr	r3, [r3, #28]
 800dbda:	4619      	mov	r1, r3
 800dbdc:	68f8      	ldr	r0, [r7, #12]
 800dbde:	f7ff fb27 	bl	800d230 <move_window>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dbe6:	7dfb      	ldrb	r3, [r7, #23]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d11d      	bne.n	800dc28 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6a1b      	ldr	r3, [r3, #32]
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	2be5      	cmp	r3, #229	; 0xe5
 800dbf4:	d004      	beq.n	800dc00 <dir_alloc+0x50>
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6a1b      	ldr	r3, [r3, #32]
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d107      	bne.n	800dc10 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	3301      	adds	r3, #1
 800dc04:	613b      	str	r3, [r7, #16]
 800dc06:	693a      	ldr	r2, [r7, #16]
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d102      	bne.n	800dc14 <dir_alloc+0x64>
 800dc0e:	e00c      	b.n	800dc2a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dc10:	2300      	movs	r3, #0
 800dc12:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dc14:	2101      	movs	r1, #1
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f7ff ff05 	bl	800da26 <dir_next>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dc20:	7dfb      	ldrb	r3, [r7, #23]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d0d7      	beq.n	800dbd6 <dir_alloc+0x26>
 800dc26:	e000      	b.n	800dc2a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dc28:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dc2a:	7dfb      	ldrb	r3, [r7, #23]
 800dc2c:	2b04      	cmp	r3, #4
 800dc2e:	d101      	bne.n	800dc34 <dir_alloc+0x84>
 800dc30:	2307      	movs	r3, #7
 800dc32:	75fb      	strb	r3, [r7, #23]
	return res;
 800dc34:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3718      	adds	r7, #24
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}

0800dc3e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dc3e:	b580      	push	{r7, lr}
 800dc40:	b084      	sub	sp, #16
 800dc42:	af00      	add	r7, sp, #0
 800dc44:	6078      	str	r0, [r7, #4]
 800dc46:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	331a      	adds	r3, #26
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7ff f83f 	bl	800ccd0 <ld_word>
 800dc52:	4603      	mov	r3, r0
 800dc54:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	781b      	ldrb	r3, [r3, #0]
 800dc5a:	2b03      	cmp	r3, #3
 800dc5c:	d109      	bne.n	800dc72 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	3314      	adds	r3, #20
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7ff f834 	bl	800ccd0 <ld_word>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	041b      	lsls	r3, r3, #16
 800dc6c:	68fa      	ldr	r2, [r7, #12]
 800dc6e:	4313      	orrs	r3, r2
 800dc70:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dc72:	68fb      	ldr	r3, [r7, #12]
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3710      	adds	r7, #16
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b084      	sub	sp, #16
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	60f8      	str	r0, [r7, #12]
 800dc84:	60b9      	str	r1, [r7, #8]
 800dc86:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	331a      	adds	r3, #26
 800dc8c:	687a      	ldr	r2, [r7, #4]
 800dc8e:	b292      	uxth	r2, r2
 800dc90:	4611      	mov	r1, r2
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7ff f857 	bl	800cd46 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	2b03      	cmp	r3, #3
 800dc9e:	d109      	bne.n	800dcb4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	f103 0214 	add.w	r2, r3, #20
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	0c1b      	lsrs	r3, r3, #16
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	4619      	mov	r1, r3
 800dcae:	4610      	mov	r0, r2
 800dcb0:	f7ff f849 	bl	800cd46 <st_word>
	}
}
 800dcb4:	bf00      	nop
 800dcb6:	3710      	adds	r7, #16
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b086      	sub	sp, #24
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dcca:	2100      	movs	r1, #0
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f7ff fe2f 	bl	800d930 <dir_sdi>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800dcd6:	7dfb      	ldrb	r3, [r7, #23]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d001      	beq.n	800dce0 <dir_find+0x24>
 800dcdc:	7dfb      	ldrb	r3, [r7, #23]
 800dcde:	e03e      	b.n	800dd5e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	69db      	ldr	r3, [r3, #28]
 800dce4:	4619      	mov	r1, r3
 800dce6:	6938      	ldr	r0, [r7, #16]
 800dce8:	f7ff faa2 	bl	800d230 <move_window>
 800dcec:	4603      	mov	r3, r0
 800dcee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dcf0:	7dfb      	ldrb	r3, [r7, #23]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d12f      	bne.n	800dd56 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6a1b      	ldr	r3, [r3, #32]
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dcfe:	7bfb      	ldrb	r3, [r7, #15]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d102      	bne.n	800dd0a <dir_find+0x4e>
 800dd04:	2304      	movs	r3, #4
 800dd06:	75fb      	strb	r3, [r7, #23]
 800dd08:	e028      	b.n	800dd5c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6a1b      	ldr	r3, [r3, #32]
 800dd0e:	330b      	adds	r3, #11
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd16:	b2da      	uxtb	r2, r3
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6a1b      	ldr	r3, [r3, #32]
 800dd20:	330b      	adds	r3, #11
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	f003 0308 	and.w	r3, r3, #8
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d10a      	bne.n	800dd42 <dir_find+0x86>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6a18      	ldr	r0, [r3, #32]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	3324      	adds	r3, #36	; 0x24
 800dd34:	220b      	movs	r2, #11
 800dd36:	4619      	mov	r1, r3
 800dd38:	f7ff f888 	bl	800ce4c <mem_cmp>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d00b      	beq.n	800dd5a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800dd42:	2100      	movs	r1, #0
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f7ff fe6e 	bl	800da26 <dir_next>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800dd4e:	7dfb      	ldrb	r3, [r7, #23]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d0c5      	beq.n	800dce0 <dir_find+0x24>
 800dd54:	e002      	b.n	800dd5c <dir_find+0xa0>
		if (res != FR_OK) break;
 800dd56:	bf00      	nop
 800dd58:	e000      	b.n	800dd5c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dd5a:	bf00      	nop

	return res;
 800dd5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3718      	adds	r7, #24
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}

0800dd66 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800dd66:	b580      	push	{r7, lr}
 800dd68:	b084      	sub	sp, #16
 800dd6a:	af00      	add	r7, sp, #0
 800dd6c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800dd74:	2101      	movs	r1, #1
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f7ff ff1a 	bl	800dbb0 <dir_alloc>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dd80:	7bfb      	ldrb	r3, [r7, #15]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d11c      	bne.n	800ddc0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	69db      	ldr	r3, [r3, #28]
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	68b8      	ldr	r0, [r7, #8]
 800dd8e:	f7ff fa4f 	bl	800d230 <move_window>
 800dd92:	4603      	mov	r3, r0
 800dd94:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dd96:	7bfb      	ldrb	r3, [r7, #15]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d111      	bne.n	800ddc0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6a1b      	ldr	r3, [r3, #32]
 800dda0:	2220      	movs	r2, #32
 800dda2:	2100      	movs	r1, #0
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7ff f836 	bl	800ce16 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6a18      	ldr	r0, [r3, #32]
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	3324      	adds	r3, #36	; 0x24
 800ddb2:	220b      	movs	r2, #11
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	f7ff f80d 	bl	800cdd4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ddc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3710      	adds	r7, #16
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
	...

0800ddcc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b088      	sub	sp, #32
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
 800ddd4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	60fb      	str	r3, [r7, #12]
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	3324      	adds	r3, #36	; 0x24
 800dde0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800dde2:	220b      	movs	r2, #11
 800dde4:	2120      	movs	r1, #32
 800dde6:	68b8      	ldr	r0, [r7, #8]
 800dde8:	f7ff f815 	bl	800ce16 <mem_set>
	si = i = 0; ni = 8;
 800ddec:	2300      	movs	r3, #0
 800ddee:	613b      	str	r3, [r7, #16]
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	61fb      	str	r3, [r7, #28]
 800ddf4:	2308      	movs	r3, #8
 800ddf6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ddf8:	69fb      	ldr	r3, [r7, #28]
 800ddfa:	1c5a      	adds	r2, r3, #1
 800ddfc:	61fa      	str	r2, [r7, #28]
 800ddfe:	68fa      	ldr	r2, [r7, #12]
 800de00:	4413      	add	r3, r2
 800de02:	781b      	ldrb	r3, [r3, #0]
 800de04:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800de06:	7efb      	ldrb	r3, [r7, #27]
 800de08:	2b20      	cmp	r3, #32
 800de0a:	d94e      	bls.n	800deaa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800de0c:	7efb      	ldrb	r3, [r7, #27]
 800de0e:	2b2f      	cmp	r3, #47	; 0x2f
 800de10:	d006      	beq.n	800de20 <create_name+0x54>
 800de12:	7efb      	ldrb	r3, [r7, #27]
 800de14:	2b5c      	cmp	r3, #92	; 0x5c
 800de16:	d110      	bne.n	800de3a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800de18:	e002      	b.n	800de20 <create_name+0x54>
 800de1a:	69fb      	ldr	r3, [r7, #28]
 800de1c:	3301      	adds	r3, #1
 800de1e:	61fb      	str	r3, [r7, #28]
 800de20:	68fa      	ldr	r2, [r7, #12]
 800de22:	69fb      	ldr	r3, [r7, #28]
 800de24:	4413      	add	r3, r2
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	2b2f      	cmp	r3, #47	; 0x2f
 800de2a:	d0f6      	beq.n	800de1a <create_name+0x4e>
 800de2c:	68fa      	ldr	r2, [r7, #12]
 800de2e:	69fb      	ldr	r3, [r7, #28]
 800de30:	4413      	add	r3, r2
 800de32:	781b      	ldrb	r3, [r3, #0]
 800de34:	2b5c      	cmp	r3, #92	; 0x5c
 800de36:	d0f0      	beq.n	800de1a <create_name+0x4e>
			break;
 800de38:	e038      	b.n	800deac <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800de3a:	7efb      	ldrb	r3, [r7, #27]
 800de3c:	2b2e      	cmp	r3, #46	; 0x2e
 800de3e:	d003      	beq.n	800de48 <create_name+0x7c>
 800de40:	693a      	ldr	r2, [r7, #16]
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	429a      	cmp	r2, r3
 800de46:	d30c      	bcc.n	800de62 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	2b0b      	cmp	r3, #11
 800de4c:	d002      	beq.n	800de54 <create_name+0x88>
 800de4e:	7efb      	ldrb	r3, [r7, #27]
 800de50:	2b2e      	cmp	r3, #46	; 0x2e
 800de52:	d001      	beq.n	800de58 <create_name+0x8c>
 800de54:	2306      	movs	r3, #6
 800de56:	e044      	b.n	800dee2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800de58:	2308      	movs	r3, #8
 800de5a:	613b      	str	r3, [r7, #16]
 800de5c:	230b      	movs	r3, #11
 800de5e:	617b      	str	r3, [r7, #20]
			continue;
 800de60:	e022      	b.n	800dea8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800de62:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800de66:	2b00      	cmp	r3, #0
 800de68:	da04      	bge.n	800de74 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800de6a:	7efb      	ldrb	r3, [r7, #27]
 800de6c:	3b80      	subs	r3, #128	; 0x80
 800de6e:	4a1f      	ldr	r2, [pc, #124]	; (800deec <create_name+0x120>)
 800de70:	5cd3      	ldrb	r3, [r2, r3]
 800de72:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800de74:	7efb      	ldrb	r3, [r7, #27]
 800de76:	4619      	mov	r1, r3
 800de78:	481d      	ldr	r0, [pc, #116]	; (800def0 <create_name+0x124>)
 800de7a:	f7ff f80e 	bl	800ce9a <chk_chr>
 800de7e:	4603      	mov	r3, r0
 800de80:	2b00      	cmp	r3, #0
 800de82:	d001      	beq.n	800de88 <create_name+0xbc>
 800de84:	2306      	movs	r3, #6
 800de86:	e02c      	b.n	800dee2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800de88:	7efb      	ldrb	r3, [r7, #27]
 800de8a:	2b60      	cmp	r3, #96	; 0x60
 800de8c:	d905      	bls.n	800de9a <create_name+0xce>
 800de8e:	7efb      	ldrb	r3, [r7, #27]
 800de90:	2b7a      	cmp	r3, #122	; 0x7a
 800de92:	d802      	bhi.n	800de9a <create_name+0xce>
 800de94:	7efb      	ldrb	r3, [r7, #27]
 800de96:	3b20      	subs	r3, #32
 800de98:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800de9a:	693b      	ldr	r3, [r7, #16]
 800de9c:	1c5a      	adds	r2, r3, #1
 800de9e:	613a      	str	r2, [r7, #16]
 800dea0:	68ba      	ldr	r2, [r7, #8]
 800dea2:	4413      	add	r3, r2
 800dea4:	7efa      	ldrb	r2, [r7, #27]
 800dea6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800dea8:	e7a6      	b.n	800ddf8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800deaa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800deac:	68fa      	ldr	r2, [r7, #12]
 800deae:	69fb      	ldr	r3, [r7, #28]
 800deb0:	441a      	add	r2, r3
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d101      	bne.n	800dec0 <create_name+0xf4>
 800debc:	2306      	movs	r3, #6
 800debe:	e010      	b.n	800dee2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	2be5      	cmp	r3, #229	; 0xe5
 800dec6:	d102      	bne.n	800dece <create_name+0x102>
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	2205      	movs	r2, #5
 800decc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dece:	7efb      	ldrb	r3, [r7, #27]
 800ded0:	2b20      	cmp	r3, #32
 800ded2:	d801      	bhi.n	800ded8 <create_name+0x10c>
 800ded4:	2204      	movs	r2, #4
 800ded6:	e000      	b.n	800deda <create_name+0x10e>
 800ded8:	2200      	movs	r2, #0
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	330b      	adds	r3, #11
 800dede:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800dee0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3720      	adds	r7, #32
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop
 800deec:	0800fc6c 	.word	0x0800fc6c
 800def0:	0800fb94 	.word	0x0800fb94

0800def4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b086      	sub	sp, #24
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800df08:	e002      	b.n	800df10 <follow_path+0x1c>
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	3301      	adds	r3, #1
 800df0e:	603b      	str	r3, [r7, #0]
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	2b2f      	cmp	r3, #47	; 0x2f
 800df16:	d0f8      	beq.n	800df0a <follow_path+0x16>
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	2b5c      	cmp	r3, #92	; 0x5c
 800df1e:	d0f4      	beq.n	800df0a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	2200      	movs	r2, #0
 800df24:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	2b1f      	cmp	r3, #31
 800df2c:	d80a      	bhi.n	800df44 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2280      	movs	r2, #128	; 0x80
 800df32:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800df36:	2100      	movs	r1, #0
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f7ff fcf9 	bl	800d930 <dir_sdi>
 800df3e:	4603      	mov	r3, r0
 800df40:	75fb      	strb	r3, [r7, #23]
 800df42:	e043      	b.n	800dfcc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800df44:	463b      	mov	r3, r7
 800df46:	4619      	mov	r1, r3
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f7ff ff3f 	bl	800ddcc <create_name>
 800df4e:	4603      	mov	r3, r0
 800df50:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800df52:	7dfb      	ldrb	r3, [r7, #23]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d134      	bne.n	800dfc2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f7ff feaf 	bl	800dcbc <dir_find>
 800df5e:	4603      	mov	r3, r0
 800df60:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800df68:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800df6a:	7dfb      	ldrb	r3, [r7, #23]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d00a      	beq.n	800df86 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800df70:	7dfb      	ldrb	r3, [r7, #23]
 800df72:	2b04      	cmp	r3, #4
 800df74:	d127      	bne.n	800dfc6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800df76:	7afb      	ldrb	r3, [r7, #11]
 800df78:	f003 0304 	and.w	r3, r3, #4
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d122      	bne.n	800dfc6 <follow_path+0xd2>
 800df80:	2305      	movs	r3, #5
 800df82:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800df84:	e01f      	b.n	800dfc6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800df86:	7afb      	ldrb	r3, [r7, #11]
 800df88:	f003 0304 	and.w	r3, r3, #4
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d11c      	bne.n	800dfca <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	799b      	ldrb	r3, [r3, #6]
 800df94:	f003 0310 	and.w	r3, r3, #16
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d102      	bne.n	800dfa2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800df9c:	2305      	movs	r3, #5
 800df9e:	75fb      	strb	r3, [r7, #23]
 800dfa0:	e014      	b.n	800dfcc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	695b      	ldr	r3, [r3, #20]
 800dfac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfb0:	4413      	add	r3, r2
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	68f8      	ldr	r0, [r7, #12]
 800dfb6:	f7ff fe42 	bl	800dc3e <ld_clust>
 800dfba:	4602      	mov	r2, r0
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dfc0:	e7c0      	b.n	800df44 <follow_path+0x50>
			if (res != FR_OK) break;
 800dfc2:	bf00      	nop
 800dfc4:	e002      	b.n	800dfcc <follow_path+0xd8>
				break;
 800dfc6:	bf00      	nop
 800dfc8:	e000      	b.n	800dfcc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dfca:	bf00      	nop
			}
		}
	}

	return res;
 800dfcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3718      	adds	r7, #24
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}

0800dfd6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800dfd6:	b480      	push	{r7}
 800dfd8:	b087      	sub	sp, #28
 800dfda:	af00      	add	r7, sp, #0
 800dfdc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800dfde:	f04f 33ff 	mov.w	r3, #4294967295
 800dfe2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d031      	beq.n	800e050 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	617b      	str	r3, [r7, #20]
 800dff2:	e002      	b.n	800dffa <get_ldnumber+0x24>
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	3301      	adds	r3, #1
 800dff8:	617b      	str	r3, [r7, #20]
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	2b20      	cmp	r3, #32
 800e000:	d903      	bls.n	800e00a <get_ldnumber+0x34>
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	2b3a      	cmp	r3, #58	; 0x3a
 800e008:	d1f4      	bne.n	800dff4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	2b3a      	cmp	r3, #58	; 0x3a
 800e010:	d11c      	bne.n	800e04c <get_ldnumber+0x76>
			tp = *path;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	1c5a      	adds	r2, r3, #1
 800e01c:	60fa      	str	r2, [r7, #12]
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	3b30      	subs	r3, #48	; 0x30
 800e022:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	2b09      	cmp	r3, #9
 800e028:	d80e      	bhi.n	800e048 <get_ldnumber+0x72>
 800e02a:	68fa      	ldr	r2, [r7, #12]
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d10a      	bne.n	800e048 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d107      	bne.n	800e048 <get_ldnumber+0x72>
					vol = (int)i;
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	3301      	adds	r3, #1
 800e040:	617b      	str	r3, [r7, #20]
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	697a      	ldr	r2, [r7, #20]
 800e046:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	e002      	b.n	800e052 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e04c:	2300      	movs	r3, #0
 800e04e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e050:	693b      	ldr	r3, [r7, #16]
}
 800e052:	4618      	mov	r0, r3
 800e054:	371c      	adds	r7, #28
 800e056:	46bd      	mov	sp, r7
 800e058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05c:	4770      	bx	lr
	...

0800e060 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b082      	sub	sp, #8
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2200      	movs	r2, #0
 800e06e:	70da      	strb	r2, [r3, #3]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f04f 32ff 	mov.w	r2, #4294967295
 800e076:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e078:	6839      	ldr	r1, [r7, #0]
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f7ff f8d8 	bl	800d230 <move_window>
 800e080:	4603      	mov	r3, r0
 800e082:	2b00      	cmp	r3, #0
 800e084:	d001      	beq.n	800e08a <check_fs+0x2a>
 800e086:	2304      	movs	r3, #4
 800e088:	e038      	b.n	800e0fc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	3330      	adds	r3, #48	; 0x30
 800e08e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e092:	4618      	mov	r0, r3
 800e094:	f7fe fe1c 	bl	800ccd0 <ld_word>
 800e098:	4603      	mov	r3, r0
 800e09a:	461a      	mov	r2, r3
 800e09c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d001      	beq.n	800e0a8 <check_fs+0x48>
 800e0a4:	2303      	movs	r3, #3
 800e0a6:	e029      	b.n	800e0fc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0ae:	2be9      	cmp	r3, #233	; 0xe9
 800e0b0:	d009      	beq.n	800e0c6 <check_fs+0x66>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0b8:	2beb      	cmp	r3, #235	; 0xeb
 800e0ba:	d11e      	bne.n	800e0fa <check_fs+0x9a>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e0c2:	2b90      	cmp	r3, #144	; 0x90
 800e0c4:	d119      	bne.n	800e0fa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	3330      	adds	r3, #48	; 0x30
 800e0ca:	3336      	adds	r3, #54	; 0x36
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7fe fe17 	bl	800cd00 <ld_dword>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e0d8:	4a0a      	ldr	r2, [pc, #40]	; (800e104 <check_fs+0xa4>)
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	d101      	bne.n	800e0e2 <check_fs+0x82>
 800e0de:	2300      	movs	r3, #0
 800e0e0:	e00c      	b.n	800e0fc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	3330      	adds	r3, #48	; 0x30
 800e0e6:	3352      	adds	r3, #82	; 0x52
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7fe fe09 	bl	800cd00 <ld_dword>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	4a05      	ldr	r2, [pc, #20]	; (800e108 <check_fs+0xa8>)
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d101      	bne.n	800e0fa <check_fs+0x9a>
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	e000      	b.n	800e0fc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e0fa:	2302      	movs	r3, #2
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3708      	adds	r7, #8
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}
 800e104:	00544146 	.word	0x00544146
 800e108:	33544146 	.word	0x33544146

0800e10c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b096      	sub	sp, #88	; 0x58
 800e110:	af00      	add	r7, sp, #0
 800e112:	60f8      	str	r0, [r7, #12]
 800e114:	60b9      	str	r1, [r7, #8]
 800e116:	4613      	mov	r3, r2
 800e118:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	2200      	movs	r2, #0
 800e11e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e120:	68f8      	ldr	r0, [r7, #12]
 800e122:	f7ff ff58 	bl	800dfd6 <get_ldnumber>
 800e126:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	da01      	bge.n	800e132 <find_volume+0x26>
 800e12e:	230b      	movs	r3, #11
 800e130:	e22d      	b.n	800e58e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e132:	4aa1      	ldr	r2, [pc, #644]	; (800e3b8 <find_volume+0x2ac>)
 800e134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e13a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d101      	bne.n	800e146 <find_volume+0x3a>
 800e142:	230c      	movs	r3, #12
 800e144:	e223      	b.n	800e58e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e14a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e14c:	79fb      	ldrb	r3, [r7, #7]
 800e14e:	f023 0301 	bic.w	r3, r3, #1
 800e152:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e156:	781b      	ldrb	r3, [r3, #0]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d01a      	beq.n	800e192 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e15e:	785b      	ldrb	r3, [r3, #1]
 800e160:	4618      	mov	r0, r3
 800e162:	f7fe fd17 	bl	800cb94 <disk_status>
 800e166:	4603      	mov	r3, r0
 800e168:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e16c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e170:	f003 0301 	and.w	r3, r3, #1
 800e174:	2b00      	cmp	r3, #0
 800e176:	d10c      	bne.n	800e192 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e178:	79fb      	ldrb	r3, [r7, #7]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d007      	beq.n	800e18e <find_volume+0x82>
 800e17e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e182:	f003 0304 	and.w	r3, r3, #4
 800e186:	2b00      	cmp	r3, #0
 800e188:	d001      	beq.n	800e18e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e18a:	230a      	movs	r3, #10
 800e18c:	e1ff      	b.n	800e58e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e18e:	2300      	movs	r3, #0
 800e190:	e1fd      	b.n	800e58e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e194:	2200      	movs	r2, #0
 800e196:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e19a:	b2da      	uxtb	r2, r3
 800e19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a2:	785b      	ldrb	r3, [r3, #1]
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f7fe fd0f 	bl	800cbc8 <disk_initialize>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e1b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1b4:	f003 0301 	and.w	r3, r3, #1
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d001      	beq.n	800e1c0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e1bc:	2303      	movs	r3, #3
 800e1be:	e1e6      	b.n	800e58e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e1c0:	79fb      	ldrb	r3, [r7, #7]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d007      	beq.n	800e1d6 <find_volume+0xca>
 800e1c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1ca:	f003 0304 	and.w	r3, r3, #4
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d001      	beq.n	800e1d6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e1d2:	230a      	movs	r3, #10
 800e1d4:	e1db      	b.n	800e58e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e1da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e1dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e1de:	f7ff ff3f 	bl	800e060 <check_fs>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e1e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e1ec:	2b02      	cmp	r3, #2
 800e1ee:	d149      	bne.n	800e284 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	643b      	str	r3, [r7, #64]	; 0x40
 800e1f4:	e01e      	b.n	800e234 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e1fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1fe:	011b      	lsls	r3, r3, #4
 800e200:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e204:	4413      	add	r3, r2
 800e206:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e20a:	3304      	adds	r3, #4
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d006      	beq.n	800e220 <find_volume+0x114>
 800e212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e214:	3308      	adds	r3, #8
 800e216:	4618      	mov	r0, r3
 800e218:	f7fe fd72 	bl	800cd00 <ld_dword>
 800e21c:	4602      	mov	r2, r0
 800e21e:	e000      	b.n	800e222 <find_volume+0x116>
 800e220:	2200      	movs	r2, #0
 800e222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e224:	009b      	lsls	r3, r3, #2
 800e226:	3358      	adds	r3, #88	; 0x58
 800e228:	443b      	add	r3, r7
 800e22a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e22e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e230:	3301      	adds	r3, #1
 800e232:	643b      	str	r3, [r7, #64]	; 0x40
 800e234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e236:	2b03      	cmp	r3, #3
 800e238:	d9dd      	bls.n	800e1f6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e23a:	2300      	movs	r3, #0
 800e23c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e23e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e240:	2b00      	cmp	r3, #0
 800e242:	d002      	beq.n	800e24a <find_volume+0x13e>
 800e244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e246:	3b01      	subs	r3, #1
 800e248:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e24a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e24c:	009b      	lsls	r3, r3, #2
 800e24e:	3358      	adds	r3, #88	; 0x58
 800e250:	443b      	add	r3, r7
 800e252:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e256:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d005      	beq.n	800e26a <find_volume+0x15e>
 800e25e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e260:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e262:	f7ff fefd 	bl	800e060 <check_fs>
 800e266:	4603      	mov	r3, r0
 800e268:	e000      	b.n	800e26c <find_volume+0x160>
 800e26a:	2303      	movs	r3, #3
 800e26c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e270:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e274:	2b01      	cmp	r3, #1
 800e276:	d905      	bls.n	800e284 <find_volume+0x178>
 800e278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e27a:	3301      	adds	r3, #1
 800e27c:	643b      	str	r3, [r7, #64]	; 0x40
 800e27e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e280:	2b03      	cmp	r3, #3
 800e282:	d9e2      	bls.n	800e24a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e284:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e288:	2b04      	cmp	r3, #4
 800e28a:	d101      	bne.n	800e290 <find_volume+0x184>
 800e28c:	2301      	movs	r3, #1
 800e28e:	e17e      	b.n	800e58e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e290:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e294:	2b01      	cmp	r3, #1
 800e296:	d901      	bls.n	800e29c <find_volume+0x190>
 800e298:	230d      	movs	r3, #13
 800e29a:	e178      	b.n	800e58e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e29e:	3330      	adds	r3, #48	; 0x30
 800e2a0:	330b      	adds	r3, #11
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7fe fd14 	bl	800ccd0 <ld_word>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2ae:	d001      	beq.n	800e2b4 <find_volume+0x1a8>
 800e2b0:	230d      	movs	r3, #13
 800e2b2:	e16c      	b.n	800e58e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b6:	3330      	adds	r3, #48	; 0x30
 800e2b8:	3316      	adds	r3, #22
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f7fe fd08 	bl	800ccd0 <ld_word>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e2c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d106      	bne.n	800e2d8 <find_volume+0x1cc>
 800e2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2cc:	3330      	adds	r3, #48	; 0x30
 800e2ce:	3324      	adds	r3, #36	; 0x24
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f7fe fd15 	bl	800cd00 <ld_dword>
 800e2d6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e2dc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800e2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ea:	789b      	ldrb	r3, [r3, #2]
 800e2ec:	2b01      	cmp	r3, #1
 800e2ee:	d005      	beq.n	800e2fc <find_volume+0x1f0>
 800e2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f2:	789b      	ldrb	r3, [r3, #2]
 800e2f4:	2b02      	cmp	r3, #2
 800e2f6:	d001      	beq.n	800e2fc <find_volume+0x1f0>
 800e2f8:	230d      	movs	r3, #13
 800e2fa:	e148      	b.n	800e58e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fe:	789b      	ldrb	r3, [r3, #2]
 800e300:	461a      	mov	r2, r3
 800e302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e304:	fb02 f303 	mul.w	r3, r2, r3
 800e308:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e310:	b29a      	uxth	r2, r3
 800e312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e314:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e318:	895b      	ldrh	r3, [r3, #10]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d008      	beq.n	800e330 <find_volume+0x224>
 800e31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e320:	895b      	ldrh	r3, [r3, #10]
 800e322:	461a      	mov	r2, r3
 800e324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e326:	895b      	ldrh	r3, [r3, #10]
 800e328:	3b01      	subs	r3, #1
 800e32a:	4013      	ands	r3, r2
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d001      	beq.n	800e334 <find_volume+0x228>
 800e330:	230d      	movs	r3, #13
 800e332:	e12c      	b.n	800e58e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e336:	3330      	adds	r3, #48	; 0x30
 800e338:	3311      	adds	r3, #17
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7fe fcc8 	bl	800ccd0 <ld_word>
 800e340:	4603      	mov	r3, r0
 800e342:	461a      	mov	r2, r3
 800e344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e346:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e34a:	891b      	ldrh	r3, [r3, #8]
 800e34c:	f003 030f 	and.w	r3, r3, #15
 800e350:	b29b      	uxth	r3, r3
 800e352:	2b00      	cmp	r3, #0
 800e354:	d001      	beq.n	800e35a <find_volume+0x24e>
 800e356:	230d      	movs	r3, #13
 800e358:	e119      	b.n	800e58e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e35c:	3330      	adds	r3, #48	; 0x30
 800e35e:	3313      	adds	r3, #19
 800e360:	4618      	mov	r0, r3
 800e362:	f7fe fcb5 	bl	800ccd0 <ld_word>
 800e366:	4603      	mov	r3, r0
 800e368:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e36a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d106      	bne.n	800e37e <find_volume+0x272>
 800e370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e372:	3330      	adds	r3, #48	; 0x30
 800e374:	3320      	adds	r3, #32
 800e376:	4618      	mov	r0, r3
 800e378:	f7fe fcc2 	bl	800cd00 <ld_dword>
 800e37c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e380:	3330      	adds	r3, #48	; 0x30
 800e382:	330e      	adds	r3, #14
 800e384:	4618      	mov	r0, r3
 800e386:	f7fe fca3 	bl	800ccd0 <ld_word>
 800e38a:	4603      	mov	r3, r0
 800e38c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e38e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e390:	2b00      	cmp	r3, #0
 800e392:	d101      	bne.n	800e398 <find_volume+0x28c>
 800e394:	230d      	movs	r3, #13
 800e396:	e0fa      	b.n	800e58e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e398:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e39a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e39c:	4413      	add	r3, r2
 800e39e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e3a0:	8912      	ldrh	r2, [r2, #8]
 800e3a2:	0912      	lsrs	r2, r2, #4
 800e3a4:	b292      	uxth	r2, r2
 800e3a6:	4413      	add	r3, r2
 800e3a8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e3aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d204      	bcs.n	800e3bc <find_volume+0x2b0>
 800e3b2:	230d      	movs	r3, #13
 800e3b4:	e0eb      	b.n	800e58e <find_volume+0x482>
 800e3b6:	bf00      	nop
 800e3b8:	2000174c 	.word	0x2000174c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e3bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c0:	1ad3      	subs	r3, r2, r3
 800e3c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e3c4:	8952      	ldrh	r2, [r2, #10]
 800e3c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3ca:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d101      	bne.n	800e3d6 <find_volume+0x2ca>
 800e3d2:	230d      	movs	r3, #13
 800e3d4:	e0db      	b.n	800e58e <find_volume+0x482>
		fmt = FS_FAT32;
 800e3d6:	2303      	movs	r3, #3
 800e3d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3de:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	d802      	bhi.n	800e3ec <find_volume+0x2e0>
 800e3e6:	2302      	movs	r3, #2
 800e3e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ee:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e3f2:	4293      	cmp	r3, r2
 800e3f4:	d802      	bhi.n	800e3fc <find_volume+0x2f0>
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fe:	1c9a      	adds	r2, r3, #2
 800e400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e402:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e406:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e408:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e40a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e40c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e40e:	441a      	add	r2, r3
 800e410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e412:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e414:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e418:	441a      	add	r2, r3
 800e41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800e41e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e422:	2b03      	cmp	r3, #3
 800e424:	d11e      	bne.n	800e464 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e428:	3330      	adds	r3, #48	; 0x30
 800e42a:	332a      	adds	r3, #42	; 0x2a
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7fe fc4f 	bl	800ccd0 <ld_word>
 800e432:	4603      	mov	r3, r0
 800e434:	2b00      	cmp	r3, #0
 800e436:	d001      	beq.n	800e43c <find_volume+0x330>
 800e438:	230d      	movs	r3, #13
 800e43a:	e0a8      	b.n	800e58e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e43e:	891b      	ldrh	r3, [r3, #8]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d001      	beq.n	800e448 <find_volume+0x33c>
 800e444:	230d      	movs	r3, #13
 800e446:	e0a2      	b.n	800e58e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e44a:	3330      	adds	r3, #48	; 0x30
 800e44c:	332c      	adds	r3, #44	; 0x2c
 800e44e:	4618      	mov	r0, r3
 800e450:	f7fe fc56 	bl	800cd00 <ld_dword>
 800e454:	4602      	mov	r2, r0
 800e456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e458:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e45c:	695b      	ldr	r3, [r3, #20]
 800e45e:	009b      	lsls	r3, r3, #2
 800e460:	647b      	str	r3, [r7, #68]	; 0x44
 800e462:	e01f      	b.n	800e4a4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e466:	891b      	ldrh	r3, [r3, #8]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d101      	bne.n	800e470 <find_volume+0x364>
 800e46c:	230d      	movs	r3, #13
 800e46e:	e08e      	b.n	800e58e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e472:	6a1a      	ldr	r2, [r3, #32]
 800e474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e476:	441a      	add	r2, r3
 800e478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e47c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e480:	2b02      	cmp	r3, #2
 800e482:	d103      	bne.n	800e48c <find_volume+0x380>
 800e484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e486:	695b      	ldr	r3, [r3, #20]
 800e488:	005b      	lsls	r3, r3, #1
 800e48a:	e00a      	b.n	800e4a2 <find_volume+0x396>
 800e48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e48e:	695a      	ldr	r2, [r3, #20]
 800e490:	4613      	mov	r3, r2
 800e492:	005b      	lsls	r3, r3, #1
 800e494:	4413      	add	r3, r2
 800e496:	085a      	lsrs	r2, r3, #1
 800e498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e49a:	695b      	ldr	r3, [r3, #20]
 800e49c:	f003 0301 	and.w	r3, r3, #1
 800e4a0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e4a2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a6:	699a      	ldr	r2, [r3, #24]
 800e4a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4aa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e4ae:	0a5b      	lsrs	r3, r3, #9
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d201      	bcs.n	800e4b8 <find_volume+0x3ac>
 800e4b4:	230d      	movs	r3, #13
 800e4b6:	e06a      	b.n	800e58e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ba:	f04f 32ff 	mov.w	r2, #4294967295
 800e4be:	611a      	str	r2, [r3, #16]
 800e4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c2:	691a      	ldr	r2, [r3, #16]
 800e4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ca:	2280      	movs	r2, #128	; 0x80
 800e4cc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e4ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e4d2:	2b03      	cmp	r3, #3
 800e4d4:	d149      	bne.n	800e56a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d8:	3330      	adds	r3, #48	; 0x30
 800e4da:	3330      	adds	r3, #48	; 0x30
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f7fe fbf7 	bl	800ccd0 <ld_word>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	2b01      	cmp	r3, #1
 800e4e6:	d140      	bne.n	800e56a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e4e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e4f0:	f7fe fe9e 	bl	800d230 <move_window>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d137      	bne.n	800e56a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e502:	3330      	adds	r3, #48	; 0x30
 800e504:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e508:	4618      	mov	r0, r3
 800e50a:	f7fe fbe1 	bl	800ccd0 <ld_word>
 800e50e:	4603      	mov	r3, r0
 800e510:	461a      	mov	r2, r3
 800e512:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e516:	429a      	cmp	r2, r3
 800e518:	d127      	bne.n	800e56a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e51c:	3330      	adds	r3, #48	; 0x30
 800e51e:	4618      	mov	r0, r3
 800e520:	f7fe fbee 	bl	800cd00 <ld_dword>
 800e524:	4603      	mov	r3, r0
 800e526:	4a1c      	ldr	r2, [pc, #112]	; (800e598 <find_volume+0x48c>)
 800e528:	4293      	cmp	r3, r2
 800e52a:	d11e      	bne.n	800e56a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e52e:	3330      	adds	r3, #48	; 0x30
 800e530:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e534:	4618      	mov	r0, r3
 800e536:	f7fe fbe3 	bl	800cd00 <ld_dword>
 800e53a:	4603      	mov	r3, r0
 800e53c:	4a17      	ldr	r2, [pc, #92]	; (800e59c <find_volume+0x490>)
 800e53e:	4293      	cmp	r3, r2
 800e540:	d113      	bne.n	800e56a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e544:	3330      	adds	r3, #48	; 0x30
 800e546:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7fe fbd8 	bl	800cd00 <ld_dword>
 800e550:	4602      	mov	r2, r0
 800e552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e554:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e558:	3330      	adds	r3, #48	; 0x30
 800e55a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e55e:	4618      	mov	r0, r3
 800e560:	f7fe fbce 	bl	800cd00 <ld_dword>
 800e564:	4602      	mov	r2, r0
 800e566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e568:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e56c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e570:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e572:	4b0b      	ldr	r3, [pc, #44]	; (800e5a0 <find_volume+0x494>)
 800e574:	881b      	ldrh	r3, [r3, #0]
 800e576:	3301      	adds	r3, #1
 800e578:	b29a      	uxth	r2, r3
 800e57a:	4b09      	ldr	r3, [pc, #36]	; (800e5a0 <find_volume+0x494>)
 800e57c:	801a      	strh	r2, [r3, #0]
 800e57e:	4b08      	ldr	r3, [pc, #32]	; (800e5a0 <find_volume+0x494>)
 800e580:	881a      	ldrh	r2, [r3, #0]
 800e582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e584:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e586:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e588:	f7fe fdea 	bl	800d160 <clear_lock>
#endif
	return FR_OK;
 800e58c:	2300      	movs	r3, #0
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3758      	adds	r7, #88	; 0x58
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
 800e596:	bf00      	nop
 800e598:	41615252 	.word	0x41615252
 800e59c:	61417272 	.word	0x61417272
 800e5a0:	20001750 	.word	0x20001750

0800e5a4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e5ae:	2309      	movs	r3, #9
 800e5b0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d01c      	beq.n	800e5f2 <validate+0x4e>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d018      	beq.n	800e5f2 <validate+0x4e>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d013      	beq.n	800e5f2 <validate+0x4e>
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	889a      	ldrh	r2, [r3, #4]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	88db      	ldrh	r3, [r3, #6]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d10c      	bne.n	800e5f2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	785b      	ldrb	r3, [r3, #1]
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f7fe fad8 	bl	800cb94 <disk_status>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	f003 0301 	and.w	r3, r3, #1
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d101      	bne.n	800e5f2 <validate+0x4e>
			res = FR_OK;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e5f2:	7bfb      	ldrb	r3, [r7, #15]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d102      	bne.n	800e5fe <validate+0x5a>
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	e000      	b.n	800e600 <validate+0x5c>
 800e5fe:	2300      	movs	r3, #0
 800e600:	683a      	ldr	r2, [r7, #0]
 800e602:	6013      	str	r3, [r2, #0]
	return res;
 800e604:	7bfb      	ldrb	r3, [r7, #15]
}
 800e606:	4618      	mov	r0, r3
 800e608:	3710      	adds	r7, #16
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
	...

0800e610 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b088      	sub	sp, #32
 800e614:	af00      	add	r7, sp, #0
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	60b9      	str	r1, [r7, #8]
 800e61a:	4613      	mov	r3, r2
 800e61c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e622:	f107 0310 	add.w	r3, r7, #16
 800e626:	4618      	mov	r0, r3
 800e628:	f7ff fcd5 	bl	800dfd6 <get_ldnumber>
 800e62c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e62e:	69fb      	ldr	r3, [r7, #28]
 800e630:	2b00      	cmp	r3, #0
 800e632:	da01      	bge.n	800e638 <f_mount+0x28>
 800e634:	230b      	movs	r3, #11
 800e636:	e02b      	b.n	800e690 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e638:	4a17      	ldr	r2, [pc, #92]	; (800e698 <f_mount+0x88>)
 800e63a:	69fb      	ldr	r3, [r7, #28]
 800e63c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e640:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e642:	69bb      	ldr	r3, [r7, #24]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d005      	beq.n	800e654 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e648:	69b8      	ldr	r0, [r7, #24]
 800e64a:	f7fe fd89 	bl	800d160 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e64e:	69bb      	ldr	r3, [r7, #24]
 800e650:	2200      	movs	r2, #0
 800e652:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d002      	beq.n	800e660 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	2200      	movs	r2, #0
 800e65e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e660:	68fa      	ldr	r2, [r7, #12]
 800e662:	490d      	ldr	r1, [pc, #52]	; (800e698 <f_mount+0x88>)
 800e664:	69fb      	ldr	r3, [r7, #28]
 800e666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d002      	beq.n	800e676 <f_mount+0x66>
 800e670:	79fb      	ldrb	r3, [r7, #7]
 800e672:	2b01      	cmp	r3, #1
 800e674:	d001      	beq.n	800e67a <f_mount+0x6a>
 800e676:	2300      	movs	r3, #0
 800e678:	e00a      	b.n	800e690 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e67a:	f107 010c 	add.w	r1, r7, #12
 800e67e:	f107 0308 	add.w	r3, r7, #8
 800e682:	2200      	movs	r2, #0
 800e684:	4618      	mov	r0, r3
 800e686:	f7ff fd41 	bl	800e10c <find_volume>
 800e68a:	4603      	mov	r3, r0
 800e68c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e68e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e690:	4618      	mov	r0, r3
 800e692:	3720      	adds	r7, #32
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}
 800e698:	2000174c 	.word	0x2000174c

0800e69c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b098      	sub	sp, #96	; 0x60
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	60f8      	str	r0, [r7, #12]
 800e6a4:	60b9      	str	r1, [r7, #8]
 800e6a6:	4613      	mov	r3, r2
 800e6a8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d101      	bne.n	800e6b4 <f_open+0x18>
 800e6b0:	2309      	movs	r3, #9
 800e6b2:	e1ad      	b.n	800ea10 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e6b4:	79fb      	ldrb	r3, [r7, #7]
 800e6b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e6ba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e6bc:	79fa      	ldrb	r2, [r7, #7]
 800e6be:	f107 0110 	add.w	r1, r7, #16
 800e6c2:	f107 0308 	add.w	r3, r7, #8
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7ff fd20 	bl	800e10c <find_volume>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800e6d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	f040 8191 	bne.w	800e9fe <f_open+0x362>
		dj.obj.fs = fs;
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e6e0:	68ba      	ldr	r2, [r7, #8]
 800e6e2:	f107 0314 	add.w	r3, r7, #20
 800e6e6:	4611      	mov	r1, r2
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7ff fc03 	bl	800def4 <follow_path>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e6f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d11a      	bne.n	800e732 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e6fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e700:	b25b      	sxtb	r3, r3
 800e702:	2b00      	cmp	r3, #0
 800e704:	da03      	bge.n	800e70e <f_open+0x72>
				res = FR_INVALID_NAME;
 800e706:	2306      	movs	r3, #6
 800e708:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e70c:	e011      	b.n	800e732 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e70e:	79fb      	ldrb	r3, [r7, #7]
 800e710:	f023 0301 	bic.w	r3, r3, #1
 800e714:	2b00      	cmp	r3, #0
 800e716:	bf14      	ite	ne
 800e718:	2301      	movne	r3, #1
 800e71a:	2300      	moveq	r3, #0
 800e71c:	b2db      	uxtb	r3, r3
 800e71e:	461a      	mov	r2, r3
 800e720:	f107 0314 	add.w	r3, r7, #20
 800e724:	4611      	mov	r1, r2
 800e726:	4618      	mov	r0, r3
 800e728:	f7fe fbd2 	bl	800ced0 <chk_lock>
 800e72c:	4603      	mov	r3, r0
 800e72e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e732:	79fb      	ldrb	r3, [r7, #7]
 800e734:	f003 031c 	and.w	r3, r3, #28
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d07f      	beq.n	800e83c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e73c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e740:	2b00      	cmp	r3, #0
 800e742:	d017      	beq.n	800e774 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e744:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e748:	2b04      	cmp	r3, #4
 800e74a:	d10e      	bne.n	800e76a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e74c:	f7fe fc1c 	bl	800cf88 <enq_lock>
 800e750:	4603      	mov	r3, r0
 800e752:	2b00      	cmp	r3, #0
 800e754:	d006      	beq.n	800e764 <f_open+0xc8>
 800e756:	f107 0314 	add.w	r3, r7, #20
 800e75a:	4618      	mov	r0, r3
 800e75c:	f7ff fb03 	bl	800dd66 <dir_register>
 800e760:	4603      	mov	r3, r0
 800e762:	e000      	b.n	800e766 <f_open+0xca>
 800e764:	2312      	movs	r3, #18
 800e766:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e76a:	79fb      	ldrb	r3, [r7, #7]
 800e76c:	f043 0308 	orr.w	r3, r3, #8
 800e770:	71fb      	strb	r3, [r7, #7]
 800e772:	e010      	b.n	800e796 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e774:	7ebb      	ldrb	r3, [r7, #26]
 800e776:	f003 0311 	and.w	r3, r3, #17
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d003      	beq.n	800e786 <f_open+0xea>
					res = FR_DENIED;
 800e77e:	2307      	movs	r3, #7
 800e780:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e784:	e007      	b.n	800e796 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e786:	79fb      	ldrb	r3, [r7, #7]
 800e788:	f003 0304 	and.w	r3, r3, #4
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d002      	beq.n	800e796 <f_open+0xfa>
 800e790:	2308      	movs	r3, #8
 800e792:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e796:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d168      	bne.n	800e870 <f_open+0x1d4>
 800e79e:	79fb      	ldrb	r3, [r7, #7]
 800e7a0:	f003 0308 	and.w	r3, r3, #8
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d063      	beq.n	800e870 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e7a8:	f7fb f8e6 	bl	8009978 <get_fattime>
 800e7ac:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7b0:	330e      	adds	r3, #14
 800e7b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7fe fae1 	bl	800cd7c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7bc:	3316      	adds	r3, #22
 800e7be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7fe fadb 	bl	800cd7c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e7c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7c8:	330b      	adds	r3, #11
 800e7ca:	2220      	movs	r2, #32
 800e7cc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7d2:	4611      	mov	r1, r2
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7ff fa32 	bl	800dc3e <ld_clust>
 800e7da:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e7dc:	693b      	ldr	r3, [r7, #16]
 800e7de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7ff fa4a 	bl	800dc7c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e7e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ea:	331c      	adds	r3, #28
 800e7ec:	2100      	movs	r1, #0
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7fe fac4 	bl	800cd7c <st_dword>
					fs->wflag = 1;
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	2201      	movs	r2, #1
 800e7f8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e7fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d037      	beq.n	800e870 <f_open+0x1d4>
						dw = fs->winsect;
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e804:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e806:	f107 0314 	add.w	r3, r7, #20
 800e80a:	2200      	movs	r2, #0
 800e80c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e80e:	4618      	mov	r0, r3
 800e810:	f7fe ff5d 	bl	800d6ce <remove_chain>
 800e814:	4603      	mov	r3, r0
 800e816:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800e81a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d126      	bne.n	800e870 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e826:	4618      	mov	r0, r3
 800e828:	f7fe fd02 	bl	800d230 <move_window>
 800e82c:	4603      	mov	r3, r0
 800e82e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e836:	3a01      	subs	r2, #1
 800e838:	60da      	str	r2, [r3, #12]
 800e83a:	e019      	b.n	800e870 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e83c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e840:	2b00      	cmp	r3, #0
 800e842:	d115      	bne.n	800e870 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e844:	7ebb      	ldrb	r3, [r7, #26]
 800e846:	f003 0310 	and.w	r3, r3, #16
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d003      	beq.n	800e856 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e84e:	2304      	movs	r3, #4
 800e850:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e854:	e00c      	b.n	800e870 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e856:	79fb      	ldrb	r3, [r7, #7]
 800e858:	f003 0302 	and.w	r3, r3, #2
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d007      	beq.n	800e870 <f_open+0x1d4>
 800e860:	7ebb      	ldrb	r3, [r7, #26]
 800e862:	f003 0301 	and.w	r3, r3, #1
 800e866:	2b00      	cmp	r3, #0
 800e868:	d002      	beq.n	800e870 <f_open+0x1d4>
						res = FR_DENIED;
 800e86a:	2307      	movs	r3, #7
 800e86c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e870:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e874:	2b00      	cmp	r3, #0
 800e876:	d128      	bne.n	800e8ca <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e878:	79fb      	ldrb	r3, [r7, #7]
 800e87a:	f003 0308 	and.w	r3, r3, #8
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d003      	beq.n	800e88a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e882:	79fb      	ldrb	r3, [r7, #7]
 800e884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e888:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e898:	79fb      	ldrb	r3, [r7, #7]
 800e89a:	f023 0301 	bic.w	r3, r3, #1
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	bf14      	ite	ne
 800e8a2:	2301      	movne	r3, #1
 800e8a4:	2300      	moveq	r3, #0
 800e8a6:	b2db      	uxtb	r3, r3
 800e8a8:	461a      	mov	r2, r3
 800e8aa:	f107 0314 	add.w	r3, r7, #20
 800e8ae:	4611      	mov	r1, r2
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f7fe fb8b 	bl	800cfcc <inc_lock>
 800e8b6:	4602      	mov	r2, r0
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	691b      	ldr	r3, [r3, #16]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d102      	bne.n	800e8ca <f_open+0x22e>
 800e8c4:	2302      	movs	r3, #2
 800e8c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e8ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	f040 8095 	bne.w	800e9fe <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8d8:	4611      	mov	r1, r2
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f7ff f9af 	bl	800dc3e <ld_clust>
 800e8e0:	4602      	mov	r2, r0
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e8e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8e8:	331c      	adds	r3, #28
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7fe fa08 	bl	800cd00 <ld_dword>
 800e8f0:	4602      	mov	r2, r0
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e8fc:	693a      	ldr	r2, [r7, #16]
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	88da      	ldrh	r2, [r3, #6]
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	79fa      	ldrb	r2, [r7, #7]
 800e90e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	2200      	movs	r2, #0
 800e914:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	2200      	movs	r2, #0
 800e91a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	2200      	movs	r2, #0
 800e920:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	3330      	adds	r3, #48	; 0x30
 800e926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e92a:	2100      	movs	r1, #0
 800e92c:	4618      	mov	r0, r3
 800e92e:	f7fe fa72 	bl	800ce16 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e932:	79fb      	ldrb	r3, [r7, #7]
 800e934:	f003 0320 	and.w	r3, r3, #32
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d060      	beq.n	800e9fe <f_open+0x362>
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	68db      	ldr	r3, [r3, #12]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d05c      	beq.n	800e9fe <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	68da      	ldr	r2, [r3, #12]
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	895b      	ldrh	r3, [r3, #10]
 800e950:	025b      	lsls	r3, r3, #9
 800e952:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	689b      	ldr	r3, [r3, #8]
 800e958:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	68db      	ldr	r3, [r3, #12]
 800e95e:	657b      	str	r3, [r7, #84]	; 0x54
 800e960:	e016      	b.n	800e990 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e966:	4618      	mov	r0, r3
 800e968:	f7fe fd1d 	bl	800d3a6 <get_fat>
 800e96c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e96e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e970:	2b01      	cmp	r3, #1
 800e972:	d802      	bhi.n	800e97a <f_open+0x2de>
 800e974:	2302      	movs	r3, #2
 800e976:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e97a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e980:	d102      	bne.n	800e988 <f_open+0x2ec>
 800e982:	2301      	movs	r3, #1
 800e984:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e988:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e98a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e98c:	1ad3      	subs	r3, r2, r3
 800e98e:	657b      	str	r3, [r7, #84]	; 0x54
 800e990:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e994:	2b00      	cmp	r3, #0
 800e996:	d103      	bne.n	800e9a0 <f_open+0x304>
 800e998:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e99a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d8e0      	bhi.n	800e962 <f_open+0x2c6>
				}
				fp->clust = clst;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e9a4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e9a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d127      	bne.n	800e9fe <f_open+0x362>
 800e9ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d022      	beq.n	800e9fe <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e9b8:	693b      	ldr	r3, [r7, #16]
 800e9ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f7fe fcd3 	bl	800d368 <clust2sect>
 800e9c2:	6478      	str	r0, [r7, #68]	; 0x44
 800e9c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d103      	bne.n	800e9d2 <f_open+0x336>
						res = FR_INT_ERR;
 800e9ca:	2302      	movs	r3, #2
 800e9cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e9d0:	e015      	b.n	800e9fe <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e9d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9d4:	0a5a      	lsrs	r2, r3, #9
 800e9d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9d8:	441a      	add	r2, r3
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	7858      	ldrb	r0, [r3, #1]
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	6a1a      	ldr	r2, [r3, #32]
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	f7fe f911 	bl	800cc14 <disk_read>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d002      	beq.n	800e9fe <f_open+0x362>
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e9fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d002      	beq.n	800ea0c <f_open+0x370>
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	2200      	movs	r2, #0
 800ea0a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ea0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3760      	adds	r7, #96	; 0x60
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}

0800ea18 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b08e      	sub	sp, #56	; 0x38
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	60f8      	str	r0, [r7, #12]
 800ea20:	60b9      	str	r1, [r7, #8]
 800ea22:	607a      	str	r2, [r7, #4]
 800ea24:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	f107 0214 	add.w	r2, r7, #20
 800ea36:	4611      	mov	r1, r2
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7ff fdb3 	bl	800e5a4 <validate>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ea44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d107      	bne.n	800ea5c <f_read+0x44>
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	7d5b      	ldrb	r3, [r3, #21]
 800ea50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ea54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d002      	beq.n	800ea62 <f_read+0x4a>
 800ea5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ea60:	e115      	b.n	800ec8e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	7d1b      	ldrb	r3, [r3, #20]
 800ea66:	f003 0301 	and.w	r3, r3, #1
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d101      	bne.n	800ea72 <f_read+0x5a>
 800ea6e:	2307      	movs	r3, #7
 800ea70:	e10d      	b.n	800ec8e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	68da      	ldr	r2, [r3, #12]
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	699b      	ldr	r3, [r3, #24]
 800ea7a:	1ad3      	subs	r3, r2, r3
 800ea7c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ea7e:	687a      	ldr	r2, [r7, #4]
 800ea80:	6a3b      	ldr	r3, [r7, #32]
 800ea82:	429a      	cmp	r2, r3
 800ea84:	f240 80fe 	bls.w	800ec84 <f_read+0x26c>
 800ea88:	6a3b      	ldr	r3, [r7, #32]
 800ea8a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ea8c:	e0fa      	b.n	800ec84 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	699b      	ldr	r3, [r3, #24]
 800ea92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	f040 80c6 	bne.w	800ec28 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	699b      	ldr	r3, [r3, #24]
 800eaa0:	0a5b      	lsrs	r3, r3, #9
 800eaa2:	697a      	ldr	r2, [r7, #20]
 800eaa4:	8952      	ldrh	r2, [r2, #10]
 800eaa6:	3a01      	subs	r2, #1
 800eaa8:	4013      	ands	r3, r2
 800eaaa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800eaac:	69fb      	ldr	r3, [r7, #28]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d12f      	bne.n	800eb12 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	699b      	ldr	r3, [r3, #24]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d103      	bne.n	800eac2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	689b      	ldr	r3, [r3, #8]
 800eabe:	633b      	str	r3, [r7, #48]	; 0x30
 800eac0:	e013      	b.n	800eaea <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d007      	beq.n	800eada <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	699b      	ldr	r3, [r3, #24]
 800eace:	4619      	mov	r1, r3
 800ead0:	68f8      	ldr	r0, [r7, #12]
 800ead2:	f7fe fef9 	bl	800d8c8 <clmt_clust>
 800ead6:	6338      	str	r0, [r7, #48]	; 0x30
 800ead8:	e007      	b.n	800eaea <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800eada:	68fa      	ldr	r2, [r7, #12]
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	69db      	ldr	r3, [r3, #28]
 800eae0:	4619      	mov	r1, r3
 800eae2:	4610      	mov	r0, r2
 800eae4:	f7fe fc5f 	bl	800d3a6 <get_fat>
 800eae8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800eaea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaec:	2b01      	cmp	r3, #1
 800eaee:	d804      	bhi.n	800eafa <f_read+0xe2>
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	2202      	movs	r2, #2
 800eaf4:	755a      	strb	r2, [r3, #21]
 800eaf6:	2302      	movs	r3, #2
 800eaf8:	e0c9      	b.n	800ec8e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eafc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb00:	d104      	bne.n	800eb0c <f_read+0xf4>
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	2201      	movs	r2, #1
 800eb06:	755a      	strb	r2, [r3, #21]
 800eb08:	2301      	movs	r3, #1
 800eb0a:	e0c0      	b.n	800ec8e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb10:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800eb12:	697a      	ldr	r2, [r7, #20]
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	69db      	ldr	r3, [r3, #28]
 800eb18:	4619      	mov	r1, r3
 800eb1a:	4610      	mov	r0, r2
 800eb1c:	f7fe fc24 	bl	800d368 <clust2sect>
 800eb20:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800eb22:	69bb      	ldr	r3, [r7, #24]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d104      	bne.n	800eb32 <f_read+0x11a>
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	2202      	movs	r2, #2
 800eb2c:	755a      	strb	r2, [r3, #21]
 800eb2e:	2302      	movs	r3, #2
 800eb30:	e0ad      	b.n	800ec8e <f_read+0x276>
			sect += csect;
 800eb32:	69ba      	ldr	r2, [r7, #24]
 800eb34:	69fb      	ldr	r3, [r7, #28]
 800eb36:	4413      	add	r3, r2
 800eb38:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	0a5b      	lsrs	r3, r3, #9
 800eb3e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800eb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d039      	beq.n	800ebba <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800eb46:	69fa      	ldr	r2, [r7, #28]
 800eb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb4a:	4413      	add	r3, r2
 800eb4c:	697a      	ldr	r2, [r7, #20]
 800eb4e:	8952      	ldrh	r2, [r2, #10]
 800eb50:	4293      	cmp	r3, r2
 800eb52:	d905      	bls.n	800eb60 <f_read+0x148>
					cc = fs->csize - csect;
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	895b      	ldrh	r3, [r3, #10]
 800eb58:	461a      	mov	r2, r3
 800eb5a:	69fb      	ldr	r3, [r7, #28]
 800eb5c:	1ad3      	subs	r3, r2, r3
 800eb5e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	7858      	ldrb	r0, [r3, #1]
 800eb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb66:	69ba      	ldr	r2, [r7, #24]
 800eb68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eb6a:	f7fe f853 	bl	800cc14 <disk_read>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d004      	beq.n	800eb7e <f_read+0x166>
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	2201      	movs	r2, #1
 800eb78:	755a      	strb	r2, [r3, #21]
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	e087      	b.n	800ec8e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	7d1b      	ldrb	r3, [r3, #20]
 800eb82:	b25b      	sxtb	r3, r3
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	da14      	bge.n	800ebb2 <f_read+0x19a>
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	6a1a      	ldr	r2, [r3, #32]
 800eb8c:	69bb      	ldr	r3, [r7, #24]
 800eb8e:	1ad3      	subs	r3, r2, r3
 800eb90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d90d      	bls.n	800ebb2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	6a1a      	ldr	r2, [r3, #32]
 800eb9a:	69bb      	ldr	r3, [r7, #24]
 800eb9c:	1ad3      	subs	r3, r2, r3
 800eb9e:	025b      	lsls	r3, r3, #9
 800eba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eba2:	18d0      	adds	r0, r2, r3
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	3330      	adds	r3, #48	; 0x30
 800eba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ebac:	4619      	mov	r1, r3
 800ebae:	f7fe f911 	bl	800cdd4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ebb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb4:	025b      	lsls	r3, r3, #9
 800ebb6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ebb8:	e050      	b.n	800ec5c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	6a1b      	ldr	r3, [r3, #32]
 800ebbe:	69ba      	ldr	r2, [r7, #24]
 800ebc0:	429a      	cmp	r2, r3
 800ebc2:	d02e      	beq.n	800ec22 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	7d1b      	ldrb	r3, [r3, #20]
 800ebc8:	b25b      	sxtb	r3, r3
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	da18      	bge.n	800ec00 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	7858      	ldrb	r0, [r3, #1]
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	6a1a      	ldr	r2, [r3, #32]
 800ebdc:	2301      	movs	r3, #1
 800ebde:	f7fe f839 	bl	800cc54 <disk_write>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d004      	beq.n	800ebf2 <f_read+0x1da>
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2201      	movs	r2, #1
 800ebec:	755a      	strb	r2, [r3, #21]
 800ebee:	2301      	movs	r3, #1
 800ebf0:	e04d      	b.n	800ec8e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	7d1b      	ldrb	r3, [r3, #20]
 800ebf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ebfa:	b2da      	uxtb	r2, r3
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	7858      	ldrb	r0, [r3, #1]
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	69ba      	ldr	r2, [r7, #24]
 800ec0e:	f7fe f801 	bl	800cc14 <disk_read>
 800ec12:	4603      	mov	r3, r0
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d004      	beq.n	800ec22 <f_read+0x20a>
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	755a      	strb	r2, [r3, #21]
 800ec1e:	2301      	movs	r3, #1
 800ec20:	e035      	b.n	800ec8e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	69ba      	ldr	r2, [r7, #24]
 800ec26:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	699b      	ldr	r3, [r3, #24]
 800ec2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec30:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ec34:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ec36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d901      	bls.n	800ec42 <f_read+0x22a>
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	699b      	ldr	r3, [r3, #24]
 800ec4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec50:	4413      	add	r3, r2
 800ec52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec54:	4619      	mov	r1, r3
 800ec56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec58:	f7fe f8bc 	bl	800cdd4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ec5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec60:	4413      	add	r3, r2
 800ec62:	627b      	str	r3, [r7, #36]	; 0x24
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	699a      	ldr	r2, [r3, #24]
 800ec68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec6a:	441a      	add	r2, r3
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	619a      	str	r2, [r3, #24]
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	681a      	ldr	r2, [r3, #0]
 800ec74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec76:	441a      	add	r2, r3
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	601a      	str	r2, [r3, #0]
 800ec7c:	687a      	ldr	r2, [r7, #4]
 800ec7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec80:	1ad3      	subs	r3, r2, r3
 800ec82:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	f47f af01 	bne.w	800ea8e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ec8c:	2300      	movs	r3, #0
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3738      	adds	r7, #56	; 0x38
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}

0800ec96 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ec96:	b580      	push	{r7, lr}
 800ec98:	b086      	sub	sp, #24
 800ec9a:	af00      	add	r7, sp, #0
 800ec9c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f107 0208 	add.w	r2, r7, #8
 800eca4:	4611      	mov	r1, r2
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7ff fc7c 	bl	800e5a4 <validate>
 800ecac:	4603      	mov	r3, r0
 800ecae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ecb0:	7dfb      	ldrb	r3, [r7, #23]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d168      	bne.n	800ed88 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	7d1b      	ldrb	r3, [r3, #20]
 800ecba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d062      	beq.n	800ed88 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	7d1b      	ldrb	r3, [r3, #20]
 800ecc6:	b25b      	sxtb	r3, r3
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	da15      	bge.n	800ecf8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	7858      	ldrb	r0, [r3, #1]
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6a1a      	ldr	r2, [r3, #32]
 800ecda:	2301      	movs	r3, #1
 800ecdc:	f7fd ffba 	bl	800cc54 <disk_write>
 800ece0:	4603      	mov	r3, r0
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d001      	beq.n	800ecea <f_sync+0x54>
 800ece6:	2301      	movs	r3, #1
 800ece8:	e04f      	b.n	800ed8a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	7d1b      	ldrb	r3, [r3, #20]
 800ecee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecf2:	b2da      	uxtb	r2, r3
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ecf8:	f7fa fe3e 	bl	8009978 <get_fattime>
 800ecfc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ecfe:	68ba      	ldr	r2, [r7, #8]
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed04:	4619      	mov	r1, r3
 800ed06:	4610      	mov	r0, r2
 800ed08:	f7fe fa92 	bl	800d230 <move_window>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ed10:	7dfb      	ldrb	r3, [r7, #23]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d138      	bne.n	800ed88 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed1a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	330b      	adds	r3, #11
 800ed20:	781a      	ldrb	r2, [r3, #0]
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	330b      	adds	r3, #11
 800ed26:	f042 0220 	orr.w	r2, r2, #32
 800ed2a:	b2d2      	uxtb	r2, r2
 800ed2c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6818      	ldr	r0, [r3, #0]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	689b      	ldr	r3, [r3, #8]
 800ed36:	461a      	mov	r2, r3
 800ed38:	68f9      	ldr	r1, [r7, #12]
 800ed3a:	f7fe ff9f 	bl	800dc7c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	f103 021c 	add.w	r2, r3, #28
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	68db      	ldr	r3, [r3, #12]
 800ed48:	4619      	mov	r1, r3
 800ed4a:	4610      	mov	r0, r2
 800ed4c:	f7fe f816 	bl	800cd7c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	3316      	adds	r3, #22
 800ed54:	6939      	ldr	r1, [r7, #16]
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7fe f810 	bl	800cd7c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	3312      	adds	r3, #18
 800ed60:	2100      	movs	r1, #0
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7fd ffef 	bl	800cd46 <st_word>
					fs->wflag = 1;
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	4618      	mov	r0, r3
 800ed72:	f7fe fa8b 	bl	800d28c <sync_fs>
 800ed76:	4603      	mov	r3, r0
 800ed78:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	7d1b      	ldrb	r3, [r3, #20]
 800ed7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed82:	b2da      	uxtb	r2, r3
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ed88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3718      	adds	r7, #24
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}

0800ed92 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ed92:	b580      	push	{r7, lr}
 800ed94:	b084      	sub	sp, #16
 800ed96:	af00      	add	r7, sp, #0
 800ed98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f7ff ff7b 	bl	800ec96 <f_sync>
 800eda0:	4603      	mov	r3, r0
 800eda2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800eda4:	7bfb      	ldrb	r3, [r7, #15]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d118      	bne.n	800eddc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f107 0208 	add.w	r2, r7, #8
 800edb0:	4611      	mov	r1, r2
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7ff fbf6 	bl	800e5a4 <validate>
 800edb8:	4603      	mov	r3, r0
 800edba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800edbc:	7bfb      	ldrb	r3, [r7, #15]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d10c      	bne.n	800eddc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	691b      	ldr	r3, [r3, #16]
 800edc6:	4618      	mov	r0, r3
 800edc8:	f7fe f98e 	bl	800d0e8 <dec_lock>
 800edcc:	4603      	mov	r3, r0
 800edce:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800edd0:	7bfb      	ldrb	r3, [r7, #15]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d102      	bne.n	800eddc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2200      	movs	r2, #0
 800edda:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800eddc:	7bfb      	ldrb	r3, [r7, #15]
}
 800edde:	4618      	mov	r0, r3
 800ede0:	3710      	adds	r7, #16
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}

0800ede6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ede6:	b580      	push	{r7, lr}
 800ede8:	b090      	sub	sp, #64	; 0x40
 800edea:	af00      	add	r7, sp, #0
 800edec:	6078      	str	r0, [r7, #4]
 800edee:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f107 0208 	add.w	r2, r7, #8
 800edf6:	4611      	mov	r1, r2
 800edf8:	4618      	mov	r0, r3
 800edfa:	f7ff fbd3 	bl	800e5a4 <validate>
 800edfe:	4603      	mov	r3, r0
 800ee00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ee04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d103      	bne.n	800ee14 <f_lseek+0x2e>
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	7d5b      	ldrb	r3, [r3, #21]
 800ee10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ee14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d002      	beq.n	800ee22 <f_lseek+0x3c>
 800ee1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ee20:	e1e6      	b.n	800f1f0 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	f000 80d1 	beq.w	800efce <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee32:	d15a      	bne.n	800eeea <f_lseek+0x104>
			tbl = fp->cltbl;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee38:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ee3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee3c:	1d1a      	adds	r2, r3, #4
 800ee3e:	627a      	str	r2, [r7, #36]	; 0x24
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	617b      	str	r3, [r7, #20]
 800ee44:	2302      	movs	r3, #2
 800ee46:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	689b      	ldr	r3, [r3, #8]
 800ee4c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800ee4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d03a      	beq.n	800eeca <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ee54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee56:	613b      	str	r3, [r7, #16]
 800ee58:	2300      	movs	r3, #0
 800ee5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee5e:	3302      	adds	r3, #2
 800ee60:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800ee62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee64:	60fb      	str	r3, [r7, #12]
 800ee66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee68:	3301      	adds	r3, #1
 800ee6a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ee70:	4618      	mov	r0, r3
 800ee72:	f7fe fa98 	bl	800d3a6 <get_fat>
 800ee76:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ee78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee7a:	2b01      	cmp	r3, #1
 800ee7c:	d804      	bhi.n	800ee88 <f_lseek+0xa2>
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2202      	movs	r2, #2
 800ee82:	755a      	strb	r2, [r3, #21]
 800ee84:	2302      	movs	r3, #2
 800ee86:	e1b3      	b.n	800f1f0 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ee88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee8e:	d104      	bne.n	800ee9a <f_lseek+0xb4>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2201      	movs	r2, #1
 800ee94:	755a      	strb	r2, [r3, #21]
 800ee96:	2301      	movs	r3, #1
 800ee98:	e1aa      	b.n	800f1f0 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	3301      	adds	r3, #1
 800ee9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d0de      	beq.n	800ee62 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800eea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d809      	bhi.n	800eec0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800eeac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeae:	1d1a      	adds	r2, r3, #4
 800eeb0:	627a      	str	r2, [r7, #36]	; 0x24
 800eeb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eeb4:	601a      	str	r2, [r3, #0]
 800eeb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb8:	1d1a      	adds	r2, r3, #4
 800eeba:	627a      	str	r2, [r7, #36]	; 0x24
 800eebc:	693a      	ldr	r2, [r7, #16]
 800eebe:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	695b      	ldr	r3, [r3, #20]
 800eec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d3c4      	bcc.n	800ee54 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eed0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800eed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	429a      	cmp	r2, r3
 800eed8:	d803      	bhi.n	800eee2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800eeda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eedc:	2200      	movs	r2, #0
 800eede:	601a      	str	r2, [r3, #0]
 800eee0:	e184      	b.n	800f1ec <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800eee2:	2311      	movs	r3, #17
 800eee4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800eee8:	e180      	b.n	800f1ec <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	68db      	ldr	r3, [r3, #12]
 800eeee:	683a      	ldr	r2, [r7, #0]
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d902      	bls.n	800eefa <f_lseek+0x114>
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	68db      	ldr	r3, [r3, #12]
 800eef8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	683a      	ldr	r2, [r7, #0]
 800eefe:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	f000 8172 	beq.w	800f1ec <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	3b01      	subs	r3, #1
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f7fe fcda 	bl	800d8c8 <clmt_clust>
 800ef14:	4602      	mov	r2, r0
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ef1a:	68ba      	ldr	r2, [r7, #8]
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	69db      	ldr	r3, [r3, #28]
 800ef20:	4619      	mov	r1, r3
 800ef22:	4610      	mov	r0, r2
 800ef24:	f7fe fa20 	bl	800d368 <clust2sect>
 800ef28:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ef2a:	69bb      	ldr	r3, [r7, #24]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d104      	bne.n	800ef3a <f_lseek+0x154>
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2202      	movs	r2, #2
 800ef34:	755a      	strb	r2, [r3, #21]
 800ef36:	2302      	movs	r3, #2
 800ef38:	e15a      	b.n	800f1f0 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	3b01      	subs	r3, #1
 800ef3e:	0a5b      	lsrs	r3, r3, #9
 800ef40:	68ba      	ldr	r2, [r7, #8]
 800ef42:	8952      	ldrh	r2, [r2, #10]
 800ef44:	3a01      	subs	r2, #1
 800ef46:	4013      	ands	r3, r2
 800ef48:	69ba      	ldr	r2, [r7, #24]
 800ef4a:	4413      	add	r3, r2
 800ef4c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	699b      	ldr	r3, [r3, #24]
 800ef52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	f000 8148 	beq.w	800f1ec <f_lseek+0x406>
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6a1b      	ldr	r3, [r3, #32]
 800ef60:	69ba      	ldr	r2, [r7, #24]
 800ef62:	429a      	cmp	r2, r3
 800ef64:	f000 8142 	beq.w	800f1ec <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	7d1b      	ldrb	r3, [r3, #20]
 800ef6c:	b25b      	sxtb	r3, r3
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	da18      	bge.n	800efa4 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	7858      	ldrb	r0, [r3, #1]
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6a1a      	ldr	r2, [r3, #32]
 800ef80:	2301      	movs	r3, #1
 800ef82:	f7fd fe67 	bl	800cc54 <disk_write>
 800ef86:	4603      	mov	r3, r0
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d004      	beq.n	800ef96 <f_lseek+0x1b0>
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2201      	movs	r2, #1
 800ef90:	755a      	strb	r2, [r3, #21]
 800ef92:	2301      	movs	r3, #1
 800ef94:	e12c      	b.n	800f1f0 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	7d1b      	ldrb	r3, [r3, #20]
 800ef9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef9e:	b2da      	uxtb	r2, r3
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	7858      	ldrb	r0, [r3, #1]
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800efae:	2301      	movs	r3, #1
 800efb0:	69ba      	ldr	r2, [r7, #24]
 800efb2:	f7fd fe2f 	bl	800cc14 <disk_read>
 800efb6:	4603      	mov	r3, r0
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d004      	beq.n	800efc6 <f_lseek+0x1e0>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2201      	movs	r2, #1
 800efc0:	755a      	strb	r2, [r3, #21]
 800efc2:	2301      	movs	r3, #1
 800efc4:	e114      	b.n	800f1f0 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	69ba      	ldr	r2, [r7, #24]
 800efca:	621a      	str	r2, [r3, #32]
 800efcc:	e10e      	b.n	800f1ec <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	68db      	ldr	r3, [r3, #12]
 800efd2:	683a      	ldr	r2, [r7, #0]
 800efd4:	429a      	cmp	r2, r3
 800efd6:	d908      	bls.n	800efea <f_lseek+0x204>
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	7d1b      	ldrb	r3, [r3, #20]
 800efdc:	f003 0302 	and.w	r3, r3, #2
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d102      	bne.n	800efea <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	68db      	ldr	r3, [r3, #12]
 800efe8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	699b      	ldr	r3, [r3, #24]
 800efee:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800eff0:	2300      	movs	r3, #0
 800eff2:	637b      	str	r3, [r7, #52]	; 0x34
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eff8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	2b00      	cmp	r3, #0
 800effe:	f000 80a7 	beq.w	800f150 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	895b      	ldrh	r3, [r3, #10]
 800f006:	025b      	lsls	r3, r3, #9
 800f008:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f00a:	6a3b      	ldr	r3, [r7, #32]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d01b      	beq.n	800f048 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	1e5a      	subs	r2, r3, #1
 800f014:	69fb      	ldr	r3, [r7, #28]
 800f016:	fbb2 f2f3 	udiv	r2, r2, r3
 800f01a:	6a3b      	ldr	r3, [r7, #32]
 800f01c:	1e59      	subs	r1, r3, #1
 800f01e:	69fb      	ldr	r3, [r7, #28]
 800f020:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f024:	429a      	cmp	r2, r3
 800f026:	d30f      	bcc.n	800f048 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f028:	6a3b      	ldr	r3, [r7, #32]
 800f02a:	1e5a      	subs	r2, r3, #1
 800f02c:	69fb      	ldr	r3, [r7, #28]
 800f02e:	425b      	negs	r3, r3
 800f030:	401a      	ands	r2, r3
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	699b      	ldr	r3, [r3, #24]
 800f03a:	683a      	ldr	r2, [r7, #0]
 800f03c:	1ad3      	subs	r3, r2, r3
 800f03e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	69db      	ldr	r3, [r3, #28]
 800f044:	63bb      	str	r3, [r7, #56]	; 0x38
 800f046:	e022      	b.n	800f08e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	689b      	ldr	r3, [r3, #8]
 800f04c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f050:	2b00      	cmp	r3, #0
 800f052:	d119      	bne.n	800f088 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2100      	movs	r1, #0
 800f058:	4618      	mov	r0, r3
 800f05a:	f7fe fb9d 	bl	800d798 <create_chain>
 800f05e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f062:	2b01      	cmp	r3, #1
 800f064:	d104      	bne.n	800f070 <f_lseek+0x28a>
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2202      	movs	r2, #2
 800f06a:	755a      	strb	r2, [r3, #21]
 800f06c:	2302      	movs	r3, #2
 800f06e:	e0bf      	b.n	800f1f0 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f072:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f076:	d104      	bne.n	800f082 <f_lseek+0x29c>
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2201      	movs	r2, #1
 800f07c:	755a      	strb	r2, [r3, #21]
 800f07e:	2301      	movs	r3, #1
 800f080:	e0b6      	b.n	800f1f0 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f086:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f08c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f090:	2b00      	cmp	r3, #0
 800f092:	d05d      	beq.n	800f150 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800f094:	e03a      	b.n	800f10c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800f096:	683a      	ldr	r2, [r7, #0]
 800f098:	69fb      	ldr	r3, [r7, #28]
 800f09a:	1ad3      	subs	r3, r2, r3
 800f09c:	603b      	str	r3, [r7, #0]
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	699a      	ldr	r2, [r3, #24]
 800f0a2:	69fb      	ldr	r3, [r7, #28]
 800f0a4:	441a      	add	r2, r3
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	7d1b      	ldrb	r3, [r3, #20]
 800f0ae:	f003 0302 	and.w	r3, r3, #2
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d00b      	beq.n	800f0ce <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7fe fb6c 	bl	800d798 <create_chain>
 800f0c0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d108      	bne.n	800f0da <f_lseek+0x2f4>
							ofs = 0; break;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	603b      	str	r3, [r7, #0]
 800f0cc:	e022      	b.n	800f114 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f7fe f967 	bl	800d3a6 <get_fat>
 800f0d8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0e0:	d104      	bne.n	800f0ec <f_lseek+0x306>
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	755a      	strb	r2, [r3, #21]
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	e081      	b.n	800f1f0 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ee:	2b01      	cmp	r3, #1
 800f0f0:	d904      	bls.n	800f0fc <f_lseek+0x316>
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	695b      	ldr	r3, [r3, #20]
 800f0f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d304      	bcc.n	800f106 <f_lseek+0x320>
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2202      	movs	r2, #2
 800f100:	755a      	strb	r2, [r3, #21]
 800f102:	2302      	movs	r3, #2
 800f104:	e074      	b.n	800f1f0 <f_lseek+0x40a>
					fp->clust = clst;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f10a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f10c:	683a      	ldr	r2, [r7, #0]
 800f10e:	69fb      	ldr	r3, [r7, #28]
 800f110:	429a      	cmp	r2, r3
 800f112:	d8c0      	bhi.n	800f096 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	699a      	ldr	r2, [r3, #24]
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	441a      	add	r2, r3
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f126:	2b00      	cmp	r3, #0
 800f128:	d012      	beq.n	800f150 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f12e:	4618      	mov	r0, r3
 800f130:	f7fe f91a 	bl	800d368 <clust2sect>
 800f134:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d104      	bne.n	800f146 <f_lseek+0x360>
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2202      	movs	r2, #2
 800f140:	755a      	strb	r2, [r3, #21]
 800f142:	2302      	movs	r3, #2
 800f144:	e054      	b.n	800f1f0 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	0a5b      	lsrs	r3, r3, #9
 800f14a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f14c:	4413      	add	r3, r2
 800f14e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	699a      	ldr	r2, [r3, #24]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	68db      	ldr	r3, [r3, #12]
 800f158:	429a      	cmp	r2, r3
 800f15a:	d90a      	bls.n	800f172 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	699a      	ldr	r2, [r3, #24]
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	7d1b      	ldrb	r3, [r3, #20]
 800f168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f16c:	b2da      	uxtb	r2, r3
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	699b      	ldr	r3, [r3, #24]
 800f176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d036      	beq.n	800f1ec <f_lseek+0x406>
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6a1b      	ldr	r3, [r3, #32]
 800f182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f184:	429a      	cmp	r2, r3
 800f186:	d031      	beq.n	800f1ec <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	7d1b      	ldrb	r3, [r3, #20]
 800f18c:	b25b      	sxtb	r3, r3
 800f18e:	2b00      	cmp	r3, #0
 800f190:	da18      	bge.n	800f1c4 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	7858      	ldrb	r0, [r3, #1]
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	6a1a      	ldr	r2, [r3, #32]
 800f1a0:	2301      	movs	r3, #1
 800f1a2:	f7fd fd57 	bl	800cc54 <disk_write>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d004      	beq.n	800f1b6 <f_lseek+0x3d0>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2201      	movs	r2, #1
 800f1b0:	755a      	strb	r2, [r3, #21]
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	e01c      	b.n	800f1f0 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	7d1b      	ldrb	r3, [r3, #20]
 800f1ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1be:	b2da      	uxtb	r2, r3
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	7858      	ldrb	r0, [r3, #1]
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1d2:	f7fd fd1f 	bl	800cc14 <disk_read>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d004      	beq.n	800f1e6 <f_lseek+0x400>
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2201      	movs	r2, #1
 800f1e0:	755a      	strb	r2, [r3, #21]
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	e004      	b.n	800f1f0 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1ea:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f1ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	3740      	adds	r7, #64	; 0x40
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f1f8:	b480      	push	{r7}
 800f1fa:	b087      	sub	sp, #28
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	60f8      	str	r0, [r7, #12]
 800f200:	60b9      	str	r1, [r7, #8]
 800f202:	4613      	mov	r3, r2
 800f204:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f206:	2301      	movs	r3, #1
 800f208:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f20a:	2300      	movs	r3, #0
 800f20c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f20e:	4b1f      	ldr	r3, [pc, #124]	; (800f28c <FATFS_LinkDriverEx+0x94>)
 800f210:	7a5b      	ldrb	r3, [r3, #9]
 800f212:	b2db      	uxtb	r3, r3
 800f214:	2b00      	cmp	r3, #0
 800f216:	d131      	bne.n	800f27c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f218:	4b1c      	ldr	r3, [pc, #112]	; (800f28c <FATFS_LinkDriverEx+0x94>)
 800f21a:	7a5b      	ldrb	r3, [r3, #9]
 800f21c:	b2db      	uxtb	r3, r3
 800f21e:	461a      	mov	r2, r3
 800f220:	4b1a      	ldr	r3, [pc, #104]	; (800f28c <FATFS_LinkDriverEx+0x94>)
 800f222:	2100      	movs	r1, #0
 800f224:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f226:	4b19      	ldr	r3, [pc, #100]	; (800f28c <FATFS_LinkDriverEx+0x94>)
 800f228:	7a5b      	ldrb	r3, [r3, #9]
 800f22a:	b2db      	uxtb	r3, r3
 800f22c:	4a17      	ldr	r2, [pc, #92]	; (800f28c <FATFS_LinkDriverEx+0x94>)
 800f22e:	009b      	lsls	r3, r3, #2
 800f230:	4413      	add	r3, r2
 800f232:	68fa      	ldr	r2, [r7, #12]
 800f234:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f236:	4b15      	ldr	r3, [pc, #84]	; (800f28c <FATFS_LinkDriverEx+0x94>)
 800f238:	7a5b      	ldrb	r3, [r3, #9]
 800f23a:	b2db      	uxtb	r3, r3
 800f23c:	461a      	mov	r2, r3
 800f23e:	4b13      	ldr	r3, [pc, #76]	; (800f28c <FATFS_LinkDriverEx+0x94>)
 800f240:	4413      	add	r3, r2
 800f242:	79fa      	ldrb	r2, [r7, #7]
 800f244:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f246:	4b11      	ldr	r3, [pc, #68]	; (800f28c <FATFS_LinkDriverEx+0x94>)
 800f248:	7a5b      	ldrb	r3, [r3, #9]
 800f24a:	b2db      	uxtb	r3, r3
 800f24c:	1c5a      	adds	r2, r3, #1
 800f24e:	b2d1      	uxtb	r1, r2
 800f250:	4a0e      	ldr	r2, [pc, #56]	; (800f28c <FATFS_LinkDriverEx+0x94>)
 800f252:	7251      	strb	r1, [r2, #9]
 800f254:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f256:	7dbb      	ldrb	r3, [r7, #22]
 800f258:	3330      	adds	r3, #48	; 0x30
 800f25a:	b2da      	uxtb	r2, r3
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	3301      	adds	r3, #1
 800f264:	223a      	movs	r2, #58	; 0x3a
 800f266:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	3302      	adds	r3, #2
 800f26c:	222f      	movs	r2, #47	; 0x2f
 800f26e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	3303      	adds	r3, #3
 800f274:	2200      	movs	r2, #0
 800f276:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f278:	2300      	movs	r3, #0
 800f27a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f27c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f27e:	4618      	mov	r0, r3
 800f280:	371c      	adds	r7, #28
 800f282:	46bd      	mov	sp, r7
 800f284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f288:	4770      	bx	lr
 800f28a:	bf00      	nop
 800f28c:	20001774 	.word	0x20001774

0800f290 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b082      	sub	sp, #8
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f29a:	2200      	movs	r2, #0
 800f29c:	6839      	ldr	r1, [r7, #0]
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f7ff ffaa 	bl	800f1f8 <FATFS_LinkDriverEx>
 800f2a4:	4603      	mov	r3, r0
}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	3708      	adds	r7, #8
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}
	...

0800f2b0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f2b4:	2201      	movs	r2, #1
 800f2b6:	490e      	ldr	r1, [pc, #56]	; (800f2f0 <MX_USB_HOST_Init+0x40>)
 800f2b8:	480e      	ldr	r0, [pc, #56]	; (800f2f4 <MX_USB_HOST_Init+0x44>)
 800f2ba:	f7fc f819 	bl	800b2f0 <USBH_Init>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d001      	beq.n	800f2c8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f2c4:	f7f2 fce4 	bl	8001c90 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800f2c8:	490b      	ldr	r1, [pc, #44]	; (800f2f8 <MX_USB_HOST_Init+0x48>)
 800f2ca:	480a      	ldr	r0, [pc, #40]	; (800f2f4 <MX_USB_HOST_Init+0x44>)
 800f2cc:	f7fc f89e 	bl	800b40c <USBH_RegisterClass>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d001      	beq.n	800f2da <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f2d6:	f7f2 fcdb 	bl	8001c90 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f2da:	4806      	ldr	r0, [pc, #24]	; (800f2f4 <MX_USB_HOST_Init+0x44>)
 800f2dc:	f7fc f922 	bl	800b524 <USBH_Start>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d001      	beq.n	800f2ea <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f2e6:	f7f2 fcd3 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f2ea:	bf00      	nop
 800f2ec:	bd80      	pop	{r7, pc}
 800f2ee:	bf00      	nop
 800f2f0:	0800f311 	.word	0x0800f311
 800f2f4:	20001780 	.word	0x20001780
 800f2f8:	20000078 	.word	0x20000078

0800f2fc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800f300:	4802      	ldr	r0, [pc, #8]	; (800f30c <MX_USB_HOST_Process+0x10>)
 800f302:	f7fc f91f 	bl	800b544 <USBH_Process>
}
 800f306:	bf00      	nop
 800f308:	bd80      	pop	{r7, pc}
 800f30a:	bf00      	nop
 800f30c:	20001780 	.word	0x20001780

0800f310 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f310:	b480      	push	{r7}
 800f312:	b083      	sub	sp, #12
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
 800f318:	460b      	mov	r3, r1
 800f31a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f31c:	78fb      	ldrb	r3, [r7, #3]
 800f31e:	3b01      	subs	r3, #1
 800f320:	2b04      	cmp	r3, #4
 800f322:	d819      	bhi.n	800f358 <USBH_UserProcess+0x48>
 800f324:	a201      	add	r2, pc, #4	; (adr r2, 800f32c <USBH_UserProcess+0x1c>)
 800f326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f32a:	bf00      	nop
 800f32c:	0800f359 	.word	0x0800f359
 800f330:	0800f349 	.word	0x0800f349
 800f334:	0800f359 	.word	0x0800f359
 800f338:	0800f351 	.word	0x0800f351
 800f33c:	0800f341 	.word	0x0800f341
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f340:	4b09      	ldr	r3, [pc, #36]	; (800f368 <USBH_UserProcess+0x58>)
 800f342:	2203      	movs	r2, #3
 800f344:	701a      	strb	r2, [r3, #0]
  break;
 800f346:	e008      	b.n	800f35a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f348:	4b07      	ldr	r3, [pc, #28]	; (800f368 <USBH_UserProcess+0x58>)
 800f34a:	2202      	movs	r2, #2
 800f34c:	701a      	strb	r2, [r3, #0]
  break;
 800f34e:	e004      	b.n	800f35a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f350:	4b05      	ldr	r3, [pc, #20]	; (800f368 <USBH_UserProcess+0x58>)
 800f352:	2201      	movs	r2, #1
 800f354:	701a      	strb	r2, [r3, #0]
  break;
 800f356:	e000      	b.n	800f35a <USBH_UserProcess+0x4a>

  default:
  break;
 800f358:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f35a:	bf00      	nop
 800f35c:	370c      	adds	r7, #12
 800f35e:	46bd      	mov	sp, r7
 800f360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f364:	4770      	bx	lr
 800f366:	bf00      	nop
 800f368:	20001b58 	.word	0x20001b58

0800f36c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b08a      	sub	sp, #40	; 0x28
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f374:	f107 0314 	add.w	r3, r7, #20
 800f378:	2200      	movs	r2, #0
 800f37a:	601a      	str	r2, [r3, #0]
 800f37c:	605a      	str	r2, [r3, #4]
 800f37e:	609a      	str	r2, [r3, #8]
 800f380:	60da      	str	r2, [r3, #12]
 800f382:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f38c:	d147      	bne.n	800f41e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f38e:	2300      	movs	r3, #0
 800f390:	613b      	str	r3, [r7, #16]
 800f392:	4b25      	ldr	r3, [pc, #148]	; (800f428 <HAL_HCD_MspInit+0xbc>)
 800f394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f396:	4a24      	ldr	r2, [pc, #144]	; (800f428 <HAL_HCD_MspInit+0xbc>)
 800f398:	f043 0301 	orr.w	r3, r3, #1
 800f39c:	6313      	str	r3, [r2, #48]	; 0x30
 800f39e:	4b22      	ldr	r3, [pc, #136]	; (800f428 <HAL_HCD_MspInit+0xbc>)
 800f3a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3a2:	f003 0301 	and.w	r3, r3, #1
 800f3a6:	613b      	str	r3, [r7, #16]
 800f3a8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800f3aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f3ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800f3b8:	f107 0314 	add.w	r3, r7, #20
 800f3bc:	4619      	mov	r1, r3
 800f3be:	481b      	ldr	r0, [pc, #108]	; (800f42c <HAL_HCD_MspInit+0xc0>)
 800f3c0:	f7f4 fa04 	bl	80037cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800f3c4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800f3c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f3ca:	2302      	movs	r3, #2
 800f3cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f3d2:	2303      	movs	r3, #3
 800f3d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f3d6:	230a      	movs	r3, #10
 800f3d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f3da:	f107 0314 	add.w	r3, r7, #20
 800f3de:	4619      	mov	r1, r3
 800f3e0:	4812      	ldr	r0, [pc, #72]	; (800f42c <HAL_HCD_MspInit+0xc0>)
 800f3e2:	f7f4 f9f3 	bl	80037cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f3e6:	4b10      	ldr	r3, [pc, #64]	; (800f428 <HAL_HCD_MspInit+0xbc>)
 800f3e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3ea:	4a0f      	ldr	r2, [pc, #60]	; (800f428 <HAL_HCD_MspInit+0xbc>)
 800f3ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3f0:	6353      	str	r3, [r2, #52]	; 0x34
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	60fb      	str	r3, [r7, #12]
 800f3f6:	4b0c      	ldr	r3, [pc, #48]	; (800f428 <HAL_HCD_MspInit+0xbc>)
 800f3f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3fa:	4a0b      	ldr	r2, [pc, #44]	; (800f428 <HAL_HCD_MspInit+0xbc>)
 800f3fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f400:	6453      	str	r3, [r2, #68]	; 0x44
 800f402:	4b09      	ldr	r3, [pc, #36]	; (800f428 <HAL_HCD_MspInit+0xbc>)
 800f404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f40a:	60fb      	str	r3, [r7, #12]
 800f40c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f40e:	2200      	movs	r2, #0
 800f410:	2100      	movs	r1, #0
 800f412:	2043      	movs	r0, #67	; 0x43
 800f414:	f7f3 fdc3 	bl	8002f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f418:	2043      	movs	r0, #67	; 0x43
 800f41a:	f7f3 fddc 	bl	8002fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f41e:	bf00      	nop
 800f420:	3728      	adds	r7, #40	; 0x28
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}
 800f426:	bf00      	nop
 800f428:	40023800 	.word	0x40023800
 800f42c:	40020000 	.word	0x40020000

0800f430 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b082      	sub	sp, #8
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f43e:	4618      	mov	r0, r3
 800f440:	f7fc fc5f 	bl	800bd02 <USBH_LL_IncTimer>
}
 800f444:	bf00      	nop
 800f446:	3708      	adds	r7, #8
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}

0800f44c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b082      	sub	sp, #8
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f45a:	4618      	mov	r0, r3
 800f45c:	f7fc fc97 	bl	800bd8e <USBH_LL_Connect>
}
 800f460:	bf00      	nop
 800f462:	3708      	adds	r7, #8
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}

0800f468 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b082      	sub	sp, #8
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f476:	4618      	mov	r0, r3
 800f478:	f7fc fca0 	bl	800bdbc <USBH_LL_Disconnect>
}
 800f47c:	bf00      	nop
 800f47e:	3708      	adds	r7, #8
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}

0800f484 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f484:	b480      	push	{r7}
 800f486:	b083      	sub	sp, #12
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	460b      	mov	r3, r1
 800f48e:	70fb      	strb	r3, [r7, #3]
 800f490:	4613      	mov	r3, r2
 800f492:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f494:	bf00      	nop
 800f496:	370c      	adds	r7, #12
 800f498:	46bd      	mov	sp, r7
 800f49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49e:	4770      	bx	lr

0800f4a0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b082      	sub	sp, #8
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7fc fc51 	bl	800bd56 <USBH_LL_PortEnabled>
}
 800f4b4:	bf00      	nop
 800f4b6:	3708      	adds	r7, #8
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}

0800f4bc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b082      	sub	sp, #8
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7fc fc51 	bl	800bd72 <USBH_LL_PortDisabled>
}
 800f4d0:	bf00      	nop
 800f4d2:	3708      	adds	r7, #8
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f4e6:	2b01      	cmp	r3, #1
 800f4e8:	d12a      	bne.n	800f540 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f4ea:	4a18      	ldr	r2, [pc, #96]	; (800f54c <USBH_LL_Init+0x74>)
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	4a15      	ldr	r2, [pc, #84]	; (800f54c <USBH_LL_Init+0x74>)
 800f4f6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f4fa:	4b14      	ldr	r3, [pc, #80]	; (800f54c <USBH_LL_Init+0x74>)
 800f4fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f500:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f502:	4b12      	ldr	r3, [pc, #72]	; (800f54c <USBH_LL_Init+0x74>)
 800f504:	2208      	movs	r2, #8
 800f506:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f508:	4b10      	ldr	r3, [pc, #64]	; (800f54c <USBH_LL_Init+0x74>)
 800f50a:	2201      	movs	r2, #1
 800f50c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f50e:	4b0f      	ldr	r3, [pc, #60]	; (800f54c <USBH_LL_Init+0x74>)
 800f510:	2200      	movs	r2, #0
 800f512:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f514:	4b0d      	ldr	r3, [pc, #52]	; (800f54c <USBH_LL_Init+0x74>)
 800f516:	2202      	movs	r2, #2
 800f518:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f51a:	4b0c      	ldr	r3, [pc, #48]	; (800f54c <USBH_LL_Init+0x74>)
 800f51c:	2200      	movs	r2, #0
 800f51e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f520:	480a      	ldr	r0, [pc, #40]	; (800f54c <USBH_LL_Init+0x74>)
 800f522:	f7f4 fbf8 	bl	8003d16 <HAL_HCD_Init>
 800f526:	4603      	mov	r3, r0
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d001      	beq.n	800f530 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f52c:	f7f2 fbb0 	bl	8001c90 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f530:	4806      	ldr	r0, [pc, #24]	; (800f54c <USBH_LL_Init+0x74>)
 800f532:	f7f4 ffdc 	bl	80044ee <HAL_HCD_GetCurrentFrame>
 800f536:	4603      	mov	r3, r0
 800f538:	4619      	mov	r1, r3
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f7fc fbd2 	bl	800bce4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f540:	2300      	movs	r3, #0
}
 800f542:	4618      	mov	r0, r3
 800f544:	3708      	adds	r7, #8
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
 800f54a:	bf00      	nop
 800f54c:	20001b5c 	.word	0x20001b5c

0800f550 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b084      	sub	sp, #16
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f558:	2300      	movs	r3, #0
 800f55a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f55c:	2300      	movs	r3, #0
 800f55e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f566:	4618      	mov	r0, r3
 800f568:	f7f4 ff4b 	bl	8004402 <HAL_HCD_Start>
 800f56c:	4603      	mov	r3, r0
 800f56e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f570:	7bfb      	ldrb	r3, [r7, #15]
 800f572:	4618      	mov	r0, r3
 800f574:	f000 f982 	bl	800f87c <USBH_Get_USB_Status>
 800f578:	4603      	mov	r3, r0
 800f57a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f57c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3710      	adds	r7, #16
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}

0800f586 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f586:	b580      	push	{r7, lr}
 800f588:	b084      	sub	sp, #16
 800f58a:	af00      	add	r7, sp, #0
 800f58c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f58e:	2300      	movs	r3, #0
 800f590:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f592:	2300      	movs	r3, #0
 800f594:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f59c:	4618      	mov	r0, r3
 800f59e:	f7f4 ff53 	bl	8004448 <HAL_HCD_Stop>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f5a6:	7bfb      	ldrb	r3, [r7, #15]
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f000 f967 	bl	800f87c <USBH_Get_USB_Status>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3710      	adds	r7, #16
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}

0800f5bc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b084      	sub	sp, #16
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f7f4 ff9b 	bl	800450a <HAL_HCD_GetCurrentSpeed>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	2b02      	cmp	r3, #2
 800f5d8:	d00c      	beq.n	800f5f4 <USBH_LL_GetSpeed+0x38>
 800f5da:	2b02      	cmp	r3, #2
 800f5dc:	d80d      	bhi.n	800f5fa <USBH_LL_GetSpeed+0x3e>
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d002      	beq.n	800f5e8 <USBH_LL_GetSpeed+0x2c>
 800f5e2:	2b01      	cmp	r3, #1
 800f5e4:	d003      	beq.n	800f5ee <USBH_LL_GetSpeed+0x32>
 800f5e6:	e008      	b.n	800f5fa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	73fb      	strb	r3, [r7, #15]
    break;
 800f5ec:	e008      	b.n	800f600 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f5ee:	2301      	movs	r3, #1
 800f5f0:	73fb      	strb	r3, [r7, #15]
    break;
 800f5f2:	e005      	b.n	800f600 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f5f4:	2302      	movs	r3, #2
 800f5f6:	73fb      	strb	r3, [r7, #15]
    break;
 800f5f8:	e002      	b.n	800f600 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	73fb      	strb	r3, [r7, #15]
    break;
 800f5fe:	bf00      	nop
  }
  return  speed;
 800f600:	7bfb      	ldrb	r3, [r7, #15]
}
 800f602:	4618      	mov	r0, r3
 800f604:	3710      	adds	r7, #16
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}

0800f60a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f60a:	b580      	push	{r7, lr}
 800f60c:	b084      	sub	sp, #16
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f612:	2300      	movs	r3, #0
 800f614:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f616:	2300      	movs	r3, #0
 800f618:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f620:	4618      	mov	r0, r3
 800f622:	f7f4 ff2e 	bl	8004482 <HAL_HCD_ResetPort>
 800f626:	4603      	mov	r3, r0
 800f628:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f62a:	7bfb      	ldrb	r3, [r7, #15]
 800f62c:	4618      	mov	r0, r3
 800f62e:	f000 f925 	bl	800f87c <USBH_Get_USB_Status>
 800f632:	4603      	mov	r3, r0
 800f634:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f636:	7bbb      	ldrb	r3, [r7, #14]
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3710      	adds	r7, #16
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b082      	sub	sp, #8
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	460b      	mov	r3, r1
 800f64a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f652:	78fa      	ldrb	r2, [r7, #3]
 800f654:	4611      	mov	r1, r2
 800f656:	4618      	mov	r0, r3
 800f658:	f7f4 ff35 	bl	80044c6 <HAL_HCD_HC_GetXferCount>
 800f65c:	4603      	mov	r3, r0
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3708      	adds	r7, #8
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}

0800f666 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f666:	b590      	push	{r4, r7, lr}
 800f668:	b089      	sub	sp, #36	; 0x24
 800f66a:	af04      	add	r7, sp, #16
 800f66c:	6078      	str	r0, [r7, #4]
 800f66e:	4608      	mov	r0, r1
 800f670:	4611      	mov	r1, r2
 800f672:	461a      	mov	r2, r3
 800f674:	4603      	mov	r3, r0
 800f676:	70fb      	strb	r3, [r7, #3]
 800f678:	460b      	mov	r3, r1
 800f67a:	70bb      	strb	r3, [r7, #2]
 800f67c:	4613      	mov	r3, r2
 800f67e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f680:	2300      	movs	r3, #0
 800f682:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f684:	2300      	movs	r3, #0
 800f686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f68e:	787c      	ldrb	r4, [r7, #1]
 800f690:	78ba      	ldrb	r2, [r7, #2]
 800f692:	78f9      	ldrb	r1, [r7, #3]
 800f694:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f696:	9302      	str	r3, [sp, #8]
 800f698:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f69c:	9301      	str	r3, [sp, #4]
 800f69e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f6a2:	9300      	str	r3, [sp, #0]
 800f6a4:	4623      	mov	r3, r4
 800f6a6:	f7f4 fb98 	bl	8003dda <HAL_HCD_HC_Init>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f6ae:	7bfb      	ldrb	r3, [r7, #15]
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f000 f8e3 	bl	800f87c <USBH_Get_USB_Status>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3714      	adds	r7, #20
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd90      	pop	{r4, r7, pc}

0800f6c4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b084      	sub	sp, #16
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
 800f6cc:	460b      	mov	r3, r1
 800f6ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f6de:	78fa      	ldrb	r2, [r7, #3]
 800f6e0:	4611      	mov	r1, r2
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7f4 fc08 	bl	8003ef8 <HAL_HCD_HC_Halt>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f6ec:	7bfb      	ldrb	r3, [r7, #15]
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f000 f8c4 	bl	800f87c <USBH_Get_USB_Status>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	3710      	adds	r7, #16
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd80      	pop	{r7, pc}

0800f702 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f702:	b590      	push	{r4, r7, lr}
 800f704:	b089      	sub	sp, #36	; 0x24
 800f706:	af04      	add	r7, sp, #16
 800f708:	6078      	str	r0, [r7, #4]
 800f70a:	4608      	mov	r0, r1
 800f70c:	4611      	mov	r1, r2
 800f70e:	461a      	mov	r2, r3
 800f710:	4603      	mov	r3, r0
 800f712:	70fb      	strb	r3, [r7, #3]
 800f714:	460b      	mov	r3, r1
 800f716:	70bb      	strb	r3, [r7, #2]
 800f718:	4613      	mov	r3, r2
 800f71a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f71c:	2300      	movs	r3, #0
 800f71e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f720:	2300      	movs	r3, #0
 800f722:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f72a:	787c      	ldrb	r4, [r7, #1]
 800f72c:	78ba      	ldrb	r2, [r7, #2]
 800f72e:	78f9      	ldrb	r1, [r7, #3]
 800f730:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f734:	9303      	str	r3, [sp, #12]
 800f736:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f738:	9302      	str	r3, [sp, #8]
 800f73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f73c:	9301      	str	r3, [sp, #4]
 800f73e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f742:	9300      	str	r3, [sp, #0]
 800f744:	4623      	mov	r3, r4
 800f746:	f7f4 fbfb 	bl	8003f40 <HAL_HCD_HC_SubmitRequest>
 800f74a:	4603      	mov	r3, r0
 800f74c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f74e:	7bfb      	ldrb	r3, [r7, #15]
 800f750:	4618      	mov	r0, r3
 800f752:	f000 f893 	bl	800f87c <USBH_Get_USB_Status>
 800f756:	4603      	mov	r3, r0
 800f758:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f75a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f75c:	4618      	mov	r0, r3
 800f75e:	3714      	adds	r7, #20
 800f760:	46bd      	mov	sp, r7
 800f762:	bd90      	pop	{r4, r7, pc}

0800f764 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b082      	sub	sp, #8
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
 800f76c:	460b      	mov	r3, r1
 800f76e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f776:	78fa      	ldrb	r2, [r7, #3]
 800f778:	4611      	mov	r1, r2
 800f77a:	4618      	mov	r0, r3
 800f77c:	f7f4 fe8f 	bl	800449e <HAL_HCD_HC_GetURBState>
 800f780:	4603      	mov	r3, r0
}
 800f782:	4618      	mov	r0, r3
 800f784:	3708      	adds	r7, #8
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}

0800f78a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f78a:	b580      	push	{r7, lr}
 800f78c:	b082      	sub	sp, #8
 800f78e:	af00      	add	r7, sp, #0
 800f790:	6078      	str	r0, [r7, #4]
 800f792:	460b      	mov	r3, r1
 800f794:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800f796:	20c8      	movs	r0, #200	; 0xc8
 800f798:	f7f3 fb02 	bl	8002da0 <HAL_Delay>
  return USBH_OK;
 800f79c:	2300      	movs	r3, #0
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3708      	adds	r7, #8
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}

0800f7a6 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f7a6:	b480      	push	{r7}
 800f7a8:	b085      	sub	sp, #20
 800f7aa:	af00      	add	r7, sp, #0
 800f7ac:	6078      	str	r0, [r7, #4]
 800f7ae:	460b      	mov	r3, r1
 800f7b0:	70fb      	strb	r3, [r7, #3]
 800f7b2:	4613      	mov	r3, r2
 800f7b4:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f7bc:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f7be:	78fb      	ldrb	r3, [r7, #3]
 800f7c0:	68fa      	ldr	r2, [r7, #12]
 800f7c2:	212c      	movs	r1, #44	; 0x2c
 800f7c4:	fb01 f303 	mul.w	r3, r1, r3
 800f7c8:	4413      	add	r3, r2
 800f7ca:	333b      	adds	r3, #59	; 0x3b
 800f7cc:	781b      	ldrb	r3, [r3, #0]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d009      	beq.n	800f7e6 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f7d2:	78fb      	ldrb	r3, [r7, #3]
 800f7d4:	68fa      	ldr	r2, [r7, #12]
 800f7d6:	212c      	movs	r1, #44	; 0x2c
 800f7d8:	fb01 f303 	mul.w	r3, r1, r3
 800f7dc:	4413      	add	r3, r2
 800f7de:	3354      	adds	r3, #84	; 0x54
 800f7e0:	78ba      	ldrb	r2, [r7, #2]
 800f7e2:	701a      	strb	r2, [r3, #0]
 800f7e4:	e008      	b.n	800f7f8 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f7e6:	78fb      	ldrb	r3, [r7, #3]
 800f7e8:	68fa      	ldr	r2, [r7, #12]
 800f7ea:	212c      	movs	r1, #44	; 0x2c
 800f7ec:	fb01 f303 	mul.w	r3, r1, r3
 800f7f0:	4413      	add	r3, r2
 800f7f2:	3355      	adds	r3, #85	; 0x55
 800f7f4:	78ba      	ldrb	r2, [r7, #2]
 800f7f6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f7f8:	2300      	movs	r3, #0
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	3714      	adds	r7, #20
 800f7fe:	46bd      	mov	sp, r7
 800f800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f804:	4770      	bx	lr

0800f806 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f806:	b480      	push	{r7}
 800f808:	b085      	sub	sp, #20
 800f80a:	af00      	add	r7, sp, #0
 800f80c:	6078      	str	r0, [r7, #4]
 800f80e:	460b      	mov	r3, r1
 800f810:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800f812:	2300      	movs	r3, #0
 800f814:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f81c:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800f81e:	78fb      	ldrb	r3, [r7, #3]
 800f820:	68ba      	ldr	r2, [r7, #8]
 800f822:	212c      	movs	r1, #44	; 0x2c
 800f824:	fb01 f303 	mul.w	r3, r1, r3
 800f828:	4413      	add	r3, r2
 800f82a:	333b      	adds	r3, #59	; 0x3b
 800f82c:	781b      	ldrb	r3, [r3, #0]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d009      	beq.n	800f846 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800f832:	78fb      	ldrb	r3, [r7, #3]
 800f834:	68ba      	ldr	r2, [r7, #8]
 800f836:	212c      	movs	r1, #44	; 0x2c
 800f838:	fb01 f303 	mul.w	r3, r1, r3
 800f83c:	4413      	add	r3, r2
 800f83e:	3354      	adds	r3, #84	; 0x54
 800f840:	781b      	ldrb	r3, [r3, #0]
 800f842:	73fb      	strb	r3, [r7, #15]
 800f844:	e008      	b.n	800f858 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800f846:	78fb      	ldrb	r3, [r7, #3]
 800f848:	68ba      	ldr	r2, [r7, #8]
 800f84a:	212c      	movs	r1, #44	; 0x2c
 800f84c:	fb01 f303 	mul.w	r3, r1, r3
 800f850:	4413      	add	r3, r2
 800f852:	3355      	adds	r3, #85	; 0x55
 800f854:	781b      	ldrb	r3, [r3, #0]
 800f856:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800f858:	7bfb      	ldrb	r3, [r7, #15]
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3714      	adds	r7, #20
 800f85e:	46bd      	mov	sp, r7
 800f860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f864:	4770      	bx	lr

0800f866 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f866:	b580      	push	{r7, lr}
 800f868:	b082      	sub	sp, #8
 800f86a:	af00      	add	r7, sp, #0
 800f86c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f7f3 fa96 	bl	8002da0 <HAL_Delay>
}
 800f874:	bf00      	nop
 800f876:	3708      	adds	r7, #8
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}

0800f87c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f87c:	b480      	push	{r7}
 800f87e:	b085      	sub	sp, #20
 800f880:	af00      	add	r7, sp, #0
 800f882:	4603      	mov	r3, r0
 800f884:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f886:	2300      	movs	r3, #0
 800f888:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f88a:	79fb      	ldrb	r3, [r7, #7]
 800f88c:	2b03      	cmp	r3, #3
 800f88e:	d817      	bhi.n	800f8c0 <USBH_Get_USB_Status+0x44>
 800f890:	a201      	add	r2, pc, #4	; (adr r2, 800f898 <USBH_Get_USB_Status+0x1c>)
 800f892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f896:	bf00      	nop
 800f898:	0800f8a9 	.word	0x0800f8a9
 800f89c:	0800f8af 	.word	0x0800f8af
 800f8a0:	0800f8b5 	.word	0x0800f8b5
 800f8a4:	0800f8bb 	.word	0x0800f8bb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	73fb      	strb	r3, [r7, #15]
    break;
 800f8ac:	e00b      	b.n	800f8c6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f8ae:	2302      	movs	r3, #2
 800f8b0:	73fb      	strb	r3, [r7, #15]
    break;
 800f8b2:	e008      	b.n	800f8c6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	73fb      	strb	r3, [r7, #15]
    break;
 800f8b8:	e005      	b.n	800f8c6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f8ba:	2302      	movs	r3, #2
 800f8bc:	73fb      	strb	r3, [r7, #15]
    break;
 800f8be:	e002      	b.n	800f8c6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f8c0:	2302      	movs	r3, #2
 800f8c2:	73fb      	strb	r3, [r7, #15]
    break;
 800f8c4:	bf00      	nop
  }
  return usb_status;
 800f8c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3714      	adds	r7, #20
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d2:	4770      	bx	lr

0800f8d4 <__errno>:
 800f8d4:	4b01      	ldr	r3, [pc, #4]	; (800f8dc <__errno+0x8>)
 800f8d6:	6818      	ldr	r0, [r3, #0]
 800f8d8:	4770      	bx	lr
 800f8da:	bf00      	nop
 800f8dc:	20000098 	.word	0x20000098

0800f8e0 <__libc_init_array>:
 800f8e0:	b570      	push	{r4, r5, r6, lr}
 800f8e2:	4d0d      	ldr	r5, [pc, #52]	; (800f918 <__libc_init_array+0x38>)
 800f8e4:	4c0d      	ldr	r4, [pc, #52]	; (800f91c <__libc_init_array+0x3c>)
 800f8e6:	1b64      	subs	r4, r4, r5
 800f8e8:	10a4      	asrs	r4, r4, #2
 800f8ea:	2600      	movs	r6, #0
 800f8ec:	42a6      	cmp	r6, r4
 800f8ee:	d109      	bne.n	800f904 <__libc_init_array+0x24>
 800f8f0:	4d0b      	ldr	r5, [pc, #44]	; (800f920 <__libc_init_array+0x40>)
 800f8f2:	4c0c      	ldr	r4, [pc, #48]	; (800f924 <__libc_init_array+0x44>)
 800f8f4:	f000 f93c 	bl	800fb70 <_init>
 800f8f8:	1b64      	subs	r4, r4, r5
 800f8fa:	10a4      	asrs	r4, r4, #2
 800f8fc:	2600      	movs	r6, #0
 800f8fe:	42a6      	cmp	r6, r4
 800f900:	d105      	bne.n	800f90e <__libc_init_array+0x2e>
 800f902:	bd70      	pop	{r4, r5, r6, pc}
 800f904:	f855 3b04 	ldr.w	r3, [r5], #4
 800f908:	4798      	blx	r3
 800f90a:	3601      	adds	r6, #1
 800f90c:	e7ee      	b.n	800f8ec <__libc_init_array+0xc>
 800f90e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f912:	4798      	blx	r3
 800f914:	3601      	adds	r6, #1
 800f916:	e7f2      	b.n	800f8fe <__libc_init_array+0x1e>
 800f918:	0800fcf4 	.word	0x0800fcf4
 800f91c:	0800fcf4 	.word	0x0800fcf4
 800f920:	0800fcf4 	.word	0x0800fcf4
 800f924:	0800fcf8 	.word	0x0800fcf8

0800f928 <malloc>:
 800f928:	4b02      	ldr	r3, [pc, #8]	; (800f934 <malloc+0xc>)
 800f92a:	4601      	mov	r1, r0
 800f92c:	6818      	ldr	r0, [r3, #0]
 800f92e:	f000 b88d 	b.w	800fa4c <_malloc_r>
 800f932:	bf00      	nop
 800f934:	20000098 	.word	0x20000098

0800f938 <free>:
 800f938:	4b02      	ldr	r3, [pc, #8]	; (800f944 <free+0xc>)
 800f93a:	4601      	mov	r1, r0
 800f93c:	6818      	ldr	r0, [r3, #0]
 800f93e:	f000 b819 	b.w	800f974 <_free_r>
 800f942:	bf00      	nop
 800f944:	20000098 	.word	0x20000098

0800f948 <memcpy>:
 800f948:	440a      	add	r2, r1
 800f94a:	4291      	cmp	r1, r2
 800f94c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f950:	d100      	bne.n	800f954 <memcpy+0xc>
 800f952:	4770      	bx	lr
 800f954:	b510      	push	{r4, lr}
 800f956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f95a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f95e:	4291      	cmp	r1, r2
 800f960:	d1f9      	bne.n	800f956 <memcpy+0xe>
 800f962:	bd10      	pop	{r4, pc}

0800f964 <memset>:
 800f964:	4402      	add	r2, r0
 800f966:	4603      	mov	r3, r0
 800f968:	4293      	cmp	r3, r2
 800f96a:	d100      	bne.n	800f96e <memset+0xa>
 800f96c:	4770      	bx	lr
 800f96e:	f803 1b01 	strb.w	r1, [r3], #1
 800f972:	e7f9      	b.n	800f968 <memset+0x4>

0800f974 <_free_r>:
 800f974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f976:	2900      	cmp	r1, #0
 800f978:	d044      	beq.n	800fa04 <_free_r+0x90>
 800f97a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f97e:	9001      	str	r0, [sp, #4]
 800f980:	2b00      	cmp	r3, #0
 800f982:	f1a1 0404 	sub.w	r4, r1, #4
 800f986:	bfb8      	it	lt
 800f988:	18e4      	addlt	r4, r4, r3
 800f98a:	f000 f8e3 	bl	800fb54 <__malloc_lock>
 800f98e:	4a1e      	ldr	r2, [pc, #120]	; (800fa08 <_free_r+0x94>)
 800f990:	9801      	ldr	r0, [sp, #4]
 800f992:	6813      	ldr	r3, [r2, #0]
 800f994:	b933      	cbnz	r3, 800f9a4 <_free_r+0x30>
 800f996:	6063      	str	r3, [r4, #4]
 800f998:	6014      	str	r4, [r2, #0]
 800f99a:	b003      	add	sp, #12
 800f99c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f9a0:	f000 b8de 	b.w	800fb60 <__malloc_unlock>
 800f9a4:	42a3      	cmp	r3, r4
 800f9a6:	d908      	bls.n	800f9ba <_free_r+0x46>
 800f9a8:	6825      	ldr	r5, [r4, #0]
 800f9aa:	1961      	adds	r1, r4, r5
 800f9ac:	428b      	cmp	r3, r1
 800f9ae:	bf01      	itttt	eq
 800f9b0:	6819      	ldreq	r1, [r3, #0]
 800f9b2:	685b      	ldreq	r3, [r3, #4]
 800f9b4:	1949      	addeq	r1, r1, r5
 800f9b6:	6021      	streq	r1, [r4, #0]
 800f9b8:	e7ed      	b.n	800f996 <_free_r+0x22>
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	685b      	ldr	r3, [r3, #4]
 800f9be:	b10b      	cbz	r3, 800f9c4 <_free_r+0x50>
 800f9c0:	42a3      	cmp	r3, r4
 800f9c2:	d9fa      	bls.n	800f9ba <_free_r+0x46>
 800f9c4:	6811      	ldr	r1, [r2, #0]
 800f9c6:	1855      	adds	r5, r2, r1
 800f9c8:	42a5      	cmp	r5, r4
 800f9ca:	d10b      	bne.n	800f9e4 <_free_r+0x70>
 800f9cc:	6824      	ldr	r4, [r4, #0]
 800f9ce:	4421      	add	r1, r4
 800f9d0:	1854      	adds	r4, r2, r1
 800f9d2:	42a3      	cmp	r3, r4
 800f9d4:	6011      	str	r1, [r2, #0]
 800f9d6:	d1e0      	bne.n	800f99a <_free_r+0x26>
 800f9d8:	681c      	ldr	r4, [r3, #0]
 800f9da:	685b      	ldr	r3, [r3, #4]
 800f9dc:	6053      	str	r3, [r2, #4]
 800f9de:	4421      	add	r1, r4
 800f9e0:	6011      	str	r1, [r2, #0]
 800f9e2:	e7da      	b.n	800f99a <_free_r+0x26>
 800f9e4:	d902      	bls.n	800f9ec <_free_r+0x78>
 800f9e6:	230c      	movs	r3, #12
 800f9e8:	6003      	str	r3, [r0, #0]
 800f9ea:	e7d6      	b.n	800f99a <_free_r+0x26>
 800f9ec:	6825      	ldr	r5, [r4, #0]
 800f9ee:	1961      	adds	r1, r4, r5
 800f9f0:	428b      	cmp	r3, r1
 800f9f2:	bf04      	itt	eq
 800f9f4:	6819      	ldreq	r1, [r3, #0]
 800f9f6:	685b      	ldreq	r3, [r3, #4]
 800f9f8:	6063      	str	r3, [r4, #4]
 800f9fa:	bf04      	itt	eq
 800f9fc:	1949      	addeq	r1, r1, r5
 800f9fe:	6021      	streq	r1, [r4, #0]
 800fa00:	6054      	str	r4, [r2, #4]
 800fa02:	e7ca      	b.n	800f99a <_free_r+0x26>
 800fa04:	b003      	add	sp, #12
 800fa06:	bd30      	pop	{r4, r5, pc}
 800fa08:	20001e60 	.word	0x20001e60

0800fa0c <sbrk_aligned>:
 800fa0c:	b570      	push	{r4, r5, r6, lr}
 800fa0e:	4e0e      	ldr	r6, [pc, #56]	; (800fa48 <sbrk_aligned+0x3c>)
 800fa10:	460c      	mov	r4, r1
 800fa12:	6831      	ldr	r1, [r6, #0]
 800fa14:	4605      	mov	r5, r0
 800fa16:	b911      	cbnz	r1, 800fa1e <sbrk_aligned+0x12>
 800fa18:	f000 f88c 	bl	800fb34 <_sbrk_r>
 800fa1c:	6030      	str	r0, [r6, #0]
 800fa1e:	4621      	mov	r1, r4
 800fa20:	4628      	mov	r0, r5
 800fa22:	f000 f887 	bl	800fb34 <_sbrk_r>
 800fa26:	1c43      	adds	r3, r0, #1
 800fa28:	d00a      	beq.n	800fa40 <sbrk_aligned+0x34>
 800fa2a:	1cc4      	adds	r4, r0, #3
 800fa2c:	f024 0403 	bic.w	r4, r4, #3
 800fa30:	42a0      	cmp	r0, r4
 800fa32:	d007      	beq.n	800fa44 <sbrk_aligned+0x38>
 800fa34:	1a21      	subs	r1, r4, r0
 800fa36:	4628      	mov	r0, r5
 800fa38:	f000 f87c 	bl	800fb34 <_sbrk_r>
 800fa3c:	3001      	adds	r0, #1
 800fa3e:	d101      	bne.n	800fa44 <sbrk_aligned+0x38>
 800fa40:	f04f 34ff 	mov.w	r4, #4294967295
 800fa44:	4620      	mov	r0, r4
 800fa46:	bd70      	pop	{r4, r5, r6, pc}
 800fa48:	20001e64 	.word	0x20001e64

0800fa4c <_malloc_r>:
 800fa4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa50:	1ccd      	adds	r5, r1, #3
 800fa52:	f025 0503 	bic.w	r5, r5, #3
 800fa56:	3508      	adds	r5, #8
 800fa58:	2d0c      	cmp	r5, #12
 800fa5a:	bf38      	it	cc
 800fa5c:	250c      	movcc	r5, #12
 800fa5e:	2d00      	cmp	r5, #0
 800fa60:	4607      	mov	r7, r0
 800fa62:	db01      	blt.n	800fa68 <_malloc_r+0x1c>
 800fa64:	42a9      	cmp	r1, r5
 800fa66:	d905      	bls.n	800fa74 <_malloc_r+0x28>
 800fa68:	230c      	movs	r3, #12
 800fa6a:	603b      	str	r3, [r7, #0]
 800fa6c:	2600      	movs	r6, #0
 800fa6e:	4630      	mov	r0, r6
 800fa70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa74:	4e2e      	ldr	r6, [pc, #184]	; (800fb30 <_malloc_r+0xe4>)
 800fa76:	f000 f86d 	bl	800fb54 <__malloc_lock>
 800fa7a:	6833      	ldr	r3, [r6, #0]
 800fa7c:	461c      	mov	r4, r3
 800fa7e:	bb34      	cbnz	r4, 800face <_malloc_r+0x82>
 800fa80:	4629      	mov	r1, r5
 800fa82:	4638      	mov	r0, r7
 800fa84:	f7ff ffc2 	bl	800fa0c <sbrk_aligned>
 800fa88:	1c43      	adds	r3, r0, #1
 800fa8a:	4604      	mov	r4, r0
 800fa8c:	d14d      	bne.n	800fb2a <_malloc_r+0xde>
 800fa8e:	6834      	ldr	r4, [r6, #0]
 800fa90:	4626      	mov	r6, r4
 800fa92:	2e00      	cmp	r6, #0
 800fa94:	d140      	bne.n	800fb18 <_malloc_r+0xcc>
 800fa96:	6823      	ldr	r3, [r4, #0]
 800fa98:	4631      	mov	r1, r6
 800fa9a:	4638      	mov	r0, r7
 800fa9c:	eb04 0803 	add.w	r8, r4, r3
 800faa0:	f000 f848 	bl	800fb34 <_sbrk_r>
 800faa4:	4580      	cmp	r8, r0
 800faa6:	d13a      	bne.n	800fb1e <_malloc_r+0xd2>
 800faa8:	6821      	ldr	r1, [r4, #0]
 800faaa:	3503      	adds	r5, #3
 800faac:	1a6d      	subs	r5, r5, r1
 800faae:	f025 0503 	bic.w	r5, r5, #3
 800fab2:	3508      	adds	r5, #8
 800fab4:	2d0c      	cmp	r5, #12
 800fab6:	bf38      	it	cc
 800fab8:	250c      	movcc	r5, #12
 800faba:	4629      	mov	r1, r5
 800fabc:	4638      	mov	r0, r7
 800fabe:	f7ff ffa5 	bl	800fa0c <sbrk_aligned>
 800fac2:	3001      	adds	r0, #1
 800fac4:	d02b      	beq.n	800fb1e <_malloc_r+0xd2>
 800fac6:	6823      	ldr	r3, [r4, #0]
 800fac8:	442b      	add	r3, r5
 800faca:	6023      	str	r3, [r4, #0]
 800facc:	e00e      	b.n	800faec <_malloc_r+0xa0>
 800face:	6822      	ldr	r2, [r4, #0]
 800fad0:	1b52      	subs	r2, r2, r5
 800fad2:	d41e      	bmi.n	800fb12 <_malloc_r+0xc6>
 800fad4:	2a0b      	cmp	r2, #11
 800fad6:	d916      	bls.n	800fb06 <_malloc_r+0xba>
 800fad8:	1961      	adds	r1, r4, r5
 800fada:	42a3      	cmp	r3, r4
 800fadc:	6025      	str	r5, [r4, #0]
 800fade:	bf18      	it	ne
 800fae0:	6059      	strne	r1, [r3, #4]
 800fae2:	6863      	ldr	r3, [r4, #4]
 800fae4:	bf08      	it	eq
 800fae6:	6031      	streq	r1, [r6, #0]
 800fae8:	5162      	str	r2, [r4, r5]
 800faea:	604b      	str	r3, [r1, #4]
 800faec:	4638      	mov	r0, r7
 800faee:	f104 060b 	add.w	r6, r4, #11
 800faf2:	f000 f835 	bl	800fb60 <__malloc_unlock>
 800faf6:	f026 0607 	bic.w	r6, r6, #7
 800fafa:	1d23      	adds	r3, r4, #4
 800fafc:	1af2      	subs	r2, r6, r3
 800fafe:	d0b6      	beq.n	800fa6e <_malloc_r+0x22>
 800fb00:	1b9b      	subs	r3, r3, r6
 800fb02:	50a3      	str	r3, [r4, r2]
 800fb04:	e7b3      	b.n	800fa6e <_malloc_r+0x22>
 800fb06:	6862      	ldr	r2, [r4, #4]
 800fb08:	42a3      	cmp	r3, r4
 800fb0a:	bf0c      	ite	eq
 800fb0c:	6032      	streq	r2, [r6, #0]
 800fb0e:	605a      	strne	r2, [r3, #4]
 800fb10:	e7ec      	b.n	800faec <_malloc_r+0xa0>
 800fb12:	4623      	mov	r3, r4
 800fb14:	6864      	ldr	r4, [r4, #4]
 800fb16:	e7b2      	b.n	800fa7e <_malloc_r+0x32>
 800fb18:	4634      	mov	r4, r6
 800fb1a:	6876      	ldr	r6, [r6, #4]
 800fb1c:	e7b9      	b.n	800fa92 <_malloc_r+0x46>
 800fb1e:	230c      	movs	r3, #12
 800fb20:	603b      	str	r3, [r7, #0]
 800fb22:	4638      	mov	r0, r7
 800fb24:	f000 f81c 	bl	800fb60 <__malloc_unlock>
 800fb28:	e7a1      	b.n	800fa6e <_malloc_r+0x22>
 800fb2a:	6025      	str	r5, [r4, #0]
 800fb2c:	e7de      	b.n	800faec <_malloc_r+0xa0>
 800fb2e:	bf00      	nop
 800fb30:	20001e60 	.word	0x20001e60

0800fb34 <_sbrk_r>:
 800fb34:	b538      	push	{r3, r4, r5, lr}
 800fb36:	4d06      	ldr	r5, [pc, #24]	; (800fb50 <_sbrk_r+0x1c>)
 800fb38:	2300      	movs	r3, #0
 800fb3a:	4604      	mov	r4, r0
 800fb3c:	4608      	mov	r0, r1
 800fb3e:	602b      	str	r3, [r5, #0]
 800fb40:	f7f2 fa54 	bl	8001fec <_sbrk>
 800fb44:	1c43      	adds	r3, r0, #1
 800fb46:	d102      	bne.n	800fb4e <_sbrk_r+0x1a>
 800fb48:	682b      	ldr	r3, [r5, #0]
 800fb4a:	b103      	cbz	r3, 800fb4e <_sbrk_r+0x1a>
 800fb4c:	6023      	str	r3, [r4, #0]
 800fb4e:	bd38      	pop	{r3, r4, r5, pc}
 800fb50:	20001e68 	.word	0x20001e68

0800fb54 <__malloc_lock>:
 800fb54:	4801      	ldr	r0, [pc, #4]	; (800fb5c <__malloc_lock+0x8>)
 800fb56:	f000 b809 	b.w	800fb6c <__retarget_lock_acquire_recursive>
 800fb5a:	bf00      	nop
 800fb5c:	20001e6c 	.word	0x20001e6c

0800fb60 <__malloc_unlock>:
 800fb60:	4801      	ldr	r0, [pc, #4]	; (800fb68 <__malloc_unlock+0x8>)
 800fb62:	f000 b804 	b.w	800fb6e <__retarget_lock_release_recursive>
 800fb66:	bf00      	nop
 800fb68:	20001e6c 	.word	0x20001e6c

0800fb6c <__retarget_lock_acquire_recursive>:
 800fb6c:	4770      	bx	lr

0800fb6e <__retarget_lock_release_recursive>:
 800fb6e:	4770      	bx	lr

0800fb70 <_init>:
 800fb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb72:	bf00      	nop
 800fb74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb76:	bc08      	pop	{r3}
 800fb78:	469e      	mov	lr, r3
 800fb7a:	4770      	bx	lr

0800fb7c <_fini>:
 800fb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb7e:	bf00      	nop
 800fb80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb82:	bc08      	pop	{r3}
 800fb84:	469e      	mov	lr, r3
 800fb86:	4770      	bx	lr
