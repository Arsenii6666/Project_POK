
DriverSetup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005240  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080053d8  080053d8  000153d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053e0  080053e0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080053e0  080053e0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053e0  080053e0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053e0  080053e0  000153e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053e4  080053e4  000153e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080053e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  20000078  08005460  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  08005460  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140b0  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032e0  00000000  00000000  00034158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  00037438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  000385d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f8f  00000000  00000000  00039618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000155c8  00000000  00000000  000515a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091dce  00000000  00000000  00066b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f893d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000489c  00000000  00000000  000f8990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080053c0 	.word	0x080053c0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	080053c0 	.word	0x080053c0

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
	HAL_Init();
 80001de:	f001 f9e1 	bl	80015a4 <HAL_Init>

	MX_GPIO_Init();
 80001e2:	f000 f8f1 	bl	80003c8 <MX_GPIO_Init>
	MX_I2C1_Init();
 80001e6:	f000 f82d 	bl	8000244 <MX_I2C1_Init>
	MX_I2S2_Init();
 80001ea:	f000 f859 	bl	80002a0 <MX_I2S2_Init>
	MX_I2S3_Init();
 80001ee:	f000 f885 	bl	80002fc <MX_I2S3_Init>
	MX_SPI1_Init();
 80001f2:	f000 f8b3 	bl	800035c <MX_SPI1_Init>

	int16_t buffer[3] = {0, 0, 0};
 80001f6:	2300      	movs	r3, #0
 80001f8:	803b      	strh	r3, [r7, #0]
 80001fa:	2300      	movs	r3, #0
 80001fc:	807b      	strh	r3, [r7, #2]
 80001fe:	2300      	movs	r3, #0
 8000200:	80bb      	strh	r3, [r7, #4]
	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */
	BSP_ACCELERO_Init();
 8000202:	f001 f8e1 	bl	80013c8 <BSP_ACCELERO_Init>
	  while (1)
	  {
	    /* USER CODE END WHILE */

	    BSP_ACCELERO_GetXYZ(buffer);
 8000206:	463b      	mov	r3, r7
 8000208:	4618      	mov	r0, r3
 800020a:	f001 f99f 	bl	800154c <BSP_ACCELERO_GetXYZ>
	          if (buffer[2] > 0){
 800020e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000212:	2b00      	cmp	r3, #0
 8000214:	dd06      	ble.n	8000224 <main+0x4c>
	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000216:	2200      	movs	r2, #0
 8000218:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800021c:	4808      	ldr	r0, [pc, #32]	; (8000240 <main+0x68>)
 800021e:	f001 fdad 	bl	8001d7c <HAL_GPIO_WritePin>
 8000222:	e005      	b.n	8000230 <main+0x58>
	           }
	          else{
	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000224:	2201      	movs	r2, #1
 8000226:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800022a:	4805      	ldr	r0, [pc, #20]	; (8000240 <main+0x68>)
 800022c:	f001 fda6 	bl	8001d7c <HAL_GPIO_WritePin>
	          }
	   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000236:	4802      	ldr	r0, [pc, #8]	; (8000240 <main+0x68>)
 8000238:	f001 fda0 	bl	8001d7c <HAL_GPIO_WritePin>
	    BSP_ACCELERO_GetXYZ(buffer);
 800023c:	e7e3      	b.n	8000206 <main+0x2e>
 800023e:	bf00      	nop
 8000240:	40020c00 	.word	0x40020c00

08000244 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000248:	4b12      	ldr	r3, [pc, #72]	; (8000294 <MX_I2C1_Init+0x50>)
 800024a:	4a13      	ldr	r2, [pc, #76]	; (8000298 <MX_I2C1_Init+0x54>)
 800024c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800024e:	4b11      	ldr	r3, [pc, #68]	; (8000294 <MX_I2C1_Init+0x50>)
 8000250:	4a12      	ldr	r2, [pc, #72]	; (800029c <MX_I2C1_Init+0x58>)
 8000252:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <MX_I2C1_Init+0x50>)
 8000256:	2200      	movs	r2, #0
 8000258:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <MX_I2C1_Init+0x50>)
 800025c:	2200      	movs	r2, #0
 800025e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000260:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <MX_I2C1_Init+0x50>)
 8000262:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000266:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000268:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <MX_I2C1_Init+0x50>)
 800026a:	2200      	movs	r2, #0
 800026c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800026e:	4b09      	ldr	r3, [pc, #36]	; (8000294 <MX_I2C1_Init+0x50>)
 8000270:	2200      	movs	r2, #0
 8000272:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000274:	4b07      	ldr	r3, [pc, #28]	; (8000294 <MX_I2C1_Init+0x50>)
 8000276:	2200      	movs	r2, #0
 8000278:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <MX_I2C1_Init+0x50>)
 800027c:	2200      	movs	r2, #0
 800027e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000280:	4804      	ldr	r0, [pc, #16]	; (8000294 <MX_I2C1_Init+0x50>)
 8000282:	f002 febf 	bl	8003004 <HAL_I2C_Init>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800028c:	f000 f976 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000094 	.word	0x20000094
 8000298:	40005400 	.word	0x40005400
 800029c:	000186a0 	.word	0x000186a0

080002a0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80002a4:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <MX_I2S2_Init+0x50>)
 80002a6:	4a13      	ldr	r2, [pc, #76]	; (80002f4 <MX_I2S2_Init+0x54>)
 80002a8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80002aa:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <MX_I2S2_Init+0x50>)
 80002ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002b0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80002b2:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <MX_I2S2_Init+0x50>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80002b8:	4b0d      	ldr	r3, [pc, #52]	; (80002f0 <MX_I2S2_Init+0x50>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80002be:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <MX_I2S2_Init+0x50>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80002c4:	4b0a      	ldr	r3, [pc, #40]	; (80002f0 <MX_I2S2_Init+0x50>)
 80002c6:	4a0c      	ldr	r2, [pc, #48]	; (80002f8 <MX_I2S2_Init+0x58>)
 80002c8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80002ca:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <MX_I2S2_Init+0x50>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80002d0:	4b07      	ldr	r3, [pc, #28]	; (80002f0 <MX_I2S2_Init+0x50>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80002d6:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <MX_I2S2_Init+0x50>)
 80002d8:	2201      	movs	r2, #1
 80002da:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <MX_I2S2_Init+0x50>)
 80002de:	f003 fe8f 	bl	8004000 <HAL_I2S_Init>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80002e8:	f000 f948 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	200000e8 	.word	0x200000e8
 80002f4:	40003800 	.word	0x40003800
 80002f8:	00017700 	.word	0x00017700

080002fc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000300:	4b13      	ldr	r3, [pc, #76]	; (8000350 <MX_I2S3_Init+0x54>)
 8000302:	4a14      	ldr	r2, [pc, #80]	; (8000354 <MX_I2S3_Init+0x58>)
 8000304:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000306:	4b12      	ldr	r3, [pc, #72]	; (8000350 <MX_I2S3_Init+0x54>)
 8000308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800030c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800030e:	4b10      	ldr	r3, [pc, #64]	; (8000350 <MX_I2S3_Init+0x54>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000314:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <MX_I2S3_Init+0x54>)
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800031a:	4b0d      	ldr	r3, [pc, #52]	; (8000350 <MX_I2S3_Init+0x54>)
 800031c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000320:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000322:	4b0b      	ldr	r3, [pc, #44]	; (8000350 <MX_I2S3_Init+0x54>)
 8000324:	4a0c      	ldr	r2, [pc, #48]	; (8000358 <MX_I2S3_Init+0x5c>)
 8000326:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000328:	4b09      	ldr	r3, [pc, #36]	; (8000350 <MX_I2S3_Init+0x54>)
 800032a:	2200      	movs	r2, #0
 800032c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800032e:	4b08      	ldr	r3, [pc, #32]	; (8000350 <MX_I2S3_Init+0x54>)
 8000330:	2200      	movs	r2, #0
 8000332:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <MX_I2S3_Init+0x54>)
 8000336:	2200      	movs	r2, #0
 8000338:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800033a:	4805      	ldr	r0, [pc, #20]	; (8000350 <MX_I2S3_Init+0x54>)
 800033c:	f003 fe60 	bl	8004000 <HAL_I2S_Init>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000346:	f000 f919 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000130 	.word	0x20000130
 8000354:	40003c00 	.word	0x40003c00
 8000358:	00017700 	.word	0x00017700

0800035c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000360:	4b17      	ldr	r3, [pc, #92]	; (80003c0 <MX_SPI1_Init+0x64>)
 8000362:	4a18      	ldr	r2, [pc, #96]	; (80003c4 <MX_SPI1_Init+0x68>)
 8000364:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000366:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <MX_SPI1_Init+0x64>)
 8000368:	f44f 7282 	mov.w	r2, #260	; 0x104
 800036c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800036e:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <MX_SPI1_Init+0x64>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000374:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <MX_SPI1_Init+0x64>)
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800037a:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <MX_SPI1_Init+0x64>)
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000380:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <MX_SPI1_Init+0x64>)
 8000382:	2200      	movs	r2, #0
 8000384:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <MX_SPI1_Init+0x64>)
 8000388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800038c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800038e:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <MX_SPI1_Init+0x64>)
 8000390:	2200      	movs	r2, #0
 8000392:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000394:	4b0a      	ldr	r3, [pc, #40]	; (80003c0 <MX_SPI1_Init+0x64>)
 8000396:	2200      	movs	r2, #0
 8000398:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800039a:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <MX_SPI1_Init+0x64>)
 800039c:	2200      	movs	r2, #0
 800039e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003a0:	4b07      	ldr	r3, [pc, #28]	; (80003c0 <MX_SPI1_Init+0x64>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003a6:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <MX_SPI1_Init+0x64>)
 80003a8:	220a      	movs	r2, #10
 80003aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003ac:	4804      	ldr	r0, [pc, #16]	; (80003c0 <MX_SPI1_Init+0x64>)
 80003ae:	f004 fb47 	bl	8004a40 <HAL_SPI_Init>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003b8:	f000 f8e0 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20000178 	.word	0x20000178
 80003c4:	40013000 	.word	0x40013000

080003c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b08c      	sub	sp, #48	; 0x30
 80003cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ce:	f107 031c 	add.w	r3, r7, #28
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
 80003dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003de:	2300      	movs	r3, #0
 80003e0:	61bb      	str	r3, [r7, #24]
 80003e2:	4b61      	ldr	r3, [pc, #388]	; (8000568 <MX_GPIO_Init+0x1a0>)
 80003e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e6:	4a60      	ldr	r2, [pc, #384]	; (8000568 <MX_GPIO_Init+0x1a0>)
 80003e8:	f043 0310 	orr.w	r3, r3, #16
 80003ec:	6313      	str	r3, [r2, #48]	; 0x30
 80003ee:	4b5e      	ldr	r3, [pc, #376]	; (8000568 <MX_GPIO_Init+0x1a0>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f2:	f003 0310 	and.w	r3, r3, #16
 80003f6:	61bb      	str	r3, [r7, #24]
 80003f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003fa:	2300      	movs	r3, #0
 80003fc:	617b      	str	r3, [r7, #20]
 80003fe:	4b5a      	ldr	r3, [pc, #360]	; (8000568 <MX_GPIO_Init+0x1a0>)
 8000400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000402:	4a59      	ldr	r2, [pc, #356]	; (8000568 <MX_GPIO_Init+0x1a0>)
 8000404:	f043 0304 	orr.w	r3, r3, #4
 8000408:	6313      	str	r3, [r2, #48]	; 0x30
 800040a:	4b57      	ldr	r3, [pc, #348]	; (8000568 <MX_GPIO_Init+0x1a0>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040e:	f003 0304 	and.w	r3, r3, #4
 8000412:	617b      	str	r3, [r7, #20]
 8000414:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000416:	2300      	movs	r3, #0
 8000418:	613b      	str	r3, [r7, #16]
 800041a:	4b53      	ldr	r3, [pc, #332]	; (8000568 <MX_GPIO_Init+0x1a0>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041e:	4a52      	ldr	r2, [pc, #328]	; (8000568 <MX_GPIO_Init+0x1a0>)
 8000420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000424:	6313      	str	r3, [r2, #48]	; 0x30
 8000426:	4b50      	ldr	r3, [pc, #320]	; (8000568 <MX_GPIO_Init+0x1a0>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800042e:	613b      	str	r3, [r7, #16]
 8000430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000432:	2300      	movs	r3, #0
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	4b4c      	ldr	r3, [pc, #304]	; (8000568 <MX_GPIO_Init+0x1a0>)
 8000438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043a:	4a4b      	ldr	r2, [pc, #300]	; (8000568 <MX_GPIO_Init+0x1a0>)
 800043c:	f043 0301 	orr.w	r3, r3, #1
 8000440:	6313      	str	r3, [r2, #48]	; 0x30
 8000442:	4b49      	ldr	r3, [pc, #292]	; (8000568 <MX_GPIO_Init+0x1a0>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044e:	2300      	movs	r3, #0
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	4b45      	ldr	r3, [pc, #276]	; (8000568 <MX_GPIO_Init+0x1a0>)
 8000454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000456:	4a44      	ldr	r2, [pc, #272]	; (8000568 <MX_GPIO_Init+0x1a0>)
 8000458:	f043 0302 	orr.w	r3, r3, #2
 800045c:	6313      	str	r3, [r2, #48]	; 0x30
 800045e:	4b42      	ldr	r3, [pc, #264]	; (8000568 <MX_GPIO_Init+0x1a0>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	f003 0302 	and.w	r3, r3, #2
 8000466:	60bb      	str	r3, [r7, #8]
 8000468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800046a:	2300      	movs	r3, #0
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	4b3e      	ldr	r3, [pc, #248]	; (8000568 <MX_GPIO_Init+0x1a0>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000472:	4a3d      	ldr	r2, [pc, #244]	; (8000568 <MX_GPIO_Init+0x1a0>)
 8000474:	f043 0308 	orr.w	r3, r3, #8
 8000478:	6313      	str	r3, [r2, #48]	; 0x30
 800047a:	4b3b      	ldr	r3, [pc, #236]	; (8000568 <MX_GPIO_Init+0x1a0>)
 800047c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047e:	f003 0308 	and.w	r3, r3, #8
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	2108      	movs	r1, #8
 800048a:	4838      	ldr	r0, [pc, #224]	; (800056c <MX_GPIO_Init+0x1a4>)
 800048c:	f001 fc76 	bl	8001d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000490:	2201      	movs	r2, #1
 8000492:	2101      	movs	r1, #1
 8000494:	4836      	ldr	r0, [pc, #216]	; (8000570 <MX_GPIO_Init+0x1a8>)
 8000496:	f001 fc71 	bl	8001d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800049a:	2200      	movs	r2, #0
 800049c:	f24f 0110 	movw	r1, #61456	; 0xf010
 80004a0:	4834      	ldr	r0, [pc, #208]	; (8000574 <MX_GPIO_Init+0x1ac>)
 80004a2:	f001 fc6b 	bl	8001d7c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80004a6:	2304      	movs	r3, #4
 80004a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004aa:	2300      	movs	r3, #0
 80004ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80004b2:	f107 031c 	add.w	r3, r7, #28
 80004b6:	4619      	mov	r1, r3
 80004b8:	482c      	ldr	r0, [pc, #176]	; (800056c <MX_GPIO_Init+0x1a4>)
 80004ba:	f001 f9f7 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80004be:	2308      	movs	r3, #8
 80004c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c2:	2301      	movs	r3, #1
 80004c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c6:	2300      	movs	r3, #0
 80004c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ca:	2300      	movs	r3, #0
 80004cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80004ce:	f107 031c 	add.w	r3, r7, #28
 80004d2:	4619      	mov	r1, r3
 80004d4:	4825      	ldr	r0, [pc, #148]	; (800056c <MX_GPIO_Init+0x1a4>)
 80004d6:	f001 f9e9 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80004da:	2332      	movs	r3, #50	; 0x32
 80004dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004de:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80004e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004e8:	f107 031c 	add.w	r3, r7, #28
 80004ec:	4619      	mov	r1, r3
 80004ee:	481f      	ldr	r0, [pc, #124]	; (800056c <MX_GPIO_Init+0x1a4>)
 80004f0:	f001 f9dc 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80004f4:	2301      	movs	r3, #1
 80004f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f8:	2301      	movs	r3, #1
 80004fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fc:	2300      	movs	r3, #0
 80004fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000500:	2300      	movs	r3, #0
 8000502:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000504:	f107 031c 	add.w	r3, r7, #28
 8000508:	4619      	mov	r1, r3
 800050a:	4819      	ldr	r0, [pc, #100]	; (8000570 <MX_GPIO_Init+0x1a8>)
 800050c:	f001 f9ce 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000510:	2301      	movs	r3, #1
 8000512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000514:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000518:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051e:	f107 031c 	add.w	r3, r7, #28
 8000522:	4619      	mov	r1, r3
 8000524:	4814      	ldr	r0, [pc, #80]	; (8000578 <MX_GPIO_Init+0x1b0>)
 8000526:	f001 f9c1 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800052a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800052e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000530:	2301      	movs	r3, #1
 8000532:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000538:	2300      	movs	r3, #0
 800053a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800053c:	f107 031c 	add.w	r3, r7, #28
 8000540:	4619      	mov	r1, r3
 8000542:	480c      	ldr	r0, [pc, #48]	; (8000574 <MX_GPIO_Init+0x1ac>)
 8000544:	f001 f9b2 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000548:	2320      	movs	r3, #32
 800054a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000554:	f107 031c 	add.w	r3, r7, #28
 8000558:	4619      	mov	r1, r3
 800055a:	4806      	ldr	r0, [pc, #24]	; (8000574 <MX_GPIO_Init+0x1ac>)
 800055c:	f001 f9a6 	bl	80018ac <HAL_GPIO_Init>

}
 8000560:	bf00      	nop
 8000562:	3730      	adds	r7, #48	; 0x30
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40023800 	.word	0x40023800
 800056c:	40021000 	.word	0x40021000
 8000570:	40020800 	.word	0x40020800
 8000574:	40020c00 	.word	0x40020c00
 8000578:	40020000 	.word	0x40020000

0800057c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000580:	b672      	cpsid	i
}
 8000582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000584:	e7fe      	b.n	8000584 <Error_Handler+0x8>
	...

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <HAL_MspInit+0x4c>)
 8000594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000596:	4a0f      	ldr	r2, [pc, #60]	; (80005d4 <HAL_MspInit+0x4c>)
 8000598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059c:	6453      	str	r3, [r2, #68]	; 0x44
 800059e:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <HAL_MspInit+0x4c>)
 80005a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <HAL_MspInit+0x4c>)
 80005b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b2:	4a08      	ldr	r2, [pc, #32]	; (80005d4 <HAL_MspInit+0x4c>)
 80005b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b8:	6413      	str	r3, [r2, #64]	; 0x40
 80005ba:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_MspInit+0x4c>)
 80005bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005c6:	2007      	movs	r0, #7
 80005c8:	f001 f92e 	bl	8001828 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40023800 	.word	0x40023800

080005d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	; 0x28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a19      	ldr	r2, [pc, #100]	; (800065c <HAL_I2C_MspInit+0x84>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d12c      	bne.n	8000654 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
 80005fe:	4b18      	ldr	r3, [pc, #96]	; (8000660 <HAL_I2C_MspInit+0x88>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a17      	ldr	r2, [pc, #92]	; (8000660 <HAL_I2C_MspInit+0x88>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <HAL_I2C_MspInit+0x88>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000616:	f44f 7310 	mov.w	r3, #576	; 0x240
 800061a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800061c:	2312      	movs	r3, #18
 800061e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000620:	2301      	movs	r3, #1
 8000622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000624:	2300      	movs	r3, #0
 8000626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000628:	2304      	movs	r3, #4
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	480c      	ldr	r0, [pc, #48]	; (8000664 <HAL_I2C_MspInit+0x8c>)
 8000634:	f001 f93a 	bl	80018ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <HAL_I2C_MspInit+0x88>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <HAL_I2C_MspInit+0x88>)
 8000642:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <HAL_I2C_MspInit+0x88>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000654:	bf00      	nop
 8000656:	3728      	adds	r7, #40	; 0x28
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40005400 	.word	0x40005400
 8000660:	40023800 	.word	0x40023800
 8000664:	40020400 	.word	0x40020400

08000668 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <HAL_I2C_MspDeInit+0x38>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d10e      	bne.n	8000698 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <HAL_I2C_MspDeInit+0x3c>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	4a09      	ldr	r2, [pc, #36]	; (80006a4 <HAL_I2C_MspDeInit+0x3c>)
 8000680:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000684:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 8000686:	2140      	movs	r1, #64	; 0x40
 8000688:	4807      	ldr	r0, [pc, #28]	; (80006a8 <HAL_I2C_MspDeInit+0x40>)
 800068a:	f001 fa93 	bl	8001bb4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 800068e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <HAL_I2C_MspDeInit+0x40>)
 8000694:	f001 fa8e 	bl	8001bb4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40005400 	.word	0x40005400
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40020400 	.word	0x40020400

080006ac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08e      	sub	sp, #56	; 0x38
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a59      	ldr	r2, [pc, #356]	; (8000830 <HAL_I2S_MspInit+0x184>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d15b      	bne.n	8000786 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	623b      	str	r3, [r7, #32]
 80006d2:	4b58      	ldr	r3, [pc, #352]	; (8000834 <HAL_I2S_MspInit+0x188>)
 80006d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d6:	4a57      	ldr	r2, [pc, #348]	; (8000834 <HAL_I2S_MspInit+0x188>)
 80006d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006dc:	6413      	str	r3, [r2, #64]	; 0x40
 80006de:	4b55      	ldr	r3, [pc, #340]	; (8000834 <HAL_I2S_MspInit+0x188>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e6:	623b      	str	r3, [r7, #32]
 80006e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
 80006ee:	4b51      	ldr	r3, [pc, #324]	; (8000834 <HAL_I2S_MspInit+0x188>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a50      	ldr	r2, [pc, #320]	; (8000834 <HAL_I2S_MspInit+0x188>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b4e      	ldr	r3, [pc, #312]	; (8000834 <HAL_I2S_MspInit+0x188>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	61fb      	str	r3, [r7, #28]
 8000704:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
 800070a:	4b4a      	ldr	r3, [pc, #296]	; (8000834 <HAL_I2S_MspInit+0x188>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a49      	ldr	r2, [pc, #292]	; (8000834 <HAL_I2S_MspInit+0x188>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b47      	ldr	r3, [pc, #284]	; (8000834 <HAL_I2S_MspInit+0x188>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000722:	2304      	movs	r3, #4
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000726:	2302      	movs	r3, #2
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000732:	2306      	movs	r3, #6
 8000734:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073a:	4619      	mov	r1, r3
 800073c:	483e      	ldr	r0, [pc, #248]	; (8000838 <HAL_I2S_MspInit+0x18c>)
 800073e:	f001 f8b5 	bl	80018ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000742:	2308      	movs	r3, #8
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000746:	2302      	movs	r3, #2
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000752:	2305      	movs	r3, #5
 8000754:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075a:	4619      	mov	r1, r3
 800075c:	4836      	ldr	r0, [pc, #216]	; (8000838 <HAL_I2S_MspInit+0x18c>)
 800075e:	f001 f8a5 	bl	80018ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000762:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000768:	2302      	movs	r3, #2
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000774:	2305      	movs	r3, #5
 8000776:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077c:	4619      	mov	r1, r3
 800077e:	482f      	ldr	r0, [pc, #188]	; (800083c <HAL_I2S_MspInit+0x190>)
 8000780:	f001 f894 	bl	80018ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000784:	e04f      	b.n	8000826 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a2d      	ldr	r2, [pc, #180]	; (8000840 <HAL_I2S_MspInit+0x194>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d14a      	bne.n	8000826 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <HAL_I2S_MspInit+0x188>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	4a26      	ldr	r2, [pc, #152]	; (8000834 <HAL_I2S_MspInit+0x188>)
 800079a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800079e:	6413      	str	r3, [r2, #64]	; 0x40
 80007a0:	4b24      	ldr	r3, [pc, #144]	; (8000834 <HAL_I2S_MspInit+0x188>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	4b20      	ldr	r3, [pc, #128]	; (8000834 <HAL_I2S_MspInit+0x188>)
 80007b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b4:	4a1f      	ldr	r2, [pc, #124]	; (8000834 <HAL_I2S_MspInit+0x188>)
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	6313      	str	r3, [r2, #48]	; 0x30
 80007bc:	4b1d      	ldr	r3, [pc, #116]	; (8000834 <HAL_I2S_MspInit+0x188>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	4b19      	ldr	r3, [pc, #100]	; (8000834 <HAL_I2S_MspInit+0x188>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d0:	4a18      	ldr	r2, [pc, #96]	; (8000834 <HAL_I2S_MspInit+0x188>)
 80007d2:	f043 0304 	orr.w	r3, r3, #4
 80007d6:	6313      	str	r3, [r2, #48]	; 0x30
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <HAL_I2S_MspInit+0x188>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	f003 0304 	and.w	r3, r3, #4
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80007e4:	2310      	movs	r3, #16
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007f4:	2306      	movs	r3, #6
 80007f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fc:	4619      	mov	r1, r3
 80007fe:	4811      	ldr	r0, [pc, #68]	; (8000844 <HAL_I2S_MspInit+0x198>)
 8000800:	f001 f854 	bl	80018ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000804:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000816:	2306      	movs	r3, #6
 8000818:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081e:	4619      	mov	r1, r3
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <HAL_I2S_MspInit+0x18c>)
 8000822:	f001 f843 	bl	80018ac <HAL_GPIO_Init>
}
 8000826:	bf00      	nop
 8000828:	3738      	adds	r7, #56	; 0x38
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40003800 	.word	0x40003800
 8000834:	40023800 	.word	0x40023800
 8000838:	40020800 	.word	0x40020800
 800083c:	40020400 	.word	0x40020400
 8000840:	40003c00 	.word	0x40003c00
 8000844:	40020000 	.word	0x40020000

08000848 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a19      	ldr	r2, [pc, #100]	; (80008cc <HAL_SPI_MspInit+0x84>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d12b      	bne.n	80008c2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <HAL_SPI_MspInit+0x88>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <HAL_SPI_MspInit+0x88>)
 8000874:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000878:	6453      	str	r3, [r2, #68]	; 0x44
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <HAL_SPI_MspInit+0x88>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_SPI_MspInit+0x88>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <HAL_SPI_MspInit+0x88>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_SPI_MspInit+0x88>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008a2:	23e0      	movs	r3, #224	; 0xe0
 80008a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008b2:	2305      	movs	r3, #5
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <HAL_SPI_MspInit+0x8c>)
 80008be:	f000 fff5 	bl	80018ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008c2:	bf00      	nop
 80008c4:	3728      	adds	r7, #40	; 0x28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40013000 	.word	0x40013000
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020000 	.word	0x40020000

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <NMI_Handler+0x4>

080008de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <MemManage_Handler+0x4>

080008ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000924:	f000 fe90 	bl	8001648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}

0800092c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <OTG_FS_IRQHandler+0x10>)
 8000932:	f001 fa3c 	bl	8001dae <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000022c 	.word	0x2000022c

08000940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <SystemInit+0x20>)
 8000946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800094a:	4a05      	ldr	r2, [pc, #20]	; (8000960 <SystemInit+0x20>)
 800094c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800099c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800096a:	490e      	ldr	r1, [pc, #56]	; (80009a4 <LoopFillZerobss+0x1a>)

  ldr r2, =_sidata
 800096c:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000970:	e002      	b.n	8000978 <LoopCopyDataInit>

08000972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000976:	3304      	adds	r3, #4

08000978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800097c:	d3f9      	bcc.n	8000972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000980:	4c0b      	ldr	r4, [pc, #44]	; (80009b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000984:	e001      	b.n	800098a <LoopFillZerobss>

08000986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000988:	3204      	adds	r2, #4

0800098a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800098c:	d3fb      	bcc.n	8000986 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800098e:	f7ff ffd7 	bl	8000940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000992:	f004 fcf1 	bl	8005378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000996:	f7ff fc1f 	bl	80001d8 <main>
  bx  lr    
 800099a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800099c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80009a8:	080053e8 	.word	0x080053e8
  ldr r2, =_sbss
 80009ac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80009b0:	20000530 	.word	0x20000530

080009b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC_IRQHandler>

080009b6 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b084      	sub	sp, #16
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	4603      	mov	r3, r0
 80009be:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80009c0:	2300      	movs	r3, #0
 80009c2:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 80009c4:	f000 fc82 	bl	80012cc <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80009c8:	88fb      	ldrh	r3, [r7, #6]
 80009ca:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	461a      	mov	r2, r3
 80009d0:	2120      	movs	r1, #32
 80009d2:	2032      	movs	r0, #50	; 0x32
 80009d4:	f000 fcd2 	bl	800137c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 80009d8:	2300      	movs	r3, #0
 80009da:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	461a      	mov	r2, r3
 80009e0:	2123      	movs	r1, #35	; 0x23
 80009e2:	2032      	movs	r0, #50	; 0x32
 80009e4:	f000 fcca 	bl	800137c <COMPASSACCELERO_IO_Write>
}
 80009e8:	bf00      	nop
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000a04:	2300      	movs	r3, #0
 8000a06:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8000a08:	f000 fc60 	bl	80012cc <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 8000a0c:	210f      	movs	r1, #15
 8000a0e:	2032      	movs	r0, #50	; 0x32
 8000a10:	f000 fcc7 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000a14:	4603      	mov	r3, r0
 8000a16:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8000a18:	79fb      	ldrb	r3, [r7, #7]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8000a28:	2124      	movs	r1, #36	; 0x24
 8000a2a:	2032      	movs	r0, #50	; 0x32
 8000a2c:	f000 fcb9 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000a30:	4603      	mov	r3, r0
 8000a32:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a3a:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	2124      	movs	r1, #36	; 0x24
 8000a42:	2032      	movs	r0, #50	; 0x32
 8000a44:	f000 fc9a 	bl	800137c <COMPASSACCELERO_IO_Write>
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000a5a:	2121      	movs	r1, #33	; 0x21
 8000a5c:	2032      	movs	r0, #50	; 0x32
 8000a5e:	f000 fca0 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000a62:	4603      	mov	r3, r0
 8000a64:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
 8000a68:	f003 030c 	and.w	r3, r3, #12
 8000a6c:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8000a6e:	7bfa      	ldrb	r2, [r7, #15]
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	2121      	movs	r1, #33	; 0x21
 8000a7c:	2032      	movs	r0, #50	; 0x32
 8000a7e:	f000 fc7d 	bl	800137c <COMPASSACCELERO_IO_Write>
}
 8000a82:	bf00      	nop
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b084      	sub	sp, #16
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	4603      	mov	r3, r0
 8000a92:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000a94:	2121      	movs	r1, #33	; 0x21
 8000a96:	2032      	movs	r0, #50	; 0x32
 8000a98:	f000 fc83 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	f023 0308 	bic.w	r3, r3, #8
 8000aa6:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000aa8:	7bfa      	ldrb	r2, [r7, #15]
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	2121      	movs	r1, #33	; 0x21
 8000ab6:	2032      	movs	r0, #50	; 0x32
 8000ab8:	f000 fc60 	bl	800137c <COMPASSACCELERO_IO_Write>
}
 8000abc:	bf00      	nop
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8000acc:	2300      	movs	r3, #0
 8000ace:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8000ad8:	2123      	movs	r1, #35	; 0x23
 8000ada:	2032      	movs	r0, #50	; 0x32
 8000adc:	f000 fc61 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8000ae4:	2124      	movs	r1, #36	; 0x24
 8000ae6:	2032      	movs	r0, #50	; 0x32
 8000ae8:	f000 fc5b 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000aec:	4603      	mov	r3, r0
 8000aee:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8000af0:	2128      	movs	r1, #40	; 0x28
 8000af2:	2032      	movs	r0, #50	; 0x32
 8000af4:	f000 fc55 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000af8:	4603      	mov	r3, r0
 8000afa:	b25b      	sxtb	r3, r3
 8000afc:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8000afe:	2129      	movs	r1, #41	; 0x29
 8000b00:	2032      	movs	r0, #50	; 0x32
 8000b02:	f000 fc4e 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000b06:	4603      	mov	r3, r0
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8000b0c:	212a      	movs	r1, #42	; 0x2a
 8000b0e:	2032      	movs	r0, #50	; 0x32
 8000b10:	f000 fc47 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000b14:	4603      	mov	r3, r0
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 8000b1a:	212b      	movs	r1, #43	; 0x2b
 8000b1c:	2032      	movs	r0, #50	; 0x32
 8000b1e:	f000 fc40 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000b22:	4603      	mov	r3, r0
 8000b24:	b25b      	sxtb	r3, r3
 8000b26:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 8000b28:	212c      	movs	r1, #44	; 0x2c
 8000b2a:	2032      	movs	r0, #50	; 0x32
 8000b2c:	f000 fc39 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000b30:	4603      	mov	r3, r0
 8000b32:	b25b      	sxtb	r3, r3
 8000b34:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8000b36:	212d      	movs	r1, #45	; 0x2d
 8000b38:	2032      	movs	r0, #50	; 0x32
 8000b3a:	f000 fc32 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	b25b      	sxtb	r3, r3
 8000b42:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8000b44:	7d3b      	ldrb	r3, [r7, #20]
 8000b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d123      	bne.n	8000b96 <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	77fb      	strb	r3, [r7, #31]
 8000b52:	e01c      	b.n	8000b8e <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000b54:	7ffb      	ldrb	r3, [r7, #31]
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	3301      	adds	r3, #1
 8000b5a:	3320      	adds	r3, #32
 8000b5c:	443b      	add	r3, r7
 8000b5e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	021b      	lsls	r3, r3, #8
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	7ffb      	ldrb	r3, [r7, #31]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	3320      	adds	r3, #32
 8000b6e:	443b      	add	r3, r7
 8000b70:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	4413      	add	r3, r2
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	7ffb      	ldrb	r3, [r7, #31]
 8000b7c:	b212      	sxth	r2, r2
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	3320      	adds	r3, #32
 8000b82:	443b      	add	r3, r7
 8000b84:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000b88:	7ffb      	ldrb	r3, [r7, #31]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	77fb      	strb	r3, [r7, #31]
 8000b8e:	7ffb      	ldrb	r3, [r7, #31]
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d9df      	bls.n	8000b54 <LSM303AGR_AccReadXYZ+0x90>
 8000b94:	e022      	b.n	8000bdc <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	77fb      	strb	r3, [r7, #31]
 8000b9a:	e01c      	b.n	8000bd6 <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8000b9c:	7ffb      	ldrb	r3, [r7, #31]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	3320      	adds	r3, #32
 8000ba2:	443b      	add	r3, r7
 8000ba4:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	021b      	lsls	r3, r3, #8
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	7ffb      	ldrb	r3, [r7, #31]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	3320      	adds	r3, #32
 8000bb6:	443b      	add	r3, r7
 8000bb8:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	4413      	add	r3, r2
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	7ffb      	ldrb	r3, [r7, #31]
 8000bc4:	b212      	sxth	r2, r2
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	3320      	adds	r3, #32
 8000bca:	443b      	add	r3, r7
 8000bcc:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000bd0:	7ffb      	ldrb	r3, [r7, #31]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	77fb      	strb	r3, [r7, #31]
 8000bd6:	7ffb      	ldrb	r3, [r7, #31]
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d9df      	bls.n	8000b9c <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8000bdc:	7d3b      	ldrb	r3, [r7, #20]
 8000bde:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000be2:	2b30      	cmp	r3, #48	; 0x30
 8000be4:	d013      	beq.n	8000c0e <LSM303AGR_AccReadXYZ+0x14a>
 8000be6:	2b30      	cmp	r3, #48	; 0x30
 8000be8:	dc14      	bgt.n	8000c14 <LSM303AGR_AccReadXYZ+0x150>
 8000bea:	2b20      	cmp	r3, #32
 8000bec:	d00c      	beq.n	8000c08 <LSM303AGR_AccReadXYZ+0x144>
 8000bee:	2b20      	cmp	r3, #32
 8000bf0:	dc10      	bgt.n	8000c14 <LSM303AGR_AccReadXYZ+0x150>
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d002      	beq.n	8000bfc <LSM303AGR_AccReadXYZ+0x138>
 8000bf6:	2b10      	cmp	r3, #16
 8000bf8:	d003      	beq.n	8000c02 <LSM303AGR_AccReadXYZ+0x13e>
 8000bfa:	e00b      	b.n	8000c14 <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	77bb      	strb	r3, [r7, #30]
    break;
 8000c00:	e008      	b.n	8000c14 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 8000c02:	2302      	movs	r3, #2
 8000c04:	77bb      	strb	r3, [r7, #30]
    break;
 8000c06:	e005      	b.n	8000c14 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 8000c08:	2304      	movs	r3, #4
 8000c0a:	77bb      	strb	r3, [r7, #30]
    break;
 8000c0c:	e002      	b.n	8000c14 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 8000c0e:	230c      	movs	r3, #12
 8000c10:	77bb      	strb	r3, [r7, #30]
    break;
 8000c12:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000c14:	2300      	movs	r3, #0
 8000c16:	77fb      	strb	r3, [r7, #31]
 8000c18:	e014      	b.n	8000c44 <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000c1a:	7ffb      	ldrb	r3, [r7, #31]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	3320      	adds	r3, #32
 8000c20:	443b      	add	r3, r7
 8000c22:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	7fbb      	ldrb	r3, [r7, #30]
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	fb12 f303 	smulbb	r3, r2, r3
 8000c30:	b299      	uxth	r1, r3
 8000c32:	7ffb      	ldrb	r3, [r7, #31]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	b20a      	sxth	r2, r1
 8000c3c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000c3e:	7ffb      	ldrb	r3, [r7, #31]
 8000c40:	3301      	adds	r3, #1
 8000c42:	77fb      	strb	r3, [r7, #31]
 8000c44:	7ffb      	ldrb	r3, [r7, #31]
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d9e7      	bls.n	8000c1a <LSM303AGR_AccReadXYZ+0x156>
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	bf00      	nop
 8000c4e:	3720      	adds	r7, #32
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000c62:	2121      	movs	r1, #33	; 0x21
 8000c64:	2032      	movs	r0, #50	; 0x32
 8000c66:	f000 fb9c 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	f023 0304 	bic.w	r3, r3, #4
 8000c74:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8000c76:	7bfa      	ldrb	r2, [r7, #15]
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	461a      	mov	r2, r3
 8000c82:	2121      	movs	r1, #33	; 0x21
 8000c84:	2032      	movs	r0, #50	; 0x32
 8000c86:	f000 fb79 	bl	800137c <COMPASSACCELERO_IO_Write>
}
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b084      	sub	sp, #16
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	4603      	mov	r3, r0
 8000c9a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 8000ca0:	2122      	movs	r1, #34	; 0x22
 8000ca2:	2032      	movs	r0, #50	; 0x32
 8000ca4:	f000 fb7d 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 8000cac:	7bfa      	ldrb	r2, [r7, #15]
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	2122      	movs	r1, #34	; 0x22
 8000cba:	2032      	movs	r0, #50	; 0x32
 8000cbc:	f000 fb5e 	bl	800137c <COMPASSACCELERO_IO_Write>
}
 8000cc0:	bf00      	nop
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 8000cd6:	2138      	movs	r1, #56	; 0x38
 8000cd8:	2032      	movs	r0, #50	; 0x32
 8000cda:	f000 fb62 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8000ce2:	7bfa      	ldrb	r2, [r7, #15]
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	461a      	mov	r2, r3
 8000cee:	2138      	movs	r1, #56	; 0x38
 8000cf0:	2032      	movs	r0, #50	; 0x32
 8000cf2:	f000 fb43 	bl	800137c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8000cf6:	230a      	movs	r3, #10
 8000cf8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	213a      	movs	r1, #58	; 0x3a
 8000d00:	2032      	movs	r0, #50	; 0x32
 8000d02:	f000 fb3b 	bl	800137c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8000d06:	2305      	movs	r3, #5
 8000d08:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	213b      	movs	r1, #59	; 0x3b
 8000d10:	2032      	movs	r0, #50	; 0x32
 8000d12:	f000 fb33 	bl	800137c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	213c      	movs	r1, #60	; 0x3c
 8000d1c:	2032      	movs	r0, #50	; 0x32
 8000d1e:	f000 fb2d 	bl	800137c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8000d22:	2332      	movs	r3, #50	; 0x32
 8000d24:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	213d      	movs	r1, #61	; 0x3d
 8000d2c:	2032      	movs	r0, #50	; 0x32
 8000d2e:	f000 fb25 	bl	800137c <COMPASSACCELERO_IO_Write>
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8000d3e:	f000 faed 	bl	800131c <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8000d42:	2080      	movs	r0, #128	; 0x80
 8000d44:	f7ff ffa5 	bl	8000c92 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8000d48:	2004      	movs	r0, #4
 8000d4a:	f7ff ff83 	bl	8000c54 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 8000d4e:	2010      	movs	r0, #16
 8000d50:	f7ff ffba 	bl	8000cc8 <LSM303AGR_AccClickITEnable>
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000d62:	2300      	movs	r3, #0
 8000d64:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8000d66:	f000 fab1 	bl	80012cc <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	461a      	mov	r2, r3
 8000d72:	2120      	movs	r1, #32
 8000d74:	2032      	movs	r0, #50	; 0x32
 8000d76:	f000 fb01 	bl	800137c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	461a      	mov	r2, r3
 8000d82:	2123      	movs	r1, #35	; 0x23
 8000d84:	2032      	movs	r0, #50	; 0x32
 8000d86:	f000 faf9 	bl	800137c <COMPASSACCELERO_IO_Write>
}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000da6:	2300      	movs	r3, #0
 8000da8:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8000daa:	f000 fa8f 	bl	80012cc <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8000dae:	210f      	movs	r1, #15
 8000db0:	2032      	movs	r0, #50	; 0x32
 8000db2:	f000 faf6 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8000dba:	79fb      	ldrb	r3, [r7, #7]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8000dca:	2124      	movs	r1, #36	; 0x24
 8000dcc:	2032      	movs	r0, #50	; 0x32
 8000dce:	f000 fae8 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ddc:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	461a      	mov	r2, r3
 8000de2:	2124      	movs	r1, #36	; 0x24
 8000de4:	2032      	movs	r0, #50	; 0x32
 8000de6:	f000 fac9 	bl	800137c <COMPASSACCELERO_IO_Write>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b084      	sub	sp, #16
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000dfc:	2121      	movs	r1, #33	; 0x21
 8000dfe:	2032      	movs	r0, #50	; 0x32
 8000e00:	f000 facf 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000e04:	4603      	mov	r3, r0
 8000e06:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	f003 030c 	and.w	r3, r3, #12
 8000e0e:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8000e10:	7bfa      	ldrb	r2, [r7, #15]
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	2121      	movs	r1, #33	; 0x21
 8000e1e:	2032      	movs	r0, #50	; 0x32
 8000e20:	f000 faac 	bl	800137c <COMPASSACCELERO_IO_Write>
}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000e36:	2121      	movs	r1, #33	; 0x21
 8000e38:	2032      	movs	r0, #50	; 0x32
 8000e3a:	f000 fab2 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	f023 0308 	bic.w	r3, r3, #8
 8000e48:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000e4a:	7bfa      	ldrb	r2, [r7, #15]
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	461a      	mov	r2, r3
 8000e56:	2121      	movs	r1, #33	; 0x21
 8000e58:	2032      	movs	r0, #50	; 0x32
 8000e5a:	f000 fa8f 	bl	800137c <COMPASSACCELERO_IO_Write>
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b088      	sub	sp, #32
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8000e6e:	2300      	movs	r3, #0
 8000e70:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8000e76:	2301      	movs	r3, #1
 8000e78:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8000e7a:	2123      	movs	r1, #35	; 0x23
 8000e7c:	2032      	movs	r0, #50	; 0x32
 8000e7e:	f000 fa90 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000e82:	4603      	mov	r3, r0
 8000e84:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8000e86:	2124      	movs	r1, #36	; 0x24
 8000e88:	2032      	movs	r0, #50	; 0x32
 8000e8a:	f000 fa8a 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8000e92:	2128      	movs	r1, #40	; 0x28
 8000e94:	2032      	movs	r0, #50	; 0x32
 8000e96:	f000 fa84 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	b25b      	sxtb	r3, r3
 8000e9e:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8000ea0:	2129      	movs	r1, #41	; 0x29
 8000ea2:	2032      	movs	r0, #50	; 0x32
 8000ea4:	f000 fa7d 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	b25b      	sxtb	r3, r3
 8000eac:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8000eae:	212a      	movs	r1, #42	; 0x2a
 8000eb0:	2032      	movs	r0, #50	; 0x32
 8000eb2:	f000 fa76 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	b25b      	sxtb	r3, r3
 8000eba:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8000ebc:	212b      	movs	r1, #43	; 0x2b
 8000ebe:	2032      	movs	r0, #50	; 0x32
 8000ec0:	f000 fa6f 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8000eca:	212c      	movs	r1, #44	; 0x2c
 8000ecc:	2032      	movs	r0, #50	; 0x32
 8000ece:	f000 fa68 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	b25b      	sxtb	r3, r3
 8000ed6:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8000ed8:	212d      	movs	r1, #45	; 0x2d
 8000eda:	2032      	movs	r0, #50	; 0x32
 8000edc:	f000 fa61 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	b25b      	sxtb	r3, r3
 8000ee4:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8000ee6:	7d3b      	ldrb	r3, [r7, #20]
 8000ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d123      	bne.n	8000f38 <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	77fb      	strb	r3, [r7, #31]
 8000ef4:	e01c      	b.n	8000f30 <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000ef6:	7ffb      	ldrb	r3, [r7, #31]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	3301      	adds	r3, #1
 8000efc:	3320      	adds	r3, #32
 8000efe:	443b      	add	r3, r7
 8000f00:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	7ffb      	ldrb	r3, [r7, #31]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	3320      	adds	r3, #32
 8000f10:	443b      	add	r3, r7
 8000f12:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	4413      	add	r3, r2
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	7ffb      	ldrb	r3, [r7, #31]
 8000f1e:	b212      	sxth	r2, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	3320      	adds	r3, #32
 8000f24:	443b      	add	r3, r7
 8000f26:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000f2a:	7ffb      	ldrb	r3, [r7, #31]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	77fb      	strb	r3, [r7, #31]
 8000f30:	7ffb      	ldrb	r3, [r7, #31]
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d9df      	bls.n	8000ef6 <LSM303DLHC_AccReadXYZ+0x90>
 8000f36:	e022      	b.n	8000f7e <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	77fb      	strb	r3, [r7, #31]
 8000f3c:	e01c      	b.n	8000f78 <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8000f3e:	7ffb      	ldrb	r3, [r7, #31]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	3320      	adds	r3, #32
 8000f44:	443b      	add	r3, r7
 8000f46:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	7ffb      	ldrb	r3, [r7, #31]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	3301      	adds	r3, #1
 8000f56:	3320      	adds	r3, #32
 8000f58:	443b      	add	r3, r7
 8000f5a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	4413      	add	r3, r2
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	7ffb      	ldrb	r3, [r7, #31]
 8000f66:	b212      	sxth	r2, r2
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	3320      	adds	r3, #32
 8000f6c:	443b      	add	r3, r7
 8000f6e:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000f72:	7ffb      	ldrb	r3, [r7, #31]
 8000f74:	3301      	adds	r3, #1
 8000f76:	77fb      	strb	r3, [r7, #31]
 8000f78:	7ffb      	ldrb	r3, [r7, #31]
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d9df      	bls.n	8000f3e <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8000f7e:	7d3b      	ldrb	r3, [r7, #20]
 8000f80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000f84:	2b30      	cmp	r3, #48	; 0x30
 8000f86:	d013      	beq.n	8000fb0 <LSM303DLHC_AccReadXYZ+0x14a>
 8000f88:	2b30      	cmp	r3, #48	; 0x30
 8000f8a:	dc14      	bgt.n	8000fb6 <LSM303DLHC_AccReadXYZ+0x150>
 8000f8c:	2b20      	cmp	r3, #32
 8000f8e:	d00c      	beq.n	8000faa <LSM303DLHC_AccReadXYZ+0x144>
 8000f90:	2b20      	cmp	r3, #32
 8000f92:	dc10      	bgt.n	8000fb6 <LSM303DLHC_AccReadXYZ+0x150>
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <LSM303DLHC_AccReadXYZ+0x138>
 8000f98:	2b10      	cmp	r3, #16
 8000f9a:	d003      	beq.n	8000fa4 <LSM303DLHC_AccReadXYZ+0x13e>
 8000f9c:	e00b      	b.n	8000fb6 <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	77bb      	strb	r3, [r7, #30]
    break;
 8000fa2:	e008      	b.n	8000fb6 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	77bb      	strb	r3, [r7, #30]
    break;
 8000fa8:	e005      	b.n	8000fb6 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8000faa:	2304      	movs	r3, #4
 8000fac:	77bb      	strb	r3, [r7, #30]
    break;
 8000fae:	e002      	b.n	8000fb6 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8000fb0:	230c      	movs	r3, #12
 8000fb2:	77bb      	strb	r3, [r7, #30]
    break;
 8000fb4:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	77fb      	strb	r3, [r7, #31]
 8000fba:	e014      	b.n	8000fe6 <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000fbc:	7ffb      	ldrb	r3, [r7, #31]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	3320      	adds	r3, #32
 8000fc2:	443b      	add	r3, r7
 8000fc4:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	7fbb      	ldrb	r3, [r7, #30]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	fb12 f303 	smulbb	r3, r2, r3
 8000fd2:	b299      	uxth	r1, r3
 8000fd4:	7ffb      	ldrb	r3, [r7, #31]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	4413      	add	r3, r2
 8000fdc:	b20a      	sxth	r2, r1
 8000fde:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000fe0:	7ffb      	ldrb	r3, [r7, #31]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	77fb      	strb	r3, [r7, #31]
 8000fe6:	7ffb      	ldrb	r3, [r7, #31]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d9e7      	bls.n	8000fbc <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3720      	adds	r7, #32
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001004:	2121      	movs	r1, #33	; 0x21
 8001006:	2032      	movs	r0, #50	; 0x32
 8001008:	f000 f9cb 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 800100c:	4603      	mov	r3, r0
 800100e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	f023 0304 	bic.w	r3, r3, #4
 8001016:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001018:	7bfa      	ldrb	r2, [r7, #15]
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	4313      	orrs	r3, r2
 800101e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	461a      	mov	r2, r3
 8001024:	2121      	movs	r1, #33	; 0x21
 8001026:	2032      	movs	r0, #50	; 0x32
 8001028:	f000 f9a8 	bl	800137c <COMPASSACCELERO_IO_Write>
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800103e:	2300      	movs	r3, #0
 8001040:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8001042:	2122      	movs	r1, #34	; 0x22
 8001044:	2032      	movs	r0, #50	; 0x32
 8001046:	f000 f9ac 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 800104a:	4603      	mov	r3, r0
 800104c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	4313      	orrs	r3, r2
 8001054:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	461a      	mov	r2, r3
 800105a:	2122      	movs	r1, #34	; 0x22
 800105c:	2032      	movs	r0, #50	; 0x32
 800105e:	f000 f98d 	bl	800137c <COMPASSACCELERO_IO_Write>
}
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 800106a:	b580      	push	{r7, lr}
 800106c:	b084      	sub	sp, #16
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8001078:	2138      	movs	r1, #56	; 0x38
 800107a:	2032      	movs	r0, #50	; 0x32
 800107c:	f000 f991 	bl	80013a2 <COMPASSACCELERO_IO_Read>
 8001080:	4603      	mov	r3, r0
 8001082:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	4313      	orrs	r3, r2
 800108a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	461a      	mov	r2, r3
 8001090:	2138      	movs	r1, #56	; 0x38
 8001092:	2032      	movs	r0, #50	; 0x32
 8001094:	f000 f972 	bl	800137c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8001098:	230a      	movs	r3, #10
 800109a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	461a      	mov	r2, r3
 80010a0:	213a      	movs	r1, #58	; 0x3a
 80010a2:	2032      	movs	r0, #50	; 0x32
 80010a4:	f000 f96a 	bl	800137c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 80010a8:	2305      	movs	r3, #5
 80010aa:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	461a      	mov	r2, r3
 80010b0:	213b      	movs	r1, #59	; 0x3b
 80010b2:	2032      	movs	r0, #50	; 0x32
 80010b4:	f000 f962 	bl	800137c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	461a      	mov	r2, r3
 80010bc:	213c      	movs	r1, #60	; 0x3c
 80010be:	2032      	movs	r0, #50	; 0x32
 80010c0:	f000 f95c 	bl	800137c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 80010c4:	2332      	movs	r3, #50	; 0x32
 80010c6:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	461a      	mov	r2, r3
 80010cc:	213d      	movs	r1, #61	; 0x3d
 80010ce:	2032      	movs	r0, #50	; 0x32
 80010d0:	f000 f954 	bl	800137c <COMPASSACCELERO_IO_Write>
}
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 80010e0:	f000 f91c 	bl	800131c <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 80010e4:	2080      	movs	r0, #128	; 0x80
 80010e6:	f7ff ffa5 	bl	8001034 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 80010ea:	2004      	movs	r0, #4
 80010ec:	f7ff ff83 	bl	8000ff6 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 80010f0:	2010      	movs	r0, #16
 80010f2:	f7ff ffba 	bl	800106a <LSM303DLHC_AccClickITEnable>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001100:	4814      	ldr	r0, [pc, #80]	; (8001154 <I2Cx_Init+0x58>)
 8001102:	f002 fc13 	bl	800392c <HAL_I2C_GetState>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d121      	bne.n	8001150 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <I2Cx_Init+0x58>)
 800110e:	4a12      	ldr	r2, [pc, #72]	; (8001158 <I2Cx_Init+0x5c>)
 8001110:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <I2Cx_Init+0x58>)
 8001114:	2243      	movs	r2, #67	; 0x43
 8001116:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <I2Cx_Init+0x58>)
 800111a:	4a10      	ldr	r2, [pc, #64]	; (800115c <I2Cx_Init+0x60>)
 800111c:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <I2Cx_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <I2Cx_Init+0x58>)
 8001126:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800112a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <I2Cx_Init+0x58>)
 800112e:	2200      	movs	r2, #0
 8001130:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <I2Cx_Init+0x58>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <I2Cx_Init+0x58>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <I2Cx_Init+0x58>)
 8001140:	2200      	movs	r2, #0
 8001142:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8001144:	4803      	ldr	r0, [pc, #12]	; (8001154 <I2Cx_Init+0x58>)
 8001146:	f000 f86b 	bl	8001220 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800114a:	4802      	ldr	r0, [pc, #8]	; (8001154 <I2Cx_Init+0x58>)
 800114c:	f001 ff5a 	bl	8003004 <HAL_I2C_Init>
  }
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200001d0 	.word	0x200001d0
 8001158:	40005400 	.word	0x40005400
 800115c:	000186a0 	.word	0x000186a0

08001160 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af04      	add	r7, sp, #16
 8001166:	4603      	mov	r3, r0
 8001168:	80fb      	strh	r3, [r7, #6]
 800116a:	460b      	mov	r3, r1
 800116c:	717b      	strb	r3, [r7, #5]
 800116e:	4613      	mov	r3, r2
 8001170:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8001176:	797b      	ldrb	r3, [r7, #5]
 8001178:	b29a      	uxth	r2, r3
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <I2Cx_WriteData+0x48>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	88f9      	ldrh	r1, [r7, #6]
 8001180:	9302      	str	r3, [sp, #8]
 8001182:	2301      	movs	r3, #1
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	4807      	ldr	r0, [pc, #28]	; (80011ac <I2Cx_WriteData+0x4c>)
 800118e:	f002 f8ad 	bl	80032ec <HAL_I2C_Mem_Write>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 800119c:	f000 f834 	bl	8001208 <I2Cx_Error>
  }
}
 80011a0:	bf00      	nop
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	2000006c 	.word	0x2000006c
 80011ac:	200001d0 	.word	0x200001d0

080011b0 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af04      	add	r7, sp, #16
 80011b6:	4603      	mov	r3, r0
 80011b8:	460a      	mov	r2, r1
 80011ba:	80fb      	strh	r3, [r7, #6]
 80011bc:	4613      	mov	r3, r2
 80011be:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80011c8:	797b      	ldrb	r3, [r7, #5]
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <I2Cx_ReadData+0x50>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	88f9      	ldrh	r1, [r7, #6]
 80011d2:	9302      	str	r3, [sp, #8]
 80011d4:	2301      	movs	r3, #1
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	f107 030e 	add.w	r3, r7, #14
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2301      	movs	r3, #1
 80011e0:	4808      	ldr	r0, [pc, #32]	; (8001204 <I2Cx_ReadData+0x54>)
 80011e2:	f002 f97d 	bl	80034e0 <HAL_I2C_Mem_Read>
 80011e6:	4603      	mov	r3, r0
 80011e8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80011f0:	f000 f80a 	bl	8001208 <I2Cx_Error>
  }
  return value;
 80011f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000006c 	.word	0x2000006c
 8001204:	200001d0 	.word	0x200001d0

08001208 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 800120c:	4803      	ldr	r0, [pc, #12]	; (800121c <I2Cx_Error+0x14>)
 800120e:	f002 f83d 	bl	800328c <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8001212:	f7ff ff73 	bl	80010fc <I2Cx_Init>
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200001d0 	.word	0x200001d0

08001220 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <I2Cx_MspInit+0xa4>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	4a24      	ldr	r2, [pc, #144]	; (80012c4 <I2Cx_MspInit+0xa4>)
 8001232:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001236:	6413      	str	r3, [r2, #64]	; 0x40
 8001238:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <I2Cx_MspInit+0xa4>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <I2Cx_MspInit+0xa4>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <I2Cx_MspInit+0xa4>)
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	6313      	str	r3, [r2, #48]	; 0x30
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <I2Cx_MspInit+0xa4>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 8001260:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8001266:	2312      	movs	r3, #18
 8001268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800126e:	2302      	movs	r3, #2
 8001270:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8001272:	2304      	movs	r3, #4
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4812      	ldr	r0, [pc, #72]	; (80012c8 <I2Cx_MspInit+0xa8>)
 800127e:	f000 fb15 	bl	80018ac <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <I2Cx_MspInit+0xa4>)
 8001284:	6a1b      	ldr	r3, [r3, #32]
 8001286:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <I2Cx_MspInit+0xa4>)
 8001288:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800128c:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <I2Cx_MspInit+0xa4>)
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	4a0c      	ldr	r2, [pc, #48]	; (80012c4 <I2Cx_MspInit+0xa4>)
 8001294:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001298:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	210f      	movs	r1, #15
 800129e:	201f      	movs	r0, #31
 80012a0:	f000 facd 	bl	800183e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80012a4:	201f      	movs	r0, #31
 80012a6:	f000 fae6 	bl	8001876 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	210f      	movs	r1, #15
 80012ae:	2020      	movs	r0, #32
 80012b0:	f000 fac5 	bl	800183e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 80012b4:	2020      	movs	r0, #32
 80012b6:	f000 fade 	bl	8001876 <HAL_NVIC_EnableIRQ>
}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	; 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020400 	.word	0x40020400

080012cc <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <COMPASSACCELERO_IO_Init+0x48>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <COMPASSACCELERO_IO_Init+0x48>)
 80012dc:	f043 0310 	orr.w	r3, r3, #16
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <COMPASSACCELERO_IO_Init+0x48>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0310 	and.w	r3, r3, #16
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 80012ee:	2304      	movs	r3, #4
 80012f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80012fa:	2302      	movs	r3, #2
 80012fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	4619      	mov	r1, r3
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <COMPASSACCELERO_IO_Init+0x4c>)
 8001304:	f000 fad2 	bl	80018ac <HAL_GPIO_Init>
  
  I2Cx_Init();
 8001308:	f7ff fef8 	bl	80010fc <I2Cx_Init>
}
 800130c:	bf00      	nop
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	40021000 	.word	0x40021000

0800131c <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a12      	ldr	r2, [pc, #72]	; (8001374 <COMPASSACCELERO_IO_ITConfig+0x58>)
 800132c:	f043 0310 	orr.w	r3, r3, #16
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800133e:	2330      	movs	r3, #48	; 0x30
 8001340:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8001342:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001346:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001348:	2302      	movs	r3, #2
 800134a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	4619      	mov	r1, r3
 8001354:	4808      	ldr	r0, [pc, #32]	; (8001378 <COMPASSACCELERO_IO_ITConfig+0x5c>)
 8001356:	f000 faa9 	bl	80018ac <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 800135a:	2200      	movs	r2, #0
 800135c:	210f      	movs	r1, #15
 800135e:	200a      	movs	r0, #10
 8001360:	f000 fa6d 	bl	800183e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8001364:	200a      	movs	r0, #10
 8001366:	f000 fa86 	bl	8001876 <HAL_NVIC_EnableIRQ>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40021000 	.word	0x40021000

0800137c <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	80fb      	strh	r3, [r7, #6]
 8001386:	460b      	mov	r3, r1
 8001388:	717b      	strb	r3, [r7, #5]
 800138a:	4613      	mov	r3, r2
 800138c:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 800138e:	793a      	ldrb	r2, [r7, #4]
 8001390:	7979      	ldrb	r1, [r7, #5]
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fee3 	bl	8001160 <I2Cx_WriteData>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	460a      	mov	r2, r1
 80013ac:	80fb      	strh	r3, [r7, #6]
 80013ae:	4613      	mov	r3, r2
 80013b0:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 80013b2:	797a      	ldrb	r2, [r7, #5]
 80013b4:	88fb      	ldrh	r3, [r7, #6]
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fef9 	bl	80011b0 <I2Cx_ReadData>
 80013be:	4603      	mov	r3, r0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 80013d2:	2300      	movs	r3, #0
 80013d4:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 80013de:	4b58      	ldr	r3, [pc, #352]	; (8001540 <BSP_ACCELERO_Init+0x178>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	4798      	blx	r3
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b33      	cmp	r3, #51	; 0x33
 80013e8:	d14f      	bne.n	800148a <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 80013ea:	4b56      	ldr	r3, [pc, #344]	; (8001544 <BSP_ACCELERO_Init+0x17c>)
 80013ec:	4a54      	ldr	r2, [pc, #336]	; (8001540 <BSP_ACCELERO_Init+0x178>)
 80013ee:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 80013f4:	2340      	movs	r3, #64	; 0x40
 80013f6:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 80013f8:	2307      	movs	r3, #7
 80013fa:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 80013fc:	2300      	movs	r3, #0
 80013fe:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8001400:	2300      	movs	r3, #0
 8001402:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8001404:	2300      	movs	r3, #0
 8001406:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8001408:	2308      	movs	r3, #8
 800140a:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800140c:	7b3a      	ldrb	r2, [r7, #12]
 800140e:	7b7b      	ldrb	r3, [r7, #13]
 8001410:	4313      	orrs	r3, r2
 8001412:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8001414:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8001416:	4313      	orrs	r3, r2
 8001418:	b2db      	uxtb	r3, r3
 800141a:	b29a      	uxth	r2, r3
 800141c:	8abb      	ldrh	r3, [r7, #20]
 800141e:	4313      	orrs	r3, r2
 8001420:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8001422:	7c3a      	ldrb	r2, [r7, #16]
 8001424:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8001426:	4313      	orrs	r3, r2
 8001428:	b2da      	uxtb	r2, r3
 800142a:	7cbb      	ldrb	r3, [r7, #18]
 800142c:	4313      	orrs	r3, r2
 800142e:	b2da      	uxtb	r2, r3
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	4313      	orrs	r3, r2
 8001434:	b2db      	uxtb	r3, r3
 8001436:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8001438:	b21a      	sxth	r2, r3
 800143a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800143e:	4313      	orrs	r3, r2
 8001440:	b21b      	sxth	r3, r3
 8001442:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001444:	4b3f      	ldr	r3, [pc, #252]	; (8001544 <BSP_ACCELERO_Init+0x17c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	8aba      	ldrh	r2, [r7, #20]
 800144c:	4610      	mov	r0, r2
 800144e:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8001454:	2310      	movs	r3, #16
 8001456:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001460:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8001462:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001464:	4313      	orrs	r3, r2
 8001466:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8001468:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800146a:	4313      	orrs	r3, r2
 800146c:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 800146e:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001470:	4313      	orrs	r3, r2
 8001472:	b2db      	uxtb	r3, r3
 8001474:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8001476:	4b33      	ldr	r3, [pc, #204]	; (8001544 <BSP_ACCELERO_Init+0x17c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147c:	8aba      	ldrh	r2, [r7, #20]
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	4610      	mov	r0, r2
 8001482:	4798      	blx	r3

    ret = ACCELERO_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	75fb      	strb	r3, [r7, #23]
 8001488:	e054      	b.n	8001534 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 800148a:	4b2f      	ldr	r3, [pc, #188]	; (8001548 <BSP_ACCELERO_Init+0x180>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	4798      	blx	r3
 8001490:	4603      	mov	r3, r0
 8001492:	2b33      	cmp	r3, #51	; 0x33
 8001494:	d14e      	bne.n	8001534 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8001496:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <BSP_ACCELERO_Init+0x17c>)
 8001498:	4a2b      	ldr	r2, [pc, #172]	; (8001548 <BSP_ACCELERO_Init+0x180>)
 800149a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 800149c:	2300      	movs	r3, #0
 800149e:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 80014a0:	2340      	movs	r3, #64	; 0x40
 80014a2:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 80014a4:	2307      	movs	r3, #7
 80014a6:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 80014a8:	2300      	movs	r3, #0
 80014aa:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 80014ac:	2300      	movs	r3, #0
 80014ae:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 80014b0:	2300      	movs	r3, #0
 80014b2:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 80014b4:	2308      	movs	r3, #8
 80014b6:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80014b8:	7b3a      	ldrb	r2, [r7, #12]
 80014ba:	7b7b      	ldrb	r3, [r7, #13]
 80014bc:	4313      	orrs	r3, r2
 80014be:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 80014c0:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80014c2:	4313      	orrs	r3, r2
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	8abb      	ldrh	r3, [r7, #20]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80014ce:	7c3a      	ldrb	r2, [r7, #16]
 80014d0:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	7cbb      	ldrb	r3, [r7, #18]
 80014d8:	4313      	orrs	r3, r2
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	4313      	orrs	r3, r2
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <BSP_ACCELERO_Init+0x17c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	8aba      	ldrh	r2, [r7, #20]
 80014f8:	4610      	mov	r0, r2
 80014fa:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8001500:	2310      	movs	r3, #16
 8001502:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800150c:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 800150e:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001510:	4313      	orrs	r3, r2
 8001512:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8001514:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001516:	4313      	orrs	r3, r2
 8001518:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 800151a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800151c:	4313      	orrs	r3, r2
 800151e:	b2db      	uxtb	r3, r3
 8001520:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <BSP_ACCELERO_Init+0x17c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001528:	8aba      	ldrh	r2, [r7, #20]
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	4610      	mov	r0, r2
 800152e:	4798      	blx	r3

    ret = ACCELERO_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8001534:	7dfb      	ldrb	r3, [r7, #23]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000038 	.word	0x20000038
 8001544:	20000224 	.word	0x20000224
 8001548:	20000004 	.word	0x20000004

0800154c <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 8001558:	4b10      	ldr	r3, [pc, #64]	; (800159c <BSP_ACCELERO_GetXYZ+0x50>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	2b00      	cmp	r3, #0
 8001560:	d018      	beq.n	8001594 <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <BSP_ACCELERO_GetXYZ+0x50>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <BSP_ACCELERO_GetXYZ+0x50>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <BSP_ACCELERO_GetXYZ+0x54>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d10e      	bne.n	8001594 <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 8001586:	89fb      	ldrh	r3, [r7, #14]
 8001588:	425b      	negs	r3, r3
 800158a:	b29a      	uxth	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3302      	adds	r3, #2
 8001590:	b212      	sxth	r2, r2
 8001592:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000224 	.word	0x20000224
 80015a0:	20000038 	.word	0x20000038

080015a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <HAL_Init+0x40>)
 80015ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <HAL_Init+0x40>)
 80015ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <HAL_Init+0x40>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <HAL_Init+0x40>)
 80015c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015cc:	2003      	movs	r0, #3
 80015ce:	f000 f92b 	bl	8001828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f000 f808 	bl	80015e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d8:	f7fe ffd6 	bl	8000588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40023c00 	.word	0x40023c00

080015e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_InitTick+0x54>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_InitTick+0x58>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f943 	bl	8001892 <HAL_SYSTICK_Config>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e00e      	b.n	8001634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b0f      	cmp	r3, #15
 800161a:	d80a      	bhi.n	8001632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800161c:	2200      	movs	r2, #0
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f000 f90b 	bl	800183e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001628:	4a06      	ldr	r2, [pc, #24]	; (8001644 <HAL_InitTick+0x5c>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e000      	b.n	8001634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000000 	.word	0x20000000
 8001640:	20000074 	.word	0x20000074
 8001644:	20000070 	.word	0x20000070

08001648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_IncTick+0x20>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_IncTick+0x24>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
 8001658:	4a04      	ldr	r2, [pc, #16]	; (800166c <HAL_IncTick+0x24>)
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000074 	.word	0x20000074
 800166c:	20000228 	.word	0x20000228

08001670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return uwTick;
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <HAL_GetTick+0x14>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000228 	.word	0x20000228

08001688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a4:	4013      	ands	r3, r2
 80016a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	60d3      	str	r3, [r2, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <__NVIC_GetPriorityGrouping+0x18>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	f003 0307 	and.w	r3, r3, #7
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	db0b      	blt.n	8001716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 021f 	and.w	r2, r3, #31
 8001704:	4907      	ldr	r1, [pc, #28]	; (8001724 <__NVIC_EnableIRQ+0x38>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	2001      	movs	r0, #1
 800170e:	fa00 f202 	lsl.w	r2, r0, r2
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100

08001728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	2b00      	cmp	r3, #0
 800173a:	db0a      	blt.n	8001752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	490c      	ldr	r1, [pc, #48]	; (8001774 <__NVIC_SetPriority+0x4c>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	0112      	lsls	r2, r2, #4
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	440b      	add	r3, r1
 800174c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001750:	e00a      	b.n	8001768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4908      	ldr	r1, [pc, #32]	; (8001778 <__NVIC_SetPriority+0x50>)
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	3b04      	subs	r3, #4
 8001760:	0112      	lsls	r2, r2, #4
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	440b      	add	r3, r1
 8001766:	761a      	strb	r2, [r3, #24]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000e100 	.word	0xe000e100
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177c:	b480      	push	{r7}
 800177e:	b089      	sub	sp, #36	; 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f1c3 0307 	rsb	r3, r3, #7
 8001796:	2b04      	cmp	r3, #4
 8001798:	bf28      	it	cs
 800179a:	2304      	movcs	r3, #4
 800179c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3304      	adds	r3, #4
 80017a2:	2b06      	cmp	r3, #6
 80017a4:	d902      	bls.n	80017ac <NVIC_EncodePriority+0x30>
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3b03      	subs	r3, #3
 80017aa:	e000      	b.n	80017ae <NVIC_EncodePriority+0x32>
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	f04f 32ff 	mov.w	r2, #4294967295
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43da      	mvns	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	401a      	ands	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c4:	f04f 31ff 	mov.w	r1, #4294967295
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	43d9      	mvns	r1, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	4313      	orrs	r3, r2
         );
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3724      	adds	r7, #36	; 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f4:	d301      	bcc.n	80017fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f6:	2301      	movs	r3, #1
 80017f8:	e00f      	b.n	800181a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <SysTick_Config+0x40>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001802:	210f      	movs	r1, #15
 8001804:	f04f 30ff 	mov.w	r0, #4294967295
 8001808:	f7ff ff8e 	bl	8001728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <SysTick_Config+0x40>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001812:	4b04      	ldr	r3, [pc, #16]	; (8001824 <SysTick_Config+0x40>)
 8001814:	2207      	movs	r2, #7
 8001816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	e000e010 	.word	0xe000e010

08001828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ff29 	bl	8001688 <__NVIC_SetPriorityGrouping>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800183e:	b580      	push	{r7, lr}
 8001840:	b086      	sub	sp, #24
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
 800184a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001850:	f7ff ff3e 	bl	80016d0 <__NVIC_GetPriorityGrouping>
 8001854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	6978      	ldr	r0, [r7, #20]
 800185c:	f7ff ff8e 	bl	800177c <NVIC_EncodePriority>
 8001860:	4602      	mov	r2, r0
 8001862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff5d 	bl	8001728 <__NVIC_SetPriority>
}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff31 	bl	80016ec <__NVIC_EnableIRQ>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffa2 	bl	80017e4 <SysTick_Config>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	e159      	b.n	8001b7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018c8:	2201      	movs	r2, #1
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	f040 8148 	bne.w	8001b76 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d005      	beq.n	80018fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d130      	bne.n	8001960 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	2203      	movs	r2, #3
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001934:	2201      	movs	r2, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	f003 0201 	and.w	r2, r3, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b03      	cmp	r3, #3
 800196a:	d017      	beq.n	800199c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d123      	bne.n	80019f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	08da      	lsrs	r2, r3, #3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3208      	adds	r2, #8
 80019b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	220f      	movs	r2, #15
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	08da      	lsrs	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3208      	adds	r2, #8
 80019ea:	69b9      	ldr	r1, [r7, #24]
 80019ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0203 	and.w	r2, r3, #3
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80a2 	beq.w	8001b76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b57      	ldr	r3, [pc, #348]	; (8001b94 <HAL_GPIO_Init+0x2e8>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	4a56      	ldr	r2, [pc, #344]	; (8001b94 <HAL_GPIO_Init+0x2e8>)
 8001a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	4b54      	ldr	r3, [pc, #336]	; (8001b94 <HAL_GPIO_Init+0x2e8>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a4e:	4a52      	ldr	r2, [pc, #328]	; (8001b98 <HAL_GPIO_Init+0x2ec>)
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	3302      	adds	r3, #2
 8001a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	220f      	movs	r2, #15
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a49      	ldr	r2, [pc, #292]	; (8001b9c <HAL_GPIO_Init+0x2f0>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d019      	beq.n	8001aae <HAL_GPIO_Init+0x202>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a48      	ldr	r2, [pc, #288]	; (8001ba0 <HAL_GPIO_Init+0x2f4>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d013      	beq.n	8001aaa <HAL_GPIO_Init+0x1fe>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a47      	ldr	r2, [pc, #284]	; (8001ba4 <HAL_GPIO_Init+0x2f8>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d00d      	beq.n	8001aa6 <HAL_GPIO_Init+0x1fa>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a46      	ldr	r2, [pc, #280]	; (8001ba8 <HAL_GPIO_Init+0x2fc>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d007      	beq.n	8001aa2 <HAL_GPIO_Init+0x1f6>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a45      	ldr	r2, [pc, #276]	; (8001bac <HAL_GPIO_Init+0x300>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d101      	bne.n	8001a9e <HAL_GPIO_Init+0x1f2>
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	e008      	b.n	8001ab0 <HAL_GPIO_Init+0x204>
 8001a9e:	2307      	movs	r3, #7
 8001aa0:	e006      	b.n	8001ab0 <HAL_GPIO_Init+0x204>
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e004      	b.n	8001ab0 <HAL_GPIO_Init+0x204>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e002      	b.n	8001ab0 <HAL_GPIO_Init+0x204>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <HAL_GPIO_Init+0x204>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	69fa      	ldr	r2, [r7, #28]
 8001ab2:	f002 0203 	and.w	r2, r2, #3
 8001ab6:	0092      	lsls	r2, r2, #2
 8001ab8:	4093      	lsls	r3, r2
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ac0:	4935      	ldr	r1, [pc, #212]	; (8001b98 <HAL_GPIO_Init+0x2ec>)
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ace:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001af2:	4a2f      	ldr	r2, [pc, #188]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001af8:	4b2d      	ldr	r3, [pc, #180]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b1c:	4a24      	ldr	r2, [pc, #144]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b22:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b46:	4a1a      	ldr	r2, [pc, #104]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b70:	4a0f      	ldr	r2, [pc, #60]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	61fb      	str	r3, [r7, #28]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	2b0f      	cmp	r3, #15
 8001b80:	f67f aea2 	bls.w	80018c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	3724      	adds	r7, #36	; 0x24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40013800 	.word	0x40013800
 8001b9c:	40020000 	.word	0x40020000
 8001ba0:	40020400 	.word	0x40020400
 8001ba4:	40020800 	.word	0x40020800
 8001ba8:	40020c00 	.word	0x40020c00
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40013c00 	.word	0x40013c00

08001bb4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b087      	sub	sp, #28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	e0bb      	b.n	8001d48 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	4013      	ands	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	f040 80ab 	bne.w	8001d42 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001bec:	4a5c      	ldr	r2, [pc, #368]	; (8001d60 <HAL_GPIO_DeInit+0x1ac>)
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	220f      	movs	r2, #15
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a54      	ldr	r2, [pc, #336]	; (8001d64 <HAL_GPIO_DeInit+0x1b0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d019      	beq.n	8001c4a <HAL_GPIO_DeInit+0x96>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a53      	ldr	r2, [pc, #332]	; (8001d68 <HAL_GPIO_DeInit+0x1b4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d013      	beq.n	8001c46 <HAL_GPIO_DeInit+0x92>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a52      	ldr	r2, [pc, #328]	; (8001d6c <HAL_GPIO_DeInit+0x1b8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d00d      	beq.n	8001c42 <HAL_GPIO_DeInit+0x8e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a51      	ldr	r2, [pc, #324]	; (8001d70 <HAL_GPIO_DeInit+0x1bc>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d007      	beq.n	8001c3e <HAL_GPIO_DeInit+0x8a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a50      	ldr	r2, [pc, #320]	; (8001d74 <HAL_GPIO_DeInit+0x1c0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d101      	bne.n	8001c3a <HAL_GPIO_DeInit+0x86>
 8001c36:	2304      	movs	r3, #4
 8001c38:	e008      	b.n	8001c4c <HAL_GPIO_DeInit+0x98>
 8001c3a:	2307      	movs	r3, #7
 8001c3c:	e006      	b.n	8001c4c <HAL_GPIO_DeInit+0x98>
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e004      	b.n	8001c4c <HAL_GPIO_DeInit+0x98>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e002      	b.n	8001c4c <HAL_GPIO_DeInit+0x98>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_GPIO_DeInit+0x98>
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	f002 0203 	and.w	r2, r2, #3
 8001c52:	0092      	lsls	r2, r2, #2
 8001c54:	4093      	lsls	r3, r2
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d132      	bne.n	8001cc2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001c5c:	4b46      	ldr	r3, [pc, #280]	; (8001d78 <HAL_GPIO_DeInit+0x1c4>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	4944      	ldr	r1, [pc, #272]	; (8001d78 <HAL_GPIO_DeInit+0x1c4>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001c6a:	4b43      	ldr	r3, [pc, #268]	; (8001d78 <HAL_GPIO_DeInit+0x1c4>)
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	4941      	ldr	r1, [pc, #260]	; (8001d78 <HAL_GPIO_DeInit+0x1c4>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001c78:	4b3f      	ldr	r3, [pc, #252]	; (8001d78 <HAL_GPIO_DeInit+0x1c4>)
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	493d      	ldr	r1, [pc, #244]	; (8001d78 <HAL_GPIO_DeInit+0x1c4>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001c86:	4b3c      	ldr	r3, [pc, #240]	; (8001d78 <HAL_GPIO_DeInit+0x1c4>)
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	493a      	ldr	r1, [pc, #232]	; (8001d78 <HAL_GPIO_DeInit+0x1c4>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001ca4:	4a2e      	ldr	r2, [pc, #184]	; (8001d60 <HAL_GPIO_DeInit+0x1ac>)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	089b      	lsrs	r3, r3, #2
 8001caa:	3302      	adds	r3, #2
 8001cac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	482a      	ldr	r0, [pc, #168]	; (8001d60 <HAL_GPIO_DeInit+0x1ac>)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	400a      	ands	r2, r1
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	2103      	movs	r1, #3
 8001ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	08da      	lsrs	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3208      	adds	r2, #8
 8001ce0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	08d2      	lsrs	r2, r2, #3
 8001cf8:	4019      	ands	r1, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3208      	adds	r2, #8
 8001cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	2103      	movs	r1, #3
 8001d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	401a      	ands	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	fa01 f303 	lsl.w	r3, r1, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	401a      	ands	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	2103      	movs	r1, #3
 8001d36:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	401a      	ands	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	3301      	adds	r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	2b0f      	cmp	r3, #15
 8001d4c:	f67f af40 	bls.w	8001bd0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	371c      	adds	r7, #28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40013800 	.word	0x40013800
 8001d64:	40020000 	.word	0x40020000
 8001d68:	40020400 	.word	0x40020400
 8001d6c:	40020800 	.word	0x40020800
 8001d70:	40020c00 	.word	0x40020c00
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40013c00 	.word	0x40013c00

08001d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	807b      	strh	r3, [r7, #2]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d8c:	787b      	ldrb	r3, [r7, #1]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d92:	887a      	ldrh	r2, [r7, #2]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d98:	e003      	b.n	8001da2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d9a:	887b      	ldrh	r3, [r7, #2]
 8001d9c:	041a      	lsls	r2, r3, #16
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	619a      	str	r2, [r3, #24]
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f002 ffb6 	bl	8004d36 <USB_GetMode>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	f040 80f6 	bne.w	8001fbe <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f002 ff9a 	bl	8004d10 <USB_ReadInterrupts>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 80ec 	beq.w	8001fbc <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f002 ff91 	bl	8004d10 <USB_ReadInterrupts>
 8001dee:	4603      	mov	r3, r0
 8001df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001df8:	d104      	bne.n	8001e04 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e02:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f002 ff81 	bl	8004d10 <USB_ReadInterrupts>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e18:	d104      	bne.n	8001e24 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e22:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f002 ff71 	bl	8004d10 <USB_ReadInterrupts>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e38:	d104      	bne.n	8001e44 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e42:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f002 ff61 	bl	8004d10 <USB_ReadInterrupts>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d103      	bne.n	8001e60 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f002 ff53 	bl	8004d10 <USB_ReadInterrupts>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e74:	d11c      	bne.n	8001eb0 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e7e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10f      	bne.n	8001eb0 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e90:	2110      	movs	r1, #16
 8001e92:	6938      	ldr	r0, [r7, #16]
 8001e94:	f002 fe80 	bl	8004b98 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e98:	6938      	ldr	r0, [r7, #16]
 8001e9a:	f002 feb1 	bl	8004c00 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f002 ff54 	bl	8004d52 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f003 f9e5 	bl	800527a <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f002 ff2b 	bl	8004d10 <USB_ReadInterrupts>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ec4:	d102      	bne.n	8001ecc <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f001 f829 	bl	8002f1e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f002 ff1d 	bl	8004d10 <USB_ReadInterrupts>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d106      	bne.n	8001eee <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f003 f9ae 	bl	8005242 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2208      	movs	r2, #8
 8001eec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f002 ff0c 	bl	8004d10 <USB_ReadInterrupts>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b10      	cmp	r3, #16
 8001f00:	d101      	bne.n	8001f06 <HAL_HCD_IRQHandler+0x158>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <HAL_HCD_IRQHandler+0x15a>
 8001f06:	2300      	movs	r3, #0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d012      	beq.n	8001f32 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699a      	ldr	r2, [r3, #24]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0210 	bic.w	r2, r2, #16
 8001f1a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 ff2c 	bl	8002d7a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	699a      	ldr	r2, [r3, #24]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f042 0210 	orr.w	r2, r2, #16
 8001f30:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f002 feea 	bl	8004d10 <USB_ReadInterrupts>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f46:	d13a      	bne.n	8001fbe <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f002 ff3a 	bl	8004dc6 <USB_HC_ReadInterrupt>
 8001f52:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	e025      	b.n	8001fa6 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	fa22 f303 	lsr.w	r3, r2, r3
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d018      	beq.n	8001fa0 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	015a      	lsls	r2, r3, #5
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4413      	add	r3, r2
 8001f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f84:	d106      	bne.n	8001f94 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f836 	bl	8001ffe <HCD_HC_IN_IRQHandler>
 8001f92:	e005      	b.n	8001fa0 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	4619      	mov	r1, r3
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 fb84 	bl	80026a8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d3d4      	bcc.n	8001f5a <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb8:	615a      	str	r2, [r3, #20]
 8001fba:	e000      	b.n	8001fbe <HAL_HCD_IRQHandler+0x210>
      return;
 8001fbc:	bf00      	nop
    }
  }
}
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_HCD_Stop+0x16>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e00d      	b.n	8001ff6 <HAL_HCD_Stop+0x32>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f002 fffa 	bl	8004fe0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	460b      	mov	r3, r1
 8002008:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	015a      	lsls	r2, r3, #5
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4413      	add	r3, r2
 8002020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b04      	cmp	r3, #4
 800202c:	d11a      	bne.n	8002064 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4413      	add	r3, r2
 8002036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203a:	461a      	mov	r2, r3
 800203c:	2304      	movs	r3, #4
 800203e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	212c      	movs	r1, #44	; 0x2c
 8002046:	fb01 f303 	mul.w	r3, r1, r3
 800204a:	4413      	add	r3, r2
 800204c:	3361      	adds	r3, #97	; 0x61
 800204e:	2206      	movs	r2, #6
 8002050:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f002 fec3 	bl	8004de8 <USB_HC_Halt>
 8002062:	e0af      	b.n	80021c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4413      	add	r3, r2
 800206c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800207a:	d11b      	bne.n	80020b4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	015a      	lsls	r2, r3, #5
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4413      	add	r3, r2
 8002084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002088:	461a      	mov	r2, r3
 800208a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800208e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	212c      	movs	r1, #44	; 0x2c
 8002096:	fb01 f303 	mul.w	r3, r1, r3
 800209a:	4413      	add	r3, r2
 800209c:	3361      	adds	r3, #97	; 0x61
 800209e:	2207      	movs	r2, #7
 80020a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f002 fe9b 	bl	8004de8 <USB_HC_Halt>
 80020b2:	e087      	b.n	80021c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	015a      	lsls	r2, r3, #5
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4413      	add	r3, r2
 80020bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 0320 	and.w	r3, r3, #32
 80020c6:	2b20      	cmp	r3, #32
 80020c8:	d109      	bne.n	80020de <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	015a      	lsls	r2, r3, #5
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d6:	461a      	mov	r2, r3
 80020d8:	2320      	movs	r3, #32
 80020da:	6093      	str	r3, [r2, #8]
 80020dc:	e072      	b.n	80021c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	015a      	lsls	r2, r3, #5
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d11a      	bne.n	800212a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	015a      	lsls	r2, r3, #5
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002100:	461a      	mov	r2, r3
 8002102:	2308      	movs	r3, #8
 8002104:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	212c      	movs	r1, #44	; 0x2c
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	4413      	add	r3, r2
 8002112:	3361      	adds	r3, #97	; 0x61
 8002114:	2205      	movs	r2, #5
 8002116:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	4611      	mov	r1, r2
 8002122:	4618      	mov	r0, r3
 8002124:	f002 fe60 	bl	8004de8 <USB_HC_Halt>
 8002128:	e04c      	b.n	80021c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002140:	d11b      	bne.n	800217a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4413      	add	r3, r2
 800214a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214e:	461a      	mov	r2, r3
 8002150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002154:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	212c      	movs	r1, #44	; 0x2c
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	4413      	add	r3, r2
 8002162:	3361      	adds	r3, #97	; 0x61
 8002164:	2208      	movs	r2, #8
 8002166:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	4611      	mov	r1, r2
 8002172:	4618      	mov	r0, r3
 8002174:	f002 fe38 	bl	8004de8 <USB_HC_Halt>
 8002178:	e024      	b.n	80021c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4413      	add	r3, r2
 8002182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218c:	2b80      	cmp	r3, #128	; 0x80
 800218e:	d119      	bne.n	80021c4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4413      	add	r3, r2
 8002198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219c:	461a      	mov	r2, r3
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	212c      	movs	r1, #44	; 0x2c
 80021a8:	fb01 f303 	mul.w	r3, r1, r3
 80021ac:	4413      	add	r3, r2
 80021ae:	3361      	adds	r3, #97	; 0x61
 80021b0:	2206      	movs	r2, #6
 80021b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	4611      	mov	r1, r2
 80021be:	4618      	mov	r0, r3
 80021c0:	f002 fe12 	bl	8004de8 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021da:	d112      	bne.n	8002202 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	4611      	mov	r1, r2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f002 fdfe 	bl	8004de8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f8:	461a      	mov	r2, r3
 80021fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021fe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002200:	e24e      	b.n	80026a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4413      	add	r3, r2
 800220a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b01      	cmp	r3, #1
 8002216:	f040 80df 	bne.w	80023d8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d019      	beq.n	8002256 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	212c      	movs	r1, #44	; 0x2c
 8002228:	fb01 f303 	mul.w	r3, r1, r3
 800222c:	4413      	add	r3, r2
 800222e:	3348      	adds	r3, #72	; 0x48
 8002230:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	0159      	lsls	r1, r3, #5
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	440b      	add	r3, r1
 800223a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002244:	1ad2      	subs	r2, r2, r3
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	202c      	movs	r0, #44	; 0x2c
 800224c:	fb00 f303 	mul.w	r3, r0, r3
 8002250:	440b      	add	r3, r1
 8002252:	3350      	adds	r3, #80	; 0x50
 8002254:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	212c      	movs	r1, #44	; 0x2c
 800225c:	fb01 f303 	mul.w	r3, r1, r3
 8002260:	4413      	add	r3, r2
 8002262:	3361      	adds	r3, #97	; 0x61
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	212c      	movs	r1, #44	; 0x2c
 800226e:	fb01 f303 	mul.w	r3, r1, r3
 8002272:	4413      	add	r3, r2
 8002274:	335c      	adds	r3, #92	; 0x5c
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4413      	add	r3, r2
 8002282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002286:	461a      	mov	r2, r3
 8002288:	2301      	movs	r3, #1
 800228a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	212c      	movs	r1, #44	; 0x2c
 8002292:	fb01 f303 	mul.w	r3, r1, r3
 8002296:	4413      	add	r3, r2
 8002298:	333f      	adds	r3, #63	; 0x3f
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d009      	beq.n	80022b4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	212c      	movs	r1, #44	; 0x2c
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	333f      	adds	r3, #63	; 0x3f
 80022ae:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d111      	bne.n	80022d8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	4611      	mov	r1, r2
 80022be:	4618      	mov	r0, r3
 80022c0:	f002 fd92 	bl	8004de8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d0:	461a      	mov	r2, r3
 80022d2:	2310      	movs	r3, #16
 80022d4:	6093      	str	r3, [r2, #8]
 80022d6:	e03a      	b.n	800234e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	212c      	movs	r1, #44	; 0x2c
 80022de:	fb01 f303 	mul.w	r3, r1, r3
 80022e2:	4413      	add	r3, r2
 80022e4:	333f      	adds	r3, #63	; 0x3f
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	d009      	beq.n	8002300 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	212c      	movs	r1, #44	; 0x2c
 80022f2:	fb01 f303 	mul.w	r3, r1, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	333f      	adds	r3, #63	; 0x3f
 80022fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d126      	bne.n	800234e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	015a      	lsls	r2, r3, #5
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4413      	add	r3, r2
 8002308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	0151      	lsls	r1, r2, #5
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	440a      	add	r2, r1
 8002316:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800231a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800231e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	212c      	movs	r1, #44	; 0x2c
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	4413      	add	r3, r2
 800232c:	3360      	adds	r3, #96	; 0x60
 800232e:	2201      	movs	r2, #1
 8002330:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	b2d9      	uxtb	r1, r3
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	202c      	movs	r0, #44	; 0x2c
 800233c:	fb00 f303 	mul.w	r3, r0, r3
 8002340:	4413      	add	r3, r2
 8002342:	3360      	adds	r3, #96	; 0x60
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f002 ffa4 	bl	8005296 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d12b      	bne.n	80023ae <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	212c      	movs	r1, #44	; 0x2c
 800235c:	fb01 f303 	mul.w	r3, r1, r3
 8002360:	4413      	add	r3, r2
 8002362:	3348      	adds	r3, #72	; 0x48
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	202c      	movs	r0, #44	; 0x2c
 800236c:	fb00 f202 	mul.w	r2, r0, r2
 8002370:	440a      	add	r2, r1
 8002372:	3240      	adds	r2, #64	; 0x40
 8002374:	8812      	ldrh	r2, [r2, #0]
 8002376:	fbb3 f3f2 	udiv	r3, r3, r2
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 818e 	beq.w	80026a0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	212c      	movs	r1, #44	; 0x2c
 800238a:	fb01 f303 	mul.w	r3, r1, r3
 800238e:	4413      	add	r3, r2
 8002390:	3354      	adds	r3, #84	; 0x54
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	f083 0301 	eor.w	r3, r3, #1
 8002398:	b2d8      	uxtb	r0, r3
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	212c      	movs	r1, #44	; 0x2c
 80023a0:	fb01 f303 	mul.w	r3, r1, r3
 80023a4:	4413      	add	r3, r2
 80023a6:	3354      	adds	r3, #84	; 0x54
 80023a8:	4602      	mov	r2, r0
 80023aa:	701a      	strb	r2, [r3, #0]
}
 80023ac:	e178      	b.n	80026a0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	212c      	movs	r1, #44	; 0x2c
 80023b4:	fb01 f303 	mul.w	r3, r1, r3
 80023b8:	4413      	add	r3, r2
 80023ba:	3354      	adds	r3, #84	; 0x54
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	f083 0301 	eor.w	r3, r3, #1
 80023c2:	b2d8      	uxtb	r0, r3
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	212c      	movs	r1, #44	; 0x2c
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	3354      	adds	r3, #84	; 0x54
 80023d2:	4602      	mov	r2, r0
 80023d4:	701a      	strb	r2, [r3, #0]
}
 80023d6:	e163      	b.n	80026a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	f040 80f6 	bne.w	80025dc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	212c      	movs	r1, #44	; 0x2c
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	3361      	adds	r3, #97	; 0x61
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d109      	bne.n	8002418 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	212c      	movs	r1, #44	; 0x2c
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	4413      	add	r3, r2
 8002410:	3360      	adds	r3, #96	; 0x60
 8002412:	2201      	movs	r2, #1
 8002414:	701a      	strb	r2, [r3, #0]
 8002416:	e0c9      	b.n	80025ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	212c      	movs	r1, #44	; 0x2c
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	4413      	add	r3, r2
 8002424:	3361      	adds	r3, #97	; 0x61
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b05      	cmp	r3, #5
 800242a:	d109      	bne.n	8002440 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	212c      	movs	r1, #44	; 0x2c
 8002432:	fb01 f303 	mul.w	r3, r1, r3
 8002436:	4413      	add	r3, r2
 8002438:	3360      	adds	r3, #96	; 0x60
 800243a:	2205      	movs	r2, #5
 800243c:	701a      	strb	r2, [r3, #0]
 800243e:	e0b5      	b.n	80025ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	212c      	movs	r1, #44	; 0x2c
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	4413      	add	r3, r2
 800244c:	3361      	adds	r3, #97	; 0x61
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b06      	cmp	r3, #6
 8002452:	d009      	beq.n	8002468 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	212c      	movs	r1, #44	; 0x2c
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	4413      	add	r3, r2
 8002460:	3361      	adds	r3, #97	; 0x61
 8002462:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002464:	2b08      	cmp	r3, #8
 8002466:	d150      	bne.n	800250a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	212c      	movs	r1, #44	; 0x2c
 800246e:	fb01 f303 	mul.w	r3, r1, r3
 8002472:	4413      	add	r3, r2
 8002474:	335c      	adds	r3, #92	; 0x5c
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	202c      	movs	r0, #44	; 0x2c
 8002480:	fb00 f303 	mul.w	r3, r0, r3
 8002484:	440b      	add	r3, r1
 8002486:	335c      	adds	r3, #92	; 0x5c
 8002488:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	212c      	movs	r1, #44	; 0x2c
 8002490:	fb01 f303 	mul.w	r3, r1, r3
 8002494:	4413      	add	r3, r2
 8002496:	335c      	adds	r3, #92	; 0x5c
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d912      	bls.n	80024c4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	212c      	movs	r1, #44	; 0x2c
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	4413      	add	r3, r2
 80024aa:	335c      	adds	r3, #92	; 0x5c
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	212c      	movs	r1, #44	; 0x2c
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	3360      	adds	r3, #96	; 0x60
 80024be:	2204      	movs	r2, #4
 80024c0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024c2:	e073      	b.n	80025ac <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	212c      	movs	r1, #44	; 0x2c
 80024ca:	fb01 f303 	mul.w	r3, r1, r3
 80024ce:	4413      	add	r3, r2
 80024d0:	3360      	adds	r3, #96	; 0x60
 80024d2:	2202      	movs	r2, #2
 80024d4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024ec:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024f4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	015a      	lsls	r2, r3, #5
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002502:	461a      	mov	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002508:	e050      	b.n	80025ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	212c      	movs	r1, #44	; 0x2c
 8002510:	fb01 f303 	mul.w	r3, r1, r3
 8002514:	4413      	add	r3, r2
 8002516:	3361      	adds	r3, #97	; 0x61
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b03      	cmp	r3, #3
 800251c:	d122      	bne.n	8002564 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	212c      	movs	r1, #44	; 0x2c
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	4413      	add	r3, r2
 800252a:	3360      	adds	r3, #96	; 0x60
 800252c:	2202      	movs	r2, #2
 800252e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4413      	add	r3, r2
 8002538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002546:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800254e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4413      	add	r3, r2
 8002558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255c:	461a      	mov	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e023      	b.n	80025ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	212c      	movs	r1, #44	; 0x2c
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	4413      	add	r3, r2
 8002570:	3361      	adds	r3, #97	; 0x61
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b07      	cmp	r3, #7
 8002576:	d119      	bne.n	80025ac <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	212c      	movs	r1, #44	; 0x2c
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	4413      	add	r3, r2
 8002584:	335c      	adds	r3, #92	; 0x5c
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	202c      	movs	r0, #44	; 0x2c
 8002590:	fb00 f303 	mul.w	r3, r0, r3
 8002594:	440b      	add	r3, r1
 8002596:	335c      	adds	r3, #92	; 0x5c
 8002598:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	3360      	adds	r3, #96	; 0x60
 80025a8:	2204      	movs	r2, #4
 80025aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b8:	461a      	mov	r2, r3
 80025ba:	2302      	movs	r3, #2
 80025bc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	b2d9      	uxtb	r1, r3
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	202c      	movs	r0, #44	; 0x2c
 80025c8:	fb00 f303 	mul.w	r3, r0, r3
 80025cc:	4413      	add	r3, r2
 80025ce:	3360      	adds	r3, #96	; 0x60
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f002 fe5e 	bl	8005296 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80025da:	e061      	b.n	80026a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b10      	cmp	r3, #16
 80025f0:	d156      	bne.n	80026a0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	212c      	movs	r1, #44	; 0x2c
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	333f      	adds	r3, #63	; 0x3f
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b03      	cmp	r3, #3
 8002604:	d111      	bne.n	800262a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	212c      	movs	r1, #44	; 0x2c
 800260c:	fb01 f303 	mul.w	r3, r1, r3
 8002610:	4413      	add	r3, r2
 8002612:	335c      	adds	r3, #92	; 0x5c
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	4611      	mov	r1, r2
 8002622:	4618      	mov	r0, r3
 8002624:	f002 fbe0 	bl	8004de8 <USB_HC_Halt>
 8002628:	e031      	b.n	800268e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	333f      	adds	r3, #63	; 0x3f
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d009      	beq.n	8002652 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	212c      	movs	r1, #44	; 0x2c
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	333f      	adds	r3, #63	; 0x3f
 800264c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800264e:	2b02      	cmp	r3, #2
 8002650:	d11d      	bne.n	800268e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	212c      	movs	r1, #44	; 0x2c
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	4413      	add	r3, r2
 800265e:	335c      	adds	r3, #92	; 0x5c
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d110      	bne.n	800268e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	212c      	movs	r1, #44	; 0x2c
 8002672:	fb01 f303 	mul.w	r3, r1, r3
 8002676:	4413      	add	r3, r2
 8002678:	3361      	adds	r3, #97	; 0x61
 800267a:	2203      	movs	r2, #3
 800267c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f002 fbad 	bl	8004de8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4413      	add	r3, r2
 8002696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269a:	461a      	mov	r2, r3
 800269c:	2310      	movs	r3, #16
 800269e:	6093      	str	r3, [r2, #8]
}
 80026a0:	bf00      	nop
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80026be:	78fb      	ldrb	r3, [r7, #3]
 80026c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d11a      	bne.n	800270e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e4:	461a      	mov	r2, r3
 80026e6:	2304      	movs	r3, #4
 80026e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	212c      	movs	r1, #44	; 0x2c
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	4413      	add	r3, r2
 80026f6:	3361      	adds	r3, #97	; 0x61
 80026f8:	2206      	movs	r2, #6
 80026fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	4611      	mov	r1, r2
 8002706:	4618      	mov	r0, r3
 8002708:	f002 fb6e 	bl	8004de8 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800270c:	e331      	b.n	8002d72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	015a      	lsls	r2, r3, #5
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	4413      	add	r3, r2
 8002716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0320 	and.w	r3, r3, #32
 8002720:	2b20      	cmp	r3, #32
 8002722:	d12e      	bne.n	8002782 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	461a      	mov	r2, r3
 8002732:	2320      	movs	r3, #32
 8002734:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	333d      	adds	r3, #61	; 0x3d
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b01      	cmp	r3, #1
 8002748:	f040 8313 	bne.w	8002d72 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	212c      	movs	r1, #44	; 0x2c
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	4413      	add	r3, r2
 8002758:	333d      	adds	r3, #61	; 0x3d
 800275a:	2200      	movs	r2, #0
 800275c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	3360      	adds	r3, #96	; 0x60
 800276c:	2202      	movs	r2, #2
 800276e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f002 fb34 	bl	8004de8 <USB_HC_Halt>
}
 8002780:	e2f7      	b.n	8002d72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	4413      	add	r3, r2
 800278a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002798:	d112      	bne.n	80027c0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a6:	461a      	mov	r2, r3
 80027a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027ac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f002 fb15 	bl	8004de8 <USB_HC_Halt>
}
 80027be:	e2d8      	b.n	8002d72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d140      	bne.n	8002858 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	212c      	movs	r1, #44	; 0x2c
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	335c      	adds	r3, #92	; 0x5c
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	015a      	lsls	r2, r3, #5
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fa:	2b40      	cmp	r3, #64	; 0x40
 80027fc:	d111      	bne.n	8002822 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	212c      	movs	r1, #44	; 0x2c
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	333d      	adds	r3, #61	; 0x3d
 800280c:	2201      	movs	r2, #1
 800280e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281c:	461a      	mov	r2, r3
 800281e:	2340      	movs	r3, #64	; 0x40
 8002820:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	015a      	lsls	r2, r3, #5
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	4413      	add	r3, r2
 800282a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282e:	461a      	mov	r2, r3
 8002830:	2301      	movs	r3, #1
 8002832:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	212c      	movs	r1, #44	; 0x2c
 800283a:	fb01 f303 	mul.w	r3, r1, r3
 800283e:	4413      	add	r3, r2
 8002840:	3361      	adds	r3, #97	; 0x61
 8002842:	2201      	movs	r2, #1
 8002844:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	4611      	mov	r1, r2
 8002850:	4618      	mov	r0, r3
 8002852:	f002 fac9 	bl	8004de8 <USB_HC_Halt>
}
 8002856:	e28c      	b.n	8002d72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	4413      	add	r3, r2
 8002860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	d12c      	bne.n	80028c8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	212c      	movs	r1, #44	; 0x2c
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	3361      	adds	r3, #97	; 0x61
 800287c:	2204      	movs	r2, #4
 800287e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	212c      	movs	r1, #44	; 0x2c
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	333d      	adds	r3, #61	; 0x3d
 800288e:	2201      	movs	r2, #1
 8002890:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	335c      	adds	r3, #92	; 0x5c
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	4611      	mov	r1, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f002 fa9a 	bl	8004de8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c0:	461a      	mov	r2, r3
 80028c2:	2340      	movs	r3, #64	; 0x40
 80028c4:	6093      	str	r3, [r2, #8]
}
 80028c6:	e254      	b.n	8002d72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	015a      	lsls	r2, r3, #5
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	4413      	add	r3, r2
 80028d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d11a      	bne.n	8002914 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ea:	461a      	mov	r2, r3
 80028ec:	2308      	movs	r3, #8
 80028ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	212c      	movs	r1, #44	; 0x2c
 80028f6:	fb01 f303 	mul.w	r3, r1, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	3361      	adds	r3, #97	; 0x61
 80028fe:	2205      	movs	r2, #5
 8002900:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f002 fa6b 	bl	8004de8 <USB_HC_Halt>
}
 8002912:	e22e      	b.n	8002d72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	4413      	add	r3, r2
 800291c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0310 	and.w	r3, r3, #16
 8002926:	2b10      	cmp	r3, #16
 8002928:	d140      	bne.n	80029ac <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	212c      	movs	r1, #44	; 0x2c
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	4413      	add	r3, r2
 8002936:	335c      	adds	r3, #92	; 0x5c
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	212c      	movs	r1, #44	; 0x2c
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	4413      	add	r3, r2
 8002948:	3361      	adds	r3, #97	; 0x61
 800294a:	2203      	movs	r2, #3
 800294c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	212c      	movs	r1, #44	; 0x2c
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	333d      	adds	r3, #61	; 0x3d
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d112      	bne.n	8002988 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	212c      	movs	r1, #44	; 0x2c
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	4413      	add	r3, r2
 800296e:	333c      	adds	r3, #60	; 0x3c
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d108      	bne.n	8002988 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	333d      	adds	r3, #61	; 0x3d
 8002984:	2201      	movs	r2, #1
 8002986:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	4611      	mov	r1, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f002 fa28 	bl	8004de8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	461a      	mov	r2, r3
 80029a6:	2310      	movs	r3, #16
 80029a8:	6093      	str	r3, [r2, #8]
}
 80029aa:	e1e2      	b.n	8002d72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029be:	2b80      	cmp	r3, #128	; 0x80
 80029c0:	d164      	bne.n	8002a8c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d111      	bne.n	80029ee <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	212c      	movs	r1, #44	; 0x2c
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	3361      	adds	r3, #97	; 0x61
 80029d8:	2206      	movs	r2, #6
 80029da:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	4611      	mov	r1, r2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f002 f9fe 	bl	8004de8 <USB_HC_Halt>
 80029ec:	e044      	b.n	8002a78 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	212c      	movs	r1, #44	; 0x2c
 80029f4:	fb01 f303 	mul.w	r3, r1, r3
 80029f8:	4413      	add	r3, r2
 80029fa:	335c      	adds	r3, #92	; 0x5c
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	202c      	movs	r0, #44	; 0x2c
 8002a06:	fb00 f303 	mul.w	r3, r0, r3
 8002a0a:	440b      	add	r3, r1
 8002a0c:	335c      	adds	r3, #92	; 0x5c
 8002a0e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	212c      	movs	r1, #44	; 0x2c
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	335c      	adds	r3, #92	; 0x5c
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d920      	bls.n	8002a66 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	335c      	adds	r3, #92	; 0x5c
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	212c      	movs	r1, #44	; 0x2c
 8002a3c:	fb01 f303 	mul.w	r3, r1, r3
 8002a40:	4413      	add	r3, r2
 8002a42:	3360      	adds	r3, #96	; 0x60
 8002a44:	2204      	movs	r2, #4
 8002a46:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	b2d9      	uxtb	r1, r3
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	202c      	movs	r0, #44	; 0x2c
 8002a52:	fb00 f303 	mul.w	r3, r0, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	3360      	adds	r3, #96	; 0x60
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f002 fc19 	bl	8005296 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a64:	e008      	b.n	8002a78 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	212c      	movs	r1, #44	; 0x2c
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	3360      	adds	r3, #96	; 0x60
 8002a74:	2202      	movs	r2, #2
 8002a76:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a84:	461a      	mov	r2, r3
 8002a86:	2380      	movs	r3, #128	; 0x80
 8002a88:	6093      	str	r3, [r2, #8]
}
 8002a8a:	e172      	b.n	8002d72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa2:	d11b      	bne.n	8002adc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3361      	adds	r3, #97	; 0x61
 8002ab2:	2208      	movs	r2, #8
 8002ab4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f002 f991 	bl	8004de8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ad8:	6093      	str	r3, [r2, #8]
}
 8002ada:	e14a      	b.n	8002d72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	f040 813f 	bne.w	8002d72 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	212c      	movs	r1, #44	; 0x2c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	3361      	adds	r3, #97	; 0x61
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d17d      	bne.n	8002c04 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	212c      	movs	r1, #44	; 0x2c
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	3360      	adds	r3, #96	; 0x60
 8002b16:	2201      	movs	r2, #1
 8002b18:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	212c      	movs	r1, #44	; 0x2c
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	333f      	adds	r3, #63	; 0x3f
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d00a      	beq.n	8002b44 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	333f      	adds	r3, #63	; 0x3f
 8002b3c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	f040 8100 	bne.w	8002d44 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d113      	bne.n	8002b74 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	212c      	movs	r1, #44	; 0x2c
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	4413      	add	r3, r2
 8002b58:	3355      	adds	r3, #85	; 0x55
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	f083 0301 	eor.w	r3, r3, #1
 8002b60:	b2d8      	uxtb	r0, r3
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3355      	adds	r3, #85	; 0x55
 8002b70:	4602      	mov	r2, r0
 8002b72:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	f040 80e3 	bne.w	8002d44 <HCD_HC_OUT_IRQHandler+0x69c>
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	212c      	movs	r1, #44	; 0x2c
 8002b84:	fb01 f303 	mul.w	r3, r1, r3
 8002b88:	4413      	add	r3, r2
 8002b8a:	334c      	adds	r3, #76	; 0x4c
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 80d8 	beq.w	8002d44 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	212c      	movs	r1, #44	; 0x2c
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	334c      	adds	r3, #76	; 0x4c
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	202c      	movs	r0, #44	; 0x2c
 8002baa:	fb00 f202 	mul.w	r2, r0, r2
 8002bae:	440a      	add	r2, r1
 8002bb0:	3240      	adds	r2, #64	; 0x40
 8002bb2:	8812      	ldrh	r2, [r2, #0]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	202c      	movs	r0, #44	; 0x2c
 8002bbe:	fb00 f202 	mul.w	r2, r0, r2
 8002bc2:	440a      	add	r2, r1
 8002bc4:	3240      	adds	r2, #64	; 0x40
 8002bc6:	8812      	ldrh	r2, [r2, #0]
 8002bc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 80b5 	beq.w	8002d44 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	212c      	movs	r1, #44	; 0x2c
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	4413      	add	r3, r2
 8002be6:	3355      	adds	r3, #85	; 0x55
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	f083 0301 	eor.w	r3, r3, #1
 8002bee:	b2d8      	uxtb	r0, r3
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3355      	adds	r3, #85	; 0x55
 8002bfe:	4602      	mov	r2, r0
 8002c00:	701a      	strb	r2, [r3, #0]
 8002c02:	e09f      	b.n	8002d44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	212c      	movs	r1, #44	; 0x2c
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	3361      	adds	r3, #97	; 0x61
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d109      	bne.n	8002c2c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	212c      	movs	r1, #44	; 0x2c
 8002c1e:	fb01 f303 	mul.w	r3, r1, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	3360      	adds	r3, #96	; 0x60
 8002c26:	2202      	movs	r2, #2
 8002c28:	701a      	strb	r2, [r3, #0]
 8002c2a:	e08b      	b.n	8002d44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	3361      	adds	r3, #97	; 0x61
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d109      	bne.n	8002c54 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3360      	adds	r3, #96	; 0x60
 8002c4e:	2202      	movs	r2, #2
 8002c50:	701a      	strb	r2, [r3, #0]
 8002c52:	e077      	b.n	8002d44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	212c      	movs	r1, #44	; 0x2c
 8002c5a:	fb01 f303 	mul.w	r3, r1, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	3361      	adds	r3, #97	; 0x61
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d109      	bne.n	8002c7c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	212c      	movs	r1, #44	; 0x2c
 8002c6e:	fb01 f303 	mul.w	r3, r1, r3
 8002c72:	4413      	add	r3, r2
 8002c74:	3360      	adds	r3, #96	; 0x60
 8002c76:	2205      	movs	r2, #5
 8002c78:	701a      	strb	r2, [r3, #0]
 8002c7a:	e063      	b.n	8002d44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	212c      	movs	r1, #44	; 0x2c
 8002c82:	fb01 f303 	mul.w	r3, r1, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	3361      	adds	r3, #97	; 0x61
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b06      	cmp	r3, #6
 8002c8e:	d009      	beq.n	8002ca4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	212c      	movs	r1, #44	; 0x2c
 8002c96:	fb01 f303 	mul.w	r3, r1, r3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3361      	adds	r3, #97	; 0x61
 8002c9e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d14f      	bne.n	8002d44 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	212c      	movs	r1, #44	; 0x2c
 8002caa:	fb01 f303 	mul.w	r3, r1, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	335c      	adds	r3, #92	; 0x5c
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	202c      	movs	r0, #44	; 0x2c
 8002cbc:	fb00 f303 	mul.w	r3, r0, r3
 8002cc0:	440b      	add	r3, r1
 8002cc2:	335c      	adds	r3, #92	; 0x5c
 8002cc4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	212c      	movs	r1, #44	; 0x2c
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	335c      	adds	r3, #92	; 0x5c
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d912      	bls.n	8002d00 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	212c      	movs	r1, #44	; 0x2c
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	335c      	adds	r3, #92	; 0x5c
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	212c      	movs	r1, #44	; 0x2c
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3360      	adds	r3, #96	; 0x60
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	701a      	strb	r2, [r3, #0]
 8002cfe:	e021      	b.n	8002d44 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	212c      	movs	r1, #44	; 0x2c
 8002d06:	fb01 f303 	mul.w	r3, r1, r3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3360      	adds	r3, #96	; 0x60
 8002d0e:	2202      	movs	r2, #2
 8002d10:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d28:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d30:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3e:	461a      	mov	r2, r3
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d50:	461a      	mov	r2, r3
 8002d52:	2302      	movs	r3, #2
 8002d54:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	b2d9      	uxtb	r1, r3
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	202c      	movs	r0, #44	; 0x2c
 8002d60:	fb00 f303 	mul.w	r3, r0, r3
 8002d64:	4413      	add	r3, r2
 8002d66:	3360      	adds	r3, #96	; 0x60
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f002 fa92 	bl	8005296 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d72:	bf00      	nop
 8002d74:	3720      	adds	r7, #32
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b08a      	sub	sp, #40	; 0x28
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	0c5b      	lsrs	r3, r3, #17
 8002da0:	f003 030f 	and.w	r3, r3, #15
 8002da4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dae:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d004      	beq.n	8002dc0 <HCD_RXQLVL_IRQHandler+0x46>
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b05      	cmp	r3, #5
 8002dba:	f000 80a9 	beq.w	8002f10 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002dbe:	e0aa      	b.n	8002f16 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80a6 	beq.w	8002f14 <HCD_RXQLVL_IRQHandler+0x19a>
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	212c      	movs	r1, #44	; 0x2c
 8002dce:	fb01 f303 	mul.w	r3, r1, r3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3344      	adds	r3, #68	; 0x44
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 809b 	beq.w	8002f14 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	212c      	movs	r1, #44	; 0x2c
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	3350      	adds	r3, #80	; 0x50
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	441a      	add	r2, r3
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	202c      	movs	r0, #44	; 0x2c
 8002df8:	fb00 f303 	mul.w	r3, r0, r3
 8002dfc:	440b      	add	r3, r1
 8002dfe:	334c      	adds	r3, #76	; 0x4c
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d87a      	bhi.n	8002efc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	212c      	movs	r1, #44	; 0x2c
 8002e10:	fb01 f303 	mul.w	r3, r1, r3
 8002e14:	4413      	add	r3, r2
 8002e16:	3344      	adds	r3, #68	; 0x44
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	b292      	uxth	r2, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	f001 ff1e 	bl	8004c60 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	212c      	movs	r1, #44	; 0x2c
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	4413      	add	r3, r2
 8002e30:	3344      	adds	r3, #68	; 0x44
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	441a      	add	r2, r3
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	202c      	movs	r0, #44	; 0x2c
 8002e3e:	fb00 f303 	mul.w	r3, r0, r3
 8002e42:	440b      	add	r3, r1
 8002e44:	3344      	adds	r3, #68	; 0x44
 8002e46:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	212c      	movs	r1, #44	; 0x2c
 8002e4e:	fb01 f303 	mul.w	r3, r1, r3
 8002e52:	4413      	add	r3, r2
 8002e54:	3350      	adds	r3, #80	; 0x50
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	441a      	add	r2, r3
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	202c      	movs	r0, #44	; 0x2c
 8002e62:	fb00 f303 	mul.w	r3, r0, r3
 8002e66:	440b      	add	r3, r1
 8002e68:	3350      	adds	r3, #80	; 0x50
 8002e6a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	0cdb      	lsrs	r3, r3, #19
 8002e7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e80:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	212c      	movs	r1, #44	; 0x2c
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3340      	adds	r3, #64	; 0x40
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d13c      	bne.n	8002f14 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d039      	beq.n	8002f14 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002eb6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ebe:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ecc:	461a      	mov	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	212c      	movs	r1, #44	; 0x2c
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	4413      	add	r3, r2
 8002ede:	3354      	adds	r3, #84	; 0x54
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	f083 0301 	eor.w	r3, r3, #1
 8002ee6:	b2d8      	uxtb	r0, r3
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	212c      	movs	r1, #44	; 0x2c
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3354      	adds	r3, #84	; 0x54
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	701a      	strb	r2, [r3, #0]
      break;
 8002efa:	e00b      	b.n	8002f14 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	212c      	movs	r1, #44	; 0x2c
 8002f02:	fb01 f303 	mul.w	r3, r1, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	3360      	adds	r3, #96	; 0x60
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	701a      	strb	r2, [r3, #0]
      break;
 8002f0e:	e001      	b.n	8002f14 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002f10:	bf00      	nop
 8002f12:	e000      	b.n	8002f16 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002f14:	bf00      	nop
  }
}
 8002f16:	bf00      	nop
 8002f18:	3728      	adds	r7, #40	; 0x28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b086      	sub	sp, #24
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f4a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d10b      	bne.n	8002f6e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d102      	bne.n	8002f66 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f002 f97c 	bl	800525e <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f043 0302 	orr.w	r3, r3, #2
 8002f6c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d132      	bne.n	8002fde <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f043 0308 	orr.w	r3, r3, #8
 8002f7e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d126      	bne.n	8002fd8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d113      	bne.n	8002fba <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f9c:	d106      	bne.n	8002fac <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2102      	movs	r1, #2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f001 fed4 	bl	8004d52 <USB_InitFSLSPClkSel>
 8002faa:	e011      	b.n	8002fd0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f001 fecd 	bl	8004d52 <USB_InitFSLSPClkSel>
 8002fb8:	e00a      	b.n	8002fd0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d106      	bne.n	8002fd0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fc8:	461a      	mov	r2, r3
 8002fca:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002fce:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f002 f96e 	bl	80052b2 <HAL_HCD_PortEnabled_Callback>
 8002fd6:	e002      	b.n	8002fde <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f002 f978 	bl	80052ce <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f003 0320 	and.w	r3, r3, #32
 8002fe4:	2b20      	cmp	r3, #32
 8002fe6:	d103      	bne.n	8002ff0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f043 0320 	orr.w	r3, r3, #32
 8002fee:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	6013      	str	r3, [r2, #0]
}
 8002ffc:	bf00      	nop
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e12b      	b.n	800326e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fd fad4 	bl	80005d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2224      	movs	r2, #36	; 0x24
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0201 	bic.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003056:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003066:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003068:	f001 fc76 	bl	8004958 <HAL_RCC_GetPCLK1Freq>
 800306c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	4a81      	ldr	r2, [pc, #516]	; (8003278 <HAL_I2C_Init+0x274>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d807      	bhi.n	8003088 <HAL_I2C_Init+0x84>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4a80      	ldr	r2, [pc, #512]	; (800327c <HAL_I2C_Init+0x278>)
 800307c:	4293      	cmp	r3, r2
 800307e:	bf94      	ite	ls
 8003080:	2301      	movls	r3, #1
 8003082:	2300      	movhi	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	e006      	b.n	8003096 <HAL_I2C_Init+0x92>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4a7d      	ldr	r2, [pc, #500]	; (8003280 <HAL_I2C_Init+0x27c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	bf94      	ite	ls
 8003090:	2301      	movls	r3, #1
 8003092:	2300      	movhi	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e0e7      	b.n	800326e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4a78      	ldr	r2, [pc, #480]	; (8003284 <HAL_I2C_Init+0x280>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	0c9b      	lsrs	r3, r3, #18
 80030a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	4a6a      	ldr	r2, [pc, #424]	; (8003278 <HAL_I2C_Init+0x274>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d802      	bhi.n	80030d8 <HAL_I2C_Init+0xd4>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	3301      	adds	r3, #1
 80030d6:	e009      	b.n	80030ec <HAL_I2C_Init+0xe8>
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030de:	fb02 f303 	mul.w	r3, r2, r3
 80030e2:	4a69      	ldr	r2, [pc, #420]	; (8003288 <HAL_I2C_Init+0x284>)
 80030e4:	fba2 2303 	umull	r2, r3, r2, r3
 80030e8:	099b      	lsrs	r3, r3, #6
 80030ea:	3301      	adds	r3, #1
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6812      	ldr	r2, [r2, #0]
 80030f0:	430b      	orrs	r3, r1
 80030f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	495c      	ldr	r1, [pc, #368]	; (8003278 <HAL_I2C_Init+0x274>)
 8003108:	428b      	cmp	r3, r1
 800310a:	d819      	bhi.n	8003140 <HAL_I2C_Init+0x13c>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	1e59      	subs	r1, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	fbb1 f3f3 	udiv	r3, r1, r3
 800311a:	1c59      	adds	r1, r3, #1
 800311c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003120:	400b      	ands	r3, r1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <HAL_I2C_Init+0x138>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1e59      	subs	r1, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	fbb1 f3f3 	udiv	r3, r1, r3
 8003134:	3301      	adds	r3, #1
 8003136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800313a:	e051      	b.n	80031e0 <HAL_I2C_Init+0x1dc>
 800313c:	2304      	movs	r3, #4
 800313e:	e04f      	b.n	80031e0 <HAL_I2C_Init+0x1dc>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d111      	bne.n	800316c <HAL_I2C_Init+0x168>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1e58      	subs	r0, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6859      	ldr	r1, [r3, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	440b      	add	r3, r1
 8003156:	fbb0 f3f3 	udiv	r3, r0, r3
 800315a:	3301      	adds	r3, #1
 800315c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf0c      	ite	eq
 8003164:	2301      	moveq	r3, #1
 8003166:	2300      	movne	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e012      	b.n	8003192 <HAL_I2C_Init+0x18e>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	1e58      	subs	r0, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6859      	ldr	r1, [r3, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	0099      	lsls	r1, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003182:	3301      	adds	r3, #1
 8003184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_I2C_Init+0x196>
 8003196:	2301      	movs	r3, #1
 8003198:	e022      	b.n	80031e0 <HAL_I2C_Init+0x1dc>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10e      	bne.n	80031c0 <HAL_I2C_Init+0x1bc>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1e58      	subs	r0, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6859      	ldr	r1, [r3, #4]
 80031aa:	460b      	mov	r3, r1
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	440b      	add	r3, r1
 80031b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b4:	3301      	adds	r3, #1
 80031b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031be:	e00f      	b.n	80031e0 <HAL_I2C_Init+0x1dc>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	1e58      	subs	r0, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6859      	ldr	r1, [r3, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	0099      	lsls	r1, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d6:	3301      	adds	r3, #1
 80031d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	6809      	ldr	r1, [r1, #0]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69da      	ldr	r2, [r3, #28]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800320e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6911      	ldr	r1, [r2, #16]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	68d2      	ldr	r2, [r2, #12]
 800321a:	4311      	orrs	r1, r2
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	430b      	orrs	r3, r1
 8003222:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	000186a0 	.word	0x000186a0
 800327c:	001e847f 	.word	0x001e847f
 8003280:	003d08ff 	.word	0x003d08ff
 8003284:	431bde83 	.word	0x431bde83
 8003288:	10624dd3 	.word	0x10624dd3

0800328c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e021      	b.n	80032e2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2224      	movs	r2, #36	; 0x24
 80032a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0201 	bic.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fd f9d6 	bl	8000668 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
	...

080032ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	4608      	mov	r0, r1
 80032f6:	4611      	mov	r1, r2
 80032f8:	461a      	mov	r2, r3
 80032fa:	4603      	mov	r3, r0
 80032fc:	817b      	strh	r3, [r7, #10]
 80032fe:	460b      	mov	r3, r1
 8003300:	813b      	strh	r3, [r7, #8]
 8003302:	4613      	mov	r3, r2
 8003304:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003306:	f7fe f9b3 	bl	8001670 <HAL_GetTick>
 800330a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b20      	cmp	r3, #32
 8003316:	f040 80d9 	bne.w	80034cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	2319      	movs	r3, #25
 8003320:	2201      	movs	r2, #1
 8003322:	496d      	ldr	r1, [pc, #436]	; (80034d8 <HAL_I2C_Mem_Write+0x1ec>)
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 fc8d 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003330:	2302      	movs	r3, #2
 8003332:	e0cc      	b.n	80034ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <HAL_I2C_Mem_Write+0x56>
 800333e:	2302      	movs	r3, #2
 8003340:	e0c5      	b.n	80034ce <HAL_I2C_Mem_Write+0x1e2>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b01      	cmp	r3, #1
 8003356:	d007      	beq.n	8003368 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0201 	orr.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003376:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2221      	movs	r2, #33	; 0x21
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2240      	movs	r2, #64	; 0x40
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a3a      	ldr	r2, [r7, #32]
 8003392:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003398:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4a4d      	ldr	r2, [pc, #308]	; (80034dc <HAL_I2C_Mem_Write+0x1f0>)
 80033a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033aa:	88f8      	ldrh	r0, [r7, #6]
 80033ac:	893a      	ldrh	r2, [r7, #8]
 80033ae:	8979      	ldrh	r1, [r7, #10]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	9301      	str	r3, [sp, #4]
 80033b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	4603      	mov	r3, r0
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 fac4 	bl	8003948 <I2C_RequestMemoryWrite>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d052      	beq.n	800346c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e081      	b.n	80034ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 fd0e 	bl	8003df0 <I2C_WaitOnTXEFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00d      	beq.n	80033f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d107      	bne.n	80033f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e06b      	b.n	80034ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	781a      	ldrb	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b04      	cmp	r3, #4
 8003432:	d11b      	bne.n	800346c <HAL_I2C_Mem_Write+0x180>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003438:	2b00      	cmp	r3, #0
 800343a:	d017      	beq.n	800346c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	781a      	ldrb	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003456:	3b01      	subs	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1aa      	bne.n	80033ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 fcfa 	bl	8003e72 <I2C_WaitOnBTFFlagUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00d      	beq.n	80034a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	2b04      	cmp	r3, #4
 800348a:	d107      	bne.n	800349c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800349a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e016      	b.n	80034ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	e000      	b.n	80034ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80034cc:	2302      	movs	r3, #2
  }
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	00100002 	.word	0x00100002
 80034dc:	ffff0000 	.word	0xffff0000

080034e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08c      	sub	sp, #48	; 0x30
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	4608      	mov	r0, r1
 80034ea:	4611      	mov	r1, r2
 80034ec:	461a      	mov	r2, r3
 80034ee:	4603      	mov	r3, r0
 80034f0:	817b      	strh	r3, [r7, #10]
 80034f2:	460b      	mov	r3, r1
 80034f4:	813b      	strh	r3, [r7, #8]
 80034f6:	4613      	mov	r3, r2
 80034f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034fa:	f7fe f8b9 	bl	8001670 <HAL_GetTick>
 80034fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b20      	cmp	r3, #32
 800350a:	f040 8208 	bne.w	800391e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	2319      	movs	r3, #25
 8003514:	2201      	movs	r2, #1
 8003516:	497b      	ldr	r1, [pc, #492]	; (8003704 <HAL_I2C_Mem_Read+0x224>)
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 fb93 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003524:	2302      	movs	r3, #2
 8003526:	e1fb      	b.n	8003920 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_I2C_Mem_Read+0x56>
 8003532:	2302      	movs	r3, #2
 8003534:	e1f4      	b.n	8003920 <HAL_I2C_Mem_Read+0x440>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b01      	cmp	r3, #1
 800354a:	d007      	beq.n	800355c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0201 	orr.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800356a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2222      	movs	r2, #34	; 0x22
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2240      	movs	r2, #64	; 0x40
 8003578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003586:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800358c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4a5b      	ldr	r2, [pc, #364]	; (8003708 <HAL_I2C_Mem_Read+0x228>)
 800359c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800359e:	88f8      	ldrh	r0, [r7, #6]
 80035a0:	893a      	ldrh	r2, [r7, #8]
 80035a2:	8979      	ldrh	r1, [r7, #10]
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	9301      	str	r3, [sp, #4]
 80035a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	4603      	mov	r3, r0
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 fa60 	bl	8003a74 <I2C_RequestMemoryRead>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e1b0      	b.n	8003920 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d113      	bne.n	80035ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c6:	2300      	movs	r3, #0
 80035c8:	623b      	str	r3, [r7, #32]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	623b      	str	r3, [r7, #32]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	623b      	str	r3, [r7, #32]
 80035da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	e184      	b.n	80038f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d11b      	bne.n	800362e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003604:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	61fb      	str	r3, [r7, #28]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	61fb      	str	r3, [r7, #28]
 800361a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	e164      	b.n	80038f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003632:	2b02      	cmp	r3, #2
 8003634:	d11b      	bne.n	800366e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003644:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003654:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003656:	2300      	movs	r3, #0
 8003658:	61bb      	str	r3, [r7, #24]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	61bb      	str	r3, [r7, #24]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	61bb      	str	r3, [r7, #24]
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	e144      	b.n	80038f8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	617b      	str	r3, [r7, #20]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	617b      	str	r3, [r7, #20]
 8003682:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003684:	e138      	b.n	80038f8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368a:	2b03      	cmp	r3, #3
 800368c:	f200 80f1 	bhi.w	8003872 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003694:	2b01      	cmp	r3, #1
 8003696:	d123      	bne.n	80036e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 fc29 	bl	8003ef4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e139      	b.n	8003920 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036de:	e10b      	b.n	80038f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d14e      	bne.n	8003786 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ee:	2200      	movs	r2, #0
 80036f0:	4906      	ldr	r1, [pc, #24]	; (800370c <HAL_I2C_Mem_Read+0x22c>)
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 faa6 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d008      	beq.n	8003710 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e10e      	b.n	8003920 <HAL_I2C_Mem_Read+0x440>
 8003702:	bf00      	nop
 8003704:	00100002 	.word	0x00100002
 8003708:	ffff0000 	.word	0xffff0000
 800370c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800371e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691a      	ldr	r2, [r3, #16]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003784:	e0b8      	b.n	80038f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378c:	2200      	movs	r2, #0
 800378e:	4966      	ldr	r1, [pc, #408]	; (8003928 <HAL_I2C_Mem_Read+0x448>)
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 fa57 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0bf      	b.n	8003920 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e8:	2200      	movs	r2, #0
 80037ea:	494f      	ldr	r1, [pc, #316]	; (8003928 <HAL_I2C_Mem_Read+0x448>)
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 fa29 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e091      	b.n	8003920 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003870:	e042      	b.n	80038f8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003874:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 fb3c 	bl	8003ef4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e04c      	b.n	8003920 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	691a      	ldr	r2, [r3, #16]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f003 0304 	and.w	r3, r3, #4
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d118      	bne.n	80038f8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f47f aec2 	bne.w	8003686 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	e000      	b.n	8003920 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800391e:	2302      	movs	r3, #2
  }
}
 8003920:	4618      	mov	r0, r3
 8003922:	3728      	adds	r7, #40	; 0x28
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	00010004 	.word	0x00010004

0800392c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393a:	b2db      	uxtb	r3, r3
}
 800393c:	4618      	mov	r0, r3
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af02      	add	r7, sp, #8
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	4608      	mov	r0, r1
 8003952:	4611      	mov	r1, r2
 8003954:	461a      	mov	r2, r3
 8003956:	4603      	mov	r3, r0
 8003958:	817b      	strh	r3, [r7, #10]
 800395a:	460b      	mov	r3, r1
 800395c:	813b      	strh	r3, [r7, #8]
 800395e:	4613      	mov	r3, r2
 8003960:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003970:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	2200      	movs	r2, #0
 800397a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f960 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00d      	beq.n	80039a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003998:	d103      	bne.n	80039a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e05f      	b.n	8003a66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039a6:	897b      	ldrh	r3, [r7, #10]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	6a3a      	ldr	r2, [r7, #32]
 80039ba:	492d      	ldr	r1, [pc, #180]	; (8003a70 <I2C_RequestMemoryWrite+0x128>)
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 f998 	bl	8003cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e04c      	b.n	8003a66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e4:	6a39      	ldr	r1, [r7, #32]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 fa02 	bl	8003df0 <I2C_WaitOnTXEFlagUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00d      	beq.n	8003a0e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d107      	bne.n	8003a0a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e02b      	b.n	8003a66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d105      	bne.n	8003a20 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a14:	893b      	ldrh	r3, [r7, #8]
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	611a      	str	r2, [r3, #16]
 8003a1e:	e021      	b.n	8003a64 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a20:	893b      	ldrh	r3, [r7, #8]
 8003a22:	0a1b      	lsrs	r3, r3, #8
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a30:	6a39      	ldr	r1, [r7, #32]
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f9dc 	bl	8003df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00d      	beq.n	8003a5a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d107      	bne.n	8003a56 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e005      	b.n	8003a66 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a5a:	893b      	ldrh	r3, [r7, #8]
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	00010002 	.word	0x00010002

08003a74 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af02      	add	r7, sp, #8
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	4608      	mov	r0, r1
 8003a7e:	4611      	mov	r1, r2
 8003a80:	461a      	mov	r2, r3
 8003a82:	4603      	mov	r3, r0
 8003a84:	817b      	strh	r3, [r7, #10]
 8003a86:	460b      	mov	r3, r1
 8003a88:	813b      	strh	r3, [r7, #8]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a9c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 f8c2 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00d      	beq.n	8003ae2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad4:	d103      	bne.n	8003ade <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003adc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e0aa      	b.n	8003c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ae2:	897b      	ldrh	r3, [r7, #10]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003af0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	6a3a      	ldr	r2, [r7, #32]
 8003af6:	4952      	ldr	r1, [pc, #328]	; (8003c40 <I2C_RequestMemoryRead+0x1cc>)
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f8fa 	bl	8003cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e097      	b.n	8003c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b20:	6a39      	ldr	r1, [r7, #32]
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f964 	bl	8003df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00d      	beq.n	8003b4a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d107      	bne.n	8003b46 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e076      	b.n	8003c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b4a:	88fb      	ldrh	r3, [r7, #6]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d105      	bne.n	8003b5c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b50:	893b      	ldrh	r3, [r7, #8]
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	611a      	str	r2, [r3, #16]
 8003b5a:	e021      	b.n	8003ba0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b5c:	893b      	ldrh	r3, [r7, #8]
 8003b5e:	0a1b      	lsrs	r3, r3, #8
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6c:	6a39      	ldr	r1, [r7, #32]
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 f93e 	bl	8003df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00d      	beq.n	8003b96 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d107      	bne.n	8003b92 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e050      	b.n	8003c38 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b96:	893b      	ldrh	r3, [r7, #8]
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba2:	6a39      	ldr	r1, [r7, #32]
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f923 	bl	8003df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00d      	beq.n	8003bcc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d107      	bne.n	8003bc8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e035      	b.n	8003c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bda:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 f82b 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00d      	beq.n	8003c10 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c02:	d103      	bne.n	8003c0c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e013      	b.n	8003c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c10:	897b      	ldrh	r3, [r7, #10]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	6a3a      	ldr	r2, [r7, #32]
 8003c24:	4906      	ldr	r1, [pc, #24]	; (8003c40 <I2C_RequestMemoryRead+0x1cc>)
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 f863 	bl	8003cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	00010002 	.word	0x00010002

08003c44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	4613      	mov	r3, r2
 8003c52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c54:	e025      	b.n	8003ca2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5c:	d021      	beq.n	8003ca2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5e:	f7fd fd07 	bl	8001670 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d302      	bcc.n	8003c74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d116      	bne.n	8003ca2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	f043 0220 	orr.w	r2, r3, #32
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e023      	b.n	8003cea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	0c1b      	lsrs	r3, r3, #16
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d10d      	bne.n	8003cc8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	43da      	mvns	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	bf0c      	ite	eq
 8003cbe:	2301      	moveq	r3, #1
 8003cc0:	2300      	movne	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	e00c      	b.n	8003ce2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	43da      	mvns	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	bf0c      	ite	eq
 8003cda:	2301      	moveq	r3, #1
 8003cdc:	2300      	movne	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d0b6      	beq.n	8003c56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	607a      	str	r2, [r7, #4]
 8003cfe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d00:	e051      	b.n	8003da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d10:	d123      	bne.n	8003d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d20:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d2a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f043 0204 	orr.w	r2, r3, #4
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e046      	b.n	8003de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d60:	d021      	beq.n	8003da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d62:	f7fd fc85 	bl	8001670 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d302      	bcc.n	8003d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d116      	bne.n	8003da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f043 0220 	orr.w	r2, r3, #32
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e020      	b.n	8003de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	0c1b      	lsrs	r3, r3, #16
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d10c      	bne.n	8003dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	43da      	mvns	r2, r3
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	bf14      	ite	ne
 8003dc2:	2301      	movne	r3, #1
 8003dc4:	2300      	moveq	r3, #0
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	e00b      	b.n	8003de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	43da      	mvns	r2, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	bf14      	ite	ne
 8003ddc:	2301      	movne	r3, #1
 8003dde:	2300      	moveq	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d18d      	bne.n	8003d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dfc:	e02d      	b.n	8003e5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f8ce 	bl	8003fa0 <I2C_IsAcknowledgeFailed>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e02d      	b.n	8003e6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e14:	d021      	beq.n	8003e5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e16:	f7fd fc2b 	bl	8001670 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d302      	bcc.n	8003e2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d116      	bne.n	8003e5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f043 0220 	orr.w	r2, r3, #32
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e007      	b.n	8003e6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e64:	2b80      	cmp	r3, #128	; 0x80
 8003e66:	d1ca      	bne.n	8003dfe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b084      	sub	sp, #16
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e7e:	e02d      	b.n	8003edc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f88d 	bl	8003fa0 <I2C_IsAcknowledgeFailed>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e02d      	b.n	8003eec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e96:	d021      	beq.n	8003edc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e98:	f7fd fbea 	bl	8001670 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d302      	bcc.n	8003eae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d116      	bne.n	8003edc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	f043 0220 	orr.w	r2, r3, #32
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e007      	b.n	8003eec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d1ca      	bne.n	8003e80 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f00:	e042      	b.n	8003f88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	2b10      	cmp	r3, #16
 8003f0e:	d119      	bne.n	8003f44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f06f 0210 	mvn.w	r2, #16
 8003f18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e029      	b.n	8003f98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f44:	f7fd fb94 	bl	8001670 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d302      	bcc.n	8003f5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d116      	bne.n	8003f88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	f043 0220 	orr.w	r2, r3, #32
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e007      	b.n	8003f98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f92:	2b40      	cmp	r3, #64	; 0x40
 8003f94:	d1b5      	bne.n	8003f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb6:	d11b      	bne.n	8003ff0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fc0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	f043 0204 	orr.w	r2, r3, #4
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
	...

08004000 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e128      	b.n	8004264 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d109      	bne.n	8004032 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a90      	ldr	r2, [pc, #576]	; (800426c <HAL_I2S_Init+0x26c>)
 800402a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7fc fb3d 	bl	80006ac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2202      	movs	r2, #2
 8004036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004048:	f023 030f 	bic.w	r3, r3, #15
 800404c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2202      	movs	r2, #2
 8004054:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	2b02      	cmp	r3, #2
 800405c:	d060      	beq.n	8004120 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d102      	bne.n	800406c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004066:	2310      	movs	r3, #16
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	e001      	b.n	8004070 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800406c:	2320      	movs	r3, #32
 800406e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2b20      	cmp	r3, #32
 8004076:	d802      	bhi.n	800407e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800407e:	2001      	movs	r0, #1
 8004080:	f000 fc7e 	bl	8004980 <HAL_RCCEx_GetPeriphCLKFreq>
 8004084:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800408e:	d125      	bne.n	80040dc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d010      	beq.n	80040ba <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	fbb2 f2f3 	udiv	r2, r2, r3
 80040a2:	4613      	mov	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	461a      	mov	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b4:	3305      	adds	r3, #5
 80040b6:	613b      	str	r3, [r7, #16]
 80040b8:	e01f      	b.n	80040fa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	461a      	mov	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d6:	3305      	adds	r3, #5
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	e00e      	b.n	80040fa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	461a      	mov	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f6:	3305      	adds	r3, #5
 80040f8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4a5c      	ldr	r2, [pc, #368]	; (8004270 <HAL_I2S_Init+0x270>)
 80040fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004102:	08db      	lsrs	r3, r3, #3
 8004104:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	085b      	lsrs	r3, r3, #1
 8004116:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	021b      	lsls	r3, r3, #8
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	e003      	b.n	8004128 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004120:	2302      	movs	r3, #2
 8004122:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d902      	bls.n	8004134 <HAL_I2S_Init+0x134>
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	2bff      	cmp	r3, #255	; 0xff
 8004132:	d907      	bls.n	8004144 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004138:	f043 0210 	orr.w	r2, r3, #16
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e08f      	b.n	8004264 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	ea42 0103 	orr.w	r1, r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	430a      	orrs	r2, r1
 8004156:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004162:	f023 030f 	bic.w	r3, r3, #15
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6851      	ldr	r1, [r2, #4]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6892      	ldr	r2, [r2, #8]
 800416e:	4311      	orrs	r1, r2
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	68d2      	ldr	r2, [r2, #12]
 8004174:	4311      	orrs	r1, r2
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6992      	ldr	r2, [r2, #24]
 800417a:	430a      	orrs	r2, r1
 800417c:	431a      	orrs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004186:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d161      	bne.n	8004254 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a38      	ldr	r2, [pc, #224]	; (8004274 <HAL_I2S_Init+0x274>)
 8004194:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a37      	ldr	r2, [pc, #220]	; (8004278 <HAL_I2S_Init+0x278>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d101      	bne.n	80041a4 <HAL_I2S_Init+0x1a4>
 80041a0:	4b36      	ldr	r3, [pc, #216]	; (800427c <HAL_I2S_Init+0x27c>)
 80041a2:	e001      	b.n	80041a8 <HAL_I2S_Init+0x1a8>
 80041a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6812      	ldr	r2, [r2, #0]
 80041ae:	4932      	ldr	r1, [pc, #200]	; (8004278 <HAL_I2S_Init+0x278>)
 80041b0:	428a      	cmp	r2, r1
 80041b2:	d101      	bne.n	80041b8 <HAL_I2S_Init+0x1b8>
 80041b4:	4a31      	ldr	r2, [pc, #196]	; (800427c <HAL_I2S_Init+0x27c>)
 80041b6:	e001      	b.n	80041bc <HAL_I2S_Init+0x1bc>
 80041b8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80041bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80041c0:	f023 030f 	bic.w	r3, r3, #15
 80041c4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a2b      	ldr	r2, [pc, #172]	; (8004278 <HAL_I2S_Init+0x278>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d101      	bne.n	80041d4 <HAL_I2S_Init+0x1d4>
 80041d0:	4b2a      	ldr	r3, [pc, #168]	; (800427c <HAL_I2S_Init+0x27c>)
 80041d2:	e001      	b.n	80041d8 <HAL_I2S_Init+0x1d8>
 80041d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041d8:	2202      	movs	r2, #2
 80041da:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a25      	ldr	r2, [pc, #148]	; (8004278 <HAL_I2S_Init+0x278>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d101      	bne.n	80041ea <HAL_I2S_Init+0x1ea>
 80041e6:	4b25      	ldr	r3, [pc, #148]	; (800427c <HAL_I2S_Init+0x27c>)
 80041e8:	e001      	b.n	80041ee <HAL_I2S_Init+0x1ee>
 80041ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041fa:	d003      	beq.n	8004204 <HAL_I2S_Init+0x204>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d103      	bne.n	800420c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	e001      	b.n	8004210 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800420c:	2300      	movs	r3, #0
 800420e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800421a:	4313      	orrs	r3, r2
 800421c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004224:	4313      	orrs	r3, r2
 8004226:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800422e:	4313      	orrs	r3, r2
 8004230:	b29a      	uxth	r2, r3
 8004232:	897b      	ldrh	r3, [r7, #10]
 8004234:	4313      	orrs	r3, r2
 8004236:	b29b      	uxth	r3, r3
 8004238:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800423c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a0d      	ldr	r2, [pc, #52]	; (8004278 <HAL_I2S_Init+0x278>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d101      	bne.n	800424c <HAL_I2S_Init+0x24c>
 8004248:	4b0c      	ldr	r3, [pc, #48]	; (800427c <HAL_I2S_Init+0x27c>)
 800424a:	e001      	b.n	8004250 <HAL_I2S_Init+0x250>
 800424c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004250:	897a      	ldrh	r2, [r7, #10]
 8004252:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3720      	adds	r7, #32
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	08004377 	.word	0x08004377
 8004270:	cccccccd 	.word	0xcccccccd
 8004274:	0800448d 	.word	0x0800448d
 8004278:	40003800 	.word	0x40003800
 800427c:	40003400 	.word	0x40003400

08004280 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	881a      	ldrh	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	1c9a      	adds	r2, r3, #2
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10e      	bne.n	8004310 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004300:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff ffb8 	bl	8004280 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432a:	b292      	uxth	r2, r2
 800432c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004332:	1c9a      	adds	r2, r3, #2
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10e      	bne.n	800436e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800435e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7ff ff93 	bl	8004294 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800436e:	bf00      	nop
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b086      	sub	sp, #24
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b04      	cmp	r3, #4
 8004390:	d13a      	bne.n	8004408 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b01      	cmp	r3, #1
 800439a:	d109      	bne.n	80043b0 <I2S_IRQHandler+0x3a>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a6:	2b40      	cmp	r3, #64	; 0x40
 80043a8:	d102      	bne.n	80043b0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7ff ffb4 	bl	8004318 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b6:	2b40      	cmp	r3, #64	; 0x40
 80043b8:	d126      	bne.n	8004408 <I2S_IRQHandler+0x92>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 0320 	and.w	r3, r3, #32
 80043c4:	2b20      	cmp	r3, #32
 80043c6:	d11f      	bne.n	8004408 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80043d8:	2300      	movs	r3, #0
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	613b      	str	r3, [r7, #16]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	f043 0202 	orr.w	r2, r3, #2
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7ff ff50 	bl	80042a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b03      	cmp	r3, #3
 8004412:	d136      	bne.n	8004482 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b02      	cmp	r3, #2
 800441c:	d109      	bne.n	8004432 <I2S_IRQHandler+0xbc>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004428:	2b80      	cmp	r3, #128	; 0x80
 800442a:	d102      	bne.n	8004432 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff ff45 	bl	80042bc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b08      	cmp	r3, #8
 800443a:	d122      	bne.n	8004482 <I2S_IRQHandler+0x10c>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	2b20      	cmp	r3, #32
 8004448:	d11b      	bne.n	8004482 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004458:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800445a:	2300      	movs	r3, #0
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004474:	f043 0204 	orr.w	r2, r3, #4
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff ff13 	bl	80042a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004482:	bf00      	nop
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b088      	sub	sp, #32
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a92      	ldr	r2, [pc, #584]	; (80046ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d101      	bne.n	80044aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80044a6:	4b92      	ldr	r3, [pc, #584]	; (80046f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044a8:	e001      	b.n	80044ae <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80044aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a8b      	ldr	r2, [pc, #556]	; (80046ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d101      	bne.n	80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80044c4:	4b8a      	ldr	r3, [pc, #552]	; (80046f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044c6:	e001      	b.n	80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80044c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d8:	d004      	beq.n	80044e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f040 8099 	bne.w	8004616 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d107      	bne.n	80044fe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f925 	bl	8004748 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b01      	cmp	r3, #1
 8004506:	d107      	bne.n	8004518 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f9c8 	bl	80048a8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451e:	2b40      	cmp	r3, #64	; 0x40
 8004520:	d13a      	bne.n	8004598 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	d035      	beq.n	8004598 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a6e      	ldr	r2, [pc, #440]	; (80046ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d101      	bne.n	800453a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004536:	4b6e      	ldr	r3, [pc, #440]	; (80046f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004538:	e001      	b.n	800453e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800453a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4969      	ldr	r1, [pc, #420]	; (80046ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004546:	428b      	cmp	r3, r1
 8004548:	d101      	bne.n	800454e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800454a:	4b69      	ldr	r3, [pc, #420]	; (80046f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800454c:	e001      	b.n	8004552 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800454e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004552:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004556:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004566:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004568:	2300      	movs	r3, #0
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458a:	f043 0202 	orr.w	r2, r3, #2
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff fe88 	bl	80042a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b08      	cmp	r3, #8
 80045a0:	f040 80c3 	bne.w	800472a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 80bd 	beq.w	800472a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045be:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a49      	ldr	r2, [pc, #292]	; (80046ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d101      	bne.n	80045ce <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80045ca:	4b49      	ldr	r3, [pc, #292]	; (80046f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045cc:	e001      	b.n	80045d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80045ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4944      	ldr	r1, [pc, #272]	; (80046ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045da:	428b      	cmp	r3, r1
 80045dc:	d101      	bne.n	80045e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80045de:	4b44      	ldr	r3, [pc, #272]	; (80046f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045e0:	e001      	b.n	80045e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80045e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045ea:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80045ec:	2300      	movs	r3, #0
 80045ee:	60bb      	str	r3, [r7, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	60bb      	str	r3, [r7, #8]
 80045f8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	f043 0204 	orr.w	r2, r3, #4
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7ff fe4a 	bl	80042a8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004614:	e089      	b.n	800472a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b02      	cmp	r3, #2
 800461e:	d107      	bne.n	8004630 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f8be 	bl	80047ac <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b01      	cmp	r3, #1
 8004638:	d107      	bne.n	800464a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f8fd 	bl	8004844 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004650:	2b40      	cmp	r3, #64	; 0x40
 8004652:	d12f      	bne.n	80046b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	d02a      	beq.n	80046b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800466c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a1e      	ldr	r2, [pc, #120]	; (80046ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d101      	bne.n	800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004678:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800467a:	e001      	b.n	8004680 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800467c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4919      	ldr	r1, [pc, #100]	; (80046ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004688:	428b      	cmp	r3, r1
 800468a:	d101      	bne.n	8004690 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800468c:	4b18      	ldr	r3, [pc, #96]	; (80046f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800468e:	e001      	b.n	8004694 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004690:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004694:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004698:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a6:	f043 0202 	orr.w	r2, r3, #2
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff fdfa 	bl	80042a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d136      	bne.n	800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d031      	beq.n	800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a07      	ldr	r2, [pc, #28]	; (80046ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d101      	bne.n	80046d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80046d2:	4b07      	ldr	r3, [pc, #28]	; (80046f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046d4:	e001      	b.n	80046da <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80046d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4902      	ldr	r1, [pc, #8]	; (80046ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046e2:	428b      	cmp	r3, r1
 80046e4:	d106      	bne.n	80046f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80046e6:	4b02      	ldr	r3, [pc, #8]	; (80046f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046e8:	e006      	b.n	80046f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80046ea:	bf00      	nop
 80046ec:	40003800 	.word	0x40003800
 80046f0:	40003400 	.word	0x40003400
 80046f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046fc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800470c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471a:	f043 0204 	orr.w	r2, r3, #4
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7ff fdc0 	bl	80042a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004728:	e000      	b.n	800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800472a:	bf00      	nop
}
 800472c:	bf00      	nop
 800472e:	3720      	adds	r7, #32
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	1c99      	adds	r1, r3, #2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6251      	str	r1, [r2, #36]	; 0x24
 800475a:	881a      	ldrh	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d113      	bne.n	80047a2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004788:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d106      	bne.n	80047a2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff ffc9 	bl	8004734 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
	...

080047ac <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	1c99      	adds	r1, r3, #2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6251      	str	r1, [r2, #36]	; 0x24
 80047be:	8819      	ldrh	r1, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a1d      	ldr	r2, [pc, #116]	; (800483c <I2SEx_TxISR_I2SExt+0x90>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d101      	bne.n	80047ce <I2SEx_TxISR_I2SExt+0x22>
 80047ca:	4b1d      	ldr	r3, [pc, #116]	; (8004840 <I2SEx_TxISR_I2SExt+0x94>)
 80047cc:	e001      	b.n	80047d2 <I2SEx_TxISR_I2SExt+0x26>
 80047ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047d2:	460a      	mov	r2, r1
 80047d4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047da:	b29b      	uxth	r3, r3
 80047dc:	3b01      	subs	r3, #1
 80047de:	b29a      	uxth	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d121      	bne.n	8004832 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a12      	ldr	r2, [pc, #72]	; (800483c <I2SEx_TxISR_I2SExt+0x90>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d101      	bne.n	80047fc <I2SEx_TxISR_I2SExt+0x50>
 80047f8:	4b11      	ldr	r3, [pc, #68]	; (8004840 <I2SEx_TxISR_I2SExt+0x94>)
 80047fa:	e001      	b.n	8004800 <I2SEx_TxISR_I2SExt+0x54>
 80047fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	490d      	ldr	r1, [pc, #52]	; (800483c <I2SEx_TxISR_I2SExt+0x90>)
 8004808:	428b      	cmp	r3, r1
 800480a:	d101      	bne.n	8004810 <I2SEx_TxISR_I2SExt+0x64>
 800480c:	4b0c      	ldr	r3, [pc, #48]	; (8004840 <I2SEx_TxISR_I2SExt+0x94>)
 800480e:	e001      	b.n	8004814 <I2SEx_TxISR_I2SExt+0x68>
 8004810:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004814:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004818:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d106      	bne.n	8004832 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7ff ff81 	bl	8004734 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004832:	bf00      	nop
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	40003800 	.word	0x40003800
 8004840:	40003400 	.word	0x40003400

08004844 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68d8      	ldr	r0, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	1c99      	adds	r1, r3, #2
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800485c:	b282      	uxth	r2, r0
 800485e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004864:	b29b      	uxth	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d113      	bne.n	80048a0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004886:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7ff ff4a 	bl	8004734 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048a0:	bf00      	nop
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a20      	ldr	r2, [pc, #128]	; (8004938 <I2SEx_RxISR_I2SExt+0x90>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d101      	bne.n	80048be <I2SEx_RxISR_I2SExt+0x16>
 80048ba:	4b20      	ldr	r3, [pc, #128]	; (800493c <I2SEx_RxISR_I2SExt+0x94>)
 80048bc:	e001      	b.n	80048c2 <I2SEx_RxISR_I2SExt+0x1a>
 80048be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048c2:	68d8      	ldr	r0, [r3, #12]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	1c99      	adds	r1, r3, #2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80048ce:	b282      	uxth	r2, r0
 80048d0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d121      	bne.n	800492e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a12      	ldr	r2, [pc, #72]	; (8004938 <I2SEx_RxISR_I2SExt+0x90>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d101      	bne.n	80048f8 <I2SEx_RxISR_I2SExt+0x50>
 80048f4:	4b11      	ldr	r3, [pc, #68]	; (800493c <I2SEx_RxISR_I2SExt+0x94>)
 80048f6:	e001      	b.n	80048fc <I2SEx_RxISR_I2SExt+0x54>
 80048f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	490d      	ldr	r1, [pc, #52]	; (8004938 <I2SEx_RxISR_I2SExt+0x90>)
 8004904:	428b      	cmp	r3, r1
 8004906:	d101      	bne.n	800490c <I2SEx_RxISR_I2SExt+0x64>
 8004908:	4b0c      	ldr	r3, [pc, #48]	; (800493c <I2SEx_RxISR_I2SExt+0x94>)
 800490a:	e001      	b.n	8004910 <I2SEx_RxISR_I2SExt+0x68>
 800490c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004910:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004914:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d106      	bne.n	800492e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff ff03 	bl	8004734 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800492e:	bf00      	nop
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40003800 	.word	0x40003800
 800493c:	40003400 	.word	0x40003400

08004940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004944:	4b03      	ldr	r3, [pc, #12]	; (8004954 <HAL_RCC_GetHCLKFreq+0x14>)
 8004946:	681b      	ldr	r3, [r3, #0]
}
 8004948:	4618      	mov	r0, r3
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	20000000 	.word	0x20000000

08004958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800495c:	f7ff fff0 	bl	8004940 <HAL_RCC_GetHCLKFreq>
 8004960:	4602      	mov	r2, r0
 8004962:	4b05      	ldr	r3, [pc, #20]	; (8004978 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	0a9b      	lsrs	r3, r3, #10
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	4903      	ldr	r1, [pc, #12]	; (800497c <HAL_RCC_GetPCLK1Freq+0x24>)
 800496e:	5ccb      	ldrb	r3, [r1, r3]
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004974:	4618      	mov	r0, r3
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40023800 	.word	0x40023800
 800497c:	080053d8 	.word	0x080053d8

08004980 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d140      	bne.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800499e:	4b24      	ldr	r3, [pc, #144]	; (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d005      	beq.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d131      	bne.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80049b4:	4b1f      	ldr	r3, [pc, #124]	; (8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80049b6:	617b      	str	r3, [r7, #20]
          break;
 80049b8:	e031      	b.n	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80049ba:	4b1d      	ldr	r3, [pc, #116]	; (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049c6:	d109      	bne.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80049c8:	4b19      	ldr	r3, [pc, #100]	; (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80049ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049d2:	4a19      	ldr	r2, [pc, #100]	; (8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80049d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d8:	613b      	str	r3, [r7, #16]
 80049da:	e008      	b.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80049dc:	4b14      	ldr	r3, [pc, #80]	; (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80049de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049e6:	4a15      	ldr	r2, [pc, #84]	; (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80049e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ec:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80049ee:	4b10      	ldr	r3, [pc, #64]	; (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80049f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f4:	099b      	lsrs	r3, r3, #6
 80049f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	fb02 f303 	mul.w	r3, r2, r3
 8004a00:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004a02:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a08:	0f1b      	lsrs	r3, r3, #28
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a14:	617b      	str	r3, [r7, #20]
          break;
 8004a16:	e002      	b.n	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	617b      	str	r3, [r7, #20]
          break;
 8004a1c:	bf00      	nop
        }
      }
      break;
 8004a1e:	bf00      	nop
    }
  }
  return frequency;
 8004a20:	697b      	ldr	r3, [r7, #20]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800
 8004a34:	00bb8000 	.word	0x00bb8000
 8004a38:	007a1200 	.word	0x007a1200
 8004a3c:	00f42400 	.word	0x00f42400

08004a40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e07b      	b.n	8004b4a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d108      	bne.n	8004a6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a62:	d009      	beq.n	8004a78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	61da      	str	r2, [r3, #28]
 8004a6a:	e005      	b.n	8004a78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d106      	bne.n	8004a98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fb fed8 	bl	8000848 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afc:	ea42 0103 	orr.w	r1, r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	0c1b      	lsrs	r3, r3, #16
 8004b16:	f003 0104 	and.w	r1, r3, #4
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	f003 0210 	and.w	r2, r3, #16
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f043 0201 	orr.w	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f023 0201 	bic.w	r2, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
	...

08004b98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4a13      	ldr	r2, [pc, #76]	; (8004bfc <USB_FlushTxFifo+0x64>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d901      	bls.n	8004bb8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e01b      	b.n	8004bf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	daf2      	bge.n	8004ba6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	019b      	lsls	r3, r3, #6
 8004bc8:	f043 0220 	orr.w	r2, r3, #32
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	4a08      	ldr	r2, [pc, #32]	; (8004bfc <USB_FlushTxFifo+0x64>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d901      	bls.n	8004be2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e006      	b.n	8004bf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f003 0320 	and.w	r3, r3, #32
 8004bea:	2b20      	cmp	r3, #32
 8004bec:	d0f0      	beq.n	8004bd0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	00030d40 	.word	0x00030d40

08004c00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4a11      	ldr	r2, [pc, #68]	; (8004c5c <USB_FlushRxFifo+0x5c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e018      	b.n	8004c50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	daf2      	bge.n	8004c0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2210      	movs	r2, #16
 8004c2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3301      	adds	r3, #1
 8004c34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4a08      	ldr	r2, [pc, #32]	; (8004c5c <USB_FlushRxFifo+0x5c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d901      	bls.n	8004c42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e006      	b.n	8004c50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f003 0310 	and.w	r3, r3, #16
 8004c4a:	2b10      	cmp	r3, #16
 8004c4c:	d0f0      	beq.n	8004c30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	00030d40 	.word	0x00030d40

08004c60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b08b      	sub	sp, #44	; 0x2c
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004c76:	88fb      	ldrh	r3, [r7, #6]
 8004c78:	089b      	lsrs	r3, r3, #2
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004c7e:	88fb      	ldrh	r3, [r7, #6]
 8004c80:	f003 0303 	and.w	r3, r3, #3
 8004c84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004c86:	2300      	movs	r3, #0
 8004c88:	623b      	str	r3, [r7, #32]
 8004c8a:	e014      	b.n	8004cb6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	601a      	str	r2, [r3, #0]
    pDest++;
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	3301      	adds	r3, #1
 8004cae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	623b      	str	r3, [r7, #32]
 8004cb6:	6a3a      	ldr	r2, [r7, #32]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d3e6      	bcc.n	8004c8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004cbe:	8bfb      	ldrh	r3, [r7, #30]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d01e      	beq.n	8004d02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f107 0310 	add.w	r3, r7, #16
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	701a      	strb	r2, [r3, #0]
      i++;
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	3301      	adds	r3, #1
 8004cee:	623b      	str	r3, [r7, #32]
      pDest++;
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004cf6:	8bfb      	ldrh	r3, [r7, #30]
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004cfc:	8bfb      	ldrh	r3, [r7, #30]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1ea      	bne.n	8004cd8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	372c      	adds	r7, #44	; 0x2c
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4013      	ands	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004d28:	68fb      	ldr	r3, [r7, #12]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b083      	sub	sp, #12
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f003 0301 	and.w	r3, r3, #1
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b085      	sub	sp, #20
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d70:	f023 0303 	bic.w	r3, r3, #3
 8004d74:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	78fb      	ldrb	r3, [r7, #3]
 8004d80:	f003 0303 	and.w	r3, r3, #3
 8004d84:	68f9      	ldr	r1, [r7, #12]
 8004d86:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004d8e:	78fb      	ldrb	r3, [r7, #3]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d107      	bne.n	8004da4 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004da0:	6053      	str	r3, [r2, #4]
 8004da2:	e009      	b.n	8004db8 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004da4:	78fb      	ldrb	r3, [r7, #3]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d106      	bne.n	8004db8 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004db0:	461a      	mov	r2, r3
 8004db2:	f241 7370 	movw	r3, #6000	; 0x1770
 8004db6:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b085      	sub	sp, #20
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	b29b      	uxth	r3, r3
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b089      	sub	sp, #36	; 0x24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	0c9b      	lsrs	r3, r3, #18
 8004e10:	f003 0303 	and.w	r3, r3, #3
 8004e14:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	0fdb      	lsrs	r3, r3, #31
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 0320 	and.w	r3, r3, #32
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	d104      	bne.n	8004e42 <USB_HC_Halt+0x5a>
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e0c8      	b.n	8004fd4 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <USB_HC_Halt+0x66>
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d163      	bne.n	8004f16 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	0151      	lsls	r1, r2, #5
 8004e60:	69fa      	ldr	r2, [r7, #28]
 8004e62:	440a      	add	r2, r1
 8004e64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e6c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 0320 	and.w	r3, r3, #32
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f040 80ab 	bne.w	8004fd2 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d133      	bne.n	8004ef0 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	0151      	lsls	r1, r2, #5
 8004e9a:	69fa      	ldr	r2, [r7, #28]
 8004e9c:	440a      	add	r2, r1
 8004e9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ea2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ea6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	0151      	lsls	r1, r2, #5
 8004eba:	69fa      	ldr	r2, [r7, #28]
 8004ebc:	440a      	add	r2, r1
 8004ebe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ec2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ec6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ed4:	d81d      	bhi.n	8004f12 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ee8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eec:	d0ec      	beq.n	8004ec8 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004eee:	e070      	b.n	8004fd2 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	0151      	lsls	r1, r2, #5
 8004f02:	69fa      	ldr	r2, [r7, #28]
 8004f04:	440a      	add	r2, r1
 8004f06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f0e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004f10:	e05f      	b.n	8004fd2 <USB_HC_Halt+0x1ea>
            break;
 8004f12:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004f14:	e05d      	b.n	8004fd2 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	0151      	lsls	r1, r2, #5
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	440a      	add	r2, r1
 8004f2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f34:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d133      	bne.n	8004fae <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	0151      	lsls	r1, r2, #5
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	440a      	add	r2, r1
 8004f5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f64:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	0151      	lsls	r1, r2, #5
 8004f78:	69fa      	ldr	r2, [r7, #28]
 8004f7a:	440a      	add	r2, r1
 8004f7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f84:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f92:	d81d      	bhi.n	8004fd0 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	015a      	lsls	r2, r3, #5
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004faa:	d0ec      	beq.n	8004f86 <USB_HC_Halt+0x19e>
 8004fac:	e011      	b.n	8004fd2 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	0151      	lsls	r1, r2, #5
 8004fc0:	69fa      	ldr	r2, [r7, #28]
 8004fc2:	440a      	add	r2, r1
 8004fc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	e000      	b.n	8004fd2 <USB_HC_Halt+0x1ea>
          break;
 8004fd0:	bf00      	nop
    }
  }

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3724      	adds	r7, #36	; 0x24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7ff fdbd 	bl	8004b74 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ffa:	2110      	movs	r1, #16
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7ff fdcb 	bl	8004b98 <USB_FlushTxFifo>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7ff fdf7 	bl	8004c00 <USB_FlushRxFifo>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800501c:	2300      	movs	r3, #0
 800501e:	61bb      	str	r3, [r7, #24]
 8005020:	e01f      	b.n	8005062 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	4413      	add	r3, r2
 800502a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005038:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005040:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005048:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	4413      	add	r3, r2
 8005052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005056:	461a      	mov	r2, r3
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	3301      	adds	r3, #1
 8005060:	61bb      	str	r3, [r7, #24]
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	2b0f      	cmp	r3, #15
 8005066:	d9dc      	bls.n	8005022 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005068:	2300      	movs	r3, #0
 800506a:	61bb      	str	r3, [r7, #24]
 800506c:	e034      	b.n	80050d8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	4413      	add	r3, r2
 8005076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005084:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800508c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005094:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	4413      	add	r3, r2
 800509e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a2:	461a      	mov	r2, r3
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	3301      	adds	r3, #1
 80050ac:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050b4:	d80c      	bhi.n	80050d0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050cc:	d0ec      	beq.n	80050a8 <USB_StopHost+0xc8>
 80050ce:	e000      	b.n	80050d2 <USB_StopHost+0xf2>
        break;
 80050d0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	3301      	adds	r3, #1
 80050d6:	61bb      	str	r3, [r7, #24]
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	2b0f      	cmp	r3, #15
 80050dc:	d9c7      	bls.n	800506e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050e4:	461a      	mov	r2, r3
 80050e6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f04f 32ff 	mov.w	r2, #4294967295
 80050f2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7ff fd2c 	bl	8004b52 <USB_EnableGlobalInt>

  return ret;
 80050fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3720      	adds	r7, #32
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f804 	bl	8005128 <USBH_HandleSof>
}
 8005120:	bf00      	nop
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b0b      	cmp	r3, #11
 8005138:	d10a      	bne.n	8005150 <USBH_HandleSof+0x28>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005140:	2b00      	cmp	r3, #0
 8005142:	d005      	beq.n	8005150 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	4798      	blx	r3
  }
}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8005168:	bf00      	nop
}
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8005184:	bf00      	nop
}
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b082      	sub	sp, #8
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f883 	bl	80052ea <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	791b      	ldrb	r3, [r3, #4]
 80051e8:	4619      	mov	r1, r3
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f80b 	bl	8005206 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	795b      	ldrb	r3, [r3, #5]
 80051f4:	4619      	mov	r1, r3
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f805 	bl	8005206 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8005206:	b480      	push	{r7}
 8005208:	b083      	sub	sp, #12
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	460b      	mov	r3, r1
 8005210:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8005212:	78fb      	ldrb	r3, [r7, #3]
 8005214:	2b0f      	cmp	r3, #15
 8005216:	d80d      	bhi.n	8005234 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8005218:	78fb      	ldrb	r3, [r7, #3]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	33e0      	adds	r3, #224	; 0xe0
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	78fb      	ldrb	r3, [r7, #3]
 8005226:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800522a:	6879      	ldr	r1, [r7, #4]
 800522c:	33e0      	adds	r3, #224	; 0xe0
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b082      	sub	sp, #8
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005250:	4618      	mov	r0, r3
 8005252:	f7ff ff57 	bl	8005104 <USBH_LL_IncTimer>
}
 8005256:	bf00      	nop
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b082      	sub	sp, #8
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff ff8f 	bl	8005190 <USBH_LL_Connect>
}
 8005272:	bf00      	nop
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b082      	sub	sp, #8
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005288:	4618      	mov	r0, r3
 800528a:	f7ff ff98 	bl	80051be <USBH_LL_Disconnect>
}
 800528e:	bf00      	nop
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8005296:	b480      	push	{r7}
 8005298:	b083      	sub	sp, #12
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
 800529e:	460b      	mov	r3, r1
 80052a0:	70fb      	strb	r3, [r7, #3]
 80052a2:	4613      	mov	r3, r2
 80052a4:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7ff ff49 	bl	8005158 <USBH_LL_PortEnabled>
}
 80052c6:	bf00      	nop
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b082      	sub	sp, #8
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff ff49 	bl	8005174 <USBH_LL_PortDisabled>
}
 80052e2:	bf00      	nop
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b084      	sub	sp, #16
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005300:	4618      	mov	r0, r3
 8005302:	f7fc fe5f 	bl	8001fc4 <HAL_HCD_Stop>
 8005306:	4603      	mov	r3, r0
 8005308:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800530a:	7bfb      	ldrb	r3, [r7, #15]
 800530c:	4618      	mov	r0, r3
 800530e:	f000 f807 	bl	8005320 <USBH_Get_USB_Status>
 8005312:	4603      	mov	r3, r0
 8005314:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005316:	7bbb      	ldrb	r3, [r7, #14]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	4603      	mov	r3, r0
 8005328:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800532e:	79fb      	ldrb	r3, [r7, #7]
 8005330:	2b03      	cmp	r3, #3
 8005332:	d817      	bhi.n	8005364 <USBH_Get_USB_Status+0x44>
 8005334:	a201      	add	r2, pc, #4	; (adr r2, 800533c <USBH_Get_USB_Status+0x1c>)
 8005336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533a:	bf00      	nop
 800533c:	0800534d 	.word	0x0800534d
 8005340:	08005353 	.word	0x08005353
 8005344:	08005359 	.word	0x08005359
 8005348:	0800535f 	.word	0x0800535f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800534c:	2300      	movs	r3, #0
 800534e:	73fb      	strb	r3, [r7, #15]
    break;
 8005350:	e00b      	b.n	800536a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8005352:	2302      	movs	r3, #2
 8005354:	73fb      	strb	r3, [r7, #15]
    break;
 8005356:	e008      	b.n	800536a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8005358:	2301      	movs	r3, #1
 800535a:	73fb      	strb	r3, [r7, #15]
    break;
 800535c:	e005      	b.n	800536a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800535e:	2302      	movs	r3, #2
 8005360:	73fb      	strb	r3, [r7, #15]
    break;
 8005362:	e002      	b.n	800536a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8005364:	2302      	movs	r3, #2
 8005366:	73fb      	strb	r3, [r7, #15]
    break;
 8005368:	bf00      	nop
  }
  return usb_status;
 800536a:	7bfb      	ldrb	r3, [r7, #15]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <__libc_init_array>:
 8005378:	b570      	push	{r4, r5, r6, lr}
 800537a:	4d0d      	ldr	r5, [pc, #52]	; (80053b0 <__libc_init_array+0x38>)
 800537c:	4c0d      	ldr	r4, [pc, #52]	; (80053b4 <__libc_init_array+0x3c>)
 800537e:	1b64      	subs	r4, r4, r5
 8005380:	10a4      	asrs	r4, r4, #2
 8005382:	2600      	movs	r6, #0
 8005384:	42a6      	cmp	r6, r4
 8005386:	d109      	bne.n	800539c <__libc_init_array+0x24>
 8005388:	4d0b      	ldr	r5, [pc, #44]	; (80053b8 <__libc_init_array+0x40>)
 800538a:	4c0c      	ldr	r4, [pc, #48]	; (80053bc <__libc_init_array+0x44>)
 800538c:	f000 f818 	bl	80053c0 <_init>
 8005390:	1b64      	subs	r4, r4, r5
 8005392:	10a4      	asrs	r4, r4, #2
 8005394:	2600      	movs	r6, #0
 8005396:	42a6      	cmp	r6, r4
 8005398:	d105      	bne.n	80053a6 <__libc_init_array+0x2e>
 800539a:	bd70      	pop	{r4, r5, r6, pc}
 800539c:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a0:	4798      	blx	r3
 80053a2:	3601      	adds	r6, #1
 80053a4:	e7ee      	b.n	8005384 <__libc_init_array+0xc>
 80053a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053aa:	4798      	blx	r3
 80053ac:	3601      	adds	r6, #1
 80053ae:	e7f2      	b.n	8005396 <__libc_init_array+0x1e>
 80053b0:	080053e0 	.word	0x080053e0
 80053b4:	080053e0 	.word	0x080053e0
 80053b8:	080053e0 	.word	0x080053e0
 80053bc:	080053e4 	.word	0x080053e4

080053c0 <_init>:
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c2:	bf00      	nop
 80053c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c6:	bc08      	pop	{r3}
 80053c8:	469e      	mov	lr, r3
 80053ca:	4770      	bx	lr

080053cc <_fini>:
 80053cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ce:	bf00      	nop
 80053d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053d2:	bc08      	pop	{r3}
 80053d4:	469e      	mov	lr, r3
 80053d6:	4770      	bx	lr
