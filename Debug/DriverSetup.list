
DriverSetup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab40  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800acd8  0800acd8  0001acd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad10  0800ad10  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad10  0800ad10  0001ad10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad18  0800ad18  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad18  0800ad18  0001ad18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad1c  0800ad1c  0001ad1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800ad20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001928  200000fc  0800ae1c  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a24  0800ae1c  00021a24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e9d7  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005241  00000000  00000000  0003eb03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001658  00000000  00000000  00043d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  000453a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ba54  00000000  00000000  000467c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ffea  00000000  00000000  0006221c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000955b9  00000000  00000000  00082206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001177bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dc8  00000000  00000000  00117810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800acc0 	.word	0x0800acc0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	0800acc0 	.word	0x0800acc0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_uldivmod>:
 8000a84:	b953      	cbnz	r3, 8000a9c <__aeabi_uldivmod+0x18>
 8000a86:	b94a      	cbnz	r2, 8000a9c <__aeabi_uldivmod+0x18>
 8000a88:	2900      	cmp	r1, #0
 8000a8a:	bf08      	it	eq
 8000a8c:	2800      	cmpeq	r0, #0
 8000a8e:	bf1c      	itt	ne
 8000a90:	f04f 31ff 	movne.w	r1, #4294967295
 8000a94:	f04f 30ff 	movne.w	r0, #4294967295
 8000a98:	f000 b974 	b.w	8000d84 <__aeabi_idiv0>
 8000a9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa4:	f000 f806 	bl	8000ab4 <__udivmoddi4>
 8000aa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab0:	b004      	add	sp, #16
 8000ab2:	4770      	bx	lr

08000ab4 <__udivmoddi4>:
 8000ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab8:	9d08      	ldr	r5, [sp, #32]
 8000aba:	4604      	mov	r4, r0
 8000abc:	468e      	mov	lr, r1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d14d      	bne.n	8000b5e <__udivmoddi4+0xaa>
 8000ac2:	428a      	cmp	r2, r1
 8000ac4:	4694      	mov	ip, r2
 8000ac6:	d969      	bls.n	8000b9c <__udivmoddi4+0xe8>
 8000ac8:	fab2 f282 	clz	r2, r2
 8000acc:	b152      	cbz	r2, 8000ae4 <__udivmoddi4+0x30>
 8000ace:	fa01 f302 	lsl.w	r3, r1, r2
 8000ad2:	f1c2 0120 	rsb	r1, r2, #32
 8000ad6:	fa20 f101 	lsr.w	r1, r0, r1
 8000ada:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ade:	ea41 0e03 	orr.w	lr, r1, r3
 8000ae2:	4094      	lsls	r4, r2
 8000ae4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae8:	0c21      	lsrs	r1, r4, #16
 8000aea:	fbbe f6f8 	udiv	r6, lr, r8
 8000aee:	fa1f f78c 	uxth.w	r7, ip
 8000af2:	fb08 e316 	mls	r3, r8, r6, lr
 8000af6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000afa:	fb06 f107 	mul.w	r1, r6, r7
 8000afe:	4299      	cmp	r1, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x64>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b0a:	f080 811f 	bcs.w	8000d4c <__udivmoddi4+0x298>
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	f240 811c 	bls.w	8000d4c <__udivmoddi4+0x298>
 8000b14:	3e02      	subs	r6, #2
 8000b16:	4463      	add	r3, ip
 8000b18:	1a5b      	subs	r3, r3, r1
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b20:	fb08 3310 	mls	r3, r8, r0, r3
 8000b24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b28:	fb00 f707 	mul.w	r7, r0, r7
 8000b2c:	42a7      	cmp	r7, r4
 8000b2e:	d90a      	bls.n	8000b46 <__udivmoddi4+0x92>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b38:	f080 810a 	bcs.w	8000d50 <__udivmoddi4+0x29c>
 8000b3c:	42a7      	cmp	r7, r4
 8000b3e:	f240 8107 	bls.w	8000d50 <__udivmoddi4+0x29c>
 8000b42:	4464      	add	r4, ip
 8000b44:	3802      	subs	r0, #2
 8000b46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b4a:	1be4      	subs	r4, r4, r7
 8000b4c:	2600      	movs	r6, #0
 8000b4e:	b11d      	cbz	r5, 8000b58 <__udivmoddi4+0xa4>
 8000b50:	40d4      	lsrs	r4, r2
 8000b52:	2300      	movs	r3, #0
 8000b54:	e9c5 4300 	strd	r4, r3, [r5]
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d909      	bls.n	8000b76 <__udivmoddi4+0xc2>
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	f000 80ef 	beq.w	8000d46 <__udivmoddi4+0x292>
 8000b68:	2600      	movs	r6, #0
 8000b6a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b6e:	4630      	mov	r0, r6
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	fab3 f683 	clz	r6, r3
 8000b7a:	2e00      	cmp	r6, #0
 8000b7c:	d14a      	bne.n	8000c14 <__udivmoddi4+0x160>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xd4>
 8000b82:	4282      	cmp	r2, r0
 8000b84:	f200 80f9 	bhi.w	8000d7a <__udivmoddi4+0x2c6>
 8000b88:	1a84      	subs	r4, r0, r2
 8000b8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	469e      	mov	lr, r3
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	d0e0      	beq.n	8000b58 <__udivmoddi4+0xa4>
 8000b96:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b9a:	e7dd      	b.n	8000b58 <__udivmoddi4+0xa4>
 8000b9c:	b902      	cbnz	r2, 8000ba0 <__udivmoddi4+0xec>
 8000b9e:	deff      	udf	#255	; 0xff
 8000ba0:	fab2 f282 	clz	r2, r2
 8000ba4:	2a00      	cmp	r2, #0
 8000ba6:	f040 8092 	bne.w	8000cce <__udivmoddi4+0x21a>
 8000baa:	eba1 010c 	sub.w	r1, r1, ip
 8000bae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb2:	fa1f fe8c 	uxth.w	lr, ip
 8000bb6:	2601      	movs	r6, #1
 8000bb8:	0c20      	lsrs	r0, r4, #16
 8000bba:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bbe:	fb07 1113 	mls	r1, r7, r3, r1
 8000bc2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc6:	fb0e f003 	mul.w	r0, lr, r3
 8000bca:	4288      	cmp	r0, r1
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x12c>
 8000bce:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x12a>
 8000bd8:	4288      	cmp	r0, r1
 8000bda:	f200 80cb 	bhi.w	8000d74 <__udivmoddi4+0x2c0>
 8000bde:	4643      	mov	r3, r8
 8000be0:	1a09      	subs	r1, r1, r0
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bf4:	45a6      	cmp	lr, r4
 8000bf6:	d908      	bls.n	8000c0a <__udivmoddi4+0x156>
 8000bf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c00:	d202      	bcs.n	8000c08 <__udivmoddi4+0x154>
 8000c02:	45a6      	cmp	lr, r4
 8000c04:	f200 80bb 	bhi.w	8000d7e <__udivmoddi4+0x2ca>
 8000c08:	4608      	mov	r0, r1
 8000c0a:	eba4 040e 	sub.w	r4, r4, lr
 8000c0e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c12:	e79c      	b.n	8000b4e <__udivmoddi4+0x9a>
 8000c14:	f1c6 0720 	rsb	r7, r6, #32
 8000c18:	40b3      	lsls	r3, r6
 8000c1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c22:	fa20 f407 	lsr.w	r4, r0, r7
 8000c26:	fa01 f306 	lsl.w	r3, r1, r6
 8000c2a:	431c      	orrs	r4, r3
 8000c2c:	40f9      	lsrs	r1, r7
 8000c2e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c32:	fa00 f306 	lsl.w	r3, r0, r6
 8000c36:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c3a:	0c20      	lsrs	r0, r4, #16
 8000c3c:	fa1f fe8c 	uxth.w	lr, ip
 8000c40:	fb09 1118 	mls	r1, r9, r8, r1
 8000c44:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c48:	fb08 f00e 	mul.w	r0, r8, lr
 8000c4c:	4288      	cmp	r0, r1
 8000c4e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b8>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c5c:	f080 8088 	bcs.w	8000d70 <__udivmoddi4+0x2bc>
 8000c60:	4288      	cmp	r0, r1
 8000c62:	f240 8085 	bls.w	8000d70 <__udivmoddi4+0x2bc>
 8000c66:	f1a8 0802 	sub.w	r8, r8, #2
 8000c6a:	4461      	add	r1, ip
 8000c6c:	1a09      	subs	r1, r1, r0
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c74:	fb09 1110 	mls	r1, r9, r0, r1
 8000c78:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c80:	458e      	cmp	lr, r1
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1e2>
 8000c84:	eb1c 0101 	adds.w	r1, ip, r1
 8000c88:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c8c:	d26c      	bcs.n	8000d68 <__udivmoddi4+0x2b4>
 8000c8e:	458e      	cmp	lr, r1
 8000c90:	d96a      	bls.n	8000d68 <__udivmoddi4+0x2b4>
 8000c92:	3802      	subs	r0, #2
 8000c94:	4461      	add	r1, ip
 8000c96:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c9a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c9e:	eba1 010e 	sub.w	r1, r1, lr
 8000ca2:	42a1      	cmp	r1, r4
 8000ca4:	46c8      	mov	r8, r9
 8000ca6:	46a6      	mov	lr, r4
 8000ca8:	d356      	bcc.n	8000d58 <__udivmoddi4+0x2a4>
 8000caa:	d053      	beq.n	8000d54 <__udivmoddi4+0x2a0>
 8000cac:	b15d      	cbz	r5, 8000cc6 <__udivmoddi4+0x212>
 8000cae:	ebb3 0208 	subs.w	r2, r3, r8
 8000cb2:	eb61 010e 	sbc.w	r1, r1, lr
 8000cb6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cba:	fa22 f306 	lsr.w	r3, r2, r6
 8000cbe:	40f1      	lsrs	r1, r6
 8000cc0:	431f      	orrs	r7, r3
 8000cc2:	e9c5 7100 	strd	r7, r1, [r5]
 8000cc6:	2600      	movs	r6, #0
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	f1c2 0320 	rsb	r3, r2, #32
 8000cd2:	40d8      	lsrs	r0, r3
 8000cd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4301      	orrs	r1, r0
 8000ce0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce4:	fa1f fe8c 	uxth.w	lr, ip
 8000ce8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cec:	fb07 3610 	mls	r6, r7, r0, r3
 8000cf0:	0c0b      	lsrs	r3, r1, #16
 8000cf2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cf6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cfa:	429e      	cmp	r6, r3
 8000cfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x260>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d0a:	d22f      	bcs.n	8000d6c <__udivmoddi4+0x2b8>
 8000d0c:	429e      	cmp	r6, r3
 8000d0e:	d92d      	bls.n	8000d6c <__udivmoddi4+0x2b8>
 8000d10:	3802      	subs	r0, #2
 8000d12:	4463      	add	r3, ip
 8000d14:	1b9b      	subs	r3, r3, r6
 8000d16:	b289      	uxth	r1, r1
 8000d18:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d1c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d24:	fb06 f30e 	mul.w	r3, r6, lr
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x28a>
 8000d2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d30:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d34:	d216      	bcs.n	8000d64 <__udivmoddi4+0x2b0>
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d914      	bls.n	8000d64 <__udivmoddi4+0x2b0>
 8000d3a:	3e02      	subs	r6, #2
 8000d3c:	4461      	add	r1, ip
 8000d3e:	1ac9      	subs	r1, r1, r3
 8000d40:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d44:	e738      	b.n	8000bb8 <__udivmoddi4+0x104>
 8000d46:	462e      	mov	r6, r5
 8000d48:	4628      	mov	r0, r5
 8000d4a:	e705      	b.n	8000b58 <__udivmoddi4+0xa4>
 8000d4c:	4606      	mov	r6, r0
 8000d4e:	e6e3      	b.n	8000b18 <__udivmoddi4+0x64>
 8000d50:	4618      	mov	r0, r3
 8000d52:	e6f8      	b.n	8000b46 <__udivmoddi4+0x92>
 8000d54:	454b      	cmp	r3, r9
 8000d56:	d2a9      	bcs.n	8000cac <__udivmoddi4+0x1f8>
 8000d58:	ebb9 0802 	subs.w	r8, r9, r2
 8000d5c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d60:	3801      	subs	r0, #1
 8000d62:	e7a3      	b.n	8000cac <__udivmoddi4+0x1f8>
 8000d64:	4646      	mov	r6, r8
 8000d66:	e7ea      	b.n	8000d3e <__udivmoddi4+0x28a>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	e794      	b.n	8000c96 <__udivmoddi4+0x1e2>
 8000d6c:	4640      	mov	r0, r8
 8000d6e:	e7d1      	b.n	8000d14 <__udivmoddi4+0x260>
 8000d70:	46d0      	mov	r8, sl
 8000d72:	e77b      	b.n	8000c6c <__udivmoddi4+0x1b8>
 8000d74:	3b02      	subs	r3, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	e732      	b.n	8000be0 <__udivmoddi4+0x12c>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e709      	b.n	8000b92 <__udivmoddi4+0xde>
 8000d7e:	4464      	add	r4, ip
 8000d80:	3802      	subs	r0, #2
 8000d82:	e742      	b.n	8000c0a <__udivmoddi4+0x156>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_I2S_TxCpltCallback+0x20>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d101      	bne.n	8000d9e <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 8000d9a:	f000 fda7 	bl	80018ec <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40003c00 	.word	0x40003c00

08000dac <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_I2S_ErrorCallback+0x20>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d101      	bne.n	8000dd2 <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 8000dce:	f7ff ffed 	bl	8000dac <AUDIO_OUT_Error_CallBack>
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40003c00 	.word	0x40003c00

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b094      	sub	sp, #80	; 0x50
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de6:	f001 fbb5 	bl	8002554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dea:	f000 f8c3 	bl	8000f74 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000dee:	f000 f929 	bl	8001044 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df2:	f000 fa29 	bl	8001248 <MX_GPIO_Init>
  MX_DMA_Init();
 8000df6:	f000 fa07 	bl	8001208 <MX_DMA_Init>
  MX_I2C1_Init();
 8000dfa:	f000 f943 	bl	8001084 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000dfe:	f000 f96f 	bl	80010e0 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000e02:	f000 f99b 	bl	800113c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000e06:	f000 f9c9 	bl	800119c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000e0a:	f009 fb2b 	bl	800a464 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8000e0e:	f007 f945 	bl	800809c <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int16_t buffer[3] = {0, 0, 0};
 8000e12:	2300      	movs	r3, #0
 8000e14:	833b      	strh	r3, [r7, #24]
 8000e16:	2300      	movs	r3, #0
 8000e18:	837b      	strh	r3, [r7, #26]
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	83bb      	strh	r3, [r7, #28]
	BSP_ACCELERO_Init();
 8000e1e:	f001 faab 	bl	8002378 <BSP_ACCELERO_Init>
	BSP_ACCELERO_GetXYZ(buffer);
 8000e22:	f107 0318 	add.w	r3, r7, #24
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 fb68 	bl	80024fc <BSP_ACCELERO_GetXYZ>
	double start_acceleration=1;
 8000e2c:	f04f 0200 	mov.w	r2, #0
 8000e30:	4b4d      	ldr	r3, [pc, #308]	; (8000f68 <main+0x188>)
 8000e32:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double bound=0.2;
 8000e36:	a34a      	add	r3, pc, #296	; (adr r3, 8000f60 <main+0x180>)
 8000e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	int count1=0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	64fb      	str	r3, [r7, #76]	; 0x4c
	int count2=0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	64bb      	str	r3, [r7, #72]	; 0x48
	int goDown=1;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	647b      	str	r3, [r7, #68]	; 0x44
	int state=0;	//1 - ground, 2 - rising, 3 - max height, 4 -
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int array[]={0,0,0};
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
	size_t i = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	643b      	str	r3, [r7, #64]	; 0x40
	  while (1)
	  {
		  BSP_ACCELERO_GetXYZ(buffer);
 8000e60:	f107 0318 	add.w	r3, r7, #24
 8000e64:	4618      	mov	r0, r3
 8000e66:	f001 fb49 	bl	80024fc <BSP_ACCELERO_GetXYZ>
		  double acceleration=(double)buffer[2]/16/1000.0-start_acceleration;
 8000e6a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fb04 	bl	800047c <__aeabi_i2d>
 8000e74:	f04f 0200 	mov.w	r2, #0
 8000e78:	4b3c      	ldr	r3, [pc, #240]	; (8000f6c <main+0x18c>)
 8000e7a:	f7ff fc93 	bl	80007a4 <__aeabi_ddiv>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	460b      	mov	r3, r1
 8000e82:	4610      	mov	r0, r2
 8000e84:	4619      	mov	r1, r3
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	4b39      	ldr	r3, [pc, #228]	; (8000f70 <main+0x190>)
 8000e8c:	f7ff fc8a 	bl	80007a4 <__aeabi_ddiv>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	4610      	mov	r0, r2
 8000e96:	4619      	mov	r1, r3
 8000e98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000e9c:	f7ff f9a0 	bl	80001e0 <__aeabi_dsub>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	e9c7 2308 	strd	r2, r3, [r7, #32]
		if ((-bound<acceleration) &&  (acceleration<bound)){
 8000ea8:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8000eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eac:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000eb0:	4622      	mov	r2, r4
 8000eb2:	462b      	mov	r3, r5
 8000eb4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000eb8:	f7ff fdda 	bl	8000a70 <__aeabi_dcmpgt>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00b      	beq.n	8000eda <main+0xfa>
 8000ec2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ec6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000eca:	f7ff fdb3 	bl	8000a34 <__aeabi_dcmplt>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d002      	beq.n	8000eda <main+0xfa>
			array[0] += 1;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	60fb      	str	r3, [r7, #12]
		}
		if (acceleration < -bound){
 8000eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000eea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000eee:	f7ff fda1 	bl	8000a34 <__aeabi_dcmplt>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d00a      	beq.n	8000f0e <main+0x12e>
			array[1] += 1;
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	3301      	adds	r3, #1
 8000efc:	613b      	str	r3, [r7, #16]
			if (goDown){
 8000efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d002      	beq.n	8000f0a <main+0x12a>
				count2+=1;
 8000f04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f06:	3301      	adds	r3, #1
 8000f08:	64bb      	str	r3, [r7, #72]	; 0x48
			}
			goDown=0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (acceleration > bound){
 8000f0e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000f12:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f16:	f7ff fdab 	bl	8000a70 <__aeabi_dcmpgt>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d00a      	beq.n	8000f36 <main+0x156>
			array[2] += 1;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	3301      	adds	r3, #1
 8000f24:	617b      	str	r3, [r7, #20]
			if (!goDown){
 8000f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <main+0x152>
				count1+=1;
 8000f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f2e:	3301      	adds	r3, #1
 8000f30:	64fb      	str	r3, [r7, #76]	; 0x4c
			}
			goDown=1;
 8000f32:	2301      	movs	r3, #1
 8000f34:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if ((count1>=10)&&(count2>=10)){
 8000f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f38:	2b09      	cmp	r3, #9
 8000f3a:	dd08      	ble.n	8000f4e <main+0x16e>
 8000f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f3e:	2b09      	cmp	r3, #9
 8000f40:	dd05      	ble.n	8000f4e <main+0x16e>
			i = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	643b      	str	r3, [r7, #64]	; 0x40
			count1 = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	64fb      	str	r3, [r7, #76]	; 0x4c
			count2 = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	64bb      	str	r3, [r7, #72]	; 0x48
		}
		i += 1;
 8000f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f50:	3301      	adds	r3, #1
 8000f52:	643b      	str	r3, [r7, #64]	; 0x40

		HAL_Delay(200);
 8000f54:	20c8      	movs	r0, #200	; 0xc8
 8000f56:	f001 fb6f 	bl	8002638 <HAL_Delay>
	  {
 8000f5a:	e781      	b.n	8000e60 <main+0x80>
 8000f5c:	f3af 8000 	nop.w
 8000f60:	9999999a 	.word	0x9999999a
 8000f64:	3fc99999 	.word	0x3fc99999
 8000f68:	3ff00000 	.word	0x3ff00000
 8000f6c:	40300000 	.word	0x40300000
 8000f70:	408f4000 	.word	0x408f4000

08000f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b094      	sub	sp, #80	; 0x50
 8000f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7a:	f107 0320 	add.w	r3, r7, #32
 8000f7e:	2230      	movs	r2, #48	; 0x30
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f009 fd96 	bl	800aab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	4b27      	ldr	r3, [pc, #156]	; (800103c <SystemClock_Config+0xc8>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	4a26      	ldr	r2, [pc, #152]	; (800103c <SystemClock_Config+0xc8>)
 8000fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa8:	4b24      	ldr	r3, [pc, #144]	; (800103c <SystemClock_Config+0xc8>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	4b21      	ldr	r3, [pc, #132]	; (8001040 <SystemClock_Config+0xcc>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a20      	ldr	r2, [pc, #128]	; (8001040 <SystemClock_Config+0xcc>)
 8000fbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <SystemClock_Config+0xcc>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000fe8:	23c0      	movs	r3, #192	; 0xc0
 8000fea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fec:	2304      	movs	r3, #4
 8000fee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff4:	f107 0320 	add.w	r3, r7, #32
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f005 fa37 	bl	800646c <HAL_RCC_OscConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001004:	f000 fa00 	bl	8001408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001008:	230f      	movs	r3, #15
 800100a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100c:	2302      	movs	r3, #2
 800100e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001014:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001018:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	2103      	movs	r1, #3
 8001024:	4618      	mov	r0, r3
 8001026:	f005 fc99 	bl	800695c <HAL_RCC_ClockConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001030:	f000 f9ea 	bl	8001408 <Error_Handler>
  }
}
 8001034:	bf00      	nop
 8001036:	3750      	adds	r7, #80	; 0x50
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40023800 	.word	0x40023800
 8001040:	40007000 	.word	0x40007000

08001044 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800104a:	463b      	mov	r3, r7
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
 8001058:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800105a:	2301      	movs	r3, #1
 800105c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800105e:	23c8      	movs	r3, #200	; 0xc8
 8001060:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001062:	2305      	movs	r3, #5
 8001064:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001066:	2302      	movs	r3, #2
 8001068:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	4618      	mov	r0, r3
 800106e:	f005 fe81 	bl	8006d74 <HAL_RCCEx_PeriphCLKConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001078:	f000 f9c6 	bl	8001408 <Error_Handler>
  }
}
 800107c:	bf00      	nop
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_I2C1_Init+0x50>)
 800108a:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <MX_I2C1_Init+0x54>)
 800108c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_I2C1_Init+0x50>)
 8001090:	4a12      	ldr	r2, [pc, #72]	; (80010dc <MX_I2C1_Init+0x58>)
 8001092:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_I2C1_Init+0x50>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_I2C1_Init+0x50>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010c2:	f003 fd49 	bl	8004b58 <HAL_I2C_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010cc:	f000 f99c 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000118 	.word	0x20000118
 80010d8:	40005400 	.word	0x40005400
 80010dc:	000186a0 	.word	0x000186a0

080010e0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_I2S2_Init+0x50>)
 80010e6:	4a13      	ldr	r2, [pc, #76]	; (8001134 <MX_I2S2_Init+0x54>)
 80010e8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_I2S2_Init+0x50>)
 80010ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_I2S2_Init+0x50>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80010f8:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <MX_I2S2_Init+0x50>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <MX_I2S2_Init+0x50>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <MX_I2S2_Init+0x50>)
 8001106:	4a0c      	ldr	r2, [pc, #48]	; (8001138 <MX_I2S2_Init+0x58>)
 8001108:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <MX_I2S2_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <MX_I2S2_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <MX_I2S2_Init+0x50>)
 8001118:	2201      	movs	r2, #1
 800111a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <MX_I2S2_Init+0x50>)
 800111e:	f004 fd19 	bl	8005b54 <HAL_I2S_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8001128:	f000 f96e 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	2000016c 	.word	0x2000016c
 8001134:	40003800 	.word	0x40003800
 8001138:	00017700 	.word	0x00017700

0800113c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <MX_I2S3_Init+0x54>)
 8001142:	4a14      	ldr	r2, [pc, #80]	; (8001194 <MX_I2S3_Init+0x58>)
 8001144:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <MX_I2S3_Init+0x54>)
 8001148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800114c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <MX_I2S3_Init+0x54>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_I2S3_Init+0x54>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <MX_I2S3_Init+0x54>)
 800115c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001160:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_I2S3_Init+0x54>)
 8001164:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <MX_I2S3_Init+0x5c>)
 8001166:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_I2S3_Init+0x54>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_I2S3_Init+0x54>)
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_I2S3_Init+0x54>)
 8001176:	2200      	movs	r2, #0
 8001178:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_I2S3_Init+0x54>)
 800117c:	f004 fcea 	bl	8005b54 <HAL_I2S_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001186:	f000 f93f 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200001b4 	.word	0x200001b4
 8001194:	40003c00 	.word	0x40003c00
 8001198:	00017700 	.word	0x00017700

0800119c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_SPI1_Init+0x64>)
 80011a2:	4a18      	ldr	r2, [pc, #96]	; (8001204 <MX_SPI1_Init+0x68>)
 80011a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <MX_SPI1_Init+0x64>)
 80011a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_SPI1_Init+0x64>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_SPI1_Init+0x64>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_SPI1_Init+0x64>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_SPI1_Init+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_SPI1_Init+0x64>)
 80011c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_SPI1_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <MX_SPI1_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_SPI1_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <MX_SPI1_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_SPI1_Init+0x64>)
 80011e8:	220a      	movs	r2, #10
 80011ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <MX_SPI1_Init+0x64>)
 80011ee:	f005 ff11 	bl	8007014 <HAL_SPI_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011f8:	f000 f906 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	2000025c 	.word	0x2000025c
 8001204:	40013000 	.word	0x40013000

08001208 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_DMA_Init+0x3c>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <MX_DMA_Init+0x3c>)
 8001218:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_DMA_Init+0x3c>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	2010      	movs	r0, #16
 8001230:	f001 fb01 	bl	8002836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001234:	2010      	movs	r0, #16
 8001236:	f001 fb1a 	bl	800286e <HAL_NVIC_EnableIRQ>

}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800

08001248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08c      	sub	sp, #48	; 0x30
 800124c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
 8001262:	4b64      	ldr	r3, [pc, #400]	; (80013f4 <MX_GPIO_Init+0x1ac>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a63      	ldr	r2, [pc, #396]	; (80013f4 <MX_GPIO_Init+0x1ac>)
 8001268:	f043 0310 	orr.w	r3, r3, #16
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b61      	ldr	r3, [pc, #388]	; (80013f4 <MX_GPIO_Init+0x1ac>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	61bb      	str	r3, [r7, #24]
 8001278:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	4b5d      	ldr	r3, [pc, #372]	; (80013f4 <MX_GPIO_Init+0x1ac>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a5c      	ldr	r2, [pc, #368]	; (80013f4 <MX_GPIO_Init+0x1ac>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b5a      	ldr	r3, [pc, #360]	; (80013f4 <MX_GPIO_Init+0x1ac>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	4b56      	ldr	r3, [pc, #344]	; (80013f4 <MX_GPIO_Init+0x1ac>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a55      	ldr	r2, [pc, #340]	; (80013f4 <MX_GPIO_Init+0x1ac>)
 80012a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b53      	ldr	r3, [pc, #332]	; (80013f4 <MX_GPIO_Init+0x1ac>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b4f      	ldr	r3, [pc, #316]	; (80013f4 <MX_GPIO_Init+0x1ac>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a4e      	ldr	r2, [pc, #312]	; (80013f4 <MX_GPIO_Init+0x1ac>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b4c      	ldr	r3, [pc, #304]	; (80013f4 <MX_GPIO_Init+0x1ac>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	4b48      	ldr	r3, [pc, #288]	; (80013f4 <MX_GPIO_Init+0x1ac>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a47      	ldr	r2, [pc, #284]	; (80013f4 <MX_GPIO_Init+0x1ac>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b45      	ldr	r3, [pc, #276]	; (80013f4 <MX_GPIO_Init+0x1ac>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	4b41      	ldr	r3, [pc, #260]	; (80013f4 <MX_GPIO_Init+0x1ac>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a40      	ldr	r2, [pc, #256]	; (80013f4 <MX_GPIO_Init+0x1ac>)
 80012f4:	f043 0308 	orr.w	r3, r3, #8
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b3e      	ldr	r3, [pc, #248]	; (80013f4 <MX_GPIO_Init+0x1ac>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	2108      	movs	r1, #8
 800130a:	483b      	ldr	r0, [pc, #236]	; (80013f8 <MX_GPIO_Init+0x1b0>)
 800130c:	f002 f81c 	bl	8003348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001310:	2201      	movs	r2, #1
 8001312:	2101      	movs	r1, #1
 8001314:	4839      	ldr	r0, [pc, #228]	; (80013fc <MX_GPIO_Init+0x1b4>)
 8001316:	f002 f817 	bl	8003348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2102      	movs	r1, #2
 800131e:	4837      	ldr	r0, [pc, #220]	; (80013fc <MX_GPIO_Init+0x1b4>)
 8001320:	f002 f812 	bl	8003348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001324:	2200      	movs	r2, #0
 8001326:	f24f 0110 	movw	r1, #61456	; 0xf010
 800132a:	4835      	ldr	r0, [pc, #212]	; (8001400 <MX_GPIO_Init+0x1b8>)
 800132c:	f002 f80c 	bl	8003348 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001330:	2304      	movs	r3, #4
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001334:	2300      	movs	r3, #0
 8001336:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	482d      	ldr	r0, [pc, #180]	; (80013f8 <MX_GPIO_Init+0x1b0>)
 8001344:	f001 fd98 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001348:	2308      	movs	r3, #8
 800134a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134c:	2301      	movs	r3, #1
 800134e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	4619      	mov	r1, r3
 800135e:	4826      	ldr	r0, [pc, #152]	; (80013f8 <MX_GPIO_Init+0x1b0>)
 8001360:	f001 fd8a 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001364:	2332      	movs	r3, #50	; 0x32
 8001366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001368:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800136c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4619      	mov	r1, r3
 8001378:	481f      	ldr	r0, [pc, #124]	; (80013f8 <MX_GPIO_Init+0x1b0>)
 800137a:	f001 fd7d 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC1 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_1;
 800137e:	2303      	movs	r3, #3
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	4619      	mov	r1, r3
 8001394:	4819      	ldr	r0, [pc, #100]	; (80013fc <MX_GPIO_Init+0x1b4>)
 8001396:	f001 fd6f 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800139a:	2301      	movs	r3, #1
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800139e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80013a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	4619      	mov	r1, r3
 80013ae:	4815      	ldr	r0, [pc, #84]	; (8001404 <MX_GPIO_Init+0x1bc>)
 80013b0:	f001 fd62 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80013b4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80013b8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ba:	2301      	movs	r3, #1
 80013bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	4619      	mov	r1, r3
 80013cc:	480c      	ldr	r0, [pc, #48]	; (8001400 <MX_GPIO_Init+0x1b8>)
 80013ce:	f001 fd53 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80013d2:	2320      	movs	r3, #32
 80013d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	4619      	mov	r1, r3
 80013e4:	4806      	ldr	r0, [pc, #24]	; (8001400 <MX_GPIO_Init+0x1b8>)
 80013e6:	f001 fd47 	bl	8002e78 <HAL_GPIO_Init>

}
 80013ea:	bf00      	nop
 80013ec:	3730      	adds	r7, #48	; 0x30
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40020800 	.word	0x40020800
 8001400:	40020c00 	.word	0x40020c00
 8001404:	40020000 	.word	0x40020000

08001408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800140c:	b672      	cpsid	i
}
 800140e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001410:	e7fe      	b.n	8001410 <Error_Handler+0x8>
	...

08001414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <HAL_MspInit+0x4c>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	4a0f      	ldr	r2, [pc, #60]	; (8001460 <HAL_MspInit+0x4c>)
 8001424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001428:	6453      	str	r3, [r2, #68]	; 0x44
 800142a:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <HAL_MspInit+0x4c>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_MspInit+0x4c>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	4a08      	ldr	r2, [pc, #32]	; (8001460 <HAL_MspInit+0x4c>)
 8001440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001444:	6413      	str	r3, [r2, #64]	; 0x40
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_MspInit+0x4c>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001452:	2007      	movs	r0, #7
 8001454:	f001 f9e4 	bl	8002820 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40023800 	.word	0x40023800

08001464 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a19      	ldr	r2, [pc, #100]	; (80014e8 <HAL_I2C_MspInit+0x84>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d12c      	bne.n	80014e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	4b18      	ldr	r3, [pc, #96]	; (80014ec <HAL_I2C_MspInit+0x88>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a17      	ldr	r2, [pc, #92]	; (80014ec <HAL_I2C_MspInit+0x88>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_I2C_MspInit+0x88>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80014a2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80014a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a8:	2312      	movs	r3, #18
 80014aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014b4:	2304      	movs	r3, #4
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	480c      	ldr	r0, [pc, #48]	; (80014f0 <HAL_I2C_MspInit+0x8c>)
 80014c0:	f001 fcda 	bl	8002e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HAL_I2C_MspInit+0x88>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <HAL_I2C_MspInit+0x88>)
 80014ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014d2:	6413      	str	r3, [r2, #64]	; 0x40
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <HAL_I2C_MspInit+0x88>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	; 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40005400 	.word	0x40005400
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020400 	.word	0x40020400

080014f4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0a      	ldr	r2, [pc, #40]	; (800152c <HAL_I2C_MspDeInit+0x38>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d10e      	bne.n	8001524 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_I2C_MspDeInit+0x3c>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a09      	ldr	r2, [pc, #36]	; (8001530 <HAL_I2C_MspDeInit+0x3c>)
 800150c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 8001512:	2140      	movs	r1, #64	; 0x40
 8001514:	4807      	ldr	r0, [pc, #28]	; (8001534 <HAL_I2C_MspDeInit+0x40>)
 8001516:	f001 fe33 	bl	8003180 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 800151a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <HAL_I2C_MspDeInit+0x40>)
 8001520:	f001 fe2e 	bl	8003180 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40005400 	.word	0x40005400
 8001530:	40023800 	.word	0x40023800
 8001534:	40020400 	.word	0x40020400

08001538 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08e      	sub	sp, #56	; 0x38
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a76      	ldr	r2, [pc, #472]	; (8001730 <HAL_I2S_MspInit+0x1f8>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d15b      	bne.n	8001612 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
 800155e:	4b75      	ldr	r3, [pc, #468]	; (8001734 <HAL_I2S_MspInit+0x1fc>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	4a74      	ldr	r2, [pc, #464]	; (8001734 <HAL_I2S_MspInit+0x1fc>)
 8001564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001568:	6413      	str	r3, [r2, #64]	; 0x40
 800156a:	4b72      	ldr	r3, [pc, #456]	; (8001734 <HAL_I2S_MspInit+0x1fc>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001572:	623b      	str	r3, [r7, #32]
 8001574:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
 800157a:	4b6e      	ldr	r3, [pc, #440]	; (8001734 <HAL_I2S_MspInit+0x1fc>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a6d      	ldr	r2, [pc, #436]	; (8001734 <HAL_I2S_MspInit+0x1fc>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b6b      	ldr	r3, [pc, #428]	; (8001734 <HAL_I2S_MspInit+0x1fc>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	61fb      	str	r3, [r7, #28]
 8001590:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	4b67      	ldr	r3, [pc, #412]	; (8001734 <HAL_I2S_MspInit+0x1fc>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a66      	ldr	r2, [pc, #408]	; (8001734 <HAL_I2S_MspInit+0x1fc>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b64      	ldr	r3, [pc, #400]	; (8001734 <HAL_I2S_MspInit+0x1fc>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015ae:	2304      	movs	r3, #4
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80015be:	2306      	movs	r3, #6
 80015c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c6:	4619      	mov	r1, r3
 80015c8:	485b      	ldr	r0, [pc, #364]	; (8001738 <HAL_I2S_MspInit+0x200>)
 80015ca:	f001 fc55 	bl	8002e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80015ce:	2308      	movs	r3, #8
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015de:	2305      	movs	r3, #5
 80015e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80015e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e6:	4619      	mov	r1, r3
 80015e8:	4853      	ldr	r0, [pc, #332]	; (8001738 <HAL_I2S_MspInit+0x200>)
 80015ea:	f001 fc45 	bl	8002e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80015ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001600:	2305      	movs	r3, #5
 8001602:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001608:	4619      	mov	r1, r3
 800160a:	484c      	ldr	r0, [pc, #304]	; (800173c <HAL_I2S_MspInit+0x204>)
 800160c:	f001 fc34 	bl	8002e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001610:	e089      	b.n	8001726 <HAL_I2S_MspInit+0x1ee>
  else if(hi2s->Instance==SPI3)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a4a      	ldr	r2, [pc, #296]	; (8001740 <HAL_I2S_MspInit+0x208>)
 8001618:	4293      	cmp	r3, r2
 800161a:	f040 8084 	bne.w	8001726 <HAL_I2S_MspInit+0x1ee>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	4b44      	ldr	r3, [pc, #272]	; (8001734 <HAL_I2S_MspInit+0x1fc>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	4a43      	ldr	r2, [pc, #268]	; (8001734 <HAL_I2S_MspInit+0x1fc>)
 8001628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800162c:	6413      	str	r3, [r2, #64]	; 0x40
 800162e:	4b41      	ldr	r3, [pc, #260]	; (8001734 <HAL_I2S_MspInit+0x1fc>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	4b3d      	ldr	r3, [pc, #244]	; (8001734 <HAL_I2S_MspInit+0x1fc>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a3c      	ldr	r2, [pc, #240]	; (8001734 <HAL_I2S_MspInit+0x1fc>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b3a      	ldr	r3, [pc, #232]	; (8001734 <HAL_I2S_MspInit+0x1fc>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b36      	ldr	r3, [pc, #216]	; (8001734 <HAL_I2S_MspInit+0x1fc>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a35      	ldr	r2, [pc, #212]	; (8001734 <HAL_I2S_MspInit+0x1fc>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b33      	ldr	r3, [pc, #204]	; (8001734 <HAL_I2S_MspInit+0x1fc>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001672:	2310      	movs	r3, #16
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001682:	2306      	movs	r3, #6
 8001684:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168a:	4619      	mov	r1, r3
 800168c:	482d      	ldr	r0, [pc, #180]	; (8001744 <HAL_I2S_MspInit+0x20c>)
 800168e:	f001 fbf3 	bl	8002e78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001692:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	2302      	movs	r3, #2
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016a4:	2306      	movs	r3, #6
 80016a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ac:	4619      	mov	r1, r3
 80016ae:	4822      	ldr	r0, [pc, #136]	; (8001738 <HAL_I2S_MspInit+0x200>)
 80016b0:	f001 fbe2 	bl	8002e78 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80016b4:	4b24      	ldr	r3, [pc, #144]	; (8001748 <HAL_I2S_MspInit+0x210>)
 80016b6:	4a25      	ldr	r2, [pc, #148]	; (800174c <HAL_I2S_MspInit+0x214>)
 80016b8:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <HAL_I2S_MspInit+0x210>)
 80016bc:	2200      	movs	r2, #0
 80016be:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016c0:	4b21      	ldr	r3, [pc, #132]	; (8001748 <HAL_I2S_MspInit+0x210>)
 80016c2:	2240      	movs	r2, #64	; 0x40
 80016c4:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <HAL_I2S_MspInit+0x210>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016cc:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <HAL_I2S_MspInit+0x210>)
 80016ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016d2:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016d4:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <HAL_I2S_MspInit+0x210>)
 80016d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016da:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016dc:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <HAL_I2S_MspInit+0x210>)
 80016de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016e2:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_I2S_MspInit+0x210>)
 80016e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ea:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <HAL_I2S_MspInit+0x210>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_I2S_MspInit+0x210>)
 80016f4:	2204      	movs	r2, #4
 80016f6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <HAL_I2S_MspInit+0x210>)
 80016fa:	2203      	movs	r2, #3
 80016fc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_I2S_MspInit+0x210>)
 8001700:	2200      	movs	r2, #0
 8001702:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001704:	4b10      	ldr	r3, [pc, #64]	; (8001748 <HAL_I2S_MspInit+0x210>)
 8001706:	2200      	movs	r2, #0
 8001708:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800170a:	480f      	ldr	r0, [pc, #60]	; (8001748 <HAL_I2S_MspInit+0x210>)
 800170c:	f001 f8ca 	bl	80028a4 <HAL_DMA_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_I2S_MspInit+0x1e2>
      Error_Handler();
 8001716:	f7ff fe77 	bl	8001408 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <HAL_I2S_MspInit+0x210>)
 800171e:	639a      	str	r2, [r3, #56]	; 0x38
 8001720:	4a09      	ldr	r2, [pc, #36]	; (8001748 <HAL_I2S_MspInit+0x210>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001726:	bf00      	nop
 8001728:	3738      	adds	r7, #56	; 0x38
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40003800 	.word	0x40003800
 8001734:	40023800 	.word	0x40023800
 8001738:	40020800 	.word	0x40020800
 800173c:	40020400 	.word	0x40020400
 8001740:	40003c00 	.word	0x40003c00
 8001744:	40020000 	.word	0x40020000
 8001748:	200001fc 	.word	0x200001fc
 800174c:	40026088 	.word	0x40026088

08001750 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a19      	ldr	r2, [pc, #100]	; (80017d4 <HAL_SPI_MspInit+0x84>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d12b      	bne.n	80017ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <HAL_SPI_MspInit+0x88>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <HAL_SPI_MspInit+0x88>)
 800177c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001780:	6453      	str	r3, [r2, #68]	; 0x44
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_SPI_MspInit+0x88>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_SPI_MspInit+0x88>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <HAL_SPI_MspInit+0x88>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <HAL_SPI_MspInit+0x88>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80017aa:	23e0      	movs	r3, #224	; 0xe0
 80017ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ba:	2305      	movs	r3, #5
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	4805      	ldr	r0, [pc, #20]	; (80017dc <HAL_SPI_MspInit+0x8c>)
 80017c6:	f001 fb57 	bl	8002e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	; 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40013000 	.word	0x40013000
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020000 	.word	0x40020000

080017e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <NMI_Handler+0x4>

080017e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <MemManage_Handler+0x4>

080017f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <BusFault_Handler+0x4>

080017f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <UsageFault_Handler+0x4>

080017fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800182c:	f000 fee4 	bl	80025f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}

08001834 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001838:	4802      	ldr	r0, [pc, #8]	; (8001844 <DMA1_Stream5_IRQHandler+0x10>)
 800183a:	f001 f8e1 	bl	8002a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200001fc 	.word	0x200001fc

08001848 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <OTG_FS_IRQHandler+0x10>)
 800184e:	f001 ffff 	bl	8003850 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20001710 	.word	0x20001710

0800185c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001864:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <_sbrk+0x5c>)
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <_sbrk+0x60>)
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <_sbrk+0x64>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d102      	bne.n	800187e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <_sbrk+0x64>)
 800187a:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <_sbrk+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	429a      	cmp	r2, r3
 800188a:	d207      	bcs.n	800189c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800188c:	f009 f8ca 	bl	800aa24 <__errno>
 8001890:	4603      	mov	r3, r0
 8001892:	220c      	movs	r2, #12
 8001894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	e009      	b.n	80018b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <_sbrk+0x64>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <_sbrk+0x64>)
 80018ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20020000 	.word	0x20020000
 80018bc:	00000400 	.word	0x00000400
 80018c0:	200002b4 	.word	0x200002b4
 80018c4:	20001a28 	.word	0x20001a28

080018c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <SystemInit+0x20>)
 80018ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <SystemInit+0x20>)
 80018d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d104      	bne.n	8001902 <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 80018fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018fe:	2202      	movs	r2, #2
 8001900:	701a      	strb	r2, [r3, #0]
  }
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	200012c0 	.word	0x200012c0
 8001910:	200002b8 	.word	0x200002b8

08001914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800194c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001918:	480d      	ldr	r0, [pc, #52]	; (8001950 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800191a:	490e      	ldr	r1, [pc, #56]	; (8001954 <LoopFillZerobss+0x1a>)

  ldr r2, =_sidata
 800191c:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001920:	e002      	b.n	8001928 <LoopCopyDataInit>

08001922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001926:	3304      	adds	r3, #4

08001928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800192c:	d3f9      	bcc.n	8001922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192e:	4a0b      	ldr	r2, [pc, #44]	; (800195c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001930:	4c0b      	ldr	r4, [pc, #44]	; (8001960 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001934:	e001      	b.n	800193a <LoopFillZerobss>

08001936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001938:	3204      	adds	r2, #4

0800193a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800193c:	d3fb      	bcc.n	8001936 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800193e:	f7ff ffc3 	bl	80018c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001942:	f009 f875 	bl	800aa30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001946:	f7ff fa4b 	bl	8000de0 <main>
  bx  lr    
 800194a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800194c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001954:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001958:	0800ad20 	.word	0x0800ad20
  ldr r2, =_sbss
 800195c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001960:	20001a24 	.word	0x20001a24

08001964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001964:	e7fe      	b.n	8001964 <ADC_IRQHandler>

08001966 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8001966:	b580      	push	{r7, lr}
 8001968:	b084      	sub	sp, #16
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001970:	2300      	movs	r3, #0
 8001972:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8001974:	f000 fc82 	bl	800227c <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	461a      	mov	r2, r3
 8001980:	2120      	movs	r1, #32
 8001982:	2032      	movs	r0, #50	; 0x32
 8001984:	f000 fcd2 	bl	800232c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8001988:	2300      	movs	r3, #0
 800198a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	461a      	mov	r2, r3
 8001990:	2123      	movs	r1, #35	; 0x23
 8001992:	2032      	movs	r0, #50	; 0x32
 8001994:	f000 fcca 	bl	800232c <COMPASSACCELERO_IO_Write>
}
 8001998:	bf00      	nop
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80019b4:	2300      	movs	r3, #0
 80019b6:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 80019b8:	f000 fc60 	bl	800227c <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 80019bc:	210f      	movs	r1, #15
 80019be:	2032      	movs	r0, #50	; 0x32
 80019c0:	f000 fcc7 	bl	8002352 <COMPASSACCELERO_IO_Read>
 80019c4:	4603      	mov	r3, r0
 80019c6:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80019c8:	79fb      	ldrb	r3, [r7, #7]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 80019d8:	2124      	movs	r1, #36	; 0x24
 80019da:	2032      	movs	r0, #50	; 0x32
 80019dc:	f000 fcb9 	bl	8002352 <COMPASSACCELERO_IO_Read>
 80019e0:	4603      	mov	r3, r0
 80019e2:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019ea:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	461a      	mov	r2, r3
 80019f0:	2124      	movs	r1, #36	; 0x24
 80019f2:	2032      	movs	r0, #50	; 0x32
 80019f4:	f000 fc9a 	bl	800232c <COMPASSACCELERO_IO_Write>
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8001a0a:	2121      	movs	r1, #33	; 0x21
 8001a0c:	2032      	movs	r0, #50	; 0x32
 8001a0e:	f000 fca0 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001a12:	4603      	mov	r3, r0
 8001a14:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	f003 030c 	and.w	r3, r3, #12
 8001a1c:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8001a1e:	7bfa      	ldrb	r2, [r7, #15]
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	2121      	movs	r1, #33	; 0x21
 8001a2c:	2032      	movs	r0, #50	; 0x32
 8001a2e:	f000 fc7d 	bl	800232c <COMPASSACCELERO_IO_Write>
}
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b084      	sub	sp, #16
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8001a44:	2121      	movs	r1, #33	; 0x21
 8001a46:	2032      	movs	r0, #50	; 0x32
 8001a48:	f000 fc83 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	f023 0308 	bic.w	r3, r3, #8
 8001a56:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
 8001a62:	461a      	mov	r2, r3
 8001a64:	2121      	movs	r1, #33	; 0x21
 8001a66:	2032      	movs	r0, #50	; 0x32
 8001a68:	f000 fc60 	bl	800232c <COMPASSACCELERO_IO_Write>
}
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8001a84:	2301      	movs	r3, #1
 8001a86:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8001a88:	2123      	movs	r1, #35	; 0x23
 8001a8a:	2032      	movs	r0, #50	; 0x32
 8001a8c:	f000 fc61 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001a90:	4603      	mov	r3, r0
 8001a92:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8001a94:	2124      	movs	r1, #36	; 0x24
 8001a96:	2032      	movs	r0, #50	; 0x32
 8001a98:	f000 fc5b 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8001aa0:	2128      	movs	r1, #40	; 0x28
 8001aa2:	2032      	movs	r0, #50	; 0x32
 8001aa4:	f000 fc55 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	b25b      	sxtb	r3, r3
 8001aac:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8001aae:	2129      	movs	r1, #41	; 0x29
 8001ab0:	2032      	movs	r0, #50	; 0x32
 8001ab2:	f000 fc4e 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	b25b      	sxtb	r3, r3
 8001aba:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8001abc:	212a      	movs	r1, #42	; 0x2a
 8001abe:	2032      	movs	r0, #50	; 0x32
 8001ac0:	f000 fc47 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	b25b      	sxtb	r3, r3
 8001ac8:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 8001aca:	212b      	movs	r1, #43	; 0x2b
 8001acc:	2032      	movs	r0, #50	; 0x32
 8001ace:	f000 fc40 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 8001ad8:	212c      	movs	r1, #44	; 0x2c
 8001ada:	2032      	movs	r0, #50	; 0x32
 8001adc:	f000 fc39 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	b25b      	sxtb	r3, r3
 8001ae4:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8001ae6:	212d      	movs	r1, #45	; 0x2d
 8001ae8:	2032      	movs	r0, #50	; 0x32
 8001aea:	f000 fc32 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001aee:	4603      	mov	r3, r0
 8001af0:	b25b      	sxtb	r3, r3
 8001af2:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8001af4:	7d3b      	ldrb	r3, [r7, #20]
 8001af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d123      	bne.n	8001b46 <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	77fb      	strb	r3, [r7, #31]
 8001b02:	e01c      	b.n	8001b3e <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8001b04:	7ffb      	ldrb	r3, [r7, #31]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	3301      	adds	r3, #1
 8001b0a:	3320      	adds	r3, #32
 8001b0c:	443b      	add	r3, r7
 8001b0e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	7ffb      	ldrb	r3, [r7, #31]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	3320      	adds	r3, #32
 8001b1e:	443b      	add	r3, r7
 8001b20:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	7ffb      	ldrb	r3, [r7, #31]
 8001b2c:	b212      	sxth	r2, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	3320      	adds	r3, #32
 8001b32:	443b      	add	r3, r7
 8001b34:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001b38:	7ffb      	ldrb	r3, [r7, #31]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	77fb      	strb	r3, [r7, #31]
 8001b3e:	7ffb      	ldrb	r3, [r7, #31]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d9df      	bls.n	8001b04 <LSM303AGR_AccReadXYZ+0x90>
 8001b44:	e022      	b.n	8001b8c <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	77fb      	strb	r3, [r7, #31]
 8001b4a:	e01c      	b.n	8001b86 <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001b4c:	7ffb      	ldrb	r3, [r7, #31]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	3320      	adds	r3, #32
 8001b52:	443b      	add	r3, r7
 8001b54:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	7ffb      	ldrb	r3, [r7, #31]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	3301      	adds	r3, #1
 8001b64:	3320      	adds	r3, #32
 8001b66:	443b      	add	r3, r7
 8001b68:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	4413      	add	r3, r2
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	7ffb      	ldrb	r3, [r7, #31]
 8001b74:	b212      	sxth	r2, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	3320      	adds	r3, #32
 8001b7a:	443b      	add	r3, r7
 8001b7c:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001b80:	7ffb      	ldrb	r3, [r7, #31]
 8001b82:	3301      	adds	r3, #1
 8001b84:	77fb      	strb	r3, [r7, #31]
 8001b86:	7ffb      	ldrb	r3, [r7, #31]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d9df      	bls.n	8001b4c <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8001b8c:	7d3b      	ldrb	r3, [r7, #20]
 8001b8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001b92:	2b30      	cmp	r3, #48	; 0x30
 8001b94:	d013      	beq.n	8001bbe <LSM303AGR_AccReadXYZ+0x14a>
 8001b96:	2b30      	cmp	r3, #48	; 0x30
 8001b98:	dc14      	bgt.n	8001bc4 <LSM303AGR_AccReadXYZ+0x150>
 8001b9a:	2b20      	cmp	r3, #32
 8001b9c:	d00c      	beq.n	8001bb8 <LSM303AGR_AccReadXYZ+0x144>
 8001b9e:	2b20      	cmp	r3, #32
 8001ba0:	dc10      	bgt.n	8001bc4 <LSM303AGR_AccReadXYZ+0x150>
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <LSM303AGR_AccReadXYZ+0x138>
 8001ba6:	2b10      	cmp	r3, #16
 8001ba8:	d003      	beq.n	8001bb2 <LSM303AGR_AccReadXYZ+0x13e>
 8001baa:	e00b      	b.n	8001bc4 <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8001bac:	2301      	movs	r3, #1
 8001bae:	77bb      	strb	r3, [r7, #30]
    break;
 8001bb0:	e008      	b.n	8001bc4 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	77bb      	strb	r3, [r7, #30]
    break;
 8001bb6:	e005      	b.n	8001bc4 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 8001bb8:	2304      	movs	r3, #4
 8001bba:	77bb      	strb	r3, [r7, #30]
    break;
 8001bbc:	e002      	b.n	8001bc4 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 8001bbe:	230c      	movs	r3, #12
 8001bc0:	77bb      	strb	r3, [r7, #30]
    break;
 8001bc2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	77fb      	strb	r3, [r7, #31]
 8001bc8:	e014      	b.n	8001bf4 <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001bca:	7ffb      	ldrb	r3, [r7, #31]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	3320      	adds	r3, #32
 8001bd0:	443b      	add	r3, r7
 8001bd2:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	7fbb      	ldrb	r3, [r7, #30]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	fb12 f303 	smulbb	r3, r2, r3
 8001be0:	b299      	uxth	r1, r3
 8001be2:	7ffb      	ldrb	r3, [r7, #31]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	b20a      	sxth	r2, r1
 8001bec:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001bee:	7ffb      	ldrb	r3, [r7, #31]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	77fb      	strb	r3, [r7, #31]
 8001bf4:	7ffb      	ldrb	r3, [r7, #31]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d9e7      	bls.n	8001bca <LSM303AGR_AccReadXYZ+0x156>
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	bf00      	nop
 8001bfe:	3720      	adds	r7, #32
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8001c12:	2121      	movs	r1, #33	; 0x21
 8001c14:	2032      	movs	r0, #50	; 0x32
 8001c16:	f000 fb9c 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	f023 0304 	bic.w	r3, r3, #4
 8001c24:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001c26:	7bfa      	ldrb	r2, [r7, #15]
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	461a      	mov	r2, r3
 8001c32:	2121      	movs	r1, #33	; 0x21
 8001c34:	2032      	movs	r0, #50	; 0x32
 8001c36:	f000 fb79 	bl	800232c <COMPASSACCELERO_IO_Write>
}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 8001c50:	2122      	movs	r1, #34	; 0x22
 8001c52:	2032      	movs	r0, #50	; 0x32
 8001c54:	f000 fb7d 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 8001c5c:	7bfa      	ldrb	r2, [r7, #15]
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	461a      	mov	r2, r3
 8001c68:	2122      	movs	r1, #34	; 0x22
 8001c6a:	2032      	movs	r0, #50	; 0x32
 8001c6c:	f000 fb5e 	bl	800232c <COMPASSACCELERO_IO_Write>
}
 8001c70:	bf00      	nop
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001c82:	2300      	movs	r3, #0
 8001c84:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 8001c86:	2138      	movs	r1, #56	; 0x38
 8001c88:	2032      	movs	r0, #50	; 0x32
 8001c8a:	f000 fb62 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001c92:	7bfa      	ldrb	r2, [r7, #15]
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	2138      	movs	r1, #56	; 0x38
 8001ca0:	2032      	movs	r0, #50	; 0x32
 8001ca2:	f000 fb43 	bl	800232c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8001ca6:	230a      	movs	r3, #10
 8001ca8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	461a      	mov	r2, r3
 8001cae:	213a      	movs	r1, #58	; 0x3a
 8001cb0:	2032      	movs	r0, #50	; 0x32
 8001cb2:	f000 fb3b 	bl	800232c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8001cb6:	2305      	movs	r3, #5
 8001cb8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	213b      	movs	r1, #59	; 0x3b
 8001cc0:	2032      	movs	r0, #50	; 0x32
 8001cc2:	f000 fb33 	bl	800232c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	213c      	movs	r1, #60	; 0x3c
 8001ccc:	2032      	movs	r0, #50	; 0x32
 8001cce:	f000 fb2d 	bl	800232c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001cd2:	2332      	movs	r3, #50	; 0x32
 8001cd4:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	213d      	movs	r1, #61	; 0x3d
 8001cdc:	2032      	movs	r0, #50	; 0x32
 8001cde:	f000 fb25 	bl	800232c <COMPASSACCELERO_IO_Write>
}
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 8001cea:	b580      	push	{r7, lr}
 8001cec:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8001cee:	f000 faed 	bl	80022cc <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8001cf2:	2080      	movs	r0, #128	; 0x80
 8001cf4:	f7ff ffa5 	bl	8001c42 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8001cf8:	2004      	movs	r0, #4
 8001cfa:	f7ff ff83 	bl	8001c04 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 8001cfe:	2010      	movs	r0, #16
 8001d00:	f7ff ffba 	bl	8001c78 <LSM303AGR_AccClickITEnable>
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001d12:	2300      	movs	r3, #0
 8001d14:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8001d16:	f000 fab1 	bl	800227c <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	461a      	mov	r2, r3
 8001d22:	2120      	movs	r1, #32
 8001d24:	2032      	movs	r0, #50	; 0x32
 8001d26:	f000 fb01 	bl	800232c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	461a      	mov	r2, r3
 8001d32:	2123      	movs	r1, #35	; 0x23
 8001d34:	2032      	movs	r0, #50	; 0x32
 8001d36:	f000 faf9 	bl	800232c <COMPASSACCELERO_IO_Write>
}
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001d56:	2300      	movs	r3, #0
 8001d58:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8001d5a:	f000 fa8f 	bl	800227c <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8001d5e:	210f      	movs	r1, #15
 8001d60:	2032      	movs	r0, #50	; 0x32
 8001d62:	f000 faf6 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001d7a:	2124      	movs	r1, #36	; 0x24
 8001d7c:	2032      	movs	r0, #50	; 0x32
 8001d7e:	f000 fae8 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d8c:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	461a      	mov	r2, r3
 8001d92:	2124      	movs	r1, #36	; 0x24
 8001d94:	2032      	movs	r0, #50	; 0x32
 8001d96:	f000 fac9 	bl	800232c <COMPASSACCELERO_IO_Write>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001dac:	2121      	movs	r1, #33	; 0x21
 8001dae:	2032      	movs	r0, #50	; 0x32
 8001db0:	f000 facf 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001db4:	4603      	mov	r3, r0
 8001db6:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8001dc0:	7bfa      	ldrb	r2, [r7, #15]
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	2121      	movs	r1, #33	; 0x21
 8001dce:	2032      	movs	r0, #50	; 0x32
 8001dd0:	f000 faac 	bl	800232c <COMPASSACCELERO_IO_Write>
}
 8001dd4:	bf00      	nop
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001de6:	2121      	movs	r1, #33	; 0x21
 8001de8:	2032      	movs	r0, #50	; 0x32
 8001dea:	f000 fab2 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001dee:	4603      	mov	r3, r0
 8001df0:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	f023 0308 	bic.w	r3, r3, #8
 8001df8:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	461a      	mov	r2, r3
 8001e06:	2121      	movs	r1, #33	; 0x21
 8001e08:	2032      	movs	r0, #50	; 0x32
 8001e0a:	f000 fa8f 	bl	800232c <COMPASSACCELERO_IO_Write>
}
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b088      	sub	sp, #32
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8001e1e:	2300      	movs	r3, #0
 8001e20:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001e26:	2301      	movs	r3, #1
 8001e28:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8001e2a:	2123      	movs	r1, #35	; 0x23
 8001e2c:	2032      	movs	r0, #50	; 0x32
 8001e2e:	f000 fa90 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001e32:	4603      	mov	r3, r0
 8001e34:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001e36:	2124      	movs	r1, #36	; 0x24
 8001e38:	2032      	movs	r0, #50	; 0x32
 8001e3a:	f000 fa8a 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8001e42:	2128      	movs	r1, #40	; 0x28
 8001e44:	2032      	movs	r0, #50	; 0x32
 8001e46:	f000 fa84 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	b25b      	sxtb	r3, r3
 8001e4e:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8001e50:	2129      	movs	r1, #41	; 0x29
 8001e52:	2032      	movs	r0, #50	; 0x32
 8001e54:	f000 fa7d 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	b25b      	sxtb	r3, r3
 8001e5c:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8001e5e:	212a      	movs	r1, #42	; 0x2a
 8001e60:	2032      	movs	r0, #50	; 0x32
 8001e62:	f000 fa76 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001e66:	4603      	mov	r3, r0
 8001e68:	b25b      	sxtb	r3, r3
 8001e6a:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8001e6c:	212b      	movs	r1, #43	; 0x2b
 8001e6e:	2032      	movs	r0, #50	; 0x32
 8001e70:	f000 fa6f 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001e74:	4603      	mov	r3, r0
 8001e76:	b25b      	sxtb	r3, r3
 8001e78:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8001e7a:	212c      	movs	r1, #44	; 0x2c
 8001e7c:	2032      	movs	r0, #50	; 0x32
 8001e7e:	f000 fa68 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001e82:	4603      	mov	r3, r0
 8001e84:	b25b      	sxtb	r3, r3
 8001e86:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8001e88:	212d      	movs	r1, #45	; 0x2d
 8001e8a:	2032      	movs	r0, #50	; 0x32
 8001e8c:	f000 fa61 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001e90:	4603      	mov	r3, r0
 8001e92:	b25b      	sxtb	r3, r3
 8001e94:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8001e96:	7d3b      	ldrb	r3, [r7, #20]
 8001e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d123      	bne.n	8001ee8 <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	77fb      	strb	r3, [r7, #31]
 8001ea4:	e01c      	b.n	8001ee0 <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8001ea6:	7ffb      	ldrb	r3, [r7, #31]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	3301      	adds	r3, #1
 8001eac:	3320      	adds	r3, #32
 8001eae:	443b      	add	r3, r7
 8001eb0:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	021b      	lsls	r3, r3, #8
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	7ffb      	ldrb	r3, [r7, #31]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	3320      	adds	r3, #32
 8001ec0:	443b      	add	r3, r7
 8001ec2:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	4413      	add	r3, r2
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	7ffb      	ldrb	r3, [r7, #31]
 8001ece:	b212      	sxth	r2, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	3320      	adds	r3, #32
 8001ed4:	443b      	add	r3, r7
 8001ed6:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001eda:	7ffb      	ldrb	r3, [r7, #31]
 8001edc:	3301      	adds	r3, #1
 8001ede:	77fb      	strb	r3, [r7, #31]
 8001ee0:	7ffb      	ldrb	r3, [r7, #31]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d9df      	bls.n	8001ea6 <LSM303DLHC_AccReadXYZ+0x90>
 8001ee6:	e022      	b.n	8001f2e <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	77fb      	strb	r3, [r7, #31]
 8001eec:	e01c      	b.n	8001f28 <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001eee:	7ffb      	ldrb	r3, [r7, #31]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	3320      	adds	r3, #32
 8001ef4:	443b      	add	r3, r7
 8001ef6:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	021b      	lsls	r3, r3, #8
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	7ffb      	ldrb	r3, [r7, #31]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	3301      	adds	r3, #1
 8001f06:	3320      	adds	r3, #32
 8001f08:	443b      	add	r3, r7
 8001f0a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	4413      	add	r3, r2
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	7ffb      	ldrb	r3, [r7, #31]
 8001f16:	b212      	sxth	r2, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	3320      	adds	r3, #32
 8001f1c:	443b      	add	r3, r7
 8001f1e:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001f22:	7ffb      	ldrb	r3, [r7, #31]
 8001f24:	3301      	adds	r3, #1
 8001f26:	77fb      	strb	r3, [r7, #31]
 8001f28:	7ffb      	ldrb	r3, [r7, #31]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d9df      	bls.n	8001eee <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8001f2e:	7d3b      	ldrb	r3, [r7, #20]
 8001f30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001f34:	2b30      	cmp	r3, #48	; 0x30
 8001f36:	d013      	beq.n	8001f60 <LSM303DLHC_AccReadXYZ+0x14a>
 8001f38:	2b30      	cmp	r3, #48	; 0x30
 8001f3a:	dc14      	bgt.n	8001f66 <LSM303DLHC_AccReadXYZ+0x150>
 8001f3c:	2b20      	cmp	r3, #32
 8001f3e:	d00c      	beq.n	8001f5a <LSM303DLHC_AccReadXYZ+0x144>
 8001f40:	2b20      	cmp	r3, #32
 8001f42:	dc10      	bgt.n	8001f66 <LSM303DLHC_AccReadXYZ+0x150>
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d002      	beq.n	8001f4e <LSM303DLHC_AccReadXYZ+0x138>
 8001f48:	2b10      	cmp	r3, #16
 8001f4a:	d003      	beq.n	8001f54 <LSM303DLHC_AccReadXYZ+0x13e>
 8001f4c:	e00b      	b.n	8001f66 <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	77bb      	strb	r3, [r7, #30]
    break;
 8001f52:	e008      	b.n	8001f66 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8001f54:	2302      	movs	r3, #2
 8001f56:	77bb      	strb	r3, [r7, #30]
    break;
 8001f58:	e005      	b.n	8001f66 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	77bb      	strb	r3, [r7, #30]
    break;
 8001f5e:	e002      	b.n	8001f66 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8001f60:	230c      	movs	r3, #12
 8001f62:	77bb      	strb	r3, [r7, #30]
    break;
 8001f64:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	77fb      	strb	r3, [r7, #31]
 8001f6a:	e014      	b.n	8001f96 <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001f6c:	7ffb      	ldrb	r3, [r7, #31]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	3320      	adds	r3, #32
 8001f72:	443b      	add	r3, r7
 8001f74:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	7fbb      	ldrb	r3, [r7, #30]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	fb12 f303 	smulbb	r3, r2, r3
 8001f82:	b299      	uxth	r1, r3
 8001f84:	7ffb      	ldrb	r3, [r7, #31]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	b20a      	sxth	r2, r1
 8001f8e:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001f90:	7ffb      	ldrb	r3, [r7, #31]
 8001f92:	3301      	adds	r3, #1
 8001f94:	77fb      	strb	r3, [r7, #31]
 8001f96:	7ffb      	ldrb	r3, [r7, #31]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d9e7      	bls.n	8001f6c <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	3720      	adds	r7, #32
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b084      	sub	sp, #16
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001fb4:	2121      	movs	r1, #33	; 0x21
 8001fb6:	2032      	movs	r0, #50	; 0x32
 8001fb8:	f000 f9cb 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	f023 0304 	bic.w	r3, r3, #4
 8001fc6:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001fc8:	7bfa      	ldrb	r2, [r7, #15]
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	2121      	movs	r1, #33	; 0x21
 8001fd6:	2032      	movs	r0, #50	; 0x32
 8001fd8:	f000 f9a8 	bl	800232c <COMPASSACCELERO_IO_Write>
}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8001ff2:	2122      	movs	r1, #34	; 0x22
 8001ff4:	2032      	movs	r0, #50	; 0x32
 8001ff6:	f000 f9ac 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8001ffe:	7bfa      	ldrb	r2, [r7, #15]
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	4313      	orrs	r3, r2
 8002004:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	461a      	mov	r2, r3
 800200a:	2122      	movs	r1, #34	; 0x22
 800200c:	2032      	movs	r0, #50	; 0x32
 800200e:	f000 f98d 	bl	800232c <COMPASSACCELERO_IO_Write>
}
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	4603      	mov	r3, r0
 8002022:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8002024:	2300      	movs	r3, #0
 8002026:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8002028:	2138      	movs	r1, #56	; 0x38
 800202a:	2032      	movs	r0, #50	; 0x32
 800202c:	f000 f991 	bl	8002352 <COMPASSACCELERO_IO_Read>
 8002030:	4603      	mov	r3, r0
 8002032:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	4313      	orrs	r3, r2
 800203a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 800203c:	7bfb      	ldrb	r3, [r7, #15]
 800203e:	461a      	mov	r2, r3
 8002040:	2138      	movs	r1, #56	; 0x38
 8002042:	2032      	movs	r0, #50	; 0x32
 8002044:	f000 f972 	bl	800232c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8002048:	230a      	movs	r3, #10
 800204a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	461a      	mov	r2, r3
 8002050:	213a      	movs	r1, #58	; 0x3a
 8002052:	2032      	movs	r0, #50	; 0x32
 8002054:	f000 f96a 	bl	800232c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8002058:	2305      	movs	r3, #5
 800205a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	461a      	mov	r2, r3
 8002060:	213b      	movs	r1, #59	; 0x3b
 8002062:	2032      	movs	r0, #50	; 0x32
 8002064:	f000 f962 	bl	800232c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	461a      	mov	r2, r3
 800206c:	213c      	movs	r1, #60	; 0x3c
 800206e:	2032      	movs	r0, #50	; 0x32
 8002070:	f000 f95c 	bl	800232c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8002074:	2332      	movs	r3, #50	; 0x32
 8002076:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8002078:	7bfb      	ldrb	r3, [r7, #15]
 800207a:	461a      	mov	r2, r3
 800207c:	213d      	movs	r1, #61	; 0x3d
 800207e:	2032      	movs	r0, #50	; 0x32
 8002080:	f000 f954 	bl	800232c <COMPASSACCELERO_IO_Write>
}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8002090:	f000 f91c 	bl	80022cc <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8002094:	2080      	movs	r0, #128	; 0x80
 8002096:	f7ff ffa5 	bl	8001fe4 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 800209a:	2004      	movs	r0, #4
 800209c:	f7ff ff83 	bl	8001fa6 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 80020a0:	2010      	movs	r0, #16
 80020a2:	f7ff ffba 	bl	800201a <LSM303DLHC_AccClickITEnable>
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80020b0:	4814      	ldr	r0, [pc, #80]	; (8002104 <I2Cx_Init+0x58>)
 80020b2:	f003 f9e5 	bl	8005480 <HAL_I2C_GetState>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d121      	bne.n	8002100 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <I2Cx_Init+0x58>)
 80020be:	4a12      	ldr	r2, [pc, #72]	; (8002108 <I2Cx_Init+0x5c>)
 80020c0:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <I2Cx_Init+0x58>)
 80020c4:	2243      	movs	r2, #67	; 0x43
 80020c6:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80020c8:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <I2Cx_Init+0x58>)
 80020ca:	4a10      	ldr	r2, [pc, #64]	; (800210c <I2Cx_Init+0x60>)
 80020cc:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020ce:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <I2Cx_Init+0x58>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <I2Cx_Init+0x58>)
 80020d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020da:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <I2Cx_Init+0x58>)
 80020de:	2200      	movs	r2, #0
 80020e0:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <I2Cx_Init+0x58>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <I2Cx_Init+0x58>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <I2Cx_Init+0x58>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80020f4:	4803      	ldr	r0, [pc, #12]	; (8002104 <I2Cx_Init+0x58>)
 80020f6:	f000 f86b 	bl	80021d0 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80020fa:	4802      	ldr	r0, [pc, #8]	; (8002104 <I2Cx_Init+0x58>)
 80020fc:	f002 fd2c 	bl	8004b58 <HAL_I2C_Init>
  }
}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}
 8002104:	200012c4 	.word	0x200012c4
 8002108:	40005400 	.word	0x40005400
 800210c:	000186a0 	.word	0x000186a0

08002110 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af04      	add	r7, sp, #16
 8002116:	4603      	mov	r3, r0
 8002118:	80fb      	strh	r3, [r7, #6]
 800211a:	460b      	mov	r3, r1
 800211c:	717b      	strb	r3, [r7, #5]
 800211e:	4613      	mov	r3, r2
 8002120:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8002126:	797b      	ldrb	r3, [r7, #5]
 8002128:	b29a      	uxth	r2, r3
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <I2Cx_WriteData+0x48>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	88f9      	ldrh	r1, [r7, #6]
 8002130:	9302      	str	r3, [sp, #8]
 8002132:	2301      	movs	r3, #1
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	1d3b      	adds	r3, r7, #4
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	2301      	movs	r3, #1
 800213c:	4807      	ldr	r0, [pc, #28]	; (800215c <I2Cx_WriteData+0x4c>)
 800213e:	f002 fe7f 	bl	8004e40 <HAL_I2C_Mem_Write>
 8002142:	4603      	mov	r3, r0
 8002144:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 800214c:	f000 f834 	bl	80021b8 <I2Cx_Error>
  }
}
 8002150:	bf00      	nop
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	2000006c 	.word	0x2000006c
 800215c:	200012c4 	.word	0x200012c4

08002160 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af04      	add	r7, sp, #16
 8002166:	4603      	mov	r3, r0
 8002168:	460a      	mov	r2, r1
 800216a:	80fb      	strh	r3, [r7, #6]
 800216c:	4613      	mov	r3, r2
 800216e:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002178:	797b      	ldrb	r3, [r7, #5]
 800217a:	b29a      	uxth	r2, r3
 800217c:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <I2Cx_ReadData+0x50>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	88f9      	ldrh	r1, [r7, #6]
 8002182:	9302      	str	r3, [sp, #8]
 8002184:	2301      	movs	r3, #1
 8002186:	9301      	str	r3, [sp, #4]
 8002188:	f107 030e 	add.w	r3, r7, #14
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2301      	movs	r3, #1
 8002190:	4808      	ldr	r0, [pc, #32]	; (80021b4 <I2Cx_ReadData+0x54>)
 8002192:	f002 ff4f 	bl	8005034 <HAL_I2C_Mem_Read>
 8002196:	4603      	mov	r3, r0
 8002198:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80021a0:	f000 f80a 	bl	80021b8 <I2Cx_Error>
  }
  return value;
 80021a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	2000006c 	.word	0x2000006c
 80021b4:	200012c4 	.word	0x200012c4

080021b8 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80021bc:	4803      	ldr	r0, [pc, #12]	; (80021cc <I2Cx_Error+0x14>)
 80021be:	f002 fe0f 	bl	8004de0 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 80021c2:	f7ff ff73 	bl	80020ac <I2Cx_Init>
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200012c4 	.word	0x200012c4

080021d0 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	; 0x28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 80021d8:	2300      	movs	r3, #0
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	4b25      	ldr	r3, [pc, #148]	; (8002274 <I2Cx_MspInit+0xa4>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	4a24      	ldr	r2, [pc, #144]	; (8002274 <I2Cx_MspInit+0xa4>)
 80021e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021e6:	6413      	str	r3, [r2, #64]	; 0x40
 80021e8:	4b22      	ldr	r3, [pc, #136]	; (8002274 <I2Cx_MspInit+0xa4>)
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <I2Cx_MspInit+0xa4>)
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	4a1d      	ldr	r2, [pc, #116]	; (8002274 <I2Cx_MspInit+0xa4>)
 80021fe:	f043 0302 	orr.w	r3, r3, #2
 8002202:	6313      	str	r3, [r2, #48]	; 0x30
 8002204:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <I2Cx_MspInit+0xa4>)
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 8002210:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002214:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8002216:	2312      	movs	r3, #18
 8002218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800221e:	2302      	movs	r3, #2
 8002220:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8002222:	2304      	movs	r3, #4
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8002226:	f107 0314 	add.w	r3, r7, #20
 800222a:	4619      	mov	r1, r3
 800222c:	4812      	ldr	r0, [pc, #72]	; (8002278 <I2Cx_MspInit+0xa8>)
 800222e:	f000 fe23 	bl	8002e78 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <I2Cx_MspInit+0xa4>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4a0f      	ldr	r2, [pc, #60]	; (8002274 <I2Cx_MspInit+0xa4>)
 8002238:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800223c:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <I2Cx_MspInit+0xa4>)
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4a0c      	ldr	r2, [pc, #48]	; (8002274 <I2Cx_MspInit+0xa4>)
 8002244:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002248:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	210f      	movs	r1, #15
 800224e:	201f      	movs	r0, #31
 8002250:	f000 faf1 	bl	8002836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002254:	201f      	movs	r0, #31
 8002256:	f000 fb0a 	bl	800286e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800225a:	2200      	movs	r2, #0
 800225c:	210f      	movs	r1, #15
 800225e:	2020      	movs	r0, #32
 8002260:	f000 fae9 	bl	8002836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8002264:	2020      	movs	r0, #32
 8002266:	f000 fb02 	bl	800286e <HAL_NVIC_EnableIRQ>
}
 800226a:	bf00      	nop
 800226c:	3728      	adds	r7, #40	; 0x28
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40023800 	.word	0x40023800
 8002278:	40020400 	.word	0x40020400

0800227c <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	603b      	str	r3, [r7, #0]
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <COMPASSACCELERO_IO_Init+0x48>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a0e      	ldr	r2, [pc, #56]	; (80022c4 <COMPASSACCELERO_IO_Init+0x48>)
 800228c:	f043 0310 	orr.w	r3, r3, #16
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <COMPASSACCELERO_IO_Init+0x48>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 800229e:	2304      	movs	r3, #4
 80022a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80022aa:	2302      	movs	r3, #2
 80022ac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 80022ae:	1d3b      	adds	r3, r7, #4
 80022b0:	4619      	mov	r1, r3
 80022b2:	4805      	ldr	r0, [pc, #20]	; (80022c8 <COMPASSACCELERO_IO_Init+0x4c>)
 80022b4:	f000 fde0 	bl	8002e78 <HAL_GPIO_Init>
  
  I2Cx_Init();
 80022b8:	f7ff fef8 	bl	80020ac <I2Cx_Init>
}
 80022bc:	bf00      	nop
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40021000 	.word	0x40021000

080022cc <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	603b      	str	r3, [r7, #0]
 80022d6:	4b13      	ldr	r3, [pc, #76]	; (8002324 <COMPASSACCELERO_IO_ITConfig+0x58>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	4a12      	ldr	r2, [pc, #72]	; (8002324 <COMPASSACCELERO_IO_ITConfig+0x58>)
 80022dc:	f043 0310 	orr.w	r3, r3, #16
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <COMPASSACCELERO_IO_ITConfig+0x58>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 80022ee:	2330      	movs	r3, #48	; 0x30
 80022f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80022f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80022f8:	2302      	movs	r3, #2
 80022fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	4619      	mov	r1, r3
 8002304:	4808      	ldr	r0, [pc, #32]	; (8002328 <COMPASSACCELERO_IO_ITConfig+0x5c>)
 8002306:	f000 fdb7 	bl	8002e78 <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 800230a:	2200      	movs	r2, #0
 800230c:	210f      	movs	r1, #15
 800230e:	200a      	movs	r0, #10
 8002310:	f000 fa91 	bl	8002836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8002314:	200a      	movs	r0, #10
 8002316:	f000 faaa 	bl	800286e <HAL_NVIC_EnableIRQ>
}
 800231a:	bf00      	nop
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800
 8002328:	40021000 	.word	0x40021000

0800232c <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	80fb      	strh	r3, [r7, #6]
 8002336:	460b      	mov	r3, r1
 8002338:	717b      	strb	r3, [r7, #5]
 800233a:	4613      	mov	r3, r2
 800233c:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 800233e:	793a      	ldrb	r2, [r7, #4]
 8002340:	7979      	ldrb	r1, [r7, #5]
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fee3 	bl	8002110 <I2Cx_WriteData>
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	4603      	mov	r3, r0
 800235a:	460a      	mov	r2, r1
 800235c:	80fb      	strh	r3, [r7, #6]
 800235e:	4613      	mov	r3, r2
 8002360:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8002362:	797a      	ldrb	r2, [r7, #5]
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	4611      	mov	r1, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fef9 	bl	8002160 <I2Cx_ReadData>
 800236e:	4603      	mov	r3, r0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8002382:	2300      	movs	r3, #0
 8002384:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 800238e:	4b58      	ldr	r3, [pc, #352]	; (80024f0 <BSP_ACCELERO_Init+0x178>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	4798      	blx	r3
 8002394:	4603      	mov	r3, r0
 8002396:	2b33      	cmp	r3, #51	; 0x33
 8002398:	d14f      	bne.n	800243a <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 800239a:	4b56      	ldr	r3, [pc, #344]	; (80024f4 <BSP_ACCELERO_Init+0x17c>)
 800239c:	4a54      	ldr	r2, [pc, #336]	; (80024f0 <BSP_ACCELERO_Init+0x178>)
 800239e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 80023a4:	2340      	movs	r3, #64	; 0x40
 80023a6:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 80023a8:	2307      	movs	r3, #7
 80023aa:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 80023ac:	2300      	movs	r3, #0
 80023ae:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 80023b0:	2300      	movs	r3, #0
 80023b2:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 80023b4:	2300      	movs	r3, #0
 80023b6:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 80023b8:	2308      	movs	r3, #8
 80023ba:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80023bc:	7b3a      	ldrb	r2, [r7, #12]
 80023be:	7b7b      	ldrb	r3, [r7, #13]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 80023c4:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80023c6:	4313      	orrs	r3, r2
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	8abb      	ldrh	r3, [r7, #20]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80023d2:	7c3a      	ldrb	r2, [r7, #16]
 80023d4:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 80023d6:	4313      	orrs	r3, r2
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	7cbb      	ldrb	r3, [r7, #18]
 80023dc:	4313      	orrs	r3, r2
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80023e8:	b21a      	sxth	r2, r3
 80023ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	b21b      	sxth	r3, r3
 80023f2:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80023f4:	4b3f      	ldr	r3, [pc, #252]	; (80024f4 <BSP_ACCELERO_Init+0x17c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	8aba      	ldrh	r2, [r7, #20]
 80023fc:	4610      	mov	r0, r2
 80023fe:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8002404:	2310      	movs	r3, #16
 8002406:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 8002408:	2300      	movs	r3, #0
 800240a:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002410:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8002412:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002414:	4313      	orrs	r3, r2
 8002416:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8002418:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800241a:	4313      	orrs	r3, r2
 800241c:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 800241e:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002420:	4313      	orrs	r3, r2
 8002422:	b2db      	uxtb	r3, r3
 8002424:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8002426:	4b33      	ldr	r3, [pc, #204]	; (80024f4 <BSP_ACCELERO_Init+0x17c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	8aba      	ldrh	r2, [r7, #20]
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	4610      	mov	r0, r2
 8002432:	4798      	blx	r3

    ret = ACCELERO_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	75fb      	strb	r3, [r7, #23]
 8002438:	e054      	b.n	80024e4 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 800243a:	4b2f      	ldr	r3, [pc, #188]	; (80024f8 <BSP_ACCELERO_Init+0x180>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	4798      	blx	r3
 8002440:	4603      	mov	r3, r0
 8002442:	2b33      	cmp	r3, #51	; 0x33
 8002444:	d14e      	bne.n	80024e4 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8002446:	4b2b      	ldr	r3, [pc, #172]	; (80024f4 <BSP_ACCELERO_Init+0x17c>)
 8002448:	4a2b      	ldr	r2, [pc, #172]	; (80024f8 <BSP_ACCELERO_Init+0x180>)
 800244a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 800244c:	2300      	movs	r3, #0
 800244e:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 8002450:	2340      	movs	r3, #64	; 0x40
 8002452:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8002454:	2307      	movs	r3, #7
 8002456:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8002458:	2300      	movs	r3, #0
 800245a:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 800245c:	2300      	movs	r3, #0
 800245e:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8002460:	2300      	movs	r3, #0
 8002462:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8002464:	2308      	movs	r3, #8
 8002466:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002468:	7b3a      	ldrb	r2, [r7, #12]
 800246a:	7b7b      	ldrb	r3, [r7, #13]
 800246c:	4313      	orrs	r3, r2
 800246e:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8002470:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002472:	4313      	orrs	r3, r2
 8002474:	b2db      	uxtb	r3, r3
 8002476:	b29a      	uxth	r2, r3
 8002478:	8abb      	ldrh	r3, [r7, #20]
 800247a:	4313      	orrs	r3, r2
 800247c:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 800247e:	7c3a      	ldrb	r2, [r7, #16]
 8002480:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8002482:	4313      	orrs	r3, r2
 8002484:	b2da      	uxtb	r2, r3
 8002486:	7cbb      	ldrb	r3, [r7, #18]
 8002488:	4313      	orrs	r3, r2
 800248a:	b2da      	uxtb	r2, r3
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	4313      	orrs	r3, r2
 8002490:	b2db      	uxtb	r3, r3
 8002492:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002494:	b21a      	sxth	r2, r3
 8002496:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800249a:	4313      	orrs	r3, r2
 800249c:	b21b      	sxth	r3, r3
 800249e:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80024a0:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <BSP_ACCELERO_Init+0x17c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	8aba      	ldrh	r2, [r7, #20]
 80024a8:	4610      	mov	r0, r2
 80024aa:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 80024ac:	2380      	movs	r3, #128	; 0x80
 80024ae:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 80024b0:	2310      	movs	r3, #16
 80024b2:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80024bc:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 80024be:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80024c0:	4313      	orrs	r3, r2
 80024c2:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 80024c4:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80024c6:	4313      	orrs	r3, r2
 80024c8:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 80024ca:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80024cc:	4313      	orrs	r3, r2
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <BSP_ACCELERO_Init+0x17c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d8:	8aba      	ldrh	r2, [r7, #20]
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	4610      	mov	r0, r2
 80024de:	4798      	blx	r3

    ret = ACCELERO_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80024e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000038 	.word	0x20000038
 80024f4:	20001318 	.word	0x20001318
 80024f8:	20000004 	.word	0x20000004

080024fc <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 8002508:	4b10      	ldr	r3, [pc, #64]	; (800254c <BSP_ACCELERO_GetXYZ+0x50>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	2b00      	cmp	r3, #0
 8002510:	d018      	beq.n	8002544 <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8002512:	4b0e      	ldr	r3, [pc, #56]	; (800254c <BSP_ACCELERO_GetXYZ+0x50>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <BSP_ACCELERO_GetXYZ+0x50>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0b      	ldr	r2, [pc, #44]	; (8002550 <BSP_ACCELERO_GetXYZ+0x54>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d10e      	bne.n	8002544 <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 8002536:	89fb      	ldrh	r3, [r7, #14]
 8002538:	425b      	negs	r3, r3
 800253a:	b29a      	uxth	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3302      	adds	r3, #2
 8002540:	b212      	sxth	r2, r2
 8002542:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8002544:	bf00      	nop
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20001318 	.word	0x20001318
 8002550:	20000038 	.word	0x20000038

08002554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002558:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <HAL_Init+0x40>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a0d      	ldr	r2, [pc, #52]	; (8002594 <HAL_Init+0x40>)
 800255e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002562:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_Init+0x40>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <HAL_Init+0x40>)
 800256a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800256e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002570:	4b08      	ldr	r3, [pc, #32]	; (8002594 <HAL_Init+0x40>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a07      	ldr	r2, [pc, #28]	; (8002594 <HAL_Init+0x40>)
 8002576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800257a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800257c:	2003      	movs	r0, #3
 800257e:	f000 f94f 	bl	8002820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002582:	2000      	movs	r0, #0
 8002584:	f000 f808 	bl	8002598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002588:	f7fe ff44 	bl	8001414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40023c00 	.word	0x40023c00

08002598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025a0:	4b12      	ldr	r3, [pc, #72]	; (80025ec <HAL_InitTick+0x54>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_InitTick+0x58>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4619      	mov	r1, r3
 80025aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80025b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f967 	bl	800288a <HAL_SYSTICK_Config>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e00e      	b.n	80025e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b0f      	cmp	r3, #15
 80025ca:	d80a      	bhi.n	80025e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025cc:	2200      	movs	r2, #0
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	f04f 30ff 	mov.w	r0, #4294967295
 80025d4:	f000 f92f 	bl	8002836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025d8:	4a06      	ldr	r2, [pc, #24]	; (80025f4 <HAL_InitTick+0x5c>)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	e000      	b.n	80025e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20000000 	.word	0x20000000
 80025f0:	20000074 	.word	0x20000074
 80025f4:	20000070 	.word	0x20000070

080025f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_IncTick+0x20>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_IncTick+0x24>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4413      	add	r3, r2
 8002608:	4a04      	ldr	r2, [pc, #16]	; (800261c <HAL_IncTick+0x24>)
 800260a:	6013      	str	r3, [r2, #0]
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000074 	.word	0x20000074
 800261c:	2000131c 	.word	0x2000131c

08002620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return uwTick;
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <HAL_GetTick+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	2000131c 	.word	0x2000131c

08002638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002640:	f7ff ffee 	bl	8002620 <HAL_GetTick>
 8002644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002650:	d005      	beq.n	800265e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002652:	4b0a      	ldr	r3, [pc, #40]	; (800267c <HAL_Delay+0x44>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4413      	add	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800265e:	bf00      	nop
 8002660:	f7ff ffde 	bl	8002620 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	429a      	cmp	r2, r3
 800266e:	d8f7      	bhi.n	8002660 <HAL_Delay+0x28>
  {
  }
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000074 	.word	0x20000074

08002680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800269c:	4013      	ands	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026b2:	4a04      	ldr	r2, [pc, #16]	; (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	60d3      	str	r3, [r2, #12]
}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	f003 0307 	and.w	r3, r3, #7
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	db0b      	blt.n	800270e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	f003 021f 	and.w	r2, r3, #31
 80026fc:	4907      	ldr	r1, [pc, #28]	; (800271c <__NVIC_EnableIRQ+0x38>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	2001      	movs	r0, #1
 8002706:	fa00 f202 	lsl.w	r2, r0, r2
 800270a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000e100 	.word	0xe000e100

08002720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	6039      	str	r1, [r7, #0]
 800272a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	2b00      	cmp	r3, #0
 8002732:	db0a      	blt.n	800274a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	b2da      	uxtb	r2, r3
 8002738:	490c      	ldr	r1, [pc, #48]	; (800276c <__NVIC_SetPriority+0x4c>)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	0112      	lsls	r2, r2, #4
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	440b      	add	r3, r1
 8002744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002748:	e00a      	b.n	8002760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4908      	ldr	r1, [pc, #32]	; (8002770 <__NVIC_SetPriority+0x50>)
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	3b04      	subs	r3, #4
 8002758:	0112      	lsls	r2, r2, #4
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	440b      	add	r3, r1
 800275e:	761a      	strb	r2, [r3, #24]
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000e100 	.word	0xe000e100
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002774:	b480      	push	{r7}
 8002776:	b089      	sub	sp, #36	; 0x24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f1c3 0307 	rsb	r3, r3, #7
 800278e:	2b04      	cmp	r3, #4
 8002790:	bf28      	it	cs
 8002792:	2304      	movcs	r3, #4
 8002794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3304      	adds	r3, #4
 800279a:	2b06      	cmp	r3, #6
 800279c:	d902      	bls.n	80027a4 <NVIC_EncodePriority+0x30>
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3b03      	subs	r3, #3
 80027a2:	e000      	b.n	80027a6 <NVIC_EncodePriority+0x32>
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43da      	mvns	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	401a      	ands	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027bc:	f04f 31ff 	mov.w	r1, #4294967295
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	43d9      	mvns	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	4313      	orrs	r3, r2
         );
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3724      	adds	r7, #36	; 0x24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027ec:	d301      	bcc.n	80027f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ee:	2301      	movs	r3, #1
 80027f0:	e00f      	b.n	8002812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027f2:	4a0a      	ldr	r2, [pc, #40]	; (800281c <SysTick_Config+0x40>)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027fa:	210f      	movs	r1, #15
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002800:	f7ff ff8e 	bl	8002720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <SysTick_Config+0x40>)
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800280a:	4b04      	ldr	r3, [pc, #16]	; (800281c <SysTick_Config+0x40>)
 800280c:	2207      	movs	r2, #7
 800280e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	e000e010 	.word	0xe000e010

08002820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff ff29 	bl	8002680 <__NVIC_SetPriorityGrouping>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002836:	b580      	push	{r7, lr}
 8002838:	b086      	sub	sp, #24
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002848:	f7ff ff3e 	bl	80026c8 <__NVIC_GetPriorityGrouping>
 800284c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	6978      	ldr	r0, [r7, #20]
 8002854:	f7ff ff8e 	bl	8002774 <NVIC_EncodePriority>
 8002858:	4602      	mov	r2, r0
 800285a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff5d 	bl	8002720 <__NVIC_SetPriority>
}
 8002866:	bf00      	nop
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	4603      	mov	r3, r0
 8002876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff31 	bl	80026e4 <__NVIC_EnableIRQ>
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff ffa2 	bl	80027dc <SysTick_Config>
 8002898:	4603      	mov	r3, r0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028b0:	f7ff feb6 	bl	8002620 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e099      	b.n	80029f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028e0:	e00f      	b.n	8002902 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028e2:	f7ff fe9d 	bl	8002620 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b05      	cmp	r3, #5
 80028ee:	d908      	bls.n	8002902 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2220      	movs	r2, #32
 80028f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2203      	movs	r2, #3
 80028fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e078      	b.n	80029f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1e8      	bne.n	80028e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	4b38      	ldr	r3, [pc, #224]	; (80029fc <HAL_DMA_Init+0x158>)
 800291c:	4013      	ands	r3, r2
 800291e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800292e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800293a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002946:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4313      	orrs	r3, r2
 8002952:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	2b04      	cmp	r3, #4
 800295a:	d107      	bne.n	800296c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	4313      	orrs	r3, r2
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4313      	orrs	r3, r2
 800296a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f023 0307 	bic.w	r3, r3, #7
 8002982:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	2b04      	cmp	r3, #4
 8002994:	d117      	bne.n	80029c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	4313      	orrs	r3, r2
 800299e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00e      	beq.n	80029c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f9e9 	bl	8002d80 <DMA_CheckFifoParam>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2240      	movs	r2, #64	; 0x40
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029c2:	2301      	movs	r3, #1
 80029c4:	e016      	b.n	80029f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f9a0 	bl	8002d14 <DMA_CalcBaseAndBitshift>
 80029d4:	4603      	mov	r3, r0
 80029d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029dc:	223f      	movs	r2, #63	; 0x3f
 80029de:	409a      	lsls	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	f010803f 	.word	0xf010803f

08002a00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a0c:	4b8e      	ldr	r3, [pc, #568]	; (8002c48 <HAL_DMA_IRQHandler+0x248>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a8e      	ldr	r2, [pc, #568]	; (8002c4c <HAL_DMA_IRQHandler+0x24c>)
 8002a12:	fba2 2303 	umull	r2, r3, r2, r3
 8002a16:	0a9b      	lsrs	r3, r3, #10
 8002a18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d01a      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d013      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0204 	bic.w	r2, r2, #4
 8002a52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a58:	2208      	movs	r2, #8
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a64:	f043 0201 	orr.w	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a70:	2201      	movs	r2, #1
 8002a72:	409a      	lsls	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d012      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8e:	2201      	movs	r2, #1
 8002a90:	409a      	lsls	r2, r3
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9a:	f043 0202 	orr.w	r2, r3, #2
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa6:	2204      	movs	r2, #4
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d012      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00b      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad0:	f043 0204 	orr.w	r2, r3, #4
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002adc:	2210      	movs	r2, #16
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d043      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d03c      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afa:	2210      	movs	r2, #16
 8002afc:	409a      	lsls	r2, r3
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d018      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d108      	bne.n	8002b30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d024      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	4798      	blx	r3
 8002b2e:	e01f      	b.n	8002b70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d01b      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	4798      	blx	r3
 8002b40:	e016      	b.n	8002b70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d107      	bne.n	8002b60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0208 	bic.w	r2, r2, #8
 8002b5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b74:	2220      	movs	r2, #32
 8002b76:	409a      	lsls	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 808f 	beq.w	8002ca0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 8087 	beq.w	8002ca0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b96:	2220      	movs	r2, #32
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b05      	cmp	r3, #5
 8002ba8:	d136      	bne.n	8002c18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0216 	bic.w	r2, r2, #22
 8002bb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d103      	bne.n	8002bda <HAL_DMA_IRQHandler+0x1da>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d007      	beq.n	8002bea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0208 	bic.w	r2, r2, #8
 8002be8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bee:	223f      	movs	r2, #63	; 0x3f
 8002bf0:	409a      	lsls	r2, r3
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d07e      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	4798      	blx	r3
        }
        return;
 8002c16:	e079      	b.n	8002d0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d01d      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10d      	bne.n	8002c50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d031      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	4798      	blx	r3
 8002c44:	e02c      	b.n	8002ca0 <HAL_DMA_IRQHandler+0x2a0>
 8002c46:	bf00      	nop
 8002c48:	20000000 	.word	0x20000000
 8002c4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d023      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	4798      	blx	r3
 8002c60:	e01e      	b.n	8002ca0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10f      	bne.n	8002c90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0210 	bic.w	r2, r2, #16
 8002c7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d032      	beq.n	8002d0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d022      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2205      	movs	r2, #5
 8002cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0201 	bic.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d307      	bcc.n	8002ce8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f2      	bne.n	8002ccc <HAL_DMA_IRQHandler+0x2cc>
 8002ce6:	e000      	b.n	8002cea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ce8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d005      	beq.n	8002d0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	4798      	blx	r3
 8002d0a:	e000      	b.n	8002d0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d0c:	bf00      	nop
    }
  }
}
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	3b10      	subs	r3, #16
 8002d24:	4a14      	ldr	r2, [pc, #80]	; (8002d78 <DMA_CalcBaseAndBitshift+0x64>)
 8002d26:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2a:	091b      	lsrs	r3, r3, #4
 8002d2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d2e:	4a13      	ldr	r2, [pc, #76]	; (8002d7c <DMA_CalcBaseAndBitshift+0x68>)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4413      	add	r3, r2
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d909      	bls.n	8002d56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d4a:	f023 0303 	bic.w	r3, r3, #3
 8002d4e:	1d1a      	adds	r2, r3, #4
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	659a      	str	r2, [r3, #88]	; 0x58
 8002d54:	e007      	b.n	8002d66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d5e:	f023 0303 	bic.w	r3, r3, #3
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	aaaaaaab 	.word	0xaaaaaaab
 8002d7c:	0800acf4 	.word	0x0800acf4

08002d80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d11f      	bne.n	8002dda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d856      	bhi.n	8002e4e <DMA_CheckFifoParam+0xce>
 8002da0:	a201      	add	r2, pc, #4	; (adr r2, 8002da8 <DMA_CheckFifoParam+0x28>)
 8002da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da6:	bf00      	nop
 8002da8:	08002db9 	.word	0x08002db9
 8002dac:	08002dcb 	.word	0x08002dcb
 8002db0:	08002db9 	.word	0x08002db9
 8002db4:	08002e4f 	.word	0x08002e4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d046      	beq.n	8002e52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc8:	e043      	b.n	8002e52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dd2:	d140      	bne.n	8002e56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dd8:	e03d      	b.n	8002e56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de2:	d121      	bne.n	8002e28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d837      	bhi.n	8002e5a <DMA_CheckFifoParam+0xda>
 8002dea:	a201      	add	r2, pc, #4	; (adr r2, 8002df0 <DMA_CheckFifoParam+0x70>)
 8002dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df0:	08002e01 	.word	0x08002e01
 8002df4:	08002e07 	.word	0x08002e07
 8002df8:	08002e01 	.word	0x08002e01
 8002dfc:	08002e19 	.word	0x08002e19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
      break;
 8002e04:	e030      	b.n	8002e68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d025      	beq.n	8002e5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e16:	e022      	b.n	8002e5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e20:	d11f      	bne.n	8002e62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e26:	e01c      	b.n	8002e62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d903      	bls.n	8002e36 <DMA_CheckFifoParam+0xb6>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d003      	beq.n	8002e3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e34:	e018      	b.n	8002e68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
      break;
 8002e3a:	e015      	b.n	8002e68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00e      	beq.n	8002e66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e4c:	e00b      	b.n	8002e66 <DMA_CheckFifoParam+0xe6>
      break;
 8002e4e:	bf00      	nop
 8002e50:	e00a      	b.n	8002e68 <DMA_CheckFifoParam+0xe8>
      break;
 8002e52:	bf00      	nop
 8002e54:	e008      	b.n	8002e68 <DMA_CheckFifoParam+0xe8>
      break;
 8002e56:	bf00      	nop
 8002e58:	e006      	b.n	8002e68 <DMA_CheckFifoParam+0xe8>
      break;
 8002e5a:	bf00      	nop
 8002e5c:	e004      	b.n	8002e68 <DMA_CheckFifoParam+0xe8>
      break;
 8002e5e:	bf00      	nop
 8002e60:	e002      	b.n	8002e68 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e62:	bf00      	nop
 8002e64:	e000      	b.n	8002e68 <DMA_CheckFifoParam+0xe8>
      break;
 8002e66:	bf00      	nop
    }
  } 
  
  return status; 
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop

08002e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b089      	sub	sp, #36	; 0x24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	e159      	b.n	8003148 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e94:	2201      	movs	r2, #1
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	f040 8148 	bne.w	8003142 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d005      	beq.n	8002eca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d130      	bne.n	8002f2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f00:	2201      	movs	r2, #1
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f003 0201 	and.w	r2, r3, #1
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d017      	beq.n	8002f68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	2203      	movs	r2, #3
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d123      	bne.n	8002fbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	08da      	lsrs	r2, r3, #3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3208      	adds	r2, #8
 8002f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	220f      	movs	r2, #15
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	08da      	lsrs	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3208      	adds	r2, #8
 8002fb6:	69b9      	ldr	r1, [r7, #24]
 8002fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0203 	and.w	r2, r3, #3
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80a2 	beq.w	8003142 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	4b57      	ldr	r3, [pc, #348]	; (8003160 <HAL_GPIO_Init+0x2e8>)
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	4a56      	ldr	r2, [pc, #344]	; (8003160 <HAL_GPIO_Init+0x2e8>)
 8003008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800300c:	6453      	str	r3, [r2, #68]	; 0x44
 800300e:	4b54      	ldr	r3, [pc, #336]	; (8003160 <HAL_GPIO_Init+0x2e8>)
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800301a:	4a52      	ldr	r2, [pc, #328]	; (8003164 <HAL_GPIO_Init+0x2ec>)
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	089b      	lsrs	r3, r3, #2
 8003020:	3302      	adds	r3, #2
 8003022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	220f      	movs	r2, #15
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43db      	mvns	r3, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4013      	ands	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a49      	ldr	r2, [pc, #292]	; (8003168 <HAL_GPIO_Init+0x2f0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d019      	beq.n	800307a <HAL_GPIO_Init+0x202>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a48      	ldr	r2, [pc, #288]	; (800316c <HAL_GPIO_Init+0x2f4>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d013      	beq.n	8003076 <HAL_GPIO_Init+0x1fe>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a47      	ldr	r2, [pc, #284]	; (8003170 <HAL_GPIO_Init+0x2f8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d00d      	beq.n	8003072 <HAL_GPIO_Init+0x1fa>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a46      	ldr	r2, [pc, #280]	; (8003174 <HAL_GPIO_Init+0x2fc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d007      	beq.n	800306e <HAL_GPIO_Init+0x1f6>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a45      	ldr	r2, [pc, #276]	; (8003178 <HAL_GPIO_Init+0x300>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d101      	bne.n	800306a <HAL_GPIO_Init+0x1f2>
 8003066:	2304      	movs	r3, #4
 8003068:	e008      	b.n	800307c <HAL_GPIO_Init+0x204>
 800306a:	2307      	movs	r3, #7
 800306c:	e006      	b.n	800307c <HAL_GPIO_Init+0x204>
 800306e:	2303      	movs	r3, #3
 8003070:	e004      	b.n	800307c <HAL_GPIO_Init+0x204>
 8003072:	2302      	movs	r3, #2
 8003074:	e002      	b.n	800307c <HAL_GPIO_Init+0x204>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <HAL_GPIO_Init+0x204>
 800307a:	2300      	movs	r3, #0
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	f002 0203 	and.w	r2, r2, #3
 8003082:	0092      	lsls	r2, r2, #2
 8003084:	4093      	lsls	r3, r2
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800308c:	4935      	ldr	r1, [pc, #212]	; (8003164 <HAL_GPIO_Init+0x2ec>)
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	089b      	lsrs	r3, r3, #2
 8003092:	3302      	adds	r3, #2
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800309a:	4b38      	ldr	r3, [pc, #224]	; (800317c <HAL_GPIO_Init+0x304>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	43db      	mvns	r3, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4013      	ands	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030be:	4a2f      	ldr	r2, [pc, #188]	; (800317c <HAL_GPIO_Init+0x304>)
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030c4:	4b2d      	ldr	r3, [pc, #180]	; (800317c <HAL_GPIO_Init+0x304>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030e8:	4a24      	ldr	r2, [pc, #144]	; (800317c <HAL_GPIO_Init+0x304>)
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030ee:	4b23      	ldr	r3, [pc, #140]	; (800317c <HAL_GPIO_Init+0x304>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	43db      	mvns	r3, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4013      	ands	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	4313      	orrs	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003112:	4a1a      	ldr	r2, [pc, #104]	; (800317c <HAL_GPIO_Init+0x304>)
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003118:	4b18      	ldr	r3, [pc, #96]	; (800317c <HAL_GPIO_Init+0x304>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800313c:	4a0f      	ldr	r2, [pc, #60]	; (800317c <HAL_GPIO_Init+0x304>)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3301      	adds	r3, #1
 8003146:	61fb      	str	r3, [r7, #28]
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	2b0f      	cmp	r3, #15
 800314c:	f67f aea2 	bls.w	8002e94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003150:	bf00      	nop
 8003152:	bf00      	nop
 8003154:	3724      	adds	r7, #36	; 0x24
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800
 8003164:	40013800 	.word	0x40013800
 8003168:	40020000 	.word	0x40020000
 800316c:	40020400 	.word	0x40020400
 8003170:	40020800 	.word	0x40020800
 8003174:	40020c00 	.word	0x40020c00
 8003178:	40021000 	.word	0x40021000
 800317c:	40013c00 	.word	0x40013c00

08003180 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800318a:	2300      	movs	r3, #0
 800318c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003192:	2300      	movs	r3, #0
 8003194:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	e0bb      	b.n	8003314 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800319c:	2201      	movs	r2, #1
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4013      	ands	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	f040 80ab 	bne.w	800330e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80031b8:	4a5c      	ldr	r2, [pc, #368]	; (800332c <HAL_GPIO_DeInit+0x1ac>)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	089b      	lsrs	r3, r3, #2
 80031be:	3302      	adds	r3, #2
 80031c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	220f      	movs	r2, #15
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	4013      	ands	r3, r2
 80031d8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a54      	ldr	r2, [pc, #336]	; (8003330 <HAL_GPIO_DeInit+0x1b0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d019      	beq.n	8003216 <HAL_GPIO_DeInit+0x96>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a53      	ldr	r2, [pc, #332]	; (8003334 <HAL_GPIO_DeInit+0x1b4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d013      	beq.n	8003212 <HAL_GPIO_DeInit+0x92>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a52      	ldr	r2, [pc, #328]	; (8003338 <HAL_GPIO_DeInit+0x1b8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00d      	beq.n	800320e <HAL_GPIO_DeInit+0x8e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a51      	ldr	r2, [pc, #324]	; (800333c <HAL_GPIO_DeInit+0x1bc>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d007      	beq.n	800320a <HAL_GPIO_DeInit+0x8a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a50      	ldr	r2, [pc, #320]	; (8003340 <HAL_GPIO_DeInit+0x1c0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d101      	bne.n	8003206 <HAL_GPIO_DeInit+0x86>
 8003202:	2304      	movs	r3, #4
 8003204:	e008      	b.n	8003218 <HAL_GPIO_DeInit+0x98>
 8003206:	2307      	movs	r3, #7
 8003208:	e006      	b.n	8003218 <HAL_GPIO_DeInit+0x98>
 800320a:	2303      	movs	r3, #3
 800320c:	e004      	b.n	8003218 <HAL_GPIO_DeInit+0x98>
 800320e:	2302      	movs	r3, #2
 8003210:	e002      	b.n	8003218 <HAL_GPIO_DeInit+0x98>
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <HAL_GPIO_DeInit+0x98>
 8003216:	2300      	movs	r3, #0
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	f002 0203 	and.w	r2, r2, #3
 800321e:	0092      	lsls	r2, r2, #2
 8003220:	4093      	lsls	r3, r2
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	429a      	cmp	r2, r3
 8003226:	d132      	bne.n	800328e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003228:	4b46      	ldr	r3, [pc, #280]	; (8003344 <HAL_GPIO_DeInit+0x1c4>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	43db      	mvns	r3, r3
 8003230:	4944      	ldr	r1, [pc, #272]	; (8003344 <HAL_GPIO_DeInit+0x1c4>)
 8003232:	4013      	ands	r3, r2
 8003234:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003236:	4b43      	ldr	r3, [pc, #268]	; (8003344 <HAL_GPIO_DeInit+0x1c4>)
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	43db      	mvns	r3, r3
 800323e:	4941      	ldr	r1, [pc, #260]	; (8003344 <HAL_GPIO_DeInit+0x1c4>)
 8003240:	4013      	ands	r3, r2
 8003242:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003244:	4b3f      	ldr	r3, [pc, #252]	; (8003344 <HAL_GPIO_DeInit+0x1c4>)
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	43db      	mvns	r3, r3
 800324c:	493d      	ldr	r1, [pc, #244]	; (8003344 <HAL_GPIO_DeInit+0x1c4>)
 800324e:	4013      	ands	r3, r2
 8003250:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003252:	4b3c      	ldr	r3, [pc, #240]	; (8003344 <HAL_GPIO_DeInit+0x1c4>)
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	43db      	mvns	r3, r3
 800325a:	493a      	ldr	r1, [pc, #232]	; (8003344 <HAL_GPIO_DeInit+0x1c4>)
 800325c:	4013      	ands	r3, r2
 800325e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	220f      	movs	r2, #15
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003270:	4a2e      	ldr	r2, [pc, #184]	; (800332c <HAL_GPIO_DeInit+0x1ac>)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	089b      	lsrs	r3, r3, #2
 8003276:	3302      	adds	r3, #2
 8003278:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	43da      	mvns	r2, r3
 8003280:	482a      	ldr	r0, [pc, #168]	; (800332c <HAL_GPIO_DeInit+0x1ac>)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	089b      	lsrs	r3, r3, #2
 8003286:	400a      	ands	r2, r1
 8003288:	3302      	adds	r3, #2
 800328a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	2103      	movs	r1, #3
 8003298:	fa01 f303 	lsl.w	r3, r1, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	401a      	ands	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	08da      	lsrs	r2, r3, #3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3208      	adds	r2, #8
 80032ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	220f      	movs	r2, #15
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43db      	mvns	r3, r3
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	08d2      	lsrs	r2, r2, #3
 80032c4:	4019      	ands	r1, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3208      	adds	r2, #8
 80032ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	2103      	movs	r1, #3
 80032d8:	fa01 f303 	lsl.w	r3, r1, r3
 80032dc:	43db      	mvns	r3, r3
 80032de:	401a      	ands	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	2101      	movs	r1, #1
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	fa01 f303 	lsl.w	r3, r1, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	401a      	ands	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	2103      	movs	r1, #3
 8003302:	fa01 f303 	lsl.w	r3, r1, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	401a      	ands	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	3301      	adds	r3, #1
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2b0f      	cmp	r3, #15
 8003318:	f67f af40 	bls.w	800319c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800331c:	bf00      	nop
 800331e:	bf00      	nop
 8003320:	371c      	adds	r7, #28
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40013800 	.word	0x40013800
 8003330:	40020000 	.word	0x40020000
 8003334:	40020400 	.word	0x40020400
 8003338:	40020800 	.word	0x40020800
 800333c:	40020c00 	.word	0x40020c00
 8003340:	40021000 	.word	0x40021000
 8003344:	40013c00 	.word	0x40013c00

08003348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	807b      	strh	r3, [r7, #2]
 8003354:	4613      	mov	r3, r2
 8003356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003358:	787b      	ldrb	r3, [r7, #1]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800335e:	887a      	ldrh	r2, [r7, #2]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003364:	e003      	b.n	800336e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003366:	887b      	ldrh	r3, [r7, #2]
 8003368:	041a      	lsls	r2, r3, #16
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	619a      	str	r2, [r3, #24]
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800337a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800337c:	b08f      	sub	sp, #60	; 0x3c
 800337e:	af0a      	add	r7, sp, #40	; 0x28
 8003380:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e054      	b.n	8003436 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f007 f8b0 	bl	800a50c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2203      	movs	r2, #3
 80033b0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d102      	bne.n	80033c6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f003 ff1d 	bl	800720a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	603b      	str	r3, [r7, #0]
 80033d6:	687e      	ldr	r6, [r7, #4]
 80033d8:	466d      	mov	r5, sp
 80033da:	f106 0410 	add.w	r4, r6, #16
 80033de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80033ee:	1d33      	adds	r3, r6, #4
 80033f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033f2:	6838      	ldr	r0, [r7, #0]
 80033f4:	f003 fe97 	bl	8007126 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2101      	movs	r1, #1
 80033fe:	4618      	mov	r0, r3
 8003400:	f003 ff14 	bl	800722c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	603b      	str	r3, [r7, #0]
 800340a:	687e      	ldr	r6, [r7, #4]
 800340c:	466d      	mov	r5, sp
 800340e:	f106 0410 	add.w	r4, r6, #16
 8003412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003414:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003418:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800341a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800341e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003422:	1d33      	adds	r3, r6, #4
 8003424:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003426:	6838      	ldr	r0, [r7, #0]
 8003428:	f004 f89c 	bl	8007564 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800343e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800343e:	b590      	push	{r4, r7, lr}
 8003440:	b089      	sub	sp, #36	; 0x24
 8003442:	af04      	add	r7, sp, #16
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	4608      	mov	r0, r1
 8003448:	4611      	mov	r1, r2
 800344a:	461a      	mov	r2, r3
 800344c:	4603      	mov	r3, r0
 800344e:	70fb      	strb	r3, [r7, #3]
 8003450:	460b      	mov	r3, r1
 8003452:	70bb      	strb	r3, [r7, #2]
 8003454:	4613      	mov	r3, r2
 8003456:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <HAL_HCD_HC_Init+0x28>
 8003462:	2302      	movs	r3, #2
 8003464:	e076      	b.n	8003554 <HAL_HCD_HC_Init+0x116>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800346e:	78fb      	ldrb	r3, [r7, #3]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	212c      	movs	r1, #44	; 0x2c
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	4413      	add	r3, r2
 800347a:	333d      	adds	r3, #61	; 0x3d
 800347c:	2200      	movs	r2, #0
 800347e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	212c      	movs	r1, #44	; 0x2c
 8003486:	fb01 f303 	mul.w	r3, r1, r3
 800348a:	4413      	add	r3, r2
 800348c:	3338      	adds	r3, #56	; 0x38
 800348e:	787a      	ldrb	r2, [r7, #1]
 8003490:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	212c      	movs	r1, #44	; 0x2c
 8003498:	fb01 f303 	mul.w	r3, r1, r3
 800349c:	4413      	add	r3, r2
 800349e:	3340      	adds	r3, #64	; 0x40
 80034a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80034a2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	212c      	movs	r1, #44	; 0x2c
 80034aa:	fb01 f303 	mul.w	r3, r1, r3
 80034ae:	4413      	add	r3, r2
 80034b0:	3339      	adds	r3, #57	; 0x39
 80034b2:	78fa      	ldrb	r2, [r7, #3]
 80034b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80034b6:	78fb      	ldrb	r3, [r7, #3]
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	212c      	movs	r1, #44	; 0x2c
 80034bc:	fb01 f303 	mul.w	r3, r1, r3
 80034c0:	4413      	add	r3, r2
 80034c2:	333f      	adds	r3, #63	; 0x3f
 80034c4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80034c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	78ba      	ldrb	r2, [r7, #2]
 80034ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034d2:	b2d0      	uxtb	r0, r2
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	212c      	movs	r1, #44	; 0x2c
 80034d8:	fb01 f303 	mul.w	r3, r1, r3
 80034dc:	4413      	add	r3, r2
 80034de:	333a      	adds	r3, #58	; 0x3a
 80034e0:	4602      	mov	r2, r0
 80034e2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80034e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	da09      	bge.n	8003500 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	212c      	movs	r1, #44	; 0x2c
 80034f2:	fb01 f303 	mul.w	r3, r1, r3
 80034f6:	4413      	add	r3, r2
 80034f8:	333b      	adds	r3, #59	; 0x3b
 80034fa:	2201      	movs	r2, #1
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e008      	b.n	8003512 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	212c      	movs	r1, #44	; 0x2c
 8003506:	fb01 f303 	mul.w	r3, r1, r3
 800350a:	4413      	add	r3, r2
 800350c:	333b      	adds	r3, #59	; 0x3b
 800350e:	2200      	movs	r2, #0
 8003510:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	212c      	movs	r1, #44	; 0x2c
 8003518:	fb01 f303 	mul.w	r3, r1, r3
 800351c:	4413      	add	r3, r2
 800351e:	333c      	adds	r3, #60	; 0x3c
 8003520:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003524:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	787c      	ldrb	r4, [r7, #1]
 800352c:	78ba      	ldrb	r2, [r7, #2]
 800352e:	78f9      	ldrb	r1, [r7, #3]
 8003530:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003532:	9302      	str	r3, [sp, #8]
 8003534:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003538:	9301      	str	r3, [sp, #4]
 800353a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	4623      	mov	r3, r4
 8003542:	f004 f96b 	bl	800781c <USB_HC_Init>
 8003546:	4603      	mov	r3, r0
 8003548:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003552:	7bfb      	ldrb	r3, [r7, #15]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	bd90      	pop	{r4, r7, pc}

0800355c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_HCD_HC_Halt+0x1e>
 8003576:	2302      	movs	r3, #2
 8003578:	e00f      	b.n	800359a <HAL_HCD_HC_Halt+0x3e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	78fa      	ldrb	r2, [r7, #3]
 8003588:	4611      	mov	r1, r2
 800358a:	4618      	mov	r0, r3
 800358c:	f004 fbbb 	bl	8007d06 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003598:	7bfb      	ldrb	r3, [r7, #15]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	4608      	mov	r0, r1
 80035ae:	4611      	mov	r1, r2
 80035b0:	461a      	mov	r2, r3
 80035b2:	4603      	mov	r3, r0
 80035b4:	70fb      	strb	r3, [r7, #3]
 80035b6:	460b      	mov	r3, r1
 80035b8:	70bb      	strb	r3, [r7, #2]
 80035ba:	4613      	mov	r3, r2
 80035bc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80035be:	78fb      	ldrb	r3, [r7, #3]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	212c      	movs	r1, #44	; 0x2c
 80035c4:	fb01 f303 	mul.w	r3, r1, r3
 80035c8:	4413      	add	r3, r2
 80035ca:	333b      	adds	r3, #59	; 0x3b
 80035cc:	78ba      	ldrb	r2, [r7, #2]
 80035ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	212c      	movs	r1, #44	; 0x2c
 80035d6:	fb01 f303 	mul.w	r3, r1, r3
 80035da:	4413      	add	r3, r2
 80035dc:	333f      	adds	r3, #63	; 0x3f
 80035de:	787a      	ldrb	r2, [r7, #1]
 80035e0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80035e2:	7c3b      	ldrb	r3, [r7, #16]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d112      	bne.n	800360e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	212c      	movs	r1, #44	; 0x2c
 80035ee:	fb01 f303 	mul.w	r3, r1, r3
 80035f2:	4413      	add	r3, r2
 80035f4:	3342      	adds	r3, #66	; 0x42
 80035f6:	2203      	movs	r2, #3
 80035f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80035fa:	78fb      	ldrb	r3, [r7, #3]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	212c      	movs	r1, #44	; 0x2c
 8003600:	fb01 f303 	mul.w	r3, r1, r3
 8003604:	4413      	add	r3, r2
 8003606:	333d      	adds	r3, #61	; 0x3d
 8003608:	7f3a      	ldrb	r2, [r7, #28]
 800360a:	701a      	strb	r2, [r3, #0]
 800360c:	e008      	b.n	8003620 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800360e:	78fb      	ldrb	r3, [r7, #3]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	212c      	movs	r1, #44	; 0x2c
 8003614:	fb01 f303 	mul.w	r3, r1, r3
 8003618:	4413      	add	r3, r2
 800361a:	3342      	adds	r3, #66	; 0x42
 800361c:	2202      	movs	r2, #2
 800361e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003620:	787b      	ldrb	r3, [r7, #1]
 8003622:	2b03      	cmp	r3, #3
 8003624:	f200 80c6 	bhi.w	80037b4 <HAL_HCD_HC_SubmitRequest+0x210>
 8003628:	a201      	add	r2, pc, #4	; (adr r2, 8003630 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800362a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362e:	bf00      	nop
 8003630:	08003641 	.word	0x08003641
 8003634:	080037a1 	.word	0x080037a1
 8003638:	080036a5 	.word	0x080036a5
 800363c:	08003723 	.word	0x08003723
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003640:	7c3b      	ldrb	r3, [r7, #16]
 8003642:	2b01      	cmp	r3, #1
 8003644:	f040 80b8 	bne.w	80037b8 <HAL_HCD_HC_SubmitRequest+0x214>
 8003648:	78bb      	ldrb	r3, [r7, #2]
 800364a:	2b00      	cmp	r3, #0
 800364c:	f040 80b4 	bne.w	80037b8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003650:	8b3b      	ldrh	r3, [r7, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d108      	bne.n	8003668 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003656:	78fb      	ldrb	r3, [r7, #3]
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	212c      	movs	r1, #44	; 0x2c
 800365c:	fb01 f303 	mul.w	r3, r1, r3
 8003660:	4413      	add	r3, r2
 8003662:	3355      	adds	r3, #85	; 0x55
 8003664:	2201      	movs	r2, #1
 8003666:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003668:	78fb      	ldrb	r3, [r7, #3]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	212c      	movs	r1, #44	; 0x2c
 800366e:	fb01 f303 	mul.w	r3, r1, r3
 8003672:	4413      	add	r3, r2
 8003674:	3355      	adds	r3, #85	; 0x55
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d109      	bne.n	8003690 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	212c      	movs	r1, #44	; 0x2c
 8003682:	fb01 f303 	mul.w	r3, r1, r3
 8003686:	4413      	add	r3, r2
 8003688:	3342      	adds	r3, #66	; 0x42
 800368a:	2200      	movs	r2, #0
 800368c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800368e:	e093      	b.n	80037b8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003690:	78fb      	ldrb	r3, [r7, #3]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	212c      	movs	r1, #44	; 0x2c
 8003696:	fb01 f303 	mul.w	r3, r1, r3
 800369a:	4413      	add	r3, r2
 800369c:	3342      	adds	r3, #66	; 0x42
 800369e:	2202      	movs	r2, #2
 80036a0:	701a      	strb	r2, [r3, #0]
      break;
 80036a2:	e089      	b.n	80037b8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80036a4:	78bb      	ldrb	r3, [r7, #2]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d11d      	bne.n	80036e6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80036aa:	78fb      	ldrb	r3, [r7, #3]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	212c      	movs	r1, #44	; 0x2c
 80036b0:	fb01 f303 	mul.w	r3, r1, r3
 80036b4:	4413      	add	r3, r2
 80036b6:	3355      	adds	r3, #85	; 0x55
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d109      	bne.n	80036d2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	212c      	movs	r1, #44	; 0x2c
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	4413      	add	r3, r2
 80036ca:	3342      	adds	r3, #66	; 0x42
 80036cc:	2200      	movs	r2, #0
 80036ce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80036d0:	e073      	b.n	80037ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036d2:	78fb      	ldrb	r3, [r7, #3]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	212c      	movs	r1, #44	; 0x2c
 80036d8:	fb01 f303 	mul.w	r3, r1, r3
 80036dc:	4413      	add	r3, r2
 80036de:	3342      	adds	r3, #66	; 0x42
 80036e0:	2202      	movs	r2, #2
 80036e2:	701a      	strb	r2, [r3, #0]
      break;
 80036e4:	e069      	b.n	80037ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80036e6:	78fb      	ldrb	r3, [r7, #3]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	212c      	movs	r1, #44	; 0x2c
 80036ec:	fb01 f303 	mul.w	r3, r1, r3
 80036f0:	4413      	add	r3, r2
 80036f2:	3354      	adds	r3, #84	; 0x54
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	212c      	movs	r1, #44	; 0x2c
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	4413      	add	r3, r2
 8003706:	3342      	adds	r3, #66	; 0x42
 8003708:	2200      	movs	r2, #0
 800370a:	701a      	strb	r2, [r3, #0]
      break;
 800370c:	e055      	b.n	80037ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800370e:	78fb      	ldrb	r3, [r7, #3]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	212c      	movs	r1, #44	; 0x2c
 8003714:	fb01 f303 	mul.w	r3, r1, r3
 8003718:	4413      	add	r3, r2
 800371a:	3342      	adds	r3, #66	; 0x42
 800371c:	2202      	movs	r2, #2
 800371e:	701a      	strb	r2, [r3, #0]
      break;
 8003720:	e04b      	b.n	80037ba <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003722:	78bb      	ldrb	r3, [r7, #2]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d11d      	bne.n	8003764 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	212c      	movs	r1, #44	; 0x2c
 800372e:	fb01 f303 	mul.w	r3, r1, r3
 8003732:	4413      	add	r3, r2
 8003734:	3355      	adds	r3, #85	; 0x55
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d109      	bne.n	8003750 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800373c:	78fb      	ldrb	r3, [r7, #3]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	212c      	movs	r1, #44	; 0x2c
 8003742:	fb01 f303 	mul.w	r3, r1, r3
 8003746:	4413      	add	r3, r2
 8003748:	3342      	adds	r3, #66	; 0x42
 800374a:	2200      	movs	r2, #0
 800374c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800374e:	e034      	b.n	80037ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	212c      	movs	r1, #44	; 0x2c
 8003756:	fb01 f303 	mul.w	r3, r1, r3
 800375a:	4413      	add	r3, r2
 800375c:	3342      	adds	r3, #66	; 0x42
 800375e:	2202      	movs	r2, #2
 8003760:	701a      	strb	r2, [r3, #0]
      break;
 8003762:	e02a      	b.n	80037ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	212c      	movs	r1, #44	; 0x2c
 800376a:	fb01 f303 	mul.w	r3, r1, r3
 800376e:	4413      	add	r3, r2
 8003770:	3354      	adds	r3, #84	; 0x54
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d109      	bne.n	800378c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003778:	78fb      	ldrb	r3, [r7, #3]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	212c      	movs	r1, #44	; 0x2c
 800377e:	fb01 f303 	mul.w	r3, r1, r3
 8003782:	4413      	add	r3, r2
 8003784:	3342      	adds	r3, #66	; 0x42
 8003786:	2200      	movs	r2, #0
 8003788:	701a      	strb	r2, [r3, #0]
      break;
 800378a:	e016      	b.n	80037ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	212c      	movs	r1, #44	; 0x2c
 8003792:	fb01 f303 	mul.w	r3, r1, r3
 8003796:	4413      	add	r3, r2
 8003798:	3342      	adds	r3, #66	; 0x42
 800379a:	2202      	movs	r2, #2
 800379c:	701a      	strb	r2, [r3, #0]
      break;
 800379e:	e00c      	b.n	80037ba <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037a0:	78fb      	ldrb	r3, [r7, #3]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	212c      	movs	r1, #44	; 0x2c
 80037a6:	fb01 f303 	mul.w	r3, r1, r3
 80037aa:	4413      	add	r3, r2
 80037ac:	3342      	adds	r3, #66	; 0x42
 80037ae:	2200      	movs	r2, #0
 80037b0:	701a      	strb	r2, [r3, #0]
      break;
 80037b2:	e002      	b.n	80037ba <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80037b4:	bf00      	nop
 80037b6:	e000      	b.n	80037ba <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80037b8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	212c      	movs	r1, #44	; 0x2c
 80037c0:	fb01 f303 	mul.w	r3, r1, r3
 80037c4:	4413      	add	r3, r2
 80037c6:	3344      	adds	r3, #68	; 0x44
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	8b3a      	ldrh	r2, [r7, #24]
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	202c      	movs	r0, #44	; 0x2c
 80037d4:	fb00 f303 	mul.w	r3, r0, r3
 80037d8:	440b      	add	r3, r1
 80037da:	334c      	adds	r3, #76	; 0x4c
 80037dc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80037de:	78fb      	ldrb	r3, [r7, #3]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	212c      	movs	r1, #44	; 0x2c
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	4413      	add	r3, r2
 80037ea:	3360      	adds	r3, #96	; 0x60
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	212c      	movs	r1, #44	; 0x2c
 80037f6:	fb01 f303 	mul.w	r3, r1, r3
 80037fa:	4413      	add	r3, r2
 80037fc:	3350      	adds	r3, #80	; 0x50
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003802:	78fb      	ldrb	r3, [r7, #3]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	212c      	movs	r1, #44	; 0x2c
 8003808:	fb01 f303 	mul.w	r3, r1, r3
 800380c:	4413      	add	r3, r2
 800380e:	3339      	adds	r3, #57	; 0x39
 8003810:	78fa      	ldrb	r2, [r7, #3]
 8003812:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	212c      	movs	r1, #44	; 0x2c
 800381a:	fb01 f303 	mul.w	r3, r1, r3
 800381e:	4413      	add	r3, r2
 8003820:	3361      	adds	r3, #97	; 0x61
 8003822:	2200      	movs	r2, #0
 8003824:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	78fb      	ldrb	r3, [r7, #3]
 800382c:	222c      	movs	r2, #44	; 0x2c
 800382e:	fb02 f303 	mul.w	r3, r2, r3
 8003832:	3338      	adds	r3, #56	; 0x38
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	18d1      	adds	r1, r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	b2db      	uxtb	r3, r3
 800383e:	461a      	mov	r2, r3
 8003840:	f004 f90e 	bl	8007a60 <USB_HC_StartXfer>
 8003844:	4603      	mov	r3, r0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop

08003850 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f003 fe39 	bl	80074de <USB_GetMode>
 800386c:	4603      	mov	r3, r0
 800386e:	2b01      	cmp	r3, #1
 8003870:	f040 80f6 	bne.w	8003a60 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f003 fe1d 	bl	80074b8 <USB_ReadInterrupts>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 80ec 	beq.w	8003a5e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f003 fe14 	bl	80074b8 <USB_ReadInterrupts>
 8003890:	4603      	mov	r3, r0
 8003892:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003896:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800389a:	d104      	bne.n	80038a6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80038a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f003 fe04 	bl	80074b8 <USB_ReadInterrupts>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ba:	d104      	bne.n	80038c6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80038c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f003 fdf4 	bl	80074b8 <USB_ReadInterrupts>
 80038d0:	4603      	mov	r3, r0
 80038d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038da:	d104      	bne.n	80038e6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80038e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f003 fde4 	bl	80074b8 <USB_ReadInterrupts>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d103      	bne.n	8003902 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2202      	movs	r2, #2
 8003900:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f003 fdd6 	bl	80074b8 <USB_ReadInterrupts>
 800390c:	4603      	mov	r3, r0
 800390e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003916:	d11c      	bne.n	8003952 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003920:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10f      	bne.n	8003952 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003932:	2110      	movs	r1, #16
 8003934:	6938      	ldr	r0, [r7, #16]
 8003936:	f003 fcc5 	bl	80072c4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800393a:	6938      	ldr	r0, [r7, #16]
 800393c:	f003 fcf6 	bl	800732c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2101      	movs	r1, #1
 8003946:	4618      	mov	r0, r3
 8003948:	f003 fecc 	bl	80076e4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f006 fe5b 	bl	800a608 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f003 fdae 	bl	80074b8 <USB_ReadInterrupts>
 800395c:	4603      	mov	r3, r0
 800395e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003962:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003966:	d102      	bne.n	800396e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f001 f882 	bl	8004a72 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f003 fda0 	bl	80074b8 <USB_ReadInterrupts>
 8003978:	4603      	mov	r3, r0
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b08      	cmp	r3, #8
 8003980:	d106      	bne.n	8003990 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f006 fe24 	bl	800a5d0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2208      	movs	r2, #8
 800398e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f003 fd8f 	bl	80074b8 <USB_ReadInterrupts>
 800399a:	4603      	mov	r3, r0
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	2b10      	cmp	r3, #16
 80039a2:	d101      	bne.n	80039a8 <HAL_HCD_IRQHandler+0x158>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <HAL_HCD_IRQHandler+0x15a>
 80039a8:	2300      	movs	r3, #0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d012      	beq.n	80039d4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699a      	ldr	r2, [r3, #24]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0210 	bic.w	r2, r2, #16
 80039bc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 ff85 	bl	80048ce <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0210 	orr.w	r2, r2, #16
 80039d2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f003 fd6d 	bl	80074b8 <USB_ReadInterrupts>
 80039de:	4603      	mov	r3, r0
 80039e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039e8:	d13a      	bne.n	8003a60 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f004 f978 	bl	8007ce4 <USB_HC_ReadInterrupt>
 80039f4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	e025      	b.n	8003a48 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	fa22 f303 	lsr.w	r3, r2, r3
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d018      	beq.n	8003a42 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a26:	d106      	bne.n	8003a36 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f88f 	bl	8003b52 <HCD_HC_IN_IRQHandler>
 8003a34:	e005      	b.n	8003a42 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 fbdd 	bl	80041fc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	3301      	adds	r3, #1
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d3d4      	bcc.n	80039fc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a5a:	615a      	str	r2, [r3, #20]
 8003a5c:	e000      	b.n	8003a60 <HAL_HCD_IRQHandler+0x210>
      return;
 8003a5e:	bf00      	nop
    }
  }
}
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_HCD_Start+0x16>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e013      	b.n	8003aa4 <HAL_HCD_Start+0x3e>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2101      	movs	r1, #1
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f003 fe64 	bl	8007758 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f003 fba7 	bl	80071e8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_HCD_Stop+0x16>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e00d      	b.n	8003ade <HAL_HCD_Stop+0x32>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f004 fa52 	bl	8007f78 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	460b      	mov	r3, r1
 8003af0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003af2:	78fb      	ldrb	r3, [r7, #3]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	212c      	movs	r1, #44	; 0x2c
 8003af8:	fb01 f303 	mul.w	r3, r1, r3
 8003afc:	4413      	add	r3, r2
 8003afe:	3360      	adds	r3, #96	; 0x60
 8003b00:	781b      	ldrb	r3, [r3, #0]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	460b      	mov	r3, r1
 8003b18:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003b1a:	78fb      	ldrb	r3, [r7, #3]
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	212c      	movs	r1, #44	; 0x2c
 8003b20:	fb01 f303 	mul.w	r3, r1, r3
 8003b24:	4413      	add	r3, r2
 8003b26:	3350      	adds	r3, #80	; 0x50
 8003b28:	681b      	ldr	r3, [r3, #0]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f003 fe58 	bl	80077f8 <USB_GetCurrentFrame>
 8003b48:	4603      	mov	r3, r0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b086      	sub	sp, #24
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d11a      	bne.n	8003bb8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b8e:	461a      	mov	r2, r3
 8003b90:	2304      	movs	r3, #4
 8003b92:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	212c      	movs	r1, #44	; 0x2c
 8003b9a:	fb01 f303 	mul.w	r3, r1, r3
 8003b9e:	4413      	add	r3, r2
 8003ba0:	3361      	adds	r3, #97	; 0x61
 8003ba2:	2206      	movs	r2, #6
 8003ba4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	4611      	mov	r1, r2
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f004 f8a8 	bl	8007d06 <USB_HC_Halt>
 8003bb6:	e0af      	b.n	8003d18 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bce:	d11b      	bne.n	8003c08 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003be2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	212c      	movs	r1, #44	; 0x2c
 8003bea:	fb01 f303 	mul.w	r3, r1, r3
 8003bee:	4413      	add	r3, r2
 8003bf0:	3361      	adds	r3, #97	; 0x61
 8003bf2:	2207      	movs	r2, #7
 8003bf4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	4611      	mov	r1, r2
 8003c00:	4618      	mov	r0, r3
 8003c02:	f004 f880 	bl	8007d06 <USB_HC_Halt>
 8003c06:	e087      	b.n	8003d18 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b20      	cmp	r3, #32
 8003c1c:	d109      	bne.n	8003c32 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	2320      	movs	r3, #32
 8003c2e:	6093      	str	r3, [r2, #8]
 8003c30:	e072      	b.n	8003d18 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d11a      	bne.n	8003c7e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c54:	461a      	mov	r2, r3
 8003c56:	2308      	movs	r3, #8
 8003c58:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	212c      	movs	r1, #44	; 0x2c
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	4413      	add	r3, r2
 8003c66:	3361      	adds	r3, #97	; 0x61
 8003c68:	2205      	movs	r2, #5
 8003c6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	4611      	mov	r1, r2
 8003c76:	4618      	mov	r0, r3
 8003c78:	f004 f845 	bl	8007d06 <USB_HC_Halt>
 8003c7c:	e04c      	b.n	8003d18 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c94:	d11b      	bne.n	8003cce <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ca8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	212c      	movs	r1, #44	; 0x2c
 8003cb0:	fb01 f303 	mul.w	r3, r1, r3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	3361      	adds	r3, #97	; 0x61
 8003cb8:	2208      	movs	r2, #8
 8003cba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f004 f81d 	bl	8007d06 <USB_HC_Halt>
 8003ccc:	e024      	b.n	8003d18 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce0:	2b80      	cmp	r3, #128	; 0x80
 8003ce2:	d119      	bne.n	8003d18 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	2380      	movs	r3, #128	; 0x80
 8003cf4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	212c      	movs	r1, #44	; 0x2c
 8003cfc:	fb01 f303 	mul.w	r3, r1, r3
 8003d00:	4413      	add	r3, r2
 8003d02:	3361      	adds	r3, #97	; 0x61
 8003d04:	2206      	movs	r2, #6
 8003d06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	4611      	mov	r1, r2
 8003d12:	4618      	mov	r0, r3
 8003d14:	f003 fff7 	bl	8007d06 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d2e:	d112      	bne.n	8003d56 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	4611      	mov	r1, r2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f003 ffe3 	bl	8007d06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d52:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003d54:	e24e      	b.n	80041f4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	f040 80df 	bne.w	8003f2c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d019      	beq.n	8003daa <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	212c      	movs	r1, #44	; 0x2c
 8003d7c:	fb01 f303 	mul.w	r3, r1, r3
 8003d80:	4413      	add	r3, r2
 8003d82:	3348      	adds	r3, #72	; 0x48
 8003d84:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	0159      	lsls	r1, r3, #5
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	440b      	add	r3, r1
 8003d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003d98:	1ad2      	subs	r2, r2, r3
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	202c      	movs	r0, #44	; 0x2c
 8003da0:	fb00 f303 	mul.w	r3, r0, r3
 8003da4:	440b      	add	r3, r1
 8003da6:	3350      	adds	r3, #80	; 0x50
 8003da8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	212c      	movs	r1, #44	; 0x2c
 8003db0:	fb01 f303 	mul.w	r3, r1, r3
 8003db4:	4413      	add	r3, r2
 8003db6:	3361      	adds	r3, #97	; 0x61
 8003db8:	2201      	movs	r2, #1
 8003dba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	212c      	movs	r1, #44	; 0x2c
 8003dc2:	fb01 f303 	mul.w	r3, r1, r3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	335c      	adds	r3, #92	; 0x5c
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dda:	461a      	mov	r2, r3
 8003ddc:	2301      	movs	r3, #1
 8003dde:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	212c      	movs	r1, #44	; 0x2c
 8003de6:	fb01 f303 	mul.w	r3, r1, r3
 8003dea:	4413      	add	r3, r2
 8003dec:	333f      	adds	r3, #63	; 0x3f
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d009      	beq.n	8003e08 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	212c      	movs	r1, #44	; 0x2c
 8003dfa:	fb01 f303 	mul.w	r3, r1, r3
 8003dfe:	4413      	add	r3, r2
 8003e00:	333f      	adds	r3, #63	; 0x3f
 8003e02:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d111      	bne.n	8003e2c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	4611      	mov	r1, r2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f003 ff77 	bl	8007d06 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e24:	461a      	mov	r2, r3
 8003e26:	2310      	movs	r3, #16
 8003e28:	6093      	str	r3, [r2, #8]
 8003e2a:	e03a      	b.n	8003ea2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	212c      	movs	r1, #44	; 0x2c
 8003e32:	fb01 f303 	mul.w	r3, r1, r3
 8003e36:	4413      	add	r3, r2
 8003e38:	333f      	adds	r3, #63	; 0x3f
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b03      	cmp	r3, #3
 8003e3e:	d009      	beq.n	8003e54 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	212c      	movs	r1, #44	; 0x2c
 8003e46:	fb01 f303 	mul.w	r3, r1, r3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	333f      	adds	r3, #63	; 0x3f
 8003e4e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d126      	bne.n	8003ea2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	0151      	lsls	r1, r2, #5
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	440a      	add	r2, r1
 8003e6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e72:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	212c      	movs	r1, #44	; 0x2c
 8003e7a:	fb01 f303 	mul.w	r3, r1, r3
 8003e7e:	4413      	add	r3, r2
 8003e80:	3360      	adds	r3, #96	; 0x60
 8003e82:	2201      	movs	r2, #1
 8003e84:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	b2d9      	uxtb	r1, r3
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	202c      	movs	r0, #44	; 0x2c
 8003e90:	fb00 f303 	mul.w	r3, r0, r3
 8003e94:	4413      	add	r3, r2
 8003e96:	3360      	adds	r3, #96	; 0x60
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f006 fbc1 	bl	800a624 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d12b      	bne.n	8003f02 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	212c      	movs	r1, #44	; 0x2c
 8003eb0:	fb01 f303 	mul.w	r3, r1, r3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3348      	adds	r3, #72	; 0x48
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	202c      	movs	r0, #44	; 0x2c
 8003ec0:	fb00 f202 	mul.w	r2, r0, r2
 8003ec4:	440a      	add	r2, r1
 8003ec6:	3240      	adds	r2, #64	; 0x40
 8003ec8:	8812      	ldrh	r2, [r2, #0]
 8003eca:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 818e 	beq.w	80041f4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	212c      	movs	r1, #44	; 0x2c
 8003ede:	fb01 f303 	mul.w	r3, r1, r3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3354      	adds	r3, #84	; 0x54
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	f083 0301 	eor.w	r3, r3, #1
 8003eec:	b2d8      	uxtb	r0, r3
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	212c      	movs	r1, #44	; 0x2c
 8003ef4:	fb01 f303 	mul.w	r3, r1, r3
 8003ef8:	4413      	add	r3, r2
 8003efa:	3354      	adds	r3, #84	; 0x54
 8003efc:	4602      	mov	r2, r0
 8003efe:	701a      	strb	r2, [r3, #0]
}
 8003f00:	e178      	b.n	80041f4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	212c      	movs	r1, #44	; 0x2c
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	3354      	adds	r3, #84	; 0x54
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	f083 0301 	eor.w	r3, r3, #1
 8003f16:	b2d8      	uxtb	r0, r3
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	212c      	movs	r1, #44	; 0x2c
 8003f1e:	fb01 f303 	mul.w	r3, r1, r3
 8003f22:	4413      	add	r3, r2
 8003f24:	3354      	adds	r3, #84	; 0x54
 8003f26:	4602      	mov	r2, r0
 8003f28:	701a      	strb	r2, [r3, #0]
}
 8003f2a:	e163      	b.n	80041f4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	f040 80f6 	bne.w	8004130 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	212c      	movs	r1, #44	; 0x2c
 8003f4a:	fb01 f303 	mul.w	r3, r1, r3
 8003f4e:	4413      	add	r3, r2
 8003f50:	3361      	adds	r3, #97	; 0x61
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d109      	bne.n	8003f6c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	212c      	movs	r1, #44	; 0x2c
 8003f5e:	fb01 f303 	mul.w	r3, r1, r3
 8003f62:	4413      	add	r3, r2
 8003f64:	3360      	adds	r3, #96	; 0x60
 8003f66:	2201      	movs	r2, #1
 8003f68:	701a      	strb	r2, [r3, #0]
 8003f6a:	e0c9      	b.n	8004100 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	212c      	movs	r1, #44	; 0x2c
 8003f72:	fb01 f303 	mul.w	r3, r1, r3
 8003f76:	4413      	add	r3, r2
 8003f78:	3361      	adds	r3, #97	; 0x61
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b05      	cmp	r3, #5
 8003f7e:	d109      	bne.n	8003f94 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	212c      	movs	r1, #44	; 0x2c
 8003f86:	fb01 f303 	mul.w	r3, r1, r3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	3360      	adds	r3, #96	; 0x60
 8003f8e:	2205      	movs	r2, #5
 8003f90:	701a      	strb	r2, [r3, #0]
 8003f92:	e0b5      	b.n	8004100 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	212c      	movs	r1, #44	; 0x2c
 8003f9a:	fb01 f303 	mul.w	r3, r1, r3
 8003f9e:	4413      	add	r3, r2
 8003fa0:	3361      	adds	r3, #97	; 0x61
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b06      	cmp	r3, #6
 8003fa6:	d009      	beq.n	8003fbc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	212c      	movs	r1, #44	; 0x2c
 8003fae:	fb01 f303 	mul.w	r3, r1, r3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3361      	adds	r3, #97	; 0x61
 8003fb6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d150      	bne.n	800405e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	212c      	movs	r1, #44	; 0x2c
 8003fc2:	fb01 f303 	mul.w	r3, r1, r3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	335c      	adds	r3, #92	; 0x5c
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	202c      	movs	r0, #44	; 0x2c
 8003fd4:	fb00 f303 	mul.w	r3, r0, r3
 8003fd8:	440b      	add	r3, r1
 8003fda:	335c      	adds	r3, #92	; 0x5c
 8003fdc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	212c      	movs	r1, #44	; 0x2c
 8003fe4:	fb01 f303 	mul.w	r3, r1, r3
 8003fe8:	4413      	add	r3, r2
 8003fea:	335c      	adds	r3, #92	; 0x5c
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d912      	bls.n	8004018 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	212c      	movs	r1, #44	; 0x2c
 8003ff8:	fb01 f303 	mul.w	r3, r1, r3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	335c      	adds	r3, #92	; 0x5c
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	212c      	movs	r1, #44	; 0x2c
 800400a:	fb01 f303 	mul.w	r3, r1, r3
 800400e:	4413      	add	r3, r2
 8004010:	3360      	adds	r3, #96	; 0x60
 8004012:	2204      	movs	r2, #4
 8004014:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004016:	e073      	b.n	8004100 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	212c      	movs	r1, #44	; 0x2c
 800401e:	fb01 f303 	mul.w	r3, r1, r3
 8004022:	4413      	add	r3, r2
 8004024:	3360      	adds	r3, #96	; 0x60
 8004026:	2202      	movs	r2, #2
 8004028:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	4413      	add	r3, r2
 8004032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004040:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004048:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	4413      	add	r3, r2
 8004052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004056:	461a      	mov	r2, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800405c:	e050      	b.n	8004100 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	212c      	movs	r1, #44	; 0x2c
 8004064:	fb01 f303 	mul.w	r3, r1, r3
 8004068:	4413      	add	r3, r2
 800406a:	3361      	adds	r3, #97	; 0x61
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b03      	cmp	r3, #3
 8004070:	d122      	bne.n	80040b8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	212c      	movs	r1, #44	; 0x2c
 8004078:	fb01 f303 	mul.w	r3, r1, r3
 800407c:	4413      	add	r3, r2
 800407e:	3360      	adds	r3, #96	; 0x60
 8004080:	2202      	movs	r2, #2
 8004082:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	4413      	add	r3, r2
 800408c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800409a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040a2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b0:	461a      	mov	r2, r3
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	e023      	b.n	8004100 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	212c      	movs	r1, #44	; 0x2c
 80040be:	fb01 f303 	mul.w	r3, r1, r3
 80040c2:	4413      	add	r3, r2
 80040c4:	3361      	adds	r3, #97	; 0x61
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b07      	cmp	r3, #7
 80040ca:	d119      	bne.n	8004100 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	212c      	movs	r1, #44	; 0x2c
 80040d2:	fb01 f303 	mul.w	r3, r1, r3
 80040d6:	4413      	add	r3, r2
 80040d8:	335c      	adds	r3, #92	; 0x5c
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	202c      	movs	r0, #44	; 0x2c
 80040e4:	fb00 f303 	mul.w	r3, r0, r3
 80040e8:	440b      	add	r3, r1
 80040ea:	335c      	adds	r3, #92	; 0x5c
 80040ec:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	212c      	movs	r1, #44	; 0x2c
 80040f4:	fb01 f303 	mul.w	r3, r1, r3
 80040f8:	4413      	add	r3, r2
 80040fa:	3360      	adds	r3, #96	; 0x60
 80040fc:	2204      	movs	r2, #4
 80040fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	4413      	add	r3, r2
 8004108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410c:	461a      	mov	r2, r3
 800410e:	2302      	movs	r3, #2
 8004110:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	b2d9      	uxtb	r1, r3
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	202c      	movs	r0, #44	; 0x2c
 800411c:	fb00 f303 	mul.w	r3, r0, r3
 8004120:	4413      	add	r3, r2
 8004122:	3360      	adds	r3, #96	; 0x60
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f006 fa7b 	bl	800a624 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800412e:	e061      	b.n	80041f4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	4413      	add	r3, r2
 8004138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	2b10      	cmp	r3, #16
 8004144:	d156      	bne.n	80041f4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	212c      	movs	r1, #44	; 0x2c
 800414c:	fb01 f303 	mul.w	r3, r1, r3
 8004150:	4413      	add	r3, r2
 8004152:	333f      	adds	r3, #63	; 0x3f
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b03      	cmp	r3, #3
 8004158:	d111      	bne.n	800417e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	212c      	movs	r1, #44	; 0x2c
 8004160:	fb01 f303 	mul.w	r3, r1, r3
 8004164:	4413      	add	r3, r2
 8004166:	335c      	adds	r3, #92	; 0x5c
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	4611      	mov	r1, r2
 8004176:	4618      	mov	r0, r3
 8004178:	f003 fdc5 	bl	8007d06 <USB_HC_Halt>
 800417c:	e031      	b.n	80041e2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	212c      	movs	r1, #44	; 0x2c
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	4413      	add	r3, r2
 800418a:	333f      	adds	r3, #63	; 0x3f
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d009      	beq.n	80041a6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	212c      	movs	r1, #44	; 0x2c
 8004198:	fb01 f303 	mul.w	r3, r1, r3
 800419c:	4413      	add	r3, r2
 800419e:	333f      	adds	r3, #63	; 0x3f
 80041a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d11d      	bne.n	80041e2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	212c      	movs	r1, #44	; 0x2c
 80041ac:	fb01 f303 	mul.w	r3, r1, r3
 80041b0:	4413      	add	r3, r2
 80041b2:	335c      	adds	r3, #92	; 0x5c
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d110      	bne.n	80041e2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	212c      	movs	r1, #44	; 0x2c
 80041c6:	fb01 f303 	mul.w	r3, r1, r3
 80041ca:	4413      	add	r3, r2
 80041cc:	3361      	adds	r3, #97	; 0x61
 80041ce:	2203      	movs	r2, #3
 80041d0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	4611      	mov	r1, r2
 80041dc:	4618      	mov	r0, r3
 80041de:	f003 fd92 	bl	8007d06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ee:	461a      	mov	r2, r3
 80041f0:	2310      	movs	r3, #16
 80041f2:	6093      	str	r3, [r2, #8]
}
 80041f4:	bf00      	nop
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004212:	78fb      	ldrb	r3, [r7, #3]
 8004214:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	4413      	add	r3, r2
 800421e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b04      	cmp	r3, #4
 800422a:	d11a      	bne.n	8004262 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	4413      	add	r3, r2
 8004234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004238:	461a      	mov	r2, r3
 800423a:	2304      	movs	r3, #4
 800423c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	212c      	movs	r1, #44	; 0x2c
 8004244:	fb01 f303 	mul.w	r3, r1, r3
 8004248:	4413      	add	r3, r2
 800424a:	3361      	adds	r3, #97	; 0x61
 800424c:	2206      	movs	r2, #6
 800424e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	4611      	mov	r1, r2
 800425a:	4618      	mov	r0, r3
 800425c:	f003 fd53 	bl	8007d06 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004260:	e331      	b.n	80048c6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	4413      	add	r3, r2
 800426a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 0320 	and.w	r3, r3, #32
 8004274:	2b20      	cmp	r3, #32
 8004276:	d12e      	bne.n	80042d6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	4413      	add	r3, r2
 8004280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004284:	461a      	mov	r2, r3
 8004286:	2320      	movs	r3, #32
 8004288:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	212c      	movs	r1, #44	; 0x2c
 8004290:	fb01 f303 	mul.w	r3, r1, r3
 8004294:	4413      	add	r3, r2
 8004296:	333d      	adds	r3, #61	; 0x3d
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b01      	cmp	r3, #1
 800429c:	f040 8313 	bne.w	80048c6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	212c      	movs	r1, #44	; 0x2c
 80042a6:	fb01 f303 	mul.w	r3, r1, r3
 80042aa:	4413      	add	r3, r2
 80042ac:	333d      	adds	r3, #61	; 0x3d
 80042ae:	2200      	movs	r2, #0
 80042b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	212c      	movs	r1, #44	; 0x2c
 80042b8:	fb01 f303 	mul.w	r3, r1, r3
 80042bc:	4413      	add	r3, r2
 80042be:	3360      	adds	r3, #96	; 0x60
 80042c0:	2202      	movs	r2, #2
 80042c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	4611      	mov	r1, r2
 80042ce:	4618      	mov	r0, r3
 80042d0:	f003 fd19 	bl	8007d06 <USB_HC_Halt>
}
 80042d4:	e2f7      	b.n	80048c6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ec:	d112      	bne.n	8004314 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fa:	461a      	mov	r2, r3
 80042fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004300:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	4611      	mov	r1, r2
 800430c:	4618      	mov	r0, r3
 800430e:	f003 fcfa 	bl	8007d06 <USB_HC_Halt>
}
 8004312:	e2d8      	b.n	80048c6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	4413      	add	r3, r2
 800431c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b01      	cmp	r3, #1
 8004328:	d140      	bne.n	80043ac <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	212c      	movs	r1, #44	; 0x2c
 8004330:	fb01 f303 	mul.w	r3, r1, r3
 8004334:	4413      	add	r3, r2
 8004336:	335c      	adds	r3, #92	; 0x5c
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	4413      	add	r3, r2
 8004344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434e:	2b40      	cmp	r3, #64	; 0x40
 8004350:	d111      	bne.n	8004376 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	212c      	movs	r1, #44	; 0x2c
 8004358:	fb01 f303 	mul.w	r3, r1, r3
 800435c:	4413      	add	r3, r2
 800435e:	333d      	adds	r3, #61	; 0x3d
 8004360:	2201      	movs	r2, #1
 8004362:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	4413      	add	r3, r2
 800436c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004370:	461a      	mov	r2, r3
 8004372:	2340      	movs	r3, #64	; 0x40
 8004374:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	4413      	add	r3, r2
 800437e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004382:	461a      	mov	r2, r3
 8004384:	2301      	movs	r3, #1
 8004386:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	212c      	movs	r1, #44	; 0x2c
 800438e:	fb01 f303 	mul.w	r3, r1, r3
 8004392:	4413      	add	r3, r2
 8004394:	3361      	adds	r3, #97	; 0x61
 8004396:	2201      	movs	r2, #1
 8004398:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	4611      	mov	r1, r2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f003 fcae 	bl	8007d06 <USB_HC_Halt>
}
 80043aa:	e28c      	b.n	80048c6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043be:	2b40      	cmp	r3, #64	; 0x40
 80043c0:	d12c      	bne.n	800441c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	212c      	movs	r1, #44	; 0x2c
 80043c8:	fb01 f303 	mul.w	r3, r1, r3
 80043cc:	4413      	add	r3, r2
 80043ce:	3361      	adds	r3, #97	; 0x61
 80043d0:	2204      	movs	r2, #4
 80043d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	212c      	movs	r1, #44	; 0x2c
 80043da:	fb01 f303 	mul.w	r3, r1, r3
 80043de:	4413      	add	r3, r2
 80043e0:	333d      	adds	r3, #61	; 0x3d
 80043e2:	2201      	movs	r2, #1
 80043e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	212c      	movs	r1, #44	; 0x2c
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	4413      	add	r3, r2
 80043f2:	335c      	adds	r3, #92	; 0x5c
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	4611      	mov	r1, r2
 8004402:	4618      	mov	r0, r3
 8004404:	f003 fc7f 	bl	8007d06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	4413      	add	r3, r2
 8004410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004414:	461a      	mov	r2, r3
 8004416:	2340      	movs	r3, #64	; 0x40
 8004418:	6093      	str	r3, [r2, #8]
}
 800441a:	e254      	b.n	80048c6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	4413      	add	r3, r2
 8004424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b08      	cmp	r3, #8
 8004430:	d11a      	bne.n	8004468 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	4413      	add	r3, r2
 800443a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800443e:	461a      	mov	r2, r3
 8004440:	2308      	movs	r3, #8
 8004442:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	212c      	movs	r1, #44	; 0x2c
 800444a:	fb01 f303 	mul.w	r3, r1, r3
 800444e:	4413      	add	r3, r2
 8004450:	3361      	adds	r3, #97	; 0x61
 8004452:	2205      	movs	r2, #5
 8004454:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	4611      	mov	r1, r2
 8004460:	4618      	mov	r0, r3
 8004462:	f003 fc50 	bl	8007d06 <USB_HC_Halt>
}
 8004466:	e22e      	b.n	80048c6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	4413      	add	r3, r2
 8004470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	2b10      	cmp	r3, #16
 800447c:	d140      	bne.n	8004500 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	212c      	movs	r1, #44	; 0x2c
 8004484:	fb01 f303 	mul.w	r3, r1, r3
 8004488:	4413      	add	r3, r2
 800448a:	335c      	adds	r3, #92	; 0x5c
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	212c      	movs	r1, #44	; 0x2c
 8004496:	fb01 f303 	mul.w	r3, r1, r3
 800449a:	4413      	add	r3, r2
 800449c:	3361      	adds	r3, #97	; 0x61
 800449e:	2203      	movs	r2, #3
 80044a0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	212c      	movs	r1, #44	; 0x2c
 80044a8:	fb01 f303 	mul.w	r3, r1, r3
 80044ac:	4413      	add	r3, r2
 80044ae:	333d      	adds	r3, #61	; 0x3d
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d112      	bne.n	80044dc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	212c      	movs	r1, #44	; 0x2c
 80044bc:	fb01 f303 	mul.w	r3, r1, r3
 80044c0:	4413      	add	r3, r2
 80044c2:	333c      	adds	r3, #60	; 0x3c
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d108      	bne.n	80044dc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	212c      	movs	r1, #44	; 0x2c
 80044d0:	fb01 f303 	mul.w	r3, r1, r3
 80044d4:	4413      	add	r3, r2
 80044d6:	333d      	adds	r3, #61	; 0x3d
 80044d8:	2201      	movs	r2, #1
 80044da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	4611      	mov	r1, r2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f003 fc0d 	bl	8007d06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f8:	461a      	mov	r2, r3
 80044fa:	2310      	movs	r3, #16
 80044fc:	6093      	str	r3, [r2, #8]
}
 80044fe:	e1e2      	b.n	80048c6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	4413      	add	r3, r2
 8004508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004512:	2b80      	cmp	r3, #128	; 0x80
 8004514:	d164      	bne.n	80045e0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d111      	bne.n	8004542 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	212c      	movs	r1, #44	; 0x2c
 8004524:	fb01 f303 	mul.w	r3, r1, r3
 8004528:	4413      	add	r3, r2
 800452a:	3361      	adds	r3, #97	; 0x61
 800452c:	2206      	movs	r2, #6
 800452e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	b2d2      	uxtb	r2, r2
 8004538:	4611      	mov	r1, r2
 800453a:	4618      	mov	r0, r3
 800453c:	f003 fbe3 	bl	8007d06 <USB_HC_Halt>
 8004540:	e044      	b.n	80045cc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	212c      	movs	r1, #44	; 0x2c
 8004548:	fb01 f303 	mul.w	r3, r1, r3
 800454c:	4413      	add	r3, r2
 800454e:	335c      	adds	r3, #92	; 0x5c
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	202c      	movs	r0, #44	; 0x2c
 800455a:	fb00 f303 	mul.w	r3, r0, r3
 800455e:	440b      	add	r3, r1
 8004560:	335c      	adds	r3, #92	; 0x5c
 8004562:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	212c      	movs	r1, #44	; 0x2c
 800456a:	fb01 f303 	mul.w	r3, r1, r3
 800456e:	4413      	add	r3, r2
 8004570:	335c      	adds	r3, #92	; 0x5c
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b02      	cmp	r3, #2
 8004576:	d920      	bls.n	80045ba <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	212c      	movs	r1, #44	; 0x2c
 800457e:	fb01 f303 	mul.w	r3, r1, r3
 8004582:	4413      	add	r3, r2
 8004584:	335c      	adds	r3, #92	; 0x5c
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	212c      	movs	r1, #44	; 0x2c
 8004590:	fb01 f303 	mul.w	r3, r1, r3
 8004594:	4413      	add	r3, r2
 8004596:	3360      	adds	r3, #96	; 0x60
 8004598:	2204      	movs	r2, #4
 800459a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	b2d9      	uxtb	r1, r3
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	202c      	movs	r0, #44	; 0x2c
 80045a6:	fb00 f303 	mul.w	r3, r0, r3
 80045aa:	4413      	add	r3, r2
 80045ac:	3360      	adds	r3, #96	; 0x60
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	461a      	mov	r2, r3
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f006 f836 	bl	800a624 <HAL_HCD_HC_NotifyURBChange_Callback>
 80045b8:	e008      	b.n	80045cc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	212c      	movs	r1, #44	; 0x2c
 80045c0:	fb01 f303 	mul.w	r3, r1, r3
 80045c4:	4413      	add	r3, r2
 80045c6:	3360      	adds	r3, #96	; 0x60
 80045c8:	2202      	movs	r2, #2
 80045ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d8:	461a      	mov	r2, r3
 80045da:	2380      	movs	r3, #128	; 0x80
 80045dc:	6093      	str	r3, [r2, #8]
}
 80045de:	e172      	b.n	80048c6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045f6:	d11b      	bne.n	8004630 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	212c      	movs	r1, #44	; 0x2c
 80045fe:	fb01 f303 	mul.w	r3, r1, r3
 8004602:	4413      	add	r3, r2
 8004604:	3361      	adds	r3, #97	; 0x61
 8004606:	2208      	movs	r2, #8
 8004608:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	4611      	mov	r1, r2
 8004614:	4618      	mov	r0, r3
 8004616:	f003 fb76 	bl	8007d06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	4413      	add	r3, r2
 8004622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004626:	461a      	mov	r2, r3
 8004628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800462c:	6093      	str	r3, [r2, #8]
}
 800462e:	e14a      	b.n	80048c6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	4413      	add	r3, r2
 8004638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b02      	cmp	r3, #2
 8004644:	f040 813f 	bne.w	80048c6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	212c      	movs	r1, #44	; 0x2c
 800464e:	fb01 f303 	mul.w	r3, r1, r3
 8004652:	4413      	add	r3, r2
 8004654:	3361      	adds	r3, #97	; 0x61
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d17d      	bne.n	8004758 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	212c      	movs	r1, #44	; 0x2c
 8004662:	fb01 f303 	mul.w	r3, r1, r3
 8004666:	4413      	add	r3, r2
 8004668:	3360      	adds	r3, #96	; 0x60
 800466a:	2201      	movs	r2, #1
 800466c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	212c      	movs	r1, #44	; 0x2c
 8004674:	fb01 f303 	mul.w	r3, r1, r3
 8004678:	4413      	add	r3, r2
 800467a:	333f      	adds	r3, #63	; 0x3f
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d00a      	beq.n	8004698 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	212c      	movs	r1, #44	; 0x2c
 8004688:	fb01 f303 	mul.w	r3, r1, r3
 800468c:	4413      	add	r3, r2
 800468e:	333f      	adds	r3, #63	; 0x3f
 8004690:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004692:	2b03      	cmp	r3, #3
 8004694:	f040 8100 	bne.w	8004898 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d113      	bne.n	80046c8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	212c      	movs	r1, #44	; 0x2c
 80046a6:	fb01 f303 	mul.w	r3, r1, r3
 80046aa:	4413      	add	r3, r2
 80046ac:	3355      	adds	r3, #85	; 0x55
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	f083 0301 	eor.w	r3, r3, #1
 80046b4:	b2d8      	uxtb	r0, r3
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	212c      	movs	r1, #44	; 0x2c
 80046bc:	fb01 f303 	mul.w	r3, r1, r3
 80046c0:	4413      	add	r3, r2
 80046c2:	3355      	adds	r3, #85	; 0x55
 80046c4:	4602      	mov	r2, r0
 80046c6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	f040 80e3 	bne.w	8004898 <HCD_HC_OUT_IRQHandler+0x69c>
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	212c      	movs	r1, #44	; 0x2c
 80046d8:	fb01 f303 	mul.w	r3, r1, r3
 80046dc:	4413      	add	r3, r2
 80046de:	334c      	adds	r3, #76	; 0x4c
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80d8 	beq.w	8004898 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	212c      	movs	r1, #44	; 0x2c
 80046ee:	fb01 f303 	mul.w	r3, r1, r3
 80046f2:	4413      	add	r3, r2
 80046f4:	334c      	adds	r3, #76	; 0x4c
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	202c      	movs	r0, #44	; 0x2c
 80046fe:	fb00 f202 	mul.w	r2, r0, r2
 8004702:	440a      	add	r2, r1
 8004704:	3240      	adds	r2, #64	; 0x40
 8004706:	8812      	ldrh	r2, [r2, #0]
 8004708:	4413      	add	r3, r2
 800470a:	3b01      	subs	r3, #1
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	202c      	movs	r0, #44	; 0x2c
 8004712:	fb00 f202 	mul.w	r2, r0, r2
 8004716:	440a      	add	r2, r1
 8004718:	3240      	adds	r2, #64	; 0x40
 800471a:	8812      	ldrh	r2, [r2, #0]
 800471c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004720:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 80b5 	beq.w	8004898 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	212c      	movs	r1, #44	; 0x2c
 8004734:	fb01 f303 	mul.w	r3, r1, r3
 8004738:	4413      	add	r3, r2
 800473a:	3355      	adds	r3, #85	; 0x55
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	f083 0301 	eor.w	r3, r3, #1
 8004742:	b2d8      	uxtb	r0, r3
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	212c      	movs	r1, #44	; 0x2c
 800474a:	fb01 f303 	mul.w	r3, r1, r3
 800474e:	4413      	add	r3, r2
 8004750:	3355      	adds	r3, #85	; 0x55
 8004752:	4602      	mov	r2, r0
 8004754:	701a      	strb	r2, [r3, #0]
 8004756:	e09f      	b.n	8004898 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	212c      	movs	r1, #44	; 0x2c
 800475e:	fb01 f303 	mul.w	r3, r1, r3
 8004762:	4413      	add	r3, r2
 8004764:	3361      	adds	r3, #97	; 0x61
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b03      	cmp	r3, #3
 800476a:	d109      	bne.n	8004780 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	212c      	movs	r1, #44	; 0x2c
 8004772:	fb01 f303 	mul.w	r3, r1, r3
 8004776:	4413      	add	r3, r2
 8004778:	3360      	adds	r3, #96	; 0x60
 800477a:	2202      	movs	r2, #2
 800477c:	701a      	strb	r2, [r3, #0]
 800477e:	e08b      	b.n	8004898 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	212c      	movs	r1, #44	; 0x2c
 8004786:	fb01 f303 	mul.w	r3, r1, r3
 800478a:	4413      	add	r3, r2
 800478c:	3361      	adds	r3, #97	; 0x61
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b04      	cmp	r3, #4
 8004792:	d109      	bne.n	80047a8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	212c      	movs	r1, #44	; 0x2c
 800479a:	fb01 f303 	mul.w	r3, r1, r3
 800479e:	4413      	add	r3, r2
 80047a0:	3360      	adds	r3, #96	; 0x60
 80047a2:	2202      	movs	r2, #2
 80047a4:	701a      	strb	r2, [r3, #0]
 80047a6:	e077      	b.n	8004898 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	212c      	movs	r1, #44	; 0x2c
 80047ae:	fb01 f303 	mul.w	r3, r1, r3
 80047b2:	4413      	add	r3, r2
 80047b4:	3361      	adds	r3, #97	; 0x61
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b05      	cmp	r3, #5
 80047ba:	d109      	bne.n	80047d0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	212c      	movs	r1, #44	; 0x2c
 80047c2:	fb01 f303 	mul.w	r3, r1, r3
 80047c6:	4413      	add	r3, r2
 80047c8:	3360      	adds	r3, #96	; 0x60
 80047ca:	2205      	movs	r2, #5
 80047cc:	701a      	strb	r2, [r3, #0]
 80047ce:	e063      	b.n	8004898 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	212c      	movs	r1, #44	; 0x2c
 80047d6:	fb01 f303 	mul.w	r3, r1, r3
 80047da:	4413      	add	r3, r2
 80047dc:	3361      	adds	r3, #97	; 0x61
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b06      	cmp	r3, #6
 80047e2:	d009      	beq.n	80047f8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	212c      	movs	r1, #44	; 0x2c
 80047ea:	fb01 f303 	mul.w	r3, r1, r3
 80047ee:	4413      	add	r3, r2
 80047f0:	3361      	adds	r3, #97	; 0x61
 80047f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d14f      	bne.n	8004898 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	212c      	movs	r1, #44	; 0x2c
 80047fe:	fb01 f303 	mul.w	r3, r1, r3
 8004802:	4413      	add	r3, r2
 8004804:	335c      	adds	r3, #92	; 0x5c
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	202c      	movs	r0, #44	; 0x2c
 8004810:	fb00 f303 	mul.w	r3, r0, r3
 8004814:	440b      	add	r3, r1
 8004816:	335c      	adds	r3, #92	; 0x5c
 8004818:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	212c      	movs	r1, #44	; 0x2c
 8004820:	fb01 f303 	mul.w	r3, r1, r3
 8004824:	4413      	add	r3, r2
 8004826:	335c      	adds	r3, #92	; 0x5c
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d912      	bls.n	8004854 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	212c      	movs	r1, #44	; 0x2c
 8004834:	fb01 f303 	mul.w	r3, r1, r3
 8004838:	4413      	add	r3, r2
 800483a:	335c      	adds	r3, #92	; 0x5c
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	212c      	movs	r1, #44	; 0x2c
 8004846:	fb01 f303 	mul.w	r3, r1, r3
 800484a:	4413      	add	r3, r2
 800484c:	3360      	adds	r3, #96	; 0x60
 800484e:	2204      	movs	r2, #4
 8004850:	701a      	strb	r2, [r3, #0]
 8004852:	e021      	b.n	8004898 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	212c      	movs	r1, #44	; 0x2c
 800485a:	fb01 f303 	mul.w	r3, r1, r3
 800485e:	4413      	add	r3, r2
 8004860:	3360      	adds	r3, #96	; 0x60
 8004862:	2202      	movs	r2, #2
 8004864:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	4413      	add	r3, r2
 800486e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800487c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004884:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	4413      	add	r3, r2
 800488e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004892:	461a      	mov	r2, r3
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a4:	461a      	mov	r2, r3
 80048a6:	2302      	movs	r3, #2
 80048a8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	b2d9      	uxtb	r1, r3
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	202c      	movs	r0, #44	; 0x2c
 80048b4:	fb00 f303 	mul.w	r3, r0, r3
 80048b8:	4413      	add	r3, r2
 80048ba:	3360      	adds	r3, #96	; 0x60
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f005 feaf 	bl	800a624 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80048c6:	bf00      	nop
 80048c8:	3720      	adds	r7, #32
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b08a      	sub	sp, #40	; 0x28
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	0c5b      	lsrs	r3, r3, #17
 80048f4:	f003 030f 	and.w	r3, r3, #15
 80048f8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004902:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d004      	beq.n	8004914 <HCD_RXQLVL_IRQHandler+0x46>
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2b05      	cmp	r3, #5
 800490e:	f000 80a9 	beq.w	8004a64 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004912:	e0aa      	b.n	8004a6a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 80a6 	beq.w	8004a68 <HCD_RXQLVL_IRQHandler+0x19a>
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	212c      	movs	r1, #44	; 0x2c
 8004922:	fb01 f303 	mul.w	r3, r1, r3
 8004926:	4413      	add	r3, r2
 8004928:	3344      	adds	r3, #68	; 0x44
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 809b 	beq.w	8004a68 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	212c      	movs	r1, #44	; 0x2c
 8004938:	fb01 f303 	mul.w	r3, r1, r3
 800493c:	4413      	add	r3, r2
 800493e:	3350      	adds	r3, #80	; 0x50
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	441a      	add	r2, r3
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	202c      	movs	r0, #44	; 0x2c
 800494c:	fb00 f303 	mul.w	r3, r0, r3
 8004950:	440b      	add	r3, r1
 8004952:	334c      	adds	r3, #76	; 0x4c
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d87a      	bhi.n	8004a50 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	212c      	movs	r1, #44	; 0x2c
 8004964:	fb01 f303 	mul.w	r3, r1, r3
 8004968:	4413      	add	r3, r2
 800496a:	3344      	adds	r3, #68	; 0x44
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	b292      	uxth	r2, r2
 8004972:	4619      	mov	r1, r3
 8004974:	f002 fd48 	bl	8007408 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	212c      	movs	r1, #44	; 0x2c
 800497e:	fb01 f303 	mul.w	r3, r1, r3
 8004982:	4413      	add	r3, r2
 8004984:	3344      	adds	r3, #68	; 0x44
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	441a      	add	r2, r3
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	202c      	movs	r0, #44	; 0x2c
 8004992:	fb00 f303 	mul.w	r3, r0, r3
 8004996:	440b      	add	r3, r1
 8004998:	3344      	adds	r3, #68	; 0x44
 800499a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	212c      	movs	r1, #44	; 0x2c
 80049a2:	fb01 f303 	mul.w	r3, r1, r3
 80049a6:	4413      	add	r3, r2
 80049a8:	3350      	adds	r3, #80	; 0x50
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	441a      	add	r2, r3
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	202c      	movs	r0, #44	; 0x2c
 80049b6:	fb00 f303 	mul.w	r3, r0, r3
 80049ba:	440b      	add	r3, r1
 80049bc:	3350      	adds	r3, #80	; 0x50
 80049be:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	0cdb      	lsrs	r3, r3, #19
 80049d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049d4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	212c      	movs	r1, #44	; 0x2c
 80049dc:	fb01 f303 	mul.w	r3, r1, r3
 80049e0:	4413      	add	r3, r2
 80049e2:	3340      	adds	r3, #64	; 0x40
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	461a      	mov	r2, r3
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d13c      	bne.n	8004a68 <HCD_RXQLVL_IRQHandler+0x19a>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d039      	beq.n	8004a68 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a0a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a12:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a20:	461a      	mov	r2, r3
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	212c      	movs	r1, #44	; 0x2c
 8004a2c:	fb01 f303 	mul.w	r3, r1, r3
 8004a30:	4413      	add	r3, r2
 8004a32:	3354      	adds	r3, #84	; 0x54
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	f083 0301 	eor.w	r3, r3, #1
 8004a3a:	b2d8      	uxtb	r0, r3
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	212c      	movs	r1, #44	; 0x2c
 8004a42:	fb01 f303 	mul.w	r3, r1, r3
 8004a46:	4413      	add	r3, r2
 8004a48:	3354      	adds	r3, #84	; 0x54
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	701a      	strb	r2, [r3, #0]
      break;
 8004a4e:	e00b      	b.n	8004a68 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	212c      	movs	r1, #44	; 0x2c
 8004a56:	fb01 f303 	mul.w	r3, r1, r3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	3360      	adds	r3, #96	; 0x60
 8004a5e:	2204      	movs	r2, #4
 8004a60:	701a      	strb	r2, [r3, #0]
      break;
 8004a62:	e001      	b.n	8004a68 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004a64:	bf00      	nop
 8004a66:	e000      	b.n	8004a6a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004a68:	bf00      	nop
  }
}
 8004a6a:	bf00      	nop
 8004a6c:	3728      	adds	r7, #40	; 0x28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b086      	sub	sp, #24
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a9e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d10b      	bne.n	8004ac2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d102      	bne.n	8004aba <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f005 fd99 	bl	800a5ec <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f043 0302 	orr.w	r3, r3, #2
 8004ac0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d132      	bne.n	8004b32 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f043 0308 	orr.w	r3, r3, #8
 8004ad2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d126      	bne.n	8004b2c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d113      	bne.n	8004b0e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004aec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004af0:	d106      	bne.n	8004b00 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2102      	movs	r1, #2
 8004af8:	4618      	mov	r0, r3
 8004afa:	f002 fdf3 	bl	80076e4 <USB_InitFSLSPClkSel>
 8004afe:	e011      	b.n	8004b24 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2101      	movs	r1, #1
 8004b06:	4618      	mov	r0, r3
 8004b08:	f002 fdec 	bl	80076e4 <USB_InitFSLSPClkSel>
 8004b0c:	e00a      	b.n	8004b24 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d106      	bne.n	8004b24 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004b22:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f005 fd8b 	bl	800a640 <HAL_HCD_PortEnabled_Callback>
 8004b2a:	e002      	b.n	8004b32 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f005 fd95 	bl	800a65c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f003 0320 	and.w	r3, r3, #32
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d103      	bne.n	8004b44 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f043 0320 	orr.w	r3, r3, #32
 8004b42:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	6013      	str	r3, [r2, #0]
}
 8004b50:	bf00      	nop
 8004b52:	3718      	adds	r7, #24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e12b      	b.n	8004dc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fc fc70 	bl	8001464 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2224      	movs	r2, #36	; 0x24
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0201 	bic.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004baa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bbc:	f002 f8c6 	bl	8006d4c <HAL_RCC_GetPCLK1Freq>
 8004bc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	4a81      	ldr	r2, [pc, #516]	; (8004dcc <HAL_I2C_Init+0x274>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d807      	bhi.n	8004bdc <HAL_I2C_Init+0x84>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4a80      	ldr	r2, [pc, #512]	; (8004dd0 <HAL_I2C_Init+0x278>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	bf94      	ite	ls
 8004bd4:	2301      	movls	r3, #1
 8004bd6:	2300      	movhi	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	e006      	b.n	8004bea <HAL_I2C_Init+0x92>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4a7d      	ldr	r2, [pc, #500]	; (8004dd4 <HAL_I2C_Init+0x27c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	bf94      	ite	ls
 8004be4:	2301      	movls	r3, #1
 8004be6:	2300      	movhi	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e0e7      	b.n	8004dc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4a78      	ldr	r2, [pc, #480]	; (8004dd8 <HAL_I2C_Init+0x280>)
 8004bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfa:	0c9b      	lsrs	r3, r3, #18
 8004bfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	4a6a      	ldr	r2, [pc, #424]	; (8004dcc <HAL_I2C_Init+0x274>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d802      	bhi.n	8004c2c <HAL_I2C_Init+0xd4>
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	e009      	b.n	8004c40 <HAL_I2C_Init+0xe8>
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c32:	fb02 f303 	mul.w	r3, r2, r3
 8004c36:	4a69      	ldr	r2, [pc, #420]	; (8004ddc <HAL_I2C_Init+0x284>)
 8004c38:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3c:	099b      	lsrs	r3, r3, #6
 8004c3e:	3301      	adds	r3, #1
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6812      	ldr	r2, [r2, #0]
 8004c44:	430b      	orrs	r3, r1
 8004c46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	495c      	ldr	r1, [pc, #368]	; (8004dcc <HAL_I2C_Init+0x274>)
 8004c5c:	428b      	cmp	r3, r1
 8004c5e:	d819      	bhi.n	8004c94 <HAL_I2C_Init+0x13c>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	1e59      	subs	r1, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c6e:	1c59      	adds	r1, r3, #1
 8004c70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c74:	400b      	ands	r3, r1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <HAL_I2C_Init+0x138>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	1e59      	subs	r1, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c88:	3301      	adds	r3, #1
 8004c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c8e:	e051      	b.n	8004d34 <HAL_I2C_Init+0x1dc>
 8004c90:	2304      	movs	r3, #4
 8004c92:	e04f      	b.n	8004d34 <HAL_I2C_Init+0x1dc>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d111      	bne.n	8004cc0 <HAL_I2C_Init+0x168>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	1e58      	subs	r0, r3, #1
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6859      	ldr	r1, [r3, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	440b      	add	r3, r1
 8004caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cae:	3301      	adds	r3, #1
 8004cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	bf0c      	ite	eq
 8004cb8:	2301      	moveq	r3, #1
 8004cba:	2300      	movne	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	e012      	b.n	8004ce6 <HAL_I2C_Init+0x18e>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	1e58      	subs	r0, r3, #1
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6859      	ldr	r1, [r3, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	0099      	lsls	r1, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bf0c      	ite	eq
 8004ce0:	2301      	moveq	r3, #1
 8004ce2:	2300      	movne	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <HAL_I2C_Init+0x196>
 8004cea:	2301      	movs	r3, #1
 8004cec:	e022      	b.n	8004d34 <HAL_I2C_Init+0x1dc>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10e      	bne.n	8004d14 <HAL_I2C_Init+0x1bc>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	1e58      	subs	r0, r3, #1
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6859      	ldr	r1, [r3, #4]
 8004cfe:	460b      	mov	r3, r1
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	440b      	add	r3, r1
 8004d04:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d08:	3301      	adds	r3, #1
 8004d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d12:	e00f      	b.n	8004d34 <HAL_I2C_Init+0x1dc>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	1e58      	subs	r0, r3, #1
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6859      	ldr	r1, [r3, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	0099      	lsls	r1, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	6809      	ldr	r1, [r1, #0]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69da      	ldr	r2, [r3, #28]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6911      	ldr	r1, [r2, #16]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	68d2      	ldr	r2, [r2, #12]
 8004d6e:	4311      	orrs	r1, r2
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6812      	ldr	r2, [r2, #0]
 8004d74:	430b      	orrs	r3, r1
 8004d76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	695a      	ldr	r2, [r3, #20]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	000186a0 	.word	0x000186a0
 8004dd0:	001e847f 	.word	0x001e847f
 8004dd4:	003d08ff 	.word	0x003d08ff
 8004dd8:	431bde83 	.word	0x431bde83
 8004ddc:	10624dd3 	.word	0x10624dd3

08004de0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e021      	b.n	8004e36 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2224      	movs	r2, #36	; 0x24
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0201 	bic.w	r2, r2, #1
 8004e08:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fc fb72 	bl	80014f4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	4608      	mov	r0, r1
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	4603      	mov	r3, r0
 8004e50:	817b      	strh	r3, [r7, #10]
 8004e52:	460b      	mov	r3, r1
 8004e54:	813b      	strh	r3, [r7, #8]
 8004e56:	4613      	mov	r3, r2
 8004e58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e5a:	f7fd fbe1 	bl	8002620 <HAL_GetTick>
 8004e5e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b20      	cmp	r3, #32
 8004e6a:	f040 80d9 	bne.w	8005020 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	2319      	movs	r3, #25
 8004e74:	2201      	movs	r2, #1
 8004e76:	496d      	ldr	r1, [pc, #436]	; (800502c <HAL_I2C_Mem_Write+0x1ec>)
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 fc8d 	bl	8005798 <I2C_WaitOnFlagUntilTimeout>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004e84:	2302      	movs	r3, #2
 8004e86:	e0cc      	b.n	8005022 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d101      	bne.n	8004e96 <HAL_I2C_Mem_Write+0x56>
 8004e92:	2302      	movs	r3, #2
 8004e94:	e0c5      	b.n	8005022 <HAL_I2C_Mem_Write+0x1e2>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d007      	beq.n	8004ebc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2221      	movs	r2, #33	; 0x21
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2240      	movs	r2, #64	; 0x40
 8004ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a3a      	ldr	r2, [r7, #32]
 8004ee6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004eec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4a4d      	ldr	r2, [pc, #308]	; (8005030 <HAL_I2C_Mem_Write+0x1f0>)
 8004efc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004efe:	88f8      	ldrh	r0, [r7, #6]
 8004f00:	893a      	ldrh	r2, [r7, #8]
 8004f02:	8979      	ldrh	r1, [r7, #10]
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	9301      	str	r3, [sp, #4]
 8004f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 fac4 	bl	800549c <I2C_RequestMemoryWrite>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d052      	beq.n	8004fc0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e081      	b.n	8005022 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 fd0e 	bl	8005944 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00d      	beq.n	8004f4a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d107      	bne.n	8004f46 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e06b      	b.n	8005022 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	781a      	ldrb	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d11b      	bne.n	8004fc0 <HAL_I2C_Mem_Write+0x180>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d017      	beq.n	8004fc0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	781a      	ldrb	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1aa      	bne.n	8004f1e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 fcfa 	bl	80059c6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00d      	beq.n	8004ff4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d107      	bne.n	8004ff0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e016      	b.n	8005022 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005002:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	e000      	b.n	8005022 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005020:	2302      	movs	r3, #2
  }
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	00100002 	.word	0x00100002
 8005030:	ffff0000 	.word	0xffff0000

08005034 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08c      	sub	sp, #48	; 0x30
 8005038:	af02      	add	r7, sp, #8
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	4608      	mov	r0, r1
 800503e:	4611      	mov	r1, r2
 8005040:	461a      	mov	r2, r3
 8005042:	4603      	mov	r3, r0
 8005044:	817b      	strh	r3, [r7, #10]
 8005046:	460b      	mov	r3, r1
 8005048:	813b      	strh	r3, [r7, #8]
 800504a:	4613      	mov	r3, r2
 800504c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800504e:	f7fd fae7 	bl	8002620 <HAL_GetTick>
 8005052:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b20      	cmp	r3, #32
 800505e:	f040 8208 	bne.w	8005472 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	2319      	movs	r3, #25
 8005068:	2201      	movs	r2, #1
 800506a:	497b      	ldr	r1, [pc, #492]	; (8005258 <HAL_I2C_Mem_Read+0x224>)
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 fb93 	bl	8005798 <I2C_WaitOnFlagUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005078:	2302      	movs	r3, #2
 800507a:	e1fb      	b.n	8005474 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005082:	2b01      	cmp	r3, #1
 8005084:	d101      	bne.n	800508a <HAL_I2C_Mem_Read+0x56>
 8005086:	2302      	movs	r3, #2
 8005088:	e1f4      	b.n	8005474 <HAL_I2C_Mem_Read+0x440>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b01      	cmp	r3, #1
 800509e:	d007      	beq.n	80050b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0201 	orr.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2222      	movs	r2, #34	; 0x22
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2240      	movs	r2, #64	; 0x40
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80050e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4a5b      	ldr	r2, [pc, #364]	; (800525c <HAL_I2C_Mem_Read+0x228>)
 80050f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050f2:	88f8      	ldrh	r0, [r7, #6]
 80050f4:	893a      	ldrh	r2, [r7, #8]
 80050f6:	8979      	ldrh	r1, [r7, #10]
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	9301      	str	r3, [sp, #4]
 80050fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	4603      	mov	r3, r0
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 fa60 	bl	80055c8 <I2C_RequestMemoryRead>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e1b0      	b.n	8005474 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005116:	2b00      	cmp	r3, #0
 8005118:	d113      	bne.n	8005142 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800511a:	2300      	movs	r3, #0
 800511c:	623b      	str	r3, [r7, #32]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	623b      	str	r3, [r7, #32]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	623b      	str	r3, [r7, #32]
 800512e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	e184      	b.n	800544c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005146:	2b01      	cmp	r3, #1
 8005148:	d11b      	bne.n	8005182 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005158:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800515a:	2300      	movs	r3, #0
 800515c:	61fb      	str	r3, [r7, #28]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	61fb      	str	r3, [r7, #28]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	61fb      	str	r3, [r7, #28]
 800516e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	e164      	b.n	800544c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005186:	2b02      	cmp	r3, #2
 8005188:	d11b      	bne.n	80051c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005198:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051aa:	2300      	movs	r3, #0
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	61bb      	str	r3, [r7, #24]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	e144      	b.n	800544c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80051d8:	e138      	b.n	800544c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051de:	2b03      	cmp	r3, #3
 80051e0:	f200 80f1 	bhi.w	80053c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d123      	bne.n	8005234 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 fc29 	bl	8005a48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e139      	b.n	8005474 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691a      	ldr	r2, [r3, #16]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521c:	3b01      	subs	r3, #1
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005232:	e10b      	b.n	800544c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005238:	2b02      	cmp	r3, #2
 800523a:	d14e      	bne.n	80052da <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005242:	2200      	movs	r2, #0
 8005244:	4906      	ldr	r1, [pc, #24]	; (8005260 <HAL_I2C_Mem_Read+0x22c>)
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 faa6 	bl	8005798 <I2C_WaitOnFlagUntilTimeout>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d008      	beq.n	8005264 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e10e      	b.n	8005474 <HAL_I2C_Mem_Read+0x440>
 8005256:	bf00      	nop
 8005258:	00100002 	.word	0x00100002
 800525c:	ffff0000 	.word	0xffff0000
 8005260:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691a      	ldr	r2, [r3, #16]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	1c5a      	adds	r2, r3, #1
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005290:	3b01      	subs	r3, #1
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529c:	b29b      	uxth	r3, r3
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c2:	3b01      	subs	r3, #1
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	3b01      	subs	r3, #1
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052d8:	e0b8      	b.n	800544c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e0:	2200      	movs	r2, #0
 80052e2:	4966      	ldr	r1, [pc, #408]	; (800547c <HAL_I2C_Mem_Read+0x448>)
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 fa57 	bl	8005798 <I2C_WaitOnFlagUntilTimeout>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e0bf      	b.n	8005474 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005302:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691a      	ldr	r2, [r3, #16]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	b2d2      	uxtb	r2, r2
 8005310:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005320:	3b01      	subs	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532c:	b29b      	uxth	r3, r3
 800532e:	3b01      	subs	r3, #1
 8005330:	b29a      	uxth	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	2200      	movs	r2, #0
 800533e:	494f      	ldr	r1, [pc, #316]	; (800547c <HAL_I2C_Mem_Read+0x448>)
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 fa29 	bl	8005798 <I2C_WaitOnFlagUntilTimeout>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e091      	b.n	8005474 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800535e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691a      	ldr	r2, [r3, #16]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800537c:	3b01      	subs	r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005388:	b29b      	uxth	r3, r3
 800538a:	3b01      	subs	r3, #1
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	691a      	ldr	r2, [r3, #16]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	b2d2      	uxtb	r2, r2
 800539e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	3b01      	subs	r3, #1
 80053be:	b29a      	uxth	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053c4:	e042      	b.n	800544c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 fb3c 	bl	8005a48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e04c      	b.n	8005474 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005402:	b29b      	uxth	r3, r3
 8005404:	3b01      	subs	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b04      	cmp	r3, #4
 8005418:	d118      	bne.n	800544c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005436:	3b01      	subs	r3, #1
 8005438:	b29a      	uxth	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005442:	b29b      	uxth	r3, r3
 8005444:	3b01      	subs	r3, #1
 8005446:	b29a      	uxth	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005450:	2b00      	cmp	r3, #0
 8005452:	f47f aec2 	bne.w	80051da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2220      	movs	r2, #32
 800545a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	e000      	b.n	8005474 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005472:	2302      	movs	r3, #2
  }
}
 8005474:	4618      	mov	r0, r3
 8005476:	3728      	adds	r7, #40	; 0x28
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	00010004 	.word	0x00010004

08005480 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800548e:	b2db      	uxtb	r3, r3
}
 8005490:	4618      	mov	r0, r3
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b088      	sub	sp, #32
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	4608      	mov	r0, r1
 80054a6:	4611      	mov	r1, r2
 80054a8:	461a      	mov	r2, r3
 80054aa:	4603      	mov	r3, r0
 80054ac:	817b      	strh	r3, [r7, #10]
 80054ae:	460b      	mov	r3, r1
 80054b0:	813b      	strh	r3, [r7, #8]
 80054b2:	4613      	mov	r3, r2
 80054b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 f960 	bl	8005798 <I2C_WaitOnFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00d      	beq.n	80054fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ec:	d103      	bne.n	80054f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e05f      	b.n	80055ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054fa:	897b      	ldrh	r3, [r7, #10]
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	461a      	mov	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005508:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	6a3a      	ldr	r2, [r7, #32]
 800550e:	492d      	ldr	r1, [pc, #180]	; (80055c4 <I2C_RequestMemoryWrite+0x128>)
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 f998 	bl	8005846 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e04c      	b.n	80055ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005520:	2300      	movs	r3, #0
 8005522:	617b      	str	r3, [r7, #20]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005538:	6a39      	ldr	r1, [r7, #32]
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 fa02 	bl	8005944 <I2C_WaitOnTXEFlagUntilTimeout>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00d      	beq.n	8005562 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	2b04      	cmp	r3, #4
 800554c:	d107      	bne.n	800555e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800555c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e02b      	b.n	80055ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005562:	88fb      	ldrh	r3, [r7, #6]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d105      	bne.n	8005574 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005568:	893b      	ldrh	r3, [r7, #8]
 800556a:	b2da      	uxtb	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	611a      	str	r2, [r3, #16]
 8005572:	e021      	b.n	80055b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005574:	893b      	ldrh	r3, [r7, #8]
 8005576:	0a1b      	lsrs	r3, r3, #8
 8005578:	b29b      	uxth	r3, r3
 800557a:	b2da      	uxtb	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005584:	6a39      	ldr	r1, [r7, #32]
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 f9dc 	bl	8005944 <I2C_WaitOnTXEFlagUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00d      	beq.n	80055ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	2b04      	cmp	r3, #4
 8005598:	d107      	bne.n	80055aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e005      	b.n	80055ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055ae:	893b      	ldrh	r3, [r7, #8]
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3718      	adds	r7, #24
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	00010002 	.word	0x00010002

080055c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b088      	sub	sp, #32
 80055cc:	af02      	add	r7, sp, #8
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	4608      	mov	r0, r1
 80055d2:	4611      	mov	r1, r2
 80055d4:	461a      	mov	r2, r3
 80055d6:	4603      	mov	r3, r0
 80055d8:	817b      	strh	r3, [r7, #10]
 80055da:	460b      	mov	r3, r1
 80055dc:	813b      	strh	r3, [r7, #8]
 80055de:	4613      	mov	r3, r2
 80055e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005600:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	2200      	movs	r2, #0
 800560a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 f8c2 	bl	8005798 <I2C_WaitOnFlagUntilTimeout>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00d      	beq.n	8005636 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005628:	d103      	bne.n	8005632 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005630:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e0aa      	b.n	800578c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005636:	897b      	ldrh	r3, [r7, #10]
 8005638:	b2db      	uxtb	r3, r3
 800563a:	461a      	mov	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005644:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	6a3a      	ldr	r2, [r7, #32]
 800564a:	4952      	ldr	r1, [pc, #328]	; (8005794 <I2C_RequestMemoryRead+0x1cc>)
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 f8fa 	bl	8005846 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e097      	b.n	800578c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800565c:	2300      	movs	r3, #0
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	617b      	str	r3, [r7, #20]
 8005670:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005674:	6a39      	ldr	r1, [r7, #32]
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 f964 	bl	8005944 <I2C_WaitOnTXEFlagUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00d      	beq.n	800569e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	2b04      	cmp	r3, #4
 8005688:	d107      	bne.n	800569a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005698:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e076      	b.n	800578c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800569e:	88fb      	ldrh	r3, [r7, #6]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d105      	bne.n	80056b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056a4:	893b      	ldrh	r3, [r7, #8]
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	611a      	str	r2, [r3, #16]
 80056ae:	e021      	b.n	80056f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80056b0:	893b      	ldrh	r3, [r7, #8]
 80056b2:	0a1b      	lsrs	r3, r3, #8
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c0:	6a39      	ldr	r1, [r7, #32]
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 f93e 	bl	8005944 <I2C_WaitOnTXEFlagUntilTimeout>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00d      	beq.n	80056ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	2b04      	cmp	r3, #4
 80056d4:	d107      	bne.n	80056e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e050      	b.n	800578c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056ea:	893b      	ldrh	r3, [r7, #8]
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f6:	6a39      	ldr	r1, [r7, #32]
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f923 	bl	8005944 <I2C_WaitOnTXEFlagUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00d      	beq.n	8005720 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005708:	2b04      	cmp	r3, #4
 800570a:	d107      	bne.n	800571c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800571a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e035      	b.n	800578c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800572e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	2200      	movs	r2, #0
 8005738:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 f82b 	bl	8005798 <I2C_WaitOnFlagUntilTimeout>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00d      	beq.n	8005764 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005756:	d103      	bne.n	8005760 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800575e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e013      	b.n	800578c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005764:	897b      	ldrh	r3, [r7, #10]
 8005766:	b2db      	uxtb	r3, r3
 8005768:	f043 0301 	orr.w	r3, r3, #1
 800576c:	b2da      	uxtb	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	6a3a      	ldr	r2, [r7, #32]
 8005778:	4906      	ldr	r1, [pc, #24]	; (8005794 <I2C_RequestMemoryRead+0x1cc>)
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 f863 	bl	8005846 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e000      	b.n	800578c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3718      	adds	r7, #24
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	00010002 	.word	0x00010002

08005798 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	603b      	str	r3, [r7, #0]
 80057a4:	4613      	mov	r3, r2
 80057a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057a8:	e025      	b.n	80057f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b0:	d021      	beq.n	80057f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057b2:	f7fc ff35 	bl	8002620 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d302      	bcc.n	80057c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d116      	bne.n	80057f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	f043 0220 	orr.w	r2, r3, #32
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e023      	b.n	800583e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	0c1b      	lsrs	r3, r3, #16
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d10d      	bne.n	800581c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	43da      	mvns	r2, r3
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	4013      	ands	r3, r2
 800580c:	b29b      	uxth	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	bf0c      	ite	eq
 8005812:	2301      	moveq	r3, #1
 8005814:	2300      	movne	r3, #0
 8005816:	b2db      	uxtb	r3, r3
 8005818:	461a      	mov	r2, r3
 800581a:	e00c      	b.n	8005836 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	43da      	mvns	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4013      	ands	r3, r2
 8005828:	b29b      	uxth	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	bf0c      	ite	eq
 800582e:	2301      	moveq	r3, #1
 8005830:	2300      	movne	r3, #0
 8005832:	b2db      	uxtb	r3, r3
 8005834:	461a      	mov	r2, r3
 8005836:	79fb      	ldrb	r3, [r7, #7]
 8005838:	429a      	cmp	r2, r3
 800583a:	d0b6      	beq.n	80057aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b084      	sub	sp, #16
 800584a:	af00      	add	r7, sp, #0
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	607a      	str	r2, [r7, #4]
 8005852:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005854:	e051      	b.n	80058fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005864:	d123      	bne.n	80058ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005874:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800587e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2220      	movs	r2, #32
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	f043 0204 	orr.w	r2, r3, #4
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e046      	b.n	800593c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b4:	d021      	beq.n	80058fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058b6:	f7fc feb3 	bl	8002620 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d302      	bcc.n	80058cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d116      	bne.n	80058fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2220      	movs	r2, #32
 80058d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	f043 0220 	orr.w	r2, r3, #32
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e020      	b.n	800593c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	0c1b      	lsrs	r3, r3, #16
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b01      	cmp	r3, #1
 8005902:	d10c      	bne.n	800591e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	43da      	mvns	r2, r3
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4013      	ands	r3, r2
 8005910:	b29b      	uxth	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	bf14      	ite	ne
 8005916:	2301      	movne	r3, #1
 8005918:	2300      	moveq	r3, #0
 800591a:	b2db      	uxtb	r3, r3
 800591c:	e00b      	b.n	8005936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	43da      	mvns	r2, r3
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	4013      	ands	r3, r2
 800592a:	b29b      	uxth	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	bf14      	ite	ne
 8005930:	2301      	movne	r3, #1
 8005932:	2300      	moveq	r3, #0
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d18d      	bne.n	8005856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005950:	e02d      	b.n	80059ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f000 f8ce 	bl	8005af4 <I2C_IsAcknowledgeFailed>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e02d      	b.n	80059be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005968:	d021      	beq.n	80059ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800596a:	f7fc fe59 	bl	8002620 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	429a      	cmp	r2, r3
 8005978:	d302      	bcc.n	8005980 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d116      	bne.n	80059ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2220      	movs	r2, #32
 800598a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	f043 0220 	orr.w	r2, r3, #32
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e007      	b.n	80059be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b8:	2b80      	cmp	r3, #128	; 0x80
 80059ba:	d1ca      	bne.n	8005952 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b084      	sub	sp, #16
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	60f8      	str	r0, [r7, #12]
 80059ce:	60b9      	str	r1, [r7, #8]
 80059d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059d2:	e02d      	b.n	8005a30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 f88d 	bl	8005af4 <I2C_IsAcknowledgeFailed>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e02d      	b.n	8005a40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ea:	d021      	beq.n	8005a30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ec:	f7fc fe18 	bl	8002620 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d302      	bcc.n	8005a02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d116      	bne.n	8005a30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1c:	f043 0220 	orr.w	r2, r3, #32
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e007      	b.n	8005a40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	f003 0304 	and.w	r3, r3, #4
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d1ca      	bne.n	80059d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a54:	e042      	b.n	8005adc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	f003 0310 	and.w	r3, r3, #16
 8005a60:	2b10      	cmp	r3, #16
 8005a62:	d119      	bne.n	8005a98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0210 	mvn.w	r2, #16
 8005a6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e029      	b.n	8005aec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a98:	f7fc fdc2 	bl	8002620 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d302      	bcc.n	8005aae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d116      	bne.n	8005adc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac8:	f043 0220 	orr.w	r2, r3, #32
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e007      	b.n	8005aec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae6:	2b40      	cmp	r3, #64	; 0x40
 8005ae8:	d1b5      	bne.n	8005a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b0a:	d11b      	bne.n	8005b44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	f043 0204 	orr.w	r2, r3, #4
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e000      	b.n	8005b46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
	...

08005b54 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b088      	sub	sp, #32
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e128      	b.n	8005db8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d109      	bne.n	8005b86 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a90      	ldr	r2, [pc, #576]	; (8005dc0 <HAL_I2S_Init+0x26c>)
 8005b7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7fb fcd9 	bl	8001538 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2202      	movs	r2, #2
 8005b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	6812      	ldr	r2, [r2, #0]
 8005b98:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005b9c:	f023 030f 	bic.w	r3, r3, #15
 8005ba0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d060      	beq.n	8005c74 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d102      	bne.n	8005bc0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005bba:	2310      	movs	r3, #16
 8005bbc:	617b      	str	r3, [r7, #20]
 8005bbe:	e001      	b.n	8005bc4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005bc0:	2320      	movs	r3, #32
 8005bc2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	2b20      	cmp	r3, #32
 8005bca:	d802      	bhi.n	8005bd2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005bd2:	2001      	movs	r0, #1
 8005bd4:	f001 f9be 	bl	8006f54 <HAL_RCCEx_GetPeriphCLKFreq>
 8005bd8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005be2:	d125      	bne.n	8005c30 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d010      	beq.n	8005c0e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	461a      	mov	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c08:	3305      	adds	r3, #5
 8005c0a:	613b      	str	r3, [r7, #16]
 8005c0c:	e01f      	b.n	8005c4e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	00db      	lsls	r3, r3, #3
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c18:	4613      	mov	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	461a      	mov	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2a:	3305      	adds	r3, #5
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	e00e      	b.n	8005c4e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c38:	4613      	mov	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	461a      	mov	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4a:	3305      	adds	r3, #5
 8005c4c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	4a5c      	ldr	r2, [pc, #368]	; (8005dc4 <HAL_I2S_Init+0x270>)
 8005c52:	fba2 2303 	umull	r2, r3, r2, r3
 8005c56:	08db      	lsrs	r3, r3, #3
 8005c58:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	085b      	lsrs	r3, r3, #1
 8005c6a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	021b      	lsls	r3, r3, #8
 8005c70:	61bb      	str	r3, [r7, #24]
 8005c72:	e003      	b.n	8005c7c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005c74:	2302      	movs	r3, #2
 8005c76:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d902      	bls.n	8005c88 <HAL_I2S_Init+0x134>
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	2bff      	cmp	r3, #255	; 0xff
 8005c86:	d907      	bls.n	8005c98 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8c:	f043 0210 	orr.w	r2, r3, #16
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e08f      	b.n	8005db8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691a      	ldr	r2, [r3, #16]
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	ea42 0103 	orr.w	r1, r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69fa      	ldr	r2, [r7, #28]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005cb6:	f023 030f 	bic.w	r3, r3, #15
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6851      	ldr	r1, [r2, #4]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	6892      	ldr	r2, [r2, #8]
 8005cc2:	4311      	orrs	r1, r2
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	68d2      	ldr	r2, [r2, #12]
 8005cc8:	4311      	orrs	r1, r2
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	6992      	ldr	r2, [r2, #24]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cda:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d161      	bne.n	8005da8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a38      	ldr	r2, [pc, #224]	; (8005dc8 <HAL_I2S_Init+0x274>)
 8005ce8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a37      	ldr	r2, [pc, #220]	; (8005dcc <HAL_I2S_Init+0x278>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d101      	bne.n	8005cf8 <HAL_I2S_Init+0x1a4>
 8005cf4:	4b36      	ldr	r3, [pc, #216]	; (8005dd0 <HAL_I2S_Init+0x27c>)
 8005cf6:	e001      	b.n	8005cfc <HAL_I2S_Init+0x1a8>
 8005cf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	6812      	ldr	r2, [r2, #0]
 8005d02:	4932      	ldr	r1, [pc, #200]	; (8005dcc <HAL_I2S_Init+0x278>)
 8005d04:	428a      	cmp	r2, r1
 8005d06:	d101      	bne.n	8005d0c <HAL_I2S_Init+0x1b8>
 8005d08:	4a31      	ldr	r2, [pc, #196]	; (8005dd0 <HAL_I2S_Init+0x27c>)
 8005d0a:	e001      	b.n	8005d10 <HAL_I2S_Init+0x1bc>
 8005d0c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005d10:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005d14:	f023 030f 	bic.w	r3, r3, #15
 8005d18:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a2b      	ldr	r2, [pc, #172]	; (8005dcc <HAL_I2S_Init+0x278>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d101      	bne.n	8005d28 <HAL_I2S_Init+0x1d4>
 8005d24:	4b2a      	ldr	r3, [pc, #168]	; (8005dd0 <HAL_I2S_Init+0x27c>)
 8005d26:	e001      	b.n	8005d2c <HAL_I2S_Init+0x1d8>
 8005d28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a25      	ldr	r2, [pc, #148]	; (8005dcc <HAL_I2S_Init+0x278>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d101      	bne.n	8005d3e <HAL_I2S_Init+0x1ea>
 8005d3a:	4b25      	ldr	r3, [pc, #148]	; (8005dd0 <HAL_I2S_Init+0x27c>)
 8005d3c:	e001      	b.n	8005d42 <HAL_I2S_Init+0x1ee>
 8005d3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d4e:	d003      	beq.n	8005d58 <HAL_I2S_Init+0x204>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d103      	bne.n	8005d60 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005d58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d5c:	613b      	str	r3, [r7, #16]
 8005d5e:	e001      	b.n	8005d64 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005d60:	2300      	movs	r3, #0
 8005d62:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005d82:	4313      	orrs	r3, r2
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	897b      	ldrh	r3, [r7, #10]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d90:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a0d      	ldr	r2, [pc, #52]	; (8005dcc <HAL_I2S_Init+0x278>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d101      	bne.n	8005da0 <HAL_I2S_Init+0x24c>
 8005d9c:	4b0c      	ldr	r3, [pc, #48]	; (8005dd0 <HAL_I2S_Init+0x27c>)
 8005d9e:	e001      	b.n	8005da4 <HAL_I2S_Init+0x250>
 8005da0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005da4:	897a      	ldrh	r2, [r7, #10]
 8005da6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3720      	adds	r7, #32
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	08005ea3 	.word	0x08005ea3
 8005dc4:	cccccccd 	.word	0xcccccccd
 8005dc8:	08005fb9 	.word	0x08005fb9
 8005dcc:	40003800 	.word	0x40003800
 8005dd0:	40003400 	.word	0x40003400

08005dd4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	881a      	ldrh	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	1c9a      	adds	r2, r3, #2
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10e      	bne.n	8005e3c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e2c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7fa ffa6 	bl	8000d88 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005e3c:	bf00      	nop
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e56:	b292      	uxth	r2, r2
 8005e58:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5e:	1c9a      	adds	r2, r3, #2
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10e      	bne.n	8005e9a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e8a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff ff9d 	bl	8005dd4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005e9a:	bf00      	nop
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b086      	sub	sp, #24
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	d13a      	bne.n	8005f34 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d109      	bne.n	8005edc <I2S_IRQHandler+0x3a>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed2:	2b40      	cmp	r3, #64	; 0x40
 8005ed4:	d102      	bne.n	8005edc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7ff ffb4 	bl	8005e44 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee2:	2b40      	cmp	r3, #64	; 0x40
 8005ee4:	d126      	bne.n	8005f34 <I2S_IRQHandler+0x92>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f003 0320 	and.w	r3, r3, #32
 8005ef0:	2b20      	cmp	r3, #32
 8005ef2:	d11f      	bne.n	8005f34 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f02:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005f04:	2300      	movs	r3, #0
 8005f06:	613b      	str	r3, [r7, #16]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	613b      	str	r3, [r7, #16]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	613b      	str	r3, [r7, #16]
 8005f18:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f26:	f043 0202 	orr.w	r2, r3, #2
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7fa ff44 	bl	8000dbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d136      	bne.n	8005fae <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d109      	bne.n	8005f5e <I2S_IRQHandler+0xbc>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f54:	2b80      	cmp	r3, #128	; 0x80
 8005f56:	d102      	bne.n	8005f5e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7ff ff45 	bl	8005de8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f003 0308 	and.w	r3, r3, #8
 8005f64:	2b08      	cmp	r3, #8
 8005f66:	d122      	bne.n	8005fae <I2S_IRQHandler+0x10c>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f003 0320 	and.w	r3, r3, #32
 8005f72:	2b20      	cmp	r3, #32
 8005f74:	d11b      	bne.n	8005fae <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f84:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	60fb      	str	r3, [r7, #12]
 8005f92:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa0:	f043 0204 	orr.w	r2, r3, #4
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7fa ff07 	bl	8000dbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fae:	bf00      	nop
 8005fb0:	3718      	adds	r7, #24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
	...

08005fb8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b088      	sub	sp, #32
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a92      	ldr	r2, [pc, #584]	; (8006218 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d101      	bne.n	8005fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005fd2:	4b92      	ldr	r3, [pc, #584]	; (800621c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fd4:	e001      	b.n	8005fda <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005fd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a8b      	ldr	r2, [pc, #556]	; (8006218 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d101      	bne.n	8005ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005ff0:	4b8a      	ldr	r3, [pc, #552]	; (800621c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ff2:	e001      	b.n	8005ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005ff4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006004:	d004      	beq.n	8006010 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	f040 8099 	bne.w	8006142 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b02      	cmp	r3, #2
 8006018:	d107      	bne.n	800602a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f925 	bl	8006274 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b01      	cmp	r3, #1
 8006032:	d107      	bne.n	8006044 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f9c8 	bl	80063d4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604a:	2b40      	cmp	r3, #64	; 0x40
 800604c:	d13a      	bne.n	80060c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f003 0320 	and.w	r3, r3, #32
 8006054:	2b00      	cmp	r3, #0
 8006056:	d035      	beq.n	80060c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a6e      	ldr	r2, [pc, #440]	; (8006218 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d101      	bne.n	8006066 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006062:	4b6e      	ldr	r3, [pc, #440]	; (800621c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006064:	e001      	b.n	800606a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006066:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4969      	ldr	r1, [pc, #420]	; (8006218 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006072:	428b      	cmp	r3, r1
 8006074:	d101      	bne.n	800607a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006076:	4b69      	ldr	r3, [pc, #420]	; (800621c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006078:	e001      	b.n	800607e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800607a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800607e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006082:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006092:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006094:	2300      	movs	r3, #0
 8006096:	60fb      	str	r3, [r7, #12]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	60fb      	str	r3, [r7, #12]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	60fb      	str	r3, [r7, #12]
 80060a8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b6:	f043 0202 	orr.w	r2, r3, #2
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7fa fe7c 	bl	8000dbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	f003 0308 	and.w	r3, r3, #8
 80060ca:	2b08      	cmp	r3, #8
 80060cc:	f040 80c3 	bne.w	8006256 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f003 0320 	and.w	r3, r3, #32
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 80bd 	beq.w	8006256 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060ea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a49      	ldr	r2, [pc, #292]	; (8006218 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d101      	bne.n	80060fa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80060f6:	4b49      	ldr	r3, [pc, #292]	; (800621c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060f8:	e001      	b.n	80060fe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80060fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4944      	ldr	r1, [pc, #272]	; (8006218 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006106:	428b      	cmp	r3, r1
 8006108:	d101      	bne.n	800610e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800610a:	4b44      	ldr	r3, [pc, #272]	; (800621c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800610c:	e001      	b.n	8006112 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800610e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006112:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006116:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006118:	2300      	movs	r3, #0
 800611a:	60bb      	str	r3, [r7, #8]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	60bb      	str	r3, [r7, #8]
 8006124:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006132:	f043 0204 	orr.w	r2, r3, #4
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7fa fe3e 	bl	8000dbc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006140:	e089      	b.n	8006256 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b02      	cmp	r3, #2
 800614a:	d107      	bne.n	800615c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f8be 	bl	80062d8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b01      	cmp	r3, #1
 8006164:	d107      	bne.n	8006176 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616c:	2b00      	cmp	r3, #0
 800616e:	d002      	beq.n	8006176 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f8fd 	bl	8006370 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617c:	2b40      	cmp	r3, #64	; 0x40
 800617e:	d12f      	bne.n	80061e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b00      	cmp	r3, #0
 8006188:	d02a      	beq.n	80061e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006198:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a1e      	ldr	r2, [pc, #120]	; (8006218 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d101      	bne.n	80061a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80061a4:	4b1d      	ldr	r3, [pc, #116]	; (800621c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80061a6:	e001      	b.n	80061ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80061a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4919      	ldr	r1, [pc, #100]	; (8006218 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80061b4:	428b      	cmp	r3, r1
 80061b6:	d101      	bne.n	80061bc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80061b8:	4b18      	ldr	r3, [pc, #96]	; (800621c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80061ba:	e001      	b.n	80061c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80061bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061c4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d2:	f043 0202 	orr.w	r2, r3, #2
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7fa fdee 	bl	8000dbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	f003 0308 	and.w	r3, r3, #8
 80061e6:	2b08      	cmp	r3, #8
 80061e8:	d136      	bne.n	8006258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	f003 0320 	and.w	r3, r3, #32
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d031      	beq.n	8006258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a07      	ldr	r2, [pc, #28]	; (8006218 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d101      	bne.n	8006202 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80061fe:	4b07      	ldr	r3, [pc, #28]	; (800621c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006200:	e001      	b.n	8006206 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006202:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4902      	ldr	r1, [pc, #8]	; (8006218 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800620e:	428b      	cmp	r3, r1
 8006210:	d106      	bne.n	8006220 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006212:	4b02      	ldr	r3, [pc, #8]	; (800621c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006214:	e006      	b.n	8006224 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006216:	bf00      	nop
 8006218:	40003800 	.word	0x40003800
 800621c:	40003400 	.word	0x40003400
 8006220:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006224:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006228:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006238:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006246:	f043 0204 	orr.w	r2, r3, #4
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fa fdb4 	bl	8000dbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006254:	e000      	b.n	8006258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006256:	bf00      	nop
}
 8006258:	bf00      	nop
 800625a:	3720      	adds	r7, #32
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	1c99      	adds	r1, r3, #2
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	6251      	str	r1, [r2, #36]	; 0x24
 8006286:	881a      	ldrh	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006292:	b29b      	uxth	r3, r3
 8006294:	3b01      	subs	r3, #1
 8006296:	b29a      	uxth	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d113      	bne.n	80062ce <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d106      	bne.n	80062ce <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7ff ffc9 	bl	8006260 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80062ce:	bf00      	nop
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
	...

080062d8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	1c99      	adds	r1, r3, #2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6251      	str	r1, [r2, #36]	; 0x24
 80062ea:	8819      	ldrh	r1, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a1d      	ldr	r2, [pc, #116]	; (8006368 <I2SEx_TxISR_I2SExt+0x90>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d101      	bne.n	80062fa <I2SEx_TxISR_I2SExt+0x22>
 80062f6:	4b1d      	ldr	r3, [pc, #116]	; (800636c <I2SEx_TxISR_I2SExt+0x94>)
 80062f8:	e001      	b.n	80062fe <I2SEx_TxISR_I2SExt+0x26>
 80062fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062fe:	460a      	mov	r2, r1
 8006300:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006306:	b29b      	uxth	r3, r3
 8006308:	3b01      	subs	r3, #1
 800630a:	b29a      	uxth	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006314:	b29b      	uxth	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d121      	bne.n	800635e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a12      	ldr	r2, [pc, #72]	; (8006368 <I2SEx_TxISR_I2SExt+0x90>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d101      	bne.n	8006328 <I2SEx_TxISR_I2SExt+0x50>
 8006324:	4b11      	ldr	r3, [pc, #68]	; (800636c <I2SEx_TxISR_I2SExt+0x94>)
 8006326:	e001      	b.n	800632c <I2SEx_TxISR_I2SExt+0x54>
 8006328:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	490d      	ldr	r1, [pc, #52]	; (8006368 <I2SEx_TxISR_I2SExt+0x90>)
 8006334:	428b      	cmp	r3, r1
 8006336:	d101      	bne.n	800633c <I2SEx_TxISR_I2SExt+0x64>
 8006338:	4b0c      	ldr	r3, [pc, #48]	; (800636c <I2SEx_TxISR_I2SExt+0x94>)
 800633a:	e001      	b.n	8006340 <I2SEx_TxISR_I2SExt+0x68>
 800633c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006340:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006344:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800634a:	b29b      	uxth	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d106      	bne.n	800635e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7ff ff81 	bl	8006260 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800635e:	bf00      	nop
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	40003800 	.word	0x40003800
 800636c:	40003400 	.word	0x40003400

08006370 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68d8      	ldr	r0, [r3, #12]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006382:	1c99      	adds	r1, r3, #2
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006388:	b282      	uxth	r2, r0
 800638a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006390:	b29b      	uxth	r3, r3
 8006392:	3b01      	subs	r3, #1
 8006394:	b29a      	uxth	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800639e:	b29b      	uxth	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d113      	bne.n	80063cc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063b2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d106      	bne.n	80063cc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7ff ff4a 	bl	8006260 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80063cc:	bf00      	nop
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a20      	ldr	r2, [pc, #128]	; (8006464 <I2SEx_RxISR_I2SExt+0x90>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d101      	bne.n	80063ea <I2SEx_RxISR_I2SExt+0x16>
 80063e6:	4b20      	ldr	r3, [pc, #128]	; (8006468 <I2SEx_RxISR_I2SExt+0x94>)
 80063e8:	e001      	b.n	80063ee <I2SEx_RxISR_I2SExt+0x1a>
 80063ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063ee:	68d8      	ldr	r0, [r3, #12]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	1c99      	adds	r1, r3, #2
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80063fa:	b282      	uxth	r2, r0
 80063fc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006402:	b29b      	uxth	r3, r3
 8006404:	3b01      	subs	r3, #1
 8006406:	b29a      	uxth	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006410:	b29b      	uxth	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d121      	bne.n	800645a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a12      	ldr	r2, [pc, #72]	; (8006464 <I2SEx_RxISR_I2SExt+0x90>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d101      	bne.n	8006424 <I2SEx_RxISR_I2SExt+0x50>
 8006420:	4b11      	ldr	r3, [pc, #68]	; (8006468 <I2SEx_RxISR_I2SExt+0x94>)
 8006422:	e001      	b.n	8006428 <I2SEx_RxISR_I2SExt+0x54>
 8006424:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	490d      	ldr	r1, [pc, #52]	; (8006464 <I2SEx_RxISR_I2SExt+0x90>)
 8006430:	428b      	cmp	r3, r1
 8006432:	d101      	bne.n	8006438 <I2SEx_RxISR_I2SExt+0x64>
 8006434:	4b0c      	ldr	r3, [pc, #48]	; (8006468 <I2SEx_RxISR_I2SExt+0x94>)
 8006436:	e001      	b.n	800643c <I2SEx_RxISR_I2SExt+0x68>
 8006438:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800643c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006440:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006446:	b29b      	uxth	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d106      	bne.n	800645a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7ff ff03 	bl	8006260 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800645a:	bf00      	nop
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	40003800 	.word	0x40003800
 8006468:	40003400 	.word	0x40003400

0800646c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e267      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d075      	beq.n	8006576 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800648a:	4b88      	ldr	r3, [pc, #544]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f003 030c 	and.w	r3, r3, #12
 8006492:	2b04      	cmp	r3, #4
 8006494:	d00c      	beq.n	80064b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006496:	4b85      	ldr	r3, [pc, #532]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800649e:	2b08      	cmp	r3, #8
 80064a0:	d112      	bne.n	80064c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064a2:	4b82      	ldr	r3, [pc, #520]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064ae:	d10b      	bne.n	80064c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064b0:	4b7e      	ldr	r3, [pc, #504]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d05b      	beq.n	8006574 <HAL_RCC_OscConfig+0x108>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d157      	bne.n	8006574 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e242      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064d0:	d106      	bne.n	80064e0 <HAL_RCC_OscConfig+0x74>
 80064d2:	4b76      	ldr	r3, [pc, #472]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a75      	ldr	r2, [pc, #468]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 80064d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	e01d      	b.n	800651c <HAL_RCC_OscConfig+0xb0>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064e8:	d10c      	bne.n	8006504 <HAL_RCC_OscConfig+0x98>
 80064ea:	4b70      	ldr	r3, [pc, #448]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a6f      	ldr	r2, [pc, #444]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 80064f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064f4:	6013      	str	r3, [r2, #0]
 80064f6:	4b6d      	ldr	r3, [pc, #436]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a6c      	ldr	r2, [pc, #432]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 80064fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006500:	6013      	str	r3, [r2, #0]
 8006502:	e00b      	b.n	800651c <HAL_RCC_OscConfig+0xb0>
 8006504:	4b69      	ldr	r3, [pc, #420]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a68      	ldr	r2, [pc, #416]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 800650a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800650e:	6013      	str	r3, [r2, #0]
 8006510:	4b66      	ldr	r3, [pc, #408]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a65      	ldr	r2, [pc, #404]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 8006516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800651a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d013      	beq.n	800654c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006524:	f7fc f87c 	bl	8002620 <HAL_GetTick>
 8006528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800652a:	e008      	b.n	800653e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800652c:	f7fc f878 	bl	8002620 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b64      	cmp	r3, #100	; 0x64
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e207      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800653e:	4b5b      	ldr	r3, [pc, #364]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d0f0      	beq.n	800652c <HAL_RCC_OscConfig+0xc0>
 800654a:	e014      	b.n	8006576 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800654c:	f7fc f868 	bl	8002620 <HAL_GetTick>
 8006550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006552:	e008      	b.n	8006566 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006554:	f7fc f864 	bl	8002620 <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	2b64      	cmp	r3, #100	; 0x64
 8006560:	d901      	bls.n	8006566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e1f3      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006566:	4b51      	ldr	r3, [pc, #324]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1f0      	bne.n	8006554 <HAL_RCC_OscConfig+0xe8>
 8006572:	e000      	b.n	8006576 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d063      	beq.n	800664a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006582:	4b4a      	ldr	r3, [pc, #296]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f003 030c 	and.w	r3, r3, #12
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00b      	beq.n	80065a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800658e:	4b47      	ldr	r3, [pc, #284]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006596:	2b08      	cmp	r3, #8
 8006598:	d11c      	bne.n	80065d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800659a:	4b44      	ldr	r3, [pc, #272]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d116      	bne.n	80065d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065a6:	4b41      	ldr	r3, [pc, #260]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d005      	beq.n	80065be <HAL_RCC_OscConfig+0x152>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d001      	beq.n	80065be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e1c7      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065be:	4b3b      	ldr	r3, [pc, #236]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	4937      	ldr	r1, [pc, #220]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065d2:	e03a      	b.n	800664a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d020      	beq.n	800661e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065dc:	4b34      	ldr	r3, [pc, #208]	; (80066b0 <HAL_RCC_OscConfig+0x244>)
 80065de:	2201      	movs	r2, #1
 80065e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e2:	f7fc f81d 	bl	8002620 <HAL_GetTick>
 80065e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065e8:	e008      	b.n	80065fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065ea:	f7fc f819 	bl	8002620 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d901      	bls.n	80065fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e1a8      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065fc:	4b2b      	ldr	r3, [pc, #172]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0f0      	beq.n	80065ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006608:	4b28      	ldr	r3, [pc, #160]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	00db      	lsls	r3, r3, #3
 8006616:	4925      	ldr	r1, [pc, #148]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 8006618:	4313      	orrs	r3, r2
 800661a:	600b      	str	r3, [r1, #0]
 800661c:	e015      	b.n	800664a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800661e:	4b24      	ldr	r3, [pc, #144]	; (80066b0 <HAL_RCC_OscConfig+0x244>)
 8006620:	2200      	movs	r2, #0
 8006622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006624:	f7fb fffc 	bl	8002620 <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800662a:	e008      	b.n	800663e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800662c:	f7fb fff8 	bl	8002620 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b02      	cmp	r3, #2
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e187      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800663e:	4b1b      	ldr	r3, [pc, #108]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1f0      	bne.n	800662c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	2b00      	cmp	r3, #0
 8006654:	d036      	beq.n	80066c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d016      	beq.n	800668c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800665e:	4b15      	ldr	r3, [pc, #84]	; (80066b4 <HAL_RCC_OscConfig+0x248>)
 8006660:	2201      	movs	r2, #1
 8006662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006664:	f7fb ffdc 	bl	8002620 <HAL_GetTick>
 8006668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800666a:	e008      	b.n	800667e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800666c:	f7fb ffd8 	bl	8002620 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b02      	cmp	r3, #2
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e167      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800667e:	4b0b      	ldr	r3, [pc, #44]	; (80066ac <HAL_RCC_OscConfig+0x240>)
 8006680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d0f0      	beq.n	800666c <HAL_RCC_OscConfig+0x200>
 800668a:	e01b      	b.n	80066c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800668c:	4b09      	ldr	r3, [pc, #36]	; (80066b4 <HAL_RCC_OscConfig+0x248>)
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006692:	f7fb ffc5 	bl	8002620 <HAL_GetTick>
 8006696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006698:	e00e      	b.n	80066b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800669a:	f7fb ffc1 	bl	8002620 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d907      	bls.n	80066b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e150      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
 80066ac:	40023800 	.word	0x40023800
 80066b0:	42470000 	.word	0x42470000
 80066b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066b8:	4b88      	ldr	r3, [pc, #544]	; (80068dc <HAL_RCC_OscConfig+0x470>)
 80066ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066bc:	f003 0302 	and.w	r3, r3, #2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1ea      	bne.n	800669a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0304 	and.w	r3, r3, #4
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 8097 	beq.w	8006800 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066d2:	2300      	movs	r3, #0
 80066d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066d6:	4b81      	ldr	r3, [pc, #516]	; (80068dc <HAL_RCC_OscConfig+0x470>)
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10f      	bne.n	8006702 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066e2:	2300      	movs	r3, #0
 80066e4:	60bb      	str	r3, [r7, #8]
 80066e6:	4b7d      	ldr	r3, [pc, #500]	; (80068dc <HAL_RCC_OscConfig+0x470>)
 80066e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ea:	4a7c      	ldr	r2, [pc, #496]	; (80068dc <HAL_RCC_OscConfig+0x470>)
 80066ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066f0:	6413      	str	r3, [r2, #64]	; 0x40
 80066f2:	4b7a      	ldr	r3, [pc, #488]	; (80068dc <HAL_RCC_OscConfig+0x470>)
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066fa:	60bb      	str	r3, [r7, #8]
 80066fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066fe:	2301      	movs	r3, #1
 8006700:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006702:	4b77      	ldr	r3, [pc, #476]	; (80068e0 <HAL_RCC_OscConfig+0x474>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800670a:	2b00      	cmp	r3, #0
 800670c:	d118      	bne.n	8006740 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800670e:	4b74      	ldr	r3, [pc, #464]	; (80068e0 <HAL_RCC_OscConfig+0x474>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a73      	ldr	r2, [pc, #460]	; (80068e0 <HAL_RCC_OscConfig+0x474>)
 8006714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800671a:	f7fb ff81 	bl	8002620 <HAL_GetTick>
 800671e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006720:	e008      	b.n	8006734 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006722:	f7fb ff7d 	bl	8002620 <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	2b02      	cmp	r3, #2
 800672e:	d901      	bls.n	8006734 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e10c      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006734:	4b6a      	ldr	r3, [pc, #424]	; (80068e0 <HAL_RCC_OscConfig+0x474>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0f0      	beq.n	8006722 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d106      	bne.n	8006756 <HAL_RCC_OscConfig+0x2ea>
 8006748:	4b64      	ldr	r3, [pc, #400]	; (80068dc <HAL_RCC_OscConfig+0x470>)
 800674a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674c:	4a63      	ldr	r2, [pc, #396]	; (80068dc <HAL_RCC_OscConfig+0x470>)
 800674e:	f043 0301 	orr.w	r3, r3, #1
 8006752:	6713      	str	r3, [r2, #112]	; 0x70
 8006754:	e01c      	b.n	8006790 <HAL_RCC_OscConfig+0x324>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	2b05      	cmp	r3, #5
 800675c:	d10c      	bne.n	8006778 <HAL_RCC_OscConfig+0x30c>
 800675e:	4b5f      	ldr	r3, [pc, #380]	; (80068dc <HAL_RCC_OscConfig+0x470>)
 8006760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006762:	4a5e      	ldr	r2, [pc, #376]	; (80068dc <HAL_RCC_OscConfig+0x470>)
 8006764:	f043 0304 	orr.w	r3, r3, #4
 8006768:	6713      	str	r3, [r2, #112]	; 0x70
 800676a:	4b5c      	ldr	r3, [pc, #368]	; (80068dc <HAL_RCC_OscConfig+0x470>)
 800676c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676e:	4a5b      	ldr	r2, [pc, #364]	; (80068dc <HAL_RCC_OscConfig+0x470>)
 8006770:	f043 0301 	orr.w	r3, r3, #1
 8006774:	6713      	str	r3, [r2, #112]	; 0x70
 8006776:	e00b      	b.n	8006790 <HAL_RCC_OscConfig+0x324>
 8006778:	4b58      	ldr	r3, [pc, #352]	; (80068dc <HAL_RCC_OscConfig+0x470>)
 800677a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677c:	4a57      	ldr	r2, [pc, #348]	; (80068dc <HAL_RCC_OscConfig+0x470>)
 800677e:	f023 0301 	bic.w	r3, r3, #1
 8006782:	6713      	str	r3, [r2, #112]	; 0x70
 8006784:	4b55      	ldr	r3, [pc, #340]	; (80068dc <HAL_RCC_OscConfig+0x470>)
 8006786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006788:	4a54      	ldr	r2, [pc, #336]	; (80068dc <HAL_RCC_OscConfig+0x470>)
 800678a:	f023 0304 	bic.w	r3, r3, #4
 800678e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d015      	beq.n	80067c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006798:	f7fb ff42 	bl	8002620 <HAL_GetTick>
 800679c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800679e:	e00a      	b.n	80067b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067a0:	f7fb ff3e 	bl	8002620 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d901      	bls.n	80067b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e0cb      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067b6:	4b49      	ldr	r3, [pc, #292]	; (80068dc <HAL_RCC_OscConfig+0x470>)
 80067b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d0ee      	beq.n	80067a0 <HAL_RCC_OscConfig+0x334>
 80067c2:	e014      	b.n	80067ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067c4:	f7fb ff2c 	bl	8002620 <HAL_GetTick>
 80067c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067ca:	e00a      	b.n	80067e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067cc:	f7fb ff28 	bl	8002620 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067da:	4293      	cmp	r3, r2
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e0b5      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067e2:	4b3e      	ldr	r3, [pc, #248]	; (80068dc <HAL_RCC_OscConfig+0x470>)
 80067e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1ee      	bne.n	80067cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067ee:	7dfb      	ldrb	r3, [r7, #23]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d105      	bne.n	8006800 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067f4:	4b39      	ldr	r3, [pc, #228]	; (80068dc <HAL_RCC_OscConfig+0x470>)
 80067f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f8:	4a38      	ldr	r2, [pc, #224]	; (80068dc <HAL_RCC_OscConfig+0x470>)
 80067fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 80a1 	beq.w	800694c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800680a:	4b34      	ldr	r3, [pc, #208]	; (80068dc <HAL_RCC_OscConfig+0x470>)
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f003 030c 	and.w	r3, r3, #12
 8006812:	2b08      	cmp	r3, #8
 8006814:	d05c      	beq.n	80068d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	2b02      	cmp	r3, #2
 800681c:	d141      	bne.n	80068a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800681e:	4b31      	ldr	r3, [pc, #196]	; (80068e4 <HAL_RCC_OscConfig+0x478>)
 8006820:	2200      	movs	r2, #0
 8006822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006824:	f7fb fefc 	bl	8002620 <HAL_GetTick>
 8006828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800682a:	e008      	b.n	800683e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800682c:	f7fb fef8 	bl	8002620 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e087      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800683e:	4b27      	ldr	r3, [pc, #156]	; (80068dc <HAL_RCC_OscConfig+0x470>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1f0      	bne.n	800682c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	69da      	ldr	r2, [r3, #28]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	431a      	orrs	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	019b      	lsls	r3, r3, #6
 800685a:	431a      	orrs	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006860:	085b      	lsrs	r3, r3, #1
 8006862:	3b01      	subs	r3, #1
 8006864:	041b      	lsls	r3, r3, #16
 8006866:	431a      	orrs	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	061b      	lsls	r3, r3, #24
 800686e:	491b      	ldr	r1, [pc, #108]	; (80068dc <HAL_RCC_OscConfig+0x470>)
 8006870:	4313      	orrs	r3, r2
 8006872:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006874:	4b1b      	ldr	r3, [pc, #108]	; (80068e4 <HAL_RCC_OscConfig+0x478>)
 8006876:	2201      	movs	r2, #1
 8006878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800687a:	f7fb fed1 	bl	8002620 <HAL_GetTick>
 800687e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006880:	e008      	b.n	8006894 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006882:	f7fb fecd 	bl	8002620 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d901      	bls.n	8006894 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e05c      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006894:	4b11      	ldr	r3, [pc, #68]	; (80068dc <HAL_RCC_OscConfig+0x470>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d0f0      	beq.n	8006882 <HAL_RCC_OscConfig+0x416>
 80068a0:	e054      	b.n	800694c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068a2:	4b10      	ldr	r3, [pc, #64]	; (80068e4 <HAL_RCC_OscConfig+0x478>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a8:	f7fb feba 	bl	8002620 <HAL_GetTick>
 80068ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068ae:	e008      	b.n	80068c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068b0:	f7fb feb6 	bl	8002620 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d901      	bls.n	80068c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e045      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068c2:	4b06      	ldr	r3, [pc, #24]	; (80068dc <HAL_RCC_OscConfig+0x470>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1f0      	bne.n	80068b0 <HAL_RCC_OscConfig+0x444>
 80068ce:	e03d      	b.n	800694c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d107      	bne.n	80068e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e038      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
 80068dc:	40023800 	.word	0x40023800
 80068e0:	40007000 	.word	0x40007000
 80068e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80068e8:	4b1b      	ldr	r3, [pc, #108]	; (8006958 <HAL_RCC_OscConfig+0x4ec>)
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d028      	beq.n	8006948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006900:	429a      	cmp	r2, r3
 8006902:	d121      	bne.n	8006948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800690e:	429a      	cmp	r2, r3
 8006910:	d11a      	bne.n	8006948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006918:	4013      	ands	r3, r2
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800691e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006920:	4293      	cmp	r3, r2
 8006922:	d111      	bne.n	8006948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692e:	085b      	lsrs	r3, r3, #1
 8006930:	3b01      	subs	r3, #1
 8006932:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006934:	429a      	cmp	r2, r3
 8006936:	d107      	bne.n	8006948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006942:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006944:	429a      	cmp	r2, r3
 8006946:	d001      	beq.n	800694c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e000      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	40023800 	.word	0x40023800

0800695c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e0cc      	b.n	8006b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006970:	4b68      	ldr	r3, [pc, #416]	; (8006b14 <HAL_RCC_ClockConfig+0x1b8>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0307 	and.w	r3, r3, #7
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	429a      	cmp	r2, r3
 800697c:	d90c      	bls.n	8006998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800697e:	4b65      	ldr	r3, [pc, #404]	; (8006b14 <HAL_RCC_ClockConfig+0x1b8>)
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	b2d2      	uxtb	r2, r2
 8006984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006986:	4b63      	ldr	r3, [pc, #396]	; (8006b14 <HAL_RCC_ClockConfig+0x1b8>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	429a      	cmp	r2, r3
 8006992:	d001      	beq.n	8006998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e0b8      	b.n	8006b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0302 	and.w	r3, r3, #2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d020      	beq.n	80069e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d005      	beq.n	80069bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069b0:	4b59      	ldr	r3, [pc, #356]	; (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	4a58      	ldr	r2, [pc, #352]	; (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 80069b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80069ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0308 	and.w	r3, r3, #8
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d005      	beq.n	80069d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069c8:	4b53      	ldr	r3, [pc, #332]	; (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	4a52      	ldr	r2, [pc, #328]	; (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 80069ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80069d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069d4:	4b50      	ldr	r3, [pc, #320]	; (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	494d      	ldr	r1, [pc, #308]	; (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d044      	beq.n	8006a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d107      	bne.n	8006a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069fa:	4b47      	ldr	r3, [pc, #284]	; (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d119      	bne.n	8006a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e07f      	b.n	8006b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d003      	beq.n	8006a1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d107      	bne.n	8006a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a1a:	4b3f      	ldr	r3, [pc, #252]	; (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d109      	bne.n	8006a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e06f      	b.n	8006b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a2a:	4b3b      	ldr	r3, [pc, #236]	; (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e067      	b.n	8006b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a3a:	4b37      	ldr	r3, [pc, #220]	; (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f023 0203 	bic.w	r2, r3, #3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	4934      	ldr	r1, [pc, #208]	; (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a4c:	f7fb fde8 	bl	8002620 <HAL_GetTick>
 8006a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a52:	e00a      	b.n	8006a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a54:	f7fb fde4 	bl	8002620 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e04f      	b.n	8006b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a6a:	4b2b      	ldr	r3, [pc, #172]	; (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f003 020c 	and.w	r2, r3, #12
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d1eb      	bne.n	8006a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a7c:	4b25      	ldr	r3, [pc, #148]	; (8006b14 <HAL_RCC_ClockConfig+0x1b8>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0307 	and.w	r3, r3, #7
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d20c      	bcs.n	8006aa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a8a:	4b22      	ldr	r3, [pc, #136]	; (8006b14 <HAL_RCC_ClockConfig+0x1b8>)
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	b2d2      	uxtb	r2, r2
 8006a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a92:	4b20      	ldr	r3, [pc, #128]	; (8006b14 <HAL_RCC_ClockConfig+0x1b8>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0307 	and.w	r3, r3, #7
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d001      	beq.n	8006aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e032      	b.n	8006b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d008      	beq.n	8006ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ab0:	4b19      	ldr	r3, [pc, #100]	; (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	4916      	ldr	r1, [pc, #88]	; (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0308 	and.w	r3, r3, #8
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d009      	beq.n	8006ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ace:	4b12      	ldr	r3, [pc, #72]	; (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	00db      	lsls	r3, r3, #3
 8006adc:	490e      	ldr	r1, [pc, #56]	; (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ae2:	f000 f821 	bl	8006b28 <HAL_RCC_GetSysClockFreq>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	4b0b      	ldr	r3, [pc, #44]	; (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	091b      	lsrs	r3, r3, #4
 8006aee:	f003 030f 	and.w	r3, r3, #15
 8006af2:	490a      	ldr	r1, [pc, #40]	; (8006b1c <HAL_RCC_ClockConfig+0x1c0>)
 8006af4:	5ccb      	ldrb	r3, [r1, r3]
 8006af6:	fa22 f303 	lsr.w	r3, r2, r3
 8006afa:	4a09      	ldr	r2, [pc, #36]	; (8006b20 <HAL_RCC_ClockConfig+0x1c4>)
 8006afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006afe:	4b09      	ldr	r3, [pc, #36]	; (8006b24 <HAL_RCC_ClockConfig+0x1c8>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fb fd48 	bl	8002598 <HAL_InitTick>

  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	40023c00 	.word	0x40023c00
 8006b18:	40023800 	.word	0x40023800
 8006b1c:	0800acdc 	.word	0x0800acdc
 8006b20:	20000000 	.word	0x20000000
 8006b24:	20000070 	.word	0x20000070

08006b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b2c:	b094      	sub	sp, #80	; 0x50
 8006b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	647b      	str	r3, [r7, #68]	; 0x44
 8006b34:	2300      	movs	r3, #0
 8006b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b38:	2300      	movs	r3, #0
 8006b3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b40:	4b79      	ldr	r3, [pc, #484]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f003 030c 	and.w	r3, r3, #12
 8006b48:	2b08      	cmp	r3, #8
 8006b4a:	d00d      	beq.n	8006b68 <HAL_RCC_GetSysClockFreq+0x40>
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	f200 80e1 	bhi.w	8006d14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d002      	beq.n	8006b5c <HAL_RCC_GetSysClockFreq+0x34>
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	d003      	beq.n	8006b62 <HAL_RCC_GetSysClockFreq+0x3a>
 8006b5a:	e0db      	b.n	8006d14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b5c:	4b73      	ldr	r3, [pc, #460]	; (8006d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8006b5e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006b60:	e0db      	b.n	8006d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b62:	4b73      	ldr	r3, [pc, #460]	; (8006d30 <HAL_RCC_GetSysClockFreq+0x208>)
 8006b64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b66:	e0d8      	b.n	8006d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b68:	4b6f      	ldr	r3, [pc, #444]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b70:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b72:	4b6d      	ldr	r3, [pc, #436]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d063      	beq.n	8006c46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b7e:	4b6a      	ldr	r3, [pc, #424]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	099b      	lsrs	r3, r3, #6
 8006b84:	2200      	movs	r2, #0
 8006b86:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b90:	633b      	str	r3, [r7, #48]	; 0x30
 8006b92:	2300      	movs	r3, #0
 8006b94:	637b      	str	r3, [r7, #52]	; 0x34
 8006b96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006b9a:	4622      	mov	r2, r4
 8006b9c:	462b      	mov	r3, r5
 8006b9e:	f04f 0000 	mov.w	r0, #0
 8006ba2:	f04f 0100 	mov.w	r1, #0
 8006ba6:	0159      	lsls	r1, r3, #5
 8006ba8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006bac:	0150      	lsls	r0, r2, #5
 8006bae:	4602      	mov	r2, r0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	1a51      	subs	r1, r2, r1
 8006bb6:	6139      	str	r1, [r7, #16]
 8006bb8:	4629      	mov	r1, r5
 8006bba:	eb63 0301 	sbc.w	r3, r3, r1
 8006bbe:	617b      	str	r3, [r7, #20]
 8006bc0:	f04f 0200 	mov.w	r2, #0
 8006bc4:	f04f 0300 	mov.w	r3, #0
 8006bc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bcc:	4659      	mov	r1, fp
 8006bce:	018b      	lsls	r3, r1, #6
 8006bd0:	4651      	mov	r1, sl
 8006bd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006bd6:	4651      	mov	r1, sl
 8006bd8:	018a      	lsls	r2, r1, #6
 8006bda:	4651      	mov	r1, sl
 8006bdc:	ebb2 0801 	subs.w	r8, r2, r1
 8006be0:	4659      	mov	r1, fp
 8006be2:	eb63 0901 	sbc.w	r9, r3, r1
 8006be6:	f04f 0200 	mov.w	r2, #0
 8006bea:	f04f 0300 	mov.w	r3, #0
 8006bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bfa:	4690      	mov	r8, r2
 8006bfc:	4699      	mov	r9, r3
 8006bfe:	4623      	mov	r3, r4
 8006c00:	eb18 0303 	adds.w	r3, r8, r3
 8006c04:	60bb      	str	r3, [r7, #8]
 8006c06:	462b      	mov	r3, r5
 8006c08:	eb49 0303 	adc.w	r3, r9, r3
 8006c0c:	60fb      	str	r3, [r7, #12]
 8006c0e:	f04f 0200 	mov.w	r2, #0
 8006c12:	f04f 0300 	mov.w	r3, #0
 8006c16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	024b      	lsls	r3, r1, #9
 8006c1e:	4621      	mov	r1, r4
 8006c20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c24:	4621      	mov	r1, r4
 8006c26:	024a      	lsls	r2, r1, #9
 8006c28:	4610      	mov	r0, r2
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c2e:	2200      	movs	r2, #0
 8006c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c38:	f7f9 ff24 	bl	8000a84 <__aeabi_uldivmod>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4613      	mov	r3, r2
 8006c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c44:	e058      	b.n	8006cf8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c46:	4b38      	ldr	r3, [pc, #224]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	099b      	lsrs	r3, r3, #6
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	4618      	mov	r0, r3
 8006c50:	4611      	mov	r1, r2
 8006c52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c56:	623b      	str	r3, [r7, #32]
 8006c58:	2300      	movs	r3, #0
 8006c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006c60:	4642      	mov	r2, r8
 8006c62:	464b      	mov	r3, r9
 8006c64:	f04f 0000 	mov.w	r0, #0
 8006c68:	f04f 0100 	mov.w	r1, #0
 8006c6c:	0159      	lsls	r1, r3, #5
 8006c6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c72:	0150      	lsls	r0, r2, #5
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	4641      	mov	r1, r8
 8006c7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c7e:	4649      	mov	r1, r9
 8006c80:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c84:	f04f 0200 	mov.w	r2, #0
 8006c88:	f04f 0300 	mov.w	r3, #0
 8006c8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006c90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c98:	ebb2 040a 	subs.w	r4, r2, sl
 8006c9c:	eb63 050b 	sbc.w	r5, r3, fp
 8006ca0:	f04f 0200 	mov.w	r2, #0
 8006ca4:	f04f 0300 	mov.w	r3, #0
 8006ca8:	00eb      	lsls	r3, r5, #3
 8006caa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cae:	00e2      	lsls	r2, r4, #3
 8006cb0:	4614      	mov	r4, r2
 8006cb2:	461d      	mov	r5, r3
 8006cb4:	4643      	mov	r3, r8
 8006cb6:	18e3      	adds	r3, r4, r3
 8006cb8:	603b      	str	r3, [r7, #0]
 8006cba:	464b      	mov	r3, r9
 8006cbc:	eb45 0303 	adc.w	r3, r5, r3
 8006cc0:	607b      	str	r3, [r7, #4]
 8006cc2:	f04f 0200 	mov.w	r2, #0
 8006cc6:	f04f 0300 	mov.w	r3, #0
 8006cca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006cce:	4629      	mov	r1, r5
 8006cd0:	028b      	lsls	r3, r1, #10
 8006cd2:	4621      	mov	r1, r4
 8006cd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006cd8:	4621      	mov	r1, r4
 8006cda:	028a      	lsls	r2, r1, #10
 8006cdc:	4610      	mov	r0, r2
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	61bb      	str	r3, [r7, #24]
 8006ce6:	61fa      	str	r2, [r7, #28]
 8006ce8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cec:	f7f9 feca 	bl	8000a84 <__aeabi_uldivmod>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006cf8:	4b0b      	ldr	r3, [pc, #44]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	0c1b      	lsrs	r3, r3, #16
 8006cfe:	f003 0303 	and.w	r3, r3, #3
 8006d02:	3301      	adds	r3, #1
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006d08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d12:	e002      	b.n	8006d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d14:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8006d16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3750      	adds	r7, #80	; 0x50
 8006d20:	46bd      	mov	sp, r7
 8006d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d26:	bf00      	nop
 8006d28:	40023800 	.word	0x40023800
 8006d2c:	00f42400 	.word	0x00f42400
 8006d30:	007a1200 	.word	0x007a1200

08006d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d34:	b480      	push	{r7}
 8006d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d38:	4b03      	ldr	r3, [pc, #12]	; (8006d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	20000000 	.word	0x20000000

08006d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d50:	f7ff fff0 	bl	8006d34 <HAL_RCC_GetHCLKFreq>
 8006d54:	4602      	mov	r2, r0
 8006d56:	4b05      	ldr	r3, [pc, #20]	; (8006d6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	0a9b      	lsrs	r3, r3, #10
 8006d5c:	f003 0307 	and.w	r3, r3, #7
 8006d60:	4903      	ldr	r1, [pc, #12]	; (8006d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d62:	5ccb      	ldrb	r3, [r1, r3]
 8006d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	40023800 	.word	0x40023800
 8006d70:	0800acec 	.word	0x0800acec

08006d74 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b086      	sub	sp, #24
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006d80:	2300      	movs	r3, #0
 8006d82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d105      	bne.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d038      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006d9c:	4b68      	ldr	r3, [pc, #416]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006da2:	f7fb fc3d 	bl	8002620 <HAL_GetTick>
 8006da6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006da8:	e008      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006daa:	f7fb fc39 	bl	8002620 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d901      	bls.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e0bd      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006dbc:	4b61      	ldr	r3, [pc, #388]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1f0      	bne.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	019b      	lsls	r3, r3, #6
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	071b      	lsls	r3, r3, #28
 8006dda:	495a      	ldr	r1, [pc, #360]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006de2:	4b57      	ldr	r3, [pc, #348]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006de4:	2201      	movs	r2, #1
 8006de6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006de8:	f7fb fc1a 	bl	8002620 <HAL_GetTick>
 8006dec:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006dee:	e008      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006df0:	f7fb fc16 	bl	8002620 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d901      	bls.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e09a      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e02:	4b50      	ldr	r3, [pc, #320]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d0f0      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 8083 	beq.w	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	4b48      	ldr	r3, [pc, #288]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e24:	4a47      	ldr	r2, [pc, #284]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8006e2c:	4b45      	ldr	r3, [pc, #276]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e34:	60fb      	str	r3, [r7, #12]
 8006e36:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006e38:	4b43      	ldr	r3, [pc, #268]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a42      	ldr	r2, [pc, #264]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e42:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e44:	f7fb fbec 	bl	8002620 <HAL_GetTick>
 8006e48:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e4a:	e008      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e4c:	f7fb fbe8 	bl	8002620 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d901      	bls.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e06c      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e5e:	4b3a      	ldr	r3, [pc, #232]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d0f0      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e6a:	4b36      	ldr	r3, [pc, #216]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e72:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d02f      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d028      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e88:	4b2e      	ldr	r3, [pc, #184]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e90:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e92:	4b2e      	ldr	r3, [pc, #184]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006e94:	2201      	movs	r2, #1
 8006e96:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e98:	4b2c      	ldr	r3, [pc, #176]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006e9e:	4a29      	ldr	r2, [pc, #164]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ea4:	4b27      	ldr	r3, [pc, #156]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d114      	bne.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006eb0:	f7fb fbb6 	bl	8002620 <HAL_GetTick>
 8006eb4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eb6:	e00a      	b.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006eb8:	f7fb fbb2 	bl	8002620 <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d901      	bls.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e034      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ece:	4b1d      	ldr	r3, [pc, #116]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d0ee      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ee2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ee6:	d10d      	bne.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006ee8:	4b16      	ldr	r3, [pc, #88]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006efc:	4911      	ldr	r1, [pc, #68]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	608b      	str	r3, [r1, #8]
 8006f02:	e005      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006f04:	4b0f      	ldr	r3, [pc, #60]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	4a0e      	ldr	r2, [pc, #56]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f0a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006f0e:	6093      	str	r3, [r2, #8]
 8006f10:	4b0c      	ldr	r3, [pc, #48]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f1c:	4909      	ldr	r1, [pc, #36]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0308 	and.w	r3, r3, #8
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	7d1a      	ldrb	r2, [r3, #20]
 8006f32:	4b07      	ldr	r3, [pc, #28]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006f34:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	42470068 	.word	0x42470068
 8006f44:	40023800 	.word	0x40023800
 8006f48:	40007000 	.word	0x40007000
 8006f4c:	42470e40 	.word	0x42470e40
 8006f50:	424711e0 	.word	0x424711e0

08006f54 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b087      	sub	sp, #28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d140      	bne.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006f72:	4b24      	ldr	r3, [pc, #144]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f7a:	60fb      	str	r3, [r7, #12]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d005      	beq.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d131      	bne.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f88:	4b1f      	ldr	r3, [pc, #124]	; (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006f8a:	617b      	str	r3, [r7, #20]
          break;
 8006f8c:	e031      	b.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006f8e:	4b1d      	ldr	r3, [pc, #116]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f9a:	d109      	bne.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006f9c:	4b19      	ldr	r3, [pc, #100]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fa6:	4a19      	ldr	r2, [pc, #100]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fac:	613b      	str	r3, [r7, #16]
 8006fae:	e008      	b.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006fb0:	4b14      	ldr	r3, [pc, #80]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fba:	4a15      	ldr	r2, [pc, #84]	; (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc0:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006fc2:	4b10      	ldr	r3, [pc, #64]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fc8:	099b      	lsrs	r3, r3, #6
 8006fca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	fb02 f303 	mul.w	r3, r2, r3
 8006fd4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006fd6:	4b0b      	ldr	r3, [pc, #44]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fdc:	0f1b      	lsrs	r3, r3, #28
 8006fde:	f003 0307 	and.w	r3, r3, #7
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe8:	617b      	str	r3, [r7, #20]
          break;
 8006fea:	e002      	b.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	617b      	str	r3, [r7, #20]
          break;
 8006ff0:	bf00      	nop
        }
      }
      break;
 8006ff2:	bf00      	nop
    }
  }
  return frequency;
 8006ff4:	697b      	ldr	r3, [r7, #20]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	40023800 	.word	0x40023800
 8007008:	00bb8000 	.word	0x00bb8000
 800700c:	007a1200 	.word	0x007a1200
 8007010:	00f42400 	.word	0x00f42400

08007014 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e07b      	b.n	800711e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702a:	2b00      	cmp	r3, #0
 800702c:	d108      	bne.n	8007040 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007036:	d009      	beq.n	800704c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	61da      	str	r2, [r3, #28]
 800703e:	e005      	b.n	800704c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d106      	bne.n	800706c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7fa fb72 	bl	8001750 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007082:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007094:	431a      	orrs	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800709e:	431a      	orrs	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	431a      	orrs	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	431a      	orrs	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070bc:	431a      	orrs	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	69db      	ldr	r3, [r3, #28]
 80070c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070c6:	431a      	orrs	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d0:	ea42 0103 	orr.w	r1, r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	0c1b      	lsrs	r3, r3, #16
 80070ea:	f003 0104 	and.w	r1, r3, #4
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f2:	f003 0210 	and.w	r2, r3, #16
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	430a      	orrs	r2, r1
 80070fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	69da      	ldr	r2, [r3, #28]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800710c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007126:	b084      	sub	sp, #16
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	f107 001c 	add.w	r0, r7, #28
 8007134:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713a:	2b01      	cmp	r3, #1
 800713c:	d122      	bne.n	8007184 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007142:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007168:	2b01      	cmp	r3, #1
 800716a:	d105      	bne.n	8007178 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f9bf 	bl	80074fc <USB_CoreReset>
 800717e:	4603      	mov	r3, r0
 8007180:	73fb      	strb	r3, [r7, #15]
 8007182:	e01a      	b.n	80071ba <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f9b3 	bl	80074fc <USB_CoreReset>
 8007196:	4603      	mov	r3, r0
 8007198:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800719a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800719c:	2b00      	cmp	r3, #0
 800719e:	d106      	bne.n	80071ae <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	639a      	str	r2, [r3, #56]	; 0x38
 80071ac:	e005      	b.n	80071ba <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80071ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d10b      	bne.n	80071d8 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f043 0206 	orr.w	r2, r3, #6
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f043 0220 	orr.w	r2, r3, #32
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071e4:	b004      	add	sp, #16
 80071e6:	4770      	bx	lr

080071e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f043 0201 	orr.w	r2, r3, #1
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800720a:	b480      	push	{r7}
 800720c:	b083      	sub	sp, #12
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f023 0201 	bic.w	r2, r3, #1
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	460b      	mov	r3, r1
 8007236:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007238:	2300      	movs	r3, #0
 800723a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007248:	78fb      	ldrb	r3, [r7, #3]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d115      	bne.n	800727a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800725a:	2001      	movs	r0, #1
 800725c:	f7fb f9ec 	bl	8002638 <HAL_Delay>
      ms++;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	3301      	adds	r3, #1
 8007264:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f939 	bl	80074de <USB_GetMode>
 800726c:	4603      	mov	r3, r0
 800726e:	2b01      	cmp	r3, #1
 8007270:	d01e      	beq.n	80072b0 <USB_SetCurrentMode+0x84>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2b31      	cmp	r3, #49	; 0x31
 8007276:	d9f0      	bls.n	800725a <USB_SetCurrentMode+0x2e>
 8007278:	e01a      	b.n	80072b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800727a:	78fb      	ldrb	r3, [r7, #3]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d115      	bne.n	80072ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800728c:	2001      	movs	r0, #1
 800728e:	f7fb f9d3 	bl	8002638 <HAL_Delay>
      ms++;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3301      	adds	r3, #1
 8007296:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f920 	bl	80074de <USB_GetMode>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d005      	beq.n	80072b0 <USB_SetCurrentMode+0x84>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b31      	cmp	r3, #49	; 0x31
 80072a8:	d9f0      	bls.n	800728c <USB_SetCurrentMode+0x60>
 80072aa:	e001      	b.n	80072b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e005      	b.n	80072bc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2b32      	cmp	r3, #50	; 0x32
 80072b4:	d101      	bne.n	80072ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e000      	b.n	80072bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	3301      	adds	r3, #1
 80072d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4a13      	ldr	r2, [pc, #76]	; (8007328 <USB_FlushTxFifo+0x64>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d901      	bls.n	80072e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e01b      	b.n	800731c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	daf2      	bge.n	80072d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	019b      	lsls	r3, r3, #6
 80072f4:	f043 0220 	orr.w	r2, r3, #32
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	3301      	adds	r3, #1
 8007300:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	4a08      	ldr	r2, [pc, #32]	; (8007328 <USB_FlushTxFifo+0x64>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d901      	bls.n	800730e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e006      	b.n	800731c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	f003 0320 	and.w	r3, r3, #32
 8007316:	2b20      	cmp	r3, #32
 8007318:	d0f0      	beq.n	80072fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3714      	adds	r7, #20
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	00030d40 	.word	0x00030d40

0800732c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3301      	adds	r3, #1
 800733c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	4a11      	ldr	r2, [pc, #68]	; (8007388 <USB_FlushRxFifo+0x5c>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d901      	bls.n	800734a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e018      	b.n	800737c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	2b00      	cmp	r3, #0
 8007350:	daf2      	bge.n	8007338 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007352:	2300      	movs	r3, #0
 8007354:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2210      	movs	r2, #16
 800735a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3301      	adds	r3, #1
 8007360:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	4a08      	ldr	r2, [pc, #32]	; (8007388 <USB_FlushRxFifo+0x5c>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d901      	bls.n	800736e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e006      	b.n	800737c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	f003 0310 	and.w	r3, r3, #16
 8007376:	2b10      	cmp	r3, #16
 8007378:	d0f0      	beq.n	800735c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr
 8007388:	00030d40 	.word	0x00030d40

0800738c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800738c:	b480      	push	{r7}
 800738e:	b089      	sub	sp, #36	; 0x24
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	4611      	mov	r1, r2
 8007398:	461a      	mov	r2, r3
 800739a:	460b      	mov	r3, r1
 800739c:	71fb      	strb	r3, [r7, #7]
 800739e:	4613      	mov	r3, r2
 80073a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80073aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d123      	bne.n	80073fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80073b2:	88bb      	ldrh	r3, [r7, #4]
 80073b4:	3303      	adds	r3, #3
 80073b6:	089b      	lsrs	r3, r3, #2
 80073b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80073ba:	2300      	movs	r3, #0
 80073bc:	61bb      	str	r3, [r7, #24]
 80073be:	e018      	b.n	80073f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80073c0:	79fb      	ldrb	r3, [r7, #7]
 80073c2:	031a      	lsls	r2, r3, #12
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073cc:	461a      	mov	r2, r3
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	3301      	adds	r3, #1
 80073d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	3301      	adds	r3, #1
 80073de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	3301      	adds	r3, #1
 80073e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	3301      	adds	r3, #1
 80073ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	3301      	adds	r3, #1
 80073f0:	61bb      	str	r3, [r7, #24]
 80073f2:	69ba      	ldr	r2, [r7, #24]
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d3e2      	bcc.n	80073c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3724      	adds	r7, #36	; 0x24
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007408:	b480      	push	{r7}
 800740a:	b08b      	sub	sp, #44	; 0x2c
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	4613      	mov	r3, r2
 8007414:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800741e:	88fb      	ldrh	r3, [r7, #6]
 8007420:	089b      	lsrs	r3, r3, #2
 8007422:	b29b      	uxth	r3, r3
 8007424:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007426:	88fb      	ldrh	r3, [r7, #6]
 8007428:	f003 0303 	and.w	r3, r3, #3
 800742c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800742e:	2300      	movs	r3, #0
 8007430:	623b      	str	r3, [r7, #32]
 8007432:	e014      	b.n	800745e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	3301      	adds	r3, #1
 8007444:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	3301      	adds	r3, #1
 800744a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	3301      	adds	r3, #1
 8007450:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007454:	3301      	adds	r3, #1
 8007456:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	3301      	adds	r3, #1
 800745c:	623b      	str	r3, [r7, #32]
 800745e:	6a3a      	ldr	r2, [r7, #32]
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	429a      	cmp	r2, r3
 8007464:	d3e6      	bcc.n	8007434 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007466:	8bfb      	ldrh	r3, [r7, #30]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01e      	beq.n	80074aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800746c:	2300      	movs	r3, #0
 800746e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007476:	461a      	mov	r2, r3
 8007478:	f107 0310 	add.w	r3, r7, #16
 800747c:	6812      	ldr	r2, [r2, #0]
 800747e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	6a3b      	ldr	r3, [r7, #32]
 8007484:	b2db      	uxtb	r3, r3
 8007486:	00db      	lsls	r3, r3, #3
 8007488:	fa22 f303 	lsr.w	r3, r2, r3
 800748c:	b2da      	uxtb	r2, r3
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	701a      	strb	r2, [r3, #0]
      i++;
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	3301      	adds	r3, #1
 8007496:	623b      	str	r3, [r7, #32]
      pDest++;
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	3301      	adds	r3, #1
 800749c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800749e:	8bfb      	ldrh	r3, [r7, #30]
 80074a0:	3b01      	subs	r3, #1
 80074a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80074a4:	8bfb      	ldrh	r3, [r7, #30]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1ea      	bne.n	8007480 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	372c      	adds	r7, #44	; 0x2c
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	4013      	ands	r3, r2
 80074ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80074d0:	68fb      	ldr	r3, [r7, #12]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80074de:	b480      	push	{r7}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	f003 0301 	and.w	r3, r3, #1
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
	...

080074fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007504:	2300      	movs	r3, #0
 8007506:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	3301      	adds	r3, #1
 800750c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	4a13      	ldr	r2, [pc, #76]	; (8007560 <USB_CoreReset+0x64>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d901      	bls.n	800751a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e01b      	b.n	8007552 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	2b00      	cmp	r3, #0
 8007520:	daf2      	bge.n	8007508 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	f043 0201 	orr.w	r2, r3, #1
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	3301      	adds	r3, #1
 8007536:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4a09      	ldr	r2, [pc, #36]	; (8007560 <USB_CoreReset+0x64>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d901      	bls.n	8007544 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e006      	b.n	8007552 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	f003 0301 	and.w	r3, r3, #1
 800754c:	2b01      	cmp	r3, #1
 800754e:	d0f0      	beq.n	8007532 <USB_CoreReset+0x36>

  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3714      	adds	r7, #20
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	00030d40 	.word	0x00030d40

08007564 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007564:	b084      	sub	sp, #16
 8007566:	b580      	push	{r7, lr}
 8007568:	b086      	sub	sp, #24
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007572:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007584:	461a      	mov	r2, r3
 8007586:	2300      	movs	r3, #0
 8007588:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d018      	beq.n	80075ec <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80075ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d10a      	bne.n	80075d6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075ce:	f043 0304 	orr.w	r3, r3, #4
 80075d2:	6013      	str	r3, [r2, #0]
 80075d4:	e014      	b.n	8007600 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075e4:	f023 0304 	bic.w	r3, r3, #4
 80075e8:	6013      	str	r3, [r2, #0]
 80075ea:	e009      	b.n	8007600 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075fa:	f023 0304 	bic.w	r3, r3, #4
 80075fe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007600:	2110      	movs	r1, #16
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7ff fe5e 	bl	80072c4 <USB_FlushTxFifo>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7ff fe8a 	bl	800732c <USB_FlushRxFifo>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d001      	beq.n	8007622 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007622:	2300      	movs	r3, #0
 8007624:	613b      	str	r3, [r7, #16]
 8007626:	e015      	b.n	8007654 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	015a      	lsls	r2, r3, #5
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4413      	add	r3, r2
 8007630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007634:	461a      	mov	r2, r3
 8007636:	f04f 33ff 	mov.w	r3, #4294967295
 800763a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	015a      	lsls	r2, r3, #5
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4413      	add	r3, r2
 8007644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007648:	461a      	mov	r2, r3
 800764a:	2300      	movs	r3, #0
 800764c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	3301      	adds	r3, #1
 8007652:	613b      	str	r3, [r7, #16]
 8007654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	429a      	cmp	r2, r3
 800765a:	d3e5      	bcc.n	8007628 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f04f 32ff 	mov.w	r2, #4294967295
 8007668:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800766e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00b      	beq.n	800768e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800767c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a13      	ldr	r2, [pc, #76]	; (80076d0 <USB_HostInit+0x16c>)
 8007682:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a13      	ldr	r2, [pc, #76]	; (80076d4 <USB_HostInit+0x170>)
 8007688:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800768c:	e009      	b.n	80076a2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2280      	movs	r2, #128	; 0x80
 8007692:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a10      	ldr	r2, [pc, #64]	; (80076d8 <USB_HostInit+0x174>)
 8007698:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a0f      	ldr	r2, [pc, #60]	; (80076dc <USB_HostInit+0x178>)
 800769e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d105      	bne.n	80076b4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	f043 0210 	orr.w	r2, r3, #16
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	699a      	ldr	r2, [r3, #24]
 80076b8:	4b09      	ldr	r3, [pc, #36]	; (80076e0 <USB_HostInit+0x17c>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80076c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3718      	adds	r7, #24
 80076c6:	46bd      	mov	sp, r7
 80076c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076cc:	b004      	add	sp, #16
 80076ce:	4770      	bx	lr
 80076d0:	01000200 	.word	0x01000200
 80076d4:	00e00300 	.word	0x00e00300
 80076d8:	00600080 	.word	0x00600080
 80076dc:	004000e0 	.word	0x004000e0
 80076e0:	a3200008 	.word	0xa3200008

080076e4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	460b      	mov	r3, r1
 80076ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007702:	f023 0303 	bic.w	r3, r3, #3
 8007706:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	78fb      	ldrb	r3, [r7, #3]
 8007712:	f003 0303 	and.w	r3, r3, #3
 8007716:	68f9      	ldr	r1, [r7, #12]
 8007718:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800771c:	4313      	orrs	r3, r2
 800771e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007720:	78fb      	ldrb	r3, [r7, #3]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d107      	bne.n	8007736 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800772c:	461a      	mov	r2, r3
 800772e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007732:	6053      	str	r3, [r2, #4]
 8007734:	e009      	b.n	800774a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007736:	78fb      	ldrb	r3, [r7, #3]
 8007738:	2b02      	cmp	r3, #2
 800773a:	d106      	bne.n	800774a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007742:	461a      	mov	r2, r3
 8007744:	f241 7370 	movw	r3, #6000	; 0x1770
 8007748:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007768:	2300      	movs	r3, #0
 800776a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800777c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d109      	bne.n	800779c <USB_DriveVbus+0x44>
 8007788:	78fb      	ldrb	r3, [r7, #3]
 800778a:	2b01      	cmp	r3, #1
 800778c:	d106      	bne.n	800779c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007796:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800779a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077a6:	d109      	bne.n	80077bc <USB_DriveVbus+0x64>
 80077a8:	78fb      	ldrb	r3, [r7, #3]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d106      	bne.n	80077bc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80077b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077ba:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b085      	sub	sp, #20
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	0c5b      	lsrs	r3, r3, #17
 80077e8:	f003 0303 	and.w	r3, r3, #3
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3714      	adds	r7, #20
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	b29b      	uxth	r3, r3
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
	...

0800781c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b088      	sub	sp, #32
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	4608      	mov	r0, r1
 8007826:	4611      	mov	r1, r2
 8007828:	461a      	mov	r2, r3
 800782a:	4603      	mov	r3, r0
 800782c:	70fb      	strb	r3, [r7, #3]
 800782e:	460b      	mov	r3, r1
 8007830:	70bb      	strb	r3, [r7, #2]
 8007832:	4613      	mov	r3, r2
 8007834:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800783e:	78fb      	ldrb	r3, [r7, #3]
 8007840:	015a      	lsls	r2, r3, #5
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	4413      	add	r3, r2
 8007846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800784a:	461a      	mov	r2, r3
 800784c:	f04f 33ff 	mov.w	r3, #4294967295
 8007850:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007852:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007856:	2b03      	cmp	r3, #3
 8007858:	d87e      	bhi.n	8007958 <USB_HC_Init+0x13c>
 800785a:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <USB_HC_Init+0x44>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	08007871 	.word	0x08007871
 8007864:	0800791b 	.word	0x0800791b
 8007868:	08007871 	.word	0x08007871
 800786c:	080078dd 	.word	0x080078dd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007870:	78fb      	ldrb	r3, [r7, #3]
 8007872:	015a      	lsls	r2, r3, #5
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	4413      	add	r3, r2
 8007878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800787c:	461a      	mov	r2, r3
 800787e:	f240 439d 	movw	r3, #1181	; 0x49d
 8007882:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007884:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007888:	2b00      	cmp	r3, #0
 800788a:	da10      	bge.n	80078ae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800788c:	78fb      	ldrb	r3, [r7, #3]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	4413      	add	r3, r2
 8007894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	78fa      	ldrb	r2, [r7, #3]
 800789c:	0151      	lsls	r1, r2, #5
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	440a      	add	r2, r1
 80078a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078aa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80078ac:	e057      	b.n	800795e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d051      	beq.n	800795e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80078ba:	78fb      	ldrb	r3, [r7, #3]
 80078bc:	015a      	lsls	r2, r3, #5
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	4413      	add	r3, r2
 80078c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	78fa      	ldrb	r2, [r7, #3]
 80078ca:	0151      	lsls	r1, r2, #5
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	440a      	add	r2, r1
 80078d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80078d8:	60d3      	str	r3, [r2, #12]
      break;
 80078da:	e040      	b.n	800795e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80078dc:	78fb      	ldrb	r3, [r7, #3]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078e8:	461a      	mov	r2, r3
 80078ea:	f240 639d 	movw	r3, #1693	; 0x69d
 80078ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80078f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	da34      	bge.n	8007962 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80078f8:	78fb      	ldrb	r3, [r7, #3]
 80078fa:	015a      	lsls	r2, r3, #5
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	4413      	add	r3, r2
 8007900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	78fa      	ldrb	r2, [r7, #3]
 8007908:	0151      	lsls	r1, r2, #5
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	440a      	add	r2, r1
 800790e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007916:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007918:	e023      	b.n	8007962 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800791a:	78fb      	ldrb	r3, [r7, #3]
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	4413      	add	r3, r2
 8007922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007926:	461a      	mov	r2, r3
 8007928:	f240 2325 	movw	r3, #549	; 0x225
 800792c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800792e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007932:	2b00      	cmp	r3, #0
 8007934:	da17      	bge.n	8007966 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007936:	78fb      	ldrb	r3, [r7, #3]
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	4413      	add	r3, r2
 800793e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	78fa      	ldrb	r2, [r7, #3]
 8007946:	0151      	lsls	r1, r2, #5
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	440a      	add	r2, r1
 800794c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007950:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007954:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007956:	e006      	b.n	8007966 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	77fb      	strb	r3, [r7, #31]
      break;
 800795c:	e004      	b.n	8007968 <USB_HC_Init+0x14c>
      break;
 800795e:	bf00      	nop
 8007960:	e002      	b.n	8007968 <USB_HC_Init+0x14c>
      break;
 8007962:	bf00      	nop
 8007964:	e000      	b.n	8007968 <USB_HC_Init+0x14c>
      break;
 8007966:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007968:	78fb      	ldrb	r3, [r7, #3]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	4413      	add	r3, r2
 8007970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	78fa      	ldrb	r2, [r7, #3]
 8007978:	0151      	lsls	r1, r2, #5
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	440a      	add	r2, r1
 800797e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007982:	f043 0302 	orr.w	r3, r3, #2
 8007986:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800798e:	699a      	ldr	r2, [r3, #24]
 8007990:	78fb      	ldrb	r3, [r7, #3]
 8007992:	f003 030f 	and.w	r3, r3, #15
 8007996:	2101      	movs	r1, #1
 8007998:	fa01 f303 	lsl.w	r3, r1, r3
 800799c:	6939      	ldr	r1, [r7, #16]
 800799e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80079a2:	4313      	orrs	r3, r2
 80079a4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80079b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	da03      	bge.n	80079c2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80079ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079be:	61bb      	str	r3, [r7, #24]
 80079c0:	e001      	b.n	80079c6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f7ff feff 	bl	80077ca <USB_GetHostSpeed>
 80079cc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80079ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d106      	bne.n	80079e4 <USB_HC_Init+0x1c8>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d003      	beq.n	80079e4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80079dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079e0:	617b      	str	r3, [r7, #20]
 80079e2:	e001      	b.n	80079e8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80079e4:	2300      	movs	r3, #0
 80079e6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80079e8:	787b      	ldrb	r3, [r7, #1]
 80079ea:	059b      	lsls	r3, r3, #22
 80079ec:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80079f0:	78bb      	ldrb	r3, [r7, #2]
 80079f2:	02db      	lsls	r3, r3, #11
 80079f4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80079f8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80079fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80079fe:	049b      	lsls	r3, r3, #18
 8007a00:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a04:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a06:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007a08:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a0c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a12:	78fb      	ldrb	r3, [r7, #3]
 8007a14:	0159      	lsls	r1, r3, #5
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	440b      	add	r3, r1
 8007a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a1e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a24:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007a26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d003      	beq.n	8007a36 <USB_HC_Init+0x21a>
 8007a2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d10f      	bne.n	8007a56 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007a36:	78fb      	ldrb	r3, [r7, #3]
 8007a38:	015a      	lsls	r2, r3, #5
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	78fa      	ldrb	r2, [r7, #3]
 8007a46:	0151      	lsls	r1, r2, #5
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	440a      	add	r2, r1
 8007a4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a54:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007a56:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3720      	adds	r7, #32
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b08c      	sub	sp, #48	; 0x30
 8007a64:	af02      	add	r7, sp, #8
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	785b      	ldrb	r3, [r3, #1]
 8007a76:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a7c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d02d      	beq.n	8007ae6 <USB_HC_StartXfer+0x86>
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	791b      	ldrb	r3, [r3, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d129      	bne.n	8007ae6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007a92:	79fb      	ldrb	r3, [r7, #7]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d117      	bne.n	8007ac8 <USB_HC_StartXfer+0x68>
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	79db      	ldrb	r3, [r3, #7]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d003      	beq.n	8007aa8 <USB_HC_StartXfer+0x48>
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	79db      	ldrb	r3, [r3, #7]
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d10f      	bne.n	8007ac8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	69fa      	ldr	r2, [r7, #28]
 8007ab8:	0151      	lsls	r1, r2, #5
 8007aba:	6a3a      	ldr	r2, [r7, #32]
 8007abc:	440a      	add	r2, r1
 8007abe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007ac8:	79fb      	ldrb	r3, [r7, #7]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10b      	bne.n	8007ae6 <USB_HC_StartXfer+0x86>
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	795b      	ldrb	r3, [r3, #5]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d107      	bne.n	8007ae6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	785b      	ldrb	r3, [r3, #1]
 8007ada:	4619      	mov	r1, r3
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 fa0f 	bl	8007f00 <USB_DoPing>
      return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e0f8      	b.n	8007cd8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d018      	beq.n	8007b20 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	8912      	ldrh	r2, [r2, #8]
 8007af6:	4413      	add	r3, r2
 8007af8:	3b01      	subs	r3, #1
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	8912      	ldrh	r2, [r2, #8]
 8007afe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b02:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007b04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007b06:	8b7b      	ldrh	r3, [r7, #26]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d90b      	bls.n	8007b24 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007b0c:	8b7b      	ldrh	r3, [r7, #26]
 8007b0e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	8912      	ldrh	r2, [r2, #8]
 8007b16:	fb03 f202 	mul.w	r2, r3, r2
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	611a      	str	r2, [r3, #16]
 8007b1e:	e001      	b.n	8007b24 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007b20:	2301      	movs	r3, #1
 8007b22:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	78db      	ldrb	r3, [r3, #3]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d007      	beq.n	8007b3c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	8912      	ldrh	r2, [r2, #8]
 8007b32:	fb03 f202 	mul.w	r2, r3, r2
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	611a      	str	r2, [r3, #16]
 8007b3a:	e003      	b.n	8007b44 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	695a      	ldr	r2, [r3, #20]
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b4e:	04d9      	lsls	r1, r3, #19
 8007b50:	4b63      	ldr	r3, [pc, #396]	; (8007ce0 <USB_HC_StartXfer+0x280>)
 8007b52:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b54:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	7a9b      	ldrb	r3, [r3, #10]
 8007b5a:	075b      	lsls	r3, r3, #29
 8007b5c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b60:	69f9      	ldr	r1, [r7, #28]
 8007b62:	0148      	lsls	r0, r1, #5
 8007b64:	6a39      	ldr	r1, [r7, #32]
 8007b66:	4401      	add	r1, r0
 8007b68:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b6c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b6e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007b70:	79fb      	ldrb	r3, [r7, #7]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d009      	beq.n	8007b8a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	68d9      	ldr	r1, [r3, #12]
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b86:	460a      	mov	r2, r1
 8007b88:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007b8a:	6a3b      	ldr	r3, [r7, #32]
 8007b8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	bf0c      	ite	eq
 8007b9a:	2301      	moveq	r3, #1
 8007b9c:	2300      	movne	r3, #0
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	6a3b      	ldr	r3, [r7, #32]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	69fa      	ldr	r2, [r7, #28]
 8007bb2:	0151      	lsls	r1, r2, #5
 8007bb4:	6a3a      	ldr	r2, [r7, #32]
 8007bb6:	440a      	add	r2, r1
 8007bb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bbc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007bc0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	015a      	lsls	r2, r3, #5
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	4413      	add	r3, r2
 8007bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	7e7b      	ldrb	r3, [r7, #25]
 8007bd2:	075b      	lsls	r3, r3, #29
 8007bd4:	69f9      	ldr	r1, [r7, #28]
 8007bd6:	0148      	lsls	r0, r1, #5
 8007bd8:	6a39      	ldr	r1, [r7, #32]
 8007bda:	4401      	add	r1, r0
 8007bdc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007be0:	4313      	orrs	r3, r2
 8007be2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	015a      	lsls	r2, r3, #5
 8007be8:	6a3b      	ldr	r3, [r7, #32]
 8007bea:	4413      	add	r3, r2
 8007bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bfa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	78db      	ldrb	r3, [r3, #3]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d004      	beq.n	8007c0e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c0a:	613b      	str	r3, [r7, #16]
 8007c0c:	e003      	b.n	8007c16 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c14:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c1c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007c30:	79fb      	ldrb	r3, [r7, #7]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007c36:	2300      	movs	r3, #0
 8007c38:	e04e      	b.n	8007cd8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	78db      	ldrb	r3, [r3, #3]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d149      	bne.n	8007cd6 <USB_HC_StartXfer+0x276>
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d045      	beq.n	8007cd6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	79db      	ldrb	r3, [r3, #7]
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	d830      	bhi.n	8007cb4 <USB_HC_StartXfer+0x254>
 8007c52:	a201      	add	r2, pc, #4	; (adr r2, 8007c58 <USB_HC_StartXfer+0x1f8>)
 8007c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c58:	08007c69 	.word	0x08007c69
 8007c5c:	08007c8d 	.word	0x08007c8d
 8007c60:	08007c69 	.word	0x08007c69
 8007c64:	08007c8d 	.word	0x08007c8d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	695b      	ldr	r3, [r3, #20]
 8007c6c:	3303      	adds	r3, #3
 8007c6e:	089b      	lsrs	r3, r3, #2
 8007c70:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007c72:	8afa      	ldrh	r2, [r7, #22]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d91c      	bls.n	8007cb8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	f043 0220 	orr.w	r2, r3, #32
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	619a      	str	r2, [r3, #24]
        }
        break;
 8007c8a:	e015      	b.n	8007cb8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	695b      	ldr	r3, [r3, #20]
 8007c90:	3303      	adds	r3, #3
 8007c92:	089b      	lsrs	r3, r3, #2
 8007c94:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007c96:	8afa      	ldrh	r2, [r7, #22]
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d90a      	bls.n	8007cbc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	619a      	str	r2, [r3, #24]
        }
        break;
 8007cb2:	e003      	b.n	8007cbc <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007cb4:	bf00      	nop
 8007cb6:	e002      	b.n	8007cbe <USB_HC_StartXfer+0x25e>
        break;
 8007cb8:	bf00      	nop
 8007cba:	e000      	b.n	8007cbe <USB_HC_StartXfer+0x25e>
        break;
 8007cbc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	68d9      	ldr	r1, [r3, #12]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	785a      	ldrb	r2, [r3, #1]
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	2000      	movs	r0, #0
 8007cce:	9000      	str	r0, [sp, #0]
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f7ff fb5b 	bl	800738c <USB_WritePacket>
  }

  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3728      	adds	r7, #40	; 0x28
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	1ff80000 	.word	0x1ff80000

08007ce4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	b29b      	uxth	r3, r3
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b089      	sub	sp, #36	; 0x24
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	460b      	mov	r3, r1
 8007d10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007d16:	78fb      	ldrb	r3, [r7, #3]
 8007d18:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	0c9b      	lsrs	r3, r3, #18
 8007d2e:	f003 0303 	and.w	r3, r3, #3
 8007d32:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	015a      	lsls	r2, r3, #5
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	0fdb      	lsrs	r3, r3, #31
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	f003 0320 	and.w	r3, r3, #32
 8007d52:	2b20      	cmp	r3, #32
 8007d54:	d104      	bne.n	8007d60 <USB_HC_Halt+0x5a>
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	e0c8      	b.n	8007ef2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <USB_HC_Halt+0x66>
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d163      	bne.n	8007e34 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	015a      	lsls	r2, r3, #5
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	4413      	add	r3, r2
 8007d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	0151      	lsls	r1, r2, #5
 8007d7e:	69fa      	ldr	r2, [r7, #28]
 8007d80:	440a      	add	r2, r1
 8007d82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d8a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	f003 0320 	and.w	r3, r3, #32
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f040 80ab 	bne.w	8007ef0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d133      	bne.n	8007e0e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	015a      	lsls	r2, r3, #5
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	4413      	add	r3, r2
 8007dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	69ba      	ldr	r2, [r7, #24]
 8007db6:	0151      	lsls	r1, r2, #5
 8007db8:	69fa      	ldr	r2, [r7, #28]
 8007dba:	440a      	add	r2, r1
 8007dbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007dc4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	015a      	lsls	r2, r3, #5
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	4413      	add	r3, r2
 8007dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	0151      	lsls	r1, r2, #5
 8007dd8:	69fa      	ldr	r2, [r7, #28]
 8007dda:	440a      	add	r2, r1
 8007ddc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007de0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007de4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	3301      	adds	r3, #1
 8007dea:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007df2:	d81d      	bhi.n	8007e30 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	015a      	lsls	r2, r3, #5
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e0a:	d0ec      	beq.n	8007de6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e0c:	e070      	b.n	8007ef0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	015a      	lsls	r2, r3, #5
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	4413      	add	r3, r2
 8007e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	0151      	lsls	r1, r2, #5
 8007e20:	69fa      	ldr	r2, [r7, #28]
 8007e22:	440a      	add	r2, r1
 8007e24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e2c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e2e:	e05f      	b.n	8007ef0 <USB_HC_Halt+0x1ea>
            break;
 8007e30:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e32:	e05d      	b.n	8007ef0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	015a      	lsls	r2, r3, #5
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	69ba      	ldr	r2, [r7, #24]
 8007e44:	0151      	lsls	r1, r2, #5
 8007e46:	69fa      	ldr	r2, [r7, #28]
 8007e48:	440a      	add	r2, r1
 8007e4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e52:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d133      	bne.n	8007ecc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	015a      	lsls	r2, r3, #5
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	69ba      	ldr	r2, [r7, #24]
 8007e74:	0151      	lsls	r1, r2, #5
 8007e76:	69fa      	ldr	r2, [r7, #28]
 8007e78:	440a      	add	r2, r1
 8007e7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e82:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	015a      	lsls	r2, r3, #5
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	69ba      	ldr	r2, [r7, #24]
 8007e94:	0151      	lsls	r1, r2, #5
 8007e96:	69fa      	ldr	r2, [r7, #28]
 8007e98:	440a      	add	r2, r1
 8007e9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ea2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007eb0:	d81d      	bhi.n	8007eee <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	015a      	lsls	r2, r3, #5
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	4413      	add	r3, r2
 8007eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ec8:	d0ec      	beq.n	8007ea4 <USB_HC_Halt+0x19e>
 8007eca:	e011      	b.n	8007ef0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	015a      	lsls	r2, r3, #5
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	0151      	lsls	r1, r2, #5
 8007ede:	69fa      	ldr	r2, [r7, #28]
 8007ee0:	440a      	add	r2, r1
 8007ee2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ee6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007eea:	6013      	str	r3, [r2, #0]
 8007eec:	e000      	b.n	8007ef0 <USB_HC_Halt+0x1ea>
          break;
 8007eee:	bf00      	nop
    }
  }

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3724      	adds	r7, #36	; 0x24
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
	...

08007f00 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b087      	sub	sp, #28
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007f10:	78fb      	ldrb	r3, [r7, #3]
 8007f12:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007f14:	2301      	movs	r3, #1
 8007f16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	04da      	lsls	r2, r3, #19
 8007f1c:	4b15      	ldr	r3, [pc, #84]	; (8007f74 <USB_DoPing+0x74>)
 8007f1e:	4013      	ands	r3, r2
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	0151      	lsls	r1, r2, #5
 8007f24:	697a      	ldr	r2, [r7, #20]
 8007f26:	440a      	add	r2, r1
 8007f28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f30:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	015a      	lsls	r2, r3, #5
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	4413      	add	r3, r2
 8007f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f48:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f50:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f5e:	461a      	mov	r2, r3
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	371c      	adds	r7, #28
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	1ff80000 	.word	0x1ff80000

08007f78 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b088      	sub	sp, #32
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f80:	2300      	movs	r3, #0
 8007f82:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f7ff f93c 	bl	800720a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f92:	2110      	movs	r1, #16
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7ff f995 	bl	80072c4 <USB_FlushTxFifo>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7ff f9c1 	bl	800732c <USB_FlushRxFifo>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d001      	beq.n	8007fb4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	61bb      	str	r3, [r7, #24]
 8007fb8:	e01f      	b.n	8007ffa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fd0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fd8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007fe0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	015a      	lsls	r2, r3, #5
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	4413      	add	r3, r2
 8007fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fee:	461a      	mov	r2, r3
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	61bb      	str	r3, [r7, #24]
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	2b0f      	cmp	r3, #15
 8007ffe:	d9dc      	bls.n	8007fba <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008000:	2300      	movs	r3, #0
 8008002:	61bb      	str	r3, [r7, #24]
 8008004:	e034      	b.n	8008070 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	015a      	lsls	r2, r3, #5
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	4413      	add	r3, r2
 800800e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800801c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008024:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800802c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	4413      	add	r3, r2
 8008036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800803a:	461a      	mov	r2, r3
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	3301      	adds	r3, #1
 8008044:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800804c:	d80c      	bhi.n	8008068 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	015a      	lsls	r2, r3, #5
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	4413      	add	r3, r2
 8008056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008060:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008064:	d0ec      	beq.n	8008040 <USB_StopHost+0xc8>
 8008066:	e000      	b.n	800806a <USB_StopHost+0xf2>
        break;
 8008068:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	3301      	adds	r3, #1
 800806e:	61bb      	str	r3, [r7, #24]
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	2b0f      	cmp	r3, #15
 8008074:	d9c7      	bls.n	8008006 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800807c:	461a      	mov	r2, r3
 800807e:	f04f 33ff 	mov.w	r3, #4294967295
 8008082:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f04f 32ff 	mov.w	r2, #4294967295
 800808a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7ff f8ab 	bl	80071e8 <USB_EnableGlobalInt>

  return ret;
 8008092:	7ffb      	ldrb	r3, [r7, #31]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3720      	adds	r7, #32
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80080a0:	4904      	ldr	r1, [pc, #16]	; (80080b4 <MX_FATFS_Init+0x18>)
 80080a2:	4805      	ldr	r0, [pc, #20]	; (80080b8 <MX_FATFS_Init+0x1c>)
 80080a4:	f002 f9ce 	bl	800a444 <FATFS_LinkDriver>
 80080a8:	4603      	mov	r3, r0
 80080aa:	461a      	mov	r2, r3
 80080ac:	4b03      	ldr	r3, [pc, #12]	; (80080bc <MX_FATFS_Init+0x20>)
 80080ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80080b0:	bf00      	nop
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	20001324 	.word	0x20001324
 80080b8:	0800acfc 	.word	0x0800acfc
 80080bc:	20001320 	.word	0x20001320

080080c0 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	4603      	mov	r3, r0
 80080c8:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	4603      	mov	r3, r0
 80080e0:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80080e6:	79fb      	ldrb	r3, [r7, #7]
 80080e8:	4619      	mov	r1, r3
 80080ea:	4808      	ldr	r0, [pc, #32]	; (800810c <USBH_status+0x34>)
 80080ec:	f000 fe32 	bl	8008d54 <USBH_MSC_UnitIsReady>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d002      	beq.n	80080fc <USBH_status+0x24>
  {
    res = RES_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]
 80080fa:	e001      	b.n	8008100 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008100:	7bfb      	ldrb	r3, [r7, #15]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	20001334 	.word	0x20001334

08008110 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b094      	sub	sp, #80	; 0x50
 8008114:	af02      	add	r7, sp, #8
 8008116:	60b9      	str	r1, [r7, #8]
 8008118:	607a      	str	r2, [r7, #4]
 800811a:	603b      	str	r3, [r7, #0]
 800811c:	4603      	mov	r3, r0
 800811e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8008126:	7bf9      	ldrb	r1, [r7, #15]
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	4813      	ldr	r0, [pc, #76]	; (8008180 <USBH_read+0x70>)
 8008132:	f000 fe59 	bl	8008de8 <USBH_MSC_Read>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d103      	bne.n	8008144 <USBH_read+0x34>
  {
    res = RES_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008142:	e017      	b.n	8008174 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008144:	f107 0210 	add.w	r2, r7, #16
 8008148:	7bfb      	ldrb	r3, [r7, #15]
 800814a:	4619      	mov	r1, r3
 800814c:	480c      	ldr	r0, [pc, #48]	; (8008180 <USBH_read+0x70>)
 800814e:	f000 fe27 	bl	8008da0 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008152:	7f7b      	ldrb	r3, [r7, #29]
 8008154:	2b3a      	cmp	r3, #58	; 0x3a
 8008156:	d005      	beq.n	8008164 <USBH_read+0x54>
 8008158:	2b3a      	cmp	r3, #58	; 0x3a
 800815a:	dc07      	bgt.n	800816c <USBH_read+0x5c>
 800815c:	2b04      	cmp	r3, #4
 800815e:	d001      	beq.n	8008164 <USBH_read+0x54>
 8008160:	2b28      	cmp	r3, #40	; 0x28
 8008162:	d103      	bne.n	800816c <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008164:	2303      	movs	r3, #3
 8008166:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800816a:	e003      	b.n	8008174 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008172:	bf00      	nop
    }
  }

  return res;
 8008174:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008178:	4618      	mov	r0, r3
 800817a:	3748      	adds	r7, #72	; 0x48
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	20001334 	.word	0x20001334

08008184 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b094      	sub	sp, #80	; 0x50
 8008188:	af02      	add	r7, sp, #8
 800818a:	60b9      	str	r1, [r7, #8]
 800818c:	607a      	str	r2, [r7, #4]
 800818e:	603b      	str	r3, [r7, #0]
 8008190:	4603      	mov	r3, r0
 8008192:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800819a:	7bf9      	ldrb	r1, [r7, #15]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	4817      	ldr	r0, [pc, #92]	; (8008204 <USBH_write+0x80>)
 80081a6:	f000 fe88 	bl	8008eba <USBH_MSC_Write>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d103      	bne.n	80081b8 <USBH_write+0x34>
  {
    res = RES_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80081b6:	e01f      	b.n	80081f8 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80081b8:	f107 0210 	add.w	r2, r7, #16
 80081bc:	7bfb      	ldrb	r3, [r7, #15]
 80081be:	4619      	mov	r1, r3
 80081c0:	4810      	ldr	r0, [pc, #64]	; (8008204 <USBH_write+0x80>)
 80081c2:	f000 fded 	bl	8008da0 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80081c6:	7f7b      	ldrb	r3, [r7, #29]
 80081c8:	2b3a      	cmp	r3, #58	; 0x3a
 80081ca:	d00d      	beq.n	80081e8 <USBH_write+0x64>
 80081cc:	2b3a      	cmp	r3, #58	; 0x3a
 80081ce:	dc0f      	bgt.n	80081f0 <USBH_write+0x6c>
 80081d0:	2b28      	cmp	r3, #40	; 0x28
 80081d2:	d009      	beq.n	80081e8 <USBH_write+0x64>
 80081d4:	2b28      	cmp	r3, #40	; 0x28
 80081d6:	dc0b      	bgt.n	80081f0 <USBH_write+0x6c>
 80081d8:	2b04      	cmp	r3, #4
 80081da:	d005      	beq.n	80081e8 <USBH_write+0x64>
 80081dc:	2b27      	cmp	r3, #39	; 0x27
 80081de:	d107      	bne.n	80081f0 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80081e0:	2302      	movs	r3, #2
 80081e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80081e6:	e007      	b.n	80081f8 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80081e8:	2303      	movs	r3, #3
 80081ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80081ee:	e003      	b.n	80081f8 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80081f6:	bf00      	nop
    }
  }

  return res;
 80081f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3748      	adds	r7, #72	; 0x48
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	20001334 	.word	0x20001334

08008208 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b090      	sub	sp, #64	; 0x40
 800820c:	af00      	add	r7, sp, #0
 800820e:	4603      	mov	r3, r0
 8008210:	603a      	str	r2, [r7, #0]
 8008212:	71fb      	strb	r3, [r7, #7]
 8008214:	460b      	mov	r3, r1
 8008216:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800821e:	79bb      	ldrb	r3, [r7, #6]
 8008220:	2b03      	cmp	r3, #3
 8008222:	d852      	bhi.n	80082ca <USBH_ioctl+0xc2>
 8008224:	a201      	add	r2, pc, #4	; (adr r2, 800822c <USBH_ioctl+0x24>)
 8008226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822a:	bf00      	nop
 800822c:	0800823d 	.word	0x0800823d
 8008230:	08008245 	.word	0x08008245
 8008234:	0800826f 	.word	0x0800826f
 8008238:	0800829b 	.word	0x0800829b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008242:	e045      	b.n	80082d0 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008244:	f107 0208 	add.w	r2, r7, #8
 8008248:	79fb      	ldrb	r3, [r7, #7]
 800824a:	4619      	mov	r1, r3
 800824c:	4823      	ldr	r0, [pc, #140]	; (80082dc <USBH_ioctl+0xd4>)
 800824e:	f000 fda7 	bl	8008da0 <USBH_MSC_GetLUNInfo>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d106      	bne.n	8008266 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008264:	e034      	b.n	80082d0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800826c:	e030      	b.n	80082d0 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800826e:	f107 0208 	add.w	r2, r7, #8
 8008272:	79fb      	ldrb	r3, [r7, #7]
 8008274:	4619      	mov	r1, r3
 8008276:	4819      	ldr	r0, [pc, #100]	; (80082dc <USBH_ioctl+0xd4>)
 8008278:	f000 fd92 	bl	8008da0 <USBH_MSC_GetLUNInfo>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d107      	bne.n	8008292 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008282:	8a3b      	ldrh	r3, [r7, #16]
 8008284:	461a      	mov	r2, r3
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800828a:	2300      	movs	r3, #0
 800828c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008290:	e01e      	b.n	80082d0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008298:	e01a      	b.n	80082d0 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800829a:	f107 0208 	add.w	r2, r7, #8
 800829e:	79fb      	ldrb	r3, [r7, #7]
 80082a0:	4619      	mov	r1, r3
 80082a2:	480e      	ldr	r0, [pc, #56]	; (80082dc <USBH_ioctl+0xd4>)
 80082a4:	f000 fd7c 	bl	8008da0 <USBH_MSC_GetLUNInfo>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d109      	bne.n	80082c2 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80082ae:	8a3b      	ldrh	r3, [r7, #16]
 80082b0:	0a5b      	lsrs	r3, r3, #9
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	461a      	mov	r2, r3
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80082c0:	e006      	b.n	80082d0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80082c8:	e002      	b.n	80082d0 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80082ca:	2304      	movs	r3, #4
 80082cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80082d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3740      	adds	r7, #64	; 0x40
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	20001334 	.word	0x20001334

080082e0 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80082e0:	b590      	push	{r4, r7, lr}
 80082e2:	b089      	sub	sp, #36	; 0x24
 80082e4:	af04      	add	r7, sp, #16
 80082e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082ee:	7919      	ldrb	r1, [r3, #4]
 80082f0:	2350      	movs	r3, #80	; 0x50
 80082f2:	2206      	movs	r2, #6
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f001 fc6b 	bl	8009bd0 <USBH_FindInterface>
 80082fa:	4603      	mov	r3, r0
 80082fc:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
 8008300:	2bff      	cmp	r3, #255	; 0xff
 8008302:	d002      	beq.n	800830a <USBH_MSC_InterfaceInit+0x2a>
 8008304:	7bfb      	ldrb	r3, [r7, #15]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d901      	bls.n	800830e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800830a:	2302      	movs	r3, #2
 800830c:	e106      	b.n	800851c <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800830e:	7bfb      	ldrb	r3, [r7, #15]
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f001 fc40 	bl	8009b98 <USBH_SelectInterface>
 8008318:	4603      	mov	r3, r0
 800831a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800831c:	7bbb      	ldrb	r3, [r7, #14]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008322:	2302      	movs	r3, #2
 8008324:	e0fa      	b.n	800851c <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800832c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008330:	f002 fba2 	bl	800aa78 <malloc>
 8008334:	4603      	mov	r3, r0
 8008336:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800833e:	69db      	ldr	r3, [r3, #28]
 8008340:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008348:	2302      	movs	r3, #2
 800834a:	e0e7      	b.n	800851c <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800834c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008350:	2100      	movs	r1, #0
 8008352:	68b8      	ldr	r0, [r7, #8]
 8008354:	f002 fbae 	bl	800aab4 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008358:	7bfb      	ldrb	r3, [r7, #15]
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	211a      	movs	r1, #26
 800835e:	fb01 f303 	mul.w	r3, r1, r3
 8008362:	4413      	add	r3, r2
 8008364:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	b25b      	sxtb	r3, r3
 800836c:	2b00      	cmp	r3, #0
 800836e:	da16      	bge.n	800839e <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008370:	7bfb      	ldrb	r3, [r7, #15]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	211a      	movs	r1, #26
 8008376:	fb01 f303 	mul.w	r3, r1, r3
 800837a:	4413      	add	r3, r2
 800837c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008380:	781a      	ldrb	r2, [r3, #0]
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008386:	7bfb      	ldrb	r3, [r7, #15]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	211a      	movs	r1, #26
 800838c:	fb01 f303 	mul.w	r3, r1, r3
 8008390:	4413      	add	r3, r2
 8008392:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008396:	881a      	ldrh	r2, [r3, #0]
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	815a      	strh	r2, [r3, #10]
 800839c:	e015      	b.n	80083ca <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800839e:	7bfb      	ldrb	r3, [r7, #15]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	211a      	movs	r1, #26
 80083a4:	fb01 f303 	mul.w	r3, r1, r3
 80083a8:	4413      	add	r3, r2
 80083aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80083ae:	781a      	ldrb	r2, [r3, #0]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	211a      	movs	r1, #26
 80083ba:	fb01 f303 	mul.w	r3, r1, r3
 80083be:	4413      	add	r3, r2
 80083c0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80083c4:	881a      	ldrh	r2, [r3, #0]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80083ca:	7bfb      	ldrb	r3, [r7, #15]
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	211a      	movs	r1, #26
 80083d0:	fb01 f303 	mul.w	r3, r1, r3
 80083d4:	4413      	add	r3, r2
 80083d6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	b25b      	sxtb	r3, r3
 80083de:	2b00      	cmp	r3, #0
 80083e0:	da16      	bge.n	8008410 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	211a      	movs	r1, #26
 80083e8:	fb01 f303 	mul.w	r3, r1, r3
 80083ec:	4413      	add	r3, r2
 80083ee:	f203 3356 	addw	r3, r3, #854	; 0x356
 80083f2:	781a      	ldrb	r2, [r3, #0]
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	211a      	movs	r1, #26
 80083fe:	fb01 f303 	mul.w	r3, r1, r3
 8008402:	4413      	add	r3, r2
 8008404:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008408:	881a      	ldrh	r2, [r3, #0]
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	815a      	strh	r2, [r3, #10]
 800840e:	e015      	b.n	800843c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008410:	7bfb      	ldrb	r3, [r7, #15]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	211a      	movs	r1, #26
 8008416:	fb01 f303 	mul.w	r3, r1, r3
 800841a:	4413      	add	r3, r2
 800841c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008420:	781a      	ldrb	r2, [r3, #0]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008426:	7bfb      	ldrb	r3, [r7, #15]
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	211a      	movs	r1, #26
 800842c:	fb01 f303 	mul.w	r3, r1, r3
 8008430:	4413      	add	r3, r2
 8008432:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008436:	881a      	ldrh	r2, [r3, #0]
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2200      	movs	r2, #0
 8008440:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	2200      	movs	r2, #0
 8008446:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2200      	movs	r2, #0
 800844c:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	799b      	ldrb	r3, [r3, #6]
 8008452:	4619      	mov	r1, r3
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f001 ff46 	bl	800a2e6 <USBH_AllocPipe>
 800845a:	4603      	mov	r3, r0
 800845c:	461a      	mov	r2, r3
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	79db      	ldrb	r3, [r3, #7]
 8008466:	4619      	mov	r1, r3
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f001 ff3c 	bl	800a2e6 <USBH_AllocPipe>
 800846e:	4603      	mov	r3, r0
 8008470:	461a      	mov	r2, r3
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fdc4 	bl	8009004 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	799b      	ldrb	r3, [r3, #6]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d01e      	beq.n	80084c2 <USBH_MSC_InterfaceInit+0x1e2>
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	891b      	ldrh	r3, [r3, #8]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d01a      	beq.n	80084c2 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	7959      	ldrb	r1, [r3, #5]
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	7998      	ldrb	r0, [r3, #6]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	8912      	ldrh	r2, [r2, #8]
 80084a4:	9202      	str	r2, [sp, #8]
 80084a6:	2202      	movs	r2, #2
 80084a8:	9201      	str	r2, [sp, #4]
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	4623      	mov	r3, r4
 80084ae:	4602      	mov	r2, r0
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f001 fee9 	bl	800a288 <USBH_OpenPipe>
 80084b6:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	79db      	ldrb	r3, [r3, #7]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d02c      	beq.n	800851a <USBH_MSC_InterfaceInit+0x23a>
 80084c0:	e001      	b.n	80084c6 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 80084c2:	2303      	movs	r3, #3
 80084c4:	e02a      	b.n	800851c <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	895b      	ldrh	r3, [r3, #10]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d025      	beq.n	800851a <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	7919      	ldrb	r1, [r3, #4]
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	79d8      	ldrb	r0, [r3, #7]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	8952      	ldrh	r2, [r2, #10]
 80084e6:	9202      	str	r2, [sp, #8]
 80084e8:	2202      	movs	r2, #2
 80084ea:	9201      	str	r2, [sp, #4]
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	4623      	mov	r3, r4
 80084f0:	4602      	mov	r2, r0
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f001 fec8 	bl	800a288 <USBH_OpenPipe>
 80084f8:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	791b      	ldrb	r3, [r3, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	4619      	mov	r1, r3
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f002 f9e6 	bl	800a8d4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	795b      	ldrb	r3, [r3, #5]
 800850c:	2200      	movs	r2, #0
 800850e:	4619      	mov	r1, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f002 f9df 	bl	800a8d4 <USBH_LL_SetToggle>

  return USBH_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	e000      	b.n	800851c <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800851a:	2303      	movs	r3, #3
}
 800851c:	4618      	mov	r0, r3
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	bd90      	pop	{r4, r7, pc}

08008524 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008532:	69db      	ldr	r3, [r3, #28]
 8008534:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	795b      	ldrb	r3, [r3, #5]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00e      	beq.n	800855c <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	795b      	ldrb	r3, [r3, #5]
 8008542:	4619      	mov	r1, r3
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f001 febe 	bl	800a2c6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	795b      	ldrb	r3, [r3, #5]
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f001 fee9 	bl	800a328 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	791b      	ldrb	r3, [r3, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00e      	beq.n	8008582 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	791b      	ldrb	r3, [r3, #4]
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f001 feab 	bl	800a2c6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	791b      	ldrb	r3, [r3, #4]
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f001 fed6 	bl	800a328 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008588:	69db      	ldr	r3, [r3, #28]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00b      	beq.n	80085a6 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008594:	69db      	ldr	r3, [r3, #28]
 8008596:	4618      	mov	r0, r3
 8008598:	f002 fa76 	bl	800aa88 <free>
    phost->pActiveClass->pData = 0U;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085a2:	2200      	movs	r2, #0
 80085a4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085be:	69db      	ldr	r3, [r3, #28]
 80085c0:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80085c2:	2301      	movs	r3, #1
 80085c4:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	7b9b      	ldrb	r3, [r3, #14]
 80085ca:	2b03      	cmp	r3, #3
 80085cc:	d041      	beq.n	8008652 <USBH_MSC_ClassRequest+0xa2>
 80085ce:	2b03      	cmp	r3, #3
 80085d0:	dc4b      	bgt.n	800866a <USBH_MSC_ClassRequest+0xba>
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d001      	beq.n	80085da <USBH_MSC_ClassRequest+0x2a>
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d147      	bne.n	800866a <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	4619      	mov	r1, r3
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fcf1 	bl	8008fc6 <USBH_MSC_BOT_REQ_GetMaxLUN>
 80085e4:	4603      	mov	r3, r0
 80085e6:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
 80085ea:	2b03      	cmp	r3, #3
 80085ec:	d104      	bne.n	80085f8 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	2200      	movs	r2, #0
 80085f2:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d137      	bne.n	800866e <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	2b02      	cmp	r3, #2
 8008604:	d804      	bhi.n	8008610 <USBH_MSC_ClassRequest+0x60>
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	3301      	adds	r3, #1
 800860c:	b2da      	uxtb	r2, r3
 800860e:	e000      	b.n	8008612 <USBH_MSC_ClassRequest+0x62>
 8008610:	2202      	movs	r2, #2
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008616:	2300      	movs	r3, #0
 8008618:	73bb      	strb	r3, [r7, #14]
 800861a:	e014      	b.n	8008646 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800861c:	7bbb      	ldrb	r3, [r7, #14]
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	2134      	movs	r1, #52	; 0x34
 8008622:	fb01 f303 	mul.w	r3, r1, r3
 8008626:	4413      	add	r3, r2
 8008628:	3392      	adds	r3, #146	; 0x92
 800862a:	2202      	movs	r2, #2
 800862c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800862e:	7bbb      	ldrb	r3, [r7, #14]
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	2134      	movs	r1, #52	; 0x34
 8008634:	fb01 f303 	mul.w	r3, r1, r3
 8008638:	4413      	add	r3, r2
 800863a:	33c1      	adds	r3, #193	; 0xc1
 800863c:	2200      	movs	r2, #0
 800863e:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008640:	7bbb      	ldrb	r3, [r7, #14]
 8008642:	3301      	adds	r3, #1
 8008644:	73bb      	strb	r3, [r7, #14]
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	7bba      	ldrb	r2, [r7, #14]
 800864c:	429a      	cmp	r2, r3
 800864e:	d3e5      	bcc.n	800861c <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8008650:	e00d      	b.n	800866e <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008652:	2100      	movs	r1, #0
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 fba1 	bl	8009d9c <USBH_ClrFeature>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d108      	bne.n	8008672 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	7bda      	ldrb	r2, [r3, #15]
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	739a      	strb	r2, [r3, #14]
      }
      break;
 8008668:	e003      	b.n	8008672 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800866a:	bf00      	nop
 800866c:	e002      	b.n	8008674 <USBH_MSC_ClassRequest+0xc4>
      break;
 800866e:	bf00      	nop
 8008670:	e000      	b.n	8008674 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008672:	bf00      	nop
  }

  return status;
 8008674:	7bfb      	ldrb	r3, [r7, #15]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
	...

08008680 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800868e:	69db      	ldr	r3, [r3, #28]
 8008690:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008692:	2301      	movs	r3, #1
 8008694:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008696:	2301      	movs	r3, #1
 8008698:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800869a:	2301      	movs	r3, #1
 800869c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	7b1b      	ldrb	r3, [r3, #12]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d003      	beq.n	80086ae <USBH_MSC_Process+0x2e>
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	f000 8271 	beq.w	8008b8e <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80086ac:	e272      	b.n	8008b94 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	429a      	cmp	r2, r3
 80086bc:	f080 824f 	bcs.w	8008b5e <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80086c6:	4619      	mov	r1, r3
 80086c8:	693a      	ldr	r2, [r7, #16]
 80086ca:	2334      	movs	r3, #52	; 0x34
 80086cc:	fb01 f303 	mul.w	r3, r1, r3
 80086d0:	4413      	add	r3, r2
 80086d2:	3391      	adds	r3, #145	; 0x91
 80086d4:	2201      	movs	r2, #1
 80086d6:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80086de:	4619      	mov	r1, r3
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	2334      	movs	r3, #52	; 0x34
 80086e4:	fb01 f303 	mul.w	r3, r1, r3
 80086e8:	4413      	add	r3, r2
 80086ea:	3390      	adds	r3, #144	; 0x90
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	2b08      	cmp	r3, #8
 80086f0:	f200 8243 	bhi.w	8008b7a <USBH_MSC_Process+0x4fa>
 80086f4:	a201      	add	r2, pc, #4	; (adr r2, 80086fc <USBH_MSC_Process+0x7c>)
 80086f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fa:	bf00      	nop
 80086fc:	08008721 	.word	0x08008721
 8008700:	08008b7b 	.word	0x08008b7b
 8008704:	080087e9 	.word	0x080087e9
 8008708:	0800896d 	.word	0x0800896d
 800870c:	08008747 	.word	0x08008747
 8008710:	08008a39 	.word	0x08008a39
 8008714:	08008b7b 	.word	0x08008b7b
 8008718:	08008b7b 	.word	0x08008b7b
 800871c:	08008b4d 	.word	0x08008b4d
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008726:	4619      	mov	r1, r3
 8008728:	693a      	ldr	r2, [r7, #16]
 800872a:	2334      	movs	r3, #52	; 0x34
 800872c:	fb01 f303 	mul.w	r3, r1, r3
 8008730:	4413      	add	r3, r2
 8008732:	3390      	adds	r3, #144	; 0x90
 8008734:	2204      	movs	r2, #4
 8008736:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008744:	e222      	b.n	8008b8c <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800874c:	b2d9      	uxtb	r1, r3
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008754:	461a      	mov	r2, r3
 8008756:	2334      	movs	r3, #52	; 0x34
 8008758:	fb02 f303 	mul.w	r3, r2, r3
 800875c:	3398      	adds	r3, #152	; 0x98
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	4413      	add	r3, r2
 8008762:	3307      	adds	r3, #7
 8008764:	461a      	mov	r2, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 ff6a 	bl	8009640 <USBH_MSC_SCSI_Inquiry>
 800876c:	4603      	mov	r3, r0
 800876e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008770:	7bfb      	ldrb	r3, [r7, #15]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10b      	bne.n	800878e <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800877c:	4619      	mov	r1, r3
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	2334      	movs	r3, #52	; 0x34
 8008782:	fb01 f303 	mul.w	r3, r1, r3
 8008786:	4413      	add	r3, r2
 8008788:	3390      	adds	r3, #144	; 0x90
 800878a:	2202      	movs	r2, #2
 800878c:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800878e:	7bfb      	ldrb	r3, [r7, #15]
 8008790:	2b02      	cmp	r3, #2
 8008792:	d10c      	bne.n	80087ae <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800879a:	4619      	mov	r1, r3
 800879c:	693a      	ldr	r2, [r7, #16]
 800879e:	2334      	movs	r3, #52	; 0x34
 80087a0:	fb01 f303 	mul.w	r3, r1, r3
 80087a4:	4413      	add	r3, r2
 80087a6:	3390      	adds	r3, #144	; 0x90
 80087a8:	2205      	movs	r2, #5
 80087aa:	701a      	strb	r2, [r3, #0]
            break;
 80087ac:	e1e7      	b.n	8008b7e <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80087ae:	7bfb      	ldrb	r3, [r7, #15]
 80087b0:	2b04      	cmp	r3, #4
 80087b2:	f040 81e4 	bne.w	8008b7e <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80087bc:	4619      	mov	r1, r3
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	2334      	movs	r3, #52	; 0x34
 80087c2:	fb01 f303 	mul.w	r3, r1, r3
 80087c6:	4413      	add	r3, r2
 80087c8:	3390      	adds	r3, #144	; 0x90
 80087ca:	2201      	movs	r2, #1
 80087cc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80087d4:	4619      	mov	r1, r3
 80087d6:	693a      	ldr	r2, [r7, #16]
 80087d8:	2334      	movs	r3, #52	; 0x34
 80087da:	fb01 f303 	mul.w	r3, r1, r3
 80087de:	4413      	add	r3, r2
 80087e0:	3391      	adds	r3, #145	; 0x91
 80087e2:	2202      	movs	r2, #2
 80087e4:	701a      	strb	r2, [r3, #0]
            break;
 80087e6:	e1ca      	b.n	8008b7e <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	4619      	mov	r1, r3
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fe66 	bl	80094c4 <USBH_MSC_SCSI_TestUnitReady>
 80087f8:	4603      	mov	r3, r0
 80087fa:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80087fc:	7bbb      	ldrb	r3, [r7, #14]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d149      	bne.n	8008896 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008808:	4619      	mov	r1, r3
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	2334      	movs	r3, #52	; 0x34
 800880e:	fb01 f303 	mul.w	r3, r1, r3
 8008812:	4413      	add	r3, r2
 8008814:	3392      	adds	r3, #146	; 0x92
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00c      	beq.n	8008836 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008822:	4619      	mov	r1, r3
 8008824:	693a      	ldr	r2, [r7, #16]
 8008826:	2334      	movs	r3, #52	; 0x34
 8008828:	fb01 f303 	mul.w	r3, r1, r3
 800882c:	4413      	add	r3, r2
 800882e:	33c1      	adds	r3, #193	; 0xc1
 8008830:	2201      	movs	r2, #1
 8008832:	701a      	strb	r2, [r3, #0]
 8008834:	e00b      	b.n	800884e <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800883c:	4619      	mov	r1, r3
 800883e:	693a      	ldr	r2, [r7, #16]
 8008840:	2334      	movs	r3, #52	; 0x34
 8008842:	fb01 f303 	mul.w	r3, r1, r3
 8008846:	4413      	add	r3, r2
 8008848:	33c1      	adds	r3, #193	; 0xc1
 800884a:	2200      	movs	r2, #0
 800884c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008854:	4619      	mov	r1, r3
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	2334      	movs	r3, #52	; 0x34
 800885a:	fb01 f303 	mul.w	r3, r1, r3
 800885e:	4413      	add	r3, r2
 8008860:	3390      	adds	r3, #144	; 0x90
 8008862:	2203      	movs	r2, #3
 8008864:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800886c:	4619      	mov	r1, r3
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	2334      	movs	r3, #52	; 0x34
 8008872:	fb01 f303 	mul.w	r3, r1, r3
 8008876:	4413      	add	r3, r2
 8008878:	3391      	adds	r3, #145	; 0x91
 800887a:	2200      	movs	r2, #0
 800887c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008884:	4619      	mov	r1, r3
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	2334      	movs	r3, #52	; 0x34
 800888a:	fb01 f303 	mul.w	r3, r1, r3
 800888e:	4413      	add	r3, r2
 8008890:	3392      	adds	r3, #146	; 0x92
 8008892:	2200      	movs	r2, #0
 8008894:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8008896:	7bbb      	ldrb	r3, [r7, #14]
 8008898:	2b02      	cmp	r3, #2
 800889a:	d14a      	bne.n	8008932 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088a2:	4619      	mov	r1, r3
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	2334      	movs	r3, #52	; 0x34
 80088a8:	fb01 f303 	mul.w	r3, r1, r3
 80088ac:	4413      	add	r3, r2
 80088ae:	3392      	adds	r3, #146	; 0x92
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d00c      	beq.n	80088d0 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088bc:	4619      	mov	r1, r3
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	2334      	movs	r3, #52	; 0x34
 80088c2:	fb01 f303 	mul.w	r3, r1, r3
 80088c6:	4413      	add	r3, r2
 80088c8:	33c1      	adds	r3, #193	; 0xc1
 80088ca:	2201      	movs	r2, #1
 80088cc:	701a      	strb	r2, [r3, #0]
 80088ce:	e00b      	b.n	80088e8 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088d6:	4619      	mov	r1, r3
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	2334      	movs	r3, #52	; 0x34
 80088dc:	fb01 f303 	mul.w	r3, r1, r3
 80088e0:	4413      	add	r3, r2
 80088e2:	33c1      	adds	r3, #193	; 0xc1
 80088e4:	2200      	movs	r2, #0
 80088e6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088ee:	4619      	mov	r1, r3
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	2334      	movs	r3, #52	; 0x34
 80088f4:	fb01 f303 	mul.w	r3, r1, r3
 80088f8:	4413      	add	r3, r2
 80088fa:	3390      	adds	r3, #144	; 0x90
 80088fc:	2205      	movs	r2, #5
 80088fe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008906:	4619      	mov	r1, r3
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	2334      	movs	r3, #52	; 0x34
 800890c:	fb01 f303 	mul.w	r3, r1, r3
 8008910:	4413      	add	r3, r2
 8008912:	3391      	adds	r3, #145	; 0x91
 8008914:	2201      	movs	r2, #1
 8008916:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800891e:	4619      	mov	r1, r3
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	2334      	movs	r3, #52	; 0x34
 8008924:	fb01 f303 	mul.w	r3, r1, r3
 8008928:	4413      	add	r3, r2
 800892a:	3392      	adds	r3, #146	; 0x92
 800892c:	2202      	movs	r2, #2
 800892e:	701a      	strb	r2, [r3, #0]
            break;
 8008930:	e127      	b.n	8008b82 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8008932:	7bbb      	ldrb	r3, [r7, #14]
 8008934:	2b04      	cmp	r3, #4
 8008936:	f040 8124 	bne.w	8008b82 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008940:	4619      	mov	r1, r3
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	2334      	movs	r3, #52	; 0x34
 8008946:	fb01 f303 	mul.w	r3, r1, r3
 800894a:	4413      	add	r3, r2
 800894c:	3390      	adds	r3, #144	; 0x90
 800894e:	2201      	movs	r2, #1
 8008950:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008958:	4619      	mov	r1, r3
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	2334      	movs	r3, #52	; 0x34
 800895e:	fb01 f303 	mul.w	r3, r1, r3
 8008962:	4413      	add	r3, r2
 8008964:	3391      	adds	r3, #145	; 0x91
 8008966:	2202      	movs	r2, #2
 8008968:	701a      	strb	r2, [r3, #0]
            break;
 800896a:	e10a      	b.n	8008b82 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008972:	b2d9      	uxtb	r1, r3
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800897a:	461a      	mov	r2, r3
 800897c:	2334      	movs	r3, #52	; 0x34
 800897e:	fb02 f303 	mul.w	r3, r2, r3
 8008982:	3390      	adds	r3, #144	; 0x90
 8008984:	693a      	ldr	r2, [r7, #16]
 8008986:	4413      	add	r3, r2
 8008988:	3304      	adds	r3, #4
 800898a:	461a      	mov	r2, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fddc 	bl	800954a <USBH_MSC_SCSI_ReadCapacity>
 8008992:	4603      	mov	r3, r0
 8008994:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008996:	7bfb      	ldrb	r3, [r7, #15]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d120      	bne.n	80089de <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089a2:	4619      	mov	r1, r3
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	2334      	movs	r3, #52	; 0x34
 80089a8:	fb01 f303 	mul.w	r3, r1, r3
 80089ac:	4413      	add	r3, r2
 80089ae:	3390      	adds	r3, #144	; 0x90
 80089b0:	2201      	movs	r2, #1
 80089b2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089ba:	4619      	mov	r1, r3
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	2334      	movs	r3, #52	; 0x34
 80089c0:	fb01 f303 	mul.w	r3, r1, r3
 80089c4:	4413      	add	r3, r2
 80089c6:	3391      	adds	r3, #145	; 0x91
 80089c8:	2200      	movs	r2, #0
 80089ca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089d2:	3301      	adds	r3, #1
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80089dc:	e0d3      	b.n	8008b86 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80089de:	7bfb      	ldrb	r3, [r7, #15]
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d10c      	bne.n	80089fe <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089ea:	4619      	mov	r1, r3
 80089ec:	693a      	ldr	r2, [r7, #16]
 80089ee:	2334      	movs	r3, #52	; 0x34
 80089f0:	fb01 f303 	mul.w	r3, r1, r3
 80089f4:	4413      	add	r3, r2
 80089f6:	3390      	adds	r3, #144	; 0x90
 80089f8:	2205      	movs	r2, #5
 80089fa:	701a      	strb	r2, [r3, #0]
            break;
 80089fc:	e0c3      	b.n	8008b86 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	2b04      	cmp	r3, #4
 8008a02:	f040 80c0 	bne.w	8008b86 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	693a      	ldr	r2, [r7, #16]
 8008a10:	2334      	movs	r3, #52	; 0x34
 8008a12:	fb01 f303 	mul.w	r3, r1, r3
 8008a16:	4413      	add	r3, r2
 8008a18:	3390      	adds	r3, #144	; 0x90
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a24:	4619      	mov	r1, r3
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	2334      	movs	r3, #52	; 0x34
 8008a2a:	fb01 f303 	mul.w	r3, r1, r3
 8008a2e:	4413      	add	r3, r2
 8008a30:	3391      	adds	r3, #145	; 0x91
 8008a32:	2202      	movs	r2, #2
 8008a34:	701a      	strb	r2, [r3, #0]
            break;
 8008a36:	e0a6      	b.n	8008b86 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a3e:	b2d9      	uxtb	r1, r3
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a46:	461a      	mov	r2, r3
 8008a48:	2334      	movs	r3, #52	; 0x34
 8008a4a:	fb02 f303 	mul.w	r3, r2, r3
 8008a4e:	3398      	adds	r3, #152	; 0x98
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	4413      	add	r3, r2
 8008a54:	3304      	adds	r3, #4
 8008a56:	461a      	mov	r2, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fe96 	bl	800978a <USBH_MSC_SCSI_RequestSense>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d145      	bne.n	8008af4 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a6e:	4619      	mov	r1, r3
 8008a70:	693a      	ldr	r2, [r7, #16]
 8008a72:	2334      	movs	r3, #52	; 0x34
 8008a74:	fb01 f303 	mul.w	r3, r1, r3
 8008a78:	4413      	add	r3, r2
 8008a7a:	339c      	adds	r3, #156	; 0x9c
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	2b06      	cmp	r3, #6
 8008a80:	d00c      	beq.n	8008a9c <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a88:	4619      	mov	r1, r3
 8008a8a:	693a      	ldr	r2, [r7, #16]
 8008a8c:	2334      	movs	r3, #52	; 0x34
 8008a8e:	fb01 f303 	mul.w	r3, r1, r3
 8008a92:	4413      	add	r3, r2
 8008a94:	339c      	adds	r3, #156	; 0x9c
 8008a96:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d117      	bne.n	8008acc <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	f242 720f 	movw	r2, #9999	; 0x270f
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d80c      	bhi.n	8008acc <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ab8:	4619      	mov	r1, r3
 8008aba:	693a      	ldr	r2, [r7, #16]
 8008abc:	2334      	movs	r3, #52	; 0x34
 8008abe:	fb01 f303 	mul.w	r3, r1, r3
 8008ac2:	4413      	add	r3, r2
 8008ac4:	3390      	adds	r3, #144	; 0x90
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	701a      	strb	r2, [r3, #0]
                  break;
 8008aca:	e05f      	b.n	8008b8c <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	2334      	movs	r3, #52	; 0x34
 8008ad8:	fb01 f303 	mul.w	r3, r1, r3
 8008adc:	4413      	add	r3, r2
 8008ade:	3390      	adds	r3, #144	; 0x90
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008aea:	3301      	adds	r3, #1
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d10c      	bne.n	8008b14 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b00:	4619      	mov	r1, r3
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	2334      	movs	r3, #52	; 0x34
 8008b06:	fb01 f303 	mul.w	r3, r1, r3
 8008b0a:	4413      	add	r3, r2
 8008b0c:	3390      	adds	r3, #144	; 0x90
 8008b0e:	2208      	movs	r2, #8
 8008b10:	701a      	strb	r2, [r3, #0]
            break;
 8008b12:	e03a      	b.n	8008b8a <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
 8008b16:	2b04      	cmp	r3, #4
 8008b18:	d137      	bne.n	8008b8a <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b20:	4619      	mov	r1, r3
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	2334      	movs	r3, #52	; 0x34
 8008b26:	fb01 f303 	mul.w	r3, r1, r3
 8008b2a:	4413      	add	r3, r2
 8008b2c:	3390      	adds	r3, #144	; 0x90
 8008b2e:	2201      	movs	r2, #1
 8008b30:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b38:	4619      	mov	r1, r3
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	2334      	movs	r3, #52	; 0x34
 8008b3e:	fb01 f303 	mul.w	r3, r1, r3
 8008b42:	4413      	add	r3, r2
 8008b44:	3391      	adds	r3, #145	; 0x91
 8008b46:	2202      	movs	r2, #2
 8008b48:	701a      	strb	r2, [r3, #0]
            break;
 8008b4a:	e01e      	b.n	8008b8a <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b52:	3301      	adds	r3, #1
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008b5c:	e016      	b.n	8008b8c <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b72:	2102      	movs	r1, #2
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	4798      	blx	r3
      break;
 8008b78:	e00c      	b.n	8008b94 <USBH_MSC_Process+0x514>
            break;
 8008b7a:	bf00      	nop
 8008b7c:	e00a      	b.n	8008b94 <USBH_MSC_Process+0x514>
            break;
 8008b7e:	bf00      	nop
 8008b80:	e008      	b.n	8008b94 <USBH_MSC_Process+0x514>
            break;
 8008b82:	bf00      	nop
 8008b84:	e006      	b.n	8008b94 <USBH_MSC_Process+0x514>
            break;
 8008b86:	bf00      	nop
 8008b88:	e004      	b.n	8008b94 <USBH_MSC_Process+0x514>
            break;
 8008b8a:	bf00      	nop
      break;
 8008b8c:	e002      	b.n	8008b94 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	75fb      	strb	r3, [r7, #23]
      break;
 8008b92:	bf00      	nop
  }
  return error;
 8008b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3718      	adds	r7, #24
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop

08008ba0 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	370c      	adds	r7, #12
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b088      	sub	sp, #32
 8008bba:	af02      	add	r7, sp, #8
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bc8:	69db      	ldr	r3, [r3, #28]
 8008bca:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8008bd4:	78fb      	ldrb	r3, [r7, #3]
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	2134      	movs	r1, #52	; 0x34
 8008bda:	fb01 f303 	mul.w	r3, r1, r3
 8008bde:	4413      	add	r3, r2
 8008be0:	3390      	adds	r3, #144	; 0x90
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	2b07      	cmp	r3, #7
 8008be6:	d03c      	beq.n	8008c62 <USBH_MSC_RdWrProcess+0xac>
 8008be8:	2b07      	cmp	r3, #7
 8008bea:	f300 80a7 	bgt.w	8008d3c <USBH_MSC_RdWrProcess+0x186>
 8008bee:	2b05      	cmp	r3, #5
 8008bf0:	d06c      	beq.n	8008ccc <USBH_MSC_RdWrProcess+0x116>
 8008bf2:	2b06      	cmp	r3, #6
 8008bf4:	f040 80a2 	bne.w	8008d3c <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8008bf8:	78f9      	ldrb	r1, [r7, #3]
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	9300      	str	r3, [sp, #0]
 8008bfe:	2300      	movs	r3, #0
 8008c00:	2200      	movs	r2, #0
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fea5 	bl	8009952 <USBH_MSC_SCSI_Read>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008c0c:	7bfb      	ldrb	r3, [r7, #15]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10b      	bne.n	8008c2a <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008c12:	78fb      	ldrb	r3, [r7, #3]
 8008c14:	693a      	ldr	r2, [r7, #16]
 8008c16:	2134      	movs	r1, #52	; 0x34
 8008c18:	fb01 f303 	mul.w	r3, r1, r3
 8008c1c:	4413      	add	r3, r2
 8008c1e:	3390      	adds	r3, #144	; 0x90
 8008c20:	2201      	movs	r2, #1
 8008c22:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c28:	e08a      	b.n	8008d40 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8008c2a:	7bfb      	ldrb	r3, [r7, #15]
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d109      	bne.n	8008c44 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008c30:	78fb      	ldrb	r3, [r7, #3]
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	2134      	movs	r1, #52	; 0x34
 8008c36:	fb01 f303 	mul.w	r3, r1, r3
 8008c3a:	4413      	add	r3, r2
 8008c3c:	3390      	adds	r3, #144	; 0x90
 8008c3e:	2205      	movs	r2, #5
 8008c40:	701a      	strb	r2, [r3, #0]
      break;
 8008c42:	e07d      	b.n	8008d40 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
 8008c46:	2b04      	cmp	r3, #4
 8008c48:	d17a      	bne.n	8008d40 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008c4a:	78fb      	ldrb	r3, [r7, #3]
 8008c4c:	693a      	ldr	r2, [r7, #16]
 8008c4e:	2134      	movs	r1, #52	; 0x34
 8008c50:	fb01 f303 	mul.w	r3, r1, r3
 8008c54:	4413      	add	r3, r2
 8008c56:	3390      	adds	r3, #144	; 0x90
 8008c58:	2208      	movs	r2, #8
 8008c5a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8008c60:	e06e      	b.n	8008d40 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8008c62:	78f9      	ldrb	r1, [r7, #3]
 8008c64:	2300      	movs	r3, #0
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	2300      	movs	r3, #0
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fe05 	bl	800987c <USBH_MSC_SCSI_Write>
 8008c72:	4603      	mov	r3, r0
 8008c74:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008c76:	7bfb      	ldrb	r3, [r7, #15]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10b      	bne.n	8008c94 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008c7c:	78fb      	ldrb	r3, [r7, #3]
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	2134      	movs	r1, #52	; 0x34
 8008c82:	fb01 f303 	mul.w	r3, r1, r3
 8008c86:	4413      	add	r3, r2
 8008c88:	3390      	adds	r3, #144	; 0x90
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c92:	e057      	b.n	8008d44 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8008c94:	7bfb      	ldrb	r3, [r7, #15]
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d109      	bne.n	8008cae <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008c9a:	78fb      	ldrb	r3, [r7, #3]
 8008c9c:	693a      	ldr	r2, [r7, #16]
 8008c9e:	2134      	movs	r1, #52	; 0x34
 8008ca0:	fb01 f303 	mul.w	r3, r1, r3
 8008ca4:	4413      	add	r3, r2
 8008ca6:	3390      	adds	r3, #144	; 0x90
 8008ca8:	2205      	movs	r2, #5
 8008caa:	701a      	strb	r2, [r3, #0]
      break;
 8008cac:	e04a      	b.n	8008d44 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
 8008cb0:	2b04      	cmp	r3, #4
 8008cb2:	d147      	bne.n	8008d44 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008cb4:	78fb      	ldrb	r3, [r7, #3]
 8008cb6:	693a      	ldr	r2, [r7, #16]
 8008cb8:	2134      	movs	r1, #52	; 0x34
 8008cba:	fb01 f303 	mul.w	r3, r1, r3
 8008cbe:	4413      	add	r3, r2
 8008cc0:	3390      	adds	r3, #144	; 0x90
 8008cc2:	2208      	movs	r2, #8
 8008cc4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	75fb      	strb	r3, [r7, #23]
      break;
 8008cca:	e03b      	b.n	8008d44 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8008ccc:	78fb      	ldrb	r3, [r7, #3]
 8008cce:	2234      	movs	r2, #52	; 0x34
 8008cd0:	fb02 f303 	mul.w	r3, r2, r3
 8008cd4:	3398      	adds	r3, #152	; 0x98
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	4413      	add	r3, r2
 8008cda:	1d1a      	adds	r2, r3, #4
 8008cdc:	78fb      	ldrb	r3, [r7, #3]
 8008cde:	4619      	mov	r1, r3
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 fd52 	bl	800978a <USBH_MSC_SCSI_RequestSense>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008cea:	7bfb      	ldrb	r3, [r7, #15]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d113      	bne.n	8008d18 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008cf0:	78fb      	ldrb	r3, [r7, #3]
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	2134      	movs	r1, #52	; 0x34
 8008cf6:	fb01 f303 	mul.w	r3, r1, r3
 8008cfa:	4413      	add	r3, r2
 8008cfc:	3390      	adds	r3, #144	; 0x90
 8008cfe:	2201      	movs	r2, #1
 8008d00:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8008d02:	78fb      	ldrb	r3, [r7, #3]
 8008d04:	693a      	ldr	r2, [r7, #16]
 8008d06:	2134      	movs	r1, #52	; 0x34
 8008d08:	fb01 f303 	mul.w	r3, r1, r3
 8008d0c:	4413      	add	r3, r2
 8008d0e:	3391      	adds	r3, #145	; 0x91
 8008d10:	2202      	movs	r2, #2
 8008d12:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8008d14:	2302      	movs	r3, #2
 8008d16:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d014      	beq.n	8008d48 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
 8008d20:	2b04      	cmp	r3, #4
 8008d22:	d111      	bne.n	8008d48 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008d24:	78fb      	ldrb	r3, [r7, #3]
 8008d26:	693a      	ldr	r2, [r7, #16]
 8008d28:	2134      	movs	r1, #52	; 0x34
 8008d2a:	fb01 f303 	mul.w	r3, r1, r3
 8008d2e:	4413      	add	r3, r2
 8008d30:	3390      	adds	r3, #144	; 0x90
 8008d32:	2208      	movs	r2, #8
 8008d34:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008d36:	2302      	movs	r3, #2
 8008d38:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d3a:	e005      	b.n	8008d48 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8008d3c:	bf00      	nop
 8008d3e:	e004      	b.n	8008d4a <USBH_MSC_RdWrProcess+0x194>
      break;
 8008d40:	bf00      	nop
 8008d42:	e002      	b.n	8008d4a <USBH_MSC_RdWrProcess+0x194>
      break;
 8008d44:	bf00      	nop
 8008d46:	e000      	b.n	8008d4a <USBH_MSC_RdWrProcess+0x194>
      break;
 8008d48:	bf00      	nop

  }
  return error;
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3718      	adds	r7, #24
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	2b0b      	cmp	r3, #11
 8008d72:	d10c      	bne.n	8008d8e <USBH_MSC_UnitIsReady+0x3a>
 8008d74:	78fb      	ldrb	r3, [r7, #3]
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	2134      	movs	r1, #52	; 0x34
 8008d7a:	fb01 f303 	mul.w	r3, r1, r3
 8008d7e:	4413      	add	r3, r2
 8008d80:	3391      	adds	r3, #145	; 0x91
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d102      	bne.n	8008d8e <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	73fb      	strb	r3, [r7, #15]
 8008d8c:	e001      	b.n	8008d92 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	460b      	mov	r3, r1
 8008daa:	607a      	str	r2, [r7, #4]
 8008dac:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008db4:	69db      	ldr	r3, [r3, #28]
 8008db6:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	2b0b      	cmp	r3, #11
 8008dc0:	d10d      	bne.n	8008dde <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8008dc2:	7afb      	ldrb	r3, [r7, #11]
 8008dc4:	2234      	movs	r2, #52	; 0x34
 8008dc6:	fb02 f303 	mul.w	r3, r2, r3
 8008dca:	3390      	adds	r3, #144	; 0x90
 8008dcc:	697a      	ldr	r2, [r7, #20]
 8008dce:	4413      	add	r3, r2
 8008dd0:	2234      	movs	r2, #52	; 0x34
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f001 fe5f 	bl	800aa98 <memcpy>
    return USBH_OK;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	e000      	b.n	8008de0 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8008dde:	2302      	movs	r3, #2
  }
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b088      	sub	sp, #32
 8008dec:	af02      	add	r7, sp, #8
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	607a      	str	r2, [r7, #4]
 8008df2:	603b      	str	r3, [r7, #0]
 8008df4:	460b      	mov	r3, r1
 8008df6:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dfe:	69db      	ldr	r3, [r3, #28]
 8008e00:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00e      	beq.n	8008e2c <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008e14:	2b0b      	cmp	r3, #11
 8008e16:	d109      	bne.n	8008e2c <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008e18:	7afb      	ldrb	r3, [r7, #11]
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	2134      	movs	r1, #52	; 0x34
 8008e1e:	fb01 f303 	mul.w	r3, r1, r3
 8008e22:	4413      	add	r3, r2
 8008e24:	3390      	adds	r3, #144	; 0x90
 8008e26:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d001      	beq.n	8008e30 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8008e2c:	2302      	movs	r3, #2
 8008e2e:	e040      	b.n	8008eb2 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	2206      	movs	r2, #6
 8008e34:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8008e36:	7afb      	ldrb	r3, [r7, #11]
 8008e38:	697a      	ldr	r2, [r7, #20]
 8008e3a:	2134      	movs	r1, #52	; 0x34
 8008e3c:	fb01 f303 	mul.w	r3, r1, r3
 8008e40:	4413      	add	r3, r2
 8008e42:	3390      	adds	r3, #144	; 0x90
 8008e44:	2206      	movs	r2, #6
 8008e46:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008e48:	7afb      	ldrb	r3, [r7, #11]
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8008e52:	7af9      	ldrb	r1, [r7, #11]
 8008e54:	6a3b      	ldr	r3, [r7, #32]
 8008e56:	9300      	str	r3, [sp, #0]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f000 fd78 	bl	8009952 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e68:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008e6a:	e016      	b.n	8008e9a <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	1ad2      	subs	r2, r2, r3
 8008e76:	6a3b      	ldr	r3, [r7, #32]
 8008e78:	f242 7110 	movw	r1, #10000	; 0x2710
 8008e7c:	fb01 f303 	mul.w	r3, r1, r3
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d805      	bhi.n	8008e90 <USBH_MSC_Read+0xa8>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d104      	bne.n	8008e9a <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	2201      	movs	r2, #1
 8008e94:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008e96:	2302      	movs	r3, #2
 8008e98:	e00b      	b.n	8008eb2 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008e9a:	7afb      	ldrb	r3, [r7, #11]
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f7ff fe89 	bl	8008bb6 <USBH_MSC_RdWrProcess>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d0e0      	beq.n	8008e6c <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	2201      	movs	r2, #1
 8008eae:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3718      	adds	r7, #24
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b088      	sub	sp, #32
 8008ebe:	af02      	add	r7, sp, #8
 8008ec0:	60f8      	str	r0, [r7, #12]
 8008ec2:	607a      	str	r2, [r7, #4]
 8008ec4:	603b      	str	r3, [r7, #0]
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ed0:	69db      	ldr	r3, [r3, #28]
 8008ed2:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00e      	beq.n	8008efe <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008ee6:	2b0b      	cmp	r3, #11
 8008ee8:	d109      	bne.n	8008efe <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008eea:	7afb      	ldrb	r3, [r7, #11]
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	2134      	movs	r1, #52	; 0x34
 8008ef0:	fb01 f303 	mul.w	r3, r1, r3
 8008ef4:	4413      	add	r3, r2
 8008ef6:	3390      	adds	r3, #144	; 0x90
 8008ef8:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d001      	beq.n	8008f02 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8008efe:	2302      	movs	r3, #2
 8008f00:	e040      	b.n	8008f84 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	2207      	movs	r2, #7
 8008f06:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8008f08:	7afb      	ldrb	r3, [r7, #11]
 8008f0a:	697a      	ldr	r2, [r7, #20]
 8008f0c:	2134      	movs	r1, #52	; 0x34
 8008f0e:	fb01 f303 	mul.w	r3, r1, r3
 8008f12:	4413      	add	r3, r2
 8008f14:	3390      	adds	r3, #144	; 0x90
 8008f16:	2207      	movs	r2, #7
 8008f18:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008f1a:	7afb      	ldrb	r3, [r7, #11]
 8008f1c:	b29a      	uxth	r2, r3
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8008f24:	7af9      	ldrb	r1, [r7, #11]
 8008f26:	6a3b      	ldr	r3, [r7, #32]
 8008f28:	9300      	str	r3, [sp, #0]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f000 fca4 	bl	800987c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008f3a:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008f3c:	e016      	b.n	8008f6c <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	1ad2      	subs	r2, r2, r3
 8008f48:	6a3b      	ldr	r3, [r7, #32]
 8008f4a:	f242 7110 	movw	r1, #10000	; 0x2710
 8008f4e:	fb01 f303 	mul.w	r3, r1, r3
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d805      	bhi.n	8008f62 <USBH_MSC_Write+0xa8>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d104      	bne.n	8008f6c <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	2201      	movs	r2, #1
 8008f66:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008f68:	2302      	movs	r3, #2
 8008f6a:	e00b      	b.n	8008f84 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008f6c:	7afb      	ldrb	r3, [r7, #11]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f7ff fe20 	bl	8008bb6 <USBH_MSC_RdWrProcess>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d0e0      	beq.n	8008f3e <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3718      	adds	r7, #24
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2221      	movs	r2, #33	; 0x21
 8008f98:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	22ff      	movs	r2, #255	; 0xff
 8008f9e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 ff14 	bl	8009de4 <USBH_CtlReq>
 8008fbc:	4603      	mov	r3, r0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b082      	sub	sp, #8
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	22a1      	movs	r2, #161	; 0xa1
 8008fd4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	22fe      	movs	r2, #254	; 0xfe
 8008fda:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8008fee:	2201      	movs	r2, #1
 8008ff0:	6839      	ldr	r1, [r7, #0]
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fef6 	bl	8009de4 <USBH_CtlReq>
 8008ff8:	4603      	mov	r3, r0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
	...

08009004 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009012:	69db      	ldr	r3, [r3, #28]
 8009014:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	4a09      	ldr	r2, [pc, #36]	; (8009040 <USBH_MSC_BOT_Init+0x3c>)
 800901a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	4a09      	ldr	r2, [pc, #36]	; (8009044 <USBH_MSC_BOT_Init+0x40>)
 8009020:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr
 8009040:	43425355 	.word	0x43425355
 8009044:	20304050 	.word	0x20304050

08009048 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b088      	sub	sp, #32
 800904c:	af02      	add	r7, sp, #8
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	460b      	mov	r3, r1
 8009052:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009054:	2301      	movs	r3, #1
 8009056:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009058:	2301      	movs	r3, #1
 800905a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800905c:	2301      	movs	r3, #1
 800905e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009060:	2300      	movs	r3, #0
 8009062:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800906a:	69db      	ldr	r3, [r3, #28]
 800906c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800906e:	2300      	movs	r3, #0
 8009070:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009078:	3b01      	subs	r3, #1
 800907a:	2b0a      	cmp	r3, #10
 800907c:	f200 819e 	bhi.w	80093bc <USBH_MSC_BOT_Process+0x374>
 8009080:	a201      	add	r2, pc, #4	; (adr r2, 8009088 <USBH_MSC_BOT_Process+0x40>)
 8009082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009086:	bf00      	nop
 8009088:	080090b5 	.word	0x080090b5
 800908c:	080090dd 	.word	0x080090dd
 8009090:	08009147 	.word	0x08009147
 8009094:	08009165 	.word	0x08009165
 8009098:	080091e9 	.word	0x080091e9
 800909c:	0800920b 	.word	0x0800920b
 80090a0:	080092a3 	.word	0x080092a3
 80090a4:	080092bf 	.word	0x080092bf
 80090a8:	08009311 	.word	0x08009311
 80090ac:	08009341 	.word	0x08009341
 80090b0:	080093a3 	.word	0x080093a3
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	78fa      	ldrb	r2, [r7, #3]
 80090b8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	2202      	movs	r2, #2
 80090c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	795b      	ldrb	r3, [r3, #5]
 80090ce:	2201      	movs	r2, #1
 80090d0:	9200      	str	r2, [sp, #0]
 80090d2:	221f      	movs	r2, #31
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f001 f894 	bl	800a202 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80090da:	e17e      	b.n	80093da <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	795b      	ldrb	r3, [r3, #5]
 80090e0:	4619      	mov	r1, r3
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f001 fbcc 	bl	800a880 <USBH_LL_GetURBState>
 80090e8:	4603      	mov	r3, r0
 80090ea:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80090ec:	7d3b      	ldrb	r3, [r7, #20]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d118      	bne.n	8009124 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00f      	beq.n	800911a <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009100:	b25b      	sxtb	r3, r3
 8009102:	2b00      	cmp	r3, #0
 8009104:	da04      	bge.n	8009110 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	2203      	movs	r2, #3
 800910a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800910e:	e157      	b.n	80093c0 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	2205      	movs	r2, #5
 8009114:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009118:	e152      	b.n	80093c0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	2207      	movs	r2, #7
 800911e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009122:	e14d      	b.n	80093c0 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009124:	7d3b      	ldrb	r3, [r7, #20]
 8009126:	2b02      	cmp	r3, #2
 8009128:	d104      	bne.n	8009134 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	2201      	movs	r2, #1
 800912e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009132:	e145      	b.n	80093c0 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009134:	7d3b      	ldrb	r3, [r7, #20]
 8009136:	2b05      	cmp	r3, #5
 8009138:	f040 8142 	bne.w	80093c0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	220a      	movs	r2, #10
 8009140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009144:	e13c      	b.n	80093c0 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	895a      	ldrh	r2, [r3, #10]
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	791b      	ldrb	r3, [r3, #4]
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f001 f879 	bl	800a24c <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	2204      	movs	r2, #4
 800915e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009162:	e13a      	b.n	80093da <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	791b      	ldrb	r3, [r3, #4]
 8009168:	4619      	mov	r1, r3
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f001 fb88 	bl	800a880 <USBH_LL_GetURBState>
 8009170:	4603      	mov	r3, r0
 8009172:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009174:	7d3b      	ldrb	r3, [r7, #20]
 8009176:	2b01      	cmp	r3, #1
 8009178:	d12d      	bne.n	80091d6 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800917e:	693a      	ldr	r2, [r7, #16]
 8009180:	8952      	ldrh	r2, [r2, #10]
 8009182:	4293      	cmp	r3, r2
 8009184:	d910      	bls.n	80091a8 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800918c:	693a      	ldr	r2, [r7, #16]
 800918e:	8952      	ldrh	r2, [r2, #10]
 8009190:	441a      	add	r2, r3
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	8952      	ldrh	r2, [r2, #10]
 80091a0:	1a9a      	subs	r2, r3, r2
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80091a6:	e002      	b.n	80091ae <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	2200      	movs	r2, #0
 80091ac:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00a      	beq.n	80091cc <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	895a      	ldrh	r2, [r3, #10]
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	791b      	ldrb	r3, [r3, #4]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f001 f841 	bl	800a24c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80091ca:	e0fb      	b.n	80093c4 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	2207      	movs	r2, #7
 80091d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80091d4:	e0f6      	b.n	80093c4 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 80091d6:	7d3b      	ldrb	r3, [r7, #20]
 80091d8:	2b05      	cmp	r3, #5
 80091da:	f040 80f3 	bne.w	80093c4 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	2209      	movs	r2, #9
 80091e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80091e6:	e0ed      	b.n	80093c4 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	891a      	ldrh	r2, [r3, #8]
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	795b      	ldrb	r3, [r3, #5]
 80091f6:	2001      	movs	r0, #1
 80091f8:	9000      	str	r0, [sp, #0]
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f001 f801 	bl	800a202 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	2206      	movs	r2, #6
 8009204:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009208:	e0e7      	b.n	80093da <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	795b      	ldrb	r3, [r3, #5]
 800920e:	4619      	mov	r1, r3
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f001 fb35 	bl	800a880 <USBH_LL_GetURBState>
 8009216:	4603      	mov	r3, r0
 8009218:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800921a:	7d3b      	ldrb	r3, [r7, #20]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d12f      	bne.n	8009280 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	8912      	ldrh	r2, [r2, #8]
 8009228:	4293      	cmp	r3, r2
 800922a:	d910      	bls.n	800924e <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009232:	693a      	ldr	r2, [r7, #16]
 8009234:	8912      	ldrh	r2, [r2, #8]
 8009236:	441a      	add	r2, r3
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009242:	693a      	ldr	r2, [r7, #16]
 8009244:	8912      	ldrh	r2, [r2, #8]
 8009246:	1a9a      	subs	r2, r3, r2
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	65da      	str	r2, [r3, #92]	; 0x5c
 800924c:	e002      	b.n	8009254 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	2200      	movs	r2, #0
 8009252:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00c      	beq.n	8009276 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	891a      	ldrh	r2, [r3, #8]
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	795b      	ldrb	r3, [r3, #5]
 800926a:	2001      	movs	r0, #1
 800926c:	9000      	str	r0, [sp, #0]
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 ffc7 	bl	800a202 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009274:	e0a8      	b.n	80093c8 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	2207      	movs	r2, #7
 800927a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800927e:	e0a3      	b.n	80093c8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009280:	7d3b      	ldrb	r3, [r7, #20]
 8009282:	2b02      	cmp	r3, #2
 8009284:	d104      	bne.n	8009290 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	2205      	movs	r2, #5
 800928a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800928e:	e09b      	b.n	80093c8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009290:	7d3b      	ldrb	r3, [r7, #20]
 8009292:	2b05      	cmp	r3, #5
 8009294:	f040 8098 	bne.w	80093c8 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	220a      	movs	r2, #10
 800929c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80092a0:	e092      	b.n	80093c8 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	791b      	ldrb	r3, [r3, #4]
 80092ac:	220d      	movs	r2, #13
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 ffcc 	bl	800a24c <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	2208      	movs	r2, #8
 80092b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80092bc:	e08d      	b.n	80093da <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	791b      	ldrb	r3, [r3, #4]
 80092c2:	4619      	mov	r1, r3
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f001 fadb 	bl	800a880 <USBH_LL_GetURBState>
 80092ca:	4603      	mov	r3, r0
 80092cc:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80092ce:	7d3b      	ldrb	r3, [r7, #20]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d115      	bne.n	8009300 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f8a9 	bl	800943c <USBH_MSC_DecodeCSW>
 80092ea:	4603      	mov	r3, r0
 80092ec:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 80092ee:	7d7b      	ldrb	r3, [r7, #21]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d102      	bne.n	80092fa <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 80092f4:	2300      	movs	r3, #0
 80092f6:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 80092f8:	e068      	b.n	80093cc <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 80092fa:	2302      	movs	r3, #2
 80092fc:	75fb      	strb	r3, [r7, #23]
      break;
 80092fe:	e065      	b.n	80093cc <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009300:	7d3b      	ldrb	r3, [r7, #20]
 8009302:	2b05      	cmp	r3, #5
 8009304:	d162      	bne.n	80093cc <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	2209      	movs	r2, #9
 800930a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800930e:	e05d      	b.n	80093cc <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009310:	78fb      	ldrb	r3, [r7, #3]
 8009312:	2200      	movs	r2, #0
 8009314:	4619      	mov	r1, r3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f864 	bl	80093e4 <USBH_MSC_BOT_Abort>
 800931c:	4603      	mov	r3, r0
 800931e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009320:	7dbb      	ldrb	r3, [r7, #22]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d104      	bne.n	8009330 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	2207      	movs	r2, #7
 800932a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800932e:	e04f      	b.n	80093d0 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009330:	7dbb      	ldrb	r3, [r7, #22]
 8009332:	2b04      	cmp	r3, #4
 8009334:	d14c      	bne.n	80093d0 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	220b      	movs	r2, #11
 800933a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800933e:	e047      	b.n	80093d0 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009340:	78fb      	ldrb	r3, [r7, #3]
 8009342:	2201      	movs	r2, #1
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f84c 	bl	80093e4 <USBH_MSC_BOT_Abort>
 800934c:	4603      	mov	r3, r0
 800934e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009350:	7dbb      	ldrb	r3, [r7, #22]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d11d      	bne.n	8009392 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	795b      	ldrb	r3, [r3, #5]
 800935a:	4619      	mov	r1, r3
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f001 fae9 	bl	800a934 <USBH_LL_GetToggle>
 8009362:	4603      	mov	r3, r0
 8009364:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	7959      	ldrb	r1, [r3, #5]
 800936a:	7bfb      	ldrb	r3, [r7, #15]
 800936c:	f1c3 0301 	rsb	r3, r3, #1
 8009370:	b2db      	uxtb	r3, r3
 8009372:	461a      	mov	r2, r3
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f001 faad 	bl	800a8d4 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	791b      	ldrb	r3, [r3, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f001 faa6 	bl	800a8d4 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	2209      	movs	r2, #9
 800938c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009390:	e020      	b.n	80093d4 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8009392:	7dbb      	ldrb	r3, [r7, #22]
 8009394:	2b04      	cmp	r3, #4
 8009396:	d11d      	bne.n	80093d4 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	220b      	movs	r2, #11
 800939c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80093a0:	e018      	b.n	80093d4 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f7ff fdf2 	bl	8008f8c <USBH_MSC_BOT_REQ_Reset>
 80093a8:	4603      	mov	r3, r0
 80093aa:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80093ac:	7dfb      	ldrb	r3, [r7, #23]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d112      	bne.n	80093d8 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 80093ba:	e00d      	b.n	80093d8 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 80093bc:	bf00      	nop
 80093be:	e00c      	b.n	80093da <USBH_MSC_BOT_Process+0x392>
      break;
 80093c0:	bf00      	nop
 80093c2:	e00a      	b.n	80093da <USBH_MSC_BOT_Process+0x392>
      break;
 80093c4:	bf00      	nop
 80093c6:	e008      	b.n	80093da <USBH_MSC_BOT_Process+0x392>
      break;
 80093c8:	bf00      	nop
 80093ca:	e006      	b.n	80093da <USBH_MSC_BOT_Process+0x392>
      break;
 80093cc:	bf00      	nop
 80093ce:	e004      	b.n	80093da <USBH_MSC_BOT_Process+0x392>
      break;
 80093d0:	bf00      	nop
 80093d2:	e002      	b.n	80093da <USBH_MSC_BOT_Process+0x392>
      break;
 80093d4:	bf00      	nop
 80093d6:	e000      	b.n	80093da <USBH_MSC_BOT_Process+0x392>
      break;
 80093d8:	bf00      	nop
  }
  return status;
 80093da:	7dfb      	ldrb	r3, [r7, #23]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3718      	adds	r7, #24
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	460b      	mov	r3, r1
 80093ee:	70fb      	strb	r3, [r7, #3]
 80093f0:	4613      	mov	r3, r2
 80093f2:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80093f4:	2302      	movs	r3, #2
 80093f6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093fe:	69db      	ldr	r3, [r3, #28]
 8009400:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009402:	78bb      	ldrb	r3, [r7, #2]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <USBH_MSC_BOT_Abort+0x2a>
 8009408:	2b01      	cmp	r3, #1
 800940a:	d009      	beq.n	8009420 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800940c:	e011      	b.n	8009432 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	79db      	ldrb	r3, [r3, #7]
 8009412:	4619      	mov	r1, r3
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fcc1 	bl	8009d9c <USBH_ClrFeature>
 800941a:	4603      	mov	r3, r0
 800941c:	73fb      	strb	r3, [r7, #15]
      break;
 800941e:	e008      	b.n	8009432 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	799b      	ldrb	r3, [r3, #6]
 8009424:	4619      	mov	r1, r3
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fcb8 	bl	8009d9c <USBH_ClrFeature>
 800942c:	4603      	mov	r3, r0
 800942e:	73fb      	strb	r3, [r7, #15]
      break;
 8009430:	bf00      	nop
  }
  return status;
 8009432:	7bfb      	ldrb	r3, [r7, #15]
}
 8009434:	4618      	mov	r0, r3
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800944a:	69db      	ldr	r3, [r3, #28]
 800944c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800944e:	2301      	movs	r3, #1
 8009450:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	791b      	ldrb	r3, [r3, #4]
 8009456:	4619      	mov	r1, r3
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f001 f97f 	bl	800a75c <USBH_LL_GetLastXferSize>
 800945e:	4603      	mov	r3, r0
 8009460:	2b0d      	cmp	r3, #13
 8009462:	d002      	beq.n	800946a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009464:	2302      	movs	r3, #2
 8009466:	73fb      	strb	r3, [r7, #15]
 8009468:	e024      	b.n	80094b4 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800946e:	4a14      	ldr	r2, [pc, #80]	; (80094c0 <USBH_MSC_DecodeCSW+0x84>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d11d      	bne.n	80094b0 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800947c:	429a      	cmp	r2, r3
 800947e:	d119      	bne.n	80094b4 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009486:	2b00      	cmp	r3, #0
 8009488:	d102      	bne.n	8009490 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800948a:	2300      	movs	r3, #0
 800948c:	73fb      	strb	r3, [r7, #15]
 800948e:	e011      	b.n	80094b4 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009496:	2b01      	cmp	r3, #1
 8009498:	d102      	bne.n	80094a0 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800949a:	2301      	movs	r3, #1
 800949c:	73fb      	strb	r3, [r7, #15]
 800949e:	e009      	b.n	80094b4 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	d104      	bne.n	80094b4 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80094aa:	2302      	movs	r3, #2
 80094ac:	73fb      	strb	r3, [r7, #15]
 80094ae:	e001      	b.n	80094b4 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80094b0:	2302      	movs	r3, #2
 80094b2:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80094b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	53425355 	.word	0x53425355

080094c4 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	460b      	mov	r3, r1
 80094ce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80094d0:	2302      	movs	r3, #2
 80094d2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094da:	69db      	ldr	r3, [r3, #28]
 80094dc:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d002      	beq.n	80094ee <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80094e8:	2b02      	cmp	r3, #2
 80094ea:	d021      	beq.n	8009530 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80094ec:	e028      	b.n	8009540 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	2200      	movs	r2, #0
 80094f2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	220a      	movs	r2, #10
 8009500:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	3363      	adds	r3, #99	; 0x63
 8009508:	2210      	movs	r2, #16
 800950a:	2100      	movs	r1, #0
 800950c:	4618      	mov	r0, r3
 800950e:	f001 fad1 	bl	800aab4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	2201      	movs	r2, #1
 800951e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	2202      	movs	r2, #2
 8009526:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800952a:	2301      	movs	r3, #1
 800952c:	73fb      	strb	r3, [r7, #15]
      break;
 800952e:	e007      	b.n	8009540 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009530:	78fb      	ldrb	r3, [r7, #3]
 8009532:	4619      	mov	r1, r3
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f7ff fd87 	bl	8009048 <USBH_MSC_BOT_Process>
 800953a:	4603      	mov	r3, r0
 800953c:	73fb      	strb	r3, [r7, #15]
      break;
 800953e:	bf00      	nop
  }

  return error;
 8009540:	7bfb      	ldrb	r3, [r7, #15]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b086      	sub	sp, #24
 800954e:	af00      	add	r7, sp, #0
 8009550:	60f8      	str	r0, [r7, #12]
 8009552:	460b      	mov	r3, r1
 8009554:	607a      	str	r2, [r7, #4]
 8009556:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009558:	2301      	movs	r3, #1
 800955a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009562:	69db      	ldr	r3, [r3, #28]
 8009564:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800956c:	2b01      	cmp	r3, #1
 800956e:	d002      	beq.n	8009576 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009570:	2b02      	cmp	r3, #2
 8009572:	d027      	beq.n	80095c4 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009574:	e05f      	b.n	8009636 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	2208      	movs	r2, #8
 800957a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	2280      	movs	r2, #128	; 0x80
 8009580:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	220a      	movs	r2, #10
 8009588:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	3363      	adds	r3, #99	; 0x63
 8009590:	2210      	movs	r2, #16
 8009592:	2100      	movs	r1, #0
 8009594:	4618      	mov	r0, r3
 8009596:	f001 fa8d 	bl	800aab4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	2225      	movs	r2, #37	; 0x25
 800959e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	2202      	movs	r2, #2
 80095ae:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f103 0210 	add.w	r2, r3, #16
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80095be:	2301      	movs	r3, #1
 80095c0:	75fb      	strb	r3, [r7, #23]
      break;
 80095c2:	e038      	b.n	8009636 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80095c4:	7afb      	ldrb	r3, [r7, #11]
 80095c6:	4619      	mov	r1, r3
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f7ff fd3d 	bl	8009048 <USBH_MSC_BOT_Process>
 80095ce:	4603      	mov	r3, r0
 80095d0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80095d2:	7dfb      	ldrb	r3, [r7, #23]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d12d      	bne.n	8009634 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095de:	3303      	adds	r3, #3
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	461a      	mov	r2, r3
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095ea:	3302      	adds	r3, #2
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	021b      	lsls	r3, r3, #8
 80095f0:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095f8:	3301      	adds	r3, #1
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80095fe:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	061b      	lsls	r3, r3, #24
 800960a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009616:	3307      	adds	r3, #7
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	b29a      	uxth	r2, r3
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009622:	3306      	adds	r3, #6
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	b29b      	uxth	r3, r3
 8009628:	021b      	lsls	r3, r3, #8
 800962a:	b29b      	uxth	r3, r3
 800962c:	4313      	orrs	r3, r2
 800962e:	b29a      	uxth	r2, r3
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	809a      	strh	r2, [r3, #4]
      break;
 8009634:	bf00      	nop
  }

  return error;
 8009636:	7dfb      	ldrb	r3, [r7, #23]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3718      	adds	r7, #24
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b086      	sub	sp, #24
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	460b      	mov	r3, r1
 800964a:	607a      	str	r2, [r7, #4]
 800964c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800964e:	2302      	movs	r3, #2
 8009650:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009658:	69db      	ldr	r3, [r3, #28]
 800965a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009662:	2b01      	cmp	r3, #1
 8009664:	d002      	beq.n	800966c <USBH_MSC_SCSI_Inquiry+0x2c>
 8009666:	2b02      	cmp	r3, #2
 8009668:	d03d      	beq.n	80096e6 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800966a:	e089      	b.n	8009780 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	2224      	movs	r2, #36	; 0x24
 8009670:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	2280      	movs	r2, #128	; 0x80
 8009676:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	220a      	movs	r2, #10
 800967e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	3363      	adds	r3, #99	; 0x63
 8009686:	220a      	movs	r2, #10
 8009688:	2100      	movs	r1, #0
 800968a:	4618      	mov	r0, r3
 800968c:	f001 fa12 	bl	800aab4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	2212      	movs	r2, #18
 8009694:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009698:	7afb      	ldrb	r3, [r7, #11]
 800969a:	015b      	lsls	r3, r3, #5
 800969c:	b2da      	uxtb	r2, r3
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	2224      	movs	r2, #36	; 0x24
 80096b8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	2202      	movs	r2, #2
 80096d0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	f103 0210 	add.w	r2, r3, #16
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80096e0:	2301      	movs	r3, #1
 80096e2:	75fb      	strb	r3, [r7, #23]
      break;
 80096e4:	e04c      	b.n	8009780 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80096e6:	7afb      	ldrb	r3, [r7, #11]
 80096e8:	4619      	mov	r1, r3
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	f7ff fcac 	bl	8009048 <USBH_MSC_BOT_Process>
 80096f0:	4603      	mov	r3, r0
 80096f2:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80096f4:	7dfb      	ldrb	r3, [r7, #23]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d141      	bne.n	800977e <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80096fa:	2222      	movs	r2, #34	; 0x22
 80096fc:	2100      	movs	r1, #0
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f001 f9d8 	bl	800aab4 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	f003 031f 	and.w	r3, r3, #31
 8009710:	b2da      	uxtb	r2, r3
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	095b      	lsrs	r3, r3, #5
 8009720:	b2da      	uxtb	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800972c:	3301      	adds	r3, #1
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	b25b      	sxtb	r3, r3
 8009732:	2b00      	cmp	r3, #0
 8009734:	da03      	bge.n	800973e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2201      	movs	r2, #1
 800973a:	709a      	strb	r2, [r3, #2]
 800973c:	e002      	b.n	8009744 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	1cd8      	adds	r0, r3, #3
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800974e:	3308      	adds	r3, #8
 8009750:	2208      	movs	r2, #8
 8009752:	4619      	mov	r1, r3
 8009754:	f001 f9a0 	bl	800aa98 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f103 000c 	add.w	r0, r3, #12
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009764:	3310      	adds	r3, #16
 8009766:	2210      	movs	r2, #16
 8009768:	4619      	mov	r1, r3
 800976a:	f001 f995 	bl	800aa98 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	331d      	adds	r3, #29
 8009772:	693a      	ldr	r2, [r7, #16]
 8009774:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8009778:	3220      	adds	r2, #32
 800977a:	6812      	ldr	r2, [r2, #0]
 800977c:	601a      	str	r2, [r3, #0]
      break;
 800977e:	bf00      	nop
  }

  return error;
 8009780:	7dfb      	ldrb	r3, [r7, #23]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3718      	adds	r7, #24
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b086      	sub	sp, #24
 800978e:	af00      	add	r7, sp, #0
 8009790:	60f8      	str	r0, [r7, #12]
 8009792:	460b      	mov	r3, r1
 8009794:	607a      	str	r2, [r7, #4]
 8009796:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009798:	2302      	movs	r3, #2
 800979a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097a2:	69db      	ldr	r3, [r3, #28]
 80097a4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d002      	beq.n	80097b6 <USBH_MSC_SCSI_RequestSense+0x2c>
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d03d      	beq.n	8009830 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80097b4:	e05d      	b.n	8009872 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	220e      	movs	r2, #14
 80097ba:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	2280      	movs	r2, #128	; 0x80
 80097c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	220a      	movs	r2, #10
 80097c8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	3363      	adds	r3, #99	; 0x63
 80097d0:	2210      	movs	r2, #16
 80097d2:	2100      	movs	r1, #0
 80097d4:	4618      	mov	r0, r3
 80097d6:	f001 f96d 	bl	800aab4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	2203      	movs	r2, #3
 80097de:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80097e2:	7afb      	ldrb	r3, [r7, #11]
 80097e4:	015b      	lsls	r3, r3, #5
 80097e6:	b2da      	uxtb	r2, r3
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	220e      	movs	r2, #14
 8009802:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	2200      	movs	r2, #0
 800980a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	2201      	movs	r2, #1
 8009812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	2202      	movs	r2, #2
 800981a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	f103 0210 	add.w	r2, r3, #16
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800982a:	2301      	movs	r3, #1
 800982c:	75fb      	strb	r3, [r7, #23]
      break;
 800982e:	e020      	b.n	8009872 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009830:	7afb      	ldrb	r3, [r7, #11]
 8009832:	4619      	mov	r1, r3
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f7ff fc07 	bl	8009048 <USBH_MSC_BOT_Process>
 800983a:	4603      	mov	r3, r0
 800983c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800983e:	7dfb      	ldrb	r3, [r7, #23]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d115      	bne.n	8009870 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800984a:	3302      	adds	r3, #2
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	f003 030f 	and.w	r3, r3, #15
 8009852:	b2da      	uxtb	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800985e:	7b1a      	ldrb	r2, [r3, #12]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800986a:	7b5a      	ldrb	r2, [r3, #13]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	709a      	strb	r2, [r3, #2]
      break;
 8009870:	bf00      	nop
  }

  return error;
 8009872:	7dfb      	ldrb	r3, [r7, #23]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3718      	adds	r7, #24
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b086      	sub	sp, #24
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	607a      	str	r2, [r7, #4]
 8009886:	603b      	str	r3, [r7, #0]
 8009888:	460b      	mov	r3, r1
 800988a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800988c:	2302      	movs	r3, #2
 800988e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009896:	69db      	ldr	r3, [r3, #28]
 8009898:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d002      	beq.n	80098aa <USBH_MSC_SCSI_Write+0x2e>
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d047      	beq.n	8009938 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80098a8:	e04e      	b.n	8009948 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80098b0:	461a      	mov	r2, r3
 80098b2:	6a3b      	ldr	r3, [r7, #32]
 80098b4:	fb03 f202 	mul.w	r2, r3, r2
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	220a      	movs	r2, #10
 80098c8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	3363      	adds	r3, #99	; 0x63
 80098d0:	2210      	movs	r2, #16
 80098d2:	2100      	movs	r1, #0
 80098d4:	4618      	mov	r0, r3
 80098d6:	f001 f8ed 	bl	800aab4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	222a      	movs	r2, #42	; 0x2a
 80098de:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80098e2:	79fa      	ldrb	r2, [r7, #7]
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80098ea:	79ba      	ldrb	r2, [r7, #6]
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80098f2:	797a      	ldrb	r2, [r7, #5]
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80098fa:	1d3b      	adds	r3, r7, #4
 80098fc:	781a      	ldrb	r2, [r3, #0]
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009904:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800990e:	f107 0320 	add.w	r3, r7, #32
 8009912:	781a      	ldrb	r2, [r3, #0]
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	2201      	movs	r2, #1
 800991e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	2202      	movs	r2, #2
 8009926:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	683a      	ldr	r2, [r7, #0]
 800992e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009932:	2301      	movs	r3, #1
 8009934:	75fb      	strb	r3, [r7, #23]
      break;
 8009936:	e007      	b.n	8009948 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009938:	7afb      	ldrb	r3, [r7, #11]
 800993a:	4619      	mov	r1, r3
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f7ff fb83 	bl	8009048 <USBH_MSC_BOT_Process>
 8009942:	4603      	mov	r3, r0
 8009944:	75fb      	strb	r3, [r7, #23]
      break;
 8009946:	bf00      	nop
  }

  return error;
 8009948:	7dfb      	ldrb	r3, [r7, #23]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3718      	adds	r7, #24
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8009952:	b580      	push	{r7, lr}
 8009954:	b086      	sub	sp, #24
 8009956:	af00      	add	r7, sp, #0
 8009958:	60f8      	str	r0, [r7, #12]
 800995a:	607a      	str	r2, [r7, #4]
 800995c:	603b      	str	r3, [r7, #0]
 800995e:	460b      	mov	r3, r1
 8009960:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009962:	2302      	movs	r3, #2
 8009964:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800996c:	69db      	ldr	r3, [r3, #28]
 800996e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009976:	2b01      	cmp	r3, #1
 8009978:	d002      	beq.n	8009980 <USBH_MSC_SCSI_Read+0x2e>
 800997a:	2b02      	cmp	r3, #2
 800997c:	d047      	beq.n	8009a0e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800997e:	e04e      	b.n	8009a1e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009986:	461a      	mov	r2, r3
 8009988:	6a3b      	ldr	r3, [r7, #32]
 800998a:	fb03 f202 	mul.w	r2, r3, r2
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	2280      	movs	r2, #128	; 0x80
 8009996:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	220a      	movs	r2, #10
 800999e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	3363      	adds	r3, #99	; 0x63
 80099a6:	2210      	movs	r2, #16
 80099a8:	2100      	movs	r1, #0
 80099aa:	4618      	mov	r0, r3
 80099ac:	f001 f882 	bl	800aab4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	2228      	movs	r2, #40	; 0x28
 80099b4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80099b8:	79fa      	ldrb	r2, [r7, #7]
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80099c0:	79ba      	ldrb	r2, [r7, #6]
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80099c8:	797a      	ldrb	r2, [r7, #5]
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80099d0:	1d3b      	adds	r3, r7, #4
 80099d2:	781a      	ldrb	r2, [r3, #0]
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80099da:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80099e4:	f107 0320 	add.w	r3, r7, #32
 80099e8:	781a      	ldrb	r2, [r3, #0]
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	2201      	movs	r2, #1
 80099f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	2202      	movs	r2, #2
 80099fc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8009a0c:	e007      	b.n	8009a1e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009a0e:	7afb      	ldrb	r3, [r7, #11]
 8009a10:	4619      	mov	r1, r3
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f7ff fb18 	bl	8009048 <USBH_MSC_BOT_Process>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8009a1c:	bf00      	nop
  }

  return error;
 8009a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3718      	adds	r7, #24
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	4613      	mov	r3, r2
 8009a34:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d101      	bne.n	8009a40 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009a3c:	2302      	movs	r3, #2
 8009a3e:	e029      	b.n	8009a94 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	79fa      	ldrb	r2, [r7, #7]
 8009a44:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f000 f81f 	bl	8009a9c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d003      	beq.n	8009a8c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f000 fdf3 	bl	800a678 <USBH_LL_Init>

  return USBH_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	60fb      	str	r3, [r7, #12]
 8009aac:	e009      	b.n	8009ac2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	33e0      	adds	r3, #224	; 0xe0
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	4413      	add	r3, r2
 8009ab8:	2200      	movs	r2, #0
 8009aba:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	60fb      	str	r3, [r7, #12]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2b0f      	cmp	r3, #15
 8009ac6:	d9f2      	bls.n	8009aae <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009ac8:	2300      	movs	r3, #0
 8009aca:	60fb      	str	r3, [r7, #12]
 8009acc:	e009      	b.n	8009ae2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009ad8:	2200      	movs	r2, #0
 8009ada:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	60fb      	str	r3, [r7, #12]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ae8:	d3f1      	bcc.n	8009ace <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2201      	movs	r2, #1
 8009afa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2240      	movs	r2, #64	; 0x40
 8009b0e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2201      	movs	r2, #1
 8009b22:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3714      	adds	r7, #20
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d016      	beq.n	8009b86 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10e      	bne.n	8009b80 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009b68:	1c59      	adds	r1, r3, #1
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	33de      	adds	r3, #222	; 0xde
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	73fb      	strb	r3, [r7, #15]
 8009b7e:	e004      	b.n	8009b8a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009b80:	2302      	movs	r3, #2
 8009b82:	73fb      	strb	r3, [r7, #15]
 8009b84:	e001      	b.n	8009b8a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009b86:	2302      	movs	r3, #2
 8009b88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3714      	adds	r7, #20
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009bae:	78fa      	ldrb	r2, [r7, #3]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d204      	bcs.n	8009bbe <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	78fa      	ldrb	r2, [r7, #3]
 8009bb8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009bbc:	e001      	b.n	8009bc2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009bbe:	2302      	movs	r3, #2
 8009bc0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3714      	adds	r7, #20
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b087      	sub	sp, #28
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	4608      	mov	r0, r1
 8009bda:	4611      	mov	r1, r2
 8009bdc:	461a      	mov	r2, r3
 8009bde:	4603      	mov	r3, r0
 8009be0:	70fb      	strb	r3, [r7, #3]
 8009be2:	460b      	mov	r3, r1
 8009be4:	70bb      	strb	r3, [r7, #2]
 8009be6:	4613      	mov	r3, r2
 8009be8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009bea:	2300      	movs	r3, #0
 8009bec:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009bf8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009bfa:	e025      	b.n	8009c48 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009bfc:	7dfb      	ldrb	r3, [r7, #23]
 8009bfe:	221a      	movs	r2, #26
 8009c00:	fb02 f303 	mul.w	r3, r2, r3
 8009c04:	3308      	adds	r3, #8
 8009c06:	68fa      	ldr	r2, [r7, #12]
 8009c08:	4413      	add	r3, r2
 8009c0a:	3302      	adds	r3, #2
 8009c0c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	795b      	ldrb	r3, [r3, #5]
 8009c12:	78fa      	ldrb	r2, [r7, #3]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d002      	beq.n	8009c1e <USBH_FindInterface+0x4e>
 8009c18:	78fb      	ldrb	r3, [r7, #3]
 8009c1a:	2bff      	cmp	r3, #255	; 0xff
 8009c1c:	d111      	bne.n	8009c42 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009c22:	78ba      	ldrb	r2, [r7, #2]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d002      	beq.n	8009c2e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009c28:	78bb      	ldrb	r3, [r7, #2]
 8009c2a:	2bff      	cmp	r3, #255	; 0xff
 8009c2c:	d109      	bne.n	8009c42 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009c32:	787a      	ldrb	r2, [r7, #1]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d002      	beq.n	8009c3e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009c38:	787b      	ldrb	r3, [r7, #1]
 8009c3a:	2bff      	cmp	r3, #255	; 0xff
 8009c3c:	d101      	bne.n	8009c42 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009c3e:	7dfb      	ldrb	r3, [r7, #23]
 8009c40:	e006      	b.n	8009c50 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009c42:	7dfb      	ldrb	r3, [r7, #23]
 8009c44:	3301      	adds	r3, #1
 8009c46:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009c48:	7dfb      	ldrb	r3, [r7, #23]
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d9d6      	bls.n	8009bfc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009c4e:	23ff      	movs	r3, #255	; 0xff
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	371c      	adds	r7, #28
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 fd43 	bl	800a6f0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009c6a:	2101      	movs	r1, #1
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fe1a 	bl	800a8a6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3708      	adds	r7, #8
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	683a      	ldr	r2, [r7, #0]
 8009c8a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009c8e:	bf00      	nop
 8009c90:	370c      	adds	r7, #12
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr

08009c9a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b082      	sub	sp, #8
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009ca8:	1c5a      	adds	r2, r3, #1
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 f804 	bl	8009cbe <USBH_HandleSof>
}
 8009cb6:	bf00      	nop
 8009cb8:	3708      	adds	r7, #8
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b082      	sub	sp, #8
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b0b      	cmp	r3, #11
 8009cce:	d10a      	bne.n	8009ce6 <USBH_HandleSof+0x28>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d005      	beq.n	8009ce6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ce0:	699b      	ldr	r3, [r3, #24]
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	4798      	blx	r3
  }
}
 8009ce6:	bf00      	nop
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b083      	sub	sp, #12
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009cfe:	bf00      	nop
}
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009d0a:	b480      	push	{r7}
 8009d0c:	b083      	sub	sp, #12
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009d1a:	bf00      	nop
}
 8009d1c:	370c      	adds	r7, #12
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr

08009d26 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009d26:	b480      	push	{r7}
 8009d28:	b083      	sub	sp, #12
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2201      	movs	r2, #1
 8009d32:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 fcd6 	bl	800a726 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	791b      	ldrb	r3, [r3, #4]
 8009d7e:	4619      	mov	r1, r3
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 fad1 	bl	800a328 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	795b      	ldrb	r3, [r3, #5]
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 facb 	bl	800a328 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009d92:	2300      	movs	r3, #0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	460b      	mov	r3, r1
 8009da6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	789b      	ldrb	r3, [r3, #2]
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d10f      	bne.n	8009dd0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2202      	movs	r2, #2
 8009db4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2201      	movs	r2, #1
 8009dba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009dc2:	78fb      	ldrb	r3, [r7, #3]
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f805 	bl	8009de4 <USBH_CtlReq>
 8009dda:	4603      	mov	r3, r0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b086      	sub	sp, #24
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	4613      	mov	r3, r2
 8009df0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009df2:	2301      	movs	r3, #1
 8009df4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	789b      	ldrb	r3, [r3, #2]
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d002      	beq.n	8009e04 <USBH_CtlReq+0x20>
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d00f      	beq.n	8009e22 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009e02:	e027      	b.n	8009e54 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	68ba      	ldr	r2, [r7, #8]
 8009e08:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	88fa      	ldrh	r2, [r7, #6]
 8009e0e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2201      	movs	r2, #1
 8009e14:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2202      	movs	r2, #2
 8009e1a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	75fb      	strb	r3, [r7, #23]
      break;
 8009e20:	e018      	b.n	8009e54 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f000 f81c 	bl	8009e60 <USBH_HandleControl>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009e2c:	7dfb      	ldrb	r3, [r7, #23]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d002      	beq.n	8009e38 <USBH_CtlReq+0x54>
 8009e32:	7dfb      	ldrb	r3, [r7, #23]
 8009e34:	2b03      	cmp	r3, #3
 8009e36:	d106      	bne.n	8009e46 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	761a      	strb	r2, [r3, #24]
      break;
 8009e44:	e005      	b.n	8009e52 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009e46:	7dfb      	ldrb	r3, [r7, #23]
 8009e48:	2b02      	cmp	r3, #2
 8009e4a:	d102      	bne.n	8009e52 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	709a      	strb	r2, [r3, #2]
      break;
 8009e52:	bf00      	nop
  }
  return status;
 8009e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
	...

08009e60 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b086      	sub	sp, #24
 8009e64:	af02      	add	r7, sp, #8
 8009e66:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	7e1b      	ldrb	r3, [r3, #24]
 8009e74:	3b01      	subs	r3, #1
 8009e76:	2b0a      	cmp	r3, #10
 8009e78:	f200 8156 	bhi.w	800a128 <USBH_HandleControl+0x2c8>
 8009e7c:	a201      	add	r2, pc, #4	; (adr r2, 8009e84 <USBH_HandleControl+0x24>)
 8009e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e82:	bf00      	nop
 8009e84:	08009eb1 	.word	0x08009eb1
 8009e88:	08009ecb 	.word	0x08009ecb
 8009e8c:	08009f35 	.word	0x08009f35
 8009e90:	08009f5b 	.word	0x08009f5b
 8009e94:	08009f93 	.word	0x08009f93
 8009e98:	08009fbd 	.word	0x08009fbd
 8009e9c:	0800a00f 	.word	0x0800a00f
 8009ea0:	0800a031 	.word	0x0800a031
 8009ea4:	0800a06d 	.word	0x0800a06d
 8009ea8:	0800a093 	.word	0x0800a093
 8009eac:	0800a0d1 	.word	0x0800a0d1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f103 0110 	add.w	r1, r3, #16
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	795b      	ldrb	r3, [r3, #5]
 8009eba:	461a      	mov	r2, r3
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 f943 	bl	800a148 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2202      	movs	r2, #2
 8009ec6:	761a      	strb	r2, [r3, #24]
      break;
 8009ec8:	e139      	b.n	800a13e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	795b      	ldrb	r3, [r3, #5]
 8009ece:	4619      	mov	r1, r3
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 fcd5 	bl	800a880 <USBH_LL_GetURBState>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009eda:	7bbb      	ldrb	r3, [r7, #14]
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d11e      	bne.n	8009f1e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	7c1b      	ldrb	r3, [r3, #16]
 8009ee4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009ee8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	8adb      	ldrh	r3, [r3, #22]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00a      	beq.n	8009f08 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009ef2:	7b7b      	ldrb	r3, [r7, #13]
 8009ef4:	2b80      	cmp	r3, #128	; 0x80
 8009ef6:	d103      	bne.n	8009f00 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2203      	movs	r2, #3
 8009efc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009efe:	e115      	b.n	800a12c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2205      	movs	r2, #5
 8009f04:	761a      	strb	r2, [r3, #24]
      break;
 8009f06:	e111      	b.n	800a12c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009f08:	7b7b      	ldrb	r3, [r7, #13]
 8009f0a:	2b80      	cmp	r3, #128	; 0x80
 8009f0c:	d103      	bne.n	8009f16 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2209      	movs	r2, #9
 8009f12:	761a      	strb	r2, [r3, #24]
      break;
 8009f14:	e10a      	b.n	800a12c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2207      	movs	r2, #7
 8009f1a:	761a      	strb	r2, [r3, #24]
      break;
 8009f1c:	e106      	b.n	800a12c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009f1e:	7bbb      	ldrb	r3, [r7, #14]
 8009f20:	2b04      	cmp	r3, #4
 8009f22:	d003      	beq.n	8009f2c <USBH_HandleControl+0xcc>
 8009f24:	7bbb      	ldrb	r3, [r7, #14]
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	f040 8100 	bne.w	800a12c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	220b      	movs	r2, #11
 8009f30:	761a      	strb	r2, [r3, #24]
      break;
 8009f32:	e0fb      	b.n	800a12c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009f3a:	b29a      	uxth	r2, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6899      	ldr	r1, [r3, #8]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	899a      	ldrh	r2, [r3, #12]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	791b      	ldrb	r3, [r3, #4]
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 f93a 	bl	800a1c6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2204      	movs	r2, #4
 8009f56:	761a      	strb	r2, [r3, #24]
      break;
 8009f58:	e0f1      	b.n	800a13e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	791b      	ldrb	r3, [r3, #4]
 8009f5e:	4619      	mov	r1, r3
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 fc8d 	bl	800a880 <USBH_LL_GetURBState>
 8009f66:	4603      	mov	r3, r0
 8009f68:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009f6a:	7bbb      	ldrb	r3, [r7, #14]
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d102      	bne.n	8009f76 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2209      	movs	r2, #9
 8009f74:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009f76:	7bbb      	ldrb	r3, [r7, #14]
 8009f78:	2b05      	cmp	r3, #5
 8009f7a:	d102      	bne.n	8009f82 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009f7c:	2303      	movs	r3, #3
 8009f7e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f80:	e0d6      	b.n	800a130 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009f82:	7bbb      	ldrb	r3, [r7, #14]
 8009f84:	2b04      	cmp	r3, #4
 8009f86:	f040 80d3 	bne.w	800a130 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	220b      	movs	r2, #11
 8009f8e:	761a      	strb	r2, [r3, #24]
      break;
 8009f90:	e0ce      	b.n	800a130 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6899      	ldr	r1, [r3, #8]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	899a      	ldrh	r2, [r3, #12]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	795b      	ldrb	r3, [r3, #5]
 8009f9e:	2001      	movs	r0, #1
 8009fa0:	9000      	str	r0, [sp, #0]
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 f8ea 	bl	800a17c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009fae:	b29a      	uxth	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2206      	movs	r2, #6
 8009fb8:	761a      	strb	r2, [r3, #24]
      break;
 8009fba:	e0c0      	b.n	800a13e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	795b      	ldrb	r3, [r3, #5]
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 fc5c 	bl	800a880 <USBH_LL_GetURBState>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009fcc:	7bbb      	ldrb	r3, [r7, #14]
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d103      	bne.n	8009fda <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2207      	movs	r2, #7
 8009fd6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009fd8:	e0ac      	b.n	800a134 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009fda:	7bbb      	ldrb	r3, [r7, #14]
 8009fdc:	2b05      	cmp	r3, #5
 8009fde:	d105      	bne.n	8009fec <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	220c      	movs	r2, #12
 8009fe4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	73fb      	strb	r3, [r7, #15]
      break;
 8009fea:	e0a3      	b.n	800a134 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009fec:	7bbb      	ldrb	r3, [r7, #14]
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d103      	bne.n	8009ffa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2205      	movs	r2, #5
 8009ff6:	761a      	strb	r2, [r3, #24]
      break;
 8009ff8:	e09c      	b.n	800a134 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009ffa:	7bbb      	ldrb	r3, [r7, #14]
 8009ffc:	2b04      	cmp	r3, #4
 8009ffe:	f040 8099 	bne.w	800a134 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	220b      	movs	r2, #11
 800a006:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a008:	2302      	movs	r3, #2
 800a00a:	73fb      	strb	r3, [r7, #15]
      break;
 800a00c:	e092      	b.n	800a134 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	791b      	ldrb	r3, [r3, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	2100      	movs	r1, #0
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 f8d5 	bl	800a1c6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a022:	b29a      	uxth	r2, r3
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2208      	movs	r2, #8
 800a02c:	761a      	strb	r2, [r3, #24]

      break;
 800a02e:	e086      	b.n	800a13e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	791b      	ldrb	r3, [r3, #4]
 800a034:	4619      	mov	r1, r3
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 fc22 	bl	800a880 <USBH_LL_GetURBState>
 800a03c:	4603      	mov	r3, r0
 800a03e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a040:	7bbb      	ldrb	r3, [r7, #14]
 800a042:	2b01      	cmp	r3, #1
 800a044:	d105      	bne.n	800a052 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	220d      	movs	r2, #13
 800a04a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a04c:	2300      	movs	r3, #0
 800a04e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a050:	e072      	b.n	800a138 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a052:	7bbb      	ldrb	r3, [r7, #14]
 800a054:	2b04      	cmp	r3, #4
 800a056:	d103      	bne.n	800a060 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	220b      	movs	r2, #11
 800a05c:	761a      	strb	r2, [r3, #24]
      break;
 800a05e:	e06b      	b.n	800a138 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a060:	7bbb      	ldrb	r3, [r7, #14]
 800a062:	2b05      	cmp	r3, #5
 800a064:	d168      	bne.n	800a138 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a066:	2303      	movs	r3, #3
 800a068:	73fb      	strb	r3, [r7, #15]
      break;
 800a06a:	e065      	b.n	800a138 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	795b      	ldrb	r3, [r3, #5]
 800a070:	2201      	movs	r2, #1
 800a072:	9200      	str	r2, [sp, #0]
 800a074:	2200      	movs	r2, #0
 800a076:	2100      	movs	r1, #0
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 f87f 	bl	800a17c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a084:	b29a      	uxth	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	220a      	movs	r2, #10
 800a08e:	761a      	strb	r2, [r3, #24]
      break;
 800a090:	e055      	b.n	800a13e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	795b      	ldrb	r3, [r3, #5]
 800a096:	4619      	mov	r1, r3
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 fbf1 	bl	800a880 <USBH_LL_GetURBState>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a0a2:	7bbb      	ldrb	r3, [r7, #14]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d105      	bne.n	800a0b4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	220d      	movs	r2, #13
 800a0b0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a0b2:	e043      	b.n	800a13c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a0b4:	7bbb      	ldrb	r3, [r7, #14]
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d103      	bne.n	800a0c2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2209      	movs	r2, #9
 800a0be:	761a      	strb	r2, [r3, #24]
      break;
 800a0c0:	e03c      	b.n	800a13c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a0c2:	7bbb      	ldrb	r3, [r7, #14]
 800a0c4:	2b04      	cmp	r3, #4
 800a0c6:	d139      	bne.n	800a13c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	220b      	movs	r2, #11
 800a0cc:	761a      	strb	r2, [r3, #24]
      break;
 800a0ce:	e035      	b.n	800a13c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	7e5b      	ldrb	r3, [r3, #25]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	b2da      	uxtb	r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	765a      	strb	r2, [r3, #25]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	7e5b      	ldrb	r3, [r3, #25]
 800a0e0:	2b02      	cmp	r3, #2
 800a0e2:	d806      	bhi.n	800a0f2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a0f0:	e025      	b.n	800a13e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a0f8:	2106      	movs	r1, #6
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	795b      	ldrb	r3, [r3, #5]
 800a108:	4619      	mov	r1, r3
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f90c 	bl	800a328 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	791b      	ldrb	r3, [r3, #4]
 800a114:	4619      	mov	r1, r3
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 f906 	bl	800a328 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a122:	2302      	movs	r3, #2
 800a124:	73fb      	strb	r3, [r7, #15]
      break;
 800a126:	e00a      	b.n	800a13e <USBH_HandleControl+0x2de>

    default:
      break;
 800a128:	bf00      	nop
 800a12a:	e008      	b.n	800a13e <USBH_HandleControl+0x2de>
      break;
 800a12c:	bf00      	nop
 800a12e:	e006      	b.n	800a13e <USBH_HandleControl+0x2de>
      break;
 800a130:	bf00      	nop
 800a132:	e004      	b.n	800a13e <USBH_HandleControl+0x2de>
      break;
 800a134:	bf00      	nop
 800a136:	e002      	b.n	800a13e <USBH_HandleControl+0x2de>
      break;
 800a138:	bf00      	nop
 800a13a:	e000      	b.n	800a13e <USBH_HandleControl+0x2de>
      break;
 800a13c:	bf00      	nop
  }

  return status;
 800a13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b088      	sub	sp, #32
 800a14c:	af04      	add	r7, sp, #16
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	4613      	mov	r3, r2
 800a154:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a156:	79f9      	ldrb	r1, [r7, #7]
 800a158:	2300      	movs	r3, #0
 800a15a:	9303      	str	r3, [sp, #12]
 800a15c:	2308      	movs	r3, #8
 800a15e:	9302      	str	r3, [sp, #8]
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	9301      	str	r3, [sp, #4]
 800a164:	2300      	movs	r3, #0
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	2300      	movs	r3, #0
 800a16a:	2200      	movs	r2, #0
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f000 fb56 	bl	800a81e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a172:	2300      	movs	r3, #0
}
 800a174:	4618      	mov	r0, r3
 800a176:	3710      	adds	r7, #16
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b088      	sub	sp, #32
 800a180:	af04      	add	r7, sp, #16
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	4611      	mov	r1, r2
 800a188:	461a      	mov	r2, r3
 800a18a:	460b      	mov	r3, r1
 800a18c:	80fb      	strh	r3, [r7, #6]
 800a18e:	4613      	mov	r3, r2
 800a190:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d001      	beq.n	800a1a0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a19c:	2300      	movs	r3, #0
 800a19e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a1a0:	7979      	ldrb	r1, [r7, #5]
 800a1a2:	7e3b      	ldrb	r3, [r7, #24]
 800a1a4:	9303      	str	r3, [sp, #12]
 800a1a6:	88fb      	ldrh	r3, [r7, #6]
 800a1a8:	9302      	str	r3, [sp, #8]
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	9301      	str	r3, [sp, #4]
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f000 fb31 	bl	800a81e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3710      	adds	r7, #16
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b088      	sub	sp, #32
 800a1ca:	af04      	add	r7, sp, #16
 800a1cc:	60f8      	str	r0, [r7, #12]
 800a1ce:	60b9      	str	r1, [r7, #8]
 800a1d0:	4611      	mov	r1, r2
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	80fb      	strh	r3, [r7, #6]
 800a1d8:	4613      	mov	r3, r2
 800a1da:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a1dc:	7979      	ldrb	r1, [r7, #5]
 800a1de:	2300      	movs	r3, #0
 800a1e0:	9303      	str	r3, [sp, #12]
 800a1e2:	88fb      	ldrh	r3, [r7, #6]
 800a1e4:	9302      	str	r3, [sp, #8]
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	9301      	str	r3, [sp, #4]
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f000 fb13 	bl	800a81e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a1f8:	2300      	movs	r3, #0

}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b088      	sub	sp, #32
 800a206:	af04      	add	r7, sp, #16
 800a208:	60f8      	str	r0, [r7, #12]
 800a20a:	60b9      	str	r1, [r7, #8]
 800a20c:	4611      	mov	r1, r2
 800a20e:	461a      	mov	r2, r3
 800a210:	460b      	mov	r3, r1
 800a212:	80fb      	strh	r3, [r7, #6]
 800a214:	4613      	mov	r3, r2
 800a216:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d001      	beq.n	800a226 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a222:	2300      	movs	r3, #0
 800a224:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a226:	7979      	ldrb	r1, [r7, #5]
 800a228:	7e3b      	ldrb	r3, [r7, #24]
 800a22a:	9303      	str	r3, [sp, #12]
 800a22c:	88fb      	ldrh	r3, [r7, #6]
 800a22e:	9302      	str	r3, [sp, #8]
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	9301      	str	r3, [sp, #4]
 800a234:	2301      	movs	r3, #1
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	2302      	movs	r3, #2
 800a23a:	2200      	movs	r2, #0
 800a23c:	68f8      	ldr	r0, [r7, #12]
 800a23e:	f000 faee 	bl	800a81e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	3710      	adds	r7, #16
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b088      	sub	sp, #32
 800a250:	af04      	add	r7, sp, #16
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	4611      	mov	r1, r2
 800a258:	461a      	mov	r2, r3
 800a25a:	460b      	mov	r3, r1
 800a25c:	80fb      	strh	r3, [r7, #6]
 800a25e:	4613      	mov	r3, r2
 800a260:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a262:	7979      	ldrb	r1, [r7, #5]
 800a264:	2300      	movs	r3, #0
 800a266:	9303      	str	r3, [sp, #12]
 800a268:	88fb      	ldrh	r3, [r7, #6]
 800a26a:	9302      	str	r3, [sp, #8]
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	9301      	str	r3, [sp, #4]
 800a270:	2301      	movs	r3, #1
 800a272:	9300      	str	r3, [sp, #0]
 800a274:	2302      	movs	r3, #2
 800a276:	2201      	movs	r2, #1
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f000 fad0 	bl	800a81e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3710      	adds	r7, #16
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b086      	sub	sp, #24
 800a28c:	af04      	add	r7, sp, #16
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	4608      	mov	r0, r1
 800a292:	4611      	mov	r1, r2
 800a294:	461a      	mov	r2, r3
 800a296:	4603      	mov	r3, r0
 800a298:	70fb      	strb	r3, [r7, #3]
 800a29a:	460b      	mov	r3, r1
 800a29c:	70bb      	strb	r3, [r7, #2]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a2a2:	7878      	ldrb	r0, [r7, #1]
 800a2a4:	78ba      	ldrb	r2, [r7, #2]
 800a2a6:	78f9      	ldrb	r1, [r7, #3]
 800a2a8:	8b3b      	ldrh	r3, [r7, #24]
 800a2aa:	9302      	str	r3, [sp, #8]
 800a2ac:	7d3b      	ldrb	r3, [r7, #20]
 800a2ae:	9301      	str	r3, [sp, #4]
 800a2b0:	7c3b      	ldrb	r3, [r7, #16]
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fa63 	bl	800a782 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3708      	adds	r7, #8
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b082      	sub	sp, #8
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a2d2:	78fb      	ldrb	r3, [r7, #3]
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 fa82 	bl	800a7e0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b084      	sub	sp, #16
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 f836 	bl	800a364 <USBH_GetFreePipe>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a2fc:	89fb      	ldrh	r3, [r7, #14]
 800a2fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a302:	4293      	cmp	r3, r2
 800a304:	d00a      	beq.n	800a31c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a306:	78fa      	ldrb	r2, [r7, #3]
 800a308:	89fb      	ldrh	r3, [r7, #14]
 800a30a:	f003 030f 	and.w	r3, r3, #15
 800a30e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a312:	6879      	ldr	r1, [r7, #4]
 800a314:	33e0      	adds	r3, #224	; 0xe0
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	440b      	add	r3, r1
 800a31a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a31c:	89fb      	ldrh	r3, [r7, #14]
 800a31e:	b2db      	uxtb	r3, r3
}
 800a320:	4618      	mov	r0, r3
 800a322:	3710      	adds	r7, #16
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	460b      	mov	r3, r1
 800a332:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a334:	78fb      	ldrb	r3, [r7, #3]
 800a336:	2b0f      	cmp	r3, #15
 800a338:	d80d      	bhi.n	800a356 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a33a:	78fb      	ldrb	r3, [r7, #3]
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	33e0      	adds	r3, #224	; 0xe0
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	4413      	add	r3, r2
 800a344:	685a      	ldr	r2, [r3, #4]
 800a346:	78fb      	ldrb	r3, [r7, #3]
 800a348:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a34c:	6879      	ldr	r1, [r7, #4]
 800a34e:	33e0      	adds	r3, #224	; 0xe0
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	440b      	add	r3, r1
 800a354:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	370c      	adds	r7, #12
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a36c:	2300      	movs	r3, #0
 800a36e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a370:	2300      	movs	r3, #0
 800a372:	73fb      	strb	r3, [r7, #15]
 800a374:	e00f      	b.n	800a396 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a376:	7bfb      	ldrb	r3, [r7, #15]
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	33e0      	adds	r3, #224	; 0xe0
 800a37c:	009b      	lsls	r3, r3, #2
 800a37e:	4413      	add	r3, r2
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a386:	2b00      	cmp	r3, #0
 800a388:	d102      	bne.n	800a390 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a38a:	7bfb      	ldrb	r3, [r7, #15]
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	e007      	b.n	800a3a0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a390:	7bfb      	ldrb	r3, [r7, #15]
 800a392:	3301      	adds	r3, #1
 800a394:	73fb      	strb	r3, [r7, #15]
 800a396:	7bfb      	ldrb	r3, [r7, #15]
 800a398:	2b0f      	cmp	r3, #15
 800a39a:	d9ec      	bls.n	800a376 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a39c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3714      	adds	r7, #20
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b087      	sub	sp, #28
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a3c2:	4b1f      	ldr	r3, [pc, #124]	; (800a440 <FATFS_LinkDriverEx+0x94>)
 800a3c4:	7a5b      	ldrb	r3, [r3, #9]
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d131      	bne.n	800a430 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a3cc:	4b1c      	ldr	r3, [pc, #112]	; (800a440 <FATFS_LinkDriverEx+0x94>)
 800a3ce:	7a5b      	ldrb	r3, [r3, #9]
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	4b1a      	ldr	r3, [pc, #104]	; (800a440 <FATFS_LinkDriverEx+0x94>)
 800a3d6:	2100      	movs	r1, #0
 800a3d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a3da:	4b19      	ldr	r3, [pc, #100]	; (800a440 <FATFS_LinkDriverEx+0x94>)
 800a3dc:	7a5b      	ldrb	r3, [r3, #9]
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	4a17      	ldr	r2, [pc, #92]	; (800a440 <FATFS_LinkDriverEx+0x94>)
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	4413      	add	r3, r2
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a3ea:	4b15      	ldr	r3, [pc, #84]	; (800a440 <FATFS_LinkDriverEx+0x94>)
 800a3ec:	7a5b      	ldrb	r3, [r3, #9]
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	4b13      	ldr	r3, [pc, #76]	; (800a440 <FATFS_LinkDriverEx+0x94>)
 800a3f4:	4413      	add	r3, r2
 800a3f6:	79fa      	ldrb	r2, [r7, #7]
 800a3f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a3fa:	4b11      	ldr	r3, [pc, #68]	; (800a440 <FATFS_LinkDriverEx+0x94>)
 800a3fc:	7a5b      	ldrb	r3, [r3, #9]
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	1c5a      	adds	r2, r3, #1
 800a402:	b2d1      	uxtb	r1, r2
 800a404:	4a0e      	ldr	r2, [pc, #56]	; (800a440 <FATFS_LinkDriverEx+0x94>)
 800a406:	7251      	strb	r1, [r2, #9]
 800a408:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a40a:	7dbb      	ldrb	r3, [r7, #22]
 800a40c:	3330      	adds	r3, #48	; 0x30
 800a40e:	b2da      	uxtb	r2, r3
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	3301      	adds	r3, #1
 800a418:	223a      	movs	r2, #58	; 0x3a
 800a41a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	3302      	adds	r3, #2
 800a420:	222f      	movs	r2, #47	; 0x2f
 800a422:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	3303      	adds	r3, #3
 800a428:	2200      	movs	r2, #0
 800a42a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a42c:	2300      	movs	r3, #0
 800a42e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a430:	7dfb      	ldrb	r3, [r7, #23]
}
 800a432:	4618      	mov	r0, r3
 800a434:	371c      	adds	r7, #28
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	20001328 	.word	0x20001328

0800a444 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a44e:	2200      	movs	r2, #0
 800a450:	6839      	ldr	r1, [r7, #0]
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f7ff ffaa 	bl	800a3ac <FATFS_LinkDriverEx>
 800a458:	4603      	mov	r3, r0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
	...

0800a464 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a468:	2201      	movs	r2, #1
 800a46a:	490e      	ldr	r1, [pc, #56]	; (800a4a4 <MX_USB_HOST_Init+0x40>)
 800a46c:	480e      	ldr	r0, [pc, #56]	; (800a4a8 <MX_USB_HOST_Init+0x44>)
 800a46e:	f7ff fadb 	bl	8009a28 <USBH_Init>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d001      	beq.n	800a47c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a478:	f7f6 ffc6 	bl	8001408 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800a47c:	490b      	ldr	r1, [pc, #44]	; (800a4ac <MX_USB_HOST_Init+0x48>)
 800a47e:	480a      	ldr	r0, [pc, #40]	; (800a4a8 <MX_USB_HOST_Init+0x44>)
 800a480:	f7ff fb60 	bl	8009b44 <USBH_RegisterClass>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d001      	beq.n	800a48e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a48a:	f7f6 ffbd 	bl	8001408 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a48e:	4806      	ldr	r0, [pc, #24]	; (800a4a8 <MX_USB_HOST_Init+0x44>)
 800a490:	f7ff fbe4 	bl	8009c5c <USBH_Start>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d001      	beq.n	800a49e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a49a:	f7f6 ffb5 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a49e:	bf00      	nop
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	0800a4b1 	.word	0x0800a4b1
 800a4a8:	20001334 	.word	0x20001334
 800a4ac:	20000078 	.word	0x20000078

0800a4b0 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a4bc:	78fb      	ldrb	r3, [r7, #3]
 800a4be:	3b01      	subs	r3, #1
 800a4c0:	2b04      	cmp	r3, #4
 800a4c2:	d819      	bhi.n	800a4f8 <USBH_UserProcess+0x48>
 800a4c4:	a201      	add	r2, pc, #4	; (adr r2, 800a4cc <USBH_UserProcess+0x1c>)
 800a4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ca:	bf00      	nop
 800a4cc:	0800a4f9 	.word	0x0800a4f9
 800a4d0:	0800a4e9 	.word	0x0800a4e9
 800a4d4:	0800a4f9 	.word	0x0800a4f9
 800a4d8:	0800a4f1 	.word	0x0800a4f1
 800a4dc:	0800a4e1 	.word	0x0800a4e1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a4e0:	4b09      	ldr	r3, [pc, #36]	; (800a508 <USBH_UserProcess+0x58>)
 800a4e2:	2203      	movs	r2, #3
 800a4e4:	701a      	strb	r2, [r3, #0]
  break;
 800a4e6:	e008      	b.n	800a4fa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a4e8:	4b07      	ldr	r3, [pc, #28]	; (800a508 <USBH_UserProcess+0x58>)
 800a4ea:	2202      	movs	r2, #2
 800a4ec:	701a      	strb	r2, [r3, #0]
  break;
 800a4ee:	e004      	b.n	800a4fa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a4f0:	4b05      	ldr	r3, [pc, #20]	; (800a508 <USBH_UserProcess+0x58>)
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	701a      	strb	r2, [r3, #0]
  break;
 800a4f6:	e000      	b.n	800a4fa <USBH_UserProcess+0x4a>

  default:
  break;
 800a4f8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a4fa:	bf00      	nop
 800a4fc:	370c      	adds	r7, #12
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop
 800a508:	2000170c 	.word	0x2000170c

0800a50c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b08a      	sub	sp, #40	; 0x28
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a514:	f107 0314 	add.w	r3, r7, #20
 800a518:	2200      	movs	r2, #0
 800a51a:	601a      	str	r2, [r3, #0]
 800a51c:	605a      	str	r2, [r3, #4]
 800a51e:	609a      	str	r2, [r3, #8]
 800a520:	60da      	str	r2, [r3, #12]
 800a522:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a52c:	d147      	bne.n	800a5be <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a52e:	2300      	movs	r3, #0
 800a530:	613b      	str	r3, [r7, #16]
 800a532:	4b25      	ldr	r3, [pc, #148]	; (800a5c8 <HAL_HCD_MspInit+0xbc>)
 800a534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a536:	4a24      	ldr	r2, [pc, #144]	; (800a5c8 <HAL_HCD_MspInit+0xbc>)
 800a538:	f043 0301 	orr.w	r3, r3, #1
 800a53c:	6313      	str	r3, [r2, #48]	; 0x30
 800a53e:	4b22      	ldr	r3, [pc, #136]	; (800a5c8 <HAL_HCD_MspInit+0xbc>)
 800a540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a542:	f003 0301 	and.w	r3, r3, #1
 800a546:	613b      	str	r3, [r7, #16]
 800a548:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a54a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a54e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a550:	2300      	movs	r3, #0
 800a552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a554:	2300      	movs	r3, #0
 800a556:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a558:	f107 0314 	add.w	r3, r7, #20
 800a55c:	4619      	mov	r1, r3
 800a55e:	481b      	ldr	r0, [pc, #108]	; (800a5cc <HAL_HCD_MspInit+0xc0>)
 800a560:	f7f8 fc8a 	bl	8002e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a564:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a56a:	2302      	movs	r3, #2
 800a56c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a56e:	2300      	movs	r3, #0
 800a570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a572:	2303      	movs	r3, #3
 800a574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a576:	230a      	movs	r3, #10
 800a578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a57a:	f107 0314 	add.w	r3, r7, #20
 800a57e:	4619      	mov	r1, r3
 800a580:	4812      	ldr	r0, [pc, #72]	; (800a5cc <HAL_HCD_MspInit+0xc0>)
 800a582:	f7f8 fc79 	bl	8002e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a586:	4b10      	ldr	r3, [pc, #64]	; (800a5c8 <HAL_HCD_MspInit+0xbc>)
 800a588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a58a:	4a0f      	ldr	r2, [pc, #60]	; (800a5c8 <HAL_HCD_MspInit+0xbc>)
 800a58c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a590:	6353      	str	r3, [r2, #52]	; 0x34
 800a592:	2300      	movs	r3, #0
 800a594:	60fb      	str	r3, [r7, #12]
 800a596:	4b0c      	ldr	r3, [pc, #48]	; (800a5c8 <HAL_HCD_MspInit+0xbc>)
 800a598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a59a:	4a0b      	ldr	r2, [pc, #44]	; (800a5c8 <HAL_HCD_MspInit+0xbc>)
 800a59c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a5a0:	6453      	str	r3, [r2, #68]	; 0x44
 800a5a2:	4b09      	ldr	r3, [pc, #36]	; (800a5c8 <HAL_HCD_MspInit+0xbc>)
 800a5a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5aa:	60fb      	str	r3, [r7, #12]
 800a5ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	2043      	movs	r0, #67	; 0x43
 800a5b4:	f7f8 f93f 	bl	8002836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a5b8:	2043      	movs	r0, #67	; 0x43
 800a5ba:	f7f8 f958 	bl	800286e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a5be:	bf00      	nop
 800a5c0:	3728      	adds	r7, #40	; 0x28
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	40023800 	.word	0x40023800
 800a5cc:	40020000 	.word	0x40020000

0800a5d0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7ff fb5b 	bl	8009c9a <USBH_LL_IncTimer>
}
 800a5e4:	bf00      	nop
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7ff fb93 	bl	8009d26 <USBH_LL_Connect>
}
 800a600:	bf00      	nop
 800a602:	3708      	adds	r7, #8
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a616:	4618      	mov	r0, r3
 800a618:	f7ff fb9c 	bl	8009d54 <USBH_LL_Disconnect>
}
 800a61c:	bf00      	nop
 800a61e:	3708      	adds	r7, #8
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	460b      	mov	r3, r1
 800a62e:	70fb      	strb	r3, [r7, #3]
 800a630:	4613      	mov	r3, r2
 800a632:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a634:	bf00      	nop
 800a636:	370c      	adds	r7, #12
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a64e:	4618      	mov	r0, r3
 800a650:	f7ff fb4d 	bl	8009cee <USBH_LL_PortEnabled>
}
 800a654:	bf00      	nop
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7ff fb4d 	bl	8009d0a <USBH_LL_PortDisabled>
}
 800a670:	bf00      	nop
 800a672:	3708      	adds	r7, #8
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a686:	2b01      	cmp	r3, #1
 800a688:	d12a      	bne.n	800a6e0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a68a:	4a18      	ldr	r2, [pc, #96]	; (800a6ec <USBH_LL_Init+0x74>)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a15      	ldr	r2, [pc, #84]	; (800a6ec <USBH_LL_Init+0x74>)
 800a696:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a69a:	4b14      	ldr	r3, [pc, #80]	; (800a6ec <USBH_LL_Init+0x74>)
 800a69c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a6a0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a6a2:	4b12      	ldr	r3, [pc, #72]	; (800a6ec <USBH_LL_Init+0x74>)
 800a6a4:	2208      	movs	r2, #8
 800a6a6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a6a8:	4b10      	ldr	r3, [pc, #64]	; (800a6ec <USBH_LL_Init+0x74>)
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a6ae:	4b0f      	ldr	r3, [pc, #60]	; (800a6ec <USBH_LL_Init+0x74>)
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a6b4:	4b0d      	ldr	r3, [pc, #52]	; (800a6ec <USBH_LL_Init+0x74>)
 800a6b6:	2202      	movs	r2, #2
 800a6b8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a6ba:	4b0c      	ldr	r3, [pc, #48]	; (800a6ec <USBH_LL_Init+0x74>)
 800a6bc:	2200      	movs	r2, #0
 800a6be:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a6c0:	480a      	ldr	r0, [pc, #40]	; (800a6ec <USBH_LL_Init+0x74>)
 800a6c2:	f7f8 fe5a 	bl	800337a <HAL_HCD_Init>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d001      	beq.n	800a6d0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a6cc:	f7f6 fe9c 	bl	8001408 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a6d0:	4806      	ldr	r0, [pc, #24]	; (800a6ec <USBH_LL_Init+0x74>)
 800a6d2:	f7f9 fa30 	bl	8003b36 <HAL_HCD_GetCurrentFrame>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	4619      	mov	r1, r3
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f7ff face 	bl	8009c7c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3708      	adds	r7, #8
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	20001710 	.word	0x20001710

0800a6f0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a706:	4618      	mov	r0, r3
 800a708:	f7f9 f9ad 	bl	8003a66 <HAL_HCD_Start>
 800a70c:	4603      	mov	r3, r0
 800a70e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a710:	7bfb      	ldrb	r3, [r7, #15]
 800a712:	4618      	mov	r0, r3
 800a714:	f000 f93e 	bl	800a994 <USBH_Get_USB_Status>
 800a718:	4603      	mov	r3, r0
 800a71a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a71c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b084      	sub	sp, #16
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a72e:	2300      	movs	r3, #0
 800a730:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a732:	2300      	movs	r3, #0
 800a734:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7f9 f9b5 	bl	8003aac <HAL_HCD_Stop>
 800a742:	4603      	mov	r3, r0
 800a744:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a746:	7bfb      	ldrb	r3, [r7, #15]
 800a748:	4618      	mov	r0, r3
 800a74a:	f000 f923 	bl	800a994 <USBH_Get_USB_Status>
 800a74e:	4603      	mov	r3, r0
 800a750:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a752:	7bbb      	ldrb	r3, [r7, #14]
}
 800a754:	4618      	mov	r0, r3
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	460b      	mov	r3, r1
 800a766:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a76e:	78fa      	ldrb	r2, [r7, #3]
 800a770:	4611      	mov	r1, r2
 800a772:	4618      	mov	r0, r3
 800a774:	f7f9 f9cb 	bl	8003b0e <HAL_HCD_HC_GetXferCount>
 800a778:	4603      	mov	r3, r0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3708      	adds	r7, #8
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a782:	b590      	push	{r4, r7, lr}
 800a784:	b089      	sub	sp, #36	; 0x24
 800a786:	af04      	add	r7, sp, #16
 800a788:	6078      	str	r0, [r7, #4]
 800a78a:	4608      	mov	r0, r1
 800a78c:	4611      	mov	r1, r2
 800a78e:	461a      	mov	r2, r3
 800a790:	4603      	mov	r3, r0
 800a792:	70fb      	strb	r3, [r7, #3]
 800a794:	460b      	mov	r3, r1
 800a796:	70bb      	strb	r3, [r7, #2]
 800a798:	4613      	mov	r3, r2
 800a79a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a79c:	2300      	movs	r3, #0
 800a79e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a7aa:	787c      	ldrb	r4, [r7, #1]
 800a7ac:	78ba      	ldrb	r2, [r7, #2]
 800a7ae:	78f9      	ldrb	r1, [r7, #3]
 800a7b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a7b2:	9302      	str	r3, [sp, #8]
 800a7b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a7b8:	9301      	str	r3, [sp, #4]
 800a7ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a7be:	9300      	str	r3, [sp, #0]
 800a7c0:	4623      	mov	r3, r4
 800a7c2:	f7f8 fe3c 	bl	800343e <HAL_HCD_HC_Init>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a7ca:	7bfb      	ldrb	r3, [r7, #15]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f000 f8e1 	bl	800a994 <USBH_Get_USB_Status>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3714      	adds	r7, #20
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd90      	pop	{r4, r7, pc}

0800a7e0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a7fa:	78fa      	ldrb	r2, [r7, #3]
 800a7fc:	4611      	mov	r1, r2
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7f8 feac 	bl	800355c <HAL_HCD_HC_Halt>
 800a804:	4603      	mov	r3, r0
 800a806:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a808:	7bfb      	ldrb	r3, [r7, #15]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f000 f8c2 	bl	800a994 <USBH_Get_USB_Status>
 800a810:	4603      	mov	r3, r0
 800a812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a814:	7bbb      	ldrb	r3, [r7, #14]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a81e:	b590      	push	{r4, r7, lr}
 800a820:	b089      	sub	sp, #36	; 0x24
 800a822:	af04      	add	r7, sp, #16
 800a824:	6078      	str	r0, [r7, #4]
 800a826:	4608      	mov	r0, r1
 800a828:	4611      	mov	r1, r2
 800a82a:	461a      	mov	r2, r3
 800a82c:	4603      	mov	r3, r0
 800a82e:	70fb      	strb	r3, [r7, #3]
 800a830:	460b      	mov	r3, r1
 800a832:	70bb      	strb	r3, [r7, #2]
 800a834:	4613      	mov	r3, r2
 800a836:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a838:	2300      	movs	r3, #0
 800a83a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a83c:	2300      	movs	r3, #0
 800a83e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a846:	787c      	ldrb	r4, [r7, #1]
 800a848:	78ba      	ldrb	r2, [r7, #2]
 800a84a:	78f9      	ldrb	r1, [r7, #3]
 800a84c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a850:	9303      	str	r3, [sp, #12]
 800a852:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a854:	9302      	str	r3, [sp, #8]
 800a856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a858:	9301      	str	r3, [sp, #4]
 800a85a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a85e:	9300      	str	r3, [sp, #0]
 800a860:	4623      	mov	r3, r4
 800a862:	f7f8 fe9f 	bl	80035a4 <HAL_HCD_HC_SubmitRequest>
 800a866:	4603      	mov	r3, r0
 800a868:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a86a:	7bfb      	ldrb	r3, [r7, #15]
 800a86c:	4618      	mov	r0, r3
 800a86e:	f000 f891 	bl	800a994 <USBH_Get_USB_Status>
 800a872:	4603      	mov	r3, r0
 800a874:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a876:	7bbb      	ldrb	r3, [r7, #14]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3714      	adds	r7, #20
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd90      	pop	{r4, r7, pc}

0800a880 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	460b      	mov	r3, r1
 800a88a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a892:	78fa      	ldrb	r2, [r7, #3]
 800a894:	4611      	mov	r1, r2
 800a896:	4618      	mov	r0, r3
 800a898:	f7f9 f925 	bl	8003ae6 <HAL_HCD_HC_GetURBState>
 800a89c:	4603      	mov	r3, r0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b082      	sub	sp, #8
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d103      	bne.n	800a8c4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a8bc:	78fb      	ldrb	r3, [r7, #3]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f000 f894 	bl	800a9ec <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a8c4:	20c8      	movs	r0, #200	; 0xc8
 800a8c6:	f7f7 feb7 	bl	8002638 <HAL_Delay>
  return USBH_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3708      	adds	r7, #8
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	460b      	mov	r3, r1
 800a8de:	70fb      	strb	r3, [r7, #3]
 800a8e0:	4613      	mov	r3, r2
 800a8e2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a8ea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a8ec:	78fb      	ldrb	r3, [r7, #3]
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	212c      	movs	r1, #44	; 0x2c
 800a8f2:	fb01 f303 	mul.w	r3, r1, r3
 800a8f6:	4413      	add	r3, r2
 800a8f8:	333b      	adds	r3, #59	; 0x3b
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d009      	beq.n	800a914 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a900:	78fb      	ldrb	r3, [r7, #3]
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	212c      	movs	r1, #44	; 0x2c
 800a906:	fb01 f303 	mul.w	r3, r1, r3
 800a90a:	4413      	add	r3, r2
 800a90c:	3354      	adds	r3, #84	; 0x54
 800a90e:	78ba      	ldrb	r2, [r7, #2]
 800a910:	701a      	strb	r2, [r3, #0]
 800a912:	e008      	b.n	800a926 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a914:	78fb      	ldrb	r3, [r7, #3]
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	212c      	movs	r1, #44	; 0x2c
 800a91a:	fb01 f303 	mul.w	r3, r1, r3
 800a91e:	4413      	add	r3, r2
 800a920:	3355      	adds	r3, #85	; 0x55
 800a922:	78ba      	ldrb	r2, [r7, #2]
 800a924:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3714      	adds	r7, #20
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a934:	b480      	push	{r7}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	460b      	mov	r3, r1
 800a93e:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800a940:	2300      	movs	r3, #0
 800a942:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a94a:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800a94c:	78fb      	ldrb	r3, [r7, #3]
 800a94e:	68ba      	ldr	r2, [r7, #8]
 800a950:	212c      	movs	r1, #44	; 0x2c
 800a952:	fb01 f303 	mul.w	r3, r1, r3
 800a956:	4413      	add	r3, r2
 800a958:	333b      	adds	r3, #59	; 0x3b
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d009      	beq.n	800a974 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800a960:	78fb      	ldrb	r3, [r7, #3]
 800a962:	68ba      	ldr	r2, [r7, #8]
 800a964:	212c      	movs	r1, #44	; 0x2c
 800a966:	fb01 f303 	mul.w	r3, r1, r3
 800a96a:	4413      	add	r3, r2
 800a96c:	3354      	adds	r3, #84	; 0x54
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	73fb      	strb	r3, [r7, #15]
 800a972:	e008      	b.n	800a986 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800a974:	78fb      	ldrb	r3, [r7, #3]
 800a976:	68ba      	ldr	r2, [r7, #8]
 800a978:	212c      	movs	r1, #44	; 0x2c
 800a97a:	fb01 f303 	mul.w	r3, r1, r3
 800a97e:	4413      	add	r3, r2
 800a980:	3355      	adds	r3, #85	; 0x55
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800a986:	7bfb      	ldrb	r3, [r7, #15]
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3714      	adds	r7, #20
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	4603      	mov	r3, r0
 800a99c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a9a2:	79fb      	ldrb	r3, [r7, #7]
 800a9a4:	2b03      	cmp	r3, #3
 800a9a6:	d817      	bhi.n	800a9d8 <USBH_Get_USB_Status+0x44>
 800a9a8:	a201      	add	r2, pc, #4	; (adr r2, 800a9b0 <USBH_Get_USB_Status+0x1c>)
 800a9aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ae:	bf00      	nop
 800a9b0:	0800a9c1 	.word	0x0800a9c1
 800a9b4:	0800a9c7 	.word	0x0800a9c7
 800a9b8:	0800a9cd 	.word	0x0800a9cd
 800a9bc:	0800a9d3 	.word	0x0800a9d3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a9c4:	e00b      	b.n	800a9de <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a9c6:	2302      	movs	r3, #2
 800a9c8:	73fb      	strb	r3, [r7, #15]
    break;
 800a9ca:	e008      	b.n	800a9de <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a9d0:	e005      	b.n	800a9de <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a9d6:	e002      	b.n	800a9de <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a9d8:	2302      	movs	r3, #2
 800a9da:	73fb      	strb	r3, [r7, #15]
    break;
 800a9dc:	bf00      	nop
  }
  return usb_status;
 800a9de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3714      	adds	r7, #20
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a9f6:	79fb      	ldrb	r3, [r7, #7]
 800a9f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a9fa:	79fb      	ldrb	r3, [r7, #7]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d102      	bne.n	800aa06 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800aa00:	2300      	movs	r3, #0
 800aa02:	73fb      	strb	r3, [r7, #15]
 800aa04:	e001      	b.n	800aa0a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800aa06:	2301      	movs	r3, #1
 800aa08:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,(GPIO_PinState)data);
 800aa0a:	7bfb      	ldrb	r3, [r7, #15]
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	2102      	movs	r1, #2
 800aa10:	4803      	ldr	r0, [pc, #12]	; (800aa20 <MX_DriverVbusFS+0x34>)
 800aa12:	f7f8 fc99 	bl	8003348 <HAL_GPIO_WritePin>
}
 800aa16:	bf00      	nop
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	40020800 	.word	0x40020800

0800aa24 <__errno>:
 800aa24:	4b01      	ldr	r3, [pc, #4]	; (800aa2c <__errno+0x8>)
 800aa26:	6818      	ldr	r0, [r3, #0]
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	20000098 	.word	0x20000098

0800aa30 <__libc_init_array>:
 800aa30:	b570      	push	{r4, r5, r6, lr}
 800aa32:	4d0d      	ldr	r5, [pc, #52]	; (800aa68 <__libc_init_array+0x38>)
 800aa34:	4c0d      	ldr	r4, [pc, #52]	; (800aa6c <__libc_init_array+0x3c>)
 800aa36:	1b64      	subs	r4, r4, r5
 800aa38:	10a4      	asrs	r4, r4, #2
 800aa3a:	2600      	movs	r6, #0
 800aa3c:	42a6      	cmp	r6, r4
 800aa3e:	d109      	bne.n	800aa54 <__libc_init_array+0x24>
 800aa40:	4d0b      	ldr	r5, [pc, #44]	; (800aa70 <__libc_init_array+0x40>)
 800aa42:	4c0c      	ldr	r4, [pc, #48]	; (800aa74 <__libc_init_array+0x44>)
 800aa44:	f000 f93c 	bl	800acc0 <_init>
 800aa48:	1b64      	subs	r4, r4, r5
 800aa4a:	10a4      	asrs	r4, r4, #2
 800aa4c:	2600      	movs	r6, #0
 800aa4e:	42a6      	cmp	r6, r4
 800aa50:	d105      	bne.n	800aa5e <__libc_init_array+0x2e>
 800aa52:	bd70      	pop	{r4, r5, r6, pc}
 800aa54:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa58:	4798      	blx	r3
 800aa5a:	3601      	adds	r6, #1
 800aa5c:	e7ee      	b.n	800aa3c <__libc_init_array+0xc>
 800aa5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa62:	4798      	blx	r3
 800aa64:	3601      	adds	r6, #1
 800aa66:	e7f2      	b.n	800aa4e <__libc_init_array+0x1e>
 800aa68:	0800ad18 	.word	0x0800ad18
 800aa6c:	0800ad18 	.word	0x0800ad18
 800aa70:	0800ad18 	.word	0x0800ad18
 800aa74:	0800ad1c 	.word	0x0800ad1c

0800aa78 <malloc>:
 800aa78:	4b02      	ldr	r3, [pc, #8]	; (800aa84 <malloc+0xc>)
 800aa7a:	4601      	mov	r1, r0
 800aa7c:	6818      	ldr	r0, [r3, #0]
 800aa7e:	f000 b88d 	b.w	800ab9c <_malloc_r>
 800aa82:	bf00      	nop
 800aa84:	20000098 	.word	0x20000098

0800aa88 <free>:
 800aa88:	4b02      	ldr	r3, [pc, #8]	; (800aa94 <free+0xc>)
 800aa8a:	4601      	mov	r1, r0
 800aa8c:	6818      	ldr	r0, [r3, #0]
 800aa8e:	f000 b819 	b.w	800aac4 <_free_r>
 800aa92:	bf00      	nop
 800aa94:	20000098 	.word	0x20000098

0800aa98 <memcpy>:
 800aa98:	440a      	add	r2, r1
 800aa9a:	4291      	cmp	r1, r2
 800aa9c:	f100 33ff 	add.w	r3, r0, #4294967295
 800aaa0:	d100      	bne.n	800aaa4 <memcpy+0xc>
 800aaa2:	4770      	bx	lr
 800aaa4:	b510      	push	{r4, lr}
 800aaa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aaaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aaae:	4291      	cmp	r1, r2
 800aab0:	d1f9      	bne.n	800aaa6 <memcpy+0xe>
 800aab2:	bd10      	pop	{r4, pc}

0800aab4 <memset>:
 800aab4:	4402      	add	r2, r0
 800aab6:	4603      	mov	r3, r0
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d100      	bne.n	800aabe <memset+0xa>
 800aabc:	4770      	bx	lr
 800aabe:	f803 1b01 	strb.w	r1, [r3], #1
 800aac2:	e7f9      	b.n	800aab8 <memset+0x4>

0800aac4 <_free_r>:
 800aac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aac6:	2900      	cmp	r1, #0
 800aac8:	d044      	beq.n	800ab54 <_free_r+0x90>
 800aaca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aace:	9001      	str	r0, [sp, #4]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f1a1 0404 	sub.w	r4, r1, #4
 800aad6:	bfb8      	it	lt
 800aad8:	18e4      	addlt	r4, r4, r3
 800aada:	f000 f8e3 	bl	800aca4 <__malloc_lock>
 800aade:	4a1e      	ldr	r2, [pc, #120]	; (800ab58 <_free_r+0x94>)
 800aae0:	9801      	ldr	r0, [sp, #4]
 800aae2:	6813      	ldr	r3, [r2, #0]
 800aae4:	b933      	cbnz	r3, 800aaf4 <_free_r+0x30>
 800aae6:	6063      	str	r3, [r4, #4]
 800aae8:	6014      	str	r4, [r2, #0]
 800aaea:	b003      	add	sp, #12
 800aaec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aaf0:	f000 b8de 	b.w	800acb0 <__malloc_unlock>
 800aaf4:	42a3      	cmp	r3, r4
 800aaf6:	d908      	bls.n	800ab0a <_free_r+0x46>
 800aaf8:	6825      	ldr	r5, [r4, #0]
 800aafa:	1961      	adds	r1, r4, r5
 800aafc:	428b      	cmp	r3, r1
 800aafe:	bf01      	itttt	eq
 800ab00:	6819      	ldreq	r1, [r3, #0]
 800ab02:	685b      	ldreq	r3, [r3, #4]
 800ab04:	1949      	addeq	r1, r1, r5
 800ab06:	6021      	streq	r1, [r4, #0]
 800ab08:	e7ed      	b.n	800aae6 <_free_r+0x22>
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	b10b      	cbz	r3, 800ab14 <_free_r+0x50>
 800ab10:	42a3      	cmp	r3, r4
 800ab12:	d9fa      	bls.n	800ab0a <_free_r+0x46>
 800ab14:	6811      	ldr	r1, [r2, #0]
 800ab16:	1855      	adds	r5, r2, r1
 800ab18:	42a5      	cmp	r5, r4
 800ab1a:	d10b      	bne.n	800ab34 <_free_r+0x70>
 800ab1c:	6824      	ldr	r4, [r4, #0]
 800ab1e:	4421      	add	r1, r4
 800ab20:	1854      	adds	r4, r2, r1
 800ab22:	42a3      	cmp	r3, r4
 800ab24:	6011      	str	r1, [r2, #0]
 800ab26:	d1e0      	bne.n	800aaea <_free_r+0x26>
 800ab28:	681c      	ldr	r4, [r3, #0]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	6053      	str	r3, [r2, #4]
 800ab2e:	4421      	add	r1, r4
 800ab30:	6011      	str	r1, [r2, #0]
 800ab32:	e7da      	b.n	800aaea <_free_r+0x26>
 800ab34:	d902      	bls.n	800ab3c <_free_r+0x78>
 800ab36:	230c      	movs	r3, #12
 800ab38:	6003      	str	r3, [r0, #0]
 800ab3a:	e7d6      	b.n	800aaea <_free_r+0x26>
 800ab3c:	6825      	ldr	r5, [r4, #0]
 800ab3e:	1961      	adds	r1, r4, r5
 800ab40:	428b      	cmp	r3, r1
 800ab42:	bf04      	itt	eq
 800ab44:	6819      	ldreq	r1, [r3, #0]
 800ab46:	685b      	ldreq	r3, [r3, #4]
 800ab48:	6063      	str	r3, [r4, #4]
 800ab4a:	bf04      	itt	eq
 800ab4c:	1949      	addeq	r1, r1, r5
 800ab4e:	6021      	streq	r1, [r4, #0]
 800ab50:	6054      	str	r4, [r2, #4]
 800ab52:	e7ca      	b.n	800aaea <_free_r+0x26>
 800ab54:	b003      	add	sp, #12
 800ab56:	bd30      	pop	{r4, r5, pc}
 800ab58:	20001a14 	.word	0x20001a14

0800ab5c <sbrk_aligned>:
 800ab5c:	b570      	push	{r4, r5, r6, lr}
 800ab5e:	4e0e      	ldr	r6, [pc, #56]	; (800ab98 <sbrk_aligned+0x3c>)
 800ab60:	460c      	mov	r4, r1
 800ab62:	6831      	ldr	r1, [r6, #0]
 800ab64:	4605      	mov	r5, r0
 800ab66:	b911      	cbnz	r1, 800ab6e <sbrk_aligned+0x12>
 800ab68:	f000 f88c 	bl	800ac84 <_sbrk_r>
 800ab6c:	6030      	str	r0, [r6, #0]
 800ab6e:	4621      	mov	r1, r4
 800ab70:	4628      	mov	r0, r5
 800ab72:	f000 f887 	bl	800ac84 <_sbrk_r>
 800ab76:	1c43      	adds	r3, r0, #1
 800ab78:	d00a      	beq.n	800ab90 <sbrk_aligned+0x34>
 800ab7a:	1cc4      	adds	r4, r0, #3
 800ab7c:	f024 0403 	bic.w	r4, r4, #3
 800ab80:	42a0      	cmp	r0, r4
 800ab82:	d007      	beq.n	800ab94 <sbrk_aligned+0x38>
 800ab84:	1a21      	subs	r1, r4, r0
 800ab86:	4628      	mov	r0, r5
 800ab88:	f000 f87c 	bl	800ac84 <_sbrk_r>
 800ab8c:	3001      	adds	r0, #1
 800ab8e:	d101      	bne.n	800ab94 <sbrk_aligned+0x38>
 800ab90:	f04f 34ff 	mov.w	r4, #4294967295
 800ab94:	4620      	mov	r0, r4
 800ab96:	bd70      	pop	{r4, r5, r6, pc}
 800ab98:	20001a18 	.word	0x20001a18

0800ab9c <_malloc_r>:
 800ab9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba0:	1ccd      	adds	r5, r1, #3
 800aba2:	f025 0503 	bic.w	r5, r5, #3
 800aba6:	3508      	adds	r5, #8
 800aba8:	2d0c      	cmp	r5, #12
 800abaa:	bf38      	it	cc
 800abac:	250c      	movcc	r5, #12
 800abae:	2d00      	cmp	r5, #0
 800abb0:	4607      	mov	r7, r0
 800abb2:	db01      	blt.n	800abb8 <_malloc_r+0x1c>
 800abb4:	42a9      	cmp	r1, r5
 800abb6:	d905      	bls.n	800abc4 <_malloc_r+0x28>
 800abb8:	230c      	movs	r3, #12
 800abba:	603b      	str	r3, [r7, #0]
 800abbc:	2600      	movs	r6, #0
 800abbe:	4630      	mov	r0, r6
 800abc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abc4:	4e2e      	ldr	r6, [pc, #184]	; (800ac80 <_malloc_r+0xe4>)
 800abc6:	f000 f86d 	bl	800aca4 <__malloc_lock>
 800abca:	6833      	ldr	r3, [r6, #0]
 800abcc:	461c      	mov	r4, r3
 800abce:	bb34      	cbnz	r4, 800ac1e <_malloc_r+0x82>
 800abd0:	4629      	mov	r1, r5
 800abd2:	4638      	mov	r0, r7
 800abd4:	f7ff ffc2 	bl	800ab5c <sbrk_aligned>
 800abd8:	1c43      	adds	r3, r0, #1
 800abda:	4604      	mov	r4, r0
 800abdc:	d14d      	bne.n	800ac7a <_malloc_r+0xde>
 800abde:	6834      	ldr	r4, [r6, #0]
 800abe0:	4626      	mov	r6, r4
 800abe2:	2e00      	cmp	r6, #0
 800abe4:	d140      	bne.n	800ac68 <_malloc_r+0xcc>
 800abe6:	6823      	ldr	r3, [r4, #0]
 800abe8:	4631      	mov	r1, r6
 800abea:	4638      	mov	r0, r7
 800abec:	eb04 0803 	add.w	r8, r4, r3
 800abf0:	f000 f848 	bl	800ac84 <_sbrk_r>
 800abf4:	4580      	cmp	r8, r0
 800abf6:	d13a      	bne.n	800ac6e <_malloc_r+0xd2>
 800abf8:	6821      	ldr	r1, [r4, #0]
 800abfa:	3503      	adds	r5, #3
 800abfc:	1a6d      	subs	r5, r5, r1
 800abfe:	f025 0503 	bic.w	r5, r5, #3
 800ac02:	3508      	adds	r5, #8
 800ac04:	2d0c      	cmp	r5, #12
 800ac06:	bf38      	it	cc
 800ac08:	250c      	movcc	r5, #12
 800ac0a:	4629      	mov	r1, r5
 800ac0c:	4638      	mov	r0, r7
 800ac0e:	f7ff ffa5 	bl	800ab5c <sbrk_aligned>
 800ac12:	3001      	adds	r0, #1
 800ac14:	d02b      	beq.n	800ac6e <_malloc_r+0xd2>
 800ac16:	6823      	ldr	r3, [r4, #0]
 800ac18:	442b      	add	r3, r5
 800ac1a:	6023      	str	r3, [r4, #0]
 800ac1c:	e00e      	b.n	800ac3c <_malloc_r+0xa0>
 800ac1e:	6822      	ldr	r2, [r4, #0]
 800ac20:	1b52      	subs	r2, r2, r5
 800ac22:	d41e      	bmi.n	800ac62 <_malloc_r+0xc6>
 800ac24:	2a0b      	cmp	r2, #11
 800ac26:	d916      	bls.n	800ac56 <_malloc_r+0xba>
 800ac28:	1961      	adds	r1, r4, r5
 800ac2a:	42a3      	cmp	r3, r4
 800ac2c:	6025      	str	r5, [r4, #0]
 800ac2e:	bf18      	it	ne
 800ac30:	6059      	strne	r1, [r3, #4]
 800ac32:	6863      	ldr	r3, [r4, #4]
 800ac34:	bf08      	it	eq
 800ac36:	6031      	streq	r1, [r6, #0]
 800ac38:	5162      	str	r2, [r4, r5]
 800ac3a:	604b      	str	r3, [r1, #4]
 800ac3c:	4638      	mov	r0, r7
 800ac3e:	f104 060b 	add.w	r6, r4, #11
 800ac42:	f000 f835 	bl	800acb0 <__malloc_unlock>
 800ac46:	f026 0607 	bic.w	r6, r6, #7
 800ac4a:	1d23      	adds	r3, r4, #4
 800ac4c:	1af2      	subs	r2, r6, r3
 800ac4e:	d0b6      	beq.n	800abbe <_malloc_r+0x22>
 800ac50:	1b9b      	subs	r3, r3, r6
 800ac52:	50a3      	str	r3, [r4, r2]
 800ac54:	e7b3      	b.n	800abbe <_malloc_r+0x22>
 800ac56:	6862      	ldr	r2, [r4, #4]
 800ac58:	42a3      	cmp	r3, r4
 800ac5a:	bf0c      	ite	eq
 800ac5c:	6032      	streq	r2, [r6, #0]
 800ac5e:	605a      	strne	r2, [r3, #4]
 800ac60:	e7ec      	b.n	800ac3c <_malloc_r+0xa0>
 800ac62:	4623      	mov	r3, r4
 800ac64:	6864      	ldr	r4, [r4, #4]
 800ac66:	e7b2      	b.n	800abce <_malloc_r+0x32>
 800ac68:	4634      	mov	r4, r6
 800ac6a:	6876      	ldr	r6, [r6, #4]
 800ac6c:	e7b9      	b.n	800abe2 <_malloc_r+0x46>
 800ac6e:	230c      	movs	r3, #12
 800ac70:	603b      	str	r3, [r7, #0]
 800ac72:	4638      	mov	r0, r7
 800ac74:	f000 f81c 	bl	800acb0 <__malloc_unlock>
 800ac78:	e7a1      	b.n	800abbe <_malloc_r+0x22>
 800ac7a:	6025      	str	r5, [r4, #0]
 800ac7c:	e7de      	b.n	800ac3c <_malloc_r+0xa0>
 800ac7e:	bf00      	nop
 800ac80:	20001a14 	.word	0x20001a14

0800ac84 <_sbrk_r>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	4d06      	ldr	r5, [pc, #24]	; (800aca0 <_sbrk_r+0x1c>)
 800ac88:	2300      	movs	r3, #0
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	4608      	mov	r0, r1
 800ac8e:	602b      	str	r3, [r5, #0]
 800ac90:	f7f6 fde4 	bl	800185c <_sbrk>
 800ac94:	1c43      	adds	r3, r0, #1
 800ac96:	d102      	bne.n	800ac9e <_sbrk_r+0x1a>
 800ac98:	682b      	ldr	r3, [r5, #0]
 800ac9a:	b103      	cbz	r3, 800ac9e <_sbrk_r+0x1a>
 800ac9c:	6023      	str	r3, [r4, #0]
 800ac9e:	bd38      	pop	{r3, r4, r5, pc}
 800aca0:	20001a1c 	.word	0x20001a1c

0800aca4 <__malloc_lock>:
 800aca4:	4801      	ldr	r0, [pc, #4]	; (800acac <__malloc_lock+0x8>)
 800aca6:	f000 b809 	b.w	800acbc <__retarget_lock_acquire_recursive>
 800acaa:	bf00      	nop
 800acac:	20001a20 	.word	0x20001a20

0800acb0 <__malloc_unlock>:
 800acb0:	4801      	ldr	r0, [pc, #4]	; (800acb8 <__malloc_unlock+0x8>)
 800acb2:	f000 b804 	b.w	800acbe <__retarget_lock_release_recursive>
 800acb6:	bf00      	nop
 800acb8:	20001a20 	.word	0x20001a20

0800acbc <__retarget_lock_acquire_recursive>:
 800acbc:	4770      	bx	lr

0800acbe <__retarget_lock_release_recursive>:
 800acbe:	4770      	bx	lr

0800acc0 <_init>:
 800acc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc2:	bf00      	nop
 800acc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acc6:	bc08      	pop	{r3}
 800acc8:	469e      	mov	lr, r3
 800acca:	4770      	bx	lr

0800accc <_fini>:
 800accc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acce:	bf00      	nop
 800acd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acd2:	bc08      	pop	{r3}
 800acd4:	469e      	mov	lr, r3
 800acd6:	4770      	bx	lr
