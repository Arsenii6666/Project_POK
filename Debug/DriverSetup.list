
DriverSetup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9fc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0800fb94  0800fb94  0001fb94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fcf8  0800fcf8  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800fcf8  0800fcf8  0001fcf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd00  0800fd00  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd00  0800fd00  0001fd00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd04  0800fd04  0001fd04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800fd08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d74  200000fc  0800fe04  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20001e70  0800fe04  00021e70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fe3c  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005418  00000000  00000000  0003ff68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  00045380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c8  00000000  00000000  00046a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d628  00000000  00000000  00047f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022481  00000000  00000000  00065578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095476  00000000  00000000  000879f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011ce6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006090  00000000  00000000  0011cec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800fb7c 	.word	0x0800fb7c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	0800fb7c 	.word	0x0800fb7c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_uldivmod>:
 8000a84:	b953      	cbnz	r3, 8000a9c <__aeabi_uldivmod+0x18>
 8000a86:	b94a      	cbnz	r2, 8000a9c <__aeabi_uldivmod+0x18>
 8000a88:	2900      	cmp	r1, #0
 8000a8a:	bf08      	it	eq
 8000a8c:	2800      	cmpeq	r0, #0
 8000a8e:	bf1c      	itt	ne
 8000a90:	f04f 31ff 	movne.w	r1, #4294967295
 8000a94:	f04f 30ff 	movne.w	r0, #4294967295
 8000a98:	f000 b974 	b.w	8000d84 <__aeabi_idiv0>
 8000a9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa4:	f000 f806 	bl	8000ab4 <__udivmoddi4>
 8000aa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab0:	b004      	add	sp, #16
 8000ab2:	4770      	bx	lr

08000ab4 <__udivmoddi4>:
 8000ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab8:	9d08      	ldr	r5, [sp, #32]
 8000aba:	4604      	mov	r4, r0
 8000abc:	468e      	mov	lr, r1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d14d      	bne.n	8000b5e <__udivmoddi4+0xaa>
 8000ac2:	428a      	cmp	r2, r1
 8000ac4:	4694      	mov	ip, r2
 8000ac6:	d969      	bls.n	8000b9c <__udivmoddi4+0xe8>
 8000ac8:	fab2 f282 	clz	r2, r2
 8000acc:	b152      	cbz	r2, 8000ae4 <__udivmoddi4+0x30>
 8000ace:	fa01 f302 	lsl.w	r3, r1, r2
 8000ad2:	f1c2 0120 	rsb	r1, r2, #32
 8000ad6:	fa20 f101 	lsr.w	r1, r0, r1
 8000ada:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ade:	ea41 0e03 	orr.w	lr, r1, r3
 8000ae2:	4094      	lsls	r4, r2
 8000ae4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae8:	0c21      	lsrs	r1, r4, #16
 8000aea:	fbbe f6f8 	udiv	r6, lr, r8
 8000aee:	fa1f f78c 	uxth.w	r7, ip
 8000af2:	fb08 e316 	mls	r3, r8, r6, lr
 8000af6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000afa:	fb06 f107 	mul.w	r1, r6, r7
 8000afe:	4299      	cmp	r1, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x64>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b0a:	f080 811f 	bcs.w	8000d4c <__udivmoddi4+0x298>
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	f240 811c 	bls.w	8000d4c <__udivmoddi4+0x298>
 8000b14:	3e02      	subs	r6, #2
 8000b16:	4463      	add	r3, ip
 8000b18:	1a5b      	subs	r3, r3, r1
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b20:	fb08 3310 	mls	r3, r8, r0, r3
 8000b24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b28:	fb00 f707 	mul.w	r7, r0, r7
 8000b2c:	42a7      	cmp	r7, r4
 8000b2e:	d90a      	bls.n	8000b46 <__udivmoddi4+0x92>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b38:	f080 810a 	bcs.w	8000d50 <__udivmoddi4+0x29c>
 8000b3c:	42a7      	cmp	r7, r4
 8000b3e:	f240 8107 	bls.w	8000d50 <__udivmoddi4+0x29c>
 8000b42:	4464      	add	r4, ip
 8000b44:	3802      	subs	r0, #2
 8000b46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b4a:	1be4      	subs	r4, r4, r7
 8000b4c:	2600      	movs	r6, #0
 8000b4e:	b11d      	cbz	r5, 8000b58 <__udivmoddi4+0xa4>
 8000b50:	40d4      	lsrs	r4, r2
 8000b52:	2300      	movs	r3, #0
 8000b54:	e9c5 4300 	strd	r4, r3, [r5]
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d909      	bls.n	8000b76 <__udivmoddi4+0xc2>
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	f000 80ef 	beq.w	8000d46 <__udivmoddi4+0x292>
 8000b68:	2600      	movs	r6, #0
 8000b6a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b6e:	4630      	mov	r0, r6
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	fab3 f683 	clz	r6, r3
 8000b7a:	2e00      	cmp	r6, #0
 8000b7c:	d14a      	bne.n	8000c14 <__udivmoddi4+0x160>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xd4>
 8000b82:	4282      	cmp	r2, r0
 8000b84:	f200 80f9 	bhi.w	8000d7a <__udivmoddi4+0x2c6>
 8000b88:	1a84      	subs	r4, r0, r2
 8000b8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	469e      	mov	lr, r3
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	d0e0      	beq.n	8000b58 <__udivmoddi4+0xa4>
 8000b96:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b9a:	e7dd      	b.n	8000b58 <__udivmoddi4+0xa4>
 8000b9c:	b902      	cbnz	r2, 8000ba0 <__udivmoddi4+0xec>
 8000b9e:	deff      	udf	#255	; 0xff
 8000ba0:	fab2 f282 	clz	r2, r2
 8000ba4:	2a00      	cmp	r2, #0
 8000ba6:	f040 8092 	bne.w	8000cce <__udivmoddi4+0x21a>
 8000baa:	eba1 010c 	sub.w	r1, r1, ip
 8000bae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb2:	fa1f fe8c 	uxth.w	lr, ip
 8000bb6:	2601      	movs	r6, #1
 8000bb8:	0c20      	lsrs	r0, r4, #16
 8000bba:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bbe:	fb07 1113 	mls	r1, r7, r3, r1
 8000bc2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc6:	fb0e f003 	mul.w	r0, lr, r3
 8000bca:	4288      	cmp	r0, r1
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x12c>
 8000bce:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x12a>
 8000bd8:	4288      	cmp	r0, r1
 8000bda:	f200 80cb 	bhi.w	8000d74 <__udivmoddi4+0x2c0>
 8000bde:	4643      	mov	r3, r8
 8000be0:	1a09      	subs	r1, r1, r0
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bf4:	45a6      	cmp	lr, r4
 8000bf6:	d908      	bls.n	8000c0a <__udivmoddi4+0x156>
 8000bf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c00:	d202      	bcs.n	8000c08 <__udivmoddi4+0x154>
 8000c02:	45a6      	cmp	lr, r4
 8000c04:	f200 80bb 	bhi.w	8000d7e <__udivmoddi4+0x2ca>
 8000c08:	4608      	mov	r0, r1
 8000c0a:	eba4 040e 	sub.w	r4, r4, lr
 8000c0e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c12:	e79c      	b.n	8000b4e <__udivmoddi4+0x9a>
 8000c14:	f1c6 0720 	rsb	r7, r6, #32
 8000c18:	40b3      	lsls	r3, r6
 8000c1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c22:	fa20 f407 	lsr.w	r4, r0, r7
 8000c26:	fa01 f306 	lsl.w	r3, r1, r6
 8000c2a:	431c      	orrs	r4, r3
 8000c2c:	40f9      	lsrs	r1, r7
 8000c2e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c32:	fa00 f306 	lsl.w	r3, r0, r6
 8000c36:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c3a:	0c20      	lsrs	r0, r4, #16
 8000c3c:	fa1f fe8c 	uxth.w	lr, ip
 8000c40:	fb09 1118 	mls	r1, r9, r8, r1
 8000c44:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c48:	fb08 f00e 	mul.w	r0, r8, lr
 8000c4c:	4288      	cmp	r0, r1
 8000c4e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b8>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c5c:	f080 8088 	bcs.w	8000d70 <__udivmoddi4+0x2bc>
 8000c60:	4288      	cmp	r0, r1
 8000c62:	f240 8085 	bls.w	8000d70 <__udivmoddi4+0x2bc>
 8000c66:	f1a8 0802 	sub.w	r8, r8, #2
 8000c6a:	4461      	add	r1, ip
 8000c6c:	1a09      	subs	r1, r1, r0
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c74:	fb09 1110 	mls	r1, r9, r0, r1
 8000c78:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c80:	458e      	cmp	lr, r1
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1e2>
 8000c84:	eb1c 0101 	adds.w	r1, ip, r1
 8000c88:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c8c:	d26c      	bcs.n	8000d68 <__udivmoddi4+0x2b4>
 8000c8e:	458e      	cmp	lr, r1
 8000c90:	d96a      	bls.n	8000d68 <__udivmoddi4+0x2b4>
 8000c92:	3802      	subs	r0, #2
 8000c94:	4461      	add	r1, ip
 8000c96:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c9a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c9e:	eba1 010e 	sub.w	r1, r1, lr
 8000ca2:	42a1      	cmp	r1, r4
 8000ca4:	46c8      	mov	r8, r9
 8000ca6:	46a6      	mov	lr, r4
 8000ca8:	d356      	bcc.n	8000d58 <__udivmoddi4+0x2a4>
 8000caa:	d053      	beq.n	8000d54 <__udivmoddi4+0x2a0>
 8000cac:	b15d      	cbz	r5, 8000cc6 <__udivmoddi4+0x212>
 8000cae:	ebb3 0208 	subs.w	r2, r3, r8
 8000cb2:	eb61 010e 	sbc.w	r1, r1, lr
 8000cb6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cba:	fa22 f306 	lsr.w	r3, r2, r6
 8000cbe:	40f1      	lsrs	r1, r6
 8000cc0:	431f      	orrs	r7, r3
 8000cc2:	e9c5 7100 	strd	r7, r1, [r5]
 8000cc6:	2600      	movs	r6, #0
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	f1c2 0320 	rsb	r3, r2, #32
 8000cd2:	40d8      	lsrs	r0, r3
 8000cd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4301      	orrs	r1, r0
 8000ce0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce4:	fa1f fe8c 	uxth.w	lr, ip
 8000ce8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cec:	fb07 3610 	mls	r6, r7, r0, r3
 8000cf0:	0c0b      	lsrs	r3, r1, #16
 8000cf2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cf6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cfa:	429e      	cmp	r6, r3
 8000cfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x260>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d0a:	d22f      	bcs.n	8000d6c <__udivmoddi4+0x2b8>
 8000d0c:	429e      	cmp	r6, r3
 8000d0e:	d92d      	bls.n	8000d6c <__udivmoddi4+0x2b8>
 8000d10:	3802      	subs	r0, #2
 8000d12:	4463      	add	r3, ip
 8000d14:	1b9b      	subs	r3, r3, r6
 8000d16:	b289      	uxth	r1, r1
 8000d18:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d1c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d24:	fb06 f30e 	mul.w	r3, r6, lr
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x28a>
 8000d2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d30:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d34:	d216      	bcs.n	8000d64 <__udivmoddi4+0x2b0>
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d914      	bls.n	8000d64 <__udivmoddi4+0x2b0>
 8000d3a:	3e02      	subs	r6, #2
 8000d3c:	4461      	add	r1, ip
 8000d3e:	1ac9      	subs	r1, r1, r3
 8000d40:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d44:	e738      	b.n	8000bb8 <__udivmoddi4+0x104>
 8000d46:	462e      	mov	r6, r5
 8000d48:	4628      	mov	r0, r5
 8000d4a:	e705      	b.n	8000b58 <__udivmoddi4+0xa4>
 8000d4c:	4606      	mov	r6, r0
 8000d4e:	e6e3      	b.n	8000b18 <__udivmoddi4+0x64>
 8000d50:	4618      	mov	r0, r3
 8000d52:	e6f8      	b.n	8000b46 <__udivmoddi4+0x92>
 8000d54:	454b      	cmp	r3, r9
 8000d56:	d2a9      	bcs.n	8000cac <__udivmoddi4+0x1f8>
 8000d58:	ebb9 0802 	subs.w	r8, r9, r2
 8000d5c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d60:	3801      	subs	r0, #1
 8000d62:	e7a3      	b.n	8000cac <__udivmoddi4+0x1f8>
 8000d64:	4646      	mov	r6, r8
 8000d66:	e7ea      	b.n	8000d3e <__udivmoddi4+0x28a>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	e794      	b.n	8000c96 <__udivmoddi4+0x1e2>
 8000d6c:	4640      	mov	r0, r8
 8000d6e:	e7d1      	b.n	8000d14 <__udivmoddi4+0x260>
 8000d70:	46d0      	mov	r8, sl
 8000d72:	e77b      	b.n	8000c6c <__udivmoddi4+0x1b8>
 8000d74:	3b02      	subs	r3, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	e732      	b.n	8000be0 <__udivmoddi4+0x12c>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e709      	b.n	8000b92 <__udivmoddi4+0xde>
 8000d7e:	4464      	add	r4, ip
 8000d80:	3802      	subs	r0, #2
 8000d82:	e742      	b.n	8000c0a <__udivmoddi4+0x156>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af02      	add	r7, sp, #8
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 8000d9e:	f107 020c 	add.w	r2, r7, #12
 8000da2:	2364      	movs	r3, #100	; 0x64
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2302      	movs	r3, #2
 8000da8:	2194      	movs	r1, #148	; 0x94
 8000daa:	4803      	ldr	r0, [pc, #12]	; (8000db8 <write_register+0x30>)
 8000dac:	f004 fd38 	bl	8005820 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000118 	.word	0x20000118

08000dbc <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af02      	add	r7, sp, #8
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000dcc:	f107 020c 	add.w	r2, r7, #12
 8000dd0:	2364      	movs	r3, #100	; 0x64
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	2194      	movs	r1, #148	; 0x94
 8000dd8:	4807      	ldr	r0, [pc, #28]	; (8000df8 <read_register+0x3c>)
 8000dda:	f004 fd21 	bl	8005820 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000dde:	2364      	movs	r3, #100	; 0x64
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2301      	movs	r3, #1
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	2194      	movs	r1, #148	; 0x94
 8000de8:	4803      	ldr	r0, [pc, #12]	; (8000df8 <read_register+0x3c>)
 8000dea:	f004 fe17 	bl	8005a1c <HAL_I2C_Master_Receive>
}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000118 	.word	0x20000118

08000dfc <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000dfc:	b084      	sub	sp, #16
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	f107 0c10 	add.w	ip, r7, #16
 8000e08:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000e0c:	4b7b      	ldr	r3, [pc, #492]	; (8000ffc <CS43_Init+0x200>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000e14:	4b79      	ldr	r3, [pc, #484]	; (8000ffc <CS43_Init+0x200>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	69da      	ldr	r2, [r3, #28]
 8000e1a:	4b78      	ldr	r3, [pc, #480]	; (8000ffc <CS43_Init+0x200>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e22:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2110      	movs	r1, #16
 8000e28:	4875      	ldr	r0, [pc, #468]	; (8001000 <CS43_Init+0x204>)
 8000e2a:	f002 ff3d 	bl	8003ca8 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000e2e:	4b75      	ldr	r3, [pc, #468]	; (8001004 <CS43_Init+0x208>)
 8000e30:	4618      	mov	r0, r3
 8000e32:	f107 0310 	add.w	r3, r7, #16
 8000e36:	2254      	movs	r2, #84	; 0x54
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f00e fd8b 	bl	800f954 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	4619      	mov	r1, r3
 8000e46:	2002      	movs	r0, #2
 8000e48:	f7ff ff9e 	bl	8000d88 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000e50:	797b      	ldrb	r3, [r7, #5]
 8000e52:	f043 0320 	orr.w	r3, r3, #32
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000e5a:	797b      	ldrb	r3, [r7, #5]
 8000e5c:	f043 030c 	orr.w	r3, r3, #12
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000e64:	797b      	ldrb	r3, [r7, #5]
 8000e66:	f043 0303 	orr.w	r3, r3, #3
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	3301      	adds	r3, #1
 8000e72:	4619      	mov	r1, r3
 8000e74:	2004      	movs	r0, #4
 8000e76:	f7ff ff87 	bl	8000d88 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	3301      	adds	r3, #1
 8000e82:	4619      	mov	r1, r3
 8000e84:	2005      	movs	r0, #5
 8000e86:	f7ff ff7f 	bl	8000d88 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	2006      	movs	r0, #6
 8000e90:	f7ff ff94 	bl	8000dbc <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8000e94:	797b      	ldrb	r3, [r7, #5]
 8000e96:	f003 0320 	and.w	r3, r3, #32
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 8000e9e:	797b      	ldrb	r3, [r7, #5]
 8000ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8000ea8:	797b      	ldrb	r3, [r7, #5]
 8000eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000eb2:	797b      	ldrb	r3, [r7, #5]
 8000eb4:	f023 0310 	bic.w	r3, r3, #16
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000ebc:	797b      	ldrb	r3, [r7, #5]
 8000ebe:	f023 0304 	bic.w	r3, r3, #4
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 8000ec6:	797b      	ldrb	r3, [r7, #5]
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000ed0:	797b      	ldrb	r3, [r7, #5]
 8000ed2:	f043 0303 	orr.w	r3, r3, #3
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	3301      	adds	r3, #1
 8000ede:	4619      	mov	r1, r3
 8000ee0:	2006      	movs	r0, #6
 8000ee2:	f7ff ff51 	bl	8000d88 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	3301      	adds	r3, #1
 8000eea:	4619      	mov	r1, r3
 8000eec:	2008      	movs	r0, #8
 8000eee:	f7ff ff65 	bl	8000dbc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000ef2:	797b      	ldrb	r3, [r7, #5]
 8000ef4:	f023 030f 	bic.w	r3, r3, #15
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000efc:	797b      	ldrb	r3, [r7, #5]
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	3301      	adds	r3, #1
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	2008      	movs	r0, #8
 8000f0e:	f7ff ff3b 	bl	8000d88 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	3301      	adds	r3, #1
 8000f16:	4619      	mov	r1, r3
 8000f18:	2009      	movs	r0, #9
 8000f1a:	f7ff ff4f 	bl	8000dbc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000f1e:	797b      	ldrb	r3, [r7, #5]
 8000f20:	f023 030f 	bic.w	r3, r3, #15
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000f28:	797b      	ldrb	r3, [r7, #5]
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	3301      	adds	r3, #1
 8000f36:	4619      	mov	r1, r3
 8000f38:	2009      	movs	r0, #9
 8000f3a:	f7ff ff25 	bl	8000d88 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	3301      	adds	r3, #1
 8000f42:	4619      	mov	r1, r3
 8000f44:	200e      	movs	r0, #14
 8000f46:	f7ff ff39 	bl	8000dbc <read_register>
	if(outputMode == MODE_ANALOG)
 8000f4a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d119      	bne.n	8000f86 <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8000f52:	797b      	ldrb	r3, [r7, #5]
 8000f54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8000f5c:	797b      	ldrb	r3, [r7, #5]
 8000f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 8000f66:	797b      	ldrb	r3, [r7, #5]
 8000f68:	f023 0320 	bic.w	r3, r3, #32
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 8000f70:	797b      	ldrb	r3, [r7, #5]
 8000f72:	f023 0310 	bic.w	r3, r3, #16
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8000f7a:	797b      	ldrb	r3, [r7, #5]
 8000f7c:	f023 0308 	bic.w	r3, r3, #8
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	717b      	strb	r3, [r7, #5]
 8000f84:	e005      	b.n	8000f92 <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 8000f86:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	3301      	adds	r3, #1
 8000f96:	4619      	mov	r1, r3
 8000f98:	200e      	movs	r0, #14
 8000f9a:	f7ff fef5 	bl	8000d88 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	200f      	movs	r0, #15
 8000fa6:	f7ff ff09 	bl	8000dbc <read_register>
	iData[1] = 0x00;
 8000faa:	2300      	movs	r3, #0
 8000fac:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	200f      	movs	r0, #15
 8000fb6:	f7ff fee7 	bl	8000d88 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	2014      	movs	r0, #20
 8000fc6:	f7ff fedf 	bl	8000d88 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	3301      	adds	r3, #1
 8000fce:	4619      	mov	r1, r3
 8000fd0:	2015      	movs	r0, #21
 8000fd2:	f7ff fed9 	bl	8000d88 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	3301      	adds	r3, #1
 8000fda:	4619      	mov	r1, r3
 8000fdc:	201a      	movs	r0, #26
 8000fde:	f7ff fed3 	bl	8000d88 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	201b      	movs	r0, #27
 8000fea:	f7ff fecd 	bl	8000d88 <write_register>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ff8:	b004      	add	sp, #16
 8000ffa:	4770      	bx	lr
 8000ffc:	2000140c 	.word	0x2000140c
 8001000:	40020c00 	.word	0x40020c00
 8001004:	20000118 	.word	0x20000118

08001008 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b03      	cmp	r3, #3
 8001016:	d82b      	bhi.n	8001070 <CS43_Enable_RightLeft+0x68>
 8001018:	a201      	add	r2, pc, #4	; (adr r2, 8001020 <CS43_Enable_RightLeft+0x18>)
 800101a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101e:	bf00      	nop
 8001020:	08001031 	.word	0x08001031
 8001024:	08001041 	.word	0x08001041
 8001028:	08001051 	.word	0x08001051
 800102c:	08001061 	.word	0x08001061
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001030:	23c0      	movs	r3, #192	; 0xc0
 8001032:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001034:	7b7b      	ldrb	r3, [r7, #13]
 8001036:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800103a:	b2db      	uxtb	r3, r3
 800103c:	737b      	strb	r3, [r7, #13]
			break;
 800103e:	e018      	b.n	8001072 <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001044:	7b7b      	ldrb	r3, [r7, #13]
 8001046:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800104a:	b2db      	uxtb	r3, r3
 800104c:	737b      	strb	r3, [r7, #13]
			break;
 800104e:	e010      	b.n	8001072 <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001050:	23c0      	movs	r3, #192	; 0xc0
 8001052:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001054:	7b7b      	ldrb	r3, [r7, #13]
 8001056:	f043 0320 	orr.w	r3, r3, #32
 800105a:	b2db      	uxtb	r3, r3
 800105c:	737b      	strb	r3, [r7, #13]
			break;
 800105e:	e008      	b.n	8001072 <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001064:	7b7b      	ldrb	r3, [r7, #13]
 8001066:	f043 0320 	orr.w	r3, r3, #32
 800106a:	b2db      	uxtb	r3, r3
 800106c:	737b      	strb	r3, [r7, #13]
			break;
 800106e:	e000      	b.n	8001072 <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 8001070:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8001072:	7b7b      	ldrb	r3, [r7, #13]
 8001074:	f043 030c 	orr.w	r3, r3, #12
 8001078:	b2db      	uxtb	r3, r3
 800107a:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 800107c:	7b7b      	ldrb	r3, [r7, #13]
 800107e:	f043 0303 	orr.w	r3, r3, #3
 8001082:	b2db      	uxtb	r3, r3
 8001084:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	3301      	adds	r3, #1
 800108c:	4619      	mov	r1, r3
 800108e:	2004      	movs	r0, #4
 8001090:	f7ff fe7a 	bl	8000d88 <write_register>
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	3319      	adds	r3, #25
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	3301      	adds	r3, #1
 80010b4:	4619      	mov	r1, r3
 80010b6:	2020      	movs	r0, #32
 80010b8:	f7ff fe66 	bl	8000d88 <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	3301      	adds	r3, #1
 80010c2:	4619      	mov	r1, r3
 80010c4:	2021      	movs	r0, #33	; 0x21
 80010c6:	f7ff fe5f 	bl	8000d88 <write_register>
}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b084      	sub	sp, #16
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d019      	beq.n	8001116 <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 80010e2:	23ff      	movs	r3, #255	; 0xff
 80010e4:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	3301      	adds	r3, #1
 80010ec:	4619      	mov	r1, r3
 80010ee:	2004      	movs	r0, #4
 80010f0:	f7ff fe4a 	bl	8000d88 <write_register>
    iData[1] = 0x01;
 80010f4:	2301      	movs	r3, #1
 80010f6:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	3301      	adds	r3, #1
 80010fe:	4619      	mov	r1, r3
 8001100:	2022      	movs	r0, #34	; 0x22
 8001102:	f7ff fe41 	bl	8000d88 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	3301      	adds	r3, #1
 800110c:	4619      	mov	r1, r3
 800110e:	2023      	movs	r0, #35	; 0x23
 8001110:	f7ff fe3a 	bl	8000d88 <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 8001114:	e018      	b.n	8001148 <CS43_SetMute+0x76>
    iData[1] = 0x00;
 8001116:	2300      	movs	r3, #0
 8001118:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	3301      	adds	r3, #1
 8001120:	4619      	mov	r1, r3
 8001122:	2022      	movs	r0, #34	; 0x22
 8001124:	f7ff fe30 	bl	8000d88 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	3301      	adds	r3, #1
 800112e:	4619      	mov	r1, r3
 8001130:	2023      	movs	r0, #35	; 0x23
 8001132:	f7ff fe29 	bl	8000d88 <write_register>
    iData[1] = 0xAF;
 8001136:	23af      	movs	r3, #175	; 0xaf
 8001138:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	3301      	adds	r3, #1
 8001140:	4619      	mov	r1, r3
 8001142:	2004      	movs	r0, #4
 8001144:	f7ff fe20 	bl	8000d88 <write_register>
}
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff ffbb 	bl	80010d2 <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 800115c:	2399      	movs	r3, #153	; 0x99
 800115e:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	3301      	adds	r3, #1
 8001164:	4619      	mov	r1, r3
 8001166:	2000      	movs	r0, #0
 8001168:	f7ff fe0e 	bl	8000d88 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	3301      	adds	r3, #1
 8001174:	4619      	mov	r1, r3
 8001176:	2047      	movs	r0, #71	; 0x47
 8001178:	f7ff fe06 	bl	8000d88 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	3301      	adds	r3, #1
 8001180:	4619      	mov	r1, r3
 8001182:	2032      	movs	r0, #50	; 0x32
 8001184:	f7ff fe1a 	bl	8000dbc <read_register>
	iData[1] |= 0x80;
 8001188:	797b      	ldrb	r3, [r7, #5]
 800118a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800118e:	b2db      	uxtb	r3, r3
 8001190:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	3301      	adds	r3, #1
 8001196:	4619      	mov	r1, r3
 8001198:	2032      	movs	r0, #50	; 0x32
 800119a:	f7ff fdf5 	bl	8000d88 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	3301      	adds	r3, #1
 80011a2:	4619      	mov	r1, r3
 80011a4:	2032      	movs	r0, #50	; 0x32
 80011a6:	f7ff fe09 	bl	8000dbc <read_register>
	iData[1] &= ~(0x80);
 80011aa:	797b      	ldrb	r3, [r7, #5]
 80011ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	3301      	adds	r3, #1
 80011b8:	4619      	mov	r1, r3
 80011ba:	2032      	movs	r0, #50	; 0x32
 80011bc:	f7ff fde4 	bl	8000d88 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80011c0:	2300      	movs	r3, #0
 80011c2:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	3301      	adds	r3, #1
 80011c8:	4619      	mov	r1, r3
 80011ca:	2000      	movs	r0, #0
 80011cc:	f7ff fddc 	bl	8000d88 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 80011d0:	239e      	movs	r3, #158	; 0x9e
 80011d2:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	3301      	adds	r3, #1
 80011d8:	4619      	mov	r1, r3
 80011da:	2002      	movs	r0, #2
 80011dc:	f7ff fdd4 	bl	8000d88 <write_register>
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <CS43_Stop>:

void CS43_Stop(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(1);
 80011ee:	2001      	movs	r0, #1
 80011f0:	f7ff ff6f 	bl	80010d2 <CS43_SetMute>
  iData[1] = 0x04;
 80011f4:	2304      	movs	r3, #4
 80011f6:	717b      	strb	r3, [r7, #5]
  write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	3301      	adds	r3, #1
 80011fc:	4619      	mov	r1, r3
 80011fe:	200e      	movs	r0, #14
 8001200:	f7ff fdc2 	bl	8000d88 <write_register>
	iData[1] = 0x9F;
 8001204:	239f      	movs	r3, #159	; 0x9f
 8001206:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	3301      	adds	r3, #1
 800120c:	4619      	mov	r1, r3
 800120e:	2002      	movs	r0, #2
 8001210:	f7ff fdba 	bl	8000d88 <write_register>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8001224:	2300      	movs	r3, #0
 8001226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800122a:	23ff      	movs	r3, #255	; 0xff
 800122c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  for(index = 0; index < 8; index++)
 8001230:	2300      	movs	r3, #0
 8001232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001236:	e010      	b.n	800125a <audioI2S_pllClockConfig+0x3e>
  {
    if(I2SFreq[index] == audioFreq)
 8001238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800123c:	4a20      	ldr	r2, [pc, #128]	; (80012c0 <audioI2S_pllClockConfig+0xa4>)
 800123e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	429a      	cmp	r2, r3
 8001246:	d103      	bne.n	8001250 <audioI2S_pllClockConfig+0x34>
    {
      freqindex = index;
 8001248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800124c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(index = 0; index < 8; index++)
 8001250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001254:	3301      	adds	r3, #1
 8001256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800125a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800125e:	2b07      	cmp	r3, #7
 8001260:	d9ea      	bls.n	8001238 <audioI2S_pllClockConfig+0x1c>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	4618      	mov	r0, r3
 8001268:	f007 faf2 	bl	8008850 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 800126c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001270:	f003 0307 	and.w	r3, r3, #7
 8001274:	2b00      	cmp	r3, #0
 8001276:	d113      	bne.n	80012a0 <audioI2S_pllClockConfig+0x84>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001278:	2301      	movs	r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 800127c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001280:	4a10      	ldr	r2, [pc, #64]	; (80012c4 <audioI2S_pllClockConfig+0xa8>)
 8001282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001286:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8001288:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800128c:	4a0e      	ldr	r2, [pc, #56]	; (80012c8 <audioI2S_pllClockConfig+0xac>)
 800128e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001292:	61bb      	str	r3, [r7, #24]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	4618      	mov	r0, r3
 800129a:	f007 f9e9 	bl	8008670 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 800129e:	e00b      	b.n	80012b8 <audioI2S_pllClockConfig+0x9c>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80012a0:	2301      	movs	r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80012a4:	f44f 7381 	mov.w	r3, #258	; 0x102
 80012a8:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80012aa:	2303      	movs	r3, #3
 80012ac:	61bb      	str	r3, [r7, #24]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	4618      	mov	r0, r3
 80012b4:	f007 f9dc 	bl	8008670 <HAL_RCCEx_PeriphCLKConfig>
}
 80012b8:	bf00      	nop
 80012ba:	3728      	adds	r7, #40	; 0x28
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	0800fbe4 	.word	0x0800fbe4
 80012c4:	0800fc04 	.word	0x0800fc04
 80012c8:	0800fc24 	.word	0x0800fc24

080012cc <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 80012d4:	4b1d      	ldr	r3, [pc, #116]	; (800134c <I2S3_freqUpdate+0x80>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a1d      	ldr	r2, [pc, #116]	; (8001350 <I2S3_freqUpdate+0x84>)
 80012da:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <I2S3_freqUpdate+0x80>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	69da      	ldr	r2, [r3, #28]
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <I2S3_freqUpdate+0x80>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012ee:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 80012f0:	4b16      	ldr	r3, [pc, #88]	; (800134c <I2S3_freqUpdate+0x80>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <I2S3_freqUpdate+0x80>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2200      	movs	r2, #0
 80012fe:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <I2S3_freqUpdate+0x80>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8001308:	4b10      	ldr	r3, [pc, #64]	; (800134c <I2S3_freqUpdate+0x80>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <I2S3_freqUpdate+0x80>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001318:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <I2S3_freqUpdate+0x80>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001322:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <I2S3_freqUpdate+0x80>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <I2S3_freqUpdate+0x80>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f005 fd73 	bl	8006e1c <HAL_I2S_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <I2S3_freqUpdate+0x74>
  {
    return false;
 800133c:	2300      	movs	r3, #0
 800133e:	e000      	b.n	8001342 <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8001340:	2301      	movs	r3, #1
  }
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000016c 	.word	0x2000016c
 8001350:	40003c00 	.word	0x40003c00

08001354 <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <audioI2S_setHandle+0x1c>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6013      	str	r3, [r2, #0]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	2000016c 	.word	0x2000016c

08001374 <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff4d 	bl	800121c <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffa2 	bl	80012cc <I2S3_freqUpdate>
  return true;
 8001388:	2301      	movs	r3, #1
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 800139e:	f7ff fed7 	bl	8001150 <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <audioI2S_play+0x38>)
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013ac:	d203      	bcs.n	80013b6 <audioI2S_play+0x22>
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	085b      	lsrs	r3, r3, #1
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	e001      	b.n	80013ba <audioI2S_play+0x26>
 80013b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ba:	461a      	mov	r2, r3
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	f005 fe6d 	bl	800709c <HAL_I2S_Transmit_DMA>
  return true;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2000016c 	.word	0x2000016c

080013d0 <audioI2S_stop>:

/**
 * @brief Stop audio
 */
void audioI2S_stop(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  CS43_Stop();
 80013d4:	f7ff ff08 	bl	80011e8 <CS43_Stop>
  HAL_I2S_DMAStop(hAudioI2S);
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <audioI2S_stop+0x18>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f005 ff05 	bl	80071ec <HAL_I2S_DMAStop>
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2000016c 	.word	0x2000016c

080013ec <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <HAL_I2S_TxCpltCallback+0x20>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d101      	bne.n	8001402 <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 80013fe:	f000 f91d 	bl	800163c <audioI2S_fullTransfer_Callback>
  }
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40003c00 	.word	0x40003c00

08001410 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a04      	ldr	r2, [pc, #16]	; (8001430 <HAL_I2S_TxHalfCpltCallback+0x20>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d101      	bne.n	8001426 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8001422:	f000 f8ff 	bl	8001624 <audioI2S_halfTransfer_Callback>
  }
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40003c00 	.word	0x40003c00

08001434 <wavPlayer_reset>:
  PLAYER_CONTROL_EndOfFile,
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <wavPlayer_reset+0x1c>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <wavPlayer_reset+0x20>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	200013a4 	.word	0x200013a4
 8001454:	200013ac 	.word	0x200013ac

08001458 <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08e      	sub	sp, #56	; 0x38
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 8001464:	2201      	movs	r2, #1
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	480d      	ldr	r0, [pc, #52]	; (80014a0 <wavPlayer_fileSelect+0x48>)
 800146a:	f00d f91d 	bl	800e6a8 <f_open>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <wavPlayer_fileSelect+0x20>
  {
    return false;
 8001474:	2300      	movs	r3, #0
 8001476:	e00e      	b.n	8001496 <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	f107 010c 	add.w	r1, r7, #12
 8001480:	222c      	movs	r2, #44	; 0x2c
 8001482:	4807      	ldr	r0, [pc, #28]	; (80014a0 <wavPlayer_fileSelect+0x48>)
 8001484:	f00d face 	bl	800ea24 <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4a06      	ldr	r2, [pc, #24]	; (80014a4 <wavPlayer_fileSelect+0x4c>)
 800148c:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <wavPlayer_fileSelect+0x50>)
 8001492:	6013      	str	r3, [r2, #0]
  return true;
 8001494:	2301      	movs	r3, #1
}
 8001496:	4618      	mov	r0, r3
 8001498:	3738      	adds	r7, #56	; 0x38
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000170 	.word	0x20000170
 80014a4:	200003a0 	.word	0x200003a0
 80014a8:	200013a8 	.word	0x200013a8

080014ac <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  isFinished = false;
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <wavPlayer_play+0x48>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <wavPlayer_play+0x4c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff5a 	bl	8001374 <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 80014c0:	2100      	movs	r1, #0
 80014c2:	480e      	ldr	r0, [pc, #56]	; (80014fc <wavPlayer_play+0x50>)
 80014c4:	f00d fc95 	bl	800edf2 <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 80014c8:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <wavPlayer_play+0x54>)
 80014ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ce:	490d      	ldr	r1, [pc, #52]	; (8001504 <wavPlayer_play+0x58>)
 80014d0:	480a      	ldr	r0, [pc, #40]	; (80014fc <wavPlayer_play+0x50>)
 80014d2:	f00d faa7 	bl	800ea24 <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <wavPlayer_play+0x5c>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <wavPlayer_play+0x54>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	4a0a      	ldr	r2, [pc, #40]	; (800150c <wavPlayer_play+0x60>)
 80014e2:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 80014e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014e8:	4806      	ldr	r0, [pc, #24]	; (8001504 <wavPlayer_play+0x58>)
 80014ea:	f7ff ff53 	bl	8001394 <audioI2S_play>
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200013b0 	.word	0x200013b0
 80014f8:	200013a8 	.word	0x200013a8
 80014fc:	20000170 	.word	0x20000170
 8001500:	200013ac 	.word	0x200013ac
 8001504:	200003a4 	.word	0x200003a4
 8001508:	200003a0 	.word	0x200003a0
 800150c:	200013a4 	.word	0x200013a4

08001510 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 8001514:	4b30      	ldr	r3, [pc, #192]	; (80015d8 <wavPlayer_process+0xc8>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b03      	cmp	r3, #3
 800151c:	d859      	bhi.n	80015d2 <wavPlayer_process+0xc2>
 800151e:	a201      	add	r2, pc, #4	; (adr r2, 8001524 <wavPlayer_process+0x14>)
 8001520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001524:	080015d1 	.word	0x080015d1
 8001528:	08001535 	.word	0x08001535
 800152c:	08001577 	.word	0x08001577
 8001530:	080015b9 	.word	0x080015b9
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 8001534:	4b29      	ldr	r3, [pc, #164]	; (80015dc <wavPlayer_process+0xcc>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 800153a:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <wavPlayer_process+0xc8>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8001540:	4b26      	ldr	r3, [pc, #152]	; (80015dc <wavPlayer_process+0xcc>)
 8001542:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001546:	4926      	ldr	r1, [pc, #152]	; (80015e0 <wavPlayer_process+0xd0>)
 8001548:	4826      	ldr	r0, [pc, #152]	; (80015e4 <wavPlayer_process+0xd4>)
 800154a:	f00d fa6b 	bl	800ea24 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 800154e:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <wavPlayer_process+0xd8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001556:	d907      	bls.n	8001568 <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 8001558:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <wavPlayer_process+0xd8>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <wavPlayer_process+0xcc>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	4a21      	ldr	r2, [pc, #132]	; (80015e8 <wavPlayer_process+0xd8>)
 8001564:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8001566:	e034      	b.n	80015d2 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8001568:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <wavPlayer_process+0xd8>)
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <wavPlayer_process+0xc8>)
 8001570:	2203      	movs	r2, #3
 8001572:	701a      	strb	r2, [r3, #0]
    break;
 8001574:	e02d      	b.n	80015d2 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <wavPlayer_process+0xcc>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 800157c:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <wavPlayer_process+0xc8>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8001582:	4b16      	ldr	r3, [pc, #88]	; (80015dc <wavPlayer_process+0xcc>)
 8001584:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001588:	4918      	ldr	r1, [pc, #96]	; (80015ec <wavPlayer_process+0xdc>)
 800158a:	4816      	ldr	r0, [pc, #88]	; (80015e4 <wavPlayer_process+0xd4>)
 800158c:	f00d fa4a 	bl	800ea24 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8001590:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <wavPlayer_process+0xd8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001598:	d907      	bls.n	80015aa <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <wavPlayer_process+0xd8>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <wavPlayer_process+0xcc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	4a10      	ldr	r2, [pc, #64]	; (80015e8 <wavPlayer_process+0xd8>)
 80015a6:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 80015a8:	e013      	b.n	80015d2 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <wavPlayer_process+0xd8>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <wavPlayer_process+0xc8>)
 80015b2:	2203      	movs	r2, #3
 80015b4:	701a      	strb	r2, [r3, #0]
    break;
 80015b6:	e00c      	b.n	80015d2 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 80015b8:	480a      	ldr	r0, [pc, #40]	; (80015e4 <wavPlayer_process+0xd4>)
 80015ba:	f00d fbf0 	bl	800ed9e <f_close>
    wavPlayer_reset();
 80015be:	f7ff ff39 	bl	8001434 <wavPlayer_reset>
    isFinished = true;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <wavPlayer_process+0xe0>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <wavPlayer_process+0xc8>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
    break;
 80015ce:	e000      	b.n	80015d2 <wavPlayer_process+0xc2>
    break;
 80015d0:	bf00      	nop
  }
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200013b1 	.word	0x200013b1
 80015dc:	200013ac 	.word	0x200013ac
 80015e0:	200003a4 	.word	0x200003a4
 80015e4:	20000170 	.word	0x20000170
 80015e8:	200013a4 	.word	0x200013a4
 80015ec:	20000ba4 	.word	0x20000ba4
 80015f0:	200013b0 	.word	0x200013b0

080015f4 <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  audioI2S_stop();
 80015f8:	f7ff feea 	bl	80013d0 <audioI2S_stop>
  isFinished = true;
 80015fc:	4b02      	ldr	r3, [pc, #8]	; (8001608 <wavPlayer_stop+0x14>)
 80015fe:	2201      	movs	r2, #1
 8001600:	701a      	strb	r2, [r3, #0]
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200013b0 	.word	0x200013b0

0800160c <wavPlayer_isFinished>:

/**
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return isFinished;
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <wavPlayer_isFinished+0x14>)
 8001612:	781b      	ldrb	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	200013b0 	.word	0x200013b0

08001624 <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <audioI2S_halfTransfer_Callback+0x14>)
 800162a:	2201      	movs	r2, #1
 800162c:	701a      	strb	r2, [r3, #0]
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	200013b1 	.word	0x200013b1

0800163c <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <audioI2S_fullTransfer_Callback+0x14>)
 8001642:	2202      	movs	r2, #2
 8001644:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	200013b1 	.word	0x200013b1
 8001654:	00000000 	.word	0x00000000

08001658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165a:	b0a7      	sub	sp, #156	; 0x9c
 800165c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800165e:	f001 fb33 	bl	8002cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001662:	f000 f8e1 	bl	8001828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001666:	f000 f9c3 	bl	80019f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800166a:	f000 f9a1 	bl	80019b0 <MX_DMA_Init>
  MX_I2C1_Init();
 800166e:	f000 f943 	bl	80018f8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001672:	f000 f96f 	bl	8001954 <MX_I2S3_Init>
//  MX_SPI1_Init();
  MX_USB_HOST_Init();
 8001676:	f00d fe21 	bl	800f2bc <MX_USB_HOST_Init>
  MX_FATFS_Init();
 800167a:	f008 f971 	bl	8009960 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  CS43_Init(hi2c1, MODE_I2S);
 800167e:	4e64      	ldr	r6, [pc, #400]	; (8001810 <main+0x1b8>)
 8001680:	2300      	movs	r3, #0
 8001682:	9311      	str	r3, [sp, #68]	; 0x44
 8001684:	4668      	mov	r0, sp
 8001686:	f106 0310 	add.w	r3, r6, #16
 800168a:	2244      	movs	r2, #68	; 0x44
 800168c:	4619      	mov	r1, r3
 800168e:	f00e f961 	bl	800f954 <memcpy>
 8001692:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001696:	f7ff fbb1 	bl	8000dfc <CS43_Init>
  CS43_SetVolume(255);
 800169a:	20ff      	movs	r0, #255	; 0xff
 800169c:	f7ff fcfe 	bl	800109c <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 80016a0:	2003      	movs	r0, #3
 80016a2:	f7ff fcb1 	bl	8001008 <CS43_Enable_RightLeft>
  audioI2S_setHandle(&hi2s3);
 80016a6:	485b      	ldr	r0, [pc, #364]	; (8001814 <main+0x1bc>)
 80016a8:	f7ff fe54 	bl	8001354 <audioI2S_setHandle>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int16_t buffer[3] = {0, 0, 0};
 80016ac:	2300      	movs	r3, #0
 80016ae:	833b      	strh	r3, [r7, #24]
 80016b0:	2300      	movs	r3, #0
 80016b2:	837b      	strh	r3, [r7, #26]
 80016b4:	2300      	movs	r3, #0
 80016b6:	83bb      	strh	r3, [r7, #28]
	BSP_ACCELERO_Init();
 80016b8:	f001 fa18 	bl	8002aec <BSP_ACCELERO_Init>
	BSP_ACCELERO_GetXYZ(buffer);
 80016bc:	f107 0318 	add.w	r3, r7, #24
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 fad5 	bl	8002c70 <BSP_ACCELERO_GetXYZ>
	double start_acceleration=1;
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	4b53      	ldr	r3, [pc, #332]	; (8001818 <main+0x1c0>)
 80016cc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double bound=0.2;
 80016d0:	a34d      	add	r3, pc, #308	; (adr r3, 8001808 <main+0x1b0>)
 80016d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	int count1=0;
 80016da:	2300      	movs	r3, #0
 80016dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	int count2=0;
 80016de:	2300      	movs	r3, #0
 80016e0:	64bb      	str	r3, [r7, #72]	; 0x48
	int goDown=1;
 80016e2:	2301      	movs	r3, #1
 80016e4:	647b      	str	r3, [r7, #68]	; 0x44
	int state=0;	//1 - ground, 2 - rising, 3 - max height, 4 -
 80016e6:	2300      	movs	r3, #0
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	int array[]={0,0,0};
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
	size_t i = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	643b      	str	r3, [r7, #64]	; 0x40
	const char* FILENAME = "a.wav";
 80016fa:	4b48      	ldr	r3, [pc, #288]	; (800181c <main+0x1c4>)
 80016fc:	62bb      	str	r3, [r7, #40]	; 0x28

	  while (1)
	  {

		  BSP_ACCELERO_GetXYZ(buffer);
 80016fe:	f107 0318 	add.w	r3, r7, #24
 8001702:	4618      	mov	r0, r3
 8001704:	f001 fab4 	bl	8002c70 <BSP_ACCELERO_GetXYZ>
		  double acceleration=(double)buffer[2]/16/1000.0-start_acceleration;
 8001708:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe feb5 	bl	800047c <__aeabi_i2d>
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	4b42      	ldr	r3, [pc, #264]	; (8001820 <main+0x1c8>)
 8001718:	f7ff f844 	bl	80007a4 <__aeabi_ddiv>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	4b3e      	ldr	r3, [pc, #248]	; (8001824 <main+0x1cc>)
 800172a:	f7ff f83b 	bl	80007a4 <__aeabi_ddiv>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800173a:	f7fe fd51 	bl	80001e0 <__aeabi_dsub>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	e9c7 2308 	strd	r2, r3, [r7, #32]
		if ((-bound<acceleration) &&  (acceleration<bound)){
 8001746:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8001748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800174e:	4622      	mov	r2, r4
 8001750:	462b      	mov	r3, r5
 8001752:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001756:	f7ff f98b 	bl	8000a70 <__aeabi_dcmpgt>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00b      	beq.n	8001778 <main+0x120>
 8001760:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001764:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001768:	f7ff f964 	bl	8000a34 <__aeabi_dcmplt>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d002      	beq.n	8001778 <main+0x120>
			array[0] += 1;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	3301      	adds	r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
		}
		if (acceleration < -bound){
 8001778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800177e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001788:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800178c:	f7ff f952 	bl	8000a34 <__aeabi_dcmplt>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00a      	beq.n	80017ac <main+0x154>
			array[1] += 1;
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	3301      	adds	r3, #1
 800179a:	613b      	str	r3, [r7, #16]
			if (goDown){
 800179c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d002      	beq.n	80017a8 <main+0x150>
				count2+=1;
 80017a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017a4:	3301      	adds	r3, #1
 80017a6:	64bb      	str	r3, [r7, #72]	; 0x48
			}
			goDown=0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (acceleration > bound){
 80017ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017b0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017b4:	f7ff f95c 	bl	8000a70 <__aeabi_dcmpgt>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00d      	beq.n	80017da <main+0x182>
			array[2] += 1;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3301      	adds	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
			if (!goDown){
 80017c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d105      	bne.n	80017d6 <main+0x17e>
				count1+=1;
 80017ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017cc:	3301      	adds	r3, #1
 80017ce:	64fb      	str	r3, [r7, #76]	; 0x4c
				Sound_play(FILENAME);
 80017d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017d2:	f000 fa17 	bl	8001c04 <Sound_play>
			}
			goDown=1;
 80017d6:	2301      	movs	r3, #1
 80017d8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if ((count1>=10)&&(count2>=10)){
 80017da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017dc:	2b09      	cmp	r3, #9
 80017de:	dd08      	ble.n	80017f2 <main+0x19a>
 80017e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017e2:	2b09      	cmp	r3, #9
 80017e4:	dd05      	ble.n	80017f2 <main+0x19a>
			i = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	643b      	str	r3, [r7, #64]	; 0x40
			count1 = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	64fb      	str	r3, [r7, #76]	; 0x4c
			count2 = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	64bb      	str	r3, [r7, #72]	; 0x48
		}
		i += 1;
 80017f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017f4:	3301      	adds	r3, #1
 80017f6:	643b      	str	r3, [r7, #64]	; 0x40

		HAL_Delay(200);
 80017f8:	20c8      	movs	r0, #200	; 0xc8
 80017fa:	f001 fad7 	bl	8002dac <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80017fe:	f00d fd83 	bl	800f308 <MX_USB_HOST_Process>
	  {
 8001802:	e77c      	b.n	80016fe <main+0xa6>
 8001804:	f3af 8000 	nop.w
 8001808:	9999999a 	.word	0x9999999a
 800180c:	3fc99999 	.word	0x3fc99999
 8001810:	200013b8 	.word	0x200013b8
 8001814:	2000140c 	.word	0x2000140c
 8001818:	3ff00000 	.word	0x3ff00000
 800181c:	0800fb94 	.word	0x0800fb94
 8001820:	40300000 	.word	0x40300000
 8001824:	408f4000 	.word	0x408f4000

08001828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b094      	sub	sp, #80	; 0x50
 800182c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800182e:	f107 0320 	add.w	r3, r7, #32
 8001832:	2230      	movs	r2, #48	; 0x30
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f00e f89a 	bl	800f970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800184c:	2300      	movs	r3, #0
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	4b27      	ldr	r3, [pc, #156]	; (80018f0 <SystemClock_Config+0xc8>)
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	4a26      	ldr	r2, [pc, #152]	; (80018f0 <SystemClock_Config+0xc8>)
 8001856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185a:	6413      	str	r3, [r2, #64]	; 0x40
 800185c:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <SystemClock_Config+0xc8>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001868:	2300      	movs	r3, #0
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <SystemClock_Config+0xcc>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a20      	ldr	r2, [pc, #128]	; (80018f4 <SystemClock_Config+0xcc>)
 8001872:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <SystemClock_Config+0xcc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001884:	2301      	movs	r3, #1
 8001886:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001888:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800188e:	2302      	movs	r3, #2
 8001890:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001892:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001896:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001898:	2304      	movs	r3, #4
 800189a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800189c:	23c0      	movs	r3, #192	; 0xc0
 800189e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018a0:	2304      	movs	r3, #4
 80018a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80018a4:	2308      	movs	r3, #8
 80018a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a8:	f107 0320 	add.w	r3, r7, #32
 80018ac:	4618      	mov	r0, r3
 80018ae:	f006 fa5b 	bl	8007d68 <HAL_RCC_OscConfig>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018b8:	f000 f9f0 	bl	8001c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018bc:	230f      	movs	r3, #15
 80018be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018c0:	2302      	movs	r3, #2
 80018c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018d2:	f107 030c 	add.w	r3, r7, #12
 80018d6:	2103      	movs	r1, #3
 80018d8:	4618      	mov	r0, r3
 80018da:	f006 fcbd 	bl	8008258 <HAL_RCC_ClockConfig>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018e4:	f000 f9da 	bl	8001c9c <Error_Handler>
  }
}
 80018e8:	bf00      	nop
 80018ea:	3750      	adds	r7, #80	; 0x50
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40007000 	.word	0x40007000

080018f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <MX_I2C1_Init+0x50>)
 80018fe:	4a13      	ldr	r2, [pc, #76]	; (800194c <MX_I2C1_Init+0x54>)
 8001900:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_I2C1_Init+0x50>)
 8001904:	4a12      	ldr	r2, [pc, #72]	; (8001950 <MX_I2C1_Init+0x58>)
 8001906:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_I2C1_Init+0x50>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_I2C1_Init+0x50>)
 8001910:	2200      	movs	r2, #0
 8001912:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_I2C1_Init+0x50>)
 8001916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800191a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <MX_I2C1_Init+0x50>)
 800191e:	2200      	movs	r2, #0
 8001920:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_I2C1_Init+0x50>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <MX_I2C1_Init+0x50>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_I2C1_Init+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <MX_I2C1_Init+0x50>)
 8001936:	f003 fdff 	bl	8005538 <HAL_I2C_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001940:	f000 f9ac 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200013b8 	.word	0x200013b8
 800194c:	40005400 	.word	0x40005400
 8001950:	000186a0 	.word	0x000186a0

08001954 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001958:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <MX_I2S3_Init+0x54>)
 800195a:	4a14      	ldr	r2, [pc, #80]	; (80019ac <MX_I2S3_Init+0x58>)
 800195c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <MX_I2S3_Init+0x54>)
 8001960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001964:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <MX_I2S3_Init+0x54>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800196c:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <MX_I2S3_Init+0x54>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001972:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <MX_I2S3_Init+0x54>)
 8001974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001978:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <MX_I2S3_Init+0x54>)
 800197c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001980:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_I2S3_Init+0x54>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <MX_I2S3_Init+0x54>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <MX_I2S3_Init+0x54>)
 8001990:	2200      	movs	r2, #0
 8001992:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001994:	4804      	ldr	r0, [pc, #16]	; (80019a8 <MX_I2S3_Init+0x54>)
 8001996:	f005 fa41 	bl	8006e1c <HAL_I2S_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80019a0:	f000 f97c 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	2000140c 	.word	0x2000140c
 80019ac:	40003c00 	.word	0x40003c00

080019b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <MX_DMA_Init+0x3c>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a0b      	ldr	r2, [pc, #44]	; (80019ec <MX_DMA_Init+0x3c>)
 80019c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <MX_DMA_Init+0x3c>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	2010      	movs	r0, #16
 80019d8:	f001 fae7 	bl	8002faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80019dc:	2010      	movs	r0, #16
 80019de:	f001 fb00 	bl	8002fe2 <HAL_NVIC_EnableIRQ>

}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800

080019f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08c      	sub	sp, #48	; 0x30
 80019f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f6:	f107 031c 	add.w	r3, r7, #28
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
 8001a04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	4b78      	ldr	r3, [pc, #480]	; (8001bec <MX_GPIO_Init+0x1fc>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a77      	ldr	r2, [pc, #476]	; (8001bec <MX_GPIO_Init+0x1fc>)
 8001a10:	f043 0310 	orr.w	r3, r3, #16
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b75      	ldr	r3, [pc, #468]	; (8001bec <MX_GPIO_Init+0x1fc>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	61bb      	str	r3, [r7, #24]
 8001a20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	4b71      	ldr	r3, [pc, #452]	; (8001bec <MX_GPIO_Init+0x1fc>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a70      	ldr	r2, [pc, #448]	; (8001bec <MX_GPIO_Init+0x1fc>)
 8001a2c:	f043 0304 	orr.w	r3, r3, #4
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b6e      	ldr	r3, [pc, #440]	; (8001bec <MX_GPIO_Init+0x1fc>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	4b6a      	ldr	r3, [pc, #424]	; (8001bec <MX_GPIO_Init+0x1fc>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a69      	ldr	r2, [pc, #420]	; (8001bec <MX_GPIO_Init+0x1fc>)
 8001a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b67      	ldr	r3, [pc, #412]	; (8001bec <MX_GPIO_Init+0x1fc>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	4b63      	ldr	r3, [pc, #396]	; (8001bec <MX_GPIO_Init+0x1fc>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a62      	ldr	r2, [pc, #392]	; (8001bec <MX_GPIO_Init+0x1fc>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b60      	ldr	r3, [pc, #384]	; (8001bec <MX_GPIO_Init+0x1fc>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	4b5c      	ldr	r3, [pc, #368]	; (8001bec <MX_GPIO_Init+0x1fc>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a5b      	ldr	r2, [pc, #364]	; (8001bec <MX_GPIO_Init+0x1fc>)
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b59      	ldr	r3, [pc, #356]	; (8001bec <MX_GPIO_Init+0x1fc>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	4b55      	ldr	r3, [pc, #340]	; (8001bec <MX_GPIO_Init+0x1fc>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a54      	ldr	r2, [pc, #336]	; (8001bec <MX_GPIO_Init+0x1fc>)
 8001a9c:	f043 0308 	orr.w	r3, r3, #8
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b52      	ldr	r3, [pc, #328]	; (8001bec <MX_GPIO_Init+0x1fc>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2108      	movs	r1, #8
 8001ab2:	484f      	ldr	r0, [pc, #316]	; (8001bf0 <MX_GPIO_Init+0x200>)
 8001ab4:	f002 f8f8 	bl	8003ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2101      	movs	r1, #1
 8001abc:	484d      	ldr	r0, [pc, #308]	; (8001bf4 <MX_GPIO_Init+0x204>)
 8001abe:	f002 f8f3 	bl	8003ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	2102      	movs	r1, #2
 8001ac6:	484b      	ldr	r0, [pc, #300]	; (8001bf4 <MX_GPIO_Init+0x204>)
 8001ac8:	f002 f8ee 	bl	8003ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001acc:	2200      	movs	r2, #0
 8001ace:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001ad2:	4849      	ldr	r0, [pc, #292]	; (8001bf8 <MX_GPIO_Init+0x208>)
 8001ad4:	f002 f8e8 	bl	8003ca8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001ad8:	2304      	movs	r3, #4
 8001ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001adc:	2300      	movs	r3, #0
 8001ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4841      	ldr	r0, [pc, #260]	; (8001bf0 <MX_GPIO_Init+0x200>)
 8001aec:	f001 fe74 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001af0:	2308      	movs	r3, #8
 8001af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af4:	2301      	movs	r3, #1
 8001af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	4619      	mov	r1, r3
 8001b06:	483a      	ldr	r0, [pc, #232]	; (8001bf0 <MX_GPIO_Init+0x200>)
 8001b08:	f001 fe66 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001b0c:	2332      	movs	r3, #50	; 0x32
 8001b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b10:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b1a:	f107 031c 	add.w	r3, r7, #28
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4833      	ldr	r0, [pc, #204]	; (8001bf0 <MX_GPIO_Init+0x200>)
 8001b22:	f001 fe59 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC1 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_1;
 8001b26:	2303      	movs	r3, #3
 8001b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	482d      	ldr	r0, [pc, #180]	; (8001bf4 <MX_GPIO_Init+0x204>)
 8001b3e:	f001 fe4b 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001b42:	2308      	movs	r3, #8
 8001b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b52:	2305      	movs	r3, #5
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4825      	ldr	r0, [pc, #148]	; (8001bf4 <MX_GPIO_Init+0x204>)
 8001b5e:	f001 fe3b 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b62:	2301      	movs	r3, #1
 8001b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b70:	f107 031c 	add.w	r3, r7, #28
 8001b74:	4619      	mov	r1, r3
 8001b76:	4821      	ldr	r0, [pc, #132]	; (8001bfc <MX_GPIO_Init+0x20c>)
 8001b78:	f001 fe2e 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001b7c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b8e:	2305      	movs	r3, #5
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b92:	f107 031c 	add.w	r3, r7, #28
 8001b96:	4619      	mov	r1, r3
 8001b98:	4819      	ldr	r0, [pc, #100]	; (8001c00 <MX_GPIO_Init+0x210>)
 8001b9a:	f001 fe1d 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001b9e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001ba2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2300      	movs	r3, #0
 8001bae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4810      	ldr	r0, [pc, #64]	; (8001bf8 <MX_GPIO_Init+0x208>)
 8001bb8:	f001 fe0e 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001bbc:	2320      	movs	r3, #32
 8001bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bc8:	f107 031c 	add.w	r3, r7, #28
 8001bcc:	4619      	mov	r1, r3
 8001bce:	480a      	ldr	r0, [pc, #40]	; (8001bf8 <MX_GPIO_Init+0x208>)
 8001bd0:	f001 fe02 	bl	80037d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	2006      	movs	r0, #6
 8001bda:	f001 f9e6 	bl	8002faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bde:	2006      	movs	r0, #6
 8001be0:	f001 f9ff 	bl	8002fe2 <HAL_NVIC_EnableIRQ>

}
 8001be4:	bf00      	nop
 8001be6:	3730      	adds	r7, #48	; 0x30
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40020800 	.word	0x40020800
 8001bf8:	40020c00 	.word	0x40020c00
 8001bfc:	40020000 	.word	0x40020000
 8001c00:	40020400 	.word	0x40020400

08001c04 <Sound_play>:

/* USER CODE BEGIN 4 */

void Sound_play(const char* FILENAME){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	while (Appli_state != APPLICATION_READY) {
 8001c0c:	bf00      	nop
 8001c0e:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <Sound_play+0x84>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d1fb      	bne.n	8001c0e <Sound_play+0xa>

	}
	if(!isUSBMounted)
 8001c16:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <Sound_play+0x88>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d107      	bne.n	8001c2e <Sound_play+0x2a>
	  {
		f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	491b      	ldr	r1, [pc, #108]	; (8001c90 <Sound_play+0x8c>)
 8001c22:	481c      	ldr	r0, [pc, #112]	; (8001c94 <Sound_play+0x90>)
 8001c24:	f00c fcfa 	bl	800e61c <f_mount>
		isUSBMounted = 1;
 8001c28:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <Sound_play+0x88>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]
	  }
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c34:	4818      	ldr	r0, [pc, #96]	; (8001c98 <Sound_play+0x94>)
 8001c36:	f002 f837 	bl	8003ca8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8001c3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c3e:	f001 f8b5 	bl	8002dac <HAL_Delay>
		wavPlayer_fileSelect(FILENAME);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff fc08 	bl	8001458 <wavPlayer_fileSelect>
		wavPlayer_play();
 8001c48:	f7ff fc30 	bl	80014ac <wavPlayer_play>

		while(!wavPlayer_isFinished())
 8001c4c:	e007      	b.n	8001c5e <Sound_play+0x5a>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c54:	4810      	ldr	r0, [pc, #64]	; (8001c98 <Sound_play+0x94>)
 8001c56:	f002 f827 	bl	8003ca8 <HAL_GPIO_WritePin>
		  wavPlayer_process();
 8001c5a:	f7ff fc59 	bl	8001510 <wavPlayer_process>
		while(!wavPlayer_isFinished())
 8001c5e:	f7ff fcd5 	bl	800160c <wavPlayer_isFinished>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f083 0301 	eor.w	r3, r3, #1
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1ef      	bne.n	8001c4e <Sound_play+0x4a>
		}
		wavPlayer_stop();
 8001c6e:	f7ff fcc1 	bl	80015f4 <wavPlayer_stop>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c72:	2200      	movs	r2, #0
 8001c74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c78:	4807      	ldr	r0, [pc, #28]	; (8001c98 <Sound_play+0x94>)
 8001c7a:	f002 f815 	bl	8003ca8 <HAL_GPIO_WritePin>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20001b58 	.word	0x20001b58
 8001c8c:	200013b4 	.word	0x200013b4
 8001c90:	20001518 	.word	0x20001518
 8001c94:	2000151c 	.word	0x2000151c
 8001c98:	40020c00 	.word	0x40020c00

08001c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca0:	b672      	cpsid	i
}
 8001ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <Error_Handler+0x8>
	...

08001ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <HAL_MspInit+0x5c>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4a13      	ldr	r2, [pc, #76]	; (8001d04 <HAL_MspInit+0x5c>)
 8001cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_MspInit+0x5c>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <HAL_MspInit+0x5c>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	4a0c      	ldr	r2, [pc, #48]	; (8001d04 <HAL_MspInit+0x5c>)
 8001cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_MspInit+0x5c>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ce6:	2007      	movs	r0, #7
 8001ce8:	f001 f954 	bl	8002f94 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2100      	movs	r1, #0
 8001cf0:	2005      	movs	r0, #5
 8001cf2:	f001 f95a 	bl	8002faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001cf6:	2005      	movs	r0, #5
 8001cf8:	f001 f973 	bl	8002fe2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40023800 	.word	0x40023800

08001d08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	; 0x28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a19      	ldr	r2, [pc, #100]	; (8001d8c <HAL_I2C_MspInit+0x84>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d12c      	bne.n	8001d84 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <HAL_I2C_MspInit+0x88>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a17      	ldr	r2, [pc, #92]	; (8001d90 <HAL_I2C_MspInit+0x88>)
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <HAL_I2C_MspInit+0x88>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001d46:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d4c:	2312      	movs	r3, #18
 8001d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d50:	2301      	movs	r3, #1
 8001d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2300      	movs	r3, #0
 8001d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d58:	2304      	movs	r3, #4
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4619      	mov	r1, r3
 8001d62:	480c      	ldr	r0, [pc, #48]	; (8001d94 <HAL_I2C_MspInit+0x8c>)
 8001d64:	f001 fd38 	bl	80037d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <HAL_I2C_MspInit+0x88>)
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	4a07      	ldr	r2, [pc, #28]	; (8001d90 <HAL_I2C_MspInit+0x88>)
 8001d72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d76:	6413      	str	r3, [r2, #64]	; 0x40
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_I2C_MspInit+0x88>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d84:	bf00      	nop
 8001d86:	3728      	adds	r7, #40	; 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40005400 	.word	0x40005400
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020400 	.word	0x40020400

08001d98 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <HAL_I2C_MspDeInit+0x38>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d10e      	bne.n	8001dc8 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001daa:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <HAL_I2C_MspDeInit+0x3c>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	4a09      	ldr	r2, [pc, #36]	; (8001dd4 <HAL_I2C_MspDeInit+0x3c>)
 8001db0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001db4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 8001db6:	2140      	movs	r1, #64	; 0x40
 8001db8:	4807      	ldr	r0, [pc, #28]	; (8001dd8 <HAL_I2C_MspDeInit+0x40>)
 8001dba:	f001 fe91 	bl	8003ae0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 8001dbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dc2:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <HAL_I2C_MspDeInit+0x40>)
 8001dc4:	f001 fe8c 	bl	8003ae0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40005400 	.word	0x40005400
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020400 	.word	0x40020400

08001ddc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b090      	sub	sp, #64	; 0x40
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
 8001e04:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI3)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a4f      	ldr	r2, [pc, #316]	; (8001f48 <HAL_I2S_MspInit+0x16c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	f040 8096 	bne.w	8001f3e <HAL_I2S_MspInit+0x162>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001e12:	2301      	movs	r3, #1
 8001e14:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001e16:	23c8      	movs	r3, #200	; 0xc8
 8001e18:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8001e1a:	2308      	movs	r3, #8
 8001e1c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4618      	mov	r0, r3
 8001e28:	f006 fc22 	bl	8008670 <HAL_RCCEx_PeriphCLKConfig>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8001e32:	f7ff ff33 	bl	8001c9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	4b44      	ldr	r3, [pc, #272]	; (8001f4c <HAL_I2S_MspInit+0x170>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	4a43      	ldr	r2, [pc, #268]	; (8001f4c <HAL_I2S_MspInit+0x170>)
 8001e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e44:	6413      	str	r3, [r2, #64]	; 0x40
 8001e46:	4b41      	ldr	r3, [pc, #260]	; (8001f4c <HAL_I2S_MspInit+0x170>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <HAL_I2S_MspInit+0x170>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a3c      	ldr	r2, [pc, #240]	; (8001f4c <HAL_I2S_MspInit+0x170>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b3a      	ldr	r3, [pc, #232]	; (8001f4c <HAL_I2S_MspInit+0x170>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	4b36      	ldr	r3, [pc, #216]	; (8001f4c <HAL_I2S_MspInit+0x170>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a35      	ldr	r2, [pc, #212]	; (8001f4c <HAL_I2S_MspInit+0x170>)
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b33      	ldr	r3, [pc, #204]	; (8001f4c <HAL_I2S_MspInit+0x170>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001e8a:	2310      	movs	r3, #16
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e96:	2300      	movs	r3, #0
 8001e98:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e9a:	2306      	movs	r3, #6
 8001e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001e9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	482a      	ldr	r0, [pc, #168]	; (8001f50 <HAL_I2S_MspInit+0x174>)
 8001ea6:	f001 fc97 	bl	80037d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001eaa:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ebc:	2306      	movs	r3, #6
 8001ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4823      	ldr	r0, [pc, #140]	; (8001f54 <HAL_I2S_MspInit+0x178>)
 8001ec8:	f001 fc86 	bl	80037d8 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001ecc:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <HAL_I2S_MspInit+0x17c>)
 8001ece:	4a23      	ldr	r2, [pc, #140]	; (8001f5c <HAL_I2S_MspInit+0x180>)
 8001ed0:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001ed2:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <HAL_I2S_MspInit+0x17c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <HAL_I2S_MspInit+0x17c>)
 8001eda:	2240      	movs	r2, #64	; 0x40
 8001edc:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ede:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <HAL_I2S_MspInit+0x17c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	; (8001f58 <HAL_I2S_MspInit+0x17c>)
 8001ee6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eea:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001eec:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <HAL_I2S_MspInit+0x17c>)
 8001eee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ef2:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ef4:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <HAL_I2S_MspInit+0x17c>)
 8001ef6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001efa:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <HAL_I2S_MspInit+0x17c>)
 8001efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f02:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f04:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <HAL_I2S_MspInit+0x17c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <HAL_I2S_MspInit+0x17c>)
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <HAL_I2S_MspInit+0x17c>)
 8001f12:	2203      	movs	r2, #3
 8001f14:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <HAL_I2S_MspInit+0x17c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <HAL_I2S_MspInit+0x17c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001f22:	480d      	ldr	r0, [pc, #52]	; (8001f58 <HAL_I2S_MspInit+0x17c>)
 8001f24:	f001 f878 	bl	8003018 <HAL_DMA_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 8001f2e:	f7ff feb5 	bl	8001c9c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a08      	ldr	r2, [pc, #32]	; (8001f58 <HAL_I2S_MspInit+0x17c>)
 8001f36:	639a      	str	r2, [r3, #56]	; 0x38
 8001f38:	4a07      	ldr	r2, [pc, #28]	; (8001f58 <HAL_I2S_MspInit+0x17c>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001f3e:	bf00      	nop
 8001f40:	3740      	adds	r7, #64	; 0x40
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40003c00 	.word	0x40003c00
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40020000 	.word	0x40020000
 8001f54:	40020800 	.word	0x40020800
 8001f58:	20001454 	.word	0x20001454
 8001f5c:	40026088 	.word	0x40026088

08001f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <NMI_Handler+0x4>

08001f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f6a:	e7fe      	b.n	8001f6a <HardFault_Handler+0x4>

08001f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <MemManage_Handler+0x4>

08001f72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <BusFault_Handler+0x4>

08001f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <UsageFault_Handler+0x4>

08001f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fac:	f000 fede 	bl	8002d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	f001 fe88 	bl	8003cdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001fd4:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <DMA1_Stream5_IRQHandler+0x10>)
 8001fd6:	f001 f995 	bl	8003304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20001454 	.word	0x20001454

08001fe4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001fe8:	4802      	ldr	r0, [pc, #8]	; (8001ff4 <OTG_FS_IRQHandler+0x10>)
 8001fea:	f002 f905 	bl	80041f8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20001b5c 	.word	0x20001b5c

08001ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002000:	4a14      	ldr	r2, [pc, #80]	; (8002054 <_sbrk+0x5c>)
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <_sbrk+0x60>)
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800200c:	4b13      	ldr	r3, [pc, #76]	; (800205c <_sbrk+0x64>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d102      	bne.n	800201a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <_sbrk+0x64>)
 8002016:	4a12      	ldr	r2, [pc, #72]	; (8002060 <_sbrk+0x68>)
 8002018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <_sbrk+0x64>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	429a      	cmp	r2, r3
 8002026:	d207      	bcs.n	8002038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002028:	f00d fc5a 	bl	800f8e0 <__errno>
 800202c:	4603      	mov	r3, r0
 800202e:	220c      	movs	r2, #12
 8002030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295
 8002036:	e009      	b.n	800204c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <_sbrk+0x64>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <_sbrk+0x64>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	4a05      	ldr	r2, [pc, #20]	; (800205c <_sbrk+0x64>)
 8002048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800204a:	68fb      	ldr	r3, [r7, #12]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20020000 	.word	0x20020000
 8002058:	00002000 	.word	0x00002000
 800205c:	200014b4 	.word	0x200014b4
 8002060:	20001e70 	.word	0x20001e70

08002064 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <SystemInit+0x20>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206e:	4a05      	ldr	r2, [pc, #20]	; (8002084 <SystemInit+0x20>)
 8002070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800208c:	480d      	ldr	r0, [pc, #52]	; (80020c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800208e:	490e      	ldr	r1, [pc, #56]	; (80020c8 <LoopFillZerobss+0x1a>)

  ldr r2, =_sidata
 8002090:	4a0e      	ldr	r2, [pc, #56]	; (80020cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002094:	e002      	b.n	800209c <LoopCopyDataInit>

08002096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800209a:	3304      	adds	r3, #4

0800209c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800209c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800209e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a0:	d3f9      	bcc.n	8002096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020a2:	4a0b      	ldr	r2, [pc, #44]	; (80020d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020a4:	4c0b      	ldr	r4, [pc, #44]	; (80020d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a8:	e001      	b.n	80020ae <LoopFillZerobss>

080020aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020ac:	3204      	adds	r2, #4

080020ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b0:	d3fb      	bcc.n	80020aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020b2:	f7ff ffd7 	bl	8002064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020b6:	f00d fc19 	bl	800f8ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ba:	f7ff facd 	bl	8001658 <main>
  bx  lr    
 80020be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c8:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80020cc:	0800fd08 	.word	0x0800fd08
  ldr r2, =_sbss
 80020d0:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80020d4:	20001e70 	.word	0x20001e70

080020d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020d8:	e7fe      	b.n	80020d8 <ADC_IRQHandler>

080020da <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	4603      	mov	r3, r0
 80020e2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80020e4:	2300      	movs	r3, #0
 80020e6:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 80020e8:	f000 fc82 	bl	80029f0 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	461a      	mov	r2, r3
 80020f4:	2120      	movs	r1, #32
 80020f6:	2032      	movs	r0, #50	; 0x32
 80020f8:	f000 fcd2 	bl	8002aa0 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 80020fc:	2300      	movs	r3, #0
 80020fe:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	461a      	mov	r2, r3
 8002104:	2123      	movs	r1, #35	; 0x23
 8002106:	2032      	movs	r0, #50	; 0x32
 8002108:	f000 fcca 	bl	8002aa0 <COMPASSACCELERO_IO_Write>
}
 800210c:	bf00      	nop
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002128:	2300      	movs	r3, #0
 800212a:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800212c:	f000 fc60 	bl	80029f0 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 8002130:	210f      	movs	r1, #15
 8002132:	2032      	movs	r0, #50	; 0x32
 8002134:	f000 fcc7 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 8002138:	4603      	mov	r3, r0
 800213a:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 800213c:	79fb      	ldrb	r3, [r7, #7]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800214c:	2124      	movs	r1, #36	; 0x24
 800214e:	2032      	movs	r0, #50	; 0x32
 8002150:	f000 fcb9 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 8002154:	4603      	mov	r3, r0
 8002156:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800215e:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	461a      	mov	r2, r3
 8002164:	2124      	movs	r1, #36	; 0x24
 8002166:	2032      	movs	r0, #50	; 0x32
 8002168:	f000 fc9a 	bl	8002aa0 <COMPASSACCELERO_IO_Write>
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800217e:	2121      	movs	r1, #33	; 0x21
 8002180:	2032      	movs	r0, #50	; 0x32
 8002182:	f000 fca0 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 8002186:	4603      	mov	r3, r0
 8002188:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	f003 030c 	and.w	r3, r3, #12
 8002190:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8002192:	7bfa      	ldrb	r2, [r7, #15]
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	4313      	orrs	r3, r2
 8002198:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	461a      	mov	r2, r3
 800219e:	2121      	movs	r1, #33	; 0x21
 80021a0:	2032      	movs	r0, #50	; 0x32
 80021a2:	f000 fc7d 	bl	8002aa0 <COMPASSACCELERO_IO_Write>
}
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b084      	sub	sp, #16
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	4603      	mov	r3, r0
 80021b6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80021b8:	2121      	movs	r1, #33	; 0x21
 80021ba:	2032      	movs	r0, #50	; 0x32
 80021bc:	f000 fc83 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 80021c0:	4603      	mov	r3, r0
 80021c2:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	f023 0308 	bic.w	r3, r3, #8
 80021ca:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	461a      	mov	r2, r3
 80021d8:	2121      	movs	r1, #33	; 0x21
 80021da:	2032      	movs	r0, #50	; 0x32
 80021dc:	f000 fc60 	bl	8002aa0 <COMPASSACCELERO_IO_Write>
}
 80021e0:	bf00      	nop
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 80021f0:	2300      	movs	r3, #0
 80021f2:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80021f8:	2301      	movs	r3, #1
 80021fa:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 80021fc:	2123      	movs	r1, #35	; 0x23
 80021fe:	2032      	movs	r0, #50	; 0x32
 8002200:	f000 fc61 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 8002204:	4603      	mov	r3, r0
 8002206:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8002208:	2124      	movs	r1, #36	; 0x24
 800220a:	2032      	movs	r0, #50	; 0x32
 800220c:	f000 fc5b 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 8002210:	4603      	mov	r3, r0
 8002212:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8002214:	2128      	movs	r1, #40	; 0x28
 8002216:	2032      	movs	r0, #50	; 0x32
 8002218:	f000 fc55 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 800221c:	4603      	mov	r3, r0
 800221e:	b25b      	sxtb	r3, r3
 8002220:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8002222:	2129      	movs	r1, #41	; 0x29
 8002224:	2032      	movs	r0, #50	; 0x32
 8002226:	f000 fc4e 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 800222a:	4603      	mov	r3, r0
 800222c:	b25b      	sxtb	r3, r3
 800222e:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8002230:	212a      	movs	r1, #42	; 0x2a
 8002232:	2032      	movs	r0, #50	; 0x32
 8002234:	f000 fc47 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 8002238:	4603      	mov	r3, r0
 800223a:	b25b      	sxtb	r3, r3
 800223c:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 800223e:	212b      	movs	r1, #43	; 0x2b
 8002240:	2032      	movs	r0, #50	; 0x32
 8002242:	f000 fc40 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 8002246:	4603      	mov	r3, r0
 8002248:	b25b      	sxtb	r3, r3
 800224a:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 800224c:	212c      	movs	r1, #44	; 0x2c
 800224e:	2032      	movs	r0, #50	; 0x32
 8002250:	f000 fc39 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 8002254:	4603      	mov	r3, r0
 8002256:	b25b      	sxtb	r3, r3
 8002258:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 800225a:	212d      	movs	r1, #45	; 0x2d
 800225c:	2032      	movs	r0, #50	; 0x32
 800225e:	f000 fc32 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 8002262:	4603      	mov	r3, r0
 8002264:	b25b      	sxtb	r3, r3
 8002266:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8002268:	7d3b      	ldrb	r3, [r7, #20]
 800226a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226e:	2b00      	cmp	r3, #0
 8002270:	d123      	bne.n	80022ba <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8002272:	2300      	movs	r3, #0
 8002274:	77fb      	strb	r3, [r7, #31]
 8002276:	e01c      	b.n	80022b2 <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8002278:	7ffb      	ldrb	r3, [r7, #31]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	3301      	adds	r3, #1
 800227e:	3320      	adds	r3, #32
 8002280:	443b      	add	r3, r7
 8002282:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002286:	b29b      	uxth	r3, r3
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	b29a      	uxth	r2, r3
 800228c:	7ffb      	ldrb	r3, [r7, #31]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	3320      	adds	r3, #32
 8002292:	443b      	add	r3, r7
 8002294:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002298:	b29b      	uxth	r3, r3
 800229a:	4413      	add	r3, r2
 800229c:	b29a      	uxth	r2, r3
 800229e:	7ffb      	ldrb	r3, [r7, #31]
 80022a0:	b212      	sxth	r2, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	3320      	adds	r3, #32
 80022a6:	443b      	add	r3, r7
 80022a8:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80022ac:	7ffb      	ldrb	r3, [r7, #31]
 80022ae:	3301      	adds	r3, #1
 80022b0:	77fb      	strb	r3, [r7, #31]
 80022b2:	7ffb      	ldrb	r3, [r7, #31]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d9df      	bls.n	8002278 <LSM303AGR_AccReadXYZ+0x90>
 80022b8:	e022      	b.n	8002300 <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 80022ba:	2300      	movs	r3, #0
 80022bc:	77fb      	strb	r3, [r7, #31]
 80022be:	e01c      	b.n	80022fa <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 80022c0:	7ffb      	ldrb	r3, [r7, #31]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	3320      	adds	r3, #32
 80022c6:	443b      	add	r3, r7
 80022c8:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	7ffb      	ldrb	r3, [r7, #31]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	3301      	adds	r3, #1
 80022d8:	3320      	adds	r3, #32
 80022da:	443b      	add	r3, r7
 80022dc:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	4413      	add	r3, r2
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	7ffb      	ldrb	r3, [r7, #31]
 80022e8:	b212      	sxth	r2, r2
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	3320      	adds	r3, #32
 80022ee:	443b      	add	r3, r7
 80022f0:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80022f4:	7ffb      	ldrb	r3, [r7, #31]
 80022f6:	3301      	adds	r3, #1
 80022f8:	77fb      	strb	r3, [r7, #31]
 80022fa:	7ffb      	ldrb	r3, [r7, #31]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d9df      	bls.n	80022c0 <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8002300:	7d3b      	ldrb	r3, [r7, #20]
 8002302:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002306:	2b30      	cmp	r3, #48	; 0x30
 8002308:	d013      	beq.n	8002332 <LSM303AGR_AccReadXYZ+0x14a>
 800230a:	2b30      	cmp	r3, #48	; 0x30
 800230c:	dc14      	bgt.n	8002338 <LSM303AGR_AccReadXYZ+0x150>
 800230e:	2b20      	cmp	r3, #32
 8002310:	d00c      	beq.n	800232c <LSM303AGR_AccReadXYZ+0x144>
 8002312:	2b20      	cmp	r3, #32
 8002314:	dc10      	bgt.n	8002338 <LSM303AGR_AccReadXYZ+0x150>
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <LSM303AGR_AccReadXYZ+0x138>
 800231a:	2b10      	cmp	r3, #16
 800231c:	d003      	beq.n	8002326 <LSM303AGR_AccReadXYZ+0x13e>
 800231e:	e00b      	b.n	8002338 <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8002320:	2301      	movs	r3, #1
 8002322:	77bb      	strb	r3, [r7, #30]
    break;
 8002324:	e008      	b.n	8002338 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 8002326:	2302      	movs	r3, #2
 8002328:	77bb      	strb	r3, [r7, #30]
    break;
 800232a:	e005      	b.n	8002338 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 800232c:	2304      	movs	r3, #4
 800232e:	77bb      	strb	r3, [r7, #30]
    break;
 8002330:	e002      	b.n	8002338 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 8002332:	230c      	movs	r3, #12
 8002334:	77bb      	strb	r3, [r7, #30]
    break;
 8002336:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002338:	2300      	movs	r3, #0
 800233a:	77fb      	strb	r3, [r7, #31]
 800233c:	e014      	b.n	8002368 <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800233e:	7ffb      	ldrb	r3, [r7, #31]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	3320      	adds	r3, #32
 8002344:	443b      	add	r3, r7
 8002346:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 800234a:	b29a      	uxth	r2, r3
 800234c:	7fbb      	ldrb	r3, [r7, #30]
 800234e:	b29b      	uxth	r3, r3
 8002350:	fb12 f303 	smulbb	r3, r2, r3
 8002354:	b299      	uxth	r1, r3
 8002356:	7ffb      	ldrb	r3, [r7, #31]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	b20a      	sxth	r2, r1
 8002360:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002362:	7ffb      	ldrb	r3, [r7, #31]
 8002364:	3301      	adds	r3, #1
 8002366:	77fb      	strb	r3, [r7, #31]
 8002368:	7ffb      	ldrb	r3, [r7, #31]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d9e7      	bls.n	800233e <LSM303AGR_AccReadXYZ+0x156>
  }
}
 800236e:	bf00      	nop
 8002370:	bf00      	nop
 8002372:	3720      	adds	r7, #32
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8002382:	2300      	movs	r3, #0
 8002384:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8002386:	2121      	movs	r1, #33	; 0x21
 8002388:	2032      	movs	r0, #50	; 0x32
 800238a:	f000 fb9c 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 800238e:	4603      	mov	r3, r0
 8002390:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	f023 0304 	bic.w	r3, r3, #4
 8002398:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	4313      	orrs	r3, r2
 80023a0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	461a      	mov	r2, r3
 80023a6:	2121      	movs	r1, #33	; 0x21
 80023a8:	2032      	movs	r0, #50	; 0x32
 80023aa:	f000 fb79 	bl	8002aa0 <COMPASSACCELERO_IO_Write>
}
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80023c0:	2300      	movs	r3, #0
 80023c2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 80023c4:	2122      	movs	r1, #34	; 0x22
 80023c6:	2032      	movs	r0, #50	; 0x32
 80023c8:	f000 fb7d 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 80023cc:	4603      	mov	r3, r0
 80023ce:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
 80023da:	461a      	mov	r2, r3
 80023dc:	2122      	movs	r1, #34	; 0x22
 80023de:	2032      	movs	r0, #50	; 0x32
 80023e0:	f000 fb5e 	bl	8002aa0 <COMPASSACCELERO_IO_Write>
}
 80023e4:	bf00      	nop
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 80023fa:	2138      	movs	r1, #56	; 0x38
 80023fc:	2032      	movs	r0, #50	; 0x32
 80023fe:	f000 fb62 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 8002402:	4603      	mov	r3, r0
 8002404:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8002406:	7bfa      	ldrb	r2, [r7, #15]
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	4313      	orrs	r3, r2
 800240c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	461a      	mov	r2, r3
 8002412:	2138      	movs	r1, #56	; 0x38
 8002414:	2032      	movs	r0, #50	; 0x32
 8002416:	f000 fb43 	bl	8002aa0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 800241a:	230a      	movs	r3, #10
 800241c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	461a      	mov	r2, r3
 8002422:	213a      	movs	r1, #58	; 0x3a
 8002424:	2032      	movs	r0, #50	; 0x32
 8002426:	f000 fb3b 	bl	8002aa0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 800242a:	2305      	movs	r3, #5
 800242c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	461a      	mov	r2, r3
 8002432:	213b      	movs	r1, #59	; 0x3b
 8002434:	2032      	movs	r0, #50	; 0x32
 8002436:	f000 fb33 	bl	8002aa0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 800243a:	7bfb      	ldrb	r3, [r7, #15]
 800243c:	461a      	mov	r2, r3
 800243e:	213c      	movs	r1, #60	; 0x3c
 8002440:	2032      	movs	r0, #50	; 0x32
 8002442:	f000 fb2d 	bl	8002aa0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8002446:	2332      	movs	r3, #50	; 0x32
 8002448:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	461a      	mov	r2, r3
 800244e:	213d      	movs	r1, #61	; 0x3d
 8002450:	2032      	movs	r0, #50	; 0x32
 8002452:	f000 fb25 	bl	8002aa0 <COMPASSACCELERO_IO_Write>
}
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 800245e:	b580      	push	{r7, lr}
 8002460:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8002462:	f000 faed 	bl	8002a40 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8002466:	2080      	movs	r0, #128	; 0x80
 8002468:	f7ff ffa5 	bl	80023b6 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 800246c:	2004      	movs	r0, #4
 800246e:	f7ff ff83 	bl	8002378 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 8002472:	2010      	movs	r0, #16
 8002474:	f7ff ffba 	bl	80023ec <LSM303AGR_AccClickITEnable>
}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}

0800247c <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002486:	2300      	movs	r3, #0
 8002488:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 800248a:	f000 fab1 	bl	80029f0 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	461a      	mov	r2, r3
 8002496:	2120      	movs	r1, #32
 8002498:	2032      	movs	r0, #50	; 0x32
 800249a:	f000 fb01 	bl	8002aa0 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 800249e:	2300      	movs	r3, #0
 80024a0:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	461a      	mov	r2, r3
 80024a6:	2123      	movs	r1, #35	; 0x23
 80024a8:	2032      	movs	r0, #50	; 0x32
 80024aa:	f000 faf9 	bl	8002aa0 <COMPASSACCELERO_IO_Write>
}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80024ca:	2300      	movs	r3, #0
 80024cc:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 80024ce:	f000 fa8f 	bl	80029f0 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 80024d2:	210f      	movs	r1, #15
 80024d4:	2032      	movs	r0, #50	; 0x32
 80024d6:	f000 faf6 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80024de:	79fb      	ldrb	r3, [r7, #7]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80024ee:	2124      	movs	r1, #36	; 0x24
 80024f0:	2032      	movs	r0, #50	; 0x32
 80024f2:	f000 fae8 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002500:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	461a      	mov	r2, r3
 8002506:	2124      	movs	r1, #36	; 0x24
 8002508:	2032      	movs	r0, #50	; 0x32
 800250a:	f000 fac9 	bl	8002aa0 <COMPASSACCELERO_IO_Write>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b084      	sub	sp, #16
 800251a:	af00      	add	r7, sp, #0
 800251c:	4603      	mov	r3, r0
 800251e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8002520:	2121      	movs	r1, #33	; 0x21
 8002522:	2032      	movs	r0, #50	; 0x32
 8002524:	f000 facf 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 8002528:	4603      	mov	r3, r0
 800252a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8002534:	7bfa      	ldrb	r2, [r7, #15]
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	4313      	orrs	r3, r2
 800253a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	461a      	mov	r2, r3
 8002540:	2121      	movs	r1, #33	; 0x21
 8002542:	2032      	movs	r0, #50	; 0x32
 8002544:	f000 faac 	bl	8002aa0 <COMPASSACCELERO_IO_Write>
}
 8002548:	bf00      	nop
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800255a:	2121      	movs	r1, #33	; 0x21
 800255c:	2032      	movs	r0, #50	; 0x32
 800255e:	f000 fab2 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 8002562:	4603      	mov	r3, r0
 8002564:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	f023 0308 	bic.w	r3, r3, #8
 800256c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	4313      	orrs	r3, r2
 8002574:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	461a      	mov	r2, r3
 800257a:	2121      	movs	r1, #33	; 0x21
 800257c:	2032      	movs	r0, #50	; 0x32
 800257e:	f000 fa8f 	bl	8002aa0 <COMPASSACCELERO_IO_Write>
}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b088      	sub	sp, #32
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8002592:	2300      	movs	r3, #0
 8002594:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 800259a:	2301      	movs	r3, #1
 800259c:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800259e:	2123      	movs	r1, #35	; 0x23
 80025a0:	2032      	movs	r0, #50	; 0x32
 80025a2:	f000 fa90 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 80025a6:	4603      	mov	r3, r0
 80025a8:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80025aa:	2124      	movs	r1, #36	; 0x24
 80025ac:	2032      	movs	r0, #50	; 0x32
 80025ae:	f000 fa8a 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 80025b2:	4603      	mov	r3, r0
 80025b4:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 80025b6:	2128      	movs	r1, #40	; 0x28
 80025b8:	2032      	movs	r0, #50	; 0x32
 80025ba:	f000 fa84 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 80025be:	4603      	mov	r3, r0
 80025c0:	b25b      	sxtb	r3, r3
 80025c2:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 80025c4:	2129      	movs	r1, #41	; 0x29
 80025c6:	2032      	movs	r0, #50	; 0x32
 80025c8:	f000 fa7d 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 80025cc:	4603      	mov	r3, r0
 80025ce:	b25b      	sxtb	r3, r3
 80025d0:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 80025d2:	212a      	movs	r1, #42	; 0x2a
 80025d4:	2032      	movs	r0, #50	; 0x32
 80025d6:	f000 fa76 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 80025da:	4603      	mov	r3, r0
 80025dc:	b25b      	sxtb	r3, r3
 80025de:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 80025e0:	212b      	movs	r1, #43	; 0x2b
 80025e2:	2032      	movs	r0, #50	; 0x32
 80025e4:	f000 fa6f 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 80025e8:	4603      	mov	r3, r0
 80025ea:	b25b      	sxtb	r3, r3
 80025ec:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 80025ee:	212c      	movs	r1, #44	; 0x2c
 80025f0:	2032      	movs	r0, #50	; 0x32
 80025f2:	f000 fa68 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 80025f6:	4603      	mov	r3, r0
 80025f8:	b25b      	sxtb	r3, r3
 80025fa:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 80025fc:	212d      	movs	r1, #45	; 0x2d
 80025fe:	2032      	movs	r0, #50	; 0x32
 8002600:	f000 fa61 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 8002604:	4603      	mov	r3, r0
 8002606:	b25b      	sxtb	r3, r3
 8002608:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 800260a:	7d3b      	ldrb	r3, [r7, #20]
 800260c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002610:	2b00      	cmp	r3, #0
 8002612:	d123      	bne.n	800265c <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8002614:	2300      	movs	r3, #0
 8002616:	77fb      	strb	r3, [r7, #31]
 8002618:	e01c      	b.n	8002654 <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800261a:	7ffb      	ldrb	r3, [r7, #31]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	3301      	adds	r3, #1
 8002620:	3320      	adds	r3, #32
 8002622:	443b      	add	r3, r7
 8002624:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002628:	b29b      	uxth	r3, r3
 800262a:	021b      	lsls	r3, r3, #8
 800262c:	b29a      	uxth	r2, r3
 800262e:	7ffb      	ldrb	r3, [r7, #31]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	3320      	adds	r3, #32
 8002634:	443b      	add	r3, r7
 8002636:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800263a:	b29b      	uxth	r3, r3
 800263c:	4413      	add	r3, r2
 800263e:	b29a      	uxth	r2, r3
 8002640:	7ffb      	ldrb	r3, [r7, #31]
 8002642:	b212      	sxth	r2, r2
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	3320      	adds	r3, #32
 8002648:	443b      	add	r3, r7
 800264a:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 800264e:	7ffb      	ldrb	r3, [r7, #31]
 8002650:	3301      	adds	r3, #1
 8002652:	77fb      	strb	r3, [r7, #31]
 8002654:	7ffb      	ldrb	r3, [r7, #31]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d9df      	bls.n	800261a <LSM303DLHC_AccReadXYZ+0x90>
 800265a:	e022      	b.n	80026a2 <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 800265c:	2300      	movs	r3, #0
 800265e:	77fb      	strb	r3, [r7, #31]
 8002660:	e01c      	b.n	800269c <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8002662:	7ffb      	ldrb	r3, [r7, #31]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	3320      	adds	r3, #32
 8002668:	443b      	add	r3, r7
 800266a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800266e:	b29b      	uxth	r3, r3
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	b29a      	uxth	r2, r3
 8002674:	7ffb      	ldrb	r3, [r7, #31]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	3301      	adds	r3, #1
 800267a:	3320      	adds	r3, #32
 800267c:	443b      	add	r3, r7
 800267e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002682:	b29b      	uxth	r3, r3
 8002684:	4413      	add	r3, r2
 8002686:	b29a      	uxth	r2, r3
 8002688:	7ffb      	ldrb	r3, [r7, #31]
 800268a:	b212      	sxth	r2, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	3320      	adds	r3, #32
 8002690:	443b      	add	r3, r7
 8002692:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8002696:	7ffb      	ldrb	r3, [r7, #31]
 8002698:	3301      	adds	r3, #1
 800269a:	77fb      	strb	r3, [r7, #31]
 800269c:	7ffb      	ldrb	r3, [r7, #31]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d9df      	bls.n	8002662 <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 80026a2:	7d3b      	ldrb	r3, [r7, #20]
 80026a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80026a8:	2b30      	cmp	r3, #48	; 0x30
 80026aa:	d013      	beq.n	80026d4 <LSM303DLHC_AccReadXYZ+0x14a>
 80026ac:	2b30      	cmp	r3, #48	; 0x30
 80026ae:	dc14      	bgt.n	80026da <LSM303DLHC_AccReadXYZ+0x150>
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	d00c      	beq.n	80026ce <LSM303DLHC_AccReadXYZ+0x144>
 80026b4:	2b20      	cmp	r3, #32
 80026b6:	dc10      	bgt.n	80026da <LSM303DLHC_AccReadXYZ+0x150>
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <LSM303DLHC_AccReadXYZ+0x138>
 80026bc:	2b10      	cmp	r3, #16
 80026be:	d003      	beq.n	80026c8 <LSM303DLHC_AccReadXYZ+0x13e>
 80026c0:	e00b      	b.n	80026da <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 80026c2:	2301      	movs	r3, #1
 80026c4:	77bb      	strb	r3, [r7, #30]
    break;
 80026c6:	e008      	b.n	80026da <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 80026c8:	2302      	movs	r3, #2
 80026ca:	77bb      	strb	r3, [r7, #30]
    break;
 80026cc:	e005      	b.n	80026da <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 80026ce:	2304      	movs	r3, #4
 80026d0:	77bb      	strb	r3, [r7, #30]
    break;
 80026d2:	e002      	b.n	80026da <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 80026d4:	230c      	movs	r3, #12
 80026d6:	77bb      	strb	r3, [r7, #30]
    break;
 80026d8:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80026da:	2300      	movs	r3, #0
 80026dc:	77fb      	strb	r3, [r7, #31]
 80026de:	e014      	b.n	800270a <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80026e0:	7ffb      	ldrb	r3, [r7, #31]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	3320      	adds	r3, #32
 80026e6:	443b      	add	r3, r7
 80026e8:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	7fbb      	ldrb	r3, [r7, #30]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	fb12 f303 	smulbb	r3, r2, r3
 80026f6:	b299      	uxth	r1, r3
 80026f8:	7ffb      	ldrb	r3, [r7, #31]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	4413      	add	r3, r2
 8002700:	b20a      	sxth	r2, r1
 8002702:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002704:	7ffb      	ldrb	r3, [r7, #31]
 8002706:	3301      	adds	r3, #1
 8002708:	77fb      	strb	r3, [r7, #31]
 800270a:	7ffb      	ldrb	r3, [r7, #31]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d9e7      	bls.n	80026e0 <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 8002710:	bf00      	nop
 8002712:	bf00      	nop
 8002714:	3720      	adds	r7, #32
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b084      	sub	sp, #16
 800271e:	af00      	add	r7, sp, #0
 8002720:	4603      	mov	r3, r0
 8002722:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8002724:	2300      	movs	r3, #0
 8002726:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8002728:	2121      	movs	r1, #33	; 0x21
 800272a:	2032      	movs	r0, #50	; 0x32
 800272c:	f000 f9cb 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 8002730:	4603      	mov	r3, r0
 8002732:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	f023 0304 	bic.w	r3, r3, #4
 800273a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 800273c:	7bfa      	ldrb	r2, [r7, #15]
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	4313      	orrs	r3, r2
 8002742:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	461a      	mov	r2, r3
 8002748:	2121      	movs	r1, #33	; 0x21
 800274a:	2032      	movs	r0, #50	; 0x32
 800274c:	f000 f9a8 	bl	8002aa0 <COMPASSACCELERO_IO_Write>
}
 8002750:	bf00      	nop
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8002762:	2300      	movs	r3, #0
 8002764:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8002766:	2122      	movs	r1, #34	; 0x22
 8002768:	2032      	movs	r0, #50	; 0x32
 800276a:	f000 f9ac 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 800276e:	4603      	mov	r3, r0
 8002770:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8002772:	7bfa      	ldrb	r2, [r7, #15]
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	4313      	orrs	r3, r2
 8002778:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	461a      	mov	r2, r3
 800277e:	2122      	movs	r1, #34	; 0x22
 8002780:	2032      	movs	r0, #50	; 0x32
 8002782:	f000 f98d 	bl	8002aa0 <COMPASSACCELERO_IO_Write>
}
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 800278e:	b580      	push	{r7, lr}
 8002790:	b084      	sub	sp, #16
 8002792:	af00      	add	r7, sp, #0
 8002794:	4603      	mov	r3, r0
 8002796:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8002798:	2300      	movs	r3, #0
 800279a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 800279c:	2138      	movs	r1, #56	; 0x38
 800279e:	2032      	movs	r0, #50	; 0x32
 80027a0:	f000 f991 	bl	8002ac6 <COMPASSACCELERO_IO_Read>
 80027a4:	4603      	mov	r3, r0
 80027a6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 80027a8:	7bfa      	ldrb	r2, [r7, #15]
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	461a      	mov	r2, r3
 80027b4:	2138      	movs	r1, #56	; 0x38
 80027b6:	2032      	movs	r0, #50	; 0x32
 80027b8:	f000 f972 	bl	8002aa0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 80027bc:	230a      	movs	r3, #10
 80027be:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	461a      	mov	r2, r3
 80027c4:	213a      	movs	r1, #58	; 0x3a
 80027c6:	2032      	movs	r0, #50	; 0x32
 80027c8:	f000 f96a 	bl	8002aa0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 80027cc:	2305      	movs	r3, #5
 80027ce:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	461a      	mov	r2, r3
 80027d4:	213b      	movs	r1, #59	; 0x3b
 80027d6:	2032      	movs	r0, #50	; 0x32
 80027d8:	f000 f962 	bl	8002aa0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	461a      	mov	r2, r3
 80027e0:	213c      	movs	r1, #60	; 0x3c
 80027e2:	2032      	movs	r0, #50	; 0x32
 80027e4:	f000 f95c 	bl	8002aa0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 80027e8:	2332      	movs	r3, #50	; 0x32
 80027ea:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	461a      	mov	r2, r3
 80027f0:	213d      	movs	r1, #61	; 0x3d
 80027f2:	2032      	movs	r0, #50	; 0x32
 80027f4:	f000 f954 	bl	8002aa0 <COMPASSACCELERO_IO_Write>
}
 80027f8:	bf00      	nop
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8002804:	f000 f91c 	bl	8002a40 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8002808:	2080      	movs	r0, #128	; 0x80
 800280a:	f7ff ffa5 	bl	8002758 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 800280e:	2004      	movs	r0, #4
 8002810:	f7ff ff83 	bl	800271a <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8002814:	2010      	movs	r0, #16
 8002816:	f7ff ffba 	bl	800278e <LSM303DLHC_AccClickITEnable>
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002824:	4814      	ldr	r0, [pc, #80]	; (8002878 <I2Cx_Init+0x58>)
 8002826:	f003 fe3f 	bl	80064a8 <HAL_I2C_GetState>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d121      	bne.n	8002874 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <I2Cx_Init+0x58>)
 8002832:	4a12      	ldr	r2, [pc, #72]	; (800287c <I2Cx_Init+0x5c>)
 8002834:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <I2Cx_Init+0x58>)
 8002838:	2243      	movs	r2, #67	; 0x43
 800283a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 800283c:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <I2Cx_Init+0x58>)
 800283e:	4a10      	ldr	r2, [pc, #64]	; (8002880 <I2Cx_Init+0x60>)
 8002840:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002842:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <I2Cx_Init+0x58>)
 8002844:	2200      	movs	r2, #0
 8002846:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <I2Cx_Init+0x58>)
 800284a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800284e:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <I2Cx_Init+0x58>)
 8002852:	2200      	movs	r2, #0
 8002854:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <I2Cx_Init+0x58>)
 8002858:	2200      	movs	r2, #0
 800285a:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <I2Cx_Init+0x58>)
 800285e:	2200      	movs	r2, #0
 8002860:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 8002862:	4b05      	ldr	r3, [pc, #20]	; (8002878 <I2Cx_Init+0x58>)
 8002864:	2200      	movs	r2, #0
 8002866:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002868:	4803      	ldr	r0, [pc, #12]	; (8002878 <I2Cx_Init+0x58>)
 800286a:	f000 f86b 	bl	8002944 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800286e:	4802      	ldr	r0, [pc, #8]	; (8002878 <I2Cx_Init+0x58>)
 8002870:	f002 fe62 	bl	8005538 <HAL_I2C_Init>
  }
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}
 8002878:	200014b8 	.word	0x200014b8
 800287c:	40005400 	.word	0x40005400
 8002880:	000186a0 	.word	0x000186a0

08002884 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af04      	add	r7, sp, #16
 800288a:	4603      	mov	r3, r0
 800288c:	80fb      	strh	r3, [r7, #6]
 800288e:	460b      	mov	r3, r1
 8002890:	717b      	strb	r3, [r7, #5]
 8002892:	4613      	mov	r3, r2
 8002894:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800289a:	797b      	ldrb	r3, [r7, #5]
 800289c:	b29a      	uxth	r2, r3
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <I2Cx_WriteData+0x48>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	88f9      	ldrh	r1, [r7, #6]
 80028a4:	9302      	str	r3, [sp, #8]
 80028a6:	2301      	movs	r3, #1
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	1d3b      	adds	r3, r7, #4
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	2301      	movs	r3, #1
 80028b0:	4807      	ldr	r0, [pc, #28]	; (80028d0 <I2Cx_WriteData+0x4c>)
 80028b2:	f003 fad9 	bl	8005e68 <HAL_I2C_Mem_Write>
 80028b6:	4603      	mov	r3, r0
 80028b8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80028c0:	f000 f834 	bl	800292c <I2Cx_Error>
  }
}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	2000006c 	.word	0x2000006c
 80028d0:	200014b8 	.word	0x200014b8

080028d4 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af04      	add	r7, sp, #16
 80028da:	4603      	mov	r3, r0
 80028dc:	460a      	mov	r2, r1
 80028de:	80fb      	strh	r3, [r7, #6]
 80028e0:	4613      	mov	r3, r2
 80028e2:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80028ec:	797b      	ldrb	r3, [r7, #5]
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <I2Cx_ReadData+0x50>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	88f9      	ldrh	r1, [r7, #6]
 80028f6:	9302      	str	r3, [sp, #8]
 80028f8:	2301      	movs	r3, #1
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	f107 030e 	add.w	r3, r7, #14
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	2301      	movs	r3, #1
 8002904:	4808      	ldr	r0, [pc, #32]	; (8002928 <I2Cx_ReadData+0x54>)
 8002906:	f003 fba9 	bl	800605c <HAL_I2C_Mem_Read>
 800290a:	4603      	mov	r3, r0
 800290c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8002914:	f000 f80a 	bl	800292c <I2Cx_Error>
  }
  return value;
 8002918:	7bbb      	ldrb	r3, [r7, #14]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	2000006c 	.word	0x2000006c
 8002928:	200014b8 	.word	0x200014b8

0800292c <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002930:	4803      	ldr	r0, [pc, #12]	; (8002940 <I2Cx_Error+0x14>)
 8002932:	f002 ff45 	bl	80057c0 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8002936:	f7ff ff73 	bl	8002820 <I2Cx_Init>
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200014b8 	.word	0x200014b8

08002944 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 800294c:	2300      	movs	r3, #0
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	4b25      	ldr	r3, [pc, #148]	; (80029e8 <I2Cx_MspInit+0xa4>)
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	4a24      	ldr	r2, [pc, #144]	; (80029e8 <I2Cx_MspInit+0xa4>)
 8002956:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800295a:	6413      	str	r3, [r2, #64]	; 0x40
 800295c:	4b22      	ldr	r3, [pc, #136]	; (80029e8 <I2Cx_MspInit+0xa4>)
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8002968:	2300      	movs	r3, #0
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <I2Cx_MspInit+0xa4>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	4a1d      	ldr	r2, [pc, #116]	; (80029e8 <I2Cx_MspInit+0xa4>)
 8002972:	f043 0302 	orr.w	r3, r3, #2
 8002976:	6313      	str	r3, [r2, #48]	; 0x30
 8002978:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <I2Cx_MspInit+0xa4>)
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 8002984:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002988:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 800298a:	2312      	movs	r3, #18
 800298c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002992:	2302      	movs	r3, #2
 8002994:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8002996:	2304      	movs	r3, #4
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	4619      	mov	r1, r3
 80029a0:	4812      	ldr	r0, [pc, #72]	; (80029ec <I2Cx_MspInit+0xa8>)
 80029a2:	f000 ff19 	bl	80037d8 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <I2Cx_MspInit+0xa4>)
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	4a0f      	ldr	r2, [pc, #60]	; (80029e8 <I2Cx_MspInit+0xa4>)
 80029ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029b0:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80029b2:	4b0d      	ldr	r3, [pc, #52]	; (80029e8 <I2Cx_MspInit+0xa4>)
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	4a0c      	ldr	r2, [pc, #48]	; (80029e8 <I2Cx_MspInit+0xa4>)
 80029b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029bc:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80029be:	2200      	movs	r2, #0
 80029c0:	210f      	movs	r1, #15
 80029c2:	201f      	movs	r0, #31
 80029c4:	f000 faf1 	bl	8002faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80029c8:	201f      	movs	r0, #31
 80029ca:	f000 fb0a 	bl	8002fe2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80029ce:	2200      	movs	r2, #0
 80029d0:	210f      	movs	r1, #15
 80029d2:	2020      	movs	r0, #32
 80029d4:	f000 fae9 	bl	8002faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 80029d8:	2020      	movs	r0, #32
 80029da:	f000 fb02 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
}
 80029de:	bf00      	nop
 80029e0:	3728      	adds	r7, #40	; 0x28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40020400 	.word	0x40020400

080029f0 <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	603b      	str	r3, [r7, #0]
 80029fa:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <COMPASSACCELERO_IO_Init+0x48>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4a0e      	ldr	r2, [pc, #56]	; (8002a38 <COMPASSACCELERO_IO_Init+0x48>)
 8002a00:	f043 0310 	orr.w	r3, r3, #16
 8002a04:	6313      	str	r3, [r2, #48]	; 0x30
 8002a06:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <COMPASSACCELERO_IO_Init+0x48>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8002a12:	2304      	movs	r3, #4
 8002a14:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8002a22:	1d3b      	adds	r3, r7, #4
 8002a24:	4619      	mov	r1, r3
 8002a26:	4805      	ldr	r0, [pc, #20]	; (8002a3c <COMPASSACCELERO_IO_Init+0x4c>)
 8002a28:	f000 fed6 	bl	80037d8 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8002a2c:	f7ff fef8 	bl	8002820 <I2Cx_Init>
}
 8002a30:	bf00      	nop
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40021000 	.word	0x40021000

08002a40 <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	603b      	str	r3, [r7, #0]
 8002a4a:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4a12      	ldr	r2, [pc, #72]	; (8002a98 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8002a50:	f043 0310 	orr.w	r3, r3, #16
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8002a62:	2330      	movs	r3, #48	; 0x30
 8002a64:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8002a66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002a74:	1d3b      	adds	r3, r7, #4
 8002a76:	4619      	mov	r1, r3
 8002a78:	4808      	ldr	r0, [pc, #32]	; (8002a9c <COMPASSACCELERO_IO_ITConfig+0x5c>)
 8002a7a:	f000 fead 	bl	80037d8 <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	210f      	movs	r1, #15
 8002a82:	200a      	movs	r0, #10
 8002a84:	f000 fa91 	bl	8002faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8002a88:	200a      	movs	r0, #10
 8002a8a:	f000 faaa 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
}
 8002a8e:	bf00      	nop
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	80fb      	strh	r3, [r7, #6]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	717b      	strb	r3, [r7, #5]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8002ab2:	793a      	ldrb	r2, [r7, #4]
 8002ab4:	7979      	ldrb	r1, [r7, #5]
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fee3 	bl	8002884 <I2Cx_WriteData>
}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	4603      	mov	r3, r0
 8002ace:	460a      	mov	r2, r1
 8002ad0:	80fb      	strh	r3, [r7, #6]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8002ad6:	797a      	ldrb	r2, [r7, #5]
 8002ad8:	88fb      	ldrh	r3, [r7, #6]
 8002ada:	4611      	mov	r1, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fef9 	bl	80028d4 <I2Cx_ReadData>
 8002ae2:	4603      	mov	r3, r0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8002af6:	2300      	movs	r3, #0
 8002af8:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 8002afa:	1d3b      	adds	r3, r7, #4
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8002b02:	4b58      	ldr	r3, [pc, #352]	; (8002c64 <BSP_ACCELERO_Init+0x178>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	4798      	blx	r3
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b33      	cmp	r3, #51	; 0x33
 8002b0c:	d14f      	bne.n	8002bae <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8002b0e:	4b56      	ldr	r3, [pc, #344]	; (8002c68 <BSP_ACCELERO_Init+0x17c>)
 8002b10:	4a54      	ldr	r2, [pc, #336]	; (8002c64 <BSP_ACCELERO_Init+0x178>)
 8002b12:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8002b14:	2300      	movs	r3, #0
 8002b16:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8002b18:	2340      	movs	r3, #64	; 0x40
 8002b1a:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 8002b1c:	2307      	movs	r3, #7
 8002b1e:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 8002b20:	2300      	movs	r3, #0
 8002b22:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8002b24:	2300      	movs	r3, #0
 8002b26:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8002b2c:	2308      	movs	r3, #8
 8002b2e:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002b30:	7b3a      	ldrb	r2, [r7, #12]
 8002b32:	7b7b      	ldrb	r3, [r7, #13]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8002b38:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	8abb      	ldrh	r3, [r7, #20]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002b46:	7c3a      	ldrb	r2, [r7, #16]
 8002b48:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	7cbb      	ldrb	r3, [r7, #18]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002b5c:	b21a      	sxth	r2, r3
 8002b5e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	b21b      	sxth	r3, r3
 8002b66:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002b68:	4b3f      	ldr	r3, [pc, #252]	; (8002c68 <BSP_ACCELERO_Init+0x17c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	8aba      	ldrh	r2, [r7, #20]
 8002b70:	4610      	mov	r0, r2
 8002b72:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8002b78:	2310      	movs	r3, #16
 8002b7a:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 8002b80:	2300      	movs	r3, #0
 8002b82:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002b84:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8002b86:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8002b8c:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8002b92:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002b94:	4313      	orrs	r3, r2
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8002b9a:	4b33      	ldr	r3, [pc, #204]	; (8002c68 <BSP_ACCELERO_Init+0x17c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	8aba      	ldrh	r2, [r7, #20]
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	4798      	blx	r3

    ret = ACCELERO_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	75fb      	strb	r3, [r7, #23]
 8002bac:	e054      	b.n	8002c58 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 8002bae:	4b2f      	ldr	r3, [pc, #188]	; (8002c6c <BSP_ACCELERO_Init+0x180>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	4798      	blx	r3
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b33      	cmp	r3, #51	; 0x33
 8002bb8:	d14e      	bne.n	8002c58 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8002bba:	4b2b      	ldr	r3, [pc, #172]	; (8002c68 <BSP_ACCELERO_Init+0x17c>)
 8002bbc:	4a2b      	ldr	r2, [pc, #172]	; (8002c6c <BSP_ACCELERO_Init+0x180>)
 8002bbe:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 8002bc4:	2340      	movs	r3, #64	; 0x40
 8002bc6:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8002bc8:	2307      	movs	r3, #7
 8002bca:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8002bd8:	2308      	movs	r3, #8
 8002bda:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002bdc:	7b3a      	ldrb	r2, [r7, #12]
 8002bde:	7b7b      	ldrb	r3, [r7, #13]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8002be4:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002be6:	4313      	orrs	r3, r2
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	8abb      	ldrh	r3, [r7, #20]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002bf2:	7c3a      	ldrb	r2, [r7, #16]
 8002bf4:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	7cbb      	ldrb	r3, [r7, #18]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002c08:	b21a      	sxth	r2, r3
 8002c0a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	b21b      	sxth	r3, r3
 8002c12:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002c14:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <BSP_ACCELERO_Init+0x17c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	8aba      	ldrh	r2, [r7, #20]
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 8002c20:	2380      	movs	r3, #128	; 0x80
 8002c22:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8002c24:	2310      	movs	r3, #16
 8002c26:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002c30:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8002c32:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002c34:	4313      	orrs	r3, r2
 8002c36:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8002c38:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002c40:	4313      	orrs	r3, r2
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8002c46:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <BSP_ACCELERO_Init+0x17c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	8aba      	ldrh	r2, [r7, #20]
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	4610      	mov	r0, r2
 8002c52:	4798      	blx	r3

    ret = ACCELERO_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8002c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000038 	.word	0x20000038
 8002c68:	2000150c 	.word	0x2000150c
 8002c6c:	20000004 	.word	0x20000004

08002c70 <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 8002c7c:	4b10      	ldr	r3, [pc, #64]	; (8002cc0 <BSP_ACCELERO_GetXYZ+0x50>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d018      	beq.n	8002cb8 <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8002c86:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <BSP_ACCELERO_GetXYZ+0x50>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <BSP_ACCELERO_GetXYZ+0x50>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a0b      	ldr	r2, [pc, #44]	; (8002cc4 <BSP_ACCELERO_GetXYZ+0x54>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d10e      	bne.n	8002cb8 <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 8002caa:	89fb      	ldrh	r3, [r7, #14]
 8002cac:	425b      	negs	r3, r3
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	b212      	sxth	r2, r2
 8002cb6:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8002cb8:	bf00      	nop
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	2000150c 	.word	0x2000150c
 8002cc4:	20000038 	.word	0x20000038

08002cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <HAL_Init+0x40>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a0d      	ldr	r2, [pc, #52]	; (8002d08 <HAL_Init+0x40>)
 8002cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_Init+0x40>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a0a      	ldr	r2, [pc, #40]	; (8002d08 <HAL_Init+0x40>)
 8002cde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ce2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ce4:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <HAL_Init+0x40>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a07      	ldr	r2, [pc, #28]	; (8002d08 <HAL_Init+0x40>)
 8002cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cf0:	2003      	movs	r0, #3
 8002cf2:	f000 f94f 	bl	8002f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	f000 f808 	bl	8002d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cfc:	f7fe ffd4 	bl	8001ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40023c00 	.word	0x40023c00

08002d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_InitTick+0x54>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <HAL_InitTick+0x58>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 f967 	bl	8002ffe <HAL_SYSTICK_Config>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e00e      	b.n	8002d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b0f      	cmp	r3, #15
 8002d3e:	d80a      	bhi.n	8002d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d40:	2200      	movs	r2, #0
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	f04f 30ff 	mov.w	r0, #4294967295
 8002d48:	f000 f92f 	bl	8002faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d4c:	4a06      	ldr	r2, [pc, #24]	; (8002d68 <HAL_InitTick+0x5c>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e000      	b.n	8002d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20000000 	.word	0x20000000
 8002d64:	20000074 	.word	0x20000074
 8002d68:	20000070 	.word	0x20000070

08002d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_IncTick+0x20>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <HAL_IncTick+0x24>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	4a04      	ldr	r2, [pc, #16]	; (8002d90 <HAL_IncTick+0x24>)
 8002d7e:	6013      	str	r3, [r2, #0]
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000074 	.word	0x20000074
 8002d90:	20001510 	.word	0x20001510

08002d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return uwTick;
 8002d98:	4b03      	ldr	r3, [pc, #12]	; (8002da8 <HAL_GetTick+0x14>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	20001510 	.word	0x20001510

08002dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002db4:	f7ff ffee 	bl	8002d94 <HAL_GetTick>
 8002db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d005      	beq.n	8002dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <HAL_Delay+0x44>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4413      	add	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dd2:	bf00      	nop
 8002dd4:	f7ff ffde 	bl	8002d94 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d8f7      	bhi.n	8002dd4 <HAL_Delay+0x28>
  {
  }
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000074 	.word	0x20000074

08002df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <__NVIC_SetPriorityGrouping+0x44>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e10:	4013      	ands	r3, r2
 8002e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e26:	4a04      	ldr	r2, [pc, #16]	; (8002e38 <__NVIC_SetPriorityGrouping+0x44>)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	60d3      	str	r3, [r2, #12]
}
 8002e2c:	bf00      	nop
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e40:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <__NVIC_GetPriorityGrouping+0x18>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	0a1b      	lsrs	r3, r3, #8
 8002e46:	f003 0307 	and.w	r3, r3, #7
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	db0b      	blt.n	8002e82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	f003 021f 	and.w	r2, r3, #31
 8002e70:	4907      	ldr	r1, [pc, #28]	; (8002e90 <__NVIC_EnableIRQ+0x38>)
 8002e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	2001      	movs	r0, #1
 8002e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000e100 	.word	0xe000e100

08002e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	6039      	str	r1, [r7, #0]
 8002e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	db0a      	blt.n	8002ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	490c      	ldr	r1, [pc, #48]	; (8002ee0 <__NVIC_SetPriority+0x4c>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	0112      	lsls	r2, r2, #4
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ebc:	e00a      	b.n	8002ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	4908      	ldr	r1, [pc, #32]	; (8002ee4 <__NVIC_SetPriority+0x50>)
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	3b04      	subs	r3, #4
 8002ecc:	0112      	lsls	r2, r2, #4
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	761a      	strb	r2, [r3, #24]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000e100 	.word	0xe000e100
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b089      	sub	sp, #36	; 0x24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f1c3 0307 	rsb	r3, r3, #7
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	bf28      	it	cs
 8002f06:	2304      	movcs	r3, #4
 8002f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	2b06      	cmp	r3, #6
 8002f10:	d902      	bls.n	8002f18 <NVIC_EncodePriority+0x30>
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3b03      	subs	r3, #3
 8002f16:	e000      	b.n	8002f1a <NVIC_EncodePriority+0x32>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43da      	mvns	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	401a      	ands	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f30:	f04f 31ff 	mov.w	r1, #4294967295
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3a:	43d9      	mvns	r1, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f40:	4313      	orrs	r3, r2
         );
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3724      	adds	r7, #36	; 0x24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f60:	d301      	bcc.n	8002f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f62:	2301      	movs	r3, #1
 8002f64:	e00f      	b.n	8002f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f66:	4a0a      	ldr	r2, [pc, #40]	; (8002f90 <SysTick_Config+0x40>)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f6e:	210f      	movs	r1, #15
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	f7ff ff8e 	bl	8002e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f78:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <SysTick_Config+0x40>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f7e:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <SysTick_Config+0x40>)
 8002f80:	2207      	movs	r2, #7
 8002f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	e000e010 	.word	0xe000e010

08002f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff ff29 	bl	8002df4 <__NVIC_SetPriorityGrouping>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fbc:	f7ff ff3e 	bl	8002e3c <__NVIC_GetPriorityGrouping>
 8002fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	6978      	ldr	r0, [r7, #20]
 8002fc8:	f7ff ff8e 	bl	8002ee8 <NVIC_EncodePriority>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ff5d 	bl	8002e94 <__NVIC_SetPriority>
}
 8002fda:	bf00      	nop
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	4603      	mov	r3, r0
 8002fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff ff31 	bl	8002e58 <__NVIC_EnableIRQ>
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff ffa2 	bl	8002f50 <SysTick_Config>
 800300c:	4603      	mov	r3, r0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003024:	f7ff feb6 	bl	8002d94 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e099      	b.n	8003168 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0201 	bic.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003054:	e00f      	b.n	8003076 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003056:	f7ff fe9d 	bl	8002d94 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b05      	cmp	r3, #5
 8003062:	d908      	bls.n	8003076 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2203      	movs	r2, #3
 800306e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e078      	b.n	8003168 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e8      	bne.n	8003056 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4b38      	ldr	r3, [pc, #224]	; (8003170 <HAL_DMA_Init+0x158>)
 8003090:	4013      	ands	r3, r2
 8003092:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d107      	bne.n	80030e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	4313      	orrs	r3, r2
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f023 0307 	bic.w	r3, r3, #7
 80030f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	4313      	orrs	r3, r2
 8003100:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	2b04      	cmp	r3, #4
 8003108:	d117      	bne.n	800313a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00e      	beq.n	800313a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fadf 	bl	80036e0 <DMA_CheckFifoParam>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2240      	movs	r2, #64	; 0x40
 800312c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003136:	2301      	movs	r3, #1
 8003138:	e016      	b.n	8003168 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fa96 	bl	8003674 <DMA_CalcBaseAndBitshift>
 8003148:	4603      	mov	r3, r0
 800314a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003150:	223f      	movs	r2, #63	; 0x3f
 8003152:	409a      	lsls	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	f010803f 	.word	0xf010803f

08003174 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_DMA_Start_IT+0x26>
 8003196:	2302      	movs	r3, #2
 8003198:	e040      	b.n	800321c <HAL_DMA_Start_IT+0xa8>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d12f      	bne.n	800320e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2202      	movs	r2, #2
 80031b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 fa28 	bl	8003618 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031cc:	223f      	movs	r2, #63	; 0x3f
 80031ce:	409a      	lsls	r2, r3
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0216 	orr.w	r2, r2, #22
 80031e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d007      	beq.n	80031fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0208 	orr.w	r2, r2, #8
 80031fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	e005      	b.n	800321a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003216:	2302      	movs	r3, #2
 8003218:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800321a:	7dfb      	ldrb	r3, [r7, #23]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003230:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003232:	f7ff fdaf 	bl	8002d94 <HAL_GetTick>
 8003236:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d008      	beq.n	8003256 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2280      	movs	r2, #128	; 0x80
 8003248:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e052      	b.n	80032fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0216 	bic.w	r2, r2, #22
 8003264:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695a      	ldr	r2, [r3, #20]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003274:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	d103      	bne.n	8003286 <HAL_DMA_Abort+0x62>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003282:	2b00      	cmp	r3, #0
 8003284:	d007      	beq.n	8003296 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0208 	bic.w	r2, r2, #8
 8003294:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0201 	bic.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032a6:	e013      	b.n	80032d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032a8:	f7ff fd74 	bl	8002d94 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b05      	cmp	r3, #5
 80032b4:	d90c      	bls.n	80032d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2220      	movs	r2, #32
 80032ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2203      	movs	r2, #3
 80032c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e015      	b.n	80032fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1e4      	bne.n	80032a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e2:	223f      	movs	r2, #63	; 0x3f
 80032e4:	409a      	lsls	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003310:	4b8e      	ldr	r3, [pc, #568]	; (800354c <HAL_DMA_IRQHandler+0x248>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a8e      	ldr	r2, [pc, #568]	; (8003550 <HAL_DMA_IRQHandler+0x24c>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	0a9b      	lsrs	r3, r3, #10
 800331c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003322:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332e:	2208      	movs	r2, #8
 8003330:	409a      	lsls	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d01a      	beq.n	8003370 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d013      	beq.n	8003370 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0204 	bic.w	r2, r2, #4
 8003356:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335c:	2208      	movs	r2, #8
 800335e:	409a      	lsls	r2, r3
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003368:	f043 0201 	orr.w	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003374:	2201      	movs	r2, #1
 8003376:	409a      	lsls	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4013      	ands	r3, r2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d012      	beq.n	80033a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00b      	beq.n	80033a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003392:	2201      	movs	r2, #1
 8003394:	409a      	lsls	r2, r3
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339e:	f043 0202 	orr.w	r2, r3, #2
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033aa:	2204      	movs	r2, #4
 80033ac:	409a      	lsls	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d012      	beq.n	80033dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00b      	beq.n	80033dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	2204      	movs	r2, #4
 80033ca:	409a      	lsls	r2, r3
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d4:	f043 0204 	orr.w	r2, r3, #4
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e0:	2210      	movs	r2, #16
 80033e2:	409a      	lsls	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d043      	beq.n	8003474 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d03c      	beq.n	8003474 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fe:	2210      	movs	r2, #16
 8003400:	409a      	lsls	r2, r3
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d018      	beq.n	8003446 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d108      	bne.n	8003434 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d024      	beq.n	8003474 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	4798      	blx	r3
 8003432:	e01f      	b.n	8003474 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003438:	2b00      	cmp	r3, #0
 800343a:	d01b      	beq.n	8003474 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	4798      	blx	r3
 8003444:	e016      	b.n	8003474 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003450:	2b00      	cmp	r3, #0
 8003452:	d107      	bne.n	8003464 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0208 	bic.w	r2, r2, #8
 8003462:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003478:	2220      	movs	r2, #32
 800347a:	409a      	lsls	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4013      	ands	r3, r2
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 808f 	beq.w	80035a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 8087 	beq.w	80035a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349a:	2220      	movs	r2, #32
 800349c:	409a      	lsls	r2, r3
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b05      	cmp	r3, #5
 80034ac:	d136      	bne.n	800351c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0216 	bic.w	r2, r2, #22
 80034bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695a      	ldr	r2, [r3, #20]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d103      	bne.n	80034de <HAL_DMA_IRQHandler+0x1da>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d007      	beq.n	80034ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0208 	bic.w	r2, r2, #8
 80034ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f2:	223f      	movs	r2, #63	; 0x3f
 80034f4:	409a      	lsls	r2, r3
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350e:	2b00      	cmp	r3, #0
 8003510:	d07e      	beq.n	8003610 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	4798      	blx	r3
        }
        return;
 800351a:	e079      	b.n	8003610 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d01d      	beq.n	8003566 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10d      	bne.n	8003554 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353c:	2b00      	cmp	r3, #0
 800353e:	d031      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4798      	blx	r3
 8003548:	e02c      	b.n	80035a4 <HAL_DMA_IRQHandler+0x2a0>
 800354a:	bf00      	nop
 800354c:	20000000 	.word	0x20000000
 8003550:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003558:	2b00      	cmp	r3, #0
 800355a:	d023      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	4798      	blx	r3
 8003564:	e01e      	b.n	80035a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10f      	bne.n	8003594 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0210 	bic.w	r2, r2, #16
 8003582:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d032      	beq.n	8003612 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d022      	beq.n	80035fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2205      	movs	r2, #5
 80035bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0201 	bic.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	3301      	adds	r3, #1
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d307      	bcc.n	80035ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f2      	bne.n	80035d0 <HAL_DMA_IRQHandler+0x2cc>
 80035ea:	e000      	b.n	80035ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	4798      	blx	r3
 800360e:	e000      	b.n	8003612 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003610:	bf00      	nop
    }
  }
}
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003634:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b40      	cmp	r3, #64	; 0x40
 8003644:	d108      	bne.n	8003658 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003656:	e007      	b.n	8003668 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	60da      	str	r2, [r3, #12]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	3b10      	subs	r3, #16
 8003684:	4a14      	ldr	r2, [pc, #80]	; (80036d8 <DMA_CalcBaseAndBitshift+0x64>)
 8003686:	fba2 2303 	umull	r2, r3, r2, r3
 800368a:	091b      	lsrs	r3, r3, #4
 800368c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800368e:	4a13      	ldr	r2, [pc, #76]	; (80036dc <DMA_CalcBaseAndBitshift+0x68>)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4413      	add	r3, r2
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d909      	bls.n	80036b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036aa:	f023 0303 	bic.w	r3, r3, #3
 80036ae:	1d1a      	adds	r2, r3, #4
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	659a      	str	r2, [r3, #88]	; 0x58
 80036b4:	e007      	b.n	80036c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036be:	f023 0303 	bic.w	r3, r3, #3
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	aaaaaaab 	.word	0xaaaaaaab
 80036dc:	0800fc5c 	.word	0x0800fc5c

080036e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d11f      	bne.n	800373a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d856      	bhi.n	80037ae <DMA_CheckFifoParam+0xce>
 8003700:	a201      	add	r2, pc, #4	; (adr r2, 8003708 <DMA_CheckFifoParam+0x28>)
 8003702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003706:	bf00      	nop
 8003708:	08003719 	.word	0x08003719
 800370c:	0800372b 	.word	0x0800372b
 8003710:	08003719 	.word	0x08003719
 8003714:	080037af 	.word	0x080037af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d046      	beq.n	80037b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003728:	e043      	b.n	80037b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003732:	d140      	bne.n	80037b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003738:	e03d      	b.n	80037b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003742:	d121      	bne.n	8003788 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2b03      	cmp	r3, #3
 8003748:	d837      	bhi.n	80037ba <DMA_CheckFifoParam+0xda>
 800374a:	a201      	add	r2, pc, #4	; (adr r2, 8003750 <DMA_CheckFifoParam+0x70>)
 800374c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003750:	08003761 	.word	0x08003761
 8003754:	08003767 	.word	0x08003767
 8003758:	08003761 	.word	0x08003761
 800375c:	08003779 	.word	0x08003779
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	73fb      	strb	r3, [r7, #15]
      break;
 8003764:	e030      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d025      	beq.n	80037be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003776:	e022      	b.n	80037be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003780:	d11f      	bne.n	80037c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003786:	e01c      	b.n	80037c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d903      	bls.n	8003796 <DMA_CheckFifoParam+0xb6>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b03      	cmp	r3, #3
 8003792:	d003      	beq.n	800379c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003794:	e018      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	73fb      	strb	r3, [r7, #15]
      break;
 800379a:	e015      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00e      	beq.n	80037c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	73fb      	strb	r3, [r7, #15]
      break;
 80037ac:	e00b      	b.n	80037c6 <DMA_CheckFifoParam+0xe6>
      break;
 80037ae:	bf00      	nop
 80037b0:	e00a      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
      break;
 80037b2:	bf00      	nop
 80037b4:	e008      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
      break;
 80037b6:	bf00      	nop
 80037b8:	e006      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
      break;
 80037ba:	bf00      	nop
 80037bc:	e004      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
      break;
 80037be:	bf00      	nop
 80037c0:	e002      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80037c2:	bf00      	nop
 80037c4:	e000      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
      break;
 80037c6:	bf00      	nop
    }
  } 
  
  return status; 
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop

080037d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d8:	b480      	push	{r7}
 80037da:	b089      	sub	sp, #36	; 0x24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ee:	2300      	movs	r3, #0
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	e159      	b.n	8003aa8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037f4:	2201      	movs	r2, #1
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	4013      	ands	r3, r2
 8003806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	429a      	cmp	r2, r3
 800380e:	f040 8148 	bne.w	8003aa2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	2b01      	cmp	r3, #1
 800381c:	d005      	beq.n	800382a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003826:	2b02      	cmp	r3, #2
 8003828:	d130      	bne.n	800388c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	2203      	movs	r2, #3
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43db      	mvns	r3, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4013      	ands	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4313      	orrs	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003860:	2201      	movs	r2, #1
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4013      	ands	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f003 0201 	and.w	r2, r3, #1
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4313      	orrs	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 0303 	and.w	r3, r3, #3
 8003894:	2b03      	cmp	r3, #3
 8003896:	d017      	beq.n	80038c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	2203      	movs	r2, #3
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4313      	orrs	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 0303 	and.w	r3, r3, #3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d123      	bne.n	800391c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	08da      	lsrs	r2, r3, #3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3208      	adds	r2, #8
 80038dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	220f      	movs	r2, #15
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4013      	ands	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4313      	orrs	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	08da      	lsrs	r2, r3, #3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3208      	adds	r2, #8
 8003916:	69b9      	ldr	r1, [r7, #24]
 8003918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	2203      	movs	r2, #3
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4013      	ands	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 0203 	and.w	r2, r3, #3
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 80a2 	beq.w	8003aa2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	4b57      	ldr	r3, [pc, #348]	; (8003ac0 <HAL_GPIO_Init+0x2e8>)
 8003964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003966:	4a56      	ldr	r2, [pc, #344]	; (8003ac0 <HAL_GPIO_Init+0x2e8>)
 8003968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800396c:	6453      	str	r3, [r2, #68]	; 0x44
 800396e:	4b54      	ldr	r3, [pc, #336]	; (8003ac0 <HAL_GPIO_Init+0x2e8>)
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800397a:	4a52      	ldr	r2, [pc, #328]	; (8003ac4 <HAL_GPIO_Init+0x2ec>)
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	089b      	lsrs	r3, r3, #2
 8003980:	3302      	adds	r3, #2
 8003982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	220f      	movs	r2, #15
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43db      	mvns	r3, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4013      	ands	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a49      	ldr	r2, [pc, #292]	; (8003ac8 <HAL_GPIO_Init+0x2f0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d019      	beq.n	80039da <HAL_GPIO_Init+0x202>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a48      	ldr	r2, [pc, #288]	; (8003acc <HAL_GPIO_Init+0x2f4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d013      	beq.n	80039d6 <HAL_GPIO_Init+0x1fe>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a47      	ldr	r2, [pc, #284]	; (8003ad0 <HAL_GPIO_Init+0x2f8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00d      	beq.n	80039d2 <HAL_GPIO_Init+0x1fa>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a46      	ldr	r2, [pc, #280]	; (8003ad4 <HAL_GPIO_Init+0x2fc>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d007      	beq.n	80039ce <HAL_GPIO_Init+0x1f6>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a45      	ldr	r2, [pc, #276]	; (8003ad8 <HAL_GPIO_Init+0x300>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d101      	bne.n	80039ca <HAL_GPIO_Init+0x1f2>
 80039c6:	2304      	movs	r3, #4
 80039c8:	e008      	b.n	80039dc <HAL_GPIO_Init+0x204>
 80039ca:	2307      	movs	r3, #7
 80039cc:	e006      	b.n	80039dc <HAL_GPIO_Init+0x204>
 80039ce:	2303      	movs	r3, #3
 80039d0:	e004      	b.n	80039dc <HAL_GPIO_Init+0x204>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e002      	b.n	80039dc <HAL_GPIO_Init+0x204>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <HAL_GPIO_Init+0x204>
 80039da:	2300      	movs	r3, #0
 80039dc:	69fa      	ldr	r2, [r7, #28]
 80039de:	f002 0203 	and.w	r2, r2, #3
 80039e2:	0092      	lsls	r2, r2, #2
 80039e4:	4093      	lsls	r3, r2
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039ec:	4935      	ldr	r1, [pc, #212]	; (8003ac4 <HAL_GPIO_Init+0x2ec>)
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	089b      	lsrs	r3, r3, #2
 80039f2:	3302      	adds	r3, #2
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039fa:	4b38      	ldr	r3, [pc, #224]	; (8003adc <HAL_GPIO_Init+0x304>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	43db      	mvns	r3, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4013      	ands	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a1e:	4a2f      	ldr	r2, [pc, #188]	; (8003adc <HAL_GPIO_Init+0x304>)
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a24:	4b2d      	ldr	r3, [pc, #180]	; (8003adc <HAL_GPIO_Init+0x304>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4013      	ands	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a48:	4a24      	ldr	r2, [pc, #144]	; (8003adc <HAL_GPIO_Init+0x304>)
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a4e:	4b23      	ldr	r3, [pc, #140]	; (8003adc <HAL_GPIO_Init+0x304>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a72:	4a1a      	ldr	r2, [pc, #104]	; (8003adc <HAL_GPIO_Init+0x304>)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a78:	4b18      	ldr	r3, [pc, #96]	; (8003adc <HAL_GPIO_Init+0x304>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a9c:	4a0f      	ldr	r2, [pc, #60]	; (8003adc <HAL_GPIO_Init+0x304>)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	61fb      	str	r3, [r7, #28]
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	2b0f      	cmp	r3, #15
 8003aac:	f67f aea2 	bls.w	80037f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ab0:	bf00      	nop
 8003ab2:	bf00      	nop
 8003ab4:	3724      	adds	r7, #36	; 0x24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	40013800 	.word	0x40013800
 8003ac8:	40020000 	.word	0x40020000
 8003acc:	40020400 	.word	0x40020400
 8003ad0:	40020800 	.word	0x40020800
 8003ad4:	40020c00 	.word	0x40020c00
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	40013c00 	.word	0x40013c00

08003ae0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	e0bb      	b.n	8003c74 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003afc:	2201      	movs	r2, #1
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	f040 80ab 	bne.w	8003c6e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003b18:	4a5c      	ldr	r2, [pc, #368]	; (8003c8c <HAL_GPIO_DeInit+0x1ac>)
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	089b      	lsrs	r3, r3, #2
 8003b1e:	3302      	adds	r3, #2
 8003b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b24:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	220f      	movs	r2, #15
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	4013      	ands	r3, r2
 8003b38:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a54      	ldr	r2, [pc, #336]	; (8003c90 <HAL_GPIO_DeInit+0x1b0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d019      	beq.n	8003b76 <HAL_GPIO_DeInit+0x96>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a53      	ldr	r2, [pc, #332]	; (8003c94 <HAL_GPIO_DeInit+0x1b4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d013      	beq.n	8003b72 <HAL_GPIO_DeInit+0x92>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a52      	ldr	r2, [pc, #328]	; (8003c98 <HAL_GPIO_DeInit+0x1b8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00d      	beq.n	8003b6e <HAL_GPIO_DeInit+0x8e>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a51      	ldr	r2, [pc, #324]	; (8003c9c <HAL_GPIO_DeInit+0x1bc>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d007      	beq.n	8003b6a <HAL_GPIO_DeInit+0x8a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a50      	ldr	r2, [pc, #320]	; (8003ca0 <HAL_GPIO_DeInit+0x1c0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d101      	bne.n	8003b66 <HAL_GPIO_DeInit+0x86>
 8003b62:	2304      	movs	r3, #4
 8003b64:	e008      	b.n	8003b78 <HAL_GPIO_DeInit+0x98>
 8003b66:	2307      	movs	r3, #7
 8003b68:	e006      	b.n	8003b78 <HAL_GPIO_DeInit+0x98>
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e004      	b.n	8003b78 <HAL_GPIO_DeInit+0x98>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e002      	b.n	8003b78 <HAL_GPIO_DeInit+0x98>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <HAL_GPIO_DeInit+0x98>
 8003b76:	2300      	movs	r3, #0
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	f002 0203 	and.w	r2, r2, #3
 8003b7e:	0092      	lsls	r2, r2, #2
 8003b80:	4093      	lsls	r3, r2
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d132      	bne.n	8003bee <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003b88:	4b46      	ldr	r3, [pc, #280]	; (8003ca4 <HAL_GPIO_DeInit+0x1c4>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	4944      	ldr	r1, [pc, #272]	; (8003ca4 <HAL_GPIO_DeInit+0x1c4>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003b96:	4b43      	ldr	r3, [pc, #268]	; (8003ca4 <HAL_GPIO_DeInit+0x1c4>)
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	4941      	ldr	r1, [pc, #260]	; (8003ca4 <HAL_GPIO_DeInit+0x1c4>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003ba4:	4b3f      	ldr	r3, [pc, #252]	; (8003ca4 <HAL_GPIO_DeInit+0x1c4>)
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	43db      	mvns	r3, r3
 8003bac:	493d      	ldr	r1, [pc, #244]	; (8003ca4 <HAL_GPIO_DeInit+0x1c4>)
 8003bae:	4013      	ands	r3, r2
 8003bb0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003bb2:	4b3c      	ldr	r3, [pc, #240]	; (8003ca4 <HAL_GPIO_DeInit+0x1c4>)
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	493a      	ldr	r1, [pc, #232]	; (8003ca4 <HAL_GPIO_DeInit+0x1c4>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	220f      	movs	r2, #15
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003bd0:	4a2e      	ldr	r2, [pc, #184]	; (8003c8c <HAL_GPIO_DeInit+0x1ac>)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	089b      	lsrs	r3, r3, #2
 8003bd6:	3302      	adds	r3, #2
 8003bd8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	43da      	mvns	r2, r3
 8003be0:	482a      	ldr	r0, [pc, #168]	; (8003c8c <HAL_GPIO_DeInit+0x1ac>)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	089b      	lsrs	r3, r3, #2
 8003be6:	400a      	ands	r2, r1
 8003be8:	3302      	adds	r3, #2
 8003bea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	2103      	movs	r1, #3
 8003bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	401a      	ands	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	08da      	lsrs	r2, r3, #3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3208      	adds	r2, #8
 8003c0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	220f      	movs	r2, #15
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	08d2      	lsrs	r2, r2, #3
 8003c24:	4019      	ands	r1, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3208      	adds	r2, #8
 8003c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	2103      	movs	r1, #3
 8003c38:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	401a      	ands	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	2101      	movs	r1, #1
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c50:	43db      	mvns	r3, r3
 8003c52:	401a      	ands	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	2103      	movs	r1, #3
 8003c62:	fa01 f303 	lsl.w	r3, r1, r3
 8003c66:	43db      	mvns	r3, r3
 8003c68:	401a      	ands	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	3301      	adds	r3, #1
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b0f      	cmp	r3, #15
 8003c78:	f67f af40 	bls.w	8003afc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003c7c:	bf00      	nop
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40013800 	.word	0x40013800
 8003c90:	40020000 	.word	0x40020000
 8003c94:	40020400 	.word	0x40020400
 8003c98:	40020800 	.word	0x40020800
 8003c9c:	40020c00 	.word	0x40020c00
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	40013c00 	.word	0x40013c00

08003ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	807b      	strh	r3, [r7, #2]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cb8:	787b      	ldrb	r3, [r7, #1]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cbe:	887a      	ldrh	r2, [r7, #2]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cc4:	e003      	b.n	8003cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cc6:	887b      	ldrh	r3, [r7, #2]
 8003cc8:	041a      	lsls	r2, r3, #16
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	619a      	str	r2, [r3, #24]
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
	...

08003cdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ce6:	4b08      	ldr	r3, [pc, #32]	; (8003d08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ce8:	695a      	ldr	r2, [r3, #20]
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	4013      	ands	r3, r2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d006      	beq.n	8003d00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cf2:	4a05      	ldr	r2, [pc, #20]	; (8003d08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cf8:	88fb      	ldrh	r3, [r7, #6]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 f806 	bl	8003d0c <HAL_GPIO_EXTI_Callback>
  }
}
 8003d00:	bf00      	nop
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40013c00 	.word	0x40013c00

08003d0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003d22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d24:	b08f      	sub	sp, #60	; 0x3c
 8003d26:	af0a      	add	r7, sp, #40	; 0x28
 8003d28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e054      	b.n	8003dde <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f00b fb12 	bl	800f378 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2203      	movs	r2, #3
 8003d58:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d102      	bne.n	8003d6e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f004 fe80 	bl	8008a78 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	603b      	str	r3, [r7, #0]
 8003d7e:	687e      	ldr	r6, [r7, #4]
 8003d80:	466d      	mov	r5, sp
 8003d82:	f106 0410 	add.w	r4, r6, #16
 8003d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d92:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d96:	1d33      	adds	r3, r6, #4
 8003d98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d9a:	6838      	ldr	r0, [r7, #0]
 8003d9c:	f004 fdfa 	bl	8008994 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2101      	movs	r1, #1
 8003da6:	4618      	mov	r0, r3
 8003da8:	f004 fe77 	bl	8008a9a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	603b      	str	r3, [r7, #0]
 8003db2:	687e      	ldr	r6, [r7, #4]
 8003db4:	466d      	mov	r5, sp
 8003db6:	f106 0410 	add.w	r4, r6, #16
 8003dba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dca:	1d33      	adds	r3, r6, #4
 8003dcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dce:	6838      	ldr	r0, [r7, #0]
 8003dd0:	f005 f800 	bl	8008dd4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003de6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003de6:	b590      	push	{r4, r7, lr}
 8003de8:	b089      	sub	sp, #36	; 0x24
 8003dea:	af04      	add	r7, sp, #16
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	4608      	mov	r0, r1
 8003df0:	4611      	mov	r1, r2
 8003df2:	461a      	mov	r2, r3
 8003df4:	4603      	mov	r3, r0
 8003df6:	70fb      	strb	r3, [r7, #3]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	70bb      	strb	r3, [r7, #2]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <HAL_HCD_HC_Init+0x28>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e076      	b.n	8003efc <HAL_HCD_HC_Init+0x116>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003e16:	78fb      	ldrb	r3, [r7, #3]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	212c      	movs	r1, #44	; 0x2c
 8003e1c:	fb01 f303 	mul.w	r3, r1, r3
 8003e20:	4413      	add	r3, r2
 8003e22:	333d      	adds	r3, #61	; 0x3d
 8003e24:	2200      	movs	r2, #0
 8003e26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	212c      	movs	r1, #44	; 0x2c
 8003e2e:	fb01 f303 	mul.w	r3, r1, r3
 8003e32:	4413      	add	r3, r2
 8003e34:	3338      	adds	r3, #56	; 0x38
 8003e36:	787a      	ldrb	r2, [r7, #1]
 8003e38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003e3a:	78fb      	ldrb	r3, [r7, #3]
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	212c      	movs	r1, #44	; 0x2c
 8003e40:	fb01 f303 	mul.w	r3, r1, r3
 8003e44:	4413      	add	r3, r2
 8003e46:	3340      	adds	r3, #64	; 0x40
 8003e48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003e4a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	212c      	movs	r1, #44	; 0x2c
 8003e52:	fb01 f303 	mul.w	r3, r1, r3
 8003e56:	4413      	add	r3, r2
 8003e58:	3339      	adds	r3, #57	; 0x39
 8003e5a:	78fa      	ldrb	r2, [r7, #3]
 8003e5c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	212c      	movs	r1, #44	; 0x2c
 8003e64:	fb01 f303 	mul.w	r3, r1, r3
 8003e68:	4413      	add	r3, r2
 8003e6a:	333f      	adds	r3, #63	; 0x3f
 8003e6c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003e70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003e72:	78fb      	ldrb	r3, [r7, #3]
 8003e74:	78ba      	ldrb	r2, [r7, #2]
 8003e76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e7a:	b2d0      	uxtb	r0, r2
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	212c      	movs	r1, #44	; 0x2c
 8003e80:	fb01 f303 	mul.w	r3, r1, r3
 8003e84:	4413      	add	r3, r2
 8003e86:	333a      	adds	r3, #58	; 0x3a
 8003e88:	4602      	mov	r2, r0
 8003e8a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003e8c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	da09      	bge.n	8003ea8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	212c      	movs	r1, #44	; 0x2c
 8003e9a:	fb01 f303 	mul.w	r3, r1, r3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	333b      	adds	r3, #59	; 0x3b
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	701a      	strb	r2, [r3, #0]
 8003ea6:	e008      	b.n	8003eba <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	212c      	movs	r1, #44	; 0x2c
 8003eae:	fb01 f303 	mul.w	r3, r1, r3
 8003eb2:	4413      	add	r3, r2
 8003eb4:	333b      	adds	r3, #59	; 0x3b
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	212c      	movs	r1, #44	; 0x2c
 8003ec0:	fb01 f303 	mul.w	r3, r1, r3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	333c      	adds	r3, #60	; 0x3c
 8003ec8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003ecc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	787c      	ldrb	r4, [r7, #1]
 8003ed4:	78ba      	ldrb	r2, [r7, #2]
 8003ed6:	78f9      	ldrb	r1, [r7, #3]
 8003ed8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003eda:	9302      	str	r3, [sp, #8]
 8003edc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003ee0:	9301      	str	r3, [sp, #4]
 8003ee2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	4623      	mov	r3, r4
 8003eea:	f005 f8f9 	bl	80090e0 <USB_HC_Init>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd90      	pop	{r4, r7, pc}

08003f04 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_HCD_HC_Halt+0x1e>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e00f      	b.n	8003f42 <HAL_HCD_HC_Halt+0x3e>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	78fa      	ldrb	r2, [r7, #3]
 8003f30:	4611      	mov	r1, r2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f005 fb49 	bl	80095ca <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	4608      	mov	r0, r1
 8003f56:	4611      	mov	r1, r2
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	70fb      	strb	r3, [r7, #3]
 8003f5e:	460b      	mov	r3, r1
 8003f60:	70bb      	strb	r3, [r7, #2]
 8003f62:	4613      	mov	r3, r2
 8003f64:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003f66:	78fb      	ldrb	r3, [r7, #3]
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	212c      	movs	r1, #44	; 0x2c
 8003f6c:	fb01 f303 	mul.w	r3, r1, r3
 8003f70:	4413      	add	r3, r2
 8003f72:	333b      	adds	r3, #59	; 0x3b
 8003f74:	78ba      	ldrb	r2, [r7, #2]
 8003f76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	212c      	movs	r1, #44	; 0x2c
 8003f7e:	fb01 f303 	mul.w	r3, r1, r3
 8003f82:	4413      	add	r3, r2
 8003f84:	333f      	adds	r3, #63	; 0x3f
 8003f86:	787a      	ldrb	r2, [r7, #1]
 8003f88:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003f8a:	7c3b      	ldrb	r3, [r7, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d112      	bne.n	8003fb6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003f90:	78fb      	ldrb	r3, [r7, #3]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	212c      	movs	r1, #44	; 0x2c
 8003f96:	fb01 f303 	mul.w	r3, r1, r3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3342      	adds	r3, #66	; 0x42
 8003f9e:	2203      	movs	r2, #3
 8003fa0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003fa2:	78fb      	ldrb	r3, [r7, #3]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	212c      	movs	r1, #44	; 0x2c
 8003fa8:	fb01 f303 	mul.w	r3, r1, r3
 8003fac:	4413      	add	r3, r2
 8003fae:	333d      	adds	r3, #61	; 0x3d
 8003fb0:	7f3a      	ldrb	r2, [r7, #28]
 8003fb2:	701a      	strb	r2, [r3, #0]
 8003fb4:	e008      	b.n	8003fc8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003fb6:	78fb      	ldrb	r3, [r7, #3]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	212c      	movs	r1, #44	; 0x2c
 8003fbc:	fb01 f303 	mul.w	r3, r1, r3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3342      	adds	r3, #66	; 0x42
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003fc8:	787b      	ldrb	r3, [r7, #1]
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	f200 80c6 	bhi.w	800415c <HAL_HCD_HC_SubmitRequest+0x210>
 8003fd0:	a201      	add	r2, pc, #4	; (adr r2, 8003fd8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd6:	bf00      	nop
 8003fd8:	08003fe9 	.word	0x08003fe9
 8003fdc:	08004149 	.word	0x08004149
 8003fe0:	0800404d 	.word	0x0800404d
 8003fe4:	080040cb 	.word	0x080040cb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003fe8:	7c3b      	ldrb	r3, [r7, #16]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	f040 80b8 	bne.w	8004160 <HAL_HCD_HC_SubmitRequest+0x214>
 8003ff0:	78bb      	ldrb	r3, [r7, #2]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f040 80b4 	bne.w	8004160 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003ff8:	8b3b      	ldrh	r3, [r7, #24]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d108      	bne.n	8004010 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003ffe:	78fb      	ldrb	r3, [r7, #3]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	212c      	movs	r1, #44	; 0x2c
 8004004:	fb01 f303 	mul.w	r3, r1, r3
 8004008:	4413      	add	r3, r2
 800400a:	3355      	adds	r3, #85	; 0x55
 800400c:	2201      	movs	r2, #1
 800400e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	212c      	movs	r1, #44	; 0x2c
 8004016:	fb01 f303 	mul.w	r3, r1, r3
 800401a:	4413      	add	r3, r2
 800401c:	3355      	adds	r3, #85	; 0x55
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d109      	bne.n	8004038 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004024:	78fb      	ldrb	r3, [r7, #3]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	212c      	movs	r1, #44	; 0x2c
 800402a:	fb01 f303 	mul.w	r3, r1, r3
 800402e:	4413      	add	r3, r2
 8004030:	3342      	adds	r3, #66	; 0x42
 8004032:	2200      	movs	r2, #0
 8004034:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004036:	e093      	b.n	8004160 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004038:	78fb      	ldrb	r3, [r7, #3]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	212c      	movs	r1, #44	; 0x2c
 800403e:	fb01 f303 	mul.w	r3, r1, r3
 8004042:	4413      	add	r3, r2
 8004044:	3342      	adds	r3, #66	; 0x42
 8004046:	2202      	movs	r2, #2
 8004048:	701a      	strb	r2, [r3, #0]
      break;
 800404a:	e089      	b.n	8004160 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800404c:	78bb      	ldrb	r3, [r7, #2]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d11d      	bne.n	800408e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004052:	78fb      	ldrb	r3, [r7, #3]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	212c      	movs	r1, #44	; 0x2c
 8004058:	fb01 f303 	mul.w	r3, r1, r3
 800405c:	4413      	add	r3, r2
 800405e:	3355      	adds	r3, #85	; 0x55
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d109      	bne.n	800407a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004066:	78fb      	ldrb	r3, [r7, #3]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	212c      	movs	r1, #44	; 0x2c
 800406c:	fb01 f303 	mul.w	r3, r1, r3
 8004070:	4413      	add	r3, r2
 8004072:	3342      	adds	r3, #66	; 0x42
 8004074:	2200      	movs	r2, #0
 8004076:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004078:	e073      	b.n	8004162 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800407a:	78fb      	ldrb	r3, [r7, #3]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	212c      	movs	r1, #44	; 0x2c
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	4413      	add	r3, r2
 8004086:	3342      	adds	r3, #66	; 0x42
 8004088:	2202      	movs	r2, #2
 800408a:	701a      	strb	r2, [r3, #0]
      break;
 800408c:	e069      	b.n	8004162 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	212c      	movs	r1, #44	; 0x2c
 8004094:	fb01 f303 	mul.w	r3, r1, r3
 8004098:	4413      	add	r3, r2
 800409a:	3354      	adds	r3, #84	; 0x54
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d109      	bne.n	80040b6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	212c      	movs	r1, #44	; 0x2c
 80040a8:	fb01 f303 	mul.w	r3, r1, r3
 80040ac:	4413      	add	r3, r2
 80040ae:	3342      	adds	r3, #66	; 0x42
 80040b0:	2200      	movs	r2, #0
 80040b2:	701a      	strb	r2, [r3, #0]
      break;
 80040b4:	e055      	b.n	8004162 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	212c      	movs	r1, #44	; 0x2c
 80040bc:	fb01 f303 	mul.w	r3, r1, r3
 80040c0:	4413      	add	r3, r2
 80040c2:	3342      	adds	r3, #66	; 0x42
 80040c4:	2202      	movs	r2, #2
 80040c6:	701a      	strb	r2, [r3, #0]
      break;
 80040c8:	e04b      	b.n	8004162 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80040ca:	78bb      	ldrb	r3, [r7, #2]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d11d      	bne.n	800410c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80040d0:	78fb      	ldrb	r3, [r7, #3]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	212c      	movs	r1, #44	; 0x2c
 80040d6:	fb01 f303 	mul.w	r3, r1, r3
 80040da:	4413      	add	r3, r2
 80040dc:	3355      	adds	r3, #85	; 0x55
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d109      	bne.n	80040f8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	212c      	movs	r1, #44	; 0x2c
 80040ea:	fb01 f303 	mul.w	r3, r1, r3
 80040ee:	4413      	add	r3, r2
 80040f0:	3342      	adds	r3, #66	; 0x42
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80040f6:	e034      	b.n	8004162 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	212c      	movs	r1, #44	; 0x2c
 80040fe:	fb01 f303 	mul.w	r3, r1, r3
 8004102:	4413      	add	r3, r2
 8004104:	3342      	adds	r3, #66	; 0x42
 8004106:	2202      	movs	r2, #2
 8004108:	701a      	strb	r2, [r3, #0]
      break;
 800410a:	e02a      	b.n	8004162 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800410c:	78fb      	ldrb	r3, [r7, #3]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	212c      	movs	r1, #44	; 0x2c
 8004112:	fb01 f303 	mul.w	r3, r1, r3
 8004116:	4413      	add	r3, r2
 8004118:	3354      	adds	r3, #84	; 0x54
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d109      	bne.n	8004134 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004120:	78fb      	ldrb	r3, [r7, #3]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	212c      	movs	r1, #44	; 0x2c
 8004126:	fb01 f303 	mul.w	r3, r1, r3
 800412a:	4413      	add	r3, r2
 800412c:	3342      	adds	r3, #66	; 0x42
 800412e:	2200      	movs	r2, #0
 8004130:	701a      	strb	r2, [r3, #0]
      break;
 8004132:	e016      	b.n	8004162 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	212c      	movs	r1, #44	; 0x2c
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	4413      	add	r3, r2
 8004140:	3342      	adds	r3, #66	; 0x42
 8004142:	2202      	movs	r2, #2
 8004144:	701a      	strb	r2, [r3, #0]
      break;
 8004146:	e00c      	b.n	8004162 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	212c      	movs	r1, #44	; 0x2c
 800414e:	fb01 f303 	mul.w	r3, r1, r3
 8004152:	4413      	add	r3, r2
 8004154:	3342      	adds	r3, #66	; 0x42
 8004156:	2200      	movs	r2, #0
 8004158:	701a      	strb	r2, [r3, #0]
      break;
 800415a:	e002      	b.n	8004162 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800415c:	bf00      	nop
 800415e:	e000      	b.n	8004162 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004160:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004162:	78fb      	ldrb	r3, [r7, #3]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	212c      	movs	r1, #44	; 0x2c
 8004168:	fb01 f303 	mul.w	r3, r1, r3
 800416c:	4413      	add	r3, r2
 800416e:	3344      	adds	r3, #68	; 0x44
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	8b3a      	ldrh	r2, [r7, #24]
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	202c      	movs	r0, #44	; 0x2c
 800417c:	fb00 f303 	mul.w	r3, r0, r3
 8004180:	440b      	add	r3, r1
 8004182:	334c      	adds	r3, #76	; 0x4c
 8004184:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	212c      	movs	r1, #44	; 0x2c
 800418c:	fb01 f303 	mul.w	r3, r1, r3
 8004190:	4413      	add	r3, r2
 8004192:	3360      	adds	r3, #96	; 0x60
 8004194:	2200      	movs	r2, #0
 8004196:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004198:	78fb      	ldrb	r3, [r7, #3]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	212c      	movs	r1, #44	; 0x2c
 800419e:	fb01 f303 	mul.w	r3, r1, r3
 80041a2:	4413      	add	r3, r2
 80041a4:	3350      	adds	r3, #80	; 0x50
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	212c      	movs	r1, #44	; 0x2c
 80041b0:	fb01 f303 	mul.w	r3, r1, r3
 80041b4:	4413      	add	r3, r2
 80041b6:	3339      	adds	r3, #57	; 0x39
 80041b8:	78fa      	ldrb	r2, [r7, #3]
 80041ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	212c      	movs	r1, #44	; 0x2c
 80041c2:	fb01 f303 	mul.w	r3, r1, r3
 80041c6:	4413      	add	r3, r2
 80041c8:	3361      	adds	r3, #97	; 0x61
 80041ca:	2200      	movs	r2, #0
 80041cc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6818      	ldr	r0, [r3, #0]
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	222c      	movs	r2, #44	; 0x2c
 80041d6:	fb02 f303 	mul.w	r3, r2, r3
 80041da:	3338      	adds	r3, #56	; 0x38
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	18d1      	adds	r1, r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	461a      	mov	r2, r3
 80041e8:	f005 f89c 	bl	8009324 <USB_HC_StartXfer>
 80041ec:	4603      	mov	r3, r0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop

080041f8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f004 fd9d 	bl	8008d4e <USB_GetMode>
 8004214:	4603      	mov	r3, r0
 8004216:	2b01      	cmp	r3, #1
 8004218:	f040 80f6 	bne.w	8004408 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	f004 fd81 	bl	8008d28 <USB_ReadInterrupts>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 80ec 	beq.w	8004406 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f004 fd78 	bl	8008d28 <USB_ReadInterrupts>
 8004238:	4603      	mov	r3, r0
 800423a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800423e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004242:	d104      	bne.n	800424e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800424c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f004 fd68 	bl	8008d28 <USB_ReadInterrupts>
 8004258:	4603      	mov	r3, r0
 800425a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800425e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004262:	d104      	bne.n	800426e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800426c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f004 fd58 	bl	8008d28 <USB_ReadInterrupts>
 8004278:	4603      	mov	r3, r0
 800427a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800427e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004282:	d104      	bne.n	800428e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800428c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f004 fd48 	bl	8008d28 <USB_ReadInterrupts>
 8004298:	4603      	mov	r3, r0
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d103      	bne.n	80042aa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2202      	movs	r2, #2
 80042a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f004 fd3a 	bl	8008d28 <USB_ReadInterrupts>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042be:	d11c      	bne.n	80042fa <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80042c8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10f      	bne.n	80042fa <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80042da:	2110      	movs	r1, #16
 80042dc:	6938      	ldr	r0, [r7, #16]
 80042de:	f004 fc29 	bl	8008b34 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80042e2:	6938      	ldr	r0, [r7, #16]
 80042e4:	f004 fc5a 	bl	8008b9c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2101      	movs	r1, #1
 80042ee:	4618      	mov	r0, r3
 80042f0:	f004 fe30 	bl	8008f54 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f00b f8bd 	bl	800f474 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f004 fd12 	bl	8008d28 <USB_ReadInterrupts>
 8004304:	4603      	mov	r3, r0
 8004306:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800430a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800430e:	d102      	bne.n	8004316 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f001 f89e 	bl	8005452 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f004 fd04 	bl	8008d28 <USB_ReadInterrupts>
 8004320:	4603      	mov	r3, r0
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b08      	cmp	r3, #8
 8004328:	d106      	bne.n	8004338 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f00b f886 	bl	800f43c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2208      	movs	r2, #8
 8004336:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f004 fcf3 	bl	8008d28 <USB_ReadInterrupts>
 8004342:	4603      	mov	r3, r0
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	2b10      	cmp	r3, #16
 800434a:	d101      	bne.n	8004350 <HAL_HCD_IRQHandler+0x158>
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <HAL_HCD_IRQHandler+0x15a>
 8004350:	2300      	movs	r3, #0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d012      	beq.n	800437c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699a      	ldr	r2, [r3, #24]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0210 	bic.w	r2, r2, #16
 8004364:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 ffa1 	bl	80052ae <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699a      	ldr	r2, [r3, #24]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0210 	orr.w	r2, r2, #16
 800437a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f004 fcd1 	bl	8008d28 <USB_ReadInterrupts>
 8004386:	4603      	mov	r3, r0
 8004388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004390:	d13a      	bne.n	8004408 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f005 f906 	bl	80095a8 <USB_HC_ReadInterrupt>
 800439c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800439e:	2300      	movs	r3, #0
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	e025      	b.n	80043f0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	fa22 f303 	lsr.w	r3, r2, r3
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d018      	beq.n	80043ea <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ce:	d106      	bne.n	80043de <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	4619      	mov	r1, r3
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f8ab 	bl	8004532 <HCD_HC_IN_IRQHandler>
 80043dc:	e005      	b.n	80043ea <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	4619      	mov	r1, r3
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fbf9 	bl	8004bdc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	3301      	adds	r3, #1
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d3d4      	bcc.n	80043a4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004402:	615a      	str	r2, [r3, #20]
 8004404:	e000      	b.n	8004408 <HAL_HCD_IRQHandler+0x210>
      return;
 8004406:	bf00      	nop
    }
  }
}
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b082      	sub	sp, #8
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_HCD_Start+0x16>
 8004420:	2302      	movs	r3, #2
 8004422:	e013      	b.n	800444c <HAL_HCD_Start+0x3e>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2101      	movs	r1, #1
 8004432:	4618      	mov	r0, r3
 8004434:	f004 fdf2 	bl	800901c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f004 fb0a 	bl	8008a56 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_HCD_Stop+0x16>
 8004466:	2302      	movs	r3, #2
 8004468:	e00d      	b.n	8004486 <HAL_HCD_Stop+0x32>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f005 f9e0 	bl	800983c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f004 fd94 	bl	8008fc8 <USB_ResetPort>
 80044a0:	4603      	mov	r3, r0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	460b      	mov	r3, r1
 80044b4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80044b6:	78fb      	ldrb	r3, [r7, #3]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	212c      	movs	r1, #44	; 0x2c
 80044bc:	fb01 f303 	mul.w	r3, r1, r3
 80044c0:	4413      	add	r3, r2
 80044c2:	3360      	adds	r3, #96	; 0x60
 80044c4:	781b      	ldrb	r3, [r3, #0]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	460b      	mov	r3, r1
 80044dc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80044de:	78fb      	ldrb	r3, [r7, #3]
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	212c      	movs	r1, #44	; 0x2c
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	4413      	add	r3, r2
 80044ea:	3350      	adds	r3, #80	; 0x50
 80044ec:	681b      	ldr	r3, [r3, #0]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b082      	sub	sp, #8
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f004 fdd8 	bl	80090bc <USB_GetCurrentFrame>
 800450c:	4603      	mov	r3, r0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b082      	sub	sp, #8
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f004 fdb3 	bl	800908e <USB_GetHostSpeed>
 8004528:	4603      	mov	r3, r0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b086      	sub	sp, #24
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	460b      	mov	r3, r1
 800453c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004548:	78fb      	ldrb	r3, [r7, #3]
 800454a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	4413      	add	r3, r2
 8004554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b04      	cmp	r3, #4
 8004560:	d11a      	bne.n	8004598 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	4413      	add	r3, r2
 800456a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800456e:	461a      	mov	r2, r3
 8004570:	2304      	movs	r3, #4
 8004572:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	212c      	movs	r1, #44	; 0x2c
 800457a:	fb01 f303 	mul.w	r3, r1, r3
 800457e:	4413      	add	r3, r2
 8004580:	3361      	adds	r3, #97	; 0x61
 8004582:	2206      	movs	r2, #6
 8004584:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	4611      	mov	r1, r2
 8004590:	4618      	mov	r0, r3
 8004592:	f005 f81a 	bl	80095ca <USB_HC_Halt>
 8004596:	e0af      	b.n	80046f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ae:	d11b      	bne.n	80045e8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045bc:	461a      	mov	r2, r3
 80045be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	212c      	movs	r1, #44	; 0x2c
 80045ca:	fb01 f303 	mul.w	r3, r1, r3
 80045ce:	4413      	add	r3, r2
 80045d0:	3361      	adds	r3, #97	; 0x61
 80045d2:	2207      	movs	r2, #7
 80045d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	4611      	mov	r1, r2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f004 fff2 	bl	80095ca <USB_HC_Halt>
 80045e6:	e087      	b.n	80046f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b20      	cmp	r3, #32
 80045fc:	d109      	bne.n	8004612 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	015a      	lsls	r2, r3, #5
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	4413      	add	r3, r2
 8004606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800460a:	461a      	mov	r2, r3
 800460c:	2320      	movs	r3, #32
 800460e:	6093      	str	r3, [r2, #8]
 8004610:	e072      	b.n	80046f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	4413      	add	r3, r2
 800461a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b08      	cmp	r3, #8
 8004626:	d11a      	bne.n	800465e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	4413      	add	r3, r2
 8004630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004634:	461a      	mov	r2, r3
 8004636:	2308      	movs	r3, #8
 8004638:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	212c      	movs	r1, #44	; 0x2c
 8004640:	fb01 f303 	mul.w	r3, r1, r3
 8004644:	4413      	add	r3, r2
 8004646:	3361      	adds	r3, #97	; 0x61
 8004648:	2205      	movs	r2, #5
 800464a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	4611      	mov	r1, r2
 8004656:	4618      	mov	r0, r3
 8004658:	f004 ffb7 	bl	80095ca <USB_HC_Halt>
 800465c:	e04c      	b.n	80046f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	4413      	add	r3, r2
 8004666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004674:	d11b      	bne.n	80046ae <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	4413      	add	r3, r2
 800467e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004682:	461a      	mov	r2, r3
 8004684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004688:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	212c      	movs	r1, #44	; 0x2c
 8004690:	fb01 f303 	mul.w	r3, r1, r3
 8004694:	4413      	add	r3, r2
 8004696:	3361      	adds	r3, #97	; 0x61
 8004698:	2208      	movs	r2, #8
 800469a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	4611      	mov	r1, r2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f004 ff8f 	bl	80095ca <USB_HC_Halt>
 80046ac:	e024      	b.n	80046f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c0:	2b80      	cmp	r3, #128	; 0x80
 80046c2:	d119      	bne.n	80046f8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d0:	461a      	mov	r2, r3
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	212c      	movs	r1, #44	; 0x2c
 80046dc:	fb01 f303 	mul.w	r3, r1, r3
 80046e0:	4413      	add	r3, r2
 80046e2:	3361      	adds	r3, #97	; 0x61
 80046e4:	2206      	movs	r2, #6
 80046e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	4611      	mov	r1, r2
 80046f2:	4618      	mov	r0, r3
 80046f4:	f004 ff69 	bl	80095ca <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800470a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800470e:	d112      	bne.n	8004736 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	4611      	mov	r1, r2
 800471a:	4618      	mov	r0, r3
 800471c:	f004 ff55 	bl	80095ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	4413      	add	r3, r2
 8004728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800472c:	461a      	mov	r2, r3
 800472e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004732:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004734:	e24e      	b.n	8004bd4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4413      	add	r3, r2
 800473e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b01      	cmp	r3, #1
 800474a:	f040 80df 	bne.w	800490c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d019      	beq.n	800478a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	212c      	movs	r1, #44	; 0x2c
 800475c:	fb01 f303 	mul.w	r3, r1, r3
 8004760:	4413      	add	r3, r2
 8004762:	3348      	adds	r3, #72	; 0x48
 8004764:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	0159      	lsls	r1, r3, #5
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	440b      	add	r3, r1
 800476e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004778:	1ad2      	subs	r2, r2, r3
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	202c      	movs	r0, #44	; 0x2c
 8004780:	fb00 f303 	mul.w	r3, r0, r3
 8004784:	440b      	add	r3, r1
 8004786:	3350      	adds	r3, #80	; 0x50
 8004788:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	212c      	movs	r1, #44	; 0x2c
 8004790:	fb01 f303 	mul.w	r3, r1, r3
 8004794:	4413      	add	r3, r2
 8004796:	3361      	adds	r3, #97	; 0x61
 8004798:	2201      	movs	r2, #1
 800479a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	212c      	movs	r1, #44	; 0x2c
 80047a2:	fb01 f303 	mul.w	r3, r1, r3
 80047a6:	4413      	add	r3, r2
 80047a8:	335c      	adds	r3, #92	; 0x5c
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ba:	461a      	mov	r2, r3
 80047bc:	2301      	movs	r3, #1
 80047be:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	212c      	movs	r1, #44	; 0x2c
 80047c6:	fb01 f303 	mul.w	r3, r1, r3
 80047ca:	4413      	add	r3, r2
 80047cc:	333f      	adds	r3, #63	; 0x3f
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d009      	beq.n	80047e8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	212c      	movs	r1, #44	; 0x2c
 80047da:	fb01 f303 	mul.w	r3, r1, r3
 80047de:	4413      	add	r3, r2
 80047e0:	333f      	adds	r3, #63	; 0x3f
 80047e2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d111      	bne.n	800480c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	4611      	mov	r1, r2
 80047f2:	4618      	mov	r0, r3
 80047f4:	f004 fee9 	bl	80095ca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004804:	461a      	mov	r2, r3
 8004806:	2310      	movs	r3, #16
 8004808:	6093      	str	r3, [r2, #8]
 800480a:	e03a      	b.n	8004882 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	212c      	movs	r1, #44	; 0x2c
 8004812:	fb01 f303 	mul.w	r3, r1, r3
 8004816:	4413      	add	r3, r2
 8004818:	333f      	adds	r3, #63	; 0x3f
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b03      	cmp	r3, #3
 800481e:	d009      	beq.n	8004834 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	212c      	movs	r1, #44	; 0x2c
 8004826:	fb01 f303 	mul.w	r3, r1, r3
 800482a:	4413      	add	r3, r2
 800482c:	333f      	adds	r3, #63	; 0x3f
 800482e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004830:	2b01      	cmp	r3, #1
 8004832:	d126      	bne.n	8004882 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4413      	add	r3, r2
 800483c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	0151      	lsls	r1, r2, #5
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	440a      	add	r2, r1
 800484a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800484e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004852:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	212c      	movs	r1, #44	; 0x2c
 800485a:	fb01 f303 	mul.w	r3, r1, r3
 800485e:	4413      	add	r3, r2
 8004860:	3360      	adds	r3, #96	; 0x60
 8004862:	2201      	movs	r2, #1
 8004864:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	b2d9      	uxtb	r1, r3
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	202c      	movs	r0, #44	; 0x2c
 8004870:	fb00 f303 	mul.w	r3, r0, r3
 8004874:	4413      	add	r3, r2
 8004876:	3360      	adds	r3, #96	; 0x60
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f00a fe07 	bl	800f490 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d12b      	bne.n	80048e2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	212c      	movs	r1, #44	; 0x2c
 8004890:	fb01 f303 	mul.w	r3, r1, r3
 8004894:	4413      	add	r3, r2
 8004896:	3348      	adds	r3, #72	; 0x48
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	202c      	movs	r0, #44	; 0x2c
 80048a0:	fb00 f202 	mul.w	r2, r0, r2
 80048a4:	440a      	add	r2, r1
 80048a6:	3240      	adds	r2, #64	; 0x40
 80048a8:	8812      	ldrh	r2, [r2, #0]
 80048aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 818e 	beq.w	8004bd4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	212c      	movs	r1, #44	; 0x2c
 80048be:	fb01 f303 	mul.w	r3, r1, r3
 80048c2:	4413      	add	r3, r2
 80048c4:	3354      	adds	r3, #84	; 0x54
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	f083 0301 	eor.w	r3, r3, #1
 80048cc:	b2d8      	uxtb	r0, r3
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	212c      	movs	r1, #44	; 0x2c
 80048d4:	fb01 f303 	mul.w	r3, r1, r3
 80048d8:	4413      	add	r3, r2
 80048da:	3354      	adds	r3, #84	; 0x54
 80048dc:	4602      	mov	r2, r0
 80048de:	701a      	strb	r2, [r3, #0]
}
 80048e0:	e178      	b.n	8004bd4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	212c      	movs	r1, #44	; 0x2c
 80048e8:	fb01 f303 	mul.w	r3, r1, r3
 80048ec:	4413      	add	r3, r2
 80048ee:	3354      	adds	r3, #84	; 0x54
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	f083 0301 	eor.w	r3, r3, #1
 80048f6:	b2d8      	uxtb	r0, r3
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	212c      	movs	r1, #44	; 0x2c
 80048fe:	fb01 f303 	mul.w	r3, r1, r3
 8004902:	4413      	add	r3, r2
 8004904:	3354      	adds	r3, #84	; 0x54
 8004906:	4602      	mov	r2, r0
 8004908:	701a      	strb	r2, [r3, #0]
}
 800490a:	e163      	b.n	8004bd4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	4413      	add	r3, r2
 8004914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b02      	cmp	r3, #2
 8004920:	f040 80f6 	bne.w	8004b10 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	212c      	movs	r1, #44	; 0x2c
 800492a:	fb01 f303 	mul.w	r3, r1, r3
 800492e:	4413      	add	r3, r2
 8004930:	3361      	adds	r3, #97	; 0x61
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d109      	bne.n	800494c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	212c      	movs	r1, #44	; 0x2c
 800493e:	fb01 f303 	mul.w	r3, r1, r3
 8004942:	4413      	add	r3, r2
 8004944:	3360      	adds	r3, #96	; 0x60
 8004946:	2201      	movs	r2, #1
 8004948:	701a      	strb	r2, [r3, #0]
 800494a:	e0c9      	b.n	8004ae0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	212c      	movs	r1, #44	; 0x2c
 8004952:	fb01 f303 	mul.w	r3, r1, r3
 8004956:	4413      	add	r3, r2
 8004958:	3361      	adds	r3, #97	; 0x61
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	2b05      	cmp	r3, #5
 800495e:	d109      	bne.n	8004974 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	212c      	movs	r1, #44	; 0x2c
 8004966:	fb01 f303 	mul.w	r3, r1, r3
 800496a:	4413      	add	r3, r2
 800496c:	3360      	adds	r3, #96	; 0x60
 800496e:	2205      	movs	r2, #5
 8004970:	701a      	strb	r2, [r3, #0]
 8004972:	e0b5      	b.n	8004ae0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	212c      	movs	r1, #44	; 0x2c
 800497a:	fb01 f303 	mul.w	r3, r1, r3
 800497e:	4413      	add	r3, r2
 8004980:	3361      	adds	r3, #97	; 0x61
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	2b06      	cmp	r3, #6
 8004986:	d009      	beq.n	800499c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	212c      	movs	r1, #44	; 0x2c
 800498e:	fb01 f303 	mul.w	r3, r1, r3
 8004992:	4413      	add	r3, r2
 8004994:	3361      	adds	r3, #97	; 0x61
 8004996:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004998:	2b08      	cmp	r3, #8
 800499a:	d150      	bne.n	8004a3e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	212c      	movs	r1, #44	; 0x2c
 80049a2:	fb01 f303 	mul.w	r3, r1, r3
 80049a6:	4413      	add	r3, r2
 80049a8:	335c      	adds	r3, #92	; 0x5c
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	6879      	ldr	r1, [r7, #4]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	202c      	movs	r0, #44	; 0x2c
 80049b4:	fb00 f303 	mul.w	r3, r0, r3
 80049b8:	440b      	add	r3, r1
 80049ba:	335c      	adds	r3, #92	; 0x5c
 80049bc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	212c      	movs	r1, #44	; 0x2c
 80049c4:	fb01 f303 	mul.w	r3, r1, r3
 80049c8:	4413      	add	r3, r2
 80049ca:	335c      	adds	r3, #92	; 0x5c
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d912      	bls.n	80049f8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	212c      	movs	r1, #44	; 0x2c
 80049d8:	fb01 f303 	mul.w	r3, r1, r3
 80049dc:	4413      	add	r3, r2
 80049de:	335c      	adds	r3, #92	; 0x5c
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	212c      	movs	r1, #44	; 0x2c
 80049ea:	fb01 f303 	mul.w	r3, r1, r3
 80049ee:	4413      	add	r3, r2
 80049f0:	3360      	adds	r3, #96	; 0x60
 80049f2:	2204      	movs	r2, #4
 80049f4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80049f6:	e073      	b.n	8004ae0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	212c      	movs	r1, #44	; 0x2c
 80049fe:	fb01 f303 	mul.w	r3, r1, r3
 8004a02:	4413      	add	r3, r2
 8004a04:	3360      	adds	r3, #96	; 0x60
 8004a06:	2202      	movs	r2, #2
 8004a08:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a20:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a28:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a36:	461a      	mov	r2, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a3c:	e050      	b.n	8004ae0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	212c      	movs	r1, #44	; 0x2c
 8004a44:	fb01 f303 	mul.w	r3, r1, r3
 8004a48:	4413      	add	r3, r2
 8004a4a:	3361      	adds	r3, #97	; 0x61
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	2b03      	cmp	r3, #3
 8004a50:	d122      	bne.n	8004a98 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	212c      	movs	r1, #44	; 0x2c
 8004a58:	fb01 f303 	mul.w	r3, r1, r3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	3360      	adds	r3, #96	; 0x60
 8004a60:	2202      	movs	r2, #2
 8004a62:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a7a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a82:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a90:	461a      	mov	r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	e023      	b.n	8004ae0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	212c      	movs	r1, #44	; 0x2c
 8004a9e:	fb01 f303 	mul.w	r3, r1, r3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	3361      	adds	r3, #97	; 0x61
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b07      	cmp	r3, #7
 8004aaa:	d119      	bne.n	8004ae0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	212c      	movs	r1, #44	; 0x2c
 8004ab2:	fb01 f303 	mul.w	r3, r1, r3
 8004ab6:	4413      	add	r3, r2
 8004ab8:	335c      	adds	r3, #92	; 0x5c
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	202c      	movs	r0, #44	; 0x2c
 8004ac4:	fb00 f303 	mul.w	r3, r0, r3
 8004ac8:	440b      	add	r3, r1
 8004aca:	335c      	adds	r3, #92	; 0x5c
 8004acc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	212c      	movs	r1, #44	; 0x2c
 8004ad4:	fb01 f303 	mul.w	r3, r1, r3
 8004ad8:	4413      	add	r3, r2
 8004ada:	3360      	adds	r3, #96	; 0x60
 8004adc:	2204      	movs	r2, #4
 8004ade:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aec:	461a      	mov	r2, r3
 8004aee:	2302      	movs	r3, #2
 8004af0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	b2d9      	uxtb	r1, r3
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	202c      	movs	r0, #44	; 0x2c
 8004afc:	fb00 f303 	mul.w	r3, r0, r3
 8004b00:	4413      	add	r3, r2
 8004b02:	3360      	adds	r3, #96	; 0x60
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f00a fcc1 	bl	800f490 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004b0e:	e061      	b.n	8004bd4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 0310 	and.w	r3, r3, #16
 8004b22:	2b10      	cmp	r3, #16
 8004b24:	d156      	bne.n	8004bd4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	212c      	movs	r1, #44	; 0x2c
 8004b2c:	fb01 f303 	mul.w	r3, r1, r3
 8004b30:	4413      	add	r3, r2
 8004b32:	333f      	adds	r3, #63	; 0x3f
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	d111      	bne.n	8004b5e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	212c      	movs	r1, #44	; 0x2c
 8004b40:	fb01 f303 	mul.w	r3, r1, r3
 8004b44:	4413      	add	r3, r2
 8004b46:	335c      	adds	r3, #92	; 0x5c
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	4611      	mov	r1, r2
 8004b56:	4618      	mov	r0, r3
 8004b58:	f004 fd37 	bl	80095ca <USB_HC_Halt>
 8004b5c:	e031      	b.n	8004bc2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	212c      	movs	r1, #44	; 0x2c
 8004b64:	fb01 f303 	mul.w	r3, r1, r3
 8004b68:	4413      	add	r3, r2
 8004b6a:	333f      	adds	r3, #63	; 0x3f
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d009      	beq.n	8004b86 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	212c      	movs	r1, #44	; 0x2c
 8004b78:	fb01 f303 	mul.w	r3, r1, r3
 8004b7c:	4413      	add	r3, r2
 8004b7e:	333f      	adds	r3, #63	; 0x3f
 8004b80:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d11d      	bne.n	8004bc2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	212c      	movs	r1, #44	; 0x2c
 8004b8c:	fb01 f303 	mul.w	r3, r1, r3
 8004b90:	4413      	add	r3, r2
 8004b92:	335c      	adds	r3, #92	; 0x5c
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d110      	bne.n	8004bc2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	212c      	movs	r1, #44	; 0x2c
 8004ba6:	fb01 f303 	mul.w	r3, r1, r3
 8004baa:	4413      	add	r3, r2
 8004bac:	3361      	adds	r3, #97	; 0x61
 8004bae:	2203      	movs	r2, #3
 8004bb0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	b2d2      	uxtb	r2, r2
 8004bba:	4611      	mov	r1, r2
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f004 fd04 	bl	80095ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bce:	461a      	mov	r2, r3
 8004bd0:	2310      	movs	r3, #16
 8004bd2:	6093      	str	r3, [r2, #8]
}
 8004bd4:	bf00      	nop
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	460b      	mov	r3, r1
 8004be6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004bf2:	78fb      	ldrb	r3, [r7, #3]
 8004bf4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d11a      	bne.n	8004c42 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c18:	461a      	mov	r2, r3
 8004c1a:	2304      	movs	r3, #4
 8004c1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	212c      	movs	r1, #44	; 0x2c
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	4413      	add	r3, r2
 8004c2a:	3361      	adds	r3, #97	; 0x61
 8004c2c:	2206      	movs	r2, #6
 8004c2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	4611      	mov	r1, r2
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f004 fcc5 	bl	80095ca <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004c40:	e331      	b.n	80052a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 0320 	and.w	r3, r3, #32
 8004c54:	2b20      	cmp	r3, #32
 8004c56:	d12e      	bne.n	8004cb6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c64:	461a      	mov	r2, r3
 8004c66:	2320      	movs	r3, #32
 8004c68:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	212c      	movs	r1, #44	; 0x2c
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
 8004c74:	4413      	add	r3, r2
 8004c76:	333d      	adds	r3, #61	; 0x3d
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	f040 8313 	bne.w	80052a6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	212c      	movs	r1, #44	; 0x2c
 8004c86:	fb01 f303 	mul.w	r3, r1, r3
 8004c8a:	4413      	add	r3, r2
 8004c8c:	333d      	adds	r3, #61	; 0x3d
 8004c8e:	2200      	movs	r2, #0
 8004c90:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	212c      	movs	r1, #44	; 0x2c
 8004c98:	fb01 f303 	mul.w	r3, r1, r3
 8004c9c:	4413      	add	r3, r2
 8004c9e:	3360      	adds	r3, #96	; 0x60
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	4611      	mov	r1, r2
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f004 fc8b 	bl	80095ca <USB_HC_Halt>
}
 8004cb4:	e2f7      	b.n	80052a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ccc:	d112      	bne.n	8004cf4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ce0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	4611      	mov	r1, r2
 8004cec:	4618      	mov	r0, r3
 8004cee:	f004 fc6c 	bl	80095ca <USB_HC_Halt>
}
 8004cf2:	e2d8      	b.n	80052a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d140      	bne.n	8004d8c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	212c      	movs	r1, #44	; 0x2c
 8004d10:	fb01 f303 	mul.w	r3, r1, r3
 8004d14:	4413      	add	r3, r2
 8004d16:	335c      	adds	r3, #92	; 0x5c
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2e:	2b40      	cmp	r3, #64	; 0x40
 8004d30:	d111      	bne.n	8004d56 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	212c      	movs	r1, #44	; 0x2c
 8004d38:	fb01 f303 	mul.w	r3, r1, r3
 8004d3c:	4413      	add	r3, r2
 8004d3e:	333d      	adds	r3, #61	; 0x3d
 8004d40:	2201      	movs	r2, #1
 8004d42:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d50:	461a      	mov	r2, r3
 8004d52:	2340      	movs	r3, #64	; 0x40
 8004d54:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d62:	461a      	mov	r2, r3
 8004d64:	2301      	movs	r3, #1
 8004d66:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	212c      	movs	r1, #44	; 0x2c
 8004d6e:	fb01 f303 	mul.w	r3, r1, r3
 8004d72:	4413      	add	r3, r2
 8004d74:	3361      	adds	r3, #97	; 0x61
 8004d76:	2201      	movs	r2, #1
 8004d78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	4611      	mov	r1, r2
 8004d84:	4618      	mov	r0, r3
 8004d86:	f004 fc20 	bl	80095ca <USB_HC_Halt>
}
 8004d8a:	e28c      	b.n	80052a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9e:	2b40      	cmp	r3, #64	; 0x40
 8004da0:	d12c      	bne.n	8004dfc <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	212c      	movs	r1, #44	; 0x2c
 8004da8:	fb01 f303 	mul.w	r3, r1, r3
 8004dac:	4413      	add	r3, r2
 8004dae:	3361      	adds	r3, #97	; 0x61
 8004db0:	2204      	movs	r2, #4
 8004db2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	212c      	movs	r1, #44	; 0x2c
 8004dba:	fb01 f303 	mul.w	r3, r1, r3
 8004dbe:	4413      	add	r3, r2
 8004dc0:	333d      	adds	r3, #61	; 0x3d
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	212c      	movs	r1, #44	; 0x2c
 8004dcc:	fb01 f303 	mul.w	r3, r1, r3
 8004dd0:	4413      	add	r3, r2
 8004dd2:	335c      	adds	r3, #92	; 0x5c
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	4611      	mov	r1, r2
 8004de2:	4618      	mov	r0, r3
 8004de4:	f004 fbf1 	bl	80095ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df4:	461a      	mov	r2, r3
 8004df6:	2340      	movs	r3, #64	; 0x40
 8004df8:	6093      	str	r3, [r2, #8]
}
 8004dfa:	e254      	b.n	80052a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 0308 	and.w	r3, r3, #8
 8004e0e:	2b08      	cmp	r3, #8
 8004e10:	d11a      	bne.n	8004e48 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e1e:	461a      	mov	r2, r3
 8004e20:	2308      	movs	r3, #8
 8004e22:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	212c      	movs	r1, #44	; 0x2c
 8004e2a:	fb01 f303 	mul.w	r3, r1, r3
 8004e2e:	4413      	add	r3, r2
 8004e30:	3361      	adds	r3, #97	; 0x61
 8004e32:	2205      	movs	r2, #5
 8004e34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	4611      	mov	r1, r2
 8004e40:	4618      	mov	r0, r3
 8004e42:	f004 fbc2 	bl	80095ca <USB_HC_Halt>
}
 8004e46:	e22e      	b.n	80052a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 0310 	and.w	r3, r3, #16
 8004e5a:	2b10      	cmp	r3, #16
 8004e5c:	d140      	bne.n	8004ee0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	212c      	movs	r1, #44	; 0x2c
 8004e64:	fb01 f303 	mul.w	r3, r1, r3
 8004e68:	4413      	add	r3, r2
 8004e6a:	335c      	adds	r3, #92	; 0x5c
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	212c      	movs	r1, #44	; 0x2c
 8004e76:	fb01 f303 	mul.w	r3, r1, r3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	3361      	adds	r3, #97	; 0x61
 8004e7e:	2203      	movs	r2, #3
 8004e80:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	212c      	movs	r1, #44	; 0x2c
 8004e88:	fb01 f303 	mul.w	r3, r1, r3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	333d      	adds	r3, #61	; 0x3d
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d112      	bne.n	8004ebc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	212c      	movs	r1, #44	; 0x2c
 8004e9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ea0:	4413      	add	r3, r2
 8004ea2:	333c      	adds	r3, #60	; 0x3c
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d108      	bne.n	8004ebc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	212c      	movs	r1, #44	; 0x2c
 8004eb0:	fb01 f303 	mul.w	r3, r1, r3
 8004eb4:	4413      	add	r3, r2
 8004eb6:	333d      	adds	r3, #61	; 0x3d
 8004eb8:	2201      	movs	r2, #1
 8004eba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f004 fb7f 	bl	80095ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed8:	461a      	mov	r2, r3
 8004eda:	2310      	movs	r3, #16
 8004edc:	6093      	str	r3, [r2, #8]
}
 8004ede:	e1e2      	b.n	80052a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef2:	2b80      	cmp	r3, #128	; 0x80
 8004ef4:	d164      	bne.n	8004fc0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d111      	bne.n	8004f22 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	212c      	movs	r1, #44	; 0x2c
 8004f04:	fb01 f303 	mul.w	r3, r1, r3
 8004f08:	4413      	add	r3, r2
 8004f0a:	3361      	adds	r3, #97	; 0x61
 8004f0c:	2206      	movs	r2, #6
 8004f0e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	4611      	mov	r1, r2
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f004 fb55 	bl	80095ca <USB_HC_Halt>
 8004f20:	e044      	b.n	8004fac <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	212c      	movs	r1, #44	; 0x2c
 8004f28:	fb01 f303 	mul.w	r3, r1, r3
 8004f2c:	4413      	add	r3, r2
 8004f2e:	335c      	adds	r3, #92	; 0x5c
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	202c      	movs	r0, #44	; 0x2c
 8004f3a:	fb00 f303 	mul.w	r3, r0, r3
 8004f3e:	440b      	add	r3, r1
 8004f40:	335c      	adds	r3, #92	; 0x5c
 8004f42:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	212c      	movs	r1, #44	; 0x2c
 8004f4a:	fb01 f303 	mul.w	r3, r1, r3
 8004f4e:	4413      	add	r3, r2
 8004f50:	335c      	adds	r3, #92	; 0x5c
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d920      	bls.n	8004f9a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	212c      	movs	r1, #44	; 0x2c
 8004f5e:	fb01 f303 	mul.w	r3, r1, r3
 8004f62:	4413      	add	r3, r2
 8004f64:	335c      	adds	r3, #92	; 0x5c
 8004f66:	2200      	movs	r2, #0
 8004f68:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	212c      	movs	r1, #44	; 0x2c
 8004f70:	fb01 f303 	mul.w	r3, r1, r3
 8004f74:	4413      	add	r3, r2
 8004f76:	3360      	adds	r3, #96	; 0x60
 8004f78:	2204      	movs	r2, #4
 8004f7a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	b2d9      	uxtb	r1, r3
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	202c      	movs	r0, #44	; 0x2c
 8004f86:	fb00 f303 	mul.w	r3, r0, r3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	3360      	adds	r3, #96	; 0x60
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f00a fa7c 	bl	800f490 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f98:	e008      	b.n	8004fac <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	212c      	movs	r1, #44	; 0x2c
 8004fa0:	fb01 f303 	mul.w	r3, r1, r3
 8004fa4:	4413      	add	r3, r2
 8004fa6:	3360      	adds	r3, #96	; 0x60
 8004fa8:	2202      	movs	r2, #2
 8004faa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb8:	461a      	mov	r2, r3
 8004fba:	2380      	movs	r3, #128	; 0x80
 8004fbc:	6093      	str	r3, [r2, #8]
}
 8004fbe:	e172      	b.n	80052a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd6:	d11b      	bne.n	8005010 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	212c      	movs	r1, #44	; 0x2c
 8004fde:	fb01 f303 	mul.w	r3, r1, r3
 8004fe2:	4413      	add	r3, r2
 8004fe4:	3361      	adds	r3, #97	; 0x61
 8004fe6:	2208      	movs	r2, #8
 8004fe8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	4611      	mov	r1, r2
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f004 fae8 	bl	80095ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	4413      	add	r3, r2
 8005002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005006:	461a      	mov	r2, r3
 8005008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800500c:	6093      	str	r3, [r2, #8]
}
 800500e:	e14a      	b.n	80052a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	4413      	add	r3, r2
 8005018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b02      	cmp	r3, #2
 8005024:	f040 813f 	bne.w	80052a6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	212c      	movs	r1, #44	; 0x2c
 800502e:	fb01 f303 	mul.w	r3, r1, r3
 8005032:	4413      	add	r3, r2
 8005034:	3361      	adds	r3, #97	; 0x61
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d17d      	bne.n	8005138 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	212c      	movs	r1, #44	; 0x2c
 8005042:	fb01 f303 	mul.w	r3, r1, r3
 8005046:	4413      	add	r3, r2
 8005048:	3360      	adds	r3, #96	; 0x60
 800504a:	2201      	movs	r2, #1
 800504c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	212c      	movs	r1, #44	; 0x2c
 8005054:	fb01 f303 	mul.w	r3, r1, r3
 8005058:	4413      	add	r3, r2
 800505a:	333f      	adds	r3, #63	; 0x3f
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b02      	cmp	r3, #2
 8005060:	d00a      	beq.n	8005078 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	212c      	movs	r1, #44	; 0x2c
 8005068:	fb01 f303 	mul.w	r3, r1, r3
 800506c:	4413      	add	r3, r2
 800506e:	333f      	adds	r3, #63	; 0x3f
 8005070:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005072:	2b03      	cmp	r3, #3
 8005074:	f040 8100 	bne.w	8005278 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d113      	bne.n	80050a8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	212c      	movs	r1, #44	; 0x2c
 8005086:	fb01 f303 	mul.w	r3, r1, r3
 800508a:	4413      	add	r3, r2
 800508c:	3355      	adds	r3, #85	; 0x55
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	f083 0301 	eor.w	r3, r3, #1
 8005094:	b2d8      	uxtb	r0, r3
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	212c      	movs	r1, #44	; 0x2c
 800509c:	fb01 f303 	mul.w	r3, r1, r3
 80050a0:	4413      	add	r3, r2
 80050a2:	3355      	adds	r3, #85	; 0x55
 80050a4:	4602      	mov	r2, r0
 80050a6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	f040 80e3 	bne.w	8005278 <HCD_HC_OUT_IRQHandler+0x69c>
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	212c      	movs	r1, #44	; 0x2c
 80050b8:	fb01 f303 	mul.w	r3, r1, r3
 80050bc:	4413      	add	r3, r2
 80050be:	334c      	adds	r3, #76	; 0x4c
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 80d8 	beq.w	8005278 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	212c      	movs	r1, #44	; 0x2c
 80050ce:	fb01 f303 	mul.w	r3, r1, r3
 80050d2:	4413      	add	r3, r2
 80050d4:	334c      	adds	r3, #76	; 0x4c
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6879      	ldr	r1, [r7, #4]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	202c      	movs	r0, #44	; 0x2c
 80050de:	fb00 f202 	mul.w	r2, r0, r2
 80050e2:	440a      	add	r2, r1
 80050e4:	3240      	adds	r2, #64	; 0x40
 80050e6:	8812      	ldrh	r2, [r2, #0]
 80050e8:	4413      	add	r3, r2
 80050ea:	3b01      	subs	r3, #1
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	202c      	movs	r0, #44	; 0x2c
 80050f2:	fb00 f202 	mul.w	r2, r0, r2
 80050f6:	440a      	add	r2, r1
 80050f8:	3240      	adds	r2, #64	; 0x40
 80050fa:	8812      	ldrh	r2, [r2, #0]
 80050fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005100:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 80b5 	beq.w	8005278 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	212c      	movs	r1, #44	; 0x2c
 8005114:	fb01 f303 	mul.w	r3, r1, r3
 8005118:	4413      	add	r3, r2
 800511a:	3355      	adds	r3, #85	; 0x55
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	f083 0301 	eor.w	r3, r3, #1
 8005122:	b2d8      	uxtb	r0, r3
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	212c      	movs	r1, #44	; 0x2c
 800512a:	fb01 f303 	mul.w	r3, r1, r3
 800512e:	4413      	add	r3, r2
 8005130:	3355      	adds	r3, #85	; 0x55
 8005132:	4602      	mov	r2, r0
 8005134:	701a      	strb	r2, [r3, #0]
 8005136:	e09f      	b.n	8005278 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	212c      	movs	r1, #44	; 0x2c
 800513e:	fb01 f303 	mul.w	r3, r1, r3
 8005142:	4413      	add	r3, r2
 8005144:	3361      	adds	r3, #97	; 0x61
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b03      	cmp	r3, #3
 800514a:	d109      	bne.n	8005160 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	212c      	movs	r1, #44	; 0x2c
 8005152:	fb01 f303 	mul.w	r3, r1, r3
 8005156:	4413      	add	r3, r2
 8005158:	3360      	adds	r3, #96	; 0x60
 800515a:	2202      	movs	r2, #2
 800515c:	701a      	strb	r2, [r3, #0]
 800515e:	e08b      	b.n	8005278 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	212c      	movs	r1, #44	; 0x2c
 8005166:	fb01 f303 	mul.w	r3, r1, r3
 800516a:	4413      	add	r3, r2
 800516c:	3361      	adds	r3, #97	; 0x61
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b04      	cmp	r3, #4
 8005172:	d109      	bne.n	8005188 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	212c      	movs	r1, #44	; 0x2c
 800517a:	fb01 f303 	mul.w	r3, r1, r3
 800517e:	4413      	add	r3, r2
 8005180:	3360      	adds	r3, #96	; 0x60
 8005182:	2202      	movs	r2, #2
 8005184:	701a      	strb	r2, [r3, #0]
 8005186:	e077      	b.n	8005278 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	212c      	movs	r1, #44	; 0x2c
 800518e:	fb01 f303 	mul.w	r3, r1, r3
 8005192:	4413      	add	r3, r2
 8005194:	3361      	adds	r3, #97	; 0x61
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b05      	cmp	r3, #5
 800519a:	d109      	bne.n	80051b0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	212c      	movs	r1, #44	; 0x2c
 80051a2:	fb01 f303 	mul.w	r3, r1, r3
 80051a6:	4413      	add	r3, r2
 80051a8:	3360      	adds	r3, #96	; 0x60
 80051aa:	2205      	movs	r2, #5
 80051ac:	701a      	strb	r2, [r3, #0]
 80051ae:	e063      	b.n	8005278 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	212c      	movs	r1, #44	; 0x2c
 80051b6:	fb01 f303 	mul.w	r3, r1, r3
 80051ba:	4413      	add	r3, r2
 80051bc:	3361      	adds	r3, #97	; 0x61
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b06      	cmp	r3, #6
 80051c2:	d009      	beq.n	80051d8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	212c      	movs	r1, #44	; 0x2c
 80051ca:	fb01 f303 	mul.w	r3, r1, r3
 80051ce:	4413      	add	r3, r2
 80051d0:	3361      	adds	r3, #97	; 0x61
 80051d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d14f      	bne.n	8005278 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	212c      	movs	r1, #44	; 0x2c
 80051de:	fb01 f303 	mul.w	r3, r1, r3
 80051e2:	4413      	add	r3, r2
 80051e4:	335c      	adds	r3, #92	; 0x5c
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	202c      	movs	r0, #44	; 0x2c
 80051f0:	fb00 f303 	mul.w	r3, r0, r3
 80051f4:	440b      	add	r3, r1
 80051f6:	335c      	adds	r3, #92	; 0x5c
 80051f8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	212c      	movs	r1, #44	; 0x2c
 8005200:	fb01 f303 	mul.w	r3, r1, r3
 8005204:	4413      	add	r3, r2
 8005206:	335c      	adds	r3, #92	; 0x5c
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d912      	bls.n	8005234 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	212c      	movs	r1, #44	; 0x2c
 8005214:	fb01 f303 	mul.w	r3, r1, r3
 8005218:	4413      	add	r3, r2
 800521a:	335c      	adds	r3, #92	; 0x5c
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	212c      	movs	r1, #44	; 0x2c
 8005226:	fb01 f303 	mul.w	r3, r1, r3
 800522a:	4413      	add	r3, r2
 800522c:	3360      	adds	r3, #96	; 0x60
 800522e:	2204      	movs	r2, #4
 8005230:	701a      	strb	r2, [r3, #0]
 8005232:	e021      	b.n	8005278 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	212c      	movs	r1, #44	; 0x2c
 800523a:	fb01 f303 	mul.w	r3, r1, r3
 800523e:	4413      	add	r3, r2
 8005240:	3360      	adds	r3, #96	; 0x60
 8005242:	2202      	movs	r2, #2
 8005244:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	4413      	add	r3, r2
 800524e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800525c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005264:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	4413      	add	r3, r2
 800526e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005272:	461a      	mov	r2, r3
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	4413      	add	r3, r2
 8005280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005284:	461a      	mov	r2, r3
 8005286:	2302      	movs	r3, #2
 8005288:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	b2d9      	uxtb	r1, r3
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	202c      	movs	r0, #44	; 0x2c
 8005294:	fb00 f303 	mul.w	r3, r0, r3
 8005298:	4413      	add	r3, r2
 800529a:	3360      	adds	r3, #96	; 0x60
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	461a      	mov	r2, r3
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f00a f8f5 	bl	800f490 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80052a6:	bf00      	nop
 80052a8:	3720      	adds	r7, #32
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b08a      	sub	sp, #40	; 0x28
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	0c5b      	lsrs	r3, r3, #17
 80052d4:	f003 030f 	and.w	r3, r3, #15
 80052d8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	091b      	lsrs	r3, r3, #4
 80052de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052e2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d004      	beq.n	80052f4 <HCD_RXQLVL_IRQHandler+0x46>
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b05      	cmp	r3, #5
 80052ee:	f000 80a9 	beq.w	8005444 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80052f2:	e0aa      	b.n	800544a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f000 80a6 	beq.w	8005448 <HCD_RXQLVL_IRQHandler+0x19a>
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	212c      	movs	r1, #44	; 0x2c
 8005302:	fb01 f303 	mul.w	r3, r1, r3
 8005306:	4413      	add	r3, r2
 8005308:	3344      	adds	r3, #68	; 0x44
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 809b 	beq.w	8005448 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	212c      	movs	r1, #44	; 0x2c
 8005318:	fb01 f303 	mul.w	r3, r1, r3
 800531c:	4413      	add	r3, r2
 800531e:	3350      	adds	r3, #80	; 0x50
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	441a      	add	r2, r3
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	202c      	movs	r0, #44	; 0x2c
 800532c:	fb00 f303 	mul.w	r3, r0, r3
 8005330:	440b      	add	r3, r1
 8005332:	334c      	adds	r3, #76	; 0x4c
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d87a      	bhi.n	8005430 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6818      	ldr	r0, [r3, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	212c      	movs	r1, #44	; 0x2c
 8005344:	fb01 f303 	mul.w	r3, r1, r3
 8005348:	4413      	add	r3, r2
 800534a:	3344      	adds	r3, #68	; 0x44
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	b292      	uxth	r2, r2
 8005352:	4619      	mov	r1, r3
 8005354:	f003 fc90 	bl	8008c78 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	212c      	movs	r1, #44	; 0x2c
 800535e:	fb01 f303 	mul.w	r3, r1, r3
 8005362:	4413      	add	r3, r2
 8005364:	3344      	adds	r3, #68	; 0x44
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	441a      	add	r2, r3
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	202c      	movs	r0, #44	; 0x2c
 8005372:	fb00 f303 	mul.w	r3, r0, r3
 8005376:	440b      	add	r3, r1
 8005378:	3344      	adds	r3, #68	; 0x44
 800537a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	212c      	movs	r1, #44	; 0x2c
 8005382:	fb01 f303 	mul.w	r3, r1, r3
 8005386:	4413      	add	r3, r2
 8005388:	3350      	adds	r3, #80	; 0x50
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	441a      	add	r2, r3
 8005390:	6879      	ldr	r1, [r7, #4]
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	202c      	movs	r0, #44	; 0x2c
 8005396:	fb00 f303 	mul.w	r3, r0, r3
 800539a:	440b      	add	r3, r1
 800539c:	3350      	adds	r3, #80	; 0x50
 800539e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	0cdb      	lsrs	r3, r3, #19
 80053b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053b4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	212c      	movs	r1, #44	; 0x2c
 80053bc:	fb01 f303 	mul.w	r3, r1, r3
 80053c0:	4413      	add	r3, r2
 80053c2:	3340      	adds	r3, #64	; 0x40
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	461a      	mov	r2, r3
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d13c      	bne.n	8005448 <HCD_RXQLVL_IRQHandler+0x19a>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d039      	beq.n	8005448 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053ea:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053f2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005400:	461a      	mov	r2, r3
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	212c      	movs	r1, #44	; 0x2c
 800540c:	fb01 f303 	mul.w	r3, r1, r3
 8005410:	4413      	add	r3, r2
 8005412:	3354      	adds	r3, #84	; 0x54
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	f083 0301 	eor.w	r3, r3, #1
 800541a:	b2d8      	uxtb	r0, r3
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	212c      	movs	r1, #44	; 0x2c
 8005422:	fb01 f303 	mul.w	r3, r1, r3
 8005426:	4413      	add	r3, r2
 8005428:	3354      	adds	r3, #84	; 0x54
 800542a:	4602      	mov	r2, r0
 800542c:	701a      	strb	r2, [r3, #0]
      break;
 800542e:	e00b      	b.n	8005448 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	212c      	movs	r1, #44	; 0x2c
 8005436:	fb01 f303 	mul.w	r3, r1, r3
 800543a:	4413      	add	r3, r2
 800543c:	3360      	adds	r3, #96	; 0x60
 800543e:	2204      	movs	r2, #4
 8005440:	701a      	strb	r2, [r3, #0]
      break;
 8005442:	e001      	b.n	8005448 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005444:	bf00      	nop
 8005446:	e000      	b.n	800544a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005448:	bf00      	nop
  }
}
 800544a:	bf00      	nop
 800544c:	3728      	adds	r7, #40	; 0x28
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b086      	sub	sp, #24
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800547e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b02      	cmp	r3, #2
 8005488:	d10b      	bne.n	80054a2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b01      	cmp	r3, #1
 8005492:	d102      	bne.n	800549a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f009 ffdf 	bl	800f458 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f043 0302 	orr.w	r3, r3, #2
 80054a0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f003 0308 	and.w	r3, r3, #8
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	d132      	bne.n	8005512 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f043 0308 	orr.w	r3, r3, #8
 80054b2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d126      	bne.n	800550c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d113      	bne.n	80054ee <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80054cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054d0:	d106      	bne.n	80054e0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2102      	movs	r1, #2
 80054d8:	4618      	mov	r0, r3
 80054da:	f003 fd3b 	bl	8008f54 <USB_InitFSLSPClkSel>
 80054de:	e011      	b.n	8005504 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2101      	movs	r1, #1
 80054e6:	4618      	mov	r0, r3
 80054e8:	f003 fd34 	bl	8008f54 <USB_InitFSLSPClkSel>
 80054ec:	e00a      	b.n	8005504 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d106      	bne.n	8005504 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054fc:	461a      	mov	r2, r3
 80054fe:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005502:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f009 ffd1 	bl	800f4ac <HAL_HCD_PortEnabled_Callback>
 800550a:	e002      	b.n	8005512 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f009 ffdb 	bl	800f4c8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f003 0320 	and.w	r3, r3, #32
 8005518:	2b20      	cmp	r3, #32
 800551a:	d103      	bne.n	8005524 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	f043 0320 	orr.w	r3, r3, #32
 8005522:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800552a:	461a      	mov	r2, r3
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	6013      	str	r3, [r2, #0]
}
 8005530:	bf00      	nop
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e12b      	b.n	80057a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7fc fbd2 	bl	8001d08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2224      	movs	r2, #36	; 0x24
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0201 	bic.w	r2, r2, #1
 800557a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800558a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800559a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800559c:	f003 f854 	bl	8008648 <HAL_RCC_GetPCLK1Freq>
 80055a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	4a81      	ldr	r2, [pc, #516]	; (80057ac <HAL_I2C_Init+0x274>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d807      	bhi.n	80055bc <HAL_I2C_Init+0x84>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4a80      	ldr	r2, [pc, #512]	; (80057b0 <HAL_I2C_Init+0x278>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	bf94      	ite	ls
 80055b4:	2301      	movls	r3, #1
 80055b6:	2300      	movhi	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	e006      	b.n	80055ca <HAL_I2C_Init+0x92>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4a7d      	ldr	r2, [pc, #500]	; (80057b4 <HAL_I2C_Init+0x27c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	bf94      	ite	ls
 80055c4:	2301      	movls	r3, #1
 80055c6:	2300      	movhi	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e0e7      	b.n	80057a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4a78      	ldr	r2, [pc, #480]	; (80057b8 <HAL_I2C_Init+0x280>)
 80055d6:	fba2 2303 	umull	r2, r3, r2, r3
 80055da:	0c9b      	lsrs	r3, r3, #18
 80055dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	4a6a      	ldr	r2, [pc, #424]	; (80057ac <HAL_I2C_Init+0x274>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d802      	bhi.n	800560c <HAL_I2C_Init+0xd4>
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	3301      	adds	r3, #1
 800560a:	e009      	b.n	8005620 <HAL_I2C_Init+0xe8>
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005612:	fb02 f303 	mul.w	r3, r2, r3
 8005616:	4a69      	ldr	r2, [pc, #420]	; (80057bc <HAL_I2C_Init+0x284>)
 8005618:	fba2 2303 	umull	r2, r3, r2, r3
 800561c:	099b      	lsrs	r3, r3, #6
 800561e:	3301      	adds	r3, #1
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6812      	ldr	r2, [r2, #0]
 8005624:	430b      	orrs	r3, r1
 8005626:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005632:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	495c      	ldr	r1, [pc, #368]	; (80057ac <HAL_I2C_Init+0x274>)
 800563c:	428b      	cmp	r3, r1
 800563e:	d819      	bhi.n	8005674 <HAL_I2C_Init+0x13c>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	1e59      	subs	r1, r3, #1
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	fbb1 f3f3 	udiv	r3, r1, r3
 800564e:	1c59      	adds	r1, r3, #1
 8005650:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005654:	400b      	ands	r3, r1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00a      	beq.n	8005670 <HAL_I2C_Init+0x138>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	1e59      	subs	r1, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	fbb1 f3f3 	udiv	r3, r1, r3
 8005668:	3301      	adds	r3, #1
 800566a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800566e:	e051      	b.n	8005714 <HAL_I2C_Init+0x1dc>
 8005670:	2304      	movs	r3, #4
 8005672:	e04f      	b.n	8005714 <HAL_I2C_Init+0x1dc>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d111      	bne.n	80056a0 <HAL_I2C_Init+0x168>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	1e58      	subs	r0, r3, #1
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6859      	ldr	r1, [r3, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	440b      	add	r3, r1
 800568a:	fbb0 f3f3 	udiv	r3, r0, r3
 800568e:	3301      	adds	r3, #1
 8005690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005694:	2b00      	cmp	r3, #0
 8005696:	bf0c      	ite	eq
 8005698:	2301      	moveq	r3, #1
 800569a:	2300      	movne	r3, #0
 800569c:	b2db      	uxtb	r3, r3
 800569e:	e012      	b.n	80056c6 <HAL_I2C_Init+0x18e>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	1e58      	subs	r0, r3, #1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6859      	ldr	r1, [r3, #4]
 80056a8:	460b      	mov	r3, r1
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	0099      	lsls	r1, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80056b6:	3301      	adds	r3, #1
 80056b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056bc:	2b00      	cmp	r3, #0
 80056be:	bf0c      	ite	eq
 80056c0:	2301      	moveq	r3, #1
 80056c2:	2300      	movne	r3, #0
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <HAL_I2C_Init+0x196>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e022      	b.n	8005714 <HAL_I2C_Init+0x1dc>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10e      	bne.n	80056f4 <HAL_I2C_Init+0x1bc>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	1e58      	subs	r0, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6859      	ldr	r1, [r3, #4]
 80056de:	460b      	mov	r3, r1
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	440b      	add	r3, r1
 80056e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80056e8:	3301      	adds	r3, #1
 80056ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056f2:	e00f      	b.n	8005714 <HAL_I2C_Init+0x1dc>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	1e58      	subs	r0, r3, #1
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6859      	ldr	r1, [r3, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	440b      	add	r3, r1
 8005702:	0099      	lsls	r1, r3, #2
 8005704:	440b      	add	r3, r1
 8005706:	fbb0 f3f3 	udiv	r3, r0, r3
 800570a:	3301      	adds	r3, #1
 800570c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	6809      	ldr	r1, [r1, #0]
 8005718:	4313      	orrs	r3, r2
 800571a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	69da      	ldr	r2, [r3, #28]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	431a      	orrs	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005742:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6911      	ldr	r1, [r2, #16]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	68d2      	ldr	r2, [r2, #12]
 800574e:	4311      	orrs	r1, r2
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6812      	ldr	r2, [r2, #0]
 8005754:	430b      	orrs	r3, r1
 8005756:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	695a      	ldr	r2, [r3, #20]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0201 	orr.w	r2, r2, #1
 8005782:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2220      	movs	r2, #32
 800578e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	000186a0 	.word	0x000186a0
 80057b0:	001e847f 	.word	0x001e847f
 80057b4:	003d08ff 	.word	0x003d08ff
 80057b8:	431bde83 	.word	0x431bde83
 80057bc:	10624dd3 	.word	0x10624dd3

080057c0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e021      	b.n	8005816 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2224      	movs	r2, #36	; 0x24
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0201 	bic.w	r2, r2, #1
 80057e8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7fc fad4 	bl	8001d98 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
	...

08005820 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af02      	add	r7, sp, #8
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	607a      	str	r2, [r7, #4]
 800582a:	461a      	mov	r2, r3
 800582c:	460b      	mov	r3, r1
 800582e:	817b      	strh	r3, [r7, #10]
 8005830:	4613      	mov	r3, r2
 8005832:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005834:	f7fd faae 	bl	8002d94 <HAL_GetTick>
 8005838:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b20      	cmp	r3, #32
 8005844:	f040 80e0 	bne.w	8005a08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	2319      	movs	r3, #25
 800584e:	2201      	movs	r2, #1
 8005850:	4970      	ldr	r1, [pc, #448]	; (8005a14 <HAL_I2C_Master_Transmit+0x1f4>)
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f001 f904 	bl	8006a60 <I2C_WaitOnFlagUntilTimeout>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800585e:	2302      	movs	r3, #2
 8005860:	e0d3      	b.n	8005a0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005868:	2b01      	cmp	r3, #1
 800586a:	d101      	bne.n	8005870 <HAL_I2C_Master_Transmit+0x50>
 800586c:	2302      	movs	r3, #2
 800586e:	e0cc      	b.n	8005a0a <HAL_I2C_Master_Transmit+0x1ea>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b01      	cmp	r3, #1
 8005884:	d007      	beq.n	8005896 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0201 	orr.w	r2, r2, #1
 8005894:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2221      	movs	r2, #33	; 0x21
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2210      	movs	r2, #16
 80058b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	893a      	ldrh	r2, [r7, #8]
 80058c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4a50      	ldr	r2, [pc, #320]	; (8005a18 <HAL_I2C_Master_Transmit+0x1f8>)
 80058d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80058d8:	8979      	ldrh	r1, [r7, #10]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	6a3a      	ldr	r2, [r7, #32]
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 fdf0 	bl	80064c4 <I2C_MasterRequestWrite>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e08d      	b.n	8005a0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ee:	2300      	movs	r3, #0
 80058f0:	613b      	str	r3, [r7, #16]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	613b      	str	r3, [r7, #16]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	613b      	str	r3, [r7, #16]
 8005902:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005904:	e066      	b.n	80059d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	6a39      	ldr	r1, [r7, #32]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f001 f97e 	bl	8006c0c <I2C_WaitOnTXEFlagUntilTimeout>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00d      	beq.n	8005932 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	2b04      	cmp	r3, #4
 800591c:	d107      	bne.n	800592e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800592c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e06b      	b.n	8005a0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	781a      	ldrb	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594c:	b29b      	uxth	r3, r3
 800594e:	3b01      	subs	r3, #1
 8005950:	b29a      	uxth	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800595a:	3b01      	subs	r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b04      	cmp	r3, #4
 800596e:	d11b      	bne.n	80059a8 <HAL_I2C_Master_Transmit+0x188>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005974:	2b00      	cmp	r3, #0
 8005976:	d017      	beq.n	80059a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	781a      	ldrb	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	1c5a      	adds	r2, r3, #1
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005992:	b29b      	uxth	r3, r3
 8005994:	3b01      	subs	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a0:	3b01      	subs	r3, #1
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	6a39      	ldr	r1, [r7, #32]
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f001 f96e 	bl	8006c8e <I2C_WaitOnBTFFlagUntilTimeout>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00d      	beq.n	80059d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d107      	bne.n	80059d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e01a      	b.n	8005a0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d194      	bne.n	8005906 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	e000      	b.n	8005a0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005a08:	2302      	movs	r3, #2
  }
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3718      	adds	r7, #24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	00100002 	.word	0x00100002
 8005a18:	ffff0000 	.word	0xffff0000

08005a1c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08c      	sub	sp, #48	; 0x30
 8005a20:	af02      	add	r7, sp, #8
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	607a      	str	r2, [r7, #4]
 8005a26:	461a      	mov	r2, r3
 8005a28:	460b      	mov	r3, r1
 8005a2a:	817b      	strh	r3, [r7, #10]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a30:	f7fd f9b0 	bl	8002d94 <HAL_GetTick>
 8005a34:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b20      	cmp	r3, #32
 8005a40:	f040 820b 	bne.w	8005e5a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	2319      	movs	r3, #25
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	497c      	ldr	r1, [pc, #496]	; (8005c40 <HAL_I2C_Master_Receive+0x224>)
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f001 f806 	bl	8006a60 <I2C_WaitOnFlagUntilTimeout>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	e1fe      	b.n	8005e5c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <HAL_I2C_Master_Receive+0x50>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e1f7      	b.n	8005e5c <HAL_I2C_Master_Receive+0x440>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d007      	beq.n	8005a92 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f042 0201 	orr.w	r2, r2, #1
 8005a90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aa0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2222      	movs	r2, #34	; 0x22
 8005aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2210      	movs	r2, #16
 8005aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	893a      	ldrh	r2, [r7, #8]
 8005ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4a5c      	ldr	r2, [pc, #368]	; (8005c44 <HAL_I2C_Master_Receive+0x228>)
 8005ad2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005ad4:	8979      	ldrh	r1, [r7, #10]
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 fd74 	bl	80065c8 <I2C_MasterRequestRead>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e1b8      	b.n	8005e5c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d113      	bne.n	8005b1a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005af2:	2300      	movs	r3, #0
 8005af4:	623b      	str	r3, [r7, #32]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	623b      	str	r3, [r7, #32]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	623b      	str	r3, [r7, #32]
 8005b06:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	e18c      	b.n	8005e34 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d11b      	bne.n	8005b5a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b32:	2300      	movs	r3, #0
 8005b34:	61fb      	str	r3, [r7, #28]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	61fb      	str	r3, [r7, #28]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	61fb      	str	r3, [r7, #28]
 8005b46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	e16c      	b.n	8005e34 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d11b      	bne.n	8005b9a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b70:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b82:	2300      	movs	r3, #0
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	61bb      	str	r3, [r7, #24]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	61bb      	str	r3, [r7, #24]
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	e14c      	b.n	8005e34 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ba8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005baa:	2300      	movs	r3, #0
 8005bac:	617b      	str	r3, [r7, #20]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	617b      	str	r3, [r7, #20]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	617b      	str	r3, [r7, #20]
 8005bbe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005bc0:	e138      	b.n	8005e34 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	f200 80f1 	bhi.w	8005dae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d123      	bne.n	8005c1c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f001 f899 	bl	8006d10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e139      	b.n	8005e5c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691a      	ldr	r2, [r3, #16]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	3b01      	subs	r3, #1
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c1a:	e10b      	b.n	8005e34 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d14e      	bne.n	8005cc2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	4906      	ldr	r1, [pc, #24]	; (8005c48 <HAL_I2C_Master_Receive+0x22c>)
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 ff16 	bl	8006a60 <I2C_WaitOnFlagUntilTimeout>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d008      	beq.n	8005c4c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e10e      	b.n	8005e5c <HAL_I2C_Master_Receive+0x440>
 8005c3e:	bf00      	nop
 8005c40:	00100002 	.word	0x00100002
 8005c44:	ffff0000 	.word	0xffff0000
 8005c48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	691a      	ldr	r2, [r3, #16]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	b2d2      	uxtb	r2, r2
 8005c68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	b2d2      	uxtb	r2, r2
 8005c9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005caa:	3b01      	subs	r3, #1
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005cc0:	e0b8      	b.n	8005e34 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc8:	2200      	movs	r2, #0
 8005cca:	4966      	ldr	r1, [pc, #408]	; (8005e64 <HAL_I2C_Master_Receive+0x448>)
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 fec7 	bl	8006a60 <I2C_WaitOnFlagUntilTimeout>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e0bf      	b.n	8005e5c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	691a      	ldr	r2, [r3, #16]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	b2d2      	uxtb	r2, r2
 8005cf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfe:	1c5a      	adds	r2, r3, #1
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	3b01      	subs	r3, #1
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d24:	2200      	movs	r2, #0
 8005d26:	494f      	ldr	r1, [pc, #316]	; (8005e64 <HAL_I2C_Master_Receive+0x448>)
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 fe99 	bl	8006a60 <I2C_WaitOnFlagUntilTimeout>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e091      	b.n	8005e5c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691a      	ldr	r2, [r3, #16]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d64:	3b01      	subs	r3, #1
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	3b01      	subs	r3, #1
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	691a      	ldr	r2, [r3, #16]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d96:	3b01      	subs	r3, #1
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dac:	e042      	b.n	8005e34 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 ffac 	bl	8006d10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e04c      	b.n	8005e5c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	691a      	ldr	r2, [r3, #16]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	b2d2      	uxtb	r2, r2
 8005dce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	1c5a      	adds	r2, r3, #1
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dde:	3b01      	subs	r3, #1
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	3b01      	subs	r3, #1
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d118      	bne.n	8005e34 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	691a      	ldr	r2, [r3, #16]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	b2d2      	uxtb	r2, r2
 8005e0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f47f aec2 	bne.w	8005bc2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	e000      	b.n	8005e5c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005e5a:	2302      	movs	r3, #2
  }
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3728      	adds	r7, #40	; 0x28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	00010004 	.word	0x00010004

08005e68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b088      	sub	sp, #32
 8005e6c:	af02      	add	r7, sp, #8
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	4608      	mov	r0, r1
 8005e72:	4611      	mov	r1, r2
 8005e74:	461a      	mov	r2, r3
 8005e76:	4603      	mov	r3, r0
 8005e78:	817b      	strh	r3, [r7, #10]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	813b      	strh	r3, [r7, #8]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e82:	f7fc ff87 	bl	8002d94 <HAL_GetTick>
 8005e86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b20      	cmp	r3, #32
 8005e92:	f040 80d9 	bne.w	8006048 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	2319      	movs	r3, #25
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	496d      	ldr	r1, [pc, #436]	; (8006054 <HAL_I2C_Mem_Write+0x1ec>)
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 fddd 	bl	8006a60 <I2C_WaitOnFlagUntilTimeout>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005eac:	2302      	movs	r3, #2
 8005eae:	e0cc      	b.n	800604a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d101      	bne.n	8005ebe <HAL_I2C_Mem_Write+0x56>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	e0c5      	b.n	800604a <HAL_I2C_Mem_Write+0x1e2>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d007      	beq.n	8005ee4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0201 	orr.w	r2, r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ef2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2221      	movs	r2, #33	; 0x21
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2240      	movs	r2, #64	; 0x40
 8005f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a3a      	ldr	r2, [r7, #32]
 8005f0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4a4d      	ldr	r2, [pc, #308]	; (8006058 <HAL_I2C_Mem_Write+0x1f0>)
 8005f24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f26:	88f8      	ldrh	r0, [r7, #6]
 8005f28:	893a      	ldrh	r2, [r7, #8]
 8005f2a:	8979      	ldrh	r1, [r7, #10]
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	9301      	str	r3, [sp, #4]
 8005f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	4603      	mov	r3, r0
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 fc14 	bl	8006764 <I2C_RequestMemoryWrite>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d052      	beq.n	8005fe8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e081      	b.n	800604a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 fe5e 	bl	8006c0c <I2C_WaitOnTXEFlagUntilTimeout>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00d      	beq.n	8005f72 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	d107      	bne.n	8005f6e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e06b      	b.n	800604a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	781a      	ldrb	r2, [r3, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	f003 0304 	and.w	r3, r3, #4
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	d11b      	bne.n	8005fe8 <HAL_I2C_Mem_Write+0x180>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d017      	beq.n	8005fe8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	781a      	ldrb	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1aa      	bne.n	8005f46 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fe4a 	bl	8006c8e <I2C_WaitOnBTFFlagUntilTimeout>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00d      	beq.n	800601c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006004:	2b04      	cmp	r3, #4
 8006006:	d107      	bne.n	8006018 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006016:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e016      	b.n	800604a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800602a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2220      	movs	r2, #32
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	e000      	b.n	800604a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006048:	2302      	movs	r3, #2
  }
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	00100002 	.word	0x00100002
 8006058:	ffff0000 	.word	0xffff0000

0800605c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08c      	sub	sp, #48	; 0x30
 8006060:	af02      	add	r7, sp, #8
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	4608      	mov	r0, r1
 8006066:	4611      	mov	r1, r2
 8006068:	461a      	mov	r2, r3
 800606a:	4603      	mov	r3, r0
 800606c:	817b      	strh	r3, [r7, #10]
 800606e:	460b      	mov	r3, r1
 8006070:	813b      	strh	r3, [r7, #8]
 8006072:	4613      	mov	r3, r2
 8006074:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006076:	f7fc fe8d 	bl	8002d94 <HAL_GetTick>
 800607a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b20      	cmp	r3, #32
 8006086:	f040 8208 	bne.w	800649a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	2319      	movs	r3, #25
 8006090:	2201      	movs	r2, #1
 8006092:	497b      	ldr	r1, [pc, #492]	; (8006280 <HAL_I2C_Mem_Read+0x224>)
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 fce3 	bl	8006a60 <I2C_WaitOnFlagUntilTimeout>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80060a0:	2302      	movs	r3, #2
 80060a2:	e1fb      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d101      	bne.n	80060b2 <HAL_I2C_Mem_Read+0x56>
 80060ae:	2302      	movs	r3, #2
 80060b0:	e1f4      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d007      	beq.n	80060d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0201 	orr.w	r2, r2, #1
 80060d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2222      	movs	r2, #34	; 0x22
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2240      	movs	r2, #64	; 0x40
 80060f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006102:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006108:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610e:	b29a      	uxth	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4a5b      	ldr	r2, [pc, #364]	; (8006284 <HAL_I2C_Mem_Read+0x228>)
 8006118:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800611a:	88f8      	ldrh	r0, [r7, #6]
 800611c:	893a      	ldrh	r2, [r7, #8]
 800611e:	8979      	ldrh	r1, [r7, #10]
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	9301      	str	r3, [sp, #4]
 8006124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	4603      	mov	r3, r0
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 fbb0 	bl	8006890 <I2C_RequestMemoryRead>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e1b0      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800613e:	2b00      	cmp	r3, #0
 8006140:	d113      	bne.n	800616a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006142:	2300      	movs	r3, #0
 8006144:	623b      	str	r3, [r7, #32]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	623b      	str	r3, [r7, #32]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	623b      	str	r3, [r7, #32]
 8006156:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	e184      	b.n	8006474 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800616e:	2b01      	cmp	r3, #1
 8006170:	d11b      	bne.n	80061aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006180:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006182:	2300      	movs	r3, #0
 8006184:	61fb      	str	r3, [r7, #28]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	61fb      	str	r3, [r7, #28]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	61fb      	str	r3, [r7, #28]
 8006196:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	e164      	b.n	8006474 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d11b      	bne.n	80061ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061d2:	2300      	movs	r3, #0
 80061d4:	61bb      	str	r3, [r7, #24]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	61bb      	str	r3, [r7, #24]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	e144      	b.n	8006474 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ea:	2300      	movs	r3, #0
 80061ec:	617b      	str	r3, [r7, #20]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	617b      	str	r3, [r7, #20]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	617b      	str	r3, [r7, #20]
 80061fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006200:	e138      	b.n	8006474 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006206:	2b03      	cmp	r3, #3
 8006208:	f200 80f1 	bhi.w	80063ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006210:	2b01      	cmp	r3, #1
 8006212:	d123      	bne.n	800625c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006216:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 fd79 	bl	8006d10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e139      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691a      	ldr	r2, [r3, #16]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	b2d2      	uxtb	r2, r2
 8006234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006244:	3b01      	subs	r3, #1
 8006246:	b29a      	uxth	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	855a      	strh	r2, [r3, #42]	; 0x2a
 800625a:	e10b      	b.n	8006474 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006260:	2b02      	cmp	r3, #2
 8006262:	d14e      	bne.n	8006302 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626a:	2200      	movs	r2, #0
 800626c:	4906      	ldr	r1, [pc, #24]	; (8006288 <HAL_I2C_Mem_Read+0x22c>)
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 fbf6 	bl	8006a60 <I2C_WaitOnFlagUntilTimeout>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d008      	beq.n	800628c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e10e      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
 800627e:	bf00      	nop
 8006280:	00100002 	.word	0x00100002
 8006284:	ffff0000 	.word	0xffff0000
 8006288:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800629a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	691a      	ldr	r2, [r3, #16]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	691a      	ldr	r2, [r3, #16]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	b2d2      	uxtb	r2, r2
 80062da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ea:	3b01      	subs	r3, #1
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	3b01      	subs	r3, #1
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006300:	e0b8      	b.n	8006474 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006308:	2200      	movs	r2, #0
 800630a:	4966      	ldr	r1, [pc, #408]	; (80064a4 <HAL_I2C_Mem_Read+0x448>)
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 fba7 	bl	8006a60 <I2C_WaitOnFlagUntilTimeout>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e0bf      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800632a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691a      	ldr	r2, [r3, #16]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	b2d2      	uxtb	r2, r2
 8006338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006348:	3b01      	subs	r3, #1
 800634a:	b29a      	uxth	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006354:	b29b      	uxth	r3, r3
 8006356:	3b01      	subs	r3, #1
 8006358:	b29a      	uxth	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006364:	2200      	movs	r2, #0
 8006366:	494f      	ldr	r1, [pc, #316]	; (80064a4 <HAL_I2C_Mem_Read+0x448>)
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 fb79 	bl	8006a60 <I2C_WaitOnFlagUntilTimeout>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e091      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006386:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691a      	ldr	r2, [r3, #16]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3b01      	subs	r3, #1
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	691a      	ldr	r2, [r3, #16]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d6:	3b01      	subs	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	3b01      	subs	r3, #1
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063ec:	e042      	b.n	8006474 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f000 fc8c 	bl	8006d10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e04c      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	691a      	ldr	r2, [r3, #16]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800641e:	3b01      	subs	r3, #1
 8006420:	b29a      	uxth	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642a:	b29b      	uxth	r3, r3
 800642c:	3b01      	subs	r3, #1
 800642e:	b29a      	uxth	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	f003 0304 	and.w	r3, r3, #4
 800643e:	2b04      	cmp	r3, #4
 8006440:	d118      	bne.n	8006474 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800645e:	3b01      	subs	r3, #1
 8006460:	b29a      	uxth	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646a:	b29b      	uxth	r3, r3
 800646c:	3b01      	subs	r3, #1
 800646e:	b29a      	uxth	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006478:	2b00      	cmp	r3, #0
 800647a:	f47f aec2 	bne.w	8006202 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2220      	movs	r2, #32
 8006482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	e000      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800649a:	2302      	movs	r3, #2
  }
}
 800649c:	4618      	mov	r0, r3
 800649e:	3728      	adds	r7, #40	; 0x28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	00010004 	.word	0x00010004

080064a8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b6:	b2db      	uxtb	r3, r3
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af02      	add	r7, sp, #8
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	607a      	str	r2, [r7, #4]
 80064ce:	603b      	str	r3, [r7, #0]
 80064d0:	460b      	mov	r3, r1
 80064d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2b08      	cmp	r3, #8
 80064de:	d006      	beq.n	80064ee <I2C_MasterRequestWrite+0x2a>
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d003      	beq.n	80064ee <I2C_MasterRequestWrite+0x2a>
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064ec:	d108      	bne.n	8006500 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	e00b      	b.n	8006518 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006504:	2b12      	cmp	r3, #18
 8006506:	d107      	bne.n	8006518 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006516:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 fa9b 	bl	8006a60 <I2C_WaitOnFlagUntilTimeout>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00d      	beq.n	800654c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800653a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800653e:	d103      	bne.n	8006548 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006546:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e035      	b.n	80065b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006554:	d108      	bne.n	8006568 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006556:	897b      	ldrh	r3, [r7, #10]
 8006558:	b2db      	uxtb	r3, r3
 800655a:	461a      	mov	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006564:	611a      	str	r2, [r3, #16]
 8006566:	e01b      	b.n	80065a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006568:	897b      	ldrh	r3, [r7, #10]
 800656a:	11db      	asrs	r3, r3, #7
 800656c:	b2db      	uxtb	r3, r3
 800656e:	f003 0306 	and.w	r3, r3, #6
 8006572:	b2db      	uxtb	r3, r3
 8006574:	f063 030f 	orn	r3, r3, #15
 8006578:	b2da      	uxtb	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	490e      	ldr	r1, [pc, #56]	; (80065c0 <I2C_MasterRequestWrite+0xfc>)
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f000 fac1 	bl	8006b0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e010      	b.n	80065b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006596:	897b      	ldrh	r3, [r7, #10]
 8006598:	b2da      	uxtb	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	4907      	ldr	r1, [pc, #28]	; (80065c4 <I2C_MasterRequestWrite+0x100>)
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f000 fab1 	bl	8006b0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e000      	b.n	80065b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3718      	adds	r7, #24
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	00010008 	.word	0x00010008
 80065c4:	00010002 	.word	0x00010002

080065c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b088      	sub	sp, #32
 80065cc:	af02      	add	r7, sp, #8
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	607a      	str	r2, [r7, #4]
 80065d2:	603b      	str	r3, [r7, #0]
 80065d4:	460b      	mov	r3, r1
 80065d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d006      	beq.n	8006602 <I2C_MasterRequestRead+0x3a>
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d003      	beq.n	8006602 <I2C_MasterRequestRead+0x3a>
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006600:	d108      	bne.n	8006614 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006610:	601a      	str	r2, [r3, #0]
 8006612:	e00b      	b.n	800662c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006618:	2b11      	cmp	r3, #17
 800661a:	d107      	bne.n	800662c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800662a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f000 fa11 	bl	8006a60 <I2C_WaitOnFlagUntilTimeout>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00d      	beq.n	8006660 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006652:	d103      	bne.n	800665c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800665a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e079      	b.n	8006754 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006668:	d108      	bne.n	800667c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800666a:	897b      	ldrh	r3, [r7, #10]
 800666c:	b2db      	uxtb	r3, r3
 800666e:	f043 0301 	orr.w	r3, r3, #1
 8006672:	b2da      	uxtb	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	611a      	str	r2, [r3, #16]
 800667a:	e05f      	b.n	800673c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800667c:	897b      	ldrh	r3, [r7, #10]
 800667e:	11db      	asrs	r3, r3, #7
 8006680:	b2db      	uxtb	r3, r3
 8006682:	f003 0306 	and.w	r3, r3, #6
 8006686:	b2db      	uxtb	r3, r3
 8006688:	f063 030f 	orn	r3, r3, #15
 800668c:	b2da      	uxtb	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	4930      	ldr	r1, [pc, #192]	; (800675c <I2C_MasterRequestRead+0x194>)
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 fa37 	bl	8006b0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e054      	b.n	8006754 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80066aa:	897b      	ldrh	r3, [r7, #10]
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	4929      	ldr	r1, [pc, #164]	; (8006760 <I2C_MasterRequestRead+0x198>)
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 fa27 	bl	8006b0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e044      	b.n	8006754 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ca:	2300      	movs	r3, #0
 80066cc:	613b      	str	r3, [r7, #16]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	613b      	str	r3, [r7, #16]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	613b      	str	r3, [r7, #16]
 80066de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 f9af 	bl	8006a60 <I2C_WaitOnFlagUntilTimeout>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00d      	beq.n	8006724 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006716:	d103      	bne.n	8006720 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800671e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e017      	b.n	8006754 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006724:	897b      	ldrh	r3, [r7, #10]
 8006726:	11db      	asrs	r3, r3, #7
 8006728:	b2db      	uxtb	r3, r3
 800672a:	f003 0306 	and.w	r3, r3, #6
 800672e:	b2db      	uxtb	r3, r3
 8006730:	f063 030e 	orn	r3, r3, #14
 8006734:	b2da      	uxtb	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	4907      	ldr	r1, [pc, #28]	; (8006760 <I2C_MasterRequestRead+0x198>)
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 f9e3 	bl	8006b0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e000      	b.n	8006754 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3718      	adds	r7, #24
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	00010008 	.word	0x00010008
 8006760:	00010002 	.word	0x00010002

08006764 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af02      	add	r7, sp, #8
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	4608      	mov	r0, r1
 800676e:	4611      	mov	r1, r2
 8006770:	461a      	mov	r2, r3
 8006772:	4603      	mov	r3, r0
 8006774:	817b      	strh	r3, [r7, #10]
 8006776:	460b      	mov	r3, r1
 8006778:	813b      	strh	r3, [r7, #8]
 800677a:	4613      	mov	r3, r2
 800677c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800678c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	2200      	movs	r2, #0
 8006796:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 f960 	bl	8006a60 <I2C_WaitOnFlagUntilTimeout>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00d      	beq.n	80067c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b4:	d103      	bne.n	80067be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e05f      	b.n	8006882 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067c2:	897b      	ldrh	r3, [r7, #10]
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	461a      	mov	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	6a3a      	ldr	r2, [r7, #32]
 80067d6:	492d      	ldr	r1, [pc, #180]	; (800688c <I2C_RequestMemoryWrite+0x128>)
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 f998 	bl	8006b0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e04c      	b.n	8006882 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067e8:	2300      	movs	r3, #0
 80067ea:	617b      	str	r3, [r7, #20]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	617b      	str	r3, [r7, #20]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006800:	6a39      	ldr	r1, [r7, #32]
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f000 fa02 	bl	8006c0c <I2C_WaitOnTXEFlagUntilTimeout>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00d      	beq.n	800682a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006812:	2b04      	cmp	r3, #4
 8006814:	d107      	bne.n	8006826 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006824:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e02b      	b.n	8006882 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800682a:	88fb      	ldrh	r3, [r7, #6]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d105      	bne.n	800683c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006830:	893b      	ldrh	r3, [r7, #8]
 8006832:	b2da      	uxtb	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	611a      	str	r2, [r3, #16]
 800683a:	e021      	b.n	8006880 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800683c:	893b      	ldrh	r3, [r7, #8]
 800683e:	0a1b      	lsrs	r3, r3, #8
 8006840:	b29b      	uxth	r3, r3
 8006842:	b2da      	uxtb	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800684a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800684c:	6a39      	ldr	r1, [r7, #32]
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f000 f9dc 	bl	8006c0c <I2C_WaitOnTXEFlagUntilTimeout>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00d      	beq.n	8006876 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	2b04      	cmp	r3, #4
 8006860:	d107      	bne.n	8006872 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006870:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e005      	b.n	8006882 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006876:	893b      	ldrh	r3, [r7, #8]
 8006878:	b2da      	uxtb	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	00010002 	.word	0x00010002

08006890 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b088      	sub	sp, #32
 8006894:	af02      	add	r7, sp, #8
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	4608      	mov	r0, r1
 800689a:	4611      	mov	r1, r2
 800689c:	461a      	mov	r2, r3
 800689e:	4603      	mov	r3, r0
 80068a0:	817b      	strh	r3, [r7, #10]
 80068a2:	460b      	mov	r3, r1
 80068a4:	813b      	strh	r3, [r7, #8]
 80068a6:	4613      	mov	r3, r2
 80068a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 f8c2 	bl	8006a60 <I2C_WaitOnFlagUntilTimeout>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00d      	beq.n	80068fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068f0:	d103      	bne.n	80068fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e0aa      	b.n	8006a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068fe:	897b      	ldrh	r3, [r7, #10]
 8006900:	b2db      	uxtb	r3, r3
 8006902:	461a      	mov	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800690c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	6a3a      	ldr	r2, [r7, #32]
 8006912:	4952      	ldr	r1, [pc, #328]	; (8006a5c <I2C_RequestMemoryRead+0x1cc>)
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 f8fa 	bl	8006b0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d001      	beq.n	8006924 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e097      	b.n	8006a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006924:	2300      	movs	r3, #0
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	617b      	str	r3, [r7, #20]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	617b      	str	r3, [r7, #20]
 8006938:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800693a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800693c:	6a39      	ldr	r1, [r7, #32]
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 f964 	bl	8006c0c <I2C_WaitOnTXEFlagUntilTimeout>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00d      	beq.n	8006966 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	2b04      	cmp	r3, #4
 8006950:	d107      	bne.n	8006962 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006960:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e076      	b.n	8006a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006966:	88fb      	ldrh	r3, [r7, #6]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d105      	bne.n	8006978 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800696c:	893b      	ldrh	r3, [r7, #8]
 800696e:	b2da      	uxtb	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	611a      	str	r2, [r3, #16]
 8006976:	e021      	b.n	80069bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006978:	893b      	ldrh	r3, [r7, #8]
 800697a:	0a1b      	lsrs	r3, r3, #8
 800697c:	b29b      	uxth	r3, r3
 800697e:	b2da      	uxtb	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006988:	6a39      	ldr	r1, [r7, #32]
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f000 f93e 	bl	8006c0c <I2C_WaitOnTXEFlagUntilTimeout>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00d      	beq.n	80069b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	2b04      	cmp	r3, #4
 800699c:	d107      	bne.n	80069ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e050      	b.n	8006a54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069b2:	893b      	ldrh	r3, [r7, #8]
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069be:	6a39      	ldr	r1, [r7, #32]
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 f923 	bl	8006c0c <I2C_WaitOnTXEFlagUntilTimeout>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00d      	beq.n	80069e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d0:	2b04      	cmp	r3, #4
 80069d2:	d107      	bne.n	80069e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e035      	b.n	8006a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 f82b 	bl	8006a60 <I2C_WaitOnFlagUntilTimeout>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00d      	beq.n	8006a2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a1e:	d103      	bne.n	8006a28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e013      	b.n	8006a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a2c:	897b      	ldrh	r3, [r7, #10]
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	f043 0301 	orr.w	r3, r3, #1
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	6a3a      	ldr	r2, [r7, #32]
 8006a40:	4906      	ldr	r1, [pc, #24]	; (8006a5c <I2C_RequestMemoryRead+0x1cc>)
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 f863 	bl	8006b0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e000      	b.n	8006a54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3718      	adds	r7, #24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	00010002 	.word	0x00010002

08006a60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a70:	e025      	b.n	8006abe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a78:	d021      	beq.n	8006abe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a7a:	f7fc f98b 	bl	8002d94 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d302      	bcc.n	8006a90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d116      	bne.n	8006abe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	f043 0220 	orr.w	r2, r3, #32
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e023      	b.n	8006b06 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	0c1b      	lsrs	r3, r3, #16
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d10d      	bne.n	8006ae4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	43da      	mvns	r2, r3
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	bf0c      	ite	eq
 8006ada:	2301      	moveq	r3, #1
 8006adc:	2300      	movne	r3, #0
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	e00c      	b.n	8006afe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	43da      	mvns	r2, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	4013      	ands	r3, r2
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	bf0c      	ite	eq
 8006af6:	2301      	moveq	r3, #1
 8006af8:	2300      	movne	r3, #0
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	461a      	mov	r2, r3
 8006afe:	79fb      	ldrb	r3, [r7, #7]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d0b6      	beq.n	8006a72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b084      	sub	sp, #16
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	60f8      	str	r0, [r7, #12]
 8006b16:	60b9      	str	r1, [r7, #8]
 8006b18:	607a      	str	r2, [r7, #4]
 8006b1a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b1c:	e051      	b.n	8006bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	695b      	ldr	r3, [r3, #20]
 8006b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b2c:	d123      	bne.n	8006b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b3c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b46:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2220      	movs	r2, #32
 8006b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b62:	f043 0204 	orr.w	r2, r3, #4
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e046      	b.n	8006c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7c:	d021      	beq.n	8006bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b7e:	f7fc f909 	bl	8002d94 <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d302      	bcc.n	8006b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d116      	bne.n	8006bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	f043 0220 	orr.w	r2, r3, #32
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e020      	b.n	8006c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	0c1b      	lsrs	r3, r3, #16
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d10c      	bne.n	8006be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	43da      	mvns	r2, r3
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	bf14      	ite	ne
 8006bde:	2301      	movne	r3, #1
 8006be0:	2300      	moveq	r3, #0
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	e00b      	b.n	8006bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	43da      	mvns	r2, r3
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	bf14      	ite	ne
 8006bf8:	2301      	movne	r3, #1
 8006bfa:	2300      	moveq	r3, #0
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d18d      	bne.n	8006b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c18:	e02d      	b.n	8006c76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f000 f8ce 	bl	8006dbc <I2C_IsAcknowledgeFailed>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e02d      	b.n	8006c86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c30:	d021      	beq.n	8006c76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c32:	f7fc f8af 	bl	8002d94 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d302      	bcc.n	8006c48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d116      	bne.n	8006c76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2220      	movs	r2, #32
 8006c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c62:	f043 0220 	orr.w	r2, r3, #32
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e007      	b.n	8006c86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	695b      	ldr	r3, [r3, #20]
 8006c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c80:	2b80      	cmp	r3, #128	; 0x80
 8006c82:	d1ca      	bne.n	8006c1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b084      	sub	sp, #16
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	60f8      	str	r0, [r7, #12]
 8006c96:	60b9      	str	r1, [r7, #8]
 8006c98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c9a:	e02d      	b.n	8006cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 f88d 	bl	8006dbc <I2C_IsAcknowledgeFailed>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d001      	beq.n	8006cac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e02d      	b.n	8006d08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb2:	d021      	beq.n	8006cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cb4:	f7fc f86e 	bl	8002d94 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d302      	bcc.n	8006cca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d116      	bne.n	8006cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce4:	f043 0220 	orr.w	r2, r3, #32
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e007      	b.n	8006d08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	f003 0304 	and.w	r3, r3, #4
 8006d02:	2b04      	cmp	r3, #4
 8006d04:	d1ca      	bne.n	8006c9c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d1c:	e042      	b.n	8006da4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	f003 0310 	and.w	r3, r3, #16
 8006d28:	2b10      	cmp	r3, #16
 8006d2a:	d119      	bne.n	8006d60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f06f 0210 	mvn.w	r2, #16
 8006d34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2220      	movs	r2, #32
 8006d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e029      	b.n	8006db4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d60:	f7fc f818 	bl	8002d94 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d302      	bcc.n	8006d76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d116      	bne.n	8006da4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d90:	f043 0220 	orr.w	r2, r3, #32
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e007      	b.n	8006db4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dae:	2b40      	cmp	r3, #64	; 0x40
 8006db0:	d1b5      	bne.n	8006d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dd2:	d11b      	bne.n	8006e0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ddc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2220      	movs	r2, #32
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df8:	f043 0204 	orr.w	r2, r3, #4
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e000      	b.n	8006e0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
	...

08006e1c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b088      	sub	sp, #32
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e128      	b.n	8007080 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d109      	bne.n	8006e4e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a90      	ldr	r2, [pc, #576]	; (8007088 <HAL_I2S_Init+0x26c>)
 8006e46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f7fa ffc7 	bl	8001ddc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2202      	movs	r2, #2
 8006e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	6812      	ldr	r2, [r2, #0]
 8006e60:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006e64:	f023 030f 	bic.w	r3, r3, #15
 8006e68:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d060      	beq.n	8006f3c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d102      	bne.n	8006e88 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006e82:	2310      	movs	r3, #16
 8006e84:	617b      	str	r3, [r7, #20]
 8006e86:	e001      	b.n	8006e8c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006e88:	2320      	movs	r3, #32
 8006e8a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	2b20      	cmp	r3, #32
 8006e92:	d802      	bhi.n	8006e9a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	005b      	lsls	r3, r3, #1
 8006e98:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006e9a:	2001      	movs	r0, #1
 8006e9c:	f001 fd1a 	bl	80088d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006ea0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eaa:	d125      	bne.n	8006ef8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d010      	beq.n	8006ed6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	005b      	lsls	r3, r3, #1
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed0:	3305      	adds	r3, #5
 8006ed2:	613b      	str	r3, [r7, #16]
 8006ed4:	e01f      	b.n	8006f16 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	00db      	lsls	r3, r3, #3
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4413      	add	r3, r2
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	461a      	mov	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef2:	3305      	adds	r3, #5
 8006ef4:	613b      	str	r3, [r7, #16]
 8006ef6:	e00e      	b.n	8006f16 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f00:	4613      	mov	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	461a      	mov	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f12:	3305      	adds	r3, #5
 8006f14:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	4a5c      	ldr	r2, [pc, #368]	; (800708c <HAL_I2S_Init+0x270>)
 8006f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1e:	08db      	lsrs	r3, r3, #3
 8006f20:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	085b      	lsrs	r3, r3, #1
 8006f32:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	021b      	lsls	r3, r3, #8
 8006f38:	61bb      	str	r3, [r7, #24]
 8006f3a:	e003      	b.n	8006f44 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d902      	bls.n	8006f50 <HAL_I2S_Init+0x134>
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	2bff      	cmp	r3, #255	; 0xff
 8006f4e:	d907      	bls.n	8006f60 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f54:	f043 0210 	orr.w	r2, r3, #16
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e08f      	b.n	8007080 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	691a      	ldr	r2, [r3, #16]
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	ea42 0103 	orr.w	r1, r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	69fa      	ldr	r2, [r7, #28]
 8006f70:	430a      	orrs	r2, r1
 8006f72:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006f7e:	f023 030f 	bic.w	r3, r3, #15
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	6851      	ldr	r1, [r2, #4]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	6892      	ldr	r2, [r2, #8]
 8006f8a:	4311      	orrs	r1, r2
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	68d2      	ldr	r2, [r2, #12]
 8006f90:	4311      	orrs	r1, r2
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	6992      	ldr	r2, [r2, #24]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	431a      	orrs	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fa2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a1b      	ldr	r3, [r3, #32]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d161      	bne.n	8007070 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a38      	ldr	r2, [pc, #224]	; (8007090 <HAL_I2S_Init+0x274>)
 8006fb0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a37      	ldr	r2, [pc, #220]	; (8007094 <HAL_I2S_Init+0x278>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d101      	bne.n	8006fc0 <HAL_I2S_Init+0x1a4>
 8006fbc:	4b36      	ldr	r3, [pc, #216]	; (8007098 <HAL_I2S_Init+0x27c>)
 8006fbe:	e001      	b.n	8006fc4 <HAL_I2S_Init+0x1a8>
 8006fc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	6812      	ldr	r2, [r2, #0]
 8006fca:	4932      	ldr	r1, [pc, #200]	; (8007094 <HAL_I2S_Init+0x278>)
 8006fcc:	428a      	cmp	r2, r1
 8006fce:	d101      	bne.n	8006fd4 <HAL_I2S_Init+0x1b8>
 8006fd0:	4a31      	ldr	r2, [pc, #196]	; (8007098 <HAL_I2S_Init+0x27c>)
 8006fd2:	e001      	b.n	8006fd8 <HAL_I2S_Init+0x1bc>
 8006fd4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006fd8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006fdc:	f023 030f 	bic.w	r3, r3, #15
 8006fe0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a2b      	ldr	r2, [pc, #172]	; (8007094 <HAL_I2S_Init+0x278>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d101      	bne.n	8006ff0 <HAL_I2S_Init+0x1d4>
 8006fec:	4b2a      	ldr	r3, [pc, #168]	; (8007098 <HAL_I2S_Init+0x27c>)
 8006fee:	e001      	b.n	8006ff4 <HAL_I2S_Init+0x1d8>
 8006ff0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a25      	ldr	r2, [pc, #148]	; (8007094 <HAL_I2S_Init+0x278>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d101      	bne.n	8007006 <HAL_I2S_Init+0x1ea>
 8007002:	4b25      	ldr	r3, [pc, #148]	; (8007098 <HAL_I2S_Init+0x27c>)
 8007004:	e001      	b.n	800700a <HAL_I2S_Init+0x1ee>
 8007006:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800700a:	69db      	ldr	r3, [r3, #28]
 800700c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007016:	d003      	beq.n	8007020 <HAL_I2S_Init+0x204>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d103      	bne.n	8007028 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8007020:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007024:	613b      	str	r3, [r7, #16]
 8007026:	e001      	b.n	800702c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8007028:	2300      	movs	r3, #0
 800702a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007036:	4313      	orrs	r3, r2
 8007038:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007040:	4313      	orrs	r3, r2
 8007042:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800704a:	4313      	orrs	r3, r2
 800704c:	b29a      	uxth	r2, r3
 800704e:	897b      	ldrh	r3, [r7, #10]
 8007050:	4313      	orrs	r3, r2
 8007052:	b29b      	uxth	r3, r3
 8007054:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007058:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a0d      	ldr	r2, [pc, #52]	; (8007094 <HAL_I2S_Init+0x278>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d101      	bne.n	8007068 <HAL_I2S_Init+0x24c>
 8007064:	4b0c      	ldr	r3, [pc, #48]	; (8007098 <HAL_I2S_Init+0x27c>)
 8007066:	e001      	b.n	800706c <HAL_I2S_Init+0x250>
 8007068:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800706c:	897a      	ldrh	r2, [r7, #10]
 800706e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3720      	adds	r7, #32
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	0800772d 	.word	0x0800772d
 800708c:	cccccccd 	.word	0xcccccccd
 8007090:	080078b5 	.word	0x080078b5
 8007094:	40003800 	.word	0x40003800
 8007098:	40003400 	.word	0x40003400

0800709c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	4613      	mov	r3, r2
 80070a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <HAL_I2S_Transmit_DMA+0x1a>
 80070b0:	88fb      	ldrh	r3, [r7, #6]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e08e      	b.n	80071d8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d101      	bne.n	80070ca <HAL_I2S_Transmit_DMA+0x2e>
 80070c6:	2302      	movs	r3, #2
 80070c8:	e086      	b.n	80071d8 <HAL_I2S_Transmit_DMA+0x13c>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d005      	beq.n	80070ea <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80070e6:	2302      	movs	r3, #2
 80070e8:	e076      	b.n	80071d8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2203      	movs	r2, #3
 80070ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	69db      	ldr	r3, [r3, #28]
 8007104:	f003 0307 	and.w	r3, r3, #7
 8007108:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2b03      	cmp	r3, #3
 800710e:	d002      	beq.n	8007116 <HAL_I2S_Transmit_DMA+0x7a>
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2b05      	cmp	r3, #5
 8007114:	d10a      	bne.n	800712c <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8007116:	88fb      	ldrh	r3, [r7, #6]
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	b29a      	uxth	r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8007120:	88fb      	ldrh	r3, [r7, #6]
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	b29a      	uxth	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	855a      	strh	r2, [r3, #42]	; 0x2a
 800712a:	e005      	b.n	8007138 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	88fa      	ldrh	r2, [r7, #6]
 8007130:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	88fa      	ldrh	r2, [r7, #6]
 8007136:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713c:	4a28      	ldr	r2, [pc, #160]	; (80071e0 <HAL_I2S_Transmit_DMA+0x144>)
 800713e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007144:	4a27      	ldr	r2, [pc, #156]	; (80071e4 <HAL_I2S_Transmit_DMA+0x148>)
 8007146:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714c:	4a26      	ldr	r2, [pc, #152]	; (80071e8 <HAL_I2S_Transmit_DMA+0x14c>)
 800714e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007158:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007160:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007166:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007168:	f7fc f804 	bl	8003174 <HAL_DMA_Start_IT>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00f      	beq.n	8007192 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007176:	f043 0208 	orr.w	r2, r3, #8
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e022      	b.n	80071d8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	69db      	ldr	r3, [r3, #28]
 8007198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800719c:	2b00      	cmp	r3, #0
 800719e:	d107      	bne.n	80071b0 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	69da      	ldr	r2, [r3, #28]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071ae:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d107      	bne.n	80071ce <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f042 0202 	orr.w	r2, r2, #2
 80071cc:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	0800760b 	.word	0x0800760b
 80071e4:	080075c9 	.word	0x080075c9
 80071e8:	08007627 	.word	0x08007627

080071ec <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007200:	d004      	beq.n	800720c <HAL_I2S_DMAStop+0x20>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	f040 80d1 	bne.w	80073ae <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00f      	beq.n	8007234 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007218:	4618      	mov	r0, r3
 800721a:	f7fc f803 	bl	8003224 <HAL_DMA_Abort>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d007      	beq.n	8007234 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007228:	f043 0208 	orr.w	r2, r3, #8
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8007234:	2364      	movs	r3, #100	; 0x64
 8007236:	2201      	movs	r2, #1
 8007238:	2102      	movs	r1, #2
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fb00 	bl	8007840 <I2S_WaitFlagStateUntilTimeout>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00b      	beq.n	800725e <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800724a:	f043 0201 	orr.w	r2, r3, #1
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800725e:	2364      	movs	r3, #100	; 0x64
 8007260:	2200      	movs	r2, #0
 8007262:	2180      	movs	r1, #128	; 0x80
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 faeb 	bl	8007840 <I2S_WaitFlagStateUntilTimeout>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00b      	beq.n	8007288 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007274:	f043 0201 	orr.w	r2, r3, #1
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	69da      	ldr	r2, [r3, #28]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007296:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007298:	2300      	movs	r3, #0
 800729a:	617b      	str	r3, [r7, #20]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	617b      	str	r3, [r7, #20]
 80072a4:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f022 0202 	bic.w	r2, r2, #2
 80072b4:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b05      	cmp	r3, #5
 80072c0:	f040 8165 	bne.w	800758e <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00f      	beq.n	80072ec <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fb ffa7 	bl	8003224 <HAL_DMA_Abort>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d007      	beq.n	80072ec <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e0:	f043 0208 	orr.w	r2, r3, #8
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a8a      	ldr	r2, [pc, #552]	; (800751c <HAL_I2S_DMAStop+0x330>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d101      	bne.n	80072fa <HAL_I2S_DMAStop+0x10e>
 80072f6:	4b8a      	ldr	r3, [pc, #552]	; (8007520 <HAL_I2S_DMAStop+0x334>)
 80072f8:	e001      	b.n	80072fe <HAL_I2S_DMAStop+0x112>
 80072fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072fe:	69da      	ldr	r2, [r3, #28]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4985      	ldr	r1, [pc, #532]	; (800751c <HAL_I2S_DMAStop+0x330>)
 8007306:	428b      	cmp	r3, r1
 8007308:	d101      	bne.n	800730e <HAL_I2S_DMAStop+0x122>
 800730a:	4b85      	ldr	r3, [pc, #532]	; (8007520 <HAL_I2S_DMAStop+0x334>)
 800730c:	e001      	b.n	8007312 <HAL_I2S_DMAStop+0x126>
 800730e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007316:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8007318:	2300      	movs	r3, #0
 800731a:	613b      	str	r3, [r7, #16]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a7e      	ldr	r2, [pc, #504]	; (800751c <HAL_I2S_DMAStop+0x330>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d101      	bne.n	800732a <HAL_I2S_DMAStop+0x13e>
 8007326:	4b7e      	ldr	r3, [pc, #504]	; (8007520 <HAL_I2S_DMAStop+0x334>)
 8007328:	e001      	b.n	800732e <HAL_I2S_DMAStop+0x142>
 800732a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	613b      	str	r3, [r7, #16]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a79      	ldr	r2, [pc, #484]	; (800751c <HAL_I2S_DMAStop+0x330>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d101      	bne.n	8007340 <HAL_I2S_DMAStop+0x154>
 800733c:	4b78      	ldr	r3, [pc, #480]	; (8007520 <HAL_I2S_DMAStop+0x334>)
 800733e:	e001      	b.n	8007344 <HAL_I2S_DMAStop+0x158>
 8007340:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	613b      	str	r3, [r7, #16]
 8007348:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a73      	ldr	r2, [pc, #460]	; (800751c <HAL_I2S_DMAStop+0x330>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d101      	bne.n	8007358 <HAL_I2S_DMAStop+0x16c>
 8007354:	4b72      	ldr	r3, [pc, #456]	; (8007520 <HAL_I2S_DMAStop+0x334>)
 8007356:	e001      	b.n	800735c <HAL_I2S_DMAStop+0x170>
 8007358:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800735c:	685a      	ldr	r2, [r3, #4]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	496e      	ldr	r1, [pc, #440]	; (800751c <HAL_I2S_DMAStop+0x330>)
 8007364:	428b      	cmp	r3, r1
 8007366:	d101      	bne.n	800736c <HAL_I2S_DMAStop+0x180>
 8007368:	4b6d      	ldr	r3, [pc, #436]	; (8007520 <HAL_I2S_DMAStop+0x334>)
 800736a:	e001      	b.n	8007370 <HAL_I2S_DMAStop+0x184>
 800736c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007370:	f022 0201 	bic.w	r2, r2, #1
 8007374:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10c      	bne.n	8007398 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007382:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8007396:	e0fa      	b.n	800758e <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a5f      	ldr	r2, [pc, #380]	; (800751c <HAL_I2S_DMAStop+0x330>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d101      	bne.n	80073a6 <HAL_I2S_DMAStop+0x1ba>
 80073a2:	4b5f      	ldr	r3, [pc, #380]	; (8007520 <HAL_I2S_DMAStop+0x334>)
 80073a4:	e001      	b.n	80073aa <HAL_I2S_DMAStop+0x1be>
 80073a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073aa:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80073ac:	e0ef      	b.n	800758e <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073b6:	d005      	beq.n	80073c4 <HAL_I2S_DMAStop+0x1d8>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073c0:	f040 80e5 	bne.w	800758e <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00f      	beq.n	80073ec <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7fb ff27 	bl	8003224 <HAL_DMA_Abort>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d007      	beq.n	80073ec <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e0:	f043 0208 	orr.w	r2, r3, #8
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b05      	cmp	r3, #5
 80073f6:	f040 809a 	bne.w	800752e <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00f      	beq.n	8007422 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007406:	4618      	mov	r0, r3
 8007408:	f7fb ff0c 	bl	8003224 <HAL_DMA_Abort>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d007      	beq.n	8007422 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007416:	f043 0208 	orr.w	r2, r3, #8
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8007422:	f7fb fcb7 	bl	8002d94 <HAL_GetTick>
 8007426:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8007428:	e012      	b.n	8007450 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800742a:	f7fb fcb3 	bl	8002d94 <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	2b64      	cmp	r3, #100	; 0x64
 8007436:	d90b      	bls.n	8007450 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743c:	f043 0201 	orr.w	r2, r3, #1
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a31      	ldr	r2, [pc, #196]	; (800751c <HAL_I2S_DMAStop+0x330>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d101      	bne.n	800745e <HAL_I2S_DMAStop+0x272>
 800745a:	4b31      	ldr	r3, [pc, #196]	; (8007520 <HAL_I2S_DMAStop+0x334>)
 800745c:	e001      	b.n	8007462 <HAL_I2S_DMAStop+0x276>
 800745e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f003 0302 	and.w	r3, r3, #2
 8007468:	2b02      	cmp	r3, #2
 800746a:	d1de      	bne.n	800742a <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 800746c:	e012      	b.n	8007494 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800746e:	f7fb fc91 	bl	8002d94 <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	2b64      	cmp	r3, #100	; 0x64
 800747a:	d90b      	bls.n	8007494 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007480:	f043 0201 	orr.w	r2, r3, #1
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a20      	ldr	r2, [pc, #128]	; (800751c <HAL_I2S_DMAStop+0x330>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d101      	bne.n	80074a2 <HAL_I2S_DMAStop+0x2b6>
 800749e:	4b20      	ldr	r3, [pc, #128]	; (8007520 <HAL_I2S_DMAStop+0x334>)
 80074a0:	e001      	b.n	80074a6 <HAL_I2S_DMAStop+0x2ba>
 80074a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ac:	2b80      	cmp	r3, #128	; 0x80
 80074ae:	d0de      	beq.n	800746e <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a19      	ldr	r2, [pc, #100]	; (800751c <HAL_I2S_DMAStop+0x330>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d101      	bne.n	80074be <HAL_I2S_DMAStop+0x2d2>
 80074ba:	4b19      	ldr	r3, [pc, #100]	; (8007520 <HAL_I2S_DMAStop+0x334>)
 80074bc:	e001      	b.n	80074c2 <HAL_I2S_DMAStop+0x2d6>
 80074be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074c2:	69da      	ldr	r2, [r3, #28]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4914      	ldr	r1, [pc, #80]	; (800751c <HAL_I2S_DMAStop+0x330>)
 80074ca:	428b      	cmp	r3, r1
 80074cc:	d101      	bne.n	80074d2 <HAL_I2S_DMAStop+0x2e6>
 80074ce:	4b14      	ldr	r3, [pc, #80]	; (8007520 <HAL_I2S_DMAStop+0x334>)
 80074d0:	e001      	b.n	80074d6 <HAL_I2S_DMAStop+0x2ea>
 80074d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074da:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80074dc:	2300      	movs	r3, #0
 80074de:	60fb      	str	r3, [r7, #12]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a0d      	ldr	r2, [pc, #52]	; (800751c <HAL_I2S_DMAStop+0x330>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d101      	bne.n	80074ee <HAL_I2S_DMAStop+0x302>
 80074ea:	4b0d      	ldr	r3, [pc, #52]	; (8007520 <HAL_I2S_DMAStop+0x334>)
 80074ec:	e001      	b.n	80074f2 <HAL_I2S_DMAStop+0x306>
 80074ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	60fb      	str	r3, [r7, #12]
 80074f6:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a07      	ldr	r2, [pc, #28]	; (800751c <HAL_I2S_DMAStop+0x330>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d101      	bne.n	8007506 <HAL_I2S_DMAStop+0x31a>
 8007502:	4b07      	ldr	r3, [pc, #28]	; (8007520 <HAL_I2S_DMAStop+0x334>)
 8007504:	e001      	b.n	800750a <HAL_I2S_DMAStop+0x31e>
 8007506:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4902      	ldr	r1, [pc, #8]	; (800751c <HAL_I2S_DMAStop+0x330>)
 8007512:	428b      	cmp	r3, r1
 8007514:	d106      	bne.n	8007524 <HAL_I2S_DMAStop+0x338>
 8007516:	4b02      	ldr	r3, [pc, #8]	; (8007520 <HAL_I2S_DMAStop+0x334>)
 8007518:	e006      	b.n	8007528 <HAL_I2S_DMAStop+0x33c>
 800751a:	bf00      	nop
 800751c:	40003800 	.word	0x40003800
 8007520:	40003400 	.word	0x40003400
 8007524:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007528:	f022 0202 	bic.w	r2, r2, #2
 800752c:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	69da      	ldr	r2, [r3, #28]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800753c:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800753e:	2300      	movs	r3, #0
 8007540:	60bb      	str	r3, [r7, #8]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	60bb      	str	r3, [r7, #8]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	60bb      	str	r3, [r7, #8]
 8007552:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f022 0201 	bic.w	r2, r2, #1
 8007562:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800756c:	d10c      	bne.n	8007588 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007572:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	77fb      	strb	r3, [r7, #31]
 8007586:	e002      	b.n	800758e <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8007596:	7ffb      	ldrb	r3, [r7, #31]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3720      	adds	r7, #32
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d10e      	bne.n	80075fc <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	685a      	ldr	r2, [r3, #4]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f022 0202 	bic.w	r2, r2, #2
 80075ec:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f7f9 fef5 	bl	80013ec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007602:	bf00      	nop
 8007604:	3710      	adds	r7, #16
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b084      	sub	sp, #16
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007616:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f7f9 fef9 	bl	8001410 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800761e:	bf00      	nop
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b084      	sub	sp, #16
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007632:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f022 0203 	bic.w	r2, r2, #3
 8007642:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800765c:	f043 0208 	orr.w	r2, r3, #8
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f7ff ffa5 	bl	80075b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800766a:	bf00      	nop
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b082      	sub	sp, #8
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	881a      	ldrh	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768a:	1c9a      	adds	r2, r3, #2
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007694:	b29b      	uxth	r3, r3
 8007696:	3b01      	subs	r3, #1
 8007698:	b29a      	uxth	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10e      	bne.n	80076c6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80076b6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f7f9 fe93 	bl	80013ec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80076c6:	bf00      	nop
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b082      	sub	sp, #8
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68da      	ldr	r2, [r3, #12]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e0:	b292      	uxth	r2, r2
 80076e2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e8:	1c9a      	adds	r2, r3, #2
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	3b01      	subs	r3, #1
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007700:	b29b      	uxth	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10e      	bne.n	8007724 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007714:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7ff ff3e 	bl	80075a0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007724:	bf00      	nop
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b04      	cmp	r3, #4
 8007746:	d13a      	bne.n	80077be <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	2b01      	cmp	r3, #1
 8007750:	d109      	bne.n	8007766 <I2S_IRQHandler+0x3a>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775c:	2b40      	cmp	r3, #64	; 0x40
 800775e:	d102      	bne.n	8007766 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f7ff ffb4 	bl	80076ce <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776c:	2b40      	cmp	r3, #64	; 0x40
 800776e:	d126      	bne.n	80077be <I2S_IRQHandler+0x92>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f003 0320 	and.w	r3, r3, #32
 800777a:	2b20      	cmp	r3, #32
 800777c:	d11f      	bne.n	80077be <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800778c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800778e:	2300      	movs	r3, #0
 8007790:	613b      	str	r3, [r7, #16]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	613b      	str	r3, [r7, #16]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	613b      	str	r3, [r7, #16]
 80077a2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b0:	f043 0202 	orr.w	r2, r3, #2
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7ff fefb 	bl	80075b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	d136      	bne.n	8007838 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	f003 0302 	and.w	r3, r3, #2
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d109      	bne.n	80077e8 <I2S_IRQHandler+0xbc>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077de:	2b80      	cmp	r3, #128	; 0x80
 80077e0:	d102      	bne.n	80077e8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7ff ff45 	bl	8007672 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	f003 0308 	and.w	r3, r3, #8
 80077ee:	2b08      	cmp	r3, #8
 80077f0:	d122      	bne.n	8007838 <I2S_IRQHandler+0x10c>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f003 0320 	and.w	r3, r3, #32
 80077fc:	2b20      	cmp	r3, #32
 80077fe:	d11b      	bne.n	8007838 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800780e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007810:	2300      	movs	r3, #0
 8007812:	60fb      	str	r3, [r7, #12]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	60fb      	str	r3, [r7, #12]
 800781c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800782a:	f043 0204 	orr.w	r2, r3, #4
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7ff febe 	bl	80075b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007838:	bf00      	nop
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	603b      	str	r3, [r7, #0]
 800784c:	4613      	mov	r3, r2
 800784e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8007850:	f7fb faa0 	bl	8002d94 <HAL_GetTick>
 8007854:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8007856:	e018      	b.n	800788a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785e:	d014      	beq.n	800788a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8007860:	f7fb fa98 	bl	8002d94 <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	683a      	ldr	r2, [r7, #0]
 800786c:	429a      	cmp	r2, r3
 800786e:	d902      	bls.n	8007876 <I2S_WaitFlagStateUntilTimeout+0x36>
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d109      	bne.n	800788a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8007886:	2303      	movs	r3, #3
 8007888:	e00f      	b.n	80078aa <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	689a      	ldr	r2, [r3, #8]
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	4013      	ands	r3, r2
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	429a      	cmp	r2, r3
 8007898:	bf0c      	ite	eq
 800789a:	2301      	moveq	r3, #1
 800789c:	2300      	movne	r3, #0
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	461a      	mov	r2, r3
 80078a2:	79fb      	ldrb	r3, [r7, #7]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d1d7      	bne.n	8007858 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
	...

080078b4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b088      	sub	sp, #32
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a92      	ldr	r2, [pc, #584]	; (8007b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d101      	bne.n	80078d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80078ce:	4b92      	ldr	r3, [pc, #584]	; (8007b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80078d0:	e001      	b.n	80078d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80078d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a8b      	ldr	r2, [pc, #556]	; (8007b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d101      	bne.n	80078f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80078ec:	4b8a      	ldr	r3, [pc, #552]	; (8007b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80078ee:	e001      	b.n	80078f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80078f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007900:	d004      	beq.n	800790c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	f040 8099 	bne.w	8007a3e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	f003 0302 	and.w	r3, r3, #2
 8007912:	2b02      	cmp	r3, #2
 8007914:	d107      	bne.n	8007926 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800791c:	2b00      	cmp	r3, #0
 800791e:	d002      	beq.n	8007926 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f925 	bl	8007b70 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	f003 0301 	and.w	r3, r3, #1
 800792c:	2b01      	cmp	r3, #1
 800792e:	d107      	bne.n	8007940 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007936:	2b00      	cmp	r3, #0
 8007938:	d002      	beq.n	8007940 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f9c8 	bl	8007cd0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007946:	2b40      	cmp	r3, #64	; 0x40
 8007948:	d13a      	bne.n	80079c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	f003 0320 	and.w	r3, r3, #32
 8007950:	2b00      	cmp	r3, #0
 8007952:	d035      	beq.n	80079c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a6e      	ldr	r2, [pc, #440]	; (8007b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d101      	bne.n	8007962 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800795e:	4b6e      	ldr	r3, [pc, #440]	; (8007b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007960:	e001      	b.n	8007966 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8007962:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4969      	ldr	r1, [pc, #420]	; (8007b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800796e:	428b      	cmp	r3, r1
 8007970:	d101      	bne.n	8007976 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8007972:	4b69      	ldr	r3, [pc, #420]	; (8007b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007974:	e001      	b.n	800797a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8007976:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800797a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800797e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	685a      	ldr	r2, [r3, #4]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800798e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007990:	2300      	movs	r3, #0
 8007992:	60fb      	str	r3, [r7, #12]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	60fb      	str	r3, [r7, #12]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b2:	f043 0202 	orr.w	r2, r3, #2
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7ff fdfa 	bl	80075b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	f003 0308 	and.w	r3, r3, #8
 80079c6:	2b08      	cmp	r3, #8
 80079c8:	f040 80c3 	bne.w	8007b52 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	f003 0320 	and.w	r3, r3, #32
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 80bd 	beq.w	8007b52 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	685a      	ldr	r2, [r3, #4]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80079e6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a49      	ldr	r2, [pc, #292]	; (8007b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d101      	bne.n	80079f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80079f2:	4b49      	ldr	r3, [pc, #292]	; (8007b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80079f4:	e001      	b.n	80079fa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80079f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4944      	ldr	r1, [pc, #272]	; (8007b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007a02:	428b      	cmp	r3, r1
 8007a04:	d101      	bne.n	8007a0a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007a06:	4b44      	ldr	r3, [pc, #272]	; (8007b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007a08:	e001      	b.n	8007a0e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007a0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007a12:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007a14:	2300      	movs	r3, #0
 8007a16:	60bb      	str	r3, [r7, #8]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	60bb      	str	r3, [r7, #8]
 8007a20:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a2e:	f043 0204 	orr.w	r2, r3, #4
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7ff fdbc 	bl	80075b4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007a3c:	e089      	b.n	8007b52 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	f003 0302 	and.w	r3, r3, #2
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d107      	bne.n	8007a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d002      	beq.n	8007a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f8be 	bl	8007bd4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d107      	bne.n	8007a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d002      	beq.n	8007a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f8fd 	bl	8007c6c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a78:	2b40      	cmp	r3, #64	; 0x40
 8007a7a:	d12f      	bne.n	8007adc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f003 0320 	and.w	r3, r3, #32
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d02a      	beq.n	8007adc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007a94:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a1e      	ldr	r2, [pc, #120]	; (8007b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d101      	bne.n	8007aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007aa0:	4b1d      	ldr	r3, [pc, #116]	; (8007b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007aa2:	e001      	b.n	8007aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007aa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007aa8:	685a      	ldr	r2, [r3, #4]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4919      	ldr	r1, [pc, #100]	; (8007b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007ab0:	428b      	cmp	r3, r1
 8007ab2:	d101      	bne.n	8007ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007ab4:	4b18      	ldr	r3, [pc, #96]	; (8007b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007ab6:	e001      	b.n	8007abc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007ab8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007abc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007ac0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ace:	f043 0202 	orr.w	r2, r3, #2
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7ff fd6c 	bl	80075b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	f003 0308 	and.w	r3, r3, #8
 8007ae2:	2b08      	cmp	r3, #8
 8007ae4:	d136      	bne.n	8007b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f003 0320 	and.w	r3, r3, #32
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d031      	beq.n	8007b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a07      	ldr	r2, [pc, #28]	; (8007b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d101      	bne.n	8007afe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007afa:	4b07      	ldr	r3, [pc, #28]	; (8007b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007afc:	e001      	b.n	8007b02 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007afe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b02:	685a      	ldr	r2, [r3, #4]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4902      	ldr	r1, [pc, #8]	; (8007b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007b0a:	428b      	cmp	r3, r1
 8007b0c:	d106      	bne.n	8007b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8007b0e:	4b02      	ldr	r3, [pc, #8]	; (8007b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007b10:	e006      	b.n	8007b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8007b12:	bf00      	nop
 8007b14:	40003800 	.word	0x40003800
 8007b18:	40003400 	.word	0x40003400
 8007b1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007b24:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007b34:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b42:	f043 0204 	orr.w	r2, r3, #4
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7ff fd32 	bl	80075b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007b50:	e000      	b.n	8007b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007b52:	bf00      	nop
}
 8007b54:	bf00      	nop
 8007b56:	3720      	adds	r7, #32
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	1c99      	adds	r1, r3, #2
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	6251      	str	r1, [r2, #36]	; 0x24
 8007b82:	881a      	ldrh	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	3b01      	subs	r3, #1
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d113      	bne.n	8007bca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007bb0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d106      	bne.n	8007bca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f7ff ffc9 	bl	8007b5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007bca:	bf00      	nop
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
	...

08007bd4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be0:	1c99      	adds	r1, r3, #2
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	6251      	str	r1, [r2, #36]	; 0x24
 8007be6:	8819      	ldrh	r1, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a1d      	ldr	r2, [pc, #116]	; (8007c64 <I2SEx_TxISR_I2SExt+0x90>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d101      	bne.n	8007bf6 <I2SEx_TxISR_I2SExt+0x22>
 8007bf2:	4b1d      	ldr	r3, [pc, #116]	; (8007c68 <I2SEx_TxISR_I2SExt+0x94>)
 8007bf4:	e001      	b.n	8007bfa <I2SEx_TxISR_I2SExt+0x26>
 8007bf6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007bfa:	460a      	mov	r2, r1
 8007bfc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	3b01      	subs	r3, #1
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d121      	bne.n	8007c5a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a12      	ldr	r2, [pc, #72]	; (8007c64 <I2SEx_TxISR_I2SExt+0x90>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d101      	bne.n	8007c24 <I2SEx_TxISR_I2SExt+0x50>
 8007c20:	4b11      	ldr	r3, [pc, #68]	; (8007c68 <I2SEx_TxISR_I2SExt+0x94>)
 8007c22:	e001      	b.n	8007c28 <I2SEx_TxISR_I2SExt+0x54>
 8007c24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	490d      	ldr	r1, [pc, #52]	; (8007c64 <I2SEx_TxISR_I2SExt+0x90>)
 8007c30:	428b      	cmp	r3, r1
 8007c32:	d101      	bne.n	8007c38 <I2SEx_TxISR_I2SExt+0x64>
 8007c34:	4b0c      	ldr	r3, [pc, #48]	; (8007c68 <I2SEx_TxISR_I2SExt+0x94>)
 8007c36:	e001      	b.n	8007c3c <I2SEx_TxISR_I2SExt+0x68>
 8007c38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007c40:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d106      	bne.n	8007c5a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f7ff ff81 	bl	8007b5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007c5a:	bf00      	nop
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	40003800 	.word	0x40003800
 8007c68:	40003400 	.word	0x40003400

08007c6c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68d8      	ldr	r0, [r3, #12]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7e:	1c99      	adds	r1, r3, #2
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007c84:	b282      	uxth	r2, r0
 8007c86:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d113      	bne.n	8007cc8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685a      	ldr	r2, [r3, #4]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007cae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d106      	bne.n	8007cc8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7ff ff4a 	bl	8007b5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007cc8:	bf00      	nop
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a20      	ldr	r2, [pc, #128]	; (8007d60 <I2SEx_RxISR_I2SExt+0x90>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d101      	bne.n	8007ce6 <I2SEx_RxISR_I2SExt+0x16>
 8007ce2:	4b20      	ldr	r3, [pc, #128]	; (8007d64 <I2SEx_RxISR_I2SExt+0x94>)
 8007ce4:	e001      	b.n	8007cea <I2SEx_RxISR_I2SExt+0x1a>
 8007ce6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007cea:	68d8      	ldr	r0, [r3, #12]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf0:	1c99      	adds	r1, r3, #2
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007cf6:	b282      	uxth	r2, r0
 8007cf8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	3b01      	subs	r3, #1
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d121      	bne.n	8007d56 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a12      	ldr	r2, [pc, #72]	; (8007d60 <I2SEx_RxISR_I2SExt+0x90>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d101      	bne.n	8007d20 <I2SEx_RxISR_I2SExt+0x50>
 8007d1c:	4b11      	ldr	r3, [pc, #68]	; (8007d64 <I2SEx_RxISR_I2SExt+0x94>)
 8007d1e:	e001      	b.n	8007d24 <I2SEx_RxISR_I2SExt+0x54>
 8007d20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007d24:	685a      	ldr	r2, [r3, #4]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	490d      	ldr	r1, [pc, #52]	; (8007d60 <I2SEx_RxISR_I2SExt+0x90>)
 8007d2c:	428b      	cmp	r3, r1
 8007d2e:	d101      	bne.n	8007d34 <I2SEx_RxISR_I2SExt+0x64>
 8007d30:	4b0c      	ldr	r3, [pc, #48]	; (8007d64 <I2SEx_RxISR_I2SExt+0x94>)
 8007d32:	e001      	b.n	8007d38 <I2SEx_RxISR_I2SExt+0x68>
 8007d34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007d38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007d3c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d106      	bne.n	8007d56 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7ff ff03 	bl	8007b5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007d56:	bf00      	nop
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	40003800 	.word	0x40003800
 8007d64:	40003400 	.word	0x40003400

08007d68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d101      	bne.n	8007d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e267      	b.n	800824a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d075      	beq.n	8007e72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d86:	4b88      	ldr	r3, [pc, #544]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	f003 030c 	and.w	r3, r3, #12
 8007d8e:	2b04      	cmp	r3, #4
 8007d90:	d00c      	beq.n	8007dac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d92:	4b85      	ldr	r3, [pc, #532]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d9a:	2b08      	cmp	r3, #8
 8007d9c:	d112      	bne.n	8007dc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d9e:	4b82      	ldr	r3, [pc, #520]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007da6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007daa:	d10b      	bne.n	8007dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dac:	4b7e      	ldr	r3, [pc, #504]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d05b      	beq.n	8007e70 <HAL_RCC_OscConfig+0x108>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d157      	bne.n	8007e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e242      	b.n	800824a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dcc:	d106      	bne.n	8007ddc <HAL_RCC_OscConfig+0x74>
 8007dce:	4b76      	ldr	r3, [pc, #472]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a75      	ldr	r2, [pc, #468]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dd8:	6013      	str	r3, [r2, #0]
 8007dda:	e01d      	b.n	8007e18 <HAL_RCC_OscConfig+0xb0>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007de4:	d10c      	bne.n	8007e00 <HAL_RCC_OscConfig+0x98>
 8007de6:	4b70      	ldr	r3, [pc, #448]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a6f      	ldr	r2, [pc, #444]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007df0:	6013      	str	r3, [r2, #0]
 8007df2:	4b6d      	ldr	r3, [pc, #436]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a6c      	ldr	r2, [pc, #432]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dfc:	6013      	str	r3, [r2, #0]
 8007dfe:	e00b      	b.n	8007e18 <HAL_RCC_OscConfig+0xb0>
 8007e00:	4b69      	ldr	r3, [pc, #420]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a68      	ldr	r2, [pc, #416]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e0a:	6013      	str	r3, [r2, #0]
 8007e0c:	4b66      	ldr	r3, [pc, #408]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a65      	ldr	r2, [pc, #404]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d013      	beq.n	8007e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e20:	f7fa ffb8 	bl	8002d94 <HAL_GetTick>
 8007e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e26:	e008      	b.n	8007e3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e28:	f7fa ffb4 	bl	8002d94 <HAL_GetTick>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	2b64      	cmp	r3, #100	; 0x64
 8007e34:	d901      	bls.n	8007e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	e207      	b.n	800824a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e3a:	4b5b      	ldr	r3, [pc, #364]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d0f0      	beq.n	8007e28 <HAL_RCC_OscConfig+0xc0>
 8007e46:	e014      	b.n	8007e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e48:	f7fa ffa4 	bl	8002d94 <HAL_GetTick>
 8007e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e4e:	e008      	b.n	8007e62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e50:	f7fa ffa0 	bl	8002d94 <HAL_GetTick>
 8007e54:	4602      	mov	r2, r0
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	1ad3      	subs	r3, r2, r3
 8007e5a:	2b64      	cmp	r3, #100	; 0x64
 8007e5c:	d901      	bls.n	8007e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e1f3      	b.n	800824a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e62:	4b51      	ldr	r3, [pc, #324]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1f0      	bne.n	8007e50 <HAL_RCC_OscConfig+0xe8>
 8007e6e:	e000      	b.n	8007e72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0302 	and.w	r3, r3, #2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d063      	beq.n	8007f46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e7e:	4b4a      	ldr	r3, [pc, #296]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f003 030c 	and.w	r3, r3, #12
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00b      	beq.n	8007ea2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e8a:	4b47      	ldr	r3, [pc, #284]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e92:	2b08      	cmp	r3, #8
 8007e94:	d11c      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e96:	4b44      	ldr	r3, [pc, #272]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d116      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ea2:	4b41      	ldr	r3, [pc, #260]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0302 	and.w	r3, r3, #2
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d005      	beq.n	8007eba <HAL_RCC_OscConfig+0x152>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d001      	beq.n	8007eba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e1c7      	b.n	800824a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eba:	4b3b      	ldr	r3, [pc, #236]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	00db      	lsls	r3, r3, #3
 8007ec8:	4937      	ldr	r1, [pc, #220]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ece:	e03a      	b.n	8007f46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d020      	beq.n	8007f1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ed8:	4b34      	ldr	r3, [pc, #208]	; (8007fac <HAL_RCC_OscConfig+0x244>)
 8007eda:	2201      	movs	r2, #1
 8007edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ede:	f7fa ff59 	bl	8002d94 <HAL_GetTick>
 8007ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ee4:	e008      	b.n	8007ef8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ee6:	f7fa ff55 	bl	8002d94 <HAL_GetTick>
 8007eea:	4602      	mov	r2, r0
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d901      	bls.n	8007ef8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e1a8      	b.n	800824a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ef8:	4b2b      	ldr	r3, [pc, #172]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 0302 	and.w	r3, r3, #2
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d0f0      	beq.n	8007ee6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f04:	4b28      	ldr	r3, [pc, #160]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	00db      	lsls	r3, r3, #3
 8007f12:	4925      	ldr	r1, [pc, #148]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007f14:	4313      	orrs	r3, r2
 8007f16:	600b      	str	r3, [r1, #0]
 8007f18:	e015      	b.n	8007f46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f1a:	4b24      	ldr	r3, [pc, #144]	; (8007fac <HAL_RCC_OscConfig+0x244>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f20:	f7fa ff38 	bl	8002d94 <HAL_GetTick>
 8007f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f26:	e008      	b.n	8007f3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f28:	f7fa ff34 	bl	8002d94 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d901      	bls.n	8007f3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e187      	b.n	800824a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f3a:	4b1b      	ldr	r3, [pc, #108]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1f0      	bne.n	8007f28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0308 	and.w	r3, r3, #8
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d036      	beq.n	8007fc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	695b      	ldr	r3, [r3, #20]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d016      	beq.n	8007f88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f5a:	4b15      	ldr	r3, [pc, #84]	; (8007fb0 <HAL_RCC_OscConfig+0x248>)
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f60:	f7fa ff18 	bl	8002d94 <HAL_GetTick>
 8007f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f66:	e008      	b.n	8007f7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f68:	f7fa ff14 	bl	8002d94 <HAL_GetTick>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d901      	bls.n	8007f7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007f76:	2303      	movs	r3, #3
 8007f78:	e167      	b.n	800824a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f7a:	4b0b      	ldr	r3, [pc, #44]	; (8007fa8 <HAL_RCC_OscConfig+0x240>)
 8007f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f7e:	f003 0302 	and.w	r3, r3, #2
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d0f0      	beq.n	8007f68 <HAL_RCC_OscConfig+0x200>
 8007f86:	e01b      	b.n	8007fc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f88:	4b09      	ldr	r3, [pc, #36]	; (8007fb0 <HAL_RCC_OscConfig+0x248>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f8e:	f7fa ff01 	bl	8002d94 <HAL_GetTick>
 8007f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f94:	e00e      	b.n	8007fb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f96:	f7fa fefd 	bl	8002d94 <HAL_GetTick>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	1ad3      	subs	r3, r2, r3
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d907      	bls.n	8007fb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	e150      	b.n	800824a <HAL_RCC_OscConfig+0x4e2>
 8007fa8:	40023800 	.word	0x40023800
 8007fac:	42470000 	.word	0x42470000
 8007fb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007fb4:	4b88      	ldr	r3, [pc, #544]	; (80081d8 <HAL_RCC_OscConfig+0x470>)
 8007fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fb8:	f003 0302 	and.w	r3, r3, #2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1ea      	bne.n	8007f96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0304 	and.w	r3, r3, #4
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 8097 	beq.w	80080fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fd2:	4b81      	ldr	r3, [pc, #516]	; (80081d8 <HAL_RCC_OscConfig+0x470>)
 8007fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10f      	bne.n	8007ffe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fde:	2300      	movs	r3, #0
 8007fe0:	60bb      	str	r3, [r7, #8]
 8007fe2:	4b7d      	ldr	r3, [pc, #500]	; (80081d8 <HAL_RCC_OscConfig+0x470>)
 8007fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe6:	4a7c      	ldr	r2, [pc, #496]	; (80081d8 <HAL_RCC_OscConfig+0x470>)
 8007fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fec:	6413      	str	r3, [r2, #64]	; 0x40
 8007fee:	4b7a      	ldr	r3, [pc, #488]	; (80081d8 <HAL_RCC_OscConfig+0x470>)
 8007ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ff6:	60bb      	str	r3, [r7, #8]
 8007ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ffe:	4b77      	ldr	r3, [pc, #476]	; (80081dc <HAL_RCC_OscConfig+0x474>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008006:	2b00      	cmp	r3, #0
 8008008:	d118      	bne.n	800803c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800800a:	4b74      	ldr	r3, [pc, #464]	; (80081dc <HAL_RCC_OscConfig+0x474>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a73      	ldr	r2, [pc, #460]	; (80081dc <HAL_RCC_OscConfig+0x474>)
 8008010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008016:	f7fa febd 	bl	8002d94 <HAL_GetTick>
 800801a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800801c:	e008      	b.n	8008030 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800801e:	f7fa feb9 	bl	8002d94 <HAL_GetTick>
 8008022:	4602      	mov	r2, r0
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	1ad3      	subs	r3, r2, r3
 8008028:	2b02      	cmp	r3, #2
 800802a:	d901      	bls.n	8008030 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e10c      	b.n	800824a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008030:	4b6a      	ldr	r3, [pc, #424]	; (80081dc <HAL_RCC_OscConfig+0x474>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008038:	2b00      	cmp	r3, #0
 800803a:	d0f0      	beq.n	800801e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d106      	bne.n	8008052 <HAL_RCC_OscConfig+0x2ea>
 8008044:	4b64      	ldr	r3, [pc, #400]	; (80081d8 <HAL_RCC_OscConfig+0x470>)
 8008046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008048:	4a63      	ldr	r2, [pc, #396]	; (80081d8 <HAL_RCC_OscConfig+0x470>)
 800804a:	f043 0301 	orr.w	r3, r3, #1
 800804e:	6713      	str	r3, [r2, #112]	; 0x70
 8008050:	e01c      	b.n	800808c <HAL_RCC_OscConfig+0x324>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	2b05      	cmp	r3, #5
 8008058:	d10c      	bne.n	8008074 <HAL_RCC_OscConfig+0x30c>
 800805a:	4b5f      	ldr	r3, [pc, #380]	; (80081d8 <HAL_RCC_OscConfig+0x470>)
 800805c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800805e:	4a5e      	ldr	r2, [pc, #376]	; (80081d8 <HAL_RCC_OscConfig+0x470>)
 8008060:	f043 0304 	orr.w	r3, r3, #4
 8008064:	6713      	str	r3, [r2, #112]	; 0x70
 8008066:	4b5c      	ldr	r3, [pc, #368]	; (80081d8 <HAL_RCC_OscConfig+0x470>)
 8008068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800806a:	4a5b      	ldr	r2, [pc, #364]	; (80081d8 <HAL_RCC_OscConfig+0x470>)
 800806c:	f043 0301 	orr.w	r3, r3, #1
 8008070:	6713      	str	r3, [r2, #112]	; 0x70
 8008072:	e00b      	b.n	800808c <HAL_RCC_OscConfig+0x324>
 8008074:	4b58      	ldr	r3, [pc, #352]	; (80081d8 <HAL_RCC_OscConfig+0x470>)
 8008076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008078:	4a57      	ldr	r2, [pc, #348]	; (80081d8 <HAL_RCC_OscConfig+0x470>)
 800807a:	f023 0301 	bic.w	r3, r3, #1
 800807e:	6713      	str	r3, [r2, #112]	; 0x70
 8008080:	4b55      	ldr	r3, [pc, #340]	; (80081d8 <HAL_RCC_OscConfig+0x470>)
 8008082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008084:	4a54      	ldr	r2, [pc, #336]	; (80081d8 <HAL_RCC_OscConfig+0x470>)
 8008086:	f023 0304 	bic.w	r3, r3, #4
 800808a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d015      	beq.n	80080c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008094:	f7fa fe7e 	bl	8002d94 <HAL_GetTick>
 8008098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800809a:	e00a      	b.n	80080b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800809c:	f7fa fe7a 	bl	8002d94 <HAL_GetTick>
 80080a0:	4602      	mov	r2, r0
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d901      	bls.n	80080b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e0cb      	b.n	800824a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080b2:	4b49      	ldr	r3, [pc, #292]	; (80081d8 <HAL_RCC_OscConfig+0x470>)
 80080b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b6:	f003 0302 	and.w	r3, r3, #2
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d0ee      	beq.n	800809c <HAL_RCC_OscConfig+0x334>
 80080be:	e014      	b.n	80080ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080c0:	f7fa fe68 	bl	8002d94 <HAL_GetTick>
 80080c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080c6:	e00a      	b.n	80080de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080c8:	f7fa fe64 	bl	8002d94 <HAL_GetTick>
 80080cc:	4602      	mov	r2, r0
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d901      	bls.n	80080de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80080da:	2303      	movs	r3, #3
 80080dc:	e0b5      	b.n	800824a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080de:	4b3e      	ldr	r3, [pc, #248]	; (80081d8 <HAL_RCC_OscConfig+0x470>)
 80080e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e2:	f003 0302 	and.w	r3, r3, #2
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1ee      	bne.n	80080c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080ea:	7dfb      	ldrb	r3, [r7, #23]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d105      	bne.n	80080fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080f0:	4b39      	ldr	r3, [pc, #228]	; (80081d8 <HAL_RCC_OscConfig+0x470>)
 80080f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f4:	4a38      	ldr	r2, [pc, #224]	; (80081d8 <HAL_RCC_OscConfig+0x470>)
 80080f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	2b00      	cmp	r3, #0
 8008102:	f000 80a1 	beq.w	8008248 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008106:	4b34      	ldr	r3, [pc, #208]	; (80081d8 <HAL_RCC_OscConfig+0x470>)
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f003 030c 	and.w	r3, r3, #12
 800810e:	2b08      	cmp	r3, #8
 8008110:	d05c      	beq.n	80081cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	2b02      	cmp	r3, #2
 8008118:	d141      	bne.n	800819e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800811a:	4b31      	ldr	r3, [pc, #196]	; (80081e0 <HAL_RCC_OscConfig+0x478>)
 800811c:	2200      	movs	r2, #0
 800811e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008120:	f7fa fe38 	bl	8002d94 <HAL_GetTick>
 8008124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008126:	e008      	b.n	800813a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008128:	f7fa fe34 	bl	8002d94 <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	2b02      	cmp	r3, #2
 8008134:	d901      	bls.n	800813a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e087      	b.n	800824a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800813a:	4b27      	ldr	r3, [pc, #156]	; (80081d8 <HAL_RCC_OscConfig+0x470>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1f0      	bne.n	8008128 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	69da      	ldr	r2, [r3, #28]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	431a      	orrs	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008154:	019b      	lsls	r3, r3, #6
 8008156:	431a      	orrs	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815c:	085b      	lsrs	r3, r3, #1
 800815e:	3b01      	subs	r3, #1
 8008160:	041b      	lsls	r3, r3, #16
 8008162:	431a      	orrs	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008168:	061b      	lsls	r3, r3, #24
 800816a:	491b      	ldr	r1, [pc, #108]	; (80081d8 <HAL_RCC_OscConfig+0x470>)
 800816c:	4313      	orrs	r3, r2
 800816e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008170:	4b1b      	ldr	r3, [pc, #108]	; (80081e0 <HAL_RCC_OscConfig+0x478>)
 8008172:	2201      	movs	r2, #1
 8008174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008176:	f7fa fe0d 	bl	8002d94 <HAL_GetTick>
 800817a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800817c:	e008      	b.n	8008190 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800817e:	f7fa fe09 	bl	8002d94 <HAL_GetTick>
 8008182:	4602      	mov	r2, r0
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	2b02      	cmp	r3, #2
 800818a:	d901      	bls.n	8008190 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	e05c      	b.n	800824a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008190:	4b11      	ldr	r3, [pc, #68]	; (80081d8 <HAL_RCC_OscConfig+0x470>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d0f0      	beq.n	800817e <HAL_RCC_OscConfig+0x416>
 800819c:	e054      	b.n	8008248 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800819e:	4b10      	ldr	r3, [pc, #64]	; (80081e0 <HAL_RCC_OscConfig+0x478>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081a4:	f7fa fdf6 	bl	8002d94 <HAL_GetTick>
 80081a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081aa:	e008      	b.n	80081be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081ac:	f7fa fdf2 	bl	8002d94 <HAL_GetTick>
 80081b0:	4602      	mov	r2, r0
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d901      	bls.n	80081be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e045      	b.n	800824a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081be:	4b06      	ldr	r3, [pc, #24]	; (80081d8 <HAL_RCC_OscConfig+0x470>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1f0      	bne.n	80081ac <HAL_RCC_OscConfig+0x444>
 80081ca:	e03d      	b.n	8008248 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	699b      	ldr	r3, [r3, #24]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d107      	bne.n	80081e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	e038      	b.n	800824a <HAL_RCC_OscConfig+0x4e2>
 80081d8:	40023800 	.word	0x40023800
 80081dc:	40007000 	.word	0x40007000
 80081e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80081e4:	4b1b      	ldr	r3, [pc, #108]	; (8008254 <HAL_RCC_OscConfig+0x4ec>)
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d028      	beq.n	8008244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d121      	bne.n	8008244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800820a:	429a      	cmp	r2, r3
 800820c:	d11a      	bne.n	8008244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008214:	4013      	ands	r3, r2
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800821a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800821c:	4293      	cmp	r3, r2
 800821e:	d111      	bne.n	8008244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822a:	085b      	lsrs	r3, r3, #1
 800822c:	3b01      	subs	r3, #1
 800822e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008230:	429a      	cmp	r2, r3
 8008232:	d107      	bne.n	8008244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008240:	429a      	cmp	r2, r3
 8008242:	d001      	beq.n	8008248 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	e000      	b.n	800824a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3718      	adds	r7, #24
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	40023800 	.word	0x40023800

08008258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d101      	bne.n	800826c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	e0cc      	b.n	8008406 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800826c:	4b68      	ldr	r3, [pc, #416]	; (8008410 <HAL_RCC_ClockConfig+0x1b8>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 0307 	and.w	r3, r3, #7
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	429a      	cmp	r2, r3
 8008278:	d90c      	bls.n	8008294 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800827a:	4b65      	ldr	r3, [pc, #404]	; (8008410 <HAL_RCC_ClockConfig+0x1b8>)
 800827c:	683a      	ldr	r2, [r7, #0]
 800827e:	b2d2      	uxtb	r2, r2
 8008280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008282:	4b63      	ldr	r3, [pc, #396]	; (8008410 <HAL_RCC_ClockConfig+0x1b8>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 0307 	and.w	r3, r3, #7
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	429a      	cmp	r2, r3
 800828e:	d001      	beq.n	8008294 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e0b8      	b.n	8008406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0302 	and.w	r3, r3, #2
 800829c:	2b00      	cmp	r3, #0
 800829e:	d020      	beq.n	80082e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0304 	and.w	r3, r3, #4
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d005      	beq.n	80082b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082ac:	4b59      	ldr	r3, [pc, #356]	; (8008414 <HAL_RCC_ClockConfig+0x1bc>)
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	4a58      	ldr	r2, [pc, #352]	; (8008414 <HAL_RCC_ClockConfig+0x1bc>)
 80082b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80082b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0308 	and.w	r3, r3, #8
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d005      	beq.n	80082d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80082c4:	4b53      	ldr	r3, [pc, #332]	; (8008414 <HAL_RCC_ClockConfig+0x1bc>)
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	4a52      	ldr	r2, [pc, #328]	; (8008414 <HAL_RCC_ClockConfig+0x1bc>)
 80082ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80082ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082d0:	4b50      	ldr	r3, [pc, #320]	; (8008414 <HAL_RCC_ClockConfig+0x1bc>)
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	494d      	ldr	r1, [pc, #308]	; (8008414 <HAL_RCC_ClockConfig+0x1bc>)
 80082de:	4313      	orrs	r3, r2
 80082e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0301 	and.w	r3, r3, #1
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d044      	beq.n	8008378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d107      	bne.n	8008306 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082f6:	4b47      	ldr	r3, [pc, #284]	; (8008414 <HAL_RCC_ClockConfig+0x1bc>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d119      	bne.n	8008336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e07f      	b.n	8008406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	2b02      	cmp	r3, #2
 800830c:	d003      	beq.n	8008316 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008312:	2b03      	cmp	r3, #3
 8008314:	d107      	bne.n	8008326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008316:	4b3f      	ldr	r3, [pc, #252]	; (8008414 <HAL_RCC_ClockConfig+0x1bc>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800831e:	2b00      	cmp	r3, #0
 8008320:	d109      	bne.n	8008336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e06f      	b.n	8008406 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008326:	4b3b      	ldr	r3, [pc, #236]	; (8008414 <HAL_RCC_ClockConfig+0x1bc>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 0302 	and.w	r3, r3, #2
 800832e:	2b00      	cmp	r3, #0
 8008330:	d101      	bne.n	8008336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e067      	b.n	8008406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008336:	4b37      	ldr	r3, [pc, #220]	; (8008414 <HAL_RCC_ClockConfig+0x1bc>)
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f023 0203 	bic.w	r2, r3, #3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	4934      	ldr	r1, [pc, #208]	; (8008414 <HAL_RCC_ClockConfig+0x1bc>)
 8008344:	4313      	orrs	r3, r2
 8008346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008348:	f7fa fd24 	bl	8002d94 <HAL_GetTick>
 800834c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800834e:	e00a      	b.n	8008366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008350:	f7fa fd20 	bl	8002d94 <HAL_GetTick>
 8008354:	4602      	mov	r2, r0
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	f241 3288 	movw	r2, #5000	; 0x1388
 800835e:	4293      	cmp	r3, r2
 8008360:	d901      	bls.n	8008366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e04f      	b.n	8008406 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008366:	4b2b      	ldr	r3, [pc, #172]	; (8008414 <HAL_RCC_ClockConfig+0x1bc>)
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	f003 020c 	and.w	r2, r3, #12
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	429a      	cmp	r2, r3
 8008376:	d1eb      	bne.n	8008350 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008378:	4b25      	ldr	r3, [pc, #148]	; (8008410 <HAL_RCC_ClockConfig+0x1b8>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0307 	and.w	r3, r3, #7
 8008380:	683a      	ldr	r2, [r7, #0]
 8008382:	429a      	cmp	r2, r3
 8008384:	d20c      	bcs.n	80083a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008386:	4b22      	ldr	r3, [pc, #136]	; (8008410 <HAL_RCC_ClockConfig+0x1b8>)
 8008388:	683a      	ldr	r2, [r7, #0]
 800838a:	b2d2      	uxtb	r2, r2
 800838c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800838e:	4b20      	ldr	r3, [pc, #128]	; (8008410 <HAL_RCC_ClockConfig+0x1b8>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0307 	and.w	r3, r3, #7
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	429a      	cmp	r2, r3
 800839a:	d001      	beq.n	80083a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	e032      	b.n	8008406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0304 	and.w	r3, r3, #4
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d008      	beq.n	80083be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083ac:	4b19      	ldr	r3, [pc, #100]	; (8008414 <HAL_RCC_ClockConfig+0x1bc>)
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	4916      	ldr	r1, [pc, #88]	; (8008414 <HAL_RCC_ClockConfig+0x1bc>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 0308 	and.w	r3, r3, #8
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d009      	beq.n	80083de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80083ca:	4b12      	ldr	r3, [pc, #72]	; (8008414 <HAL_RCC_ClockConfig+0x1bc>)
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	00db      	lsls	r3, r3, #3
 80083d8:	490e      	ldr	r1, [pc, #56]	; (8008414 <HAL_RCC_ClockConfig+0x1bc>)
 80083da:	4313      	orrs	r3, r2
 80083dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80083de:	f000 f821 	bl	8008424 <HAL_RCC_GetSysClockFreq>
 80083e2:	4602      	mov	r2, r0
 80083e4:	4b0b      	ldr	r3, [pc, #44]	; (8008414 <HAL_RCC_ClockConfig+0x1bc>)
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	091b      	lsrs	r3, r3, #4
 80083ea:	f003 030f 	and.w	r3, r3, #15
 80083ee:	490a      	ldr	r1, [pc, #40]	; (8008418 <HAL_RCC_ClockConfig+0x1c0>)
 80083f0:	5ccb      	ldrb	r3, [r1, r3]
 80083f2:	fa22 f303 	lsr.w	r3, r2, r3
 80083f6:	4a09      	ldr	r2, [pc, #36]	; (800841c <HAL_RCC_ClockConfig+0x1c4>)
 80083f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80083fa:	4b09      	ldr	r3, [pc, #36]	; (8008420 <HAL_RCC_ClockConfig+0x1c8>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4618      	mov	r0, r3
 8008400:	f7fa fc84 	bl	8002d0c <HAL_InitTick>

  return HAL_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	40023c00 	.word	0x40023c00
 8008414:	40023800 	.word	0x40023800
 8008418:	0800fc44 	.word	0x0800fc44
 800841c:	20000000 	.word	0x20000000
 8008420:	20000070 	.word	0x20000070

08008424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008428:	b094      	sub	sp, #80	; 0x50
 800842a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800842c:	2300      	movs	r3, #0
 800842e:	647b      	str	r3, [r7, #68]	; 0x44
 8008430:	2300      	movs	r3, #0
 8008432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008434:	2300      	movs	r3, #0
 8008436:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008438:	2300      	movs	r3, #0
 800843a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800843c:	4b79      	ldr	r3, [pc, #484]	; (8008624 <HAL_RCC_GetSysClockFreq+0x200>)
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	f003 030c 	and.w	r3, r3, #12
 8008444:	2b08      	cmp	r3, #8
 8008446:	d00d      	beq.n	8008464 <HAL_RCC_GetSysClockFreq+0x40>
 8008448:	2b08      	cmp	r3, #8
 800844a:	f200 80e1 	bhi.w	8008610 <HAL_RCC_GetSysClockFreq+0x1ec>
 800844e:	2b00      	cmp	r3, #0
 8008450:	d002      	beq.n	8008458 <HAL_RCC_GetSysClockFreq+0x34>
 8008452:	2b04      	cmp	r3, #4
 8008454:	d003      	beq.n	800845e <HAL_RCC_GetSysClockFreq+0x3a>
 8008456:	e0db      	b.n	8008610 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008458:	4b73      	ldr	r3, [pc, #460]	; (8008628 <HAL_RCC_GetSysClockFreq+0x204>)
 800845a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800845c:	e0db      	b.n	8008616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800845e:	4b73      	ldr	r3, [pc, #460]	; (800862c <HAL_RCC_GetSysClockFreq+0x208>)
 8008460:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008462:	e0d8      	b.n	8008616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008464:	4b6f      	ldr	r3, [pc, #444]	; (8008624 <HAL_RCC_GetSysClockFreq+0x200>)
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800846c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800846e:	4b6d      	ldr	r3, [pc, #436]	; (8008624 <HAL_RCC_GetSysClockFreq+0x200>)
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d063      	beq.n	8008542 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800847a:	4b6a      	ldr	r3, [pc, #424]	; (8008624 <HAL_RCC_GetSysClockFreq+0x200>)
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	099b      	lsrs	r3, r3, #6
 8008480:	2200      	movs	r2, #0
 8008482:	63bb      	str	r3, [r7, #56]	; 0x38
 8008484:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800848c:	633b      	str	r3, [r7, #48]	; 0x30
 800848e:	2300      	movs	r3, #0
 8008490:	637b      	str	r3, [r7, #52]	; 0x34
 8008492:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008496:	4622      	mov	r2, r4
 8008498:	462b      	mov	r3, r5
 800849a:	f04f 0000 	mov.w	r0, #0
 800849e:	f04f 0100 	mov.w	r1, #0
 80084a2:	0159      	lsls	r1, r3, #5
 80084a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80084a8:	0150      	lsls	r0, r2, #5
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	4621      	mov	r1, r4
 80084b0:	1a51      	subs	r1, r2, r1
 80084b2:	6139      	str	r1, [r7, #16]
 80084b4:	4629      	mov	r1, r5
 80084b6:	eb63 0301 	sbc.w	r3, r3, r1
 80084ba:	617b      	str	r3, [r7, #20]
 80084bc:	f04f 0200 	mov.w	r2, #0
 80084c0:	f04f 0300 	mov.w	r3, #0
 80084c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80084c8:	4659      	mov	r1, fp
 80084ca:	018b      	lsls	r3, r1, #6
 80084cc:	4651      	mov	r1, sl
 80084ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80084d2:	4651      	mov	r1, sl
 80084d4:	018a      	lsls	r2, r1, #6
 80084d6:	4651      	mov	r1, sl
 80084d8:	ebb2 0801 	subs.w	r8, r2, r1
 80084dc:	4659      	mov	r1, fp
 80084de:	eb63 0901 	sbc.w	r9, r3, r1
 80084e2:	f04f 0200 	mov.w	r2, #0
 80084e6:	f04f 0300 	mov.w	r3, #0
 80084ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80084ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80084f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80084f6:	4690      	mov	r8, r2
 80084f8:	4699      	mov	r9, r3
 80084fa:	4623      	mov	r3, r4
 80084fc:	eb18 0303 	adds.w	r3, r8, r3
 8008500:	60bb      	str	r3, [r7, #8]
 8008502:	462b      	mov	r3, r5
 8008504:	eb49 0303 	adc.w	r3, r9, r3
 8008508:	60fb      	str	r3, [r7, #12]
 800850a:	f04f 0200 	mov.w	r2, #0
 800850e:	f04f 0300 	mov.w	r3, #0
 8008512:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008516:	4629      	mov	r1, r5
 8008518:	024b      	lsls	r3, r1, #9
 800851a:	4621      	mov	r1, r4
 800851c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008520:	4621      	mov	r1, r4
 8008522:	024a      	lsls	r2, r1, #9
 8008524:	4610      	mov	r0, r2
 8008526:	4619      	mov	r1, r3
 8008528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800852a:	2200      	movs	r2, #0
 800852c:	62bb      	str	r3, [r7, #40]	; 0x28
 800852e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008530:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008534:	f7f8 faa6 	bl	8000a84 <__aeabi_uldivmod>
 8008538:	4602      	mov	r2, r0
 800853a:	460b      	mov	r3, r1
 800853c:	4613      	mov	r3, r2
 800853e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008540:	e058      	b.n	80085f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008542:	4b38      	ldr	r3, [pc, #224]	; (8008624 <HAL_RCC_GetSysClockFreq+0x200>)
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	099b      	lsrs	r3, r3, #6
 8008548:	2200      	movs	r2, #0
 800854a:	4618      	mov	r0, r3
 800854c:	4611      	mov	r1, r2
 800854e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008552:	623b      	str	r3, [r7, #32]
 8008554:	2300      	movs	r3, #0
 8008556:	627b      	str	r3, [r7, #36]	; 0x24
 8008558:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800855c:	4642      	mov	r2, r8
 800855e:	464b      	mov	r3, r9
 8008560:	f04f 0000 	mov.w	r0, #0
 8008564:	f04f 0100 	mov.w	r1, #0
 8008568:	0159      	lsls	r1, r3, #5
 800856a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800856e:	0150      	lsls	r0, r2, #5
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4641      	mov	r1, r8
 8008576:	ebb2 0a01 	subs.w	sl, r2, r1
 800857a:	4649      	mov	r1, r9
 800857c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008580:	f04f 0200 	mov.w	r2, #0
 8008584:	f04f 0300 	mov.w	r3, #0
 8008588:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800858c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008590:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008594:	ebb2 040a 	subs.w	r4, r2, sl
 8008598:	eb63 050b 	sbc.w	r5, r3, fp
 800859c:	f04f 0200 	mov.w	r2, #0
 80085a0:	f04f 0300 	mov.w	r3, #0
 80085a4:	00eb      	lsls	r3, r5, #3
 80085a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085aa:	00e2      	lsls	r2, r4, #3
 80085ac:	4614      	mov	r4, r2
 80085ae:	461d      	mov	r5, r3
 80085b0:	4643      	mov	r3, r8
 80085b2:	18e3      	adds	r3, r4, r3
 80085b4:	603b      	str	r3, [r7, #0]
 80085b6:	464b      	mov	r3, r9
 80085b8:	eb45 0303 	adc.w	r3, r5, r3
 80085bc:	607b      	str	r3, [r7, #4]
 80085be:	f04f 0200 	mov.w	r2, #0
 80085c2:	f04f 0300 	mov.w	r3, #0
 80085c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80085ca:	4629      	mov	r1, r5
 80085cc:	028b      	lsls	r3, r1, #10
 80085ce:	4621      	mov	r1, r4
 80085d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80085d4:	4621      	mov	r1, r4
 80085d6:	028a      	lsls	r2, r1, #10
 80085d8:	4610      	mov	r0, r2
 80085da:	4619      	mov	r1, r3
 80085dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085de:	2200      	movs	r2, #0
 80085e0:	61bb      	str	r3, [r7, #24]
 80085e2:	61fa      	str	r2, [r7, #28]
 80085e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085e8:	f7f8 fa4c 	bl	8000a84 <__aeabi_uldivmod>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	4613      	mov	r3, r2
 80085f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80085f4:	4b0b      	ldr	r3, [pc, #44]	; (8008624 <HAL_RCC_GetSysClockFreq+0x200>)
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	0c1b      	lsrs	r3, r3, #16
 80085fa:	f003 0303 	and.w	r3, r3, #3
 80085fe:	3301      	adds	r3, #1
 8008600:	005b      	lsls	r3, r3, #1
 8008602:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008604:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008608:	fbb2 f3f3 	udiv	r3, r2, r3
 800860c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800860e:	e002      	b.n	8008616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008610:	4b05      	ldr	r3, [pc, #20]	; (8008628 <HAL_RCC_GetSysClockFreq+0x204>)
 8008612:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008618:	4618      	mov	r0, r3
 800861a:	3750      	adds	r7, #80	; 0x50
 800861c:	46bd      	mov	sp, r7
 800861e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008622:	bf00      	nop
 8008624:	40023800 	.word	0x40023800
 8008628:	00f42400 	.word	0x00f42400
 800862c:	007a1200 	.word	0x007a1200

08008630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008630:	b480      	push	{r7}
 8008632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008634:	4b03      	ldr	r3, [pc, #12]	; (8008644 <HAL_RCC_GetHCLKFreq+0x14>)
 8008636:	681b      	ldr	r3, [r3, #0]
}
 8008638:	4618      	mov	r0, r3
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	20000000 	.word	0x20000000

08008648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800864c:	f7ff fff0 	bl	8008630 <HAL_RCC_GetHCLKFreq>
 8008650:	4602      	mov	r2, r0
 8008652:	4b05      	ldr	r3, [pc, #20]	; (8008668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	0a9b      	lsrs	r3, r3, #10
 8008658:	f003 0307 	and.w	r3, r3, #7
 800865c:	4903      	ldr	r1, [pc, #12]	; (800866c <HAL_RCC_GetPCLK1Freq+0x24>)
 800865e:	5ccb      	ldrb	r3, [r1, r3]
 8008660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008664:	4618      	mov	r0, r3
 8008666:	bd80      	pop	{r7, pc}
 8008668:	40023800 	.word	0x40023800
 800866c:	0800fc54 	.word	0x0800fc54

08008670 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008678:	2300      	movs	r3, #0
 800867a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800867c:	2300      	movs	r3, #0
 800867e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 0301 	and.w	r3, r3, #1
 8008688:	2b00      	cmp	r3, #0
 800868a:	d105      	bne.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008694:	2b00      	cmp	r3, #0
 8008696:	d038      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008698:	4b68      	ldr	r3, [pc, #416]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800869a:	2200      	movs	r2, #0
 800869c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800869e:	f7fa fb79 	bl	8002d94 <HAL_GetTick>
 80086a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80086a4:	e008      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80086a6:	f7fa fb75 	bl	8002d94 <HAL_GetTick>
 80086aa:	4602      	mov	r2, r0
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d901      	bls.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e0bd      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80086b8:	4b61      	ldr	r3, [pc, #388]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1f0      	bne.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685a      	ldr	r2, [r3, #4]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	019b      	lsls	r3, r3, #6
 80086ce:	431a      	orrs	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	071b      	lsls	r3, r3, #28
 80086d6:	495a      	ldr	r1, [pc, #360]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086d8:	4313      	orrs	r3, r2
 80086da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80086de:	4b57      	ldr	r3, [pc, #348]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80086e0:	2201      	movs	r2, #1
 80086e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80086e4:	f7fa fb56 	bl	8002d94 <HAL_GetTick>
 80086e8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80086ea:	e008      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80086ec:	f7fa fb52 	bl	8002d94 <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d901      	bls.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086fa:	2303      	movs	r3, #3
 80086fc:	e09a      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80086fe:	4b50      	ldr	r3, [pc, #320]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008706:	2b00      	cmp	r3, #0
 8008708:	d0f0      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 0302 	and.w	r3, r3, #2
 8008712:	2b00      	cmp	r3, #0
 8008714:	f000 8083 	beq.w	800881e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008718:	2300      	movs	r3, #0
 800871a:	60fb      	str	r3, [r7, #12]
 800871c:	4b48      	ldr	r3, [pc, #288]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800871e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008720:	4a47      	ldr	r2, [pc, #284]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008726:	6413      	str	r3, [r2, #64]	; 0x40
 8008728:	4b45      	ldr	r3, [pc, #276]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800872a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008730:	60fb      	str	r3, [r7, #12]
 8008732:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008734:	4b43      	ldr	r3, [pc, #268]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a42      	ldr	r2, [pc, #264]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800873a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800873e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008740:	f7fa fb28 	bl	8002d94 <HAL_GetTick>
 8008744:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008746:	e008      	b.n	800875a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008748:	f7fa fb24 	bl	8002d94 <HAL_GetTick>
 800874c:	4602      	mov	r2, r0
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	2b02      	cmp	r3, #2
 8008754:	d901      	bls.n	800875a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e06c      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800875a:	4b3a      	ldr	r3, [pc, #232]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008762:	2b00      	cmp	r3, #0
 8008764:	d0f0      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008766:	4b36      	ldr	r3, [pc, #216]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800876a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800876e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d02f      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	429a      	cmp	r2, r3
 8008782:	d028      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008784:	4b2e      	ldr	r3, [pc, #184]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800878c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800878e:	4b2e      	ldr	r3, [pc, #184]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008790:	2201      	movs	r2, #1
 8008792:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008794:	4b2c      	ldr	r3, [pc, #176]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008796:	2200      	movs	r2, #0
 8008798:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800879a:	4a29      	ldr	r2, [pc, #164]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80087a0:	4b27      	ldr	r3, [pc, #156]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a4:	f003 0301 	and.w	r3, r3, #1
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d114      	bne.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80087ac:	f7fa faf2 	bl	8002d94 <HAL_GetTick>
 80087b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087b2:	e00a      	b.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087b4:	f7fa faee 	bl	8002d94 <HAL_GetTick>
 80087b8:	4602      	mov	r2, r0
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	f241 3288 	movw	r2, #5000	; 0x1388
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d901      	bls.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e034      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087ca:	4b1d      	ldr	r3, [pc, #116]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ce:	f003 0302 	and.w	r3, r3, #2
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d0ee      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087e2:	d10d      	bne.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80087e4:	4b16      	ldr	r3, [pc, #88]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80087f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087f8:	4911      	ldr	r1, [pc, #68]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	608b      	str	r3, [r1, #8]
 80087fe:	e005      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8008800:	4b0f      	ldr	r3, [pc, #60]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	4a0e      	ldr	r2, [pc, #56]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008806:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800880a:	6093      	str	r3, [r2, #8]
 800880c:	4b0c      	ldr	r3, [pc, #48]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800880e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008818:	4909      	ldr	r1, [pc, #36]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800881a:	4313      	orrs	r3, r2
 800881c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 0308 	and.w	r3, r3, #8
 8008826:	2b00      	cmp	r3, #0
 8008828:	d003      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	7d1a      	ldrb	r2, [r3, #20]
 800882e:	4b07      	ldr	r3, [pc, #28]	; (800884c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8008830:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	42470068 	.word	0x42470068
 8008840:	40023800 	.word	0x40023800
 8008844:	40007000 	.word	0x40007000
 8008848:	42470e40 	.word	0x42470e40
 800884c:	424711e0 	.word	0x424711e0

08008850 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008850:	b480      	push	{r7}
 8008852:	b085      	sub	sp, #20
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2203      	movs	r2, #3
 800885c:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800885e:	4b1c      	ldr	r3, [pc, #112]	; (80088d0 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8008860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008864:	099b      	lsrs	r3, r3, #6
 8008866:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800886e:	4b18      	ldr	r3, [pc, #96]	; (80088d0 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8008870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008874:	0f1b      	lsrs	r3, r3, #28
 8008876:	f003 0207 	and.w	r2, r3, #7
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 800887e:	4b14      	ldr	r3, [pc, #80]	; (80088d0 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8008880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008884:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800888c:	4b10      	ldr	r3, [pc, #64]	; (80088d0 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008894:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8008896:	4b0e      	ldr	r3, [pc, #56]	; (80088d0 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8008898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800889a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	431a      	orrs	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 80088a6:	4b0a      	ldr	r3, [pc, #40]	; (80088d0 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80088a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d103      	bne.n	80088bc <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80088ba:	e002      	b.n	80088c2 <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	751a      	strb	r2, [r3, #20]
}
 80088c2:	bf00      	nop
 80088c4:	3714      	adds	r7, #20
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	40023800 	.word	0x40023800

080088d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b087      	sub	sp, #28
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80088dc:	2300      	movs	r3, #0
 80088de:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80088e0:	2300      	movs	r3, #0
 80088e2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80088e4:	2300      	movs	r3, #0
 80088e6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80088e8:	2300      	movs	r3, #0
 80088ea:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d140      	bne.n	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80088f2:	4b24      	ldr	r3, [pc, #144]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088fa:	60fb      	str	r3, [r7, #12]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d005      	beq.n	800890e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d131      	bne.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008908:	4b1f      	ldr	r3, [pc, #124]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800890a:	617b      	str	r3, [r7, #20]
          break;
 800890c:	e031      	b.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800890e:	4b1d      	ldr	r3, [pc, #116]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008916:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800891a:	d109      	bne.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800891c:	4b19      	ldr	r3, [pc, #100]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800891e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008922:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008926:	4a19      	ldr	r2, [pc, #100]	; (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008928:	fbb2 f3f3 	udiv	r3, r2, r3
 800892c:	613b      	str	r3, [r7, #16]
 800892e:	e008      	b.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008930:	4b14      	ldr	r3, [pc, #80]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800893a:	4a15      	ldr	r2, [pc, #84]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800893c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008940:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008942:	4b10      	ldr	r3, [pc, #64]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008948:	099b      	lsrs	r3, r3, #6
 800894a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	fb02 f303 	mul.w	r3, r2, r3
 8008954:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008956:	4b0b      	ldr	r3, [pc, #44]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800895c:	0f1b      	lsrs	r3, r3, #28
 800895e:	f003 0307 	and.w	r3, r3, #7
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	fbb2 f3f3 	udiv	r3, r2, r3
 8008968:	617b      	str	r3, [r7, #20]
          break;
 800896a:	e002      	b.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800896c:	2300      	movs	r3, #0
 800896e:	617b      	str	r3, [r7, #20]
          break;
 8008970:	bf00      	nop
        }
      }
      break;
 8008972:	bf00      	nop
    }
  }
  return frequency;
 8008974:	697b      	ldr	r3, [r7, #20]
}
 8008976:	4618      	mov	r0, r3
 8008978:	371c      	adds	r7, #28
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	40023800 	.word	0x40023800
 8008988:	00bb8000 	.word	0x00bb8000
 800898c:	007a1200 	.word	0x007a1200
 8008990:	00f42400 	.word	0x00f42400

08008994 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008994:	b084      	sub	sp, #16
 8008996:	b580      	push	{r7, lr}
 8008998:	b084      	sub	sp, #16
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
 800899e:	f107 001c 	add.w	r0, r7, #28
 80089a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80089a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d122      	bne.n	80089f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80089c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80089d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d105      	bne.n	80089e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f9c0 	bl	8008d6c <USB_CoreReset>
 80089ec:	4603      	mov	r3, r0
 80089ee:	73fb      	strb	r3, [r7, #15]
 80089f0:	e01a      	b.n	8008a28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f9b4 	bl	8008d6c <USB_CoreReset>
 8008a04:	4603      	mov	r3, r0
 8008a06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d106      	bne.n	8008a1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	639a      	str	r2, [r3, #56]	; 0x38
 8008a1a:	e005      	b.n	8008a28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d10b      	bne.n	8008a46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	f043 0206 	orr.w	r2, r3, #6
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	f043 0220 	orr.w	r2, r3, #32
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a52:	b004      	add	sp, #16
 8008a54:	4770      	bx	lr

08008a56 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a56:	b480      	push	{r7}
 8008a58:	b083      	sub	sp, #12
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	f043 0201 	orr.w	r2, r3, #1
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	f023 0201 	bic.w	r2, r3, #1
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	370c      	adds	r7, #12
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr

08008a9a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b084      	sub	sp, #16
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ab6:	78fb      	ldrb	r3, [r7, #3]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d115      	bne.n	8008ae8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008ac8:	2001      	movs	r0, #1
 8008aca:	f7fa f96f 	bl	8002dac <HAL_Delay>
      ms++;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f93a 	bl	8008d4e <USB_GetMode>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d01e      	beq.n	8008b1e <USB_SetCurrentMode+0x84>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2b31      	cmp	r3, #49	; 0x31
 8008ae4:	d9f0      	bls.n	8008ac8 <USB_SetCurrentMode+0x2e>
 8008ae6:	e01a      	b.n	8008b1e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008ae8:	78fb      	ldrb	r3, [r7, #3]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d115      	bne.n	8008b1a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008afa:	2001      	movs	r0, #1
 8008afc:	f7fa f956 	bl	8002dac <HAL_Delay>
      ms++;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	3301      	adds	r3, #1
 8008b04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f921 	bl	8008d4e <USB_GetMode>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d005      	beq.n	8008b1e <USB_SetCurrentMode+0x84>
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2b31      	cmp	r3, #49	; 0x31
 8008b16:	d9f0      	bls.n	8008afa <USB_SetCurrentMode+0x60>
 8008b18:	e001      	b.n	8008b1e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e005      	b.n	8008b2a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2b32      	cmp	r3, #50	; 0x32
 8008b22:	d101      	bne.n	8008b28 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e000      	b.n	8008b2a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
	...

08008b34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	3301      	adds	r3, #1
 8008b46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	4a13      	ldr	r2, [pc, #76]	; (8008b98 <USB_FlushTxFifo+0x64>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d901      	bls.n	8008b54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008b50:	2303      	movs	r3, #3
 8008b52:	e01b      	b.n	8008b8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	daf2      	bge.n	8008b42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	019b      	lsls	r3, r3, #6
 8008b64:	f043 0220 	orr.w	r2, r3, #32
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	4a08      	ldr	r2, [pc, #32]	; (8008b98 <USB_FlushTxFifo+0x64>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d901      	bls.n	8008b7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e006      	b.n	8008b8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	f003 0320 	and.w	r3, r3, #32
 8008b86:	2b20      	cmp	r3, #32
 8008b88:	d0f0      	beq.n	8008b6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3714      	adds	r7, #20
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr
 8008b98:	00030d40 	.word	0x00030d40

08008b9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	3301      	adds	r3, #1
 8008bac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	4a11      	ldr	r2, [pc, #68]	; (8008bf8 <USB_FlushRxFifo+0x5c>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d901      	bls.n	8008bba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008bb6:	2303      	movs	r3, #3
 8008bb8:	e018      	b.n	8008bec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	daf2      	bge.n	8008ba8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2210      	movs	r2, #16
 8008bca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	4a08      	ldr	r2, [pc, #32]	; (8008bf8 <USB_FlushRxFifo+0x5c>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d901      	bls.n	8008bde <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008bda:	2303      	movs	r3, #3
 8008bdc:	e006      	b.n	8008bec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	f003 0310 	and.w	r3, r3, #16
 8008be6:	2b10      	cmp	r3, #16
 8008be8:	d0f0      	beq.n	8008bcc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	00030d40 	.word	0x00030d40

08008bfc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b089      	sub	sp, #36	; 0x24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	4611      	mov	r1, r2
 8008c08:	461a      	mov	r2, r3
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	71fb      	strb	r3, [r7, #7]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008c1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d123      	bne.n	8008c6a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008c22:	88bb      	ldrh	r3, [r7, #4]
 8008c24:	3303      	adds	r3, #3
 8008c26:	089b      	lsrs	r3, r3, #2
 8008c28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	61bb      	str	r3, [r7, #24]
 8008c2e:	e018      	b.n	8008c62 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008c30:	79fb      	ldrb	r3, [r7, #7]
 8008c32:	031a      	lsls	r2, r3, #12
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	3301      	adds	r3, #1
 8008c48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	3301      	adds	r3, #1
 8008c54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	61bb      	str	r3, [r7, #24]
 8008c62:	69ba      	ldr	r2, [r7, #24]
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d3e2      	bcc.n	8008c30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3724      	adds	r7, #36	; 0x24
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b08b      	sub	sp, #44	; 0x2c
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	4613      	mov	r3, r2
 8008c84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008c8e:	88fb      	ldrh	r3, [r7, #6]
 8008c90:	089b      	lsrs	r3, r3, #2
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008c96:	88fb      	ldrh	r3, [r7, #6]
 8008c98:	f003 0303 	and.w	r3, r3, #3
 8008c9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	623b      	str	r3, [r7, #32]
 8008ca2:	e014      	b.n	8008cce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cae:	601a      	str	r2, [r3, #0]
    pDest++;
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb8:	3301      	adds	r3, #1
 8008cba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008cc8:	6a3b      	ldr	r3, [r7, #32]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	623b      	str	r3, [r7, #32]
 8008cce:	6a3a      	ldr	r2, [r7, #32]
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d3e6      	bcc.n	8008ca4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008cd6:	8bfb      	ldrh	r3, [r7, #30]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d01e      	beq.n	8008d1a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	f107 0310 	add.w	r3, r7, #16
 8008cec:	6812      	ldr	r2, [r2, #0]
 8008cee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008cf0:	693a      	ldr	r2, [r7, #16]
 8008cf2:	6a3b      	ldr	r3, [r7, #32]
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	00db      	lsls	r3, r3, #3
 8008cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8008cfc:	b2da      	uxtb	r2, r3
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d00:	701a      	strb	r2, [r3, #0]
      i++;
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	3301      	adds	r3, #1
 8008d06:	623b      	str	r3, [r7, #32]
      pDest++;
 8008d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008d0e:	8bfb      	ldrh	r3, [r7, #30]
 8008d10:	3b01      	subs	r3, #1
 8008d12:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008d14:	8bfb      	ldrh	r3, [r7, #30]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1ea      	bne.n	8008cf0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	372c      	adds	r7, #44	; 0x2c
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	695b      	ldr	r3, [r3, #20]
 8008d34:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008d40:	68fb      	ldr	r3, [r7, #12]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3714      	adds	r7, #20
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr

08008d4e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008d4e:	b480      	push	{r7}
 8008d50:	b083      	sub	sp, #12
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	f003 0301 	and.w	r3, r3, #1
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
	...

08008d6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d74:	2300      	movs	r3, #0
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	4a13      	ldr	r2, [pc, #76]	; (8008dd0 <USB_CoreReset+0x64>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d901      	bls.n	8008d8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e01b      	b.n	8008dc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	daf2      	bge.n	8008d78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008d92:	2300      	movs	r3, #0
 8008d94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	f043 0201 	orr.w	r2, r3, #1
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	3301      	adds	r3, #1
 8008da6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	4a09      	ldr	r2, [pc, #36]	; (8008dd0 <USB_CoreReset+0x64>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d901      	bls.n	8008db4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	e006      	b.n	8008dc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	f003 0301 	and.w	r3, r3, #1
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d0f0      	beq.n	8008da2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	00030d40 	.word	0x00030d40

08008dd4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008dd4:	b084      	sub	sp, #16
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b086      	sub	sp, #24
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008de2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008df4:	461a      	mov	r2, r3
 8008df6:	2300      	movs	r3, #0
 8008df8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e16:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d018      	beq.n	8008e5c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d10a      	bne.n	8008e46 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e3e:	f043 0304 	orr.w	r3, r3, #4
 8008e42:	6013      	str	r3, [r2, #0]
 8008e44:	e014      	b.n	8008e70 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e54:	f023 0304 	bic.w	r3, r3, #4
 8008e58:	6013      	str	r3, [r2, #0]
 8008e5a:	e009      	b.n	8008e70 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e6a:	f023 0304 	bic.w	r3, r3, #4
 8008e6e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e70:	2110      	movs	r1, #16
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7ff fe5e 	bl	8008b34 <USB_FlushTxFifo>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d001      	beq.n	8008e82 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7ff fe8a 	bl	8008b9c <USB_FlushRxFifo>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d001      	beq.n	8008e92 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008e92:	2300      	movs	r3, #0
 8008e94:	613b      	str	r3, [r7, #16]
 8008e96:	e015      	b.n	8008ec4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	015a      	lsls	r2, r3, #5
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8008eaa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	015a      	lsls	r2, r3, #5
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eb8:	461a      	mov	r2, r3
 8008eba:	2300      	movs	r3, #0
 8008ebc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	613b      	str	r3, [r7, #16]
 8008ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d3e5      	bcc.n	8008e98 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00b      	beq.n	8008efe <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008eec:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a13      	ldr	r2, [pc, #76]	; (8008f40 <USB_HostInit+0x16c>)
 8008ef2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a13      	ldr	r2, [pc, #76]	; (8008f44 <USB_HostInit+0x170>)
 8008ef8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008efc:	e009      	b.n	8008f12 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2280      	movs	r2, #128	; 0x80
 8008f02:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a10      	ldr	r2, [pc, #64]	; (8008f48 <USB_HostInit+0x174>)
 8008f08:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a0f      	ldr	r2, [pc, #60]	; (8008f4c <USB_HostInit+0x178>)
 8008f0e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d105      	bne.n	8008f24 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	f043 0210 	orr.w	r2, r3, #16
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	699a      	ldr	r2, [r3, #24]
 8008f28:	4b09      	ldr	r3, [pc, #36]	; (8008f50 <USB_HostInit+0x17c>)
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3718      	adds	r7, #24
 8008f36:	46bd      	mov	sp, r7
 8008f38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f3c:	b004      	add	sp, #16
 8008f3e:	4770      	bx	lr
 8008f40:	01000200 	.word	0x01000200
 8008f44:	00e00300 	.word	0x00e00300
 8008f48:	00600080 	.word	0x00600080
 8008f4c:	004000e0 	.word	0x004000e0
 8008f50:	a3200008 	.word	0xa3200008

08008f54 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f72:	f023 0303 	bic.w	r3, r3, #3
 8008f76:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	78fb      	ldrb	r3, [r7, #3]
 8008f82:	f003 0303 	and.w	r3, r3, #3
 8008f86:	68f9      	ldr	r1, [r7, #12]
 8008f88:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d107      	bne.n	8008fa6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008fa2:	6053      	str	r3, [r2, #4]
 8008fa4:	e009      	b.n	8008fba <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008fa6:	78fb      	ldrb	r3, [r7, #3]
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d106      	bne.n	8008fba <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	f241 7370 	movw	r3, #6000	; 0x1770
 8008fb8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3714      	adds	r7, #20
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008fe8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ff6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008ff8:	2064      	movs	r0, #100	; 0x64
 8008ffa:	f7f9 fed7 	bl	8002dac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009006:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800900a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800900c:	200a      	movs	r0, #10
 800900e:	f7f9 fecd 	bl	8002dac <HAL_Delay>

  return HAL_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800901c:	b480      	push	{r7}
 800901e:	b085      	sub	sp, #20
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	460b      	mov	r3, r1
 8009026:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800902c:	2300      	movs	r3, #0
 800902e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009040:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009048:	2b00      	cmp	r3, #0
 800904a:	d109      	bne.n	8009060 <USB_DriveVbus+0x44>
 800904c:	78fb      	ldrb	r3, [r7, #3]
 800904e:	2b01      	cmp	r3, #1
 8009050:	d106      	bne.n	8009060 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800905a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800905e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800906a:	d109      	bne.n	8009080 <USB_DriveVbus+0x64>
 800906c:	78fb      	ldrb	r3, [r7, #3]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d106      	bne.n	8009080 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800907a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800907e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3714      	adds	r7, #20
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800908e:	b480      	push	{r7}
 8009090:	b085      	sub	sp, #20
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800909a:	2300      	movs	r3, #0
 800909c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	0c5b      	lsrs	r3, r3, #17
 80090ac:	f003 0303 	and.w	r3, r3, #3
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80090bc:	b480      	push	{r7}
 80090be:	b085      	sub	sp, #20
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	b29b      	uxth	r3, r3
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3714      	adds	r7, #20
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr
	...

080090e0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b088      	sub	sp, #32
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	4608      	mov	r0, r1
 80090ea:	4611      	mov	r1, r2
 80090ec:	461a      	mov	r2, r3
 80090ee:	4603      	mov	r3, r0
 80090f0:	70fb      	strb	r3, [r7, #3]
 80090f2:	460b      	mov	r3, r1
 80090f4:	70bb      	strb	r3, [r7, #2]
 80090f6:	4613      	mov	r3, r2
 80090f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009102:	78fb      	ldrb	r3, [r7, #3]
 8009104:	015a      	lsls	r2, r3, #5
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	4413      	add	r3, r2
 800910a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800910e:	461a      	mov	r2, r3
 8009110:	f04f 33ff 	mov.w	r3, #4294967295
 8009114:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009116:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800911a:	2b03      	cmp	r3, #3
 800911c:	d87e      	bhi.n	800921c <USB_HC_Init+0x13c>
 800911e:	a201      	add	r2, pc, #4	; (adr r2, 8009124 <USB_HC_Init+0x44>)
 8009120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009124:	08009135 	.word	0x08009135
 8009128:	080091df 	.word	0x080091df
 800912c:	08009135 	.word	0x08009135
 8009130:	080091a1 	.word	0x080091a1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009134:	78fb      	ldrb	r3, [r7, #3]
 8009136:	015a      	lsls	r2, r3, #5
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	4413      	add	r3, r2
 800913c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009140:	461a      	mov	r2, r3
 8009142:	f240 439d 	movw	r3, #1181	; 0x49d
 8009146:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009148:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800914c:	2b00      	cmp	r3, #0
 800914e:	da10      	bge.n	8009172 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009150:	78fb      	ldrb	r3, [r7, #3]
 8009152:	015a      	lsls	r2, r3, #5
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	4413      	add	r3, r2
 8009158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	78fa      	ldrb	r2, [r7, #3]
 8009160:	0151      	lsls	r1, r2, #5
 8009162:	693a      	ldr	r2, [r7, #16]
 8009164:	440a      	add	r2, r1
 8009166:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800916a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800916e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009170:	e057      	b.n	8009222 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800917a:	2b00      	cmp	r3, #0
 800917c:	d051      	beq.n	8009222 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800917e:	78fb      	ldrb	r3, [r7, #3]
 8009180:	015a      	lsls	r2, r3, #5
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	4413      	add	r3, r2
 8009186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	78fa      	ldrb	r2, [r7, #3]
 800918e:	0151      	lsls	r1, r2, #5
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	440a      	add	r2, r1
 8009194:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009198:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800919c:	60d3      	str	r3, [r2, #12]
      break;
 800919e:	e040      	b.n	8009222 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80091a0:	78fb      	ldrb	r3, [r7, #3]
 80091a2:	015a      	lsls	r2, r3, #5
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	4413      	add	r3, r2
 80091a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091ac:	461a      	mov	r2, r3
 80091ae:	f240 639d 	movw	r3, #1693	; 0x69d
 80091b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80091b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	da34      	bge.n	8009226 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80091bc:	78fb      	ldrb	r3, [r7, #3]
 80091be:	015a      	lsls	r2, r3, #5
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	4413      	add	r3, r2
 80091c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	78fa      	ldrb	r2, [r7, #3]
 80091cc:	0151      	lsls	r1, r2, #5
 80091ce:	693a      	ldr	r2, [r7, #16]
 80091d0:	440a      	add	r2, r1
 80091d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091da:	60d3      	str	r3, [r2, #12]
      }

      break;
 80091dc:	e023      	b.n	8009226 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80091de:	78fb      	ldrb	r3, [r7, #3]
 80091e0:	015a      	lsls	r2, r3, #5
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	4413      	add	r3, r2
 80091e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091ea:	461a      	mov	r2, r3
 80091ec:	f240 2325 	movw	r3, #549	; 0x225
 80091f0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80091f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	da17      	bge.n	800922a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80091fa:	78fb      	ldrb	r3, [r7, #3]
 80091fc:	015a      	lsls	r2, r3, #5
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	4413      	add	r3, r2
 8009202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	78fa      	ldrb	r2, [r7, #3]
 800920a:	0151      	lsls	r1, r2, #5
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	440a      	add	r2, r1
 8009210:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009214:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009218:	60d3      	str	r3, [r2, #12]
      }
      break;
 800921a:	e006      	b.n	800922a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	77fb      	strb	r3, [r7, #31]
      break;
 8009220:	e004      	b.n	800922c <USB_HC_Init+0x14c>
      break;
 8009222:	bf00      	nop
 8009224:	e002      	b.n	800922c <USB_HC_Init+0x14c>
      break;
 8009226:	bf00      	nop
 8009228:	e000      	b.n	800922c <USB_HC_Init+0x14c>
      break;
 800922a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800922c:	78fb      	ldrb	r3, [r7, #3]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	4413      	add	r3, r2
 8009234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	78fa      	ldrb	r2, [r7, #3]
 800923c:	0151      	lsls	r1, r2, #5
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	440a      	add	r2, r1
 8009242:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009246:	f043 0302 	orr.w	r3, r3, #2
 800924a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009252:	699a      	ldr	r2, [r3, #24]
 8009254:	78fb      	ldrb	r3, [r7, #3]
 8009256:	f003 030f 	and.w	r3, r3, #15
 800925a:	2101      	movs	r1, #1
 800925c:	fa01 f303 	lsl.w	r3, r1, r3
 8009260:	6939      	ldr	r1, [r7, #16]
 8009262:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009266:	4313      	orrs	r3, r2
 8009268:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009276:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800927a:	2b00      	cmp	r3, #0
 800927c:	da03      	bge.n	8009286 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800927e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009282:	61bb      	str	r3, [r7, #24]
 8009284:	e001      	b.n	800928a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8009286:	2300      	movs	r3, #0
 8009288:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7ff feff 	bl	800908e <USB_GetHostSpeed>
 8009290:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009292:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009296:	2b02      	cmp	r3, #2
 8009298:	d106      	bne.n	80092a8 <USB_HC_Init+0x1c8>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2b02      	cmp	r3, #2
 800929e:	d003      	beq.n	80092a8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80092a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80092a4:	617b      	str	r3, [r7, #20]
 80092a6:	e001      	b.n	80092ac <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80092a8:	2300      	movs	r3, #0
 80092aa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80092ac:	787b      	ldrb	r3, [r7, #1]
 80092ae:	059b      	lsls	r3, r3, #22
 80092b0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80092b4:	78bb      	ldrb	r3, [r7, #2]
 80092b6:	02db      	lsls	r3, r3, #11
 80092b8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80092bc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80092be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80092c2:	049b      	lsls	r3, r3, #18
 80092c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80092c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80092ca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80092cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80092d0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80092d6:	78fb      	ldrb	r3, [r7, #3]
 80092d8:	0159      	lsls	r1, r3, #5
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	440b      	add	r3, r1
 80092de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092e2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80092e8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80092ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80092ee:	2b03      	cmp	r3, #3
 80092f0:	d003      	beq.n	80092fa <USB_HC_Init+0x21a>
 80092f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d10f      	bne.n	800931a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80092fa:	78fb      	ldrb	r3, [r7, #3]
 80092fc:	015a      	lsls	r2, r3, #5
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	4413      	add	r3, r2
 8009302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	78fa      	ldrb	r2, [r7, #3]
 800930a:	0151      	lsls	r1, r2, #5
 800930c:	693a      	ldr	r2, [r7, #16]
 800930e:	440a      	add	r2, r1
 8009310:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009314:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009318:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800931a:	7ffb      	ldrb	r3, [r7, #31]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3720      	adds	r7, #32
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b08c      	sub	sp, #48	; 0x30
 8009328:	af02      	add	r7, sp, #8
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	4613      	mov	r3, r2
 8009330:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	785b      	ldrb	r3, [r3, #1]
 800933a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800933c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009340:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800934a:	2b00      	cmp	r3, #0
 800934c:	d02d      	beq.n	80093aa <USB_HC_StartXfer+0x86>
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	791b      	ldrb	r3, [r3, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d129      	bne.n	80093aa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009356:	79fb      	ldrb	r3, [r7, #7]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d117      	bne.n	800938c <USB_HC_StartXfer+0x68>
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	79db      	ldrb	r3, [r3, #7]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d003      	beq.n	800936c <USB_HC_StartXfer+0x48>
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	79db      	ldrb	r3, [r3, #7]
 8009368:	2b02      	cmp	r3, #2
 800936a:	d10f      	bne.n	800938c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	015a      	lsls	r2, r3, #5
 8009370:	6a3b      	ldr	r3, [r7, #32]
 8009372:	4413      	add	r3, r2
 8009374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	69fa      	ldr	r2, [r7, #28]
 800937c:	0151      	lsls	r1, r2, #5
 800937e:	6a3a      	ldr	r2, [r7, #32]
 8009380:	440a      	add	r2, r1
 8009382:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800938a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800938c:	79fb      	ldrb	r3, [r7, #7]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d10b      	bne.n	80093aa <USB_HC_StartXfer+0x86>
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	795b      	ldrb	r3, [r3, #5]
 8009396:	2b01      	cmp	r3, #1
 8009398:	d107      	bne.n	80093aa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	785b      	ldrb	r3, [r3, #1]
 800939e:	4619      	mov	r1, r3
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f000 fa0f 	bl	80097c4 <USB_DoPing>
      return HAL_OK;
 80093a6:	2300      	movs	r3, #0
 80093a8:	e0f8      	b.n	800959c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	695b      	ldr	r3, [r3, #20]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d018      	beq.n	80093e4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	695b      	ldr	r3, [r3, #20]
 80093b6:	68ba      	ldr	r2, [r7, #8]
 80093b8:	8912      	ldrh	r2, [r2, #8]
 80093ba:	4413      	add	r3, r2
 80093bc:	3b01      	subs	r3, #1
 80093be:	68ba      	ldr	r2, [r7, #8]
 80093c0:	8912      	ldrh	r2, [r2, #8]
 80093c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80093c6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80093c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80093ca:	8b7b      	ldrh	r3, [r7, #26]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d90b      	bls.n	80093e8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80093d0:	8b7b      	ldrh	r3, [r7, #26]
 80093d2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80093d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80093d6:	68ba      	ldr	r2, [r7, #8]
 80093d8:	8912      	ldrh	r2, [r2, #8]
 80093da:	fb03 f202 	mul.w	r2, r3, r2
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	611a      	str	r2, [r3, #16]
 80093e2:	e001      	b.n	80093e8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80093e4:	2301      	movs	r3, #1
 80093e6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	78db      	ldrb	r3, [r3, #3]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d007      	beq.n	8009400 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80093f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80093f2:	68ba      	ldr	r2, [r7, #8]
 80093f4:	8912      	ldrh	r2, [r2, #8]
 80093f6:	fb03 f202 	mul.w	r2, r3, r2
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	611a      	str	r2, [r3, #16]
 80093fe:	e003      	b.n	8009408 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	695a      	ldr	r2, [r3, #20]
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009410:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009412:	04d9      	lsls	r1, r3, #19
 8009414:	4b63      	ldr	r3, [pc, #396]	; (80095a4 <USB_HC_StartXfer+0x280>)
 8009416:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009418:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	7a9b      	ldrb	r3, [r3, #10]
 800941e:	075b      	lsls	r3, r3, #29
 8009420:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009424:	69f9      	ldr	r1, [r7, #28]
 8009426:	0148      	lsls	r0, r1, #5
 8009428:	6a39      	ldr	r1, [r7, #32]
 800942a:	4401      	add	r1, r0
 800942c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009430:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009432:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009434:	79fb      	ldrb	r3, [r7, #7]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d009      	beq.n	800944e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	68d9      	ldr	r1, [r3, #12]
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	015a      	lsls	r2, r3, #5
 8009442:	6a3b      	ldr	r3, [r7, #32]
 8009444:	4413      	add	r3, r2
 8009446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800944a:	460a      	mov	r2, r1
 800944c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	f003 0301 	and.w	r3, r3, #1
 800945a:	2b00      	cmp	r3, #0
 800945c:	bf0c      	ite	eq
 800945e:	2301      	moveq	r3, #1
 8009460:	2300      	movne	r3, #0
 8009462:	b2db      	uxtb	r3, r3
 8009464:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	015a      	lsls	r2, r3, #5
 800946a:	6a3b      	ldr	r3, [r7, #32]
 800946c:	4413      	add	r3, r2
 800946e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	69fa      	ldr	r2, [r7, #28]
 8009476:	0151      	lsls	r1, r2, #5
 8009478:	6a3a      	ldr	r2, [r7, #32]
 800947a:	440a      	add	r2, r1
 800947c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009480:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009484:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	015a      	lsls	r2, r3, #5
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	4413      	add	r3, r2
 800948e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	7e7b      	ldrb	r3, [r7, #25]
 8009496:	075b      	lsls	r3, r3, #29
 8009498:	69f9      	ldr	r1, [r7, #28]
 800949a:	0148      	lsls	r0, r1, #5
 800949c:	6a39      	ldr	r1, [r7, #32]
 800949e:	4401      	add	r1, r0
 80094a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80094a4:	4313      	orrs	r3, r2
 80094a6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	015a      	lsls	r2, r3, #5
 80094ac:	6a3b      	ldr	r3, [r7, #32]
 80094ae:	4413      	add	r3, r2
 80094b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80094be:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	78db      	ldrb	r3, [r3, #3]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d004      	beq.n	80094d2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094ce:	613b      	str	r3, [r7, #16]
 80094d0:	e003      	b.n	80094da <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094d8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094e0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	015a      	lsls	r2, r3, #5
 80094e6:	6a3b      	ldr	r3, [r7, #32]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094ee:	461a      	mov	r2, r3
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80094f4:	79fb      	ldrb	r3, [r7, #7]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80094fa:	2300      	movs	r3, #0
 80094fc:	e04e      	b.n	800959c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	78db      	ldrb	r3, [r3, #3]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d149      	bne.n	800959a <USB_HC_StartXfer+0x276>
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	695b      	ldr	r3, [r3, #20]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d045      	beq.n	800959a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	79db      	ldrb	r3, [r3, #7]
 8009512:	2b03      	cmp	r3, #3
 8009514:	d830      	bhi.n	8009578 <USB_HC_StartXfer+0x254>
 8009516:	a201      	add	r2, pc, #4	; (adr r2, 800951c <USB_HC_StartXfer+0x1f8>)
 8009518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800951c:	0800952d 	.word	0x0800952d
 8009520:	08009551 	.word	0x08009551
 8009524:	0800952d 	.word	0x0800952d
 8009528:	08009551 	.word	0x08009551
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	695b      	ldr	r3, [r3, #20]
 8009530:	3303      	adds	r3, #3
 8009532:	089b      	lsrs	r3, r3, #2
 8009534:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009536:	8afa      	ldrh	r2, [r7, #22]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953c:	b29b      	uxth	r3, r3
 800953e:	429a      	cmp	r2, r3
 8009540:	d91c      	bls.n	800957c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	f043 0220 	orr.w	r2, r3, #32
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	619a      	str	r2, [r3, #24]
        }
        break;
 800954e:	e015      	b.n	800957c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	695b      	ldr	r3, [r3, #20]
 8009554:	3303      	adds	r3, #3
 8009556:	089b      	lsrs	r3, r3, #2
 8009558:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800955a:	8afa      	ldrh	r2, [r7, #22]
 800955c:	6a3b      	ldr	r3, [r7, #32]
 800955e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	b29b      	uxth	r3, r3
 8009566:	429a      	cmp	r2, r3
 8009568:	d90a      	bls.n	8009580 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	699b      	ldr	r3, [r3, #24]
 800956e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	619a      	str	r2, [r3, #24]
        }
        break;
 8009576:	e003      	b.n	8009580 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009578:	bf00      	nop
 800957a:	e002      	b.n	8009582 <USB_HC_StartXfer+0x25e>
        break;
 800957c:	bf00      	nop
 800957e:	e000      	b.n	8009582 <USB_HC_StartXfer+0x25e>
        break;
 8009580:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	68d9      	ldr	r1, [r3, #12]
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	785a      	ldrb	r2, [r3, #1]
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	b29b      	uxth	r3, r3
 8009590:	2000      	movs	r0, #0
 8009592:	9000      	str	r0, [sp, #0]
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f7ff fb31 	bl	8008bfc <USB_WritePacket>
  }

  return HAL_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3728      	adds	r7, #40	; 0x28
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	1ff80000 	.word	0x1ff80000

080095a8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095ba:	695b      	ldr	r3, [r3, #20]
 80095bc:	b29b      	uxth	r3, r3
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3714      	adds	r7, #20
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr

080095ca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80095ca:	b480      	push	{r7}
 80095cc:	b089      	sub	sp, #36	; 0x24
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
 80095d2:	460b      	mov	r3, r1
 80095d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80095da:	78fb      	ldrb	r3, [r7, #3]
 80095dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80095de:	2300      	movs	r3, #0
 80095e0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	015a      	lsls	r2, r3, #5
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	4413      	add	r3, r2
 80095ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	0c9b      	lsrs	r3, r3, #18
 80095f2:	f003 0303 	and.w	r3, r3, #3
 80095f6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	015a      	lsls	r2, r3, #5
 80095fc:	69fb      	ldr	r3, [r7, #28]
 80095fe:	4413      	add	r3, r2
 8009600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	0fdb      	lsrs	r3, r3, #31
 8009608:	f003 0301 	and.w	r3, r3, #1
 800960c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	f003 0320 	and.w	r3, r3, #32
 8009616:	2b20      	cmp	r3, #32
 8009618:	d104      	bne.n	8009624 <USB_HC_Halt+0x5a>
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d101      	bne.n	8009624 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009620:	2300      	movs	r3, #0
 8009622:	e0c8      	b.n	80097b6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d002      	beq.n	8009630 <USB_HC_Halt+0x66>
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	2b02      	cmp	r3, #2
 800962e:	d163      	bne.n	80096f8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	015a      	lsls	r2, r3, #5
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	4413      	add	r3, r2
 8009638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	69ba      	ldr	r2, [r7, #24]
 8009640:	0151      	lsls	r1, r2, #5
 8009642:	69fa      	ldr	r2, [r7, #28]
 8009644:	440a      	add	r2, r1
 8009646:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800964a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800964e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	f003 0320 	and.w	r3, r3, #32
 8009658:	2b00      	cmp	r3, #0
 800965a:	f040 80ab 	bne.w	80097b4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009662:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d133      	bne.n	80096d2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	015a      	lsls	r2, r3, #5
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	4413      	add	r3, r2
 8009672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	69ba      	ldr	r2, [r7, #24]
 800967a:	0151      	lsls	r1, r2, #5
 800967c:	69fa      	ldr	r2, [r7, #28]
 800967e:	440a      	add	r2, r1
 8009680:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009684:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009688:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	015a      	lsls	r2, r3, #5
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	4413      	add	r3, r2
 8009692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	69ba      	ldr	r2, [r7, #24]
 800969a:	0151      	lsls	r1, r2, #5
 800969c:	69fa      	ldr	r2, [r7, #28]
 800969e:	440a      	add	r2, r1
 80096a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096a8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	3301      	adds	r3, #1
 80096ae:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096b6:	d81d      	bhi.n	80096f4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	015a      	lsls	r2, r3, #5
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	4413      	add	r3, r2
 80096c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096ce:	d0ec      	beq.n	80096aa <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80096d0:	e070      	b.n	80097b4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	015a      	lsls	r2, r3, #5
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	4413      	add	r3, r2
 80096da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	69ba      	ldr	r2, [r7, #24]
 80096e2:	0151      	lsls	r1, r2, #5
 80096e4:	69fa      	ldr	r2, [r7, #28]
 80096e6:	440a      	add	r2, r1
 80096e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096f0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80096f2:	e05f      	b.n	80097b4 <USB_HC_Halt+0x1ea>
            break;
 80096f4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80096f6:	e05d      	b.n	80097b4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	69ba      	ldr	r2, [r7, #24]
 8009708:	0151      	lsls	r1, r2, #5
 800970a:	69fa      	ldr	r2, [r7, #28]
 800970c:	440a      	add	r2, r1
 800970e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009712:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009716:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009724:	2b00      	cmp	r3, #0
 8009726:	d133      	bne.n	8009790 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	015a      	lsls	r2, r3, #5
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	4413      	add	r3, r2
 8009730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	69ba      	ldr	r2, [r7, #24]
 8009738:	0151      	lsls	r1, r2, #5
 800973a:	69fa      	ldr	r2, [r7, #28]
 800973c:	440a      	add	r2, r1
 800973e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009742:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009746:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	015a      	lsls	r2, r3, #5
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	4413      	add	r3, r2
 8009750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	69ba      	ldr	r2, [r7, #24]
 8009758:	0151      	lsls	r1, r2, #5
 800975a:	69fa      	ldr	r2, [r7, #28]
 800975c:	440a      	add	r2, r1
 800975e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009762:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009766:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	3301      	adds	r3, #1
 800976c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009774:	d81d      	bhi.n	80097b2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	015a      	lsls	r2, r3, #5
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	4413      	add	r3, r2
 800977e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009788:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800978c:	d0ec      	beq.n	8009768 <USB_HC_Halt+0x19e>
 800978e:	e011      	b.n	80097b4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	015a      	lsls	r2, r3, #5
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	4413      	add	r3, r2
 8009798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	69ba      	ldr	r2, [r7, #24]
 80097a0:	0151      	lsls	r1, r2, #5
 80097a2:	69fa      	ldr	r2, [r7, #28]
 80097a4:	440a      	add	r2, r1
 80097a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80097ae:	6013      	str	r3, [r2, #0]
 80097b0:	e000      	b.n	80097b4 <USB_HC_Halt+0x1ea>
          break;
 80097b2:	bf00      	nop
    }
  }

  return HAL_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3724      	adds	r7, #36	; 0x24
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
	...

080097c4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b087      	sub	sp, #28
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	460b      	mov	r3, r1
 80097ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80097d4:	78fb      	ldrb	r3, [r7, #3]
 80097d6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80097d8:	2301      	movs	r3, #1
 80097da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	04da      	lsls	r2, r3, #19
 80097e0:	4b15      	ldr	r3, [pc, #84]	; (8009838 <USB_DoPing+0x74>)
 80097e2:	4013      	ands	r3, r2
 80097e4:	693a      	ldr	r2, [r7, #16]
 80097e6:	0151      	lsls	r1, r2, #5
 80097e8:	697a      	ldr	r2, [r7, #20]
 80097ea:	440a      	add	r2, r1
 80097ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80097f4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	015a      	lsls	r2, r3, #5
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	4413      	add	r3, r2
 80097fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800980c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009814:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	015a      	lsls	r2, r3, #5
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	4413      	add	r3, r2
 800981e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009822:	461a      	mov	r2, r3
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	371c      	adds	r7, #28
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	1ff80000 	.word	0x1ff80000

0800983c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b088      	sub	sp, #32
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009844:	2300      	movs	r3, #0
 8009846:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800984c:	2300      	movs	r3, #0
 800984e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f7ff f911 	bl	8008a78 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009856:	2110      	movs	r1, #16
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7ff f96b 	bl	8008b34 <USB_FlushTxFifo>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d001      	beq.n	8009868 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f7ff f997 	bl	8008b9c <USB_FlushRxFifo>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009878:	2300      	movs	r3, #0
 800987a:	61bb      	str	r3, [r7, #24]
 800987c:	e01f      	b.n	80098be <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	015a      	lsls	r2, r3, #5
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	4413      	add	r3, r2
 8009886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009894:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800989c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80098a4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	015a      	lsls	r2, r3, #5
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	4413      	add	r3, r2
 80098ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098b2:	461a      	mov	r2, r3
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	3301      	adds	r3, #1
 80098bc:	61bb      	str	r3, [r7, #24]
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	2b0f      	cmp	r3, #15
 80098c2:	d9dc      	bls.n	800987e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80098c4:	2300      	movs	r3, #0
 80098c6:	61bb      	str	r3, [r7, #24]
 80098c8:	e034      	b.n	8009934 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	015a      	lsls	r2, r3, #5
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	4413      	add	r3, r2
 80098d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098e0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098e8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80098f0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	015a      	lsls	r2, r3, #5
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	4413      	add	r3, r2
 80098fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098fe:	461a      	mov	r2, r3
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	3301      	adds	r3, #1
 8009908:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009910:	d80c      	bhi.n	800992c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	015a      	lsls	r2, r3, #5
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	4413      	add	r3, r2
 800991a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009924:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009928:	d0ec      	beq.n	8009904 <USB_StopHost+0xc8>
 800992a:	e000      	b.n	800992e <USB_StopHost+0xf2>
        break;
 800992c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	3301      	adds	r3, #1
 8009932:	61bb      	str	r3, [r7, #24]
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	2b0f      	cmp	r3, #15
 8009938:	d9c7      	bls.n	80098ca <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009940:	461a      	mov	r2, r3
 8009942:	f04f 33ff 	mov.w	r3, #4294967295
 8009946:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f04f 32ff 	mov.w	r2, #4294967295
 800994e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7ff f880 	bl	8008a56 <USB_EnableGlobalInt>

  return ret;
 8009956:	7ffb      	ldrb	r3, [r7, #31]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3720      	adds	r7, #32
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8009964:	4904      	ldr	r1, [pc, #16]	; (8009978 <MX_FATFS_Init+0x18>)
 8009966:	4805      	ldr	r0, [pc, #20]	; (800997c <MX_FATFS_Init+0x1c>)
 8009968:	f005 fc98 	bl	800f29c <FATFS_LinkDriver>
 800996c:	4603      	mov	r3, r0
 800996e:	461a      	mov	r2, r3
 8009970:	4b03      	ldr	r3, [pc, #12]	; (8009980 <MX_FATFS_Init+0x20>)
 8009972:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009974:	bf00      	nop
 8009976:	bd80      	pop	{r7, pc}
 8009978:	20001518 	.word	0x20001518
 800997c:	0800fc64 	.word	0x0800fc64
 8009980:	20001514 	.word	0x20001514

08009984 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009984:	b480      	push	{r7}
 8009986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009988:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800998a:	4618      	mov	r0, r3
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	4603      	mov	r3, r0
 800999c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	4603      	mov	r3, r0
 80099b4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80099ba:	79fb      	ldrb	r3, [r7, #7]
 80099bc:	4619      	mov	r1, r3
 80099be:	4808      	ldr	r0, [pc, #32]	; (80099e0 <USBH_status+0x34>)
 80099c0:	f000 fe32 	bl	800a628 <USBH_MSC_UnitIsReady>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d002      	beq.n	80099d0 <USBH_status+0x24>
  {
    res = RES_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	73fb      	strb	r3, [r7, #15]
 80099ce:	e001      	b.n	80099d4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	20001780 	.word	0x20001780

080099e4 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b094      	sub	sp, #80	; 0x50
 80099e8:	af02      	add	r7, sp, #8
 80099ea:	60b9      	str	r1, [r7, #8]
 80099ec:	607a      	str	r2, [r7, #4]
 80099ee:	603b      	str	r3, [r7, #0]
 80099f0:	4603      	mov	r3, r0
 80099f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80099fa:	7bf9      	ldrb	r1, [r7, #15]
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	4813      	ldr	r0, [pc, #76]	; (8009a54 <USBH_read+0x70>)
 8009a06:	f000 fe59 	bl	800a6bc <USBH_MSC_Read>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d103      	bne.n	8009a18 <USBH_read+0x34>
  {
    res = RES_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009a16:	e017      	b.n	8009a48 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009a18:	f107 0210 	add.w	r2, r7, #16
 8009a1c:	7bfb      	ldrb	r3, [r7, #15]
 8009a1e:	4619      	mov	r1, r3
 8009a20:	480c      	ldr	r0, [pc, #48]	; (8009a54 <USBH_read+0x70>)
 8009a22:	f000 fe27 	bl	800a674 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009a26:	7f7b      	ldrb	r3, [r7, #29]
 8009a28:	2b3a      	cmp	r3, #58	; 0x3a
 8009a2a:	d005      	beq.n	8009a38 <USBH_read+0x54>
 8009a2c:	2b3a      	cmp	r3, #58	; 0x3a
 8009a2e:	dc07      	bgt.n	8009a40 <USBH_read+0x5c>
 8009a30:	2b04      	cmp	r3, #4
 8009a32:	d001      	beq.n	8009a38 <USBH_read+0x54>
 8009a34:	2b28      	cmp	r3, #40	; 0x28
 8009a36:	d103      	bne.n	8009a40 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009a38:	2303      	movs	r3, #3
 8009a3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009a3e:	e003      	b.n	8009a48 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009a46:	bf00      	nop
    }
  }

  return res;
 8009a48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3748      	adds	r7, #72	; 0x48
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	20001780 	.word	0x20001780

08009a58 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b094      	sub	sp, #80	; 0x50
 8009a5c:	af02      	add	r7, sp, #8
 8009a5e:	60b9      	str	r1, [r7, #8]
 8009a60:	607a      	str	r2, [r7, #4]
 8009a62:	603b      	str	r3, [r7, #0]
 8009a64:	4603      	mov	r3, r0
 8009a66:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8009a6e:	7bf9      	ldrb	r1, [r7, #15]
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	9300      	str	r3, [sp, #0]
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	4817      	ldr	r0, [pc, #92]	; (8009ad8 <USBH_write+0x80>)
 8009a7a:	f000 fe88 	bl	800a78e <USBH_MSC_Write>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d103      	bne.n	8009a8c <USBH_write+0x34>
  {
    res = RES_OK;
 8009a84:	2300      	movs	r3, #0
 8009a86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009a8a:	e01f      	b.n	8009acc <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009a8c:	f107 0210 	add.w	r2, r7, #16
 8009a90:	7bfb      	ldrb	r3, [r7, #15]
 8009a92:	4619      	mov	r1, r3
 8009a94:	4810      	ldr	r0, [pc, #64]	; (8009ad8 <USBH_write+0x80>)
 8009a96:	f000 fded 	bl	800a674 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009a9a:	7f7b      	ldrb	r3, [r7, #29]
 8009a9c:	2b3a      	cmp	r3, #58	; 0x3a
 8009a9e:	d00d      	beq.n	8009abc <USBH_write+0x64>
 8009aa0:	2b3a      	cmp	r3, #58	; 0x3a
 8009aa2:	dc0f      	bgt.n	8009ac4 <USBH_write+0x6c>
 8009aa4:	2b28      	cmp	r3, #40	; 0x28
 8009aa6:	d009      	beq.n	8009abc <USBH_write+0x64>
 8009aa8:	2b28      	cmp	r3, #40	; 0x28
 8009aaa:	dc0b      	bgt.n	8009ac4 <USBH_write+0x6c>
 8009aac:	2b04      	cmp	r3, #4
 8009aae:	d005      	beq.n	8009abc <USBH_write+0x64>
 8009ab0:	2b27      	cmp	r3, #39	; 0x27
 8009ab2:	d107      	bne.n	8009ac4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009aba:	e007      	b.n	8009acc <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009abc:	2303      	movs	r3, #3
 8009abe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009ac2:	e003      	b.n	8009acc <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009aca:	bf00      	nop
    }
  }

  return res;
 8009acc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3748      	adds	r7, #72	; 0x48
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	20001780 	.word	0x20001780

08009adc <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b090      	sub	sp, #64	; 0x40
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	603a      	str	r2, [r7, #0]
 8009ae6:	71fb      	strb	r3, [r7, #7]
 8009ae8:	460b      	mov	r3, r1
 8009aea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8009af2:	79bb      	ldrb	r3, [r7, #6]
 8009af4:	2b03      	cmp	r3, #3
 8009af6:	d852      	bhi.n	8009b9e <USBH_ioctl+0xc2>
 8009af8:	a201      	add	r2, pc, #4	; (adr r2, 8009b00 <USBH_ioctl+0x24>)
 8009afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009afe:	bf00      	nop
 8009b00:	08009b11 	.word	0x08009b11
 8009b04:	08009b19 	.word	0x08009b19
 8009b08:	08009b43 	.word	0x08009b43
 8009b0c:	08009b6f 	.word	0x08009b6f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009b16:	e045      	b.n	8009ba4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009b18:	f107 0208 	add.w	r2, r7, #8
 8009b1c:	79fb      	ldrb	r3, [r7, #7]
 8009b1e:	4619      	mov	r1, r3
 8009b20:	4823      	ldr	r0, [pc, #140]	; (8009bb0 <USBH_ioctl+0xd4>)
 8009b22:	f000 fda7 	bl	800a674 <USBH_MSC_GetLUNInfo>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d106      	bne.n	8009b3a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8009b2c:	68fa      	ldr	r2, [r7, #12]
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009b32:	2300      	movs	r3, #0
 8009b34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009b38:	e034      	b.n	8009ba4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009b40:	e030      	b.n	8009ba4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009b42:	f107 0208 	add.w	r2, r7, #8
 8009b46:	79fb      	ldrb	r3, [r7, #7]
 8009b48:	4619      	mov	r1, r3
 8009b4a:	4819      	ldr	r0, [pc, #100]	; (8009bb0 <USBH_ioctl+0xd4>)
 8009b4c:	f000 fd92 	bl	800a674 <USBH_MSC_GetLUNInfo>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d107      	bne.n	8009b66 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8009b56:	8a3b      	ldrh	r3, [r7, #16]
 8009b58:	461a      	mov	r2, r3
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009b64:	e01e      	b.n	8009ba4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009b6c:	e01a      	b.n	8009ba4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009b6e:	f107 0208 	add.w	r2, r7, #8
 8009b72:	79fb      	ldrb	r3, [r7, #7]
 8009b74:	4619      	mov	r1, r3
 8009b76:	480e      	ldr	r0, [pc, #56]	; (8009bb0 <USBH_ioctl+0xd4>)
 8009b78:	f000 fd7c 	bl	800a674 <USBH_MSC_GetLUNInfo>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d109      	bne.n	8009b96 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8009b82:	8a3b      	ldrh	r3, [r7, #16]
 8009b84:	0a5b      	lsrs	r3, r3, #9
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	461a      	mov	r2, r3
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009b94:	e006      	b.n	8009ba4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009b9c:	e002      	b.n	8009ba4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8009b9e:	2304      	movs	r3, #4
 8009ba0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8009ba4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3740      	adds	r7, #64	; 0x40
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	20001780 	.word	0x20001780

08009bb4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009bb4:	b590      	push	{r4, r7, lr}
 8009bb6:	b089      	sub	sp, #36	; 0x24
 8009bb8:	af04      	add	r7, sp, #16
 8009bba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bc2:	7919      	ldrb	r1, [r3, #4]
 8009bc4:	2350      	movs	r3, #80	; 0x50
 8009bc6:	2206      	movs	r2, #6
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f001 fc6b 	bl	800b4a4 <USBH_FindInterface>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8009bd2:	7bfb      	ldrb	r3, [r7, #15]
 8009bd4:	2bff      	cmp	r3, #255	; 0xff
 8009bd6:	d002      	beq.n	8009bde <USBH_MSC_InterfaceInit+0x2a>
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d901      	bls.n	8009be2 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009bde:	2302      	movs	r3, #2
 8009be0:	e106      	b.n	8009df0 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8009be2:	7bfb      	ldrb	r3, [r7, #15]
 8009be4:	4619      	mov	r1, r3
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f001 fc40 	bl	800b46c <USBH_SelectInterface>
 8009bec:	4603      	mov	r3, r0
 8009bee:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009bf0:	7bbb      	ldrb	r3, [r7, #14]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8009bf6:	2302      	movs	r3, #2
 8009bf8:	e0fa      	b.n	8009df0 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009c00:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009c04:	f005 fe96 	bl	800f934 <malloc>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c12:	69db      	ldr	r3, [r3, #28]
 8009c14:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d101      	bne.n	8009c20 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	e0e7      	b.n	8009df0 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8009c20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c24:	2100      	movs	r1, #0
 8009c26:	68b8      	ldr	r0, [r7, #8]
 8009c28:	f005 fea2 	bl	800f970 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	211a      	movs	r1, #26
 8009c32:	fb01 f303 	mul.w	r3, r1, r3
 8009c36:	4413      	add	r3, r2
 8009c38:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	b25b      	sxtb	r3, r3
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	da16      	bge.n	8009c72 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009c44:	7bfb      	ldrb	r3, [r7, #15]
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	211a      	movs	r1, #26
 8009c4a:	fb01 f303 	mul.w	r3, r1, r3
 8009c4e:	4413      	add	r3, r2
 8009c50:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009c54:	781a      	ldrb	r2, [r3, #0]
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009c5a:	7bfb      	ldrb	r3, [r7, #15]
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	211a      	movs	r1, #26
 8009c60:	fb01 f303 	mul.w	r3, r1, r3
 8009c64:	4413      	add	r3, r2
 8009c66:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009c6a:	881a      	ldrh	r2, [r3, #0]
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	815a      	strh	r2, [r3, #10]
 8009c70:	e015      	b.n	8009c9e <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009c72:	7bfb      	ldrb	r3, [r7, #15]
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	211a      	movs	r1, #26
 8009c78:	fb01 f303 	mul.w	r3, r1, r3
 8009c7c:	4413      	add	r3, r2
 8009c7e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009c82:	781a      	ldrb	r2, [r3, #0]
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009c88:	7bfb      	ldrb	r3, [r7, #15]
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	211a      	movs	r1, #26
 8009c8e:	fb01 f303 	mul.w	r3, r1, r3
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009c98:	881a      	ldrh	r2, [r3, #0]
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009c9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	211a      	movs	r1, #26
 8009ca4:	fb01 f303 	mul.w	r3, r1, r3
 8009ca8:	4413      	add	r3, r2
 8009caa:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	b25b      	sxtb	r3, r3
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	da16      	bge.n	8009ce4 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009cb6:	7bfb      	ldrb	r3, [r7, #15]
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	211a      	movs	r1, #26
 8009cbc:	fb01 f303 	mul.w	r3, r1, r3
 8009cc0:	4413      	add	r3, r2
 8009cc2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009cc6:	781a      	ldrb	r2, [r3, #0]
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009ccc:	7bfb      	ldrb	r3, [r7, #15]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	211a      	movs	r1, #26
 8009cd2:	fb01 f303 	mul.w	r3, r1, r3
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009cdc:	881a      	ldrh	r2, [r3, #0]
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	815a      	strh	r2, [r3, #10]
 8009ce2:	e015      	b.n	8009d10 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	211a      	movs	r1, #26
 8009cea:	fb01 f303 	mul.w	r3, r1, r3
 8009cee:	4413      	add	r3, r2
 8009cf0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009cf4:	781a      	ldrb	r2, [r3, #0]
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009cfa:	7bfb      	ldrb	r3, [r7, #15]
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	211a      	movs	r1, #26
 8009d00:	fb01 f303 	mul.w	r3, r1, r3
 8009d04:	4413      	add	r3, r2
 8009d06:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009d0a:	881a      	ldrh	r2, [r3, #0]
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	2200      	movs	r2, #0
 8009d14:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	799b      	ldrb	r3, [r3, #6]
 8009d26:	4619      	mov	r1, r3
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f002 fed6 	bl	800cada <USBH_AllocPipe>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	461a      	mov	r2, r3
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	79db      	ldrb	r3, [r3, #7]
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f002 fecc 	bl	800cada <USBH_AllocPipe>
 8009d42:	4603      	mov	r3, r0
 8009d44:	461a      	mov	r2, r3
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 fdc4 	bl	800a8d8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	799b      	ldrb	r3, [r3, #6]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d01e      	beq.n	8009d96 <USBH_MSC_InterfaceInit+0x1e2>
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	891b      	ldrh	r3, [r3, #8]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d01a      	beq.n	8009d96 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	7959      	ldrb	r1, [r3, #5]
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	7998      	ldrb	r0, [r3, #6]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	8912      	ldrh	r2, [r2, #8]
 8009d78:	9202      	str	r2, [sp, #8]
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	9201      	str	r2, [sp, #4]
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	4623      	mov	r3, r4
 8009d82:	4602      	mov	r2, r0
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f002 fe79 	bl	800ca7c <USBH_OpenPipe>
 8009d8a:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	79db      	ldrb	r3, [r3, #7]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d02c      	beq.n	8009dee <USBH_MSC_InterfaceInit+0x23a>
 8009d94:	e001      	b.n	8009d9a <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8009d96:	2303      	movs	r3, #3
 8009d98:	e02a      	b.n	8009df0 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	895b      	ldrh	r3, [r3, #10]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d025      	beq.n	8009dee <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	7919      	ldrb	r1, [r3, #4]
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	79d8      	ldrb	r0, [r3, #7]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	8952      	ldrh	r2, [r2, #10]
 8009dba:	9202      	str	r2, [sp, #8]
 8009dbc:	2202      	movs	r2, #2
 8009dbe:	9201      	str	r2, [sp, #4]
 8009dc0:	9300      	str	r3, [sp, #0]
 8009dc2:	4623      	mov	r3, r4
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f002 fe58 	bl	800ca7c <USBH_OpenPipe>
 8009dcc:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	791b      	ldrb	r3, [r3, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f005 fceb 	bl	800f7b2 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	795b      	ldrb	r3, [r3, #5]
 8009de0:	2200      	movs	r2, #0
 8009de2:	4619      	mov	r1, r3
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f005 fce4 	bl	800f7b2 <USBH_LL_SetToggle>

  return USBH_OK;
 8009dea:	2300      	movs	r3, #0
 8009dec:	e000      	b.n	8009df0 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8009dee:	2303      	movs	r3, #3
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3714      	adds	r7, #20
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd90      	pop	{r4, r7, pc}

08009df8 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e06:	69db      	ldr	r3, [r3, #28]
 8009e08:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	795b      	ldrb	r3, [r3, #5]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00e      	beq.n	8009e30 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	795b      	ldrb	r3, [r3, #5]
 8009e16:	4619      	mov	r1, r3
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f002 fe4e 	bl	800caba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	795b      	ldrb	r3, [r3, #5]
 8009e22:	4619      	mov	r1, r3
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f002 fe79 	bl	800cb1c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	791b      	ldrb	r3, [r3, #4]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00e      	beq.n	8009e56 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	791b      	ldrb	r3, [r3, #4]
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f002 fe3b 	bl	800caba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	791b      	ldrb	r3, [r3, #4]
 8009e48:	4619      	mov	r1, r3
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f002 fe66 	bl	800cb1c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e5c:	69db      	ldr	r3, [r3, #28]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00b      	beq.n	8009e7a <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e68:	69db      	ldr	r3, [r3, #28]
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f005 fd6a 	bl	800f944 <free>
    phost->pActiveClass->pData = 0U;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e76:	2200      	movs	r2, #0
 8009e78:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009e7a:	2300      	movs	r3, #0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e92:	69db      	ldr	r3, [r3, #28]
 8009e94:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009e96:	2301      	movs	r3, #1
 8009e98:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	7b9b      	ldrb	r3, [r3, #14]
 8009e9e:	2b03      	cmp	r3, #3
 8009ea0:	d041      	beq.n	8009f26 <USBH_MSC_ClassRequest+0xa2>
 8009ea2:	2b03      	cmp	r3, #3
 8009ea4:	dc4b      	bgt.n	8009f3e <USBH_MSC_ClassRequest+0xba>
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d001      	beq.n	8009eae <USBH_MSC_ClassRequest+0x2a>
 8009eaa:	2b02      	cmp	r3, #2
 8009eac:	d147      	bne.n	8009f3e <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fcf1 	bl	800a89a <USBH_MSC_BOT_REQ_GetMaxLUN>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
 8009ebe:	2b03      	cmp	r3, #3
 8009ec0:	d104      	bne.n	8009ecc <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8009ecc:	7bfb      	ldrb	r3, [r7, #15]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d137      	bne.n	8009f42 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	2b02      	cmp	r3, #2
 8009ed8:	d804      	bhi.n	8009ee4 <USBH_MSC_ClassRequest+0x60>
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	b2da      	uxtb	r2, r3
 8009ee2:	e000      	b.n	8009ee6 <USBH_MSC_ClassRequest+0x62>
 8009ee4:	2202      	movs	r2, #2
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009eea:	2300      	movs	r3, #0
 8009eec:	73bb      	strb	r3, [r7, #14]
 8009eee:	e014      	b.n	8009f1a <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009ef0:	7bbb      	ldrb	r3, [r7, #14]
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	2134      	movs	r1, #52	; 0x34
 8009ef6:	fb01 f303 	mul.w	r3, r1, r3
 8009efa:	4413      	add	r3, r2
 8009efc:	3392      	adds	r3, #146	; 0x92
 8009efe:	2202      	movs	r2, #2
 8009f00:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8009f02:	7bbb      	ldrb	r3, [r7, #14]
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	2134      	movs	r1, #52	; 0x34
 8009f08:	fb01 f303 	mul.w	r3, r1, r3
 8009f0c:	4413      	add	r3, r2
 8009f0e:	33c1      	adds	r3, #193	; 0xc1
 8009f10:	2200      	movs	r2, #0
 8009f12:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009f14:	7bbb      	ldrb	r3, [r7, #14]
 8009f16:	3301      	adds	r3, #1
 8009f18:	73bb      	strb	r3, [r7, #14]
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	7bba      	ldrb	r2, [r7, #14]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d3e5      	bcc.n	8009ef0 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8009f24:	e00d      	b.n	8009f42 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009f26:	2100      	movs	r1, #0
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f002 f888 	bl	800c03e <USBH_ClrFeature>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d108      	bne.n	8009f46 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	7bda      	ldrb	r2, [r3, #15]
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	739a      	strb	r2, [r3, #14]
      }
      break;
 8009f3c:	e003      	b.n	8009f46 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8009f3e:	bf00      	nop
 8009f40:	e002      	b.n	8009f48 <USBH_MSC_ClassRequest+0xc4>
      break;
 8009f42:	bf00      	nop
 8009f44:	e000      	b.n	8009f48 <USBH_MSC_ClassRequest+0xc4>
      break;
 8009f46:	bf00      	nop
  }

  return status;
 8009f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
	...

08009f54 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f62:	69db      	ldr	r3, [r3, #28]
 8009f64:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009f66:	2301      	movs	r3, #1
 8009f68:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	7b1b      	ldrb	r3, [r3, #12]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d003      	beq.n	8009f82 <USBH_MSC_Process+0x2e>
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	f000 8271 	beq.w	800a462 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009f80:	e272      	b.n	800a468 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	f080 824f 	bcs.w	800a432 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	2334      	movs	r3, #52	; 0x34
 8009fa0:	fb01 f303 	mul.w	r3, r1, r3
 8009fa4:	4413      	add	r3, r2
 8009fa6:	3391      	adds	r3, #145	; 0x91
 8009fa8:	2201      	movs	r2, #1
 8009faa:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	693a      	ldr	r2, [r7, #16]
 8009fb6:	2334      	movs	r3, #52	; 0x34
 8009fb8:	fb01 f303 	mul.w	r3, r1, r3
 8009fbc:	4413      	add	r3, r2
 8009fbe:	3390      	adds	r3, #144	; 0x90
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	2b08      	cmp	r3, #8
 8009fc4:	f200 8243 	bhi.w	800a44e <USBH_MSC_Process+0x4fa>
 8009fc8:	a201      	add	r2, pc, #4	; (adr r2, 8009fd0 <USBH_MSC_Process+0x7c>)
 8009fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fce:	bf00      	nop
 8009fd0:	08009ff5 	.word	0x08009ff5
 8009fd4:	0800a44f 	.word	0x0800a44f
 8009fd8:	0800a0bd 	.word	0x0800a0bd
 8009fdc:	0800a241 	.word	0x0800a241
 8009fe0:	0800a01b 	.word	0x0800a01b
 8009fe4:	0800a30d 	.word	0x0800a30d
 8009fe8:	0800a44f 	.word	0x0800a44f
 8009fec:	0800a44f 	.word	0x0800a44f
 8009ff0:	0800a421 	.word	0x0800a421
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	693a      	ldr	r2, [r7, #16]
 8009ffe:	2334      	movs	r3, #52	; 0x34
 800a000:	fb01 f303 	mul.w	r3, r1, r3
 800a004:	4413      	add	r3, r2
 800a006:	3390      	adds	r3, #144	; 0x90
 800a008:	2204      	movs	r2, #4
 800a00a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800a018:	e222      	b.n	800a460 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a020:	b2d9      	uxtb	r1, r3
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a028:	461a      	mov	r2, r3
 800a02a:	2334      	movs	r3, #52	; 0x34
 800a02c:	fb02 f303 	mul.w	r3, r2, r3
 800a030:	3398      	adds	r3, #152	; 0x98
 800a032:	693a      	ldr	r2, [r7, #16]
 800a034:	4413      	add	r3, r2
 800a036:	3307      	adds	r3, #7
 800a038:	461a      	mov	r2, r3
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 ff6a 	bl	800af14 <USBH_MSC_SCSI_Inquiry>
 800a040:	4603      	mov	r3, r0
 800a042:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a044:	7bfb      	ldrb	r3, [r7, #15]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d10b      	bne.n	800a062 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a050:	4619      	mov	r1, r3
 800a052:	693a      	ldr	r2, [r7, #16]
 800a054:	2334      	movs	r3, #52	; 0x34
 800a056:	fb01 f303 	mul.w	r3, r1, r3
 800a05a:	4413      	add	r3, r2
 800a05c:	3390      	adds	r3, #144	; 0x90
 800a05e:	2202      	movs	r2, #2
 800a060:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800a062:	7bfb      	ldrb	r3, [r7, #15]
 800a064:	2b02      	cmp	r3, #2
 800a066:	d10c      	bne.n	800a082 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a06e:	4619      	mov	r1, r3
 800a070:	693a      	ldr	r2, [r7, #16]
 800a072:	2334      	movs	r3, #52	; 0x34
 800a074:	fb01 f303 	mul.w	r3, r1, r3
 800a078:	4413      	add	r3, r2
 800a07a:	3390      	adds	r3, #144	; 0x90
 800a07c:	2205      	movs	r2, #5
 800a07e:	701a      	strb	r2, [r3, #0]
            break;
 800a080:	e1e7      	b.n	800a452 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a082:	7bfb      	ldrb	r3, [r7, #15]
 800a084:	2b04      	cmp	r3, #4
 800a086:	f040 81e4 	bne.w	800a452 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a090:	4619      	mov	r1, r3
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	2334      	movs	r3, #52	; 0x34
 800a096:	fb01 f303 	mul.w	r3, r1, r3
 800a09a:	4413      	add	r3, r2
 800a09c:	3390      	adds	r3, #144	; 0x90
 800a09e:	2201      	movs	r2, #1
 800a0a0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	693a      	ldr	r2, [r7, #16]
 800a0ac:	2334      	movs	r3, #52	; 0x34
 800a0ae:	fb01 f303 	mul.w	r3, r1, r3
 800a0b2:	4413      	add	r3, r2
 800a0b4:	3391      	adds	r3, #145	; 0x91
 800a0b6:	2202      	movs	r2, #2
 800a0b8:	701a      	strb	r2, [r3, #0]
            break;
 800a0ba:	e1ca      	b.n	800a452 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 fe66 	bl	800ad98 <USBH_MSC_SCSI_TestUnitReady>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800a0d0:	7bbb      	ldrb	r3, [r7, #14]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d149      	bne.n	800a16a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0dc:	4619      	mov	r1, r3
 800a0de:	693a      	ldr	r2, [r7, #16]
 800a0e0:	2334      	movs	r3, #52	; 0x34
 800a0e2:	fb01 f303 	mul.w	r3, r1, r3
 800a0e6:	4413      	add	r3, r2
 800a0e8:	3392      	adds	r3, #146	; 0x92
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00c      	beq.n	800a10a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	693a      	ldr	r2, [r7, #16]
 800a0fa:	2334      	movs	r3, #52	; 0x34
 800a0fc:	fb01 f303 	mul.w	r3, r1, r3
 800a100:	4413      	add	r3, r2
 800a102:	33c1      	adds	r3, #193	; 0xc1
 800a104:	2201      	movs	r2, #1
 800a106:	701a      	strb	r2, [r3, #0]
 800a108:	e00b      	b.n	800a122 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a110:	4619      	mov	r1, r3
 800a112:	693a      	ldr	r2, [r7, #16]
 800a114:	2334      	movs	r3, #52	; 0x34
 800a116:	fb01 f303 	mul.w	r3, r1, r3
 800a11a:	4413      	add	r3, r2
 800a11c:	33c1      	adds	r3, #193	; 0xc1
 800a11e:	2200      	movs	r2, #0
 800a120:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a128:	4619      	mov	r1, r3
 800a12a:	693a      	ldr	r2, [r7, #16]
 800a12c:	2334      	movs	r3, #52	; 0x34
 800a12e:	fb01 f303 	mul.w	r3, r1, r3
 800a132:	4413      	add	r3, r2
 800a134:	3390      	adds	r3, #144	; 0x90
 800a136:	2203      	movs	r2, #3
 800a138:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a140:	4619      	mov	r1, r3
 800a142:	693a      	ldr	r2, [r7, #16]
 800a144:	2334      	movs	r3, #52	; 0x34
 800a146:	fb01 f303 	mul.w	r3, r1, r3
 800a14a:	4413      	add	r3, r2
 800a14c:	3391      	adds	r3, #145	; 0x91
 800a14e:	2200      	movs	r2, #0
 800a150:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a158:	4619      	mov	r1, r3
 800a15a:	693a      	ldr	r2, [r7, #16]
 800a15c:	2334      	movs	r3, #52	; 0x34
 800a15e:	fb01 f303 	mul.w	r3, r1, r3
 800a162:	4413      	add	r3, r2
 800a164:	3392      	adds	r3, #146	; 0x92
 800a166:	2200      	movs	r2, #0
 800a168:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800a16a:	7bbb      	ldrb	r3, [r7, #14]
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d14a      	bne.n	800a206 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a176:	4619      	mov	r1, r3
 800a178:	693a      	ldr	r2, [r7, #16]
 800a17a:	2334      	movs	r3, #52	; 0x34
 800a17c:	fb01 f303 	mul.w	r3, r1, r3
 800a180:	4413      	add	r3, r2
 800a182:	3392      	adds	r3, #146	; 0x92
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	2b02      	cmp	r3, #2
 800a188:	d00c      	beq.n	800a1a4 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a190:	4619      	mov	r1, r3
 800a192:	693a      	ldr	r2, [r7, #16]
 800a194:	2334      	movs	r3, #52	; 0x34
 800a196:	fb01 f303 	mul.w	r3, r1, r3
 800a19a:	4413      	add	r3, r2
 800a19c:	33c1      	adds	r3, #193	; 0xc1
 800a19e:	2201      	movs	r2, #1
 800a1a0:	701a      	strb	r2, [r3, #0]
 800a1a2:	e00b      	b.n	800a1bc <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	2334      	movs	r3, #52	; 0x34
 800a1b0:	fb01 f303 	mul.w	r3, r1, r3
 800a1b4:	4413      	add	r3, r2
 800a1b6:	33c1      	adds	r3, #193	; 0xc1
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	2334      	movs	r3, #52	; 0x34
 800a1c8:	fb01 f303 	mul.w	r3, r1, r3
 800a1cc:	4413      	add	r3, r2
 800a1ce:	3390      	adds	r3, #144	; 0x90
 800a1d0:	2205      	movs	r2, #5
 800a1d2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1da:	4619      	mov	r1, r3
 800a1dc:	693a      	ldr	r2, [r7, #16]
 800a1de:	2334      	movs	r3, #52	; 0x34
 800a1e0:	fb01 f303 	mul.w	r3, r1, r3
 800a1e4:	4413      	add	r3, r2
 800a1e6:	3391      	adds	r3, #145	; 0x91
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	2334      	movs	r3, #52	; 0x34
 800a1f8:	fb01 f303 	mul.w	r3, r1, r3
 800a1fc:	4413      	add	r3, r2
 800a1fe:	3392      	adds	r3, #146	; 0x92
 800a200:	2202      	movs	r2, #2
 800a202:	701a      	strb	r2, [r3, #0]
            break;
 800a204:	e127      	b.n	800a456 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800a206:	7bbb      	ldrb	r3, [r7, #14]
 800a208:	2b04      	cmp	r3, #4
 800a20a:	f040 8124 	bne.w	800a456 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a214:	4619      	mov	r1, r3
 800a216:	693a      	ldr	r2, [r7, #16]
 800a218:	2334      	movs	r3, #52	; 0x34
 800a21a:	fb01 f303 	mul.w	r3, r1, r3
 800a21e:	4413      	add	r3, r2
 800a220:	3390      	adds	r3, #144	; 0x90
 800a222:	2201      	movs	r2, #1
 800a224:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a22c:	4619      	mov	r1, r3
 800a22e:	693a      	ldr	r2, [r7, #16]
 800a230:	2334      	movs	r3, #52	; 0x34
 800a232:	fb01 f303 	mul.w	r3, r1, r3
 800a236:	4413      	add	r3, r2
 800a238:	3391      	adds	r3, #145	; 0x91
 800a23a:	2202      	movs	r2, #2
 800a23c:	701a      	strb	r2, [r3, #0]
            break;
 800a23e:	e10a      	b.n	800a456 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a246:	b2d9      	uxtb	r1, r3
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a24e:	461a      	mov	r2, r3
 800a250:	2334      	movs	r3, #52	; 0x34
 800a252:	fb02 f303 	mul.w	r3, r2, r3
 800a256:	3390      	adds	r3, #144	; 0x90
 800a258:	693a      	ldr	r2, [r7, #16]
 800a25a:	4413      	add	r3, r2
 800a25c:	3304      	adds	r3, #4
 800a25e:	461a      	mov	r2, r3
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 fddc 	bl	800ae1e <USBH_MSC_SCSI_ReadCapacity>
 800a266:	4603      	mov	r3, r0
 800a268:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a26a:	7bfb      	ldrb	r3, [r7, #15]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d120      	bne.n	800a2b2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a276:	4619      	mov	r1, r3
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	2334      	movs	r3, #52	; 0x34
 800a27c:	fb01 f303 	mul.w	r3, r1, r3
 800a280:	4413      	add	r3, r2
 800a282:	3390      	adds	r3, #144	; 0x90
 800a284:	2201      	movs	r2, #1
 800a286:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a28e:	4619      	mov	r1, r3
 800a290:	693a      	ldr	r2, [r7, #16]
 800a292:	2334      	movs	r3, #52	; 0x34
 800a294:	fb01 f303 	mul.w	r3, r1, r3
 800a298:	4413      	add	r3, r2
 800a29a:	3391      	adds	r3, #145	; 0x91
 800a29c:	2200      	movs	r2, #0
 800a29e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a2b0:	e0d3      	b.n	800a45a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800a2b2:	7bfb      	ldrb	r3, [r7, #15]
 800a2b4:	2b02      	cmp	r3, #2
 800a2b6:	d10c      	bne.n	800a2d2 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2be:	4619      	mov	r1, r3
 800a2c0:	693a      	ldr	r2, [r7, #16]
 800a2c2:	2334      	movs	r3, #52	; 0x34
 800a2c4:	fb01 f303 	mul.w	r3, r1, r3
 800a2c8:	4413      	add	r3, r2
 800a2ca:	3390      	adds	r3, #144	; 0x90
 800a2cc:	2205      	movs	r2, #5
 800a2ce:	701a      	strb	r2, [r3, #0]
            break;
 800a2d0:	e0c3      	b.n	800a45a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a2d2:	7bfb      	ldrb	r3, [r7, #15]
 800a2d4:	2b04      	cmp	r3, #4
 800a2d6:	f040 80c0 	bne.w	800a45a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	693a      	ldr	r2, [r7, #16]
 800a2e4:	2334      	movs	r3, #52	; 0x34
 800a2e6:	fb01 f303 	mul.w	r3, r1, r3
 800a2ea:	4413      	add	r3, r2
 800a2ec:	3390      	adds	r3, #144	; 0x90
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	693a      	ldr	r2, [r7, #16]
 800a2fc:	2334      	movs	r3, #52	; 0x34
 800a2fe:	fb01 f303 	mul.w	r3, r1, r3
 800a302:	4413      	add	r3, r2
 800a304:	3391      	adds	r3, #145	; 0x91
 800a306:	2202      	movs	r2, #2
 800a308:	701a      	strb	r2, [r3, #0]
            break;
 800a30a:	e0a6      	b.n	800a45a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a312:	b2d9      	uxtb	r1, r3
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a31a:	461a      	mov	r2, r3
 800a31c:	2334      	movs	r3, #52	; 0x34
 800a31e:	fb02 f303 	mul.w	r3, r2, r3
 800a322:	3398      	adds	r3, #152	; 0x98
 800a324:	693a      	ldr	r2, [r7, #16]
 800a326:	4413      	add	r3, r2
 800a328:	3304      	adds	r3, #4
 800a32a:	461a      	mov	r2, r3
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 fe96 	bl	800b05e <USBH_MSC_SCSI_RequestSense>
 800a332:	4603      	mov	r3, r0
 800a334:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a336:	7bfb      	ldrb	r3, [r7, #15]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d145      	bne.n	800a3c8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a342:	4619      	mov	r1, r3
 800a344:	693a      	ldr	r2, [r7, #16]
 800a346:	2334      	movs	r3, #52	; 0x34
 800a348:	fb01 f303 	mul.w	r3, r1, r3
 800a34c:	4413      	add	r3, r2
 800a34e:	339c      	adds	r3, #156	; 0x9c
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	2b06      	cmp	r3, #6
 800a354:	d00c      	beq.n	800a370 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a35c:	4619      	mov	r1, r3
 800a35e:	693a      	ldr	r2, [r7, #16]
 800a360:	2334      	movs	r3, #52	; 0x34
 800a362:	fb01 f303 	mul.w	r3, r1, r3
 800a366:	4413      	add	r3, r2
 800a368:	339c      	adds	r3, #156	; 0x9c
 800a36a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	d117      	bne.n	800a3a0 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800a37c:	1ad3      	subs	r3, r2, r3
 800a37e:	f242 720f 	movw	r2, #9999	; 0x270f
 800a382:	4293      	cmp	r3, r2
 800a384:	d80c      	bhi.n	800a3a0 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a38c:	4619      	mov	r1, r3
 800a38e:	693a      	ldr	r2, [r7, #16]
 800a390:	2334      	movs	r3, #52	; 0x34
 800a392:	fb01 f303 	mul.w	r3, r1, r3
 800a396:	4413      	add	r3, r2
 800a398:	3390      	adds	r3, #144	; 0x90
 800a39a:	2202      	movs	r2, #2
 800a39c:	701a      	strb	r2, [r3, #0]
                  break;
 800a39e:	e05f      	b.n	800a460 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	693a      	ldr	r2, [r7, #16]
 800a3aa:	2334      	movs	r3, #52	; 0x34
 800a3ac:	fb01 f303 	mul.w	r3, r1, r3
 800a3b0:	4413      	add	r3, r2
 800a3b2:	3390      	adds	r3, #144	; 0x90
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3be:	3301      	adds	r3, #1
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800a3c8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	d10c      	bne.n	800a3e8 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	693a      	ldr	r2, [r7, #16]
 800a3d8:	2334      	movs	r3, #52	; 0x34
 800a3da:	fb01 f303 	mul.w	r3, r1, r3
 800a3de:	4413      	add	r3, r2
 800a3e0:	3390      	adds	r3, #144	; 0x90
 800a3e2:	2208      	movs	r2, #8
 800a3e4:	701a      	strb	r2, [r3, #0]
            break;
 800a3e6:	e03a      	b.n	800a45e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a3e8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ea:	2b04      	cmp	r3, #4
 800a3ec:	d137      	bne.n	800a45e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	693a      	ldr	r2, [r7, #16]
 800a3f8:	2334      	movs	r3, #52	; 0x34
 800a3fa:	fb01 f303 	mul.w	r3, r1, r3
 800a3fe:	4413      	add	r3, r2
 800a400:	3390      	adds	r3, #144	; 0x90
 800a402:	2201      	movs	r2, #1
 800a404:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a40c:	4619      	mov	r1, r3
 800a40e:	693a      	ldr	r2, [r7, #16]
 800a410:	2334      	movs	r3, #52	; 0x34
 800a412:	fb01 f303 	mul.w	r3, r1, r3
 800a416:	4413      	add	r3, r2
 800a418:	3391      	adds	r3, #145	; 0x91
 800a41a:	2202      	movs	r2, #2
 800a41c:	701a      	strb	r2, [r3, #0]
            break;
 800a41e:	e01e      	b.n	800a45e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a426:	3301      	adds	r3, #1
 800a428:	b29a      	uxth	r2, r3
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a430:	e016      	b.n	800a460 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	2200      	movs	r2, #0
 800a436:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	2201      	movs	r2, #1
 800a43e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a446:	2102      	movs	r1, #2
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	4798      	blx	r3
      break;
 800a44c:	e00c      	b.n	800a468 <USBH_MSC_Process+0x514>
            break;
 800a44e:	bf00      	nop
 800a450:	e00a      	b.n	800a468 <USBH_MSC_Process+0x514>
            break;
 800a452:	bf00      	nop
 800a454:	e008      	b.n	800a468 <USBH_MSC_Process+0x514>
            break;
 800a456:	bf00      	nop
 800a458:	e006      	b.n	800a468 <USBH_MSC_Process+0x514>
            break;
 800a45a:	bf00      	nop
 800a45c:	e004      	b.n	800a468 <USBH_MSC_Process+0x514>
            break;
 800a45e:	bf00      	nop
      break;
 800a460:	e002      	b.n	800a468 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800a462:	2300      	movs	r3, #0
 800a464:	75fb      	strb	r3, [r7, #23]
      break;
 800a466:	bf00      	nop
  }
  return error;
 800a468:	7dfb      	ldrb	r3, [r7, #23]
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3718      	adds	r7, #24
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop

0800a474 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	370c      	adds	r7, #12
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr

0800a48a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b088      	sub	sp, #32
 800a48e:	af02      	add	r7, sp, #8
 800a490:	6078      	str	r0, [r7, #4]
 800a492:	460b      	mov	r3, r1
 800a494:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a49c:	69db      	ldr	r3, [r3, #28]
 800a49e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800a4a8:	78fb      	ldrb	r3, [r7, #3]
 800a4aa:	693a      	ldr	r2, [r7, #16]
 800a4ac:	2134      	movs	r1, #52	; 0x34
 800a4ae:	fb01 f303 	mul.w	r3, r1, r3
 800a4b2:	4413      	add	r3, r2
 800a4b4:	3390      	adds	r3, #144	; 0x90
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	2b07      	cmp	r3, #7
 800a4ba:	d03c      	beq.n	800a536 <USBH_MSC_RdWrProcess+0xac>
 800a4bc:	2b07      	cmp	r3, #7
 800a4be:	f300 80a7 	bgt.w	800a610 <USBH_MSC_RdWrProcess+0x186>
 800a4c2:	2b05      	cmp	r3, #5
 800a4c4:	d06c      	beq.n	800a5a0 <USBH_MSC_RdWrProcess+0x116>
 800a4c6:	2b06      	cmp	r3, #6
 800a4c8:	f040 80a2 	bne.w	800a610 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800a4cc:	78f9      	ldrb	r1, [r7, #3]
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	9300      	str	r3, [sp, #0]
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 fea5 	bl	800b226 <USBH_MSC_SCSI_Read>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a4e0:	7bfb      	ldrb	r3, [r7, #15]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d10b      	bne.n	800a4fe <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a4e6:	78fb      	ldrb	r3, [r7, #3]
 800a4e8:	693a      	ldr	r2, [r7, #16]
 800a4ea:	2134      	movs	r1, #52	; 0x34
 800a4ec:	fb01 f303 	mul.w	r3, r1, r3
 800a4f0:	4413      	add	r3, r2
 800a4f2:	3390      	adds	r3, #144	; 0x90
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a4fc:	e08a      	b.n	800a614 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800a4fe:	7bfb      	ldrb	r3, [r7, #15]
 800a500:	2b02      	cmp	r3, #2
 800a502:	d109      	bne.n	800a518 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a504:	78fb      	ldrb	r3, [r7, #3]
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	2134      	movs	r1, #52	; 0x34
 800a50a:	fb01 f303 	mul.w	r3, r1, r3
 800a50e:	4413      	add	r3, r2
 800a510:	3390      	adds	r3, #144	; 0x90
 800a512:	2205      	movs	r2, #5
 800a514:	701a      	strb	r2, [r3, #0]
      break;
 800a516:	e07d      	b.n	800a614 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a518:	7bfb      	ldrb	r3, [r7, #15]
 800a51a:	2b04      	cmp	r3, #4
 800a51c:	d17a      	bne.n	800a614 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a51e:	78fb      	ldrb	r3, [r7, #3]
 800a520:	693a      	ldr	r2, [r7, #16]
 800a522:	2134      	movs	r1, #52	; 0x34
 800a524:	fb01 f303 	mul.w	r3, r1, r3
 800a528:	4413      	add	r3, r2
 800a52a:	3390      	adds	r3, #144	; 0x90
 800a52c:	2208      	movs	r2, #8
 800a52e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a530:	2302      	movs	r3, #2
 800a532:	75fb      	strb	r3, [r7, #23]
      break;
 800a534:	e06e      	b.n	800a614 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800a536:	78f9      	ldrb	r1, [r7, #3]
 800a538:	2300      	movs	r3, #0
 800a53a:	9300      	str	r3, [sp, #0]
 800a53c:	2300      	movs	r3, #0
 800a53e:	2200      	movs	r2, #0
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 fe05 	bl	800b150 <USBH_MSC_SCSI_Write>
 800a546:	4603      	mov	r3, r0
 800a548:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a54a:	7bfb      	ldrb	r3, [r7, #15]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d10b      	bne.n	800a568 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a550:	78fb      	ldrb	r3, [r7, #3]
 800a552:	693a      	ldr	r2, [r7, #16]
 800a554:	2134      	movs	r1, #52	; 0x34
 800a556:	fb01 f303 	mul.w	r3, r1, r3
 800a55a:	4413      	add	r3, r2
 800a55c:	3390      	adds	r3, #144	; 0x90
 800a55e:	2201      	movs	r2, #1
 800a560:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a562:	2300      	movs	r3, #0
 800a564:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a566:	e057      	b.n	800a618 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800a568:	7bfb      	ldrb	r3, [r7, #15]
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	d109      	bne.n	800a582 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a56e:	78fb      	ldrb	r3, [r7, #3]
 800a570:	693a      	ldr	r2, [r7, #16]
 800a572:	2134      	movs	r1, #52	; 0x34
 800a574:	fb01 f303 	mul.w	r3, r1, r3
 800a578:	4413      	add	r3, r2
 800a57a:	3390      	adds	r3, #144	; 0x90
 800a57c:	2205      	movs	r2, #5
 800a57e:	701a      	strb	r2, [r3, #0]
      break;
 800a580:	e04a      	b.n	800a618 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a582:	7bfb      	ldrb	r3, [r7, #15]
 800a584:	2b04      	cmp	r3, #4
 800a586:	d147      	bne.n	800a618 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a588:	78fb      	ldrb	r3, [r7, #3]
 800a58a:	693a      	ldr	r2, [r7, #16]
 800a58c:	2134      	movs	r1, #52	; 0x34
 800a58e:	fb01 f303 	mul.w	r3, r1, r3
 800a592:	4413      	add	r3, r2
 800a594:	3390      	adds	r3, #144	; 0x90
 800a596:	2208      	movs	r2, #8
 800a598:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a59a:	2302      	movs	r3, #2
 800a59c:	75fb      	strb	r3, [r7, #23]
      break;
 800a59e:	e03b      	b.n	800a618 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800a5a0:	78fb      	ldrb	r3, [r7, #3]
 800a5a2:	2234      	movs	r2, #52	; 0x34
 800a5a4:	fb02 f303 	mul.w	r3, r2, r3
 800a5a8:	3398      	adds	r3, #152	; 0x98
 800a5aa:	693a      	ldr	r2, [r7, #16]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	1d1a      	adds	r2, r3, #4
 800a5b0:	78fb      	ldrb	r3, [r7, #3]
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 fd52 	bl	800b05e <USBH_MSC_SCSI_RequestSense>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a5be:	7bfb      	ldrb	r3, [r7, #15]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d113      	bne.n	800a5ec <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a5c4:	78fb      	ldrb	r3, [r7, #3]
 800a5c6:	693a      	ldr	r2, [r7, #16]
 800a5c8:	2134      	movs	r1, #52	; 0x34
 800a5ca:	fb01 f303 	mul.w	r3, r1, r3
 800a5ce:	4413      	add	r3, r2
 800a5d0:	3390      	adds	r3, #144	; 0x90
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800a5d6:	78fb      	ldrb	r3, [r7, #3]
 800a5d8:	693a      	ldr	r2, [r7, #16]
 800a5da:	2134      	movs	r1, #52	; 0x34
 800a5dc:	fb01 f303 	mul.w	r3, r1, r3
 800a5e0:	4413      	add	r3, r2
 800a5e2:	3391      	adds	r3, #145	; 0x91
 800a5e4:	2202      	movs	r2, #2
 800a5e6:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800a5ec:	7bfb      	ldrb	r3, [r7, #15]
 800a5ee:	2b02      	cmp	r3, #2
 800a5f0:	d014      	beq.n	800a61c <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a5f2:	7bfb      	ldrb	r3, [r7, #15]
 800a5f4:	2b04      	cmp	r3, #4
 800a5f6:	d111      	bne.n	800a61c <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a5f8:	78fb      	ldrb	r3, [r7, #3]
 800a5fa:	693a      	ldr	r2, [r7, #16]
 800a5fc:	2134      	movs	r1, #52	; 0x34
 800a5fe:	fb01 f303 	mul.w	r3, r1, r3
 800a602:	4413      	add	r3, r2
 800a604:	3390      	adds	r3, #144	; 0x90
 800a606:	2208      	movs	r2, #8
 800a608:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a60a:	2302      	movs	r3, #2
 800a60c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a60e:	e005      	b.n	800a61c <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800a610:	bf00      	nop
 800a612:	e004      	b.n	800a61e <USBH_MSC_RdWrProcess+0x194>
      break;
 800a614:	bf00      	nop
 800a616:	e002      	b.n	800a61e <USBH_MSC_RdWrProcess+0x194>
      break;
 800a618:	bf00      	nop
 800a61a:	e000      	b.n	800a61e <USBH_MSC_RdWrProcess+0x194>
      break;
 800a61c:	bf00      	nop

  }
  return error;
 800a61e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3718      	adds	r7, #24
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	460b      	mov	r3, r1
 800a632:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a63a:	69db      	ldr	r3, [r3, #28]
 800a63c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	b2db      	uxtb	r3, r3
 800a644:	2b0b      	cmp	r3, #11
 800a646:	d10c      	bne.n	800a662 <USBH_MSC_UnitIsReady+0x3a>
 800a648:	78fb      	ldrb	r3, [r7, #3]
 800a64a:	68ba      	ldr	r2, [r7, #8]
 800a64c:	2134      	movs	r1, #52	; 0x34
 800a64e:	fb01 f303 	mul.w	r3, r1, r3
 800a652:	4413      	add	r3, r2
 800a654:	3391      	adds	r3, #145	; 0x91
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d102      	bne.n	800a662 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800a65c:	2301      	movs	r3, #1
 800a65e:	73fb      	strb	r3, [r7, #15]
 800a660:	e001      	b.n	800a666 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800a662:	2300      	movs	r3, #0
 800a664:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a666:	7bfb      	ldrb	r3, [r7, #15]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3714      	adds	r7, #20
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b086      	sub	sp, #24
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	460b      	mov	r3, r1
 800a67e:	607a      	str	r2, [r7, #4]
 800a680:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a688:	69db      	ldr	r3, [r3, #28]
 800a68a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	b2db      	uxtb	r3, r3
 800a692:	2b0b      	cmp	r3, #11
 800a694:	d10d      	bne.n	800a6b2 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800a696:	7afb      	ldrb	r3, [r7, #11]
 800a698:	2234      	movs	r2, #52	; 0x34
 800a69a:	fb02 f303 	mul.w	r3, r2, r3
 800a69e:	3390      	adds	r3, #144	; 0x90
 800a6a0:	697a      	ldr	r2, [r7, #20]
 800a6a2:	4413      	add	r3, r2
 800a6a4:	2234      	movs	r2, #52	; 0x34
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f005 f953 	bl	800f954 <memcpy>
    return USBH_OK;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	e000      	b.n	800a6b4 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800a6b2:	2302      	movs	r3, #2
  }
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3718      	adds	r7, #24
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b088      	sub	sp, #32
 800a6c0:	af02      	add	r7, sp, #8
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	607a      	str	r2, [r7, #4]
 800a6c6:	603b      	str	r3, [r7, #0]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6d2:	69db      	ldr	r3, [r3, #28]
 800a6d4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00e      	beq.n	800a700 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a6e8:	2b0b      	cmp	r3, #11
 800a6ea:	d109      	bne.n	800a700 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a6ec:	7afb      	ldrb	r3, [r7, #11]
 800a6ee:	697a      	ldr	r2, [r7, #20]
 800a6f0:	2134      	movs	r1, #52	; 0x34
 800a6f2:	fb01 f303 	mul.w	r3, r1, r3
 800a6f6:	4413      	add	r3, r2
 800a6f8:	3390      	adds	r3, #144	; 0x90
 800a6fa:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d001      	beq.n	800a704 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800a700:	2302      	movs	r3, #2
 800a702:	e040      	b.n	800a786 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	2206      	movs	r2, #6
 800a708:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800a70a:	7afb      	ldrb	r3, [r7, #11]
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	2134      	movs	r1, #52	; 0x34
 800a710:	fb01 f303 	mul.w	r3, r1, r3
 800a714:	4413      	add	r3, r2
 800a716:	3390      	adds	r3, #144	; 0x90
 800a718:	2206      	movs	r2, #6
 800a71a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a71c:	7afb      	ldrb	r3, [r7, #11]
 800a71e:	b29a      	uxth	r2, r3
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800a726:	7af9      	ldrb	r1, [r7, #11]
 800a728:	6a3b      	ldr	r3, [r7, #32]
 800a72a:	9300      	str	r3, [sp, #0]
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	68f8      	ldr	r0, [r7, #12]
 800a732:	f000 fd78 	bl	800b226 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a73c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a73e:	e016      	b.n	800a76e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	1ad2      	subs	r2, r2, r3
 800a74a:	6a3b      	ldr	r3, [r7, #32]
 800a74c:	f242 7110 	movw	r1, #10000	; 0x2710
 800a750:	fb01 f303 	mul.w	r3, r1, r3
 800a754:	429a      	cmp	r2, r3
 800a756:	d805      	bhi.n	800a764 <USBH_MSC_Read+0xa8>
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	2b00      	cmp	r3, #0
 800a762:	d104      	bne.n	800a76e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	2201      	movs	r2, #1
 800a768:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a76a:	2302      	movs	r3, #2
 800a76c:	e00b      	b.n	800a786 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a76e:	7afb      	ldrb	r3, [r7, #11]
 800a770:	4619      	mov	r1, r3
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f7ff fe89 	bl	800a48a <USBH_MSC_RdWrProcess>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d0e0      	beq.n	800a740 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	2201      	movs	r2, #1
 800a782:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	3718      	adds	r7, #24
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b088      	sub	sp, #32
 800a792:	af02      	add	r7, sp, #8
 800a794:	60f8      	str	r0, [r7, #12]
 800a796:	607a      	str	r2, [r7, #4]
 800a798:	603b      	str	r3, [r7, #0]
 800a79a:	460b      	mov	r3, r1
 800a79c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7a4:	69db      	ldr	r3, [r3, #28]
 800a7a6:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00e      	beq.n	800a7d2 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a7ba:	2b0b      	cmp	r3, #11
 800a7bc:	d109      	bne.n	800a7d2 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a7be:	7afb      	ldrb	r3, [r7, #11]
 800a7c0:	697a      	ldr	r2, [r7, #20]
 800a7c2:	2134      	movs	r1, #52	; 0x34
 800a7c4:	fb01 f303 	mul.w	r3, r1, r3
 800a7c8:	4413      	add	r3, r2
 800a7ca:	3390      	adds	r3, #144	; 0x90
 800a7cc:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d001      	beq.n	800a7d6 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800a7d2:	2302      	movs	r3, #2
 800a7d4:	e040      	b.n	800a858 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	2207      	movs	r2, #7
 800a7da:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800a7dc:	7afb      	ldrb	r3, [r7, #11]
 800a7de:	697a      	ldr	r2, [r7, #20]
 800a7e0:	2134      	movs	r1, #52	; 0x34
 800a7e2:	fb01 f303 	mul.w	r3, r1, r3
 800a7e6:	4413      	add	r3, r2
 800a7e8:	3390      	adds	r3, #144	; 0x90
 800a7ea:	2207      	movs	r2, #7
 800a7ec:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a7ee:	7afb      	ldrb	r3, [r7, #11]
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800a7f8:	7af9      	ldrb	r1, [r7, #11]
 800a7fa:	6a3b      	ldr	r3, [r7, #32]
 800a7fc:	9300      	str	r3, [sp, #0]
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f000 fca4 	bl	800b150 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a80e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a810:	e016      	b.n	800a840 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	1ad2      	subs	r2, r2, r3
 800a81c:	6a3b      	ldr	r3, [r7, #32]
 800a81e:	f242 7110 	movw	r1, #10000	; 0x2710
 800a822:	fb01 f303 	mul.w	r3, r1, r3
 800a826:	429a      	cmp	r2, r3
 800a828:	d805      	bhi.n	800a836 <USBH_MSC_Write+0xa8>
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a830:	b2db      	uxtb	r3, r3
 800a832:	2b00      	cmp	r3, #0
 800a834:	d104      	bne.n	800a840 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	2201      	movs	r2, #1
 800a83a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a83c:	2302      	movs	r3, #2
 800a83e:	e00b      	b.n	800a858 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a840:	7afb      	ldrb	r3, [r7, #11]
 800a842:	4619      	mov	r1, r3
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f7ff fe20 	bl	800a48a <USBH_MSC_RdWrProcess>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d0e0      	beq.n	800a812 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	2201      	movs	r2, #1
 800a854:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800a856:	2300      	movs	r3, #0
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3718      	adds	r7, #24
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2221      	movs	r2, #33	; 0x21
 800a86c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	22ff      	movs	r2, #255	; 0xff
 800a872:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2200      	movs	r2, #0
 800a87e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800a886:	2200      	movs	r2, #0
 800a888:	2100      	movs	r1, #0
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f001 fea4 	bl	800c5d8 <USBH_CtlReq>
 800a890:	4603      	mov	r3, r0
}
 800a892:	4618      	mov	r0, r3
 800a894:	3708      	adds	r7, #8
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b082      	sub	sp, #8
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
 800a8a2:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	22a1      	movs	r2, #161	; 0xa1
 800a8a8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	22fe      	movs	r2, #254	; 0xfe
 800a8ae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	6839      	ldr	r1, [r7, #0]
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f001 fe86 	bl	800c5d8 <USBH_CtlReq>
 800a8cc:	4603      	mov	r3, r0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3708      	adds	r7, #8
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
	...

0800a8d8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b085      	sub	sp, #20
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8e6:	69db      	ldr	r3, [r3, #28]
 800a8e8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	4a09      	ldr	r2, [pc, #36]	; (800a914 <USBH_MSC_BOT_Init+0x3c>)
 800a8ee:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	4a09      	ldr	r2, [pc, #36]	; (800a918 <USBH_MSC_BOT_Init+0x40>)
 800a8f4:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3714      	adds	r7, #20
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	43425355 	.word	0x43425355
 800a918:	20304050 	.word	0x20304050

0800a91c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b088      	sub	sp, #32
 800a920:	af02      	add	r7, sp, #8
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	460b      	mov	r3, r1
 800a926:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800a928:	2301      	movs	r3, #1
 800a92a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800a92c:	2301      	movs	r3, #1
 800a92e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800a930:	2301      	movs	r3, #1
 800a932:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a934:	2300      	movs	r3, #0
 800a936:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a93e:	69db      	ldr	r3, [r3, #28]
 800a940:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800a942:	2300      	movs	r3, #0
 800a944:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a94c:	3b01      	subs	r3, #1
 800a94e:	2b0a      	cmp	r3, #10
 800a950:	f200 819e 	bhi.w	800ac90 <USBH_MSC_BOT_Process+0x374>
 800a954:	a201      	add	r2, pc, #4	; (adr r2, 800a95c <USBH_MSC_BOT_Process+0x40>)
 800a956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a95a:	bf00      	nop
 800a95c:	0800a989 	.word	0x0800a989
 800a960:	0800a9b1 	.word	0x0800a9b1
 800a964:	0800aa1b 	.word	0x0800aa1b
 800a968:	0800aa39 	.word	0x0800aa39
 800a96c:	0800aabd 	.word	0x0800aabd
 800a970:	0800aadf 	.word	0x0800aadf
 800a974:	0800ab77 	.word	0x0800ab77
 800a978:	0800ab93 	.word	0x0800ab93
 800a97c:	0800abe5 	.word	0x0800abe5
 800a980:	0800ac15 	.word	0x0800ac15
 800a984:	0800ac77 	.word	0x0800ac77
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	78fa      	ldrb	r2, [r7, #3]
 800a98c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	2202      	movs	r2, #2
 800a994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	795b      	ldrb	r3, [r3, #5]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	9200      	str	r2, [sp, #0]
 800a9a6:	221f      	movs	r2, #31
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f002 f824 	bl	800c9f6 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a9ae:	e17e      	b.n	800acae <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	795b      	ldrb	r3, [r3, #5]
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f004 feda 	bl	800f770 <USBH_LL_GetURBState>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a9c0:	7d3b      	ldrb	r3, [r7, #20]
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d118      	bne.n	800a9f8 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00f      	beq.n	800a9ee <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a9d4:	b25b      	sxtb	r3, r3
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	da04      	bge.n	800a9e4 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	2203      	movs	r2, #3
 800a9de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a9e2:	e157      	b.n	800ac94 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	2205      	movs	r2, #5
 800a9e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a9ec:	e152      	b.n	800ac94 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	2207      	movs	r2, #7
 800a9f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a9f6:	e14d      	b.n	800ac94 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a9f8:	7d3b      	ldrb	r3, [r7, #20]
 800a9fa:	2b02      	cmp	r3, #2
 800a9fc:	d104      	bne.n	800aa08 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	2201      	movs	r2, #1
 800aa02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aa06:	e145      	b.n	800ac94 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800aa08:	7d3b      	ldrb	r3, [r7, #20]
 800aa0a:	2b05      	cmp	r3, #5
 800aa0c:	f040 8142 	bne.w	800ac94 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	220a      	movs	r2, #10
 800aa14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aa18:	e13c      	b.n	800ac94 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	895a      	ldrh	r2, [r3, #10]
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	791b      	ldrb	r3, [r3, #4]
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f002 f809 	bl	800ca40 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	2204      	movs	r2, #4
 800aa32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800aa36:	e13a      	b.n	800acae <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	791b      	ldrb	r3, [r3, #4]
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f004 fe96 	bl	800f770 <USBH_LL_GetURBState>
 800aa44:	4603      	mov	r3, r0
 800aa46:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800aa48:	7d3b      	ldrb	r3, [r7, #20]
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d12d      	bne.n	800aaaa <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa52:	693a      	ldr	r2, [r7, #16]
 800aa54:	8952      	ldrh	r2, [r2, #10]
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d910      	bls.n	800aa7c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa60:	693a      	ldr	r2, [r7, #16]
 800aa62:	8952      	ldrh	r2, [r2, #10]
 800aa64:	441a      	add	r2, r3
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa70:	693a      	ldr	r2, [r7, #16]
 800aa72:	8952      	ldrh	r2, [r2, #10]
 800aa74:	1a9a      	subs	r2, r3, r2
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	65da      	str	r2, [r3, #92]	; 0x5c
 800aa7a:	e002      	b.n	800aa82 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d00a      	beq.n	800aaa0 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	895a      	ldrh	r2, [r3, #10]
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	791b      	ldrb	r3, [r3, #4]
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f001 ffd1 	bl	800ca40 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800aa9e:	e0fb      	b.n	800ac98 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	2207      	movs	r2, #7
 800aaa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aaa8:	e0f6      	b.n	800ac98 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800aaaa:	7d3b      	ldrb	r3, [r7, #20]
 800aaac:	2b05      	cmp	r3, #5
 800aaae:	f040 80f3 	bne.w	800ac98 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	2209      	movs	r2, #9
 800aab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aaba:	e0ed      	b.n	800ac98 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	891a      	ldrh	r2, [r3, #8]
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	795b      	ldrb	r3, [r3, #5]
 800aaca:	2001      	movs	r0, #1
 800aacc:	9000      	str	r0, [sp, #0]
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f001 ff91 	bl	800c9f6 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	2206      	movs	r2, #6
 800aad8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aadc:	e0e7      	b.n	800acae <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	795b      	ldrb	r3, [r3, #5]
 800aae2:	4619      	mov	r1, r3
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f004 fe43 	bl	800f770 <USBH_LL_GetURBState>
 800aaea:	4603      	mov	r3, r0
 800aaec:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800aaee:	7d3b      	ldrb	r3, [r7, #20]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d12f      	bne.n	800ab54 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaf8:	693a      	ldr	r2, [r7, #16]
 800aafa:	8912      	ldrh	r2, [r2, #8]
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d910      	bls.n	800ab22 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab06:	693a      	ldr	r2, [r7, #16]
 800ab08:	8912      	ldrh	r2, [r2, #8]
 800ab0a:	441a      	add	r2, r3
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab16:	693a      	ldr	r2, [r7, #16]
 800ab18:	8912      	ldrh	r2, [r2, #8]
 800ab1a:	1a9a      	subs	r2, r3, r2
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	65da      	str	r2, [r3, #92]	; 0x5c
 800ab20:	e002      	b.n	800ab28 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	2200      	movs	r2, #0
 800ab26:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d00c      	beq.n	800ab4a <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	891a      	ldrh	r2, [r3, #8]
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	795b      	ldrb	r3, [r3, #5]
 800ab3e:	2001      	movs	r0, #1
 800ab40:	9000      	str	r0, [sp, #0]
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f001 ff57 	bl	800c9f6 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800ab48:	e0a8      	b.n	800ac9c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	2207      	movs	r2, #7
 800ab4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ab52:	e0a3      	b.n	800ac9c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ab54:	7d3b      	ldrb	r3, [r7, #20]
 800ab56:	2b02      	cmp	r3, #2
 800ab58:	d104      	bne.n	800ab64 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	2205      	movs	r2, #5
 800ab5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ab62:	e09b      	b.n	800ac9c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800ab64:	7d3b      	ldrb	r3, [r7, #20]
 800ab66:	2b05      	cmp	r3, #5
 800ab68:	f040 8098 	bne.w	800ac9c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	220a      	movs	r2, #10
 800ab70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ab74:	e092      	b.n	800ac9c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	791b      	ldrb	r3, [r3, #4]
 800ab80:	220d      	movs	r2, #13
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f001 ff5c 	bl	800ca40 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	2208      	movs	r2, #8
 800ab8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ab90:	e08d      	b.n	800acae <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	791b      	ldrb	r3, [r3, #4]
 800ab96:	4619      	mov	r1, r3
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f004 fde9 	bl	800f770 <USBH_LL_GetURBState>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800aba2:	7d3b      	ldrb	r3, [r7, #20]
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d115      	bne.n	800abd4 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 f8a9 	bl	800ad10 <USBH_MSC_DecodeCSW>
 800abbe:	4603      	mov	r3, r0
 800abc0:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800abc2:	7d7b      	ldrb	r3, [r7, #21]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d102      	bne.n	800abce <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800abc8:	2300      	movs	r3, #0
 800abca:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800abcc:	e068      	b.n	800aca0 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800abce:	2302      	movs	r3, #2
 800abd0:	75fb      	strb	r3, [r7, #23]
      break;
 800abd2:	e065      	b.n	800aca0 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800abd4:	7d3b      	ldrb	r3, [r7, #20]
 800abd6:	2b05      	cmp	r3, #5
 800abd8:	d162      	bne.n	800aca0 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	2209      	movs	r2, #9
 800abde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800abe2:	e05d      	b.n	800aca0 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800abe4:	78fb      	ldrb	r3, [r7, #3]
 800abe6:	2200      	movs	r2, #0
 800abe8:	4619      	mov	r1, r3
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 f864 	bl	800acb8 <USBH_MSC_BOT_Abort>
 800abf0:	4603      	mov	r3, r0
 800abf2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800abf4:	7dbb      	ldrb	r3, [r7, #22]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d104      	bne.n	800ac04 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	2207      	movs	r2, #7
 800abfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800ac02:	e04f      	b.n	800aca4 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800ac04:	7dbb      	ldrb	r3, [r7, #22]
 800ac06:	2b04      	cmp	r3, #4
 800ac08:	d14c      	bne.n	800aca4 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	220b      	movs	r2, #11
 800ac0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ac12:	e047      	b.n	800aca4 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800ac14:	78fb      	ldrb	r3, [r7, #3]
 800ac16:	2201      	movs	r2, #1
 800ac18:	4619      	mov	r1, r3
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 f84c 	bl	800acb8 <USBH_MSC_BOT_Abort>
 800ac20:	4603      	mov	r3, r0
 800ac22:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800ac24:	7dbb      	ldrb	r3, [r7, #22]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d11d      	bne.n	800ac66 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	795b      	ldrb	r3, [r3, #5]
 800ac2e:	4619      	mov	r1, r3
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f004 fdee 	bl	800f812 <USBH_LL_GetToggle>
 800ac36:	4603      	mov	r3, r0
 800ac38:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	7959      	ldrb	r1, [r3, #5]
 800ac3e:	7bfb      	ldrb	r3, [r7, #15]
 800ac40:	f1c3 0301 	rsb	r3, r3, #1
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	461a      	mov	r2, r3
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f004 fdb2 	bl	800f7b2 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	791b      	ldrb	r3, [r3, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	4619      	mov	r1, r3
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f004 fdab 	bl	800f7b2 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	2209      	movs	r2, #9
 800ac60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800ac64:	e020      	b.n	800aca8 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800ac66:	7dbb      	ldrb	r3, [r7, #22]
 800ac68:	2b04      	cmp	r3, #4
 800ac6a:	d11d      	bne.n	800aca8 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	220b      	movs	r2, #11
 800ac70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ac74:	e018      	b.n	800aca8 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f7ff fdf2 	bl	800a860 <USBH_MSC_BOT_REQ_Reset>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800ac80:	7dfb      	ldrb	r3, [r7, #23]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d112      	bne.n	800acac <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800ac8e:	e00d      	b.n	800acac <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800ac90:	bf00      	nop
 800ac92:	e00c      	b.n	800acae <USBH_MSC_BOT_Process+0x392>
      break;
 800ac94:	bf00      	nop
 800ac96:	e00a      	b.n	800acae <USBH_MSC_BOT_Process+0x392>
      break;
 800ac98:	bf00      	nop
 800ac9a:	e008      	b.n	800acae <USBH_MSC_BOT_Process+0x392>
      break;
 800ac9c:	bf00      	nop
 800ac9e:	e006      	b.n	800acae <USBH_MSC_BOT_Process+0x392>
      break;
 800aca0:	bf00      	nop
 800aca2:	e004      	b.n	800acae <USBH_MSC_BOT_Process+0x392>
      break;
 800aca4:	bf00      	nop
 800aca6:	e002      	b.n	800acae <USBH_MSC_BOT_Process+0x392>
      break;
 800aca8:	bf00      	nop
 800acaa:	e000      	b.n	800acae <USBH_MSC_BOT_Process+0x392>
      break;
 800acac:	bf00      	nop
  }
  return status;
 800acae:	7dfb      	ldrb	r3, [r7, #23]
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3718      	adds	r7, #24
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	460b      	mov	r3, r1
 800acc2:	70fb      	strb	r3, [r7, #3]
 800acc4:	4613      	mov	r3, r2
 800acc6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800acc8:	2302      	movs	r3, #2
 800acca:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acd2:	69db      	ldr	r3, [r3, #28]
 800acd4:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800acd6:	78bb      	ldrb	r3, [r7, #2]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d002      	beq.n	800ace2 <USBH_MSC_BOT_Abort+0x2a>
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d009      	beq.n	800acf4 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800ace0:	e011      	b.n	800ad06 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	79db      	ldrb	r3, [r3, #7]
 800ace6:	4619      	mov	r1, r3
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f001 f9a8 	bl	800c03e <USBH_ClrFeature>
 800acee:	4603      	mov	r3, r0
 800acf0:	73fb      	strb	r3, [r7, #15]
      break;
 800acf2:	e008      	b.n	800ad06 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	799b      	ldrb	r3, [r3, #6]
 800acf8:	4619      	mov	r1, r3
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f001 f99f 	bl	800c03e <USBH_ClrFeature>
 800ad00:	4603      	mov	r3, r0
 800ad02:	73fb      	strb	r3, [r7, #15]
      break;
 800ad04:	bf00      	nop
  }
  return status;
 800ad06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3710      	adds	r7, #16
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad1e:	69db      	ldr	r3, [r3, #28]
 800ad20:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800ad22:	2301      	movs	r3, #1
 800ad24:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	791b      	ldrb	r3, [r3, #4]
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f004 fc8d 	bl	800f64c <USBH_LL_GetLastXferSize>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b0d      	cmp	r3, #13
 800ad36:	d002      	beq.n	800ad3e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800ad38:	2302      	movs	r3, #2
 800ad3a:	73fb      	strb	r3, [r7, #15]
 800ad3c:	e024      	b.n	800ad88 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad42:	4a14      	ldr	r2, [pc, #80]	; (800ad94 <USBH_MSC_DecodeCSW+0x84>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d11d      	bne.n	800ad84 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d119      	bne.n	800ad88 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d102      	bne.n	800ad64 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	73fb      	strb	r3, [r7, #15]
 800ad62:	e011      	b.n	800ad88 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d102      	bne.n	800ad74 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	73fb      	strb	r3, [r7, #15]
 800ad72:	e009      	b.n	800ad88 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ad7a:	2b02      	cmp	r3, #2
 800ad7c:	d104      	bne.n	800ad88 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800ad7e:	2302      	movs	r3, #2
 800ad80:	73fb      	strb	r3, [r7, #15]
 800ad82:	e001      	b.n	800ad88 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800ad84:	2302      	movs	r3, #2
 800ad86:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800ad88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3710      	adds	r7, #16
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	53425355 	.word	0x53425355

0800ad98 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	460b      	mov	r3, r1
 800ada2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ada4:	2302      	movs	r3, #2
 800ada6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adae:	69db      	ldr	r3, [r3, #28]
 800adb0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d002      	beq.n	800adc2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	d021      	beq.n	800ae04 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800adc0:	e028      	b.n	800ae14 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	2200      	movs	r2, #0
 800adc6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	2200      	movs	r2, #0
 800adcc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	220a      	movs	r2, #10
 800add4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	3363      	adds	r3, #99	; 0x63
 800addc:	2210      	movs	r2, #16
 800adde:	2100      	movs	r1, #0
 800ade0:	4618      	mov	r0, r3
 800ade2:	f004 fdc5 	bl	800f970 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	2202      	movs	r2, #2
 800adfa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800adfe:	2301      	movs	r3, #1
 800ae00:	73fb      	strb	r3, [r7, #15]
      break;
 800ae02:	e007      	b.n	800ae14 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ae04:	78fb      	ldrb	r3, [r7, #3]
 800ae06:	4619      	mov	r1, r3
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f7ff fd87 	bl	800a91c <USBH_MSC_BOT_Process>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	73fb      	strb	r3, [r7, #15]
      break;
 800ae12:	bf00      	nop
  }

  return error;
 800ae14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b086      	sub	sp, #24
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	60f8      	str	r0, [r7, #12]
 800ae26:	460b      	mov	r3, r1
 800ae28:	607a      	str	r2, [r7, #4]
 800ae2a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae36:	69db      	ldr	r3, [r3, #28]
 800ae38:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d002      	beq.n	800ae4a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	d027      	beq.n	800ae98 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800ae48:	e05f      	b.n	800af0a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	2208      	movs	r2, #8
 800ae4e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	2280      	movs	r2, #128	; 0x80
 800ae54:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	220a      	movs	r2, #10
 800ae5c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	3363      	adds	r3, #99	; 0x63
 800ae64:	2210      	movs	r2, #16
 800ae66:	2100      	movs	r1, #0
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f004 fd81 	bl	800f970 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	2225      	movs	r2, #37	; 0x25
 800ae72:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	2202      	movs	r2, #2
 800ae82:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	f103 0210 	add.w	r2, r3, #16
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ae92:	2301      	movs	r3, #1
 800ae94:	75fb      	strb	r3, [r7, #23]
      break;
 800ae96:	e038      	b.n	800af0a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ae98:	7afb      	ldrb	r3, [r7, #11]
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	68f8      	ldr	r0, [r7, #12]
 800ae9e:	f7ff fd3d 	bl	800a91c <USBH_MSC_BOT_Process>
 800aea2:	4603      	mov	r3, r0
 800aea4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800aea6:	7dfb      	ldrb	r3, [r7, #23]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d12d      	bne.n	800af08 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aeb2:	3303      	adds	r3, #3
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aebe:	3302      	adds	r3, #2
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	021b      	lsls	r3, r3, #8
 800aec4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aecc:	3301      	adds	r3, #1
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800aed2:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	061b      	lsls	r3, r3, #24
 800aede:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aeea:	3307      	adds	r3, #7
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	b29a      	uxth	r2, r3
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aef6:	3306      	adds	r3, #6
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	021b      	lsls	r3, r3, #8
 800aefe:	b29b      	uxth	r3, r3
 800af00:	4313      	orrs	r3, r2
 800af02:	b29a      	uxth	r2, r3
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	809a      	strh	r2, [r3, #4]
      break;
 800af08:	bf00      	nop
  }

  return error;
 800af0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3718      	adds	r7, #24
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	460b      	mov	r3, r1
 800af1e:	607a      	str	r2, [r7, #4]
 800af20:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800af22:	2302      	movs	r3, #2
 800af24:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af2c:	69db      	ldr	r3, [r3, #28]
 800af2e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800af36:	2b01      	cmp	r3, #1
 800af38:	d002      	beq.n	800af40 <USBH_MSC_SCSI_Inquiry+0x2c>
 800af3a:	2b02      	cmp	r3, #2
 800af3c:	d03d      	beq.n	800afba <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800af3e:	e089      	b.n	800b054 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	2224      	movs	r2, #36	; 0x24
 800af44:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	2280      	movs	r2, #128	; 0x80
 800af4a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	220a      	movs	r2, #10
 800af52:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	3363      	adds	r3, #99	; 0x63
 800af5a:	220a      	movs	r2, #10
 800af5c:	2100      	movs	r1, #0
 800af5e:	4618      	mov	r0, r3
 800af60:	f004 fd06 	bl	800f970 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	2212      	movs	r2, #18
 800af68:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800af6c:	7afb      	ldrb	r3, [r7, #11]
 800af6e:	015b      	lsls	r3, r3, #5
 800af70:	b2da      	uxtb	r2, r3
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	2200      	movs	r2, #0
 800af84:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	2224      	movs	r2, #36	; 0x24
 800af8c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	2200      	movs	r2, #0
 800af94:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	2202      	movs	r2, #2
 800afa4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	f103 0210 	add.w	r2, r3, #16
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800afb4:	2301      	movs	r3, #1
 800afb6:	75fb      	strb	r3, [r7, #23]
      break;
 800afb8:	e04c      	b.n	800b054 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800afba:	7afb      	ldrb	r3, [r7, #11]
 800afbc:	4619      	mov	r1, r3
 800afbe:	68f8      	ldr	r0, [r7, #12]
 800afc0:	f7ff fcac 	bl	800a91c <USBH_MSC_BOT_Process>
 800afc4:	4603      	mov	r3, r0
 800afc6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800afc8:	7dfb      	ldrb	r3, [r7, #23]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d141      	bne.n	800b052 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800afce:	2222      	movs	r2, #34	; 0x22
 800afd0:	2100      	movs	r1, #0
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f004 fccc 	bl	800f970 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	f003 031f 	and.w	r3, r3, #31
 800afe4:	b2da      	uxtb	r2, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	095b      	lsrs	r3, r3, #5
 800aff4:	b2da      	uxtb	r2, r3
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b000:	3301      	adds	r3, #1
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	b25b      	sxtb	r3, r3
 800b006:	2b00      	cmp	r3, #0
 800b008:	da03      	bge.n	800b012 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2201      	movs	r2, #1
 800b00e:	709a      	strb	r2, [r3, #2]
 800b010:	e002      	b.n	800b018 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2200      	movs	r2, #0
 800b016:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	1cd8      	adds	r0, r3, #3
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b022:	3308      	adds	r3, #8
 800b024:	2208      	movs	r2, #8
 800b026:	4619      	mov	r1, r3
 800b028:	f004 fc94 	bl	800f954 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f103 000c 	add.w	r0, r3, #12
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b038:	3310      	adds	r3, #16
 800b03a:	2210      	movs	r2, #16
 800b03c:	4619      	mov	r1, r3
 800b03e:	f004 fc89 	bl	800f954 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	331d      	adds	r3, #29
 800b046:	693a      	ldr	r2, [r7, #16]
 800b048:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800b04c:	3220      	adds	r2, #32
 800b04e:	6812      	ldr	r2, [r2, #0]
 800b050:	601a      	str	r2, [r3, #0]
      break;
 800b052:	bf00      	nop
  }

  return error;
 800b054:	7dfb      	ldrb	r3, [r7, #23]
}
 800b056:	4618      	mov	r0, r3
 800b058:	3718      	adds	r7, #24
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b086      	sub	sp, #24
 800b062:	af00      	add	r7, sp, #0
 800b064:	60f8      	str	r0, [r7, #12]
 800b066:	460b      	mov	r3, r1
 800b068:	607a      	str	r2, [r7, #4]
 800b06a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b06c:	2302      	movs	r3, #2
 800b06e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b076:	69db      	ldr	r3, [r3, #28]
 800b078:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b080:	2b01      	cmp	r3, #1
 800b082:	d002      	beq.n	800b08a <USBH_MSC_SCSI_RequestSense+0x2c>
 800b084:	2b02      	cmp	r3, #2
 800b086:	d03d      	beq.n	800b104 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800b088:	e05d      	b.n	800b146 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	220e      	movs	r2, #14
 800b08e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	2280      	movs	r2, #128	; 0x80
 800b094:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	220a      	movs	r2, #10
 800b09c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	3363      	adds	r3, #99	; 0x63
 800b0a4:	2210      	movs	r2, #16
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f004 fc61 	bl	800f970 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	2203      	movs	r2, #3
 800b0b2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b0b6:	7afb      	ldrb	r3, [r7, #11]
 800b0b8:	015b      	lsls	r3, r3, #5
 800b0ba:	b2da      	uxtb	r2, r3
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	220e      	movs	r2, #14
 800b0d6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	2202      	movs	r2, #2
 800b0ee:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	f103 0210 	add.w	r2, r3, #16
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b0fe:	2301      	movs	r3, #1
 800b100:	75fb      	strb	r3, [r7, #23]
      break;
 800b102:	e020      	b.n	800b146 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b104:	7afb      	ldrb	r3, [r7, #11]
 800b106:	4619      	mov	r1, r3
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f7ff fc07 	bl	800a91c <USBH_MSC_BOT_Process>
 800b10e:	4603      	mov	r3, r0
 800b110:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b112:	7dfb      	ldrb	r3, [r7, #23]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d115      	bne.n	800b144 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b11e:	3302      	adds	r3, #2
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	f003 030f 	and.w	r3, r3, #15
 800b126:	b2da      	uxtb	r2, r3
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b132:	7b1a      	ldrb	r2, [r3, #12]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b13e:	7b5a      	ldrb	r2, [r3, #13]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	709a      	strb	r2, [r3, #2]
      break;
 800b144:	bf00      	nop
  }

  return error;
 800b146:	7dfb      	ldrb	r3, [r7, #23]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3718      	adds	r7, #24
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b086      	sub	sp, #24
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	607a      	str	r2, [r7, #4]
 800b15a:	603b      	str	r3, [r7, #0]
 800b15c:	460b      	mov	r3, r1
 800b15e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b160:	2302      	movs	r3, #2
 800b162:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b16a:	69db      	ldr	r3, [r3, #28]
 800b16c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b174:	2b01      	cmp	r3, #1
 800b176:	d002      	beq.n	800b17e <USBH_MSC_SCSI_Write+0x2e>
 800b178:	2b02      	cmp	r3, #2
 800b17a:	d047      	beq.n	800b20c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b17c:	e04e      	b.n	800b21c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b184:	461a      	mov	r2, r3
 800b186:	6a3b      	ldr	r3, [r7, #32]
 800b188:	fb03 f202 	mul.w	r2, r3, r2
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	2200      	movs	r2, #0
 800b194:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	220a      	movs	r2, #10
 800b19c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	3363      	adds	r3, #99	; 0x63
 800b1a4:	2210      	movs	r2, #16
 800b1a6:	2100      	movs	r1, #0
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f004 fbe1 	bl	800f970 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	222a      	movs	r2, #42	; 0x2a
 800b1b2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b1b6:	79fa      	ldrb	r2, [r7, #7]
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b1be:	79ba      	ldrb	r2, [r7, #6]
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b1c6:	797a      	ldrb	r2, [r7, #5]
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b1ce:	1d3b      	adds	r3, r7, #4
 800b1d0:	781a      	ldrb	r2, [r3, #0]
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b1d8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b1e2:	f107 0320 	add.w	r3, r7, #32
 800b1e6:	781a      	ldrb	r2, [r3, #0]
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	2202      	movs	r2, #2
 800b1fa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b206:	2301      	movs	r3, #1
 800b208:	75fb      	strb	r3, [r7, #23]
      break;
 800b20a:	e007      	b.n	800b21c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b20c:	7afb      	ldrb	r3, [r7, #11]
 800b20e:	4619      	mov	r1, r3
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f7ff fb83 	bl	800a91c <USBH_MSC_BOT_Process>
 800b216:	4603      	mov	r3, r0
 800b218:	75fb      	strb	r3, [r7, #23]
      break;
 800b21a:	bf00      	nop
  }

  return error;
 800b21c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3718      	adds	r7, #24
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}

0800b226 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800b226:	b580      	push	{r7, lr}
 800b228:	b086      	sub	sp, #24
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	60f8      	str	r0, [r7, #12]
 800b22e:	607a      	str	r2, [r7, #4]
 800b230:	603b      	str	r3, [r7, #0]
 800b232:	460b      	mov	r3, r1
 800b234:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b236:	2302      	movs	r3, #2
 800b238:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b240:	69db      	ldr	r3, [r3, #28]
 800b242:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d002      	beq.n	800b254 <USBH_MSC_SCSI_Read+0x2e>
 800b24e:	2b02      	cmp	r3, #2
 800b250:	d047      	beq.n	800b2e2 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b252:	e04e      	b.n	800b2f2 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b25a:	461a      	mov	r2, r3
 800b25c:	6a3b      	ldr	r3, [r7, #32]
 800b25e:	fb03 f202 	mul.w	r2, r3, r2
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	2280      	movs	r2, #128	; 0x80
 800b26a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	220a      	movs	r2, #10
 800b272:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	3363      	adds	r3, #99	; 0x63
 800b27a:	2210      	movs	r2, #16
 800b27c:	2100      	movs	r1, #0
 800b27e:	4618      	mov	r0, r3
 800b280:	f004 fb76 	bl	800f970 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	2228      	movs	r2, #40	; 0x28
 800b288:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b28c:	79fa      	ldrb	r2, [r7, #7]
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b294:	79ba      	ldrb	r2, [r7, #6]
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b29c:	797a      	ldrb	r2, [r7, #5]
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b2a4:	1d3b      	adds	r3, r7, #4
 800b2a6:	781a      	ldrb	r2, [r3, #0]
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b2ae:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b2b8:	f107 0320 	add.w	r3, r7, #32
 800b2bc:	781a      	ldrb	r2, [r3, #0]
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	2202      	movs	r2, #2
 800b2d0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	683a      	ldr	r2, [r7, #0]
 800b2d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	75fb      	strb	r3, [r7, #23]
      break;
 800b2e0:	e007      	b.n	800b2f2 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b2e2:	7afb      	ldrb	r3, [r7, #11]
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	68f8      	ldr	r0, [r7, #12]
 800b2e8:	f7ff fb18 	bl	800a91c <USBH_MSC_BOT_Process>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	75fb      	strb	r3, [r7, #23]
      break;
 800b2f0:	bf00      	nop
  }

  return error;
 800b2f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3718      	adds	r7, #24
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	4613      	mov	r3, r2
 800b308:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d101      	bne.n	800b314 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b310:	2302      	movs	r3, #2
 800b312:	e029      	b.n	800b368 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	79fa      	ldrb	r2, [r7, #7]
 800b318:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2200      	movs	r2, #0
 800b320:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2200      	movs	r2, #0
 800b328:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b32c:	68f8      	ldr	r0, [r7, #12]
 800b32e:	f000 f81f 	bl	800b370 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2200      	movs	r2, #0
 800b336:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2200      	movs	r2, #0
 800b33e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2200      	movs	r2, #0
 800b346:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d003      	beq.n	800b360 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	68ba      	ldr	r2, [r7, #8]
 800b35c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b360:	68f8      	ldr	r0, [r7, #12]
 800b362:	f004 f8bf 	bl	800f4e4 <USBH_LL_Init>

  return USBH_OK;
 800b366:	2300      	movs	r3, #0
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3710      	adds	r7, #16
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b370:	b480      	push	{r7}
 800b372:	b085      	sub	sp, #20
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b378:	2300      	movs	r3, #0
 800b37a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b37c:	2300      	movs	r3, #0
 800b37e:	60fb      	str	r3, [r7, #12]
 800b380:	e009      	b.n	800b396 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	33e0      	adds	r3, #224	; 0xe0
 800b388:	009b      	lsls	r3, r3, #2
 800b38a:	4413      	add	r3, r2
 800b38c:	2200      	movs	r2, #0
 800b38e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	3301      	adds	r3, #1
 800b394:	60fb      	str	r3, [r7, #12]
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2b0f      	cmp	r3, #15
 800b39a:	d9f2      	bls.n	800b382 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b39c:	2300      	movs	r3, #0
 800b39e:	60fb      	str	r3, [r7, #12]
 800b3a0:	e009      	b.n	800b3b6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	60fb      	str	r3, [r7, #12]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3bc:	d3f1      	bcc.n	800b3a2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2240      	movs	r2, #64	; 0x40
 800b3e2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b40a:	2300      	movs	r3, #0
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3714      	adds	r7, #20
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b422:	2300      	movs	r3, #0
 800b424:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d016      	beq.n	800b45a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b432:	2b00      	cmp	r3, #0
 800b434:	d10e      	bne.n	800b454 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b43c:	1c59      	adds	r1, r3, #1
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	33de      	adds	r3, #222	; 0xde
 800b448:	6839      	ldr	r1, [r7, #0]
 800b44a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b44e:	2300      	movs	r3, #0
 800b450:	73fb      	strb	r3, [r7, #15]
 800b452:	e004      	b.n	800b45e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b454:	2302      	movs	r3, #2
 800b456:	73fb      	strb	r3, [r7, #15]
 800b458:	e001      	b.n	800b45e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b45a:	2302      	movs	r3, #2
 800b45c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b460:	4618      	mov	r0, r3
 800b462:	3714      	adds	r7, #20
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr

0800b46c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b085      	sub	sp, #20
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	460b      	mov	r3, r1
 800b476:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b478:	2300      	movs	r3, #0
 800b47a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b482:	78fa      	ldrb	r2, [r7, #3]
 800b484:	429a      	cmp	r2, r3
 800b486:	d204      	bcs.n	800b492 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	78fa      	ldrb	r2, [r7, #3]
 800b48c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b490:	e001      	b.n	800b496 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b492:	2302      	movs	r3, #2
 800b494:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b496:	7bfb      	ldrb	r3, [r7, #15]
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3714      	adds	r7, #20
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b087      	sub	sp, #28
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	4608      	mov	r0, r1
 800b4ae:	4611      	mov	r1, r2
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	70fb      	strb	r3, [r7, #3]
 800b4b6:	460b      	mov	r3, r1
 800b4b8:	70bb      	strb	r3, [r7, #2]
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b4cc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b4ce:	e025      	b.n	800b51c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b4d0:	7dfb      	ldrb	r3, [r7, #23]
 800b4d2:	221a      	movs	r2, #26
 800b4d4:	fb02 f303 	mul.w	r3, r2, r3
 800b4d8:	3308      	adds	r3, #8
 800b4da:	68fa      	ldr	r2, [r7, #12]
 800b4dc:	4413      	add	r3, r2
 800b4de:	3302      	adds	r3, #2
 800b4e0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	795b      	ldrb	r3, [r3, #5]
 800b4e6:	78fa      	ldrb	r2, [r7, #3]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d002      	beq.n	800b4f2 <USBH_FindInterface+0x4e>
 800b4ec:	78fb      	ldrb	r3, [r7, #3]
 800b4ee:	2bff      	cmp	r3, #255	; 0xff
 800b4f0:	d111      	bne.n	800b516 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b4f6:	78ba      	ldrb	r2, [r7, #2]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d002      	beq.n	800b502 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b4fc:	78bb      	ldrb	r3, [r7, #2]
 800b4fe:	2bff      	cmp	r3, #255	; 0xff
 800b500:	d109      	bne.n	800b516 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b506:	787a      	ldrb	r2, [r7, #1]
 800b508:	429a      	cmp	r2, r3
 800b50a:	d002      	beq.n	800b512 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b50c:	787b      	ldrb	r3, [r7, #1]
 800b50e:	2bff      	cmp	r3, #255	; 0xff
 800b510:	d101      	bne.n	800b516 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b512:	7dfb      	ldrb	r3, [r7, #23]
 800b514:	e006      	b.n	800b524 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b516:	7dfb      	ldrb	r3, [r7, #23]
 800b518:	3301      	adds	r3, #1
 800b51a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b51c:	7dfb      	ldrb	r3, [r7, #23]
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d9d6      	bls.n	800b4d0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b522:	23ff      	movs	r3, #255	; 0xff
}
 800b524:	4618      	mov	r0, r3
 800b526:	371c      	adds	r7, #28
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f004 f80f 	bl	800f55c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b53e:	2101      	movs	r1, #1
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f004 f928 	bl	800f796 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b546:	2300      	movs	r3, #0
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3708      	adds	r7, #8
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b088      	sub	sp, #32
 800b554:	af04      	add	r7, sp, #16
 800b556:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b558:	2302      	movs	r3, #2
 800b55a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b55c:	2300      	movs	r3, #0
 800b55e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b566:	b2db      	uxtb	r3, r3
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d102      	bne.n	800b572 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2203      	movs	r2, #3
 800b570:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	b2db      	uxtb	r3, r3
 800b578:	2b0b      	cmp	r3, #11
 800b57a:	f200 81be 	bhi.w	800b8fa <USBH_Process+0x3aa>
 800b57e:	a201      	add	r2, pc, #4	; (adr r2, 800b584 <USBH_Process+0x34>)
 800b580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b584:	0800b5b5 	.word	0x0800b5b5
 800b588:	0800b5e7 	.word	0x0800b5e7
 800b58c:	0800b64f 	.word	0x0800b64f
 800b590:	0800b895 	.word	0x0800b895
 800b594:	0800b8fb 	.word	0x0800b8fb
 800b598:	0800b6f3 	.word	0x0800b6f3
 800b59c:	0800b83b 	.word	0x0800b83b
 800b5a0:	0800b729 	.word	0x0800b729
 800b5a4:	0800b749 	.word	0x0800b749
 800b5a8:	0800b769 	.word	0x0800b769
 800b5ac:	0800b7ad 	.word	0x0800b7ad
 800b5b0:	0800b87d 	.word	0x0800b87d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f000 819e 	beq.w	800b8fe <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b5c8:	20c8      	movs	r0, #200	; 0xc8
 800b5ca:	f004 f952 	bl	800f872 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f004 f821 	bl	800f616 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b5e4:	e18b      	b.n	800b8fe <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	d107      	bne.n	800b600 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2202      	movs	r2, #2
 800b5fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b5fe:	e18d      	b.n	800b91c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b606:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b60a:	d914      	bls.n	800b636 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b612:	3301      	adds	r3, #1
 800b614:	b2da      	uxtb	r2, r3
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b622:	2b03      	cmp	r3, #3
 800b624:	d903      	bls.n	800b62e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	220d      	movs	r2, #13
 800b62a:	701a      	strb	r2, [r3, #0]
      break;
 800b62c:	e176      	b.n	800b91c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	701a      	strb	r2, [r3, #0]
      break;
 800b634:	e172      	b.n	800b91c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b63c:	f103 020a 	add.w	r2, r3, #10
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b646:	200a      	movs	r0, #10
 800b648:	f004 f913 	bl	800f872 <USBH_Delay>
      break;
 800b64c:	e166      	b.n	800b91c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b654:	2b00      	cmp	r3, #0
 800b656:	d005      	beq.n	800b664 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b65e:	2104      	movs	r1, #4
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b664:	2064      	movs	r0, #100	; 0x64
 800b666:	f004 f904 	bl	800f872 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f003 ffac 	bl	800f5c8 <USBH_LL_GetSpeed>
 800b670:	4603      	mov	r3, r0
 800b672:	461a      	mov	r2, r3
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2205      	movs	r2, #5
 800b67e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b680:	2100      	movs	r1, #0
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f001 fa29 	bl	800cada <USBH_AllocPipe>
 800b688:	4603      	mov	r3, r0
 800b68a:	461a      	mov	r2, r3
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b690:	2180      	movs	r1, #128	; 0x80
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f001 fa21 	bl	800cada <USBH_AllocPipe>
 800b698:	4603      	mov	r3, r0
 800b69a:	461a      	mov	r2, r3
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	7919      	ldrb	r1, [r3, #4]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b6b4:	b292      	uxth	r2, r2
 800b6b6:	9202      	str	r2, [sp, #8]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	9201      	str	r2, [sp, #4]
 800b6bc:	9300      	str	r3, [sp, #0]
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2280      	movs	r2, #128	; 0x80
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f001 f9da 	bl	800ca7c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	7959      	ldrb	r1, [r3, #5]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b6dc:	b292      	uxth	r2, r2
 800b6de:	9202      	str	r2, [sp, #8]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	9201      	str	r2, [sp, #4]
 800b6e4:	9300      	str	r3, [sp, #0]
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f001 f9c6 	bl	800ca7c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b6f0:	e114      	b.n	800b91c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 f918 	bl	800b928 <USBH_HandleEnum>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b6fc:	7bbb      	ldrb	r3, [r7, #14]
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	2b00      	cmp	r3, #0
 800b702:	f040 80fe 	bne.w	800b902 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2200      	movs	r2, #0
 800b70a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b714:	2b01      	cmp	r3, #1
 800b716:	d103      	bne.n	800b720 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2208      	movs	r2, #8
 800b71c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b71e:	e0f0      	b.n	800b902 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2207      	movs	r2, #7
 800b724:	701a      	strb	r2, [r3, #0]
      break;
 800b726:	e0ec      	b.n	800b902 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f000 80e9 	beq.w	800b906 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b73a:	2101      	movs	r1, #1
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2208      	movs	r2, #8
 800b744:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b746:	e0de      	b.n	800b906 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b74e:	b29b      	uxth	r3, r3
 800b750:	4619      	mov	r1, r3
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 fc2c 	bl	800bfb0 <USBH_SetCfg>
 800b758:	4603      	mov	r3, r0
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	f040 80d5 	bne.w	800b90a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2209      	movs	r2, #9
 800b764:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b766:	e0d0      	b.n	800b90a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b76e:	f003 0320 	and.w	r3, r3, #32
 800b772:	2b00      	cmp	r3, #0
 800b774:	d016      	beq.n	800b7a4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b776:	2101      	movs	r1, #1
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fc3c 	bl	800bff6 <USBH_SetFeature>
 800b77e:	4603      	mov	r3, r0
 800b780:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b782:	7bbb      	ldrb	r3, [r7, #14]
 800b784:	b2db      	uxtb	r3, r3
 800b786:	2b00      	cmp	r3, #0
 800b788:	d103      	bne.n	800b792 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	220a      	movs	r2, #10
 800b78e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b790:	e0bd      	b.n	800b90e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800b792:	7bbb      	ldrb	r3, [r7, #14]
 800b794:	b2db      	uxtb	r3, r3
 800b796:	2b03      	cmp	r3, #3
 800b798:	f040 80b9 	bne.w	800b90e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	220a      	movs	r2, #10
 800b7a0:	701a      	strb	r2, [r3, #0]
      break;
 800b7a2:	e0b4      	b.n	800b90e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	220a      	movs	r2, #10
 800b7a8:	701a      	strb	r2, [r3, #0]
      break;
 800b7aa:	e0b0      	b.n	800b90e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	f000 80ad 	beq.w	800b912 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	73fb      	strb	r3, [r7, #15]
 800b7c4:	e016      	b.n	800b7f4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b7c6:	7bfa      	ldrb	r2, [r7, #15]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	32de      	adds	r2, #222	; 0xde
 800b7cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7d0:	791a      	ldrb	r2, [r3, #4]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d108      	bne.n	800b7ee <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b7dc:	7bfa      	ldrb	r2, [r7, #15]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	32de      	adds	r2, #222	; 0xde
 800b7e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b7ec:	e005      	b.n	800b7fa <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b7ee:	7bfb      	ldrb	r3, [r7, #15]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	73fb      	strb	r3, [r7, #15]
 800b7f4:	7bfb      	ldrb	r3, [r7, #15]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d0e5      	beq.n	800b7c6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b800:	2b00      	cmp	r3, #0
 800b802:	d016      	beq.n	800b832 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b80a:	689b      	ldr	r3, [r3, #8]
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	4798      	blx	r3
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d109      	bne.n	800b82a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2206      	movs	r2, #6
 800b81a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b822:	2103      	movs	r1, #3
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b828:	e073      	b.n	800b912 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	220d      	movs	r2, #13
 800b82e:	701a      	strb	r2, [r3, #0]
      break;
 800b830:	e06f      	b.n	800b912 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	220d      	movs	r2, #13
 800b836:	701a      	strb	r2, [r3, #0]
      break;
 800b838:	e06b      	b.n	800b912 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b840:	2b00      	cmp	r3, #0
 800b842:	d017      	beq.n	800b874 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b84a:	691b      	ldr	r3, [r3, #16]
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	4798      	blx	r3
 800b850:	4603      	mov	r3, r0
 800b852:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b854:	7bbb      	ldrb	r3, [r7, #14]
 800b856:	b2db      	uxtb	r3, r3
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d103      	bne.n	800b864 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	220b      	movs	r2, #11
 800b860:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b862:	e058      	b.n	800b916 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800b864:	7bbb      	ldrb	r3, [r7, #14]
 800b866:	b2db      	uxtb	r3, r3
 800b868:	2b02      	cmp	r3, #2
 800b86a:	d154      	bne.n	800b916 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	220d      	movs	r2, #13
 800b870:	701a      	strb	r2, [r3, #0]
      break;
 800b872:	e050      	b.n	800b916 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	220d      	movs	r2, #13
 800b878:	701a      	strb	r2, [r3, #0]
      break;
 800b87a:	e04c      	b.n	800b916 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b882:	2b00      	cmp	r3, #0
 800b884:	d049      	beq.n	800b91a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b88c:	695b      	ldr	r3, [r3, #20]
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	4798      	blx	r3
      }
      break;
 800b892:	e042      	b.n	800b91a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2200      	movs	r2, #0
 800b898:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f7ff fd67 	bl	800b370 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d009      	beq.n	800b8c0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8b2:	68db      	ldr	r3, [r3, #12]
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d005      	beq.n	800b8d6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b8d0:	2105      	movs	r1, #5
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d107      	bne.n	800b8f2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f7ff fe20 	bl	800b530 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b8f0:	e014      	b.n	800b91c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f003 fe32 	bl	800f55c <USBH_LL_Start>
      break;
 800b8f8:	e010      	b.n	800b91c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800b8fa:	bf00      	nop
 800b8fc:	e00e      	b.n	800b91c <USBH_Process+0x3cc>
      break;
 800b8fe:	bf00      	nop
 800b900:	e00c      	b.n	800b91c <USBH_Process+0x3cc>
      break;
 800b902:	bf00      	nop
 800b904:	e00a      	b.n	800b91c <USBH_Process+0x3cc>
    break;
 800b906:	bf00      	nop
 800b908:	e008      	b.n	800b91c <USBH_Process+0x3cc>
      break;
 800b90a:	bf00      	nop
 800b90c:	e006      	b.n	800b91c <USBH_Process+0x3cc>
      break;
 800b90e:	bf00      	nop
 800b910:	e004      	b.n	800b91c <USBH_Process+0x3cc>
      break;
 800b912:	bf00      	nop
 800b914:	e002      	b.n	800b91c <USBH_Process+0x3cc>
      break;
 800b916:	bf00      	nop
 800b918:	e000      	b.n	800b91c <USBH_Process+0x3cc>
      break;
 800b91a:	bf00      	nop
  }
  return USBH_OK;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop

0800b928 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b088      	sub	sp, #32
 800b92c:	af04      	add	r7, sp, #16
 800b92e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b930:	2301      	movs	r3, #1
 800b932:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b934:	2301      	movs	r3, #1
 800b936:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	785b      	ldrb	r3, [r3, #1]
 800b93c:	2b07      	cmp	r3, #7
 800b93e:	f200 81c1 	bhi.w	800bcc4 <USBH_HandleEnum+0x39c>
 800b942:	a201      	add	r2, pc, #4	; (adr r2, 800b948 <USBH_HandleEnum+0x20>)
 800b944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b948:	0800b969 	.word	0x0800b969
 800b94c:	0800ba27 	.word	0x0800ba27
 800b950:	0800ba91 	.word	0x0800ba91
 800b954:	0800bb1f 	.word	0x0800bb1f
 800b958:	0800bb89 	.word	0x0800bb89
 800b95c:	0800bbf9 	.word	0x0800bbf9
 800b960:	0800bc3f 	.word	0x0800bc3f
 800b964:	0800bc85 	.word	0x0800bc85
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b968:	2108      	movs	r1, #8
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 fa50 	bl	800be10 <USBH_Get_DevDesc>
 800b970:	4603      	mov	r3, r0
 800b972:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b974:	7bbb      	ldrb	r3, [r7, #14]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d130      	bne.n	800b9dc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2201      	movs	r2, #1
 800b988:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	7919      	ldrb	r1, [r3, #4]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b99a:	687a      	ldr	r2, [r7, #4]
 800b99c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b99e:	b292      	uxth	r2, r2
 800b9a0:	9202      	str	r2, [sp, #8]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	9201      	str	r2, [sp, #4]
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2280      	movs	r2, #128	; 0x80
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f001 f865 	bl	800ca7c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	7959      	ldrb	r1, [r3, #5]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b9c6:	b292      	uxth	r2, r2
 800b9c8:	9202      	str	r2, [sp, #8]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	9201      	str	r2, [sp, #4]
 800b9ce:	9300      	str	r3, [sp, #0]
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f001 f851 	bl	800ca7c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b9da:	e175      	b.n	800bcc8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b9dc:	7bbb      	ldrb	r3, [r7, #14]
 800b9de:	2b03      	cmp	r3, #3
 800b9e0:	f040 8172 	bne.w	800bcc8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	b2da      	uxtb	r2, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b9fa:	2b03      	cmp	r3, #3
 800b9fc:	d903      	bls.n	800ba06 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	220d      	movs	r2, #13
 800ba02:	701a      	strb	r2, [r3, #0]
      break;
 800ba04:	e160      	b.n	800bcc8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	795b      	ldrb	r3, [r3, #5]
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f001 f885 	bl	800cb1c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	791b      	ldrb	r3, [r3, #4]
 800ba16:	4619      	mov	r1, r3
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f001 f87f 	bl	800cb1c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2200      	movs	r2, #0
 800ba22:	701a      	strb	r2, [r3, #0]
      break;
 800ba24:	e150      	b.n	800bcc8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ba26:	2112      	movs	r1, #18
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 f9f1 	bl	800be10 <USBH_Get_DevDesc>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ba32:	7bbb      	ldrb	r3, [r7, #14]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d103      	bne.n	800ba40 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2202      	movs	r2, #2
 800ba3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ba3e:	e145      	b.n	800bccc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba40:	7bbb      	ldrb	r3, [r7, #14]
 800ba42:	2b03      	cmp	r3, #3
 800ba44:	f040 8142 	bne.w	800bccc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ba4e:	3301      	adds	r3, #1
 800ba50:	b2da      	uxtb	r2, r3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ba5e:	2b03      	cmp	r3, #3
 800ba60:	d903      	bls.n	800ba6a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	220d      	movs	r2, #13
 800ba66:	701a      	strb	r2, [r3, #0]
      break;
 800ba68:	e130      	b.n	800bccc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	795b      	ldrb	r3, [r3, #5]
 800ba6e:	4619      	mov	r1, r3
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f001 f853 	bl	800cb1c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	791b      	ldrb	r3, [r3, #4]
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f001 f84d 	bl	800cb1c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	701a      	strb	r2, [r3, #0]
      break;
 800ba8e:	e11d      	b.n	800bccc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ba90:	2101      	movs	r1, #1
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f000 fa68 	bl	800bf68 <USBH_SetAddress>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ba9c:	7bbb      	ldrb	r3, [r7, #14]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d132      	bne.n	800bb08 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800baa2:	2002      	movs	r0, #2
 800baa4:	f003 fee5 	bl	800f872 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2203      	movs	r2, #3
 800bab4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	7919      	ldrb	r1, [r3, #4]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800baca:	b292      	uxth	r2, r2
 800bacc:	9202      	str	r2, [sp, #8]
 800bace:	2200      	movs	r2, #0
 800bad0:	9201      	str	r2, [sp, #4]
 800bad2:	9300      	str	r3, [sp, #0]
 800bad4:	4603      	mov	r3, r0
 800bad6:	2280      	movs	r2, #128	; 0x80
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 ffcf 	bl	800ca7c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	7959      	ldrb	r1, [r3, #5]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800baf2:	b292      	uxth	r2, r2
 800baf4:	9202      	str	r2, [sp, #8]
 800baf6:	2200      	movs	r2, #0
 800baf8:	9201      	str	r2, [sp, #4]
 800bafa:	9300      	str	r3, [sp, #0]
 800bafc:	4603      	mov	r3, r0
 800bafe:	2200      	movs	r2, #0
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 ffbb 	bl	800ca7c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bb06:	e0e3      	b.n	800bcd0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bb08:	7bbb      	ldrb	r3, [r7, #14]
 800bb0a:	2b03      	cmp	r3, #3
 800bb0c:	f040 80e0 	bne.w	800bcd0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	220d      	movs	r2, #13
 800bb14:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	705a      	strb	r2, [r3, #1]
      break;
 800bb1c:	e0d8      	b.n	800bcd0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800bb1e:	2109      	movs	r1, #9
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 f99d 	bl	800be60 <USBH_Get_CfgDesc>
 800bb26:	4603      	mov	r3, r0
 800bb28:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bb2a:	7bbb      	ldrb	r3, [r7, #14]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d103      	bne.n	800bb38 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2204      	movs	r2, #4
 800bb34:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bb36:	e0cd      	b.n	800bcd4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bb38:	7bbb      	ldrb	r3, [r7, #14]
 800bb3a:	2b03      	cmp	r3, #3
 800bb3c:	f040 80ca 	bne.w	800bcd4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bb46:	3301      	adds	r3, #1
 800bb48:	b2da      	uxtb	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bb56:	2b03      	cmp	r3, #3
 800bb58:	d903      	bls.n	800bb62 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	220d      	movs	r2, #13
 800bb5e:	701a      	strb	r2, [r3, #0]
      break;
 800bb60:	e0b8      	b.n	800bcd4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	795b      	ldrb	r3, [r3, #5]
 800bb66:	4619      	mov	r1, r3
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 ffd7 	bl	800cb1c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	791b      	ldrb	r3, [r3, #4]
 800bb72:	4619      	mov	r1, r3
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f000 ffd1 	bl	800cb1c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2200      	movs	r2, #0
 800bb84:	701a      	strb	r2, [r3, #0]
      break;
 800bb86:	e0a5      	b.n	800bcd4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800bb8e:	4619      	mov	r1, r3
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f965 	bl	800be60 <USBH_Get_CfgDesc>
 800bb96:	4603      	mov	r3, r0
 800bb98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bb9a:	7bbb      	ldrb	r3, [r7, #14]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d103      	bne.n	800bba8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2205      	movs	r2, #5
 800bba4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bba6:	e097      	b.n	800bcd8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bba8:	7bbb      	ldrb	r3, [r7, #14]
 800bbaa:	2b03      	cmp	r3, #3
 800bbac:	f040 8094 	bne.w	800bcd8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	b2da      	uxtb	r2, r3
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bbc6:	2b03      	cmp	r3, #3
 800bbc8:	d903      	bls.n	800bbd2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	220d      	movs	r2, #13
 800bbce:	701a      	strb	r2, [r3, #0]
      break;
 800bbd0:	e082      	b.n	800bcd8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	795b      	ldrb	r3, [r3, #5]
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f000 ff9f 	bl	800cb1c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	791b      	ldrb	r3, [r3, #4]
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 ff99 	bl	800cb1c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	701a      	strb	r2, [r3, #0]
      break;
 800bbf6:	e06f      	b.n	800bcd8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d019      	beq.n	800bc36 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bc0e:	23ff      	movs	r3, #255	; 0xff
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f000 f949 	bl	800bea8 <USBH_Get_StringDesc>
 800bc16:	4603      	mov	r3, r0
 800bc18:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bc1a:	7bbb      	ldrb	r3, [r7, #14]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d103      	bne.n	800bc28 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2206      	movs	r2, #6
 800bc24:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bc26:	e059      	b.n	800bcdc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bc28:	7bbb      	ldrb	r3, [r7, #14]
 800bc2a:	2b03      	cmp	r3, #3
 800bc2c:	d156      	bne.n	800bcdc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2206      	movs	r2, #6
 800bc32:	705a      	strb	r2, [r3, #1]
      break;
 800bc34:	e052      	b.n	800bcdc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2206      	movs	r2, #6
 800bc3a:	705a      	strb	r2, [r3, #1]
      break;
 800bc3c:	e04e      	b.n	800bcdc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d019      	beq.n	800bc7c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bc54:	23ff      	movs	r3, #255	; 0xff
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 f926 	bl	800bea8 <USBH_Get_StringDesc>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bc60:	7bbb      	ldrb	r3, [r7, #14]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d103      	bne.n	800bc6e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2207      	movs	r2, #7
 800bc6a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bc6c:	e038      	b.n	800bce0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bc6e:	7bbb      	ldrb	r3, [r7, #14]
 800bc70:	2b03      	cmp	r3, #3
 800bc72:	d135      	bne.n	800bce0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2207      	movs	r2, #7
 800bc78:	705a      	strb	r2, [r3, #1]
      break;
 800bc7a:	e031      	b.n	800bce0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2207      	movs	r2, #7
 800bc80:	705a      	strb	r2, [r3, #1]
      break;
 800bc82:	e02d      	b.n	800bce0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d017      	beq.n	800bcbe <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bc9a:	23ff      	movs	r3, #255	; 0xff
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 f903 	bl	800bea8 <USBH_Get_StringDesc>
 800bca2:	4603      	mov	r3, r0
 800bca4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bca6:	7bbb      	ldrb	r3, [r7, #14]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d102      	bne.n	800bcb2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800bcac:	2300      	movs	r3, #0
 800bcae:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800bcb0:	e018      	b.n	800bce4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bcb2:	7bbb      	ldrb	r3, [r7, #14]
 800bcb4:	2b03      	cmp	r3, #3
 800bcb6:	d115      	bne.n	800bce4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	73fb      	strb	r3, [r7, #15]
      break;
 800bcbc:	e012      	b.n	800bce4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	73fb      	strb	r3, [r7, #15]
      break;
 800bcc2:	e00f      	b.n	800bce4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800bcc4:	bf00      	nop
 800bcc6:	e00e      	b.n	800bce6 <USBH_HandleEnum+0x3be>
      break;
 800bcc8:	bf00      	nop
 800bcca:	e00c      	b.n	800bce6 <USBH_HandleEnum+0x3be>
      break;
 800bccc:	bf00      	nop
 800bcce:	e00a      	b.n	800bce6 <USBH_HandleEnum+0x3be>
      break;
 800bcd0:	bf00      	nop
 800bcd2:	e008      	b.n	800bce6 <USBH_HandleEnum+0x3be>
      break;
 800bcd4:	bf00      	nop
 800bcd6:	e006      	b.n	800bce6 <USBH_HandleEnum+0x3be>
      break;
 800bcd8:	bf00      	nop
 800bcda:	e004      	b.n	800bce6 <USBH_HandleEnum+0x3be>
      break;
 800bcdc:	bf00      	nop
 800bcde:	e002      	b.n	800bce6 <USBH_HandleEnum+0x3be>
      break;
 800bce0:	bf00      	nop
 800bce2:	e000      	b.n	800bce6 <USBH_HandleEnum+0x3be>
      break;
 800bce4:	bf00      	nop
  }
  return Status;
 800bce6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3710      	adds	r7, #16
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	683a      	ldr	r2, [r7, #0]
 800bcfe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800bd02:	bf00      	nop
 800bd04:	370c      	adds	r7, #12
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr

0800bd0e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b082      	sub	sp, #8
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bd1c:	1c5a      	adds	r2, r3, #1
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 f804 	bl	800bd32 <USBH_HandleSof>
}
 800bd2a:	bf00      	nop
 800bd2c:	3708      	adds	r7, #8
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b082      	sub	sp, #8
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	2b0b      	cmp	r3, #11
 800bd42:	d10a      	bne.n	800bd5a <USBH_HandleSof+0x28>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d005      	beq.n	800bd5a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd54:	699b      	ldr	r3, [r3, #24]
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	4798      	blx	r3
  }
}
 800bd5a:	bf00      	nop
 800bd5c:	3708      	adds	r7, #8
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}

0800bd62 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800bd62:	b480      	push	{r7}
 800bd64:	b083      	sub	sp, #12
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800bd72:	bf00      	nop
}
 800bd74:	370c      	adds	r7, #12
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr

0800bd7e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800bd7e:	b480      	push	{r7}
 800bd80:	b083      	sub	sp, #12
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800bd8e:	bf00      	nop
}
 800bd90:	370c      	adds	r7, #12
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr

0800bd9a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800bd9a:	b480      	push	{r7}
 800bd9c:	b083      	sub	sp, #12
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2201      	movs	r2, #1
 800bda6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2200      	movs	r2, #0
 800bdae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bdba:	2300      	movs	r3, #0
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	370c      	adds	r7, #12
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f003 fbd2 	bl	800f592 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	791b      	ldrb	r3, [r3, #4]
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 fe91 	bl	800cb1c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	795b      	ldrb	r3, [r3, #5]
 800bdfe:	4619      	mov	r1, r3
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f000 fe8b 	bl	800cb1c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800be06:	2300      	movs	r3, #0
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3708      	adds	r7, #8
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b086      	sub	sp, #24
 800be14:	af02      	add	r7, sp, #8
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	460b      	mov	r3, r1
 800be1a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800be22:	78fb      	ldrb	r3, [r7, #3]
 800be24:	b29b      	uxth	r3, r3
 800be26:	9300      	str	r3, [sp, #0]
 800be28:	4613      	mov	r3, r2
 800be2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800be2e:	2100      	movs	r1, #0
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 f864 	bl	800befe <USBH_GetDescriptor>
 800be36:	4603      	mov	r3, r0
 800be38:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800be3a:	7bfb      	ldrb	r3, [r7, #15]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d10a      	bne.n	800be56 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f203 3026 	addw	r0, r3, #806	; 0x326
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800be4c:	78fa      	ldrb	r2, [r7, #3]
 800be4e:	b292      	uxth	r2, r2
 800be50:	4619      	mov	r1, r3
 800be52:	f000 f918 	bl	800c086 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800be56:	7bfb      	ldrb	r3, [r7, #15]
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3710      	adds	r7, #16
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af02      	add	r7, sp, #8
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	460b      	mov	r3, r1
 800be6a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	331c      	adds	r3, #28
 800be70:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800be72:	887b      	ldrh	r3, [r7, #2]
 800be74:	9300      	str	r3, [sp, #0]
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be7c:	2100      	movs	r1, #0
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 f83d 	bl	800befe <USBH_GetDescriptor>
 800be84:	4603      	mov	r3, r0
 800be86:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800be88:	7bfb      	ldrb	r3, [r7, #15]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d107      	bne.n	800be9e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800be8e:	887b      	ldrh	r3, [r7, #2]
 800be90:	461a      	mov	r2, r3
 800be92:	68b9      	ldr	r1, [r7, #8]
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f000 f987 	bl	800c1a8 <USBH_ParseCfgDesc>
 800be9a:	4603      	mov	r3, r0
 800be9c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800be9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3710      	adds	r7, #16
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b088      	sub	sp, #32
 800beac:	af02      	add	r7, sp, #8
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	607a      	str	r2, [r7, #4]
 800beb2:	461a      	mov	r2, r3
 800beb4:	460b      	mov	r3, r1
 800beb6:	72fb      	strb	r3, [r7, #11]
 800beb8:	4613      	mov	r3, r2
 800beba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800bebc:	7afb      	ldrb	r3, [r7, #11]
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800bec4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800becc:	893b      	ldrh	r3, [r7, #8]
 800bece:	9300      	str	r3, [sp, #0]
 800bed0:	460b      	mov	r3, r1
 800bed2:	2100      	movs	r1, #0
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f000 f812 	bl	800befe <USBH_GetDescriptor>
 800beda:	4603      	mov	r3, r0
 800bedc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800bede:	7dfb      	ldrb	r3, [r7, #23]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d107      	bne.n	800bef4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800beea:	893a      	ldrh	r2, [r7, #8]
 800beec:	6879      	ldr	r1, [r7, #4]
 800beee:	4618      	mov	r0, r3
 800bef0:	f000 fb24 	bl	800c53c <USBH_ParseStringDesc>
  }

  return status;
 800bef4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3718      	adds	r7, #24
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b084      	sub	sp, #16
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	60f8      	str	r0, [r7, #12]
 800bf06:	607b      	str	r3, [r7, #4]
 800bf08:	460b      	mov	r3, r1
 800bf0a:	72fb      	strb	r3, [r7, #11]
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	789b      	ldrb	r3, [r3, #2]
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d11c      	bne.n	800bf52 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bf18:	7afb      	ldrb	r3, [r7, #11]
 800bf1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bf1e:	b2da      	uxtb	r2, r3
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2206      	movs	r2, #6
 800bf28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	893a      	ldrh	r2, [r7, #8]
 800bf2e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bf30:	893b      	ldrh	r3, [r7, #8]
 800bf32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bf36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf3a:	d104      	bne.n	800bf46 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f240 4209 	movw	r2, #1033	; 0x409
 800bf42:	829a      	strh	r2, [r3, #20]
 800bf44:	e002      	b.n	800bf4c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	8b3a      	ldrh	r2, [r7, #24]
 800bf50:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bf52:	8b3b      	ldrh	r3, [r7, #24]
 800bf54:	461a      	mov	r2, r3
 800bf56:	6879      	ldr	r1, [r7, #4]
 800bf58:	68f8      	ldr	r0, [r7, #12]
 800bf5a:	f000 fb3d 	bl	800c5d8 <USBH_CtlReq>
 800bf5e:	4603      	mov	r3, r0
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3710      	adds	r7, #16
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b082      	sub	sp, #8
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	460b      	mov	r3, r1
 800bf72:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	789b      	ldrb	r3, [r3, #2]
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d10f      	bne.n	800bf9c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2205      	movs	r2, #5
 800bf86:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bf88:	78fb      	ldrb	r3, [r7, #3]
 800bf8a:	b29a      	uxth	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	2100      	movs	r1, #0
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 fb19 	bl	800c5d8 <USBH_CtlReq>
 800bfa6:	4603      	mov	r3, r0
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3708      	adds	r7, #8
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b082      	sub	sp, #8
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	460b      	mov	r3, r1
 800bfba:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	789b      	ldrb	r3, [r3, #2]
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d10e      	bne.n	800bfe2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2209      	movs	r2, #9
 800bfce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	887a      	ldrh	r2, [r7, #2]
 800bfd4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 faf6 	bl	800c5d8 <USBH_CtlReq>
 800bfec:	4603      	mov	r3, r0
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3708      	adds	r7, #8
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}

0800bff6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bff6:	b580      	push	{r7, lr}
 800bff8:	b082      	sub	sp, #8
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]
 800bffe:	460b      	mov	r3, r1
 800c000:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	789b      	ldrb	r3, [r3, #2]
 800c006:	2b01      	cmp	r3, #1
 800c008:	d10f      	bne.n	800c02a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2203      	movs	r2, #3
 800c014:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c016:	78fb      	ldrb	r3, [r7, #3]
 800c018:	b29a      	uxth	r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c02a:	2200      	movs	r2, #0
 800c02c:	2100      	movs	r1, #0
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 fad2 	bl	800c5d8 <USBH_CtlReq>
 800c034:	4603      	mov	r3, r0
}
 800c036:	4618      	mov	r0, r3
 800c038:	3708      	adds	r7, #8
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}

0800c03e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c03e:	b580      	push	{r7, lr}
 800c040:	b082      	sub	sp, #8
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
 800c046:	460b      	mov	r3, r1
 800c048:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	789b      	ldrb	r3, [r3, #2]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d10f      	bne.n	800c072 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2202      	movs	r2, #2
 800c056:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2201      	movs	r2, #1
 800c05c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2200      	movs	r2, #0
 800c062:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c064:	78fb      	ldrb	r3, [r7, #3]
 800c066:	b29a      	uxth	r2, r3
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800c072:	2200      	movs	r2, #0
 800c074:	2100      	movs	r1, #0
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 faae 	bl	800c5d8 <USBH_CtlReq>
 800c07c:	4603      	mov	r3, r0
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3708      	adds	r7, #8
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}

0800c086 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c086:	b480      	push	{r7}
 800c088:	b085      	sub	sp, #20
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	60f8      	str	r0, [r7, #12]
 800c08e:	60b9      	str	r1, [r7, #8]
 800c090:	4613      	mov	r3, r2
 800c092:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	781a      	ldrb	r2, [r3, #0]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	785a      	ldrb	r2, [r3, #1]
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	3302      	adds	r3, #2
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	b29a      	uxth	r2, r3
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	3303      	adds	r3, #3
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	021b      	lsls	r3, r3, #8
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	b29a      	uxth	r2, r3
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	791a      	ldrb	r2, [r3, #4]
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	795a      	ldrb	r2, [r3, #5]
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	799a      	ldrb	r2, [r3, #6]
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	79da      	ldrb	r2, [r3, #7]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	79db      	ldrb	r3, [r3, #7]
 800c0e4:	2b20      	cmp	r3, #32
 800c0e6:	dc11      	bgt.n	800c10c <USBH_ParseDevDesc+0x86>
 800c0e8:	2b08      	cmp	r3, #8
 800c0ea:	db16      	blt.n	800c11a <USBH_ParseDevDesc+0x94>
 800c0ec:	3b08      	subs	r3, #8
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c0f4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c0f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	bf14      	ite	ne
 800c100:	2301      	movne	r3, #1
 800c102:	2300      	moveq	r3, #0
 800c104:	b2db      	uxtb	r3, r3
 800c106:	2b00      	cmp	r3, #0
 800c108:	d102      	bne.n	800c110 <USBH_ParseDevDesc+0x8a>
 800c10a:	e006      	b.n	800c11a <USBH_ParseDevDesc+0x94>
 800c10c:	2b40      	cmp	r3, #64	; 0x40
 800c10e:	d104      	bne.n	800c11a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	79da      	ldrb	r2, [r3, #7]
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	71da      	strb	r2, [r3, #7]
      break;
 800c118:	e003      	b.n	800c122 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2240      	movs	r2, #64	; 0x40
 800c11e:	71da      	strb	r2, [r3, #7]
      break;
 800c120:	bf00      	nop
  }

  if (length > 8U)
 800c122:	88fb      	ldrh	r3, [r7, #6]
 800c124:	2b08      	cmp	r3, #8
 800c126:	d939      	bls.n	800c19c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	3308      	adds	r3, #8
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	b29a      	uxth	r2, r3
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	3309      	adds	r3, #9
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	b29b      	uxth	r3, r3
 800c138:	021b      	lsls	r3, r3, #8
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	4313      	orrs	r3, r2
 800c13e:	b29a      	uxth	r2, r3
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	330a      	adds	r3, #10
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	b29a      	uxth	r2, r3
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	330b      	adds	r3, #11
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	b29b      	uxth	r3, r3
 800c154:	021b      	lsls	r3, r3, #8
 800c156:	b29b      	uxth	r3, r3
 800c158:	4313      	orrs	r3, r2
 800c15a:	b29a      	uxth	r2, r3
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	330c      	adds	r3, #12
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	b29a      	uxth	r2, r3
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	330d      	adds	r3, #13
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	b29b      	uxth	r3, r3
 800c170:	021b      	lsls	r3, r3, #8
 800c172:	b29b      	uxth	r3, r3
 800c174:	4313      	orrs	r3, r2
 800c176:	b29a      	uxth	r2, r3
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	7b9a      	ldrb	r2, [r3, #14]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	7bda      	ldrb	r2, [r3, #15]
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	7c1a      	ldrb	r2, [r3, #16]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	7c5a      	ldrb	r2, [r3, #17]
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	745a      	strb	r2, [r3, #17]
  }
}
 800c19c:	bf00      	nop
 800c19e:	3714      	adds	r7, #20
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b08c      	sub	sp, #48	; 0x30
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	4613      	mov	r3, r2
 800c1b4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c1bc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	781a      	ldrb	r2, [r3, #0]
 800c1dc:	6a3b      	ldr	r3, [r7, #32]
 800c1de:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	785a      	ldrb	r2, [r3, #1]
 800c1e4:	6a3b      	ldr	r3, [r7, #32]
 800c1e6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	3302      	adds	r3, #2
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	b29a      	uxth	r2, r3
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	3303      	adds	r3, #3
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	021b      	lsls	r3, r3, #8
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c204:	bf28      	it	cs
 800c206:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c20a:	b29a      	uxth	r2, r3
 800c20c:	6a3b      	ldr	r3, [r7, #32]
 800c20e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	791a      	ldrb	r2, [r3, #4]
 800c214:	6a3b      	ldr	r3, [r7, #32]
 800c216:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	795a      	ldrb	r2, [r3, #5]
 800c21c:	6a3b      	ldr	r3, [r7, #32]
 800c21e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	799a      	ldrb	r2, [r3, #6]
 800c224:	6a3b      	ldr	r3, [r7, #32]
 800c226:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	79da      	ldrb	r2, [r3, #7]
 800c22c:	6a3b      	ldr	r3, [r7, #32]
 800c22e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	7a1a      	ldrb	r2, [r3, #8]
 800c234:	6a3b      	ldr	r3, [r7, #32]
 800c236:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800c238:	6a3b      	ldr	r3, [r7, #32]
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	2b09      	cmp	r3, #9
 800c23e:	d002      	beq.n	800c246 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c240:	6a3b      	ldr	r3, [r7, #32]
 800c242:	2209      	movs	r2, #9
 800c244:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c246:	88fb      	ldrh	r3, [r7, #6]
 800c248:	2b09      	cmp	r3, #9
 800c24a:	f240 809d 	bls.w	800c388 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800c24e:	2309      	movs	r3, #9
 800c250:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c252:	2300      	movs	r3, #0
 800c254:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c256:	e081      	b.n	800c35c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c258:	f107 0316 	add.w	r3, r7, #22
 800c25c:	4619      	mov	r1, r3
 800c25e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c260:	f000 f99f 	bl	800c5a2 <USBH_GetNextDesc>
 800c264:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c268:	785b      	ldrb	r3, [r3, #1]
 800c26a:	2b04      	cmp	r3, #4
 800c26c:	d176      	bne.n	800c35c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	2b09      	cmp	r3, #9
 800c274:	d002      	beq.n	800c27c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c278:	2209      	movs	r2, #9
 800c27a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c27c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c280:	221a      	movs	r2, #26
 800c282:	fb02 f303 	mul.w	r3, r2, r3
 800c286:	3308      	adds	r3, #8
 800c288:	6a3a      	ldr	r2, [r7, #32]
 800c28a:	4413      	add	r3, r2
 800c28c:	3302      	adds	r3, #2
 800c28e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c292:	69f8      	ldr	r0, [r7, #28]
 800c294:	f000 f87e 	bl	800c394 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c298:	2300      	movs	r3, #0
 800c29a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c2a2:	e043      	b.n	800c32c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c2a4:	f107 0316 	add.w	r3, r7, #22
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2ac:	f000 f979 	bl	800c5a2 <USBH_GetNextDesc>
 800c2b0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b4:	785b      	ldrb	r3, [r3, #1]
 800c2b6:	2b05      	cmp	r3, #5
 800c2b8:	d138      	bne.n	800c32c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	795b      	ldrb	r3, [r3, #5]
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d10f      	bne.n	800c2e2 <USBH_ParseCfgDesc+0x13a>
 800c2c2:	69fb      	ldr	r3, [r7, #28]
 800c2c4:	799b      	ldrb	r3, [r3, #6]
 800c2c6:	2b02      	cmp	r3, #2
 800c2c8:	d10b      	bne.n	800c2e2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c2ca:	69fb      	ldr	r3, [r7, #28]
 800c2cc:	79db      	ldrb	r3, [r3, #7]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d10f      	bne.n	800c2f2 <USBH_ParseCfgDesc+0x14a>
 800c2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	2b09      	cmp	r3, #9
 800c2d8:	d00b      	beq.n	800c2f2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800c2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2dc:	2209      	movs	r2, #9
 800c2de:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c2e0:	e007      	b.n	800c2f2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800c2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	2b07      	cmp	r3, #7
 800c2e8:	d004      	beq.n	800c2f4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ec:	2207      	movs	r2, #7
 800c2ee:	701a      	strb	r2, [r3, #0]
 800c2f0:	e000      	b.n	800c2f4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c2f2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c2f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2f8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c2fc:	3201      	adds	r2, #1
 800c2fe:	00d2      	lsls	r2, r2, #3
 800c300:	211a      	movs	r1, #26
 800c302:	fb01 f303 	mul.w	r3, r1, r3
 800c306:	4413      	add	r3, r2
 800c308:	3308      	adds	r3, #8
 800c30a:	6a3a      	ldr	r2, [r7, #32]
 800c30c:	4413      	add	r3, r2
 800c30e:	3304      	adds	r3, #4
 800c310:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c314:	69b9      	ldr	r1, [r7, #24]
 800c316:	68f8      	ldr	r0, [r7, #12]
 800c318:	f000 f86b 	bl	800c3f2 <USBH_ParseEPDesc>
 800c31c:	4603      	mov	r3, r0
 800c31e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c322:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c326:	3301      	adds	r3, #1
 800c328:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c32c:	69fb      	ldr	r3, [r7, #28]
 800c32e:	791b      	ldrb	r3, [r3, #4]
 800c330:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c334:	429a      	cmp	r2, r3
 800c336:	d204      	bcs.n	800c342 <USBH_ParseCfgDesc+0x19a>
 800c338:	6a3b      	ldr	r3, [r7, #32]
 800c33a:	885a      	ldrh	r2, [r3, #2]
 800c33c:	8afb      	ldrh	r3, [r7, #22]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d8b0      	bhi.n	800c2a4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	791b      	ldrb	r3, [r3, #4]
 800c346:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d201      	bcs.n	800c352 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800c34e:	2303      	movs	r3, #3
 800c350:	e01c      	b.n	800c38c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800c352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c356:	3301      	adds	r3, #1
 800c358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c35c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c360:	2b01      	cmp	r3, #1
 800c362:	d805      	bhi.n	800c370 <USBH_ParseCfgDesc+0x1c8>
 800c364:	6a3b      	ldr	r3, [r7, #32]
 800c366:	885a      	ldrh	r2, [r3, #2]
 800c368:	8afb      	ldrh	r3, [r7, #22]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	f63f af74 	bhi.w	800c258 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c370:	6a3b      	ldr	r3, [r7, #32]
 800c372:	791b      	ldrb	r3, [r3, #4]
 800c374:	2b02      	cmp	r3, #2
 800c376:	bf28      	it	cs
 800c378:	2302      	movcs	r3, #2
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c380:	429a      	cmp	r2, r3
 800c382:	d201      	bcs.n	800c388 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800c384:	2303      	movs	r3, #3
 800c386:	e001      	b.n	800c38c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800c388:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3730      	adds	r7, #48	; 0x30
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	781a      	ldrb	r2, [r3, #0]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	785a      	ldrb	r2, [r3, #1]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	789a      	ldrb	r2, [r3, #2]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	78da      	ldrb	r2, [r3, #3]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	791a      	ldrb	r2, [r3, #4]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	795a      	ldrb	r2, [r3, #5]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	799a      	ldrb	r2, [r3, #6]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	79da      	ldrb	r2, [r3, #7]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	7a1a      	ldrb	r2, [r3, #8]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	721a      	strb	r2, [r3, #8]
}
 800c3e6:	bf00      	nop
 800c3e8:	370c      	adds	r7, #12
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr

0800c3f2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800c3f2:	b480      	push	{r7}
 800c3f4:	b087      	sub	sp, #28
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	60f8      	str	r0, [r7, #12]
 800c3fa:	60b9      	str	r1, [r7, #8]
 800c3fc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c3fe:	2300      	movs	r3, #0
 800c400:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	781a      	ldrb	r2, [r3, #0]
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	785a      	ldrb	r2, [r3, #1]
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	789a      	ldrb	r2, [r3, #2]
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	78da      	ldrb	r2, [r3, #3]
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	3304      	adds	r3, #4
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	b29a      	uxth	r2, r3
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	3305      	adds	r3, #5
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	b29b      	uxth	r3, r3
 800c432:	021b      	lsls	r3, r3, #8
 800c434:	b29b      	uxth	r3, r3
 800c436:	4313      	orrs	r3, r2
 800c438:	b29a      	uxth	r2, r3
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	799a      	ldrb	r2, [r3, #6]
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	889b      	ldrh	r3, [r3, #4]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d102      	bne.n	800c454 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800c44e:	2303      	movs	r3, #3
 800c450:	75fb      	strb	r3, [r7, #23]
 800c452:	e033      	b.n	800c4bc <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	889b      	ldrh	r3, [r3, #4]
 800c458:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c45c:	f023 0307 	bic.w	r3, r3, #7
 800c460:	b29a      	uxth	r2, r3
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	889b      	ldrh	r3, [r3, #4]
 800c46a:	b21a      	sxth	r2, r3
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	3304      	adds	r3, #4
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	b299      	uxth	r1, r3
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	3305      	adds	r3, #5
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	021b      	lsls	r3, r3, #8
 800c47e:	b29b      	uxth	r3, r3
 800c480:	430b      	orrs	r3, r1
 800c482:	b29b      	uxth	r3, r3
 800c484:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d110      	bne.n	800c4ae <USBH_ParseEPDesc+0xbc>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	3304      	adds	r3, #4
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	b299      	uxth	r1, r3
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	3305      	adds	r3, #5
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	021b      	lsls	r3, r3, #8
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	430b      	orrs	r3, r1
 800c4a2:	b29b      	uxth	r3, r3
 800c4a4:	b21b      	sxth	r3, r3
 800c4a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c4aa:	b21b      	sxth	r3, r3
 800c4ac:	e001      	b.n	800c4b2 <USBH_ParseEPDesc+0xc0>
 800c4ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	b21b      	sxth	r3, r3
 800c4b6:	b29a      	uxth	r2, r3
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d116      	bne.n	800c4f4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	78db      	ldrb	r3, [r3, #3]
 800c4ca:	f003 0303 	and.w	r3, r3, #3
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d005      	beq.n	800c4de <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	78db      	ldrb	r3, [r3, #3]
 800c4d6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c4da:	2b03      	cmp	r3, #3
 800c4dc:	d127      	bne.n	800c52e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	799b      	ldrb	r3, [r3, #6]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d003      	beq.n	800c4ee <USBH_ParseEPDesc+0xfc>
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	799b      	ldrb	r3, [r3, #6]
 800c4ea:	2b10      	cmp	r3, #16
 800c4ec:	d91f      	bls.n	800c52e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c4ee:	2303      	movs	r3, #3
 800c4f0:	75fb      	strb	r3, [r7, #23]
 800c4f2:	e01c      	b.n	800c52e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	78db      	ldrb	r3, [r3, #3]
 800c4f8:	f003 0303 	and.w	r3, r3, #3
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d10a      	bne.n	800c516 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	799b      	ldrb	r3, [r3, #6]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d003      	beq.n	800c510 <USBH_ParseEPDesc+0x11e>
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	799b      	ldrb	r3, [r3, #6]
 800c50c:	2b10      	cmp	r3, #16
 800c50e:	d90e      	bls.n	800c52e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c510:	2303      	movs	r3, #3
 800c512:	75fb      	strb	r3, [r7, #23]
 800c514:	e00b      	b.n	800c52e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	78db      	ldrb	r3, [r3, #3]
 800c51a:	f003 0303 	and.w	r3, r3, #3
 800c51e:	2b03      	cmp	r3, #3
 800c520:	d105      	bne.n	800c52e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	799b      	ldrb	r3, [r3, #6]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d101      	bne.n	800c52e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c52a:	2303      	movs	r3, #3
 800c52c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800c52e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c530:	4618      	mov	r0, r3
 800c532:	371c      	adds	r7, #28
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr

0800c53c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b087      	sub	sp, #28
 800c540:	af00      	add	r7, sp, #0
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	4613      	mov	r3, r2
 800c548:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	3301      	adds	r3, #1
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	2b03      	cmp	r3, #3
 800c552:	d120      	bne.n	800c596 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	1e9a      	subs	r2, r3, #2
 800c55a:	88fb      	ldrh	r3, [r7, #6]
 800c55c:	4293      	cmp	r3, r2
 800c55e:	bf28      	it	cs
 800c560:	4613      	movcs	r3, r2
 800c562:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	3302      	adds	r3, #2
 800c568:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c56a:	2300      	movs	r3, #0
 800c56c:	82fb      	strh	r3, [r7, #22]
 800c56e:	e00b      	b.n	800c588 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c570:	8afb      	ldrh	r3, [r7, #22]
 800c572:	68fa      	ldr	r2, [r7, #12]
 800c574:	4413      	add	r3, r2
 800c576:	781a      	ldrb	r2, [r3, #0]
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	3301      	adds	r3, #1
 800c580:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c582:	8afb      	ldrh	r3, [r7, #22]
 800c584:	3302      	adds	r3, #2
 800c586:	82fb      	strh	r3, [r7, #22]
 800c588:	8afa      	ldrh	r2, [r7, #22]
 800c58a:	8abb      	ldrh	r3, [r7, #20]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d3ef      	bcc.n	800c570 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	2200      	movs	r2, #0
 800c594:	701a      	strb	r2, [r3, #0]
  }
}
 800c596:	bf00      	nop
 800c598:	371c      	adds	r7, #28
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr

0800c5a2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c5a2:	b480      	push	{r7}
 800c5a4:	b085      	sub	sp, #20
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
 800c5aa:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	881a      	ldrh	r2, [r3, #0]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	b29b      	uxth	r3, r3
 800c5b6:	4413      	add	r3, r2
 800c5b8:	b29a      	uxth	r2, r3
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	4413      	add	r3, r2
 800c5c8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3714      	adds	r7, #20
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr

0800c5d8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b086      	sub	sp, #24
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	60f8      	str	r0, [r7, #12]
 800c5e0:	60b9      	str	r1, [r7, #8]
 800c5e2:	4613      	mov	r3, r2
 800c5e4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	789b      	ldrb	r3, [r3, #2]
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d002      	beq.n	800c5f8 <USBH_CtlReq+0x20>
 800c5f2:	2b02      	cmp	r3, #2
 800c5f4:	d00f      	beq.n	800c616 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c5f6:	e027      	b.n	800c648 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	68ba      	ldr	r2, [r7, #8]
 800c5fc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	88fa      	ldrh	r2, [r7, #6]
 800c602:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2201      	movs	r2, #1
 800c608:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	2202      	movs	r2, #2
 800c60e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c610:	2301      	movs	r3, #1
 800c612:	75fb      	strb	r3, [r7, #23]
      break;
 800c614:	e018      	b.n	800c648 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c616:	68f8      	ldr	r0, [r7, #12]
 800c618:	f000 f81c 	bl	800c654 <USBH_HandleControl>
 800c61c:	4603      	mov	r3, r0
 800c61e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c620:	7dfb      	ldrb	r3, [r7, #23]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d002      	beq.n	800c62c <USBH_CtlReq+0x54>
 800c626:	7dfb      	ldrb	r3, [r7, #23]
 800c628:	2b03      	cmp	r3, #3
 800c62a:	d106      	bne.n	800c63a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2201      	movs	r2, #1
 800c630:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2200      	movs	r2, #0
 800c636:	761a      	strb	r2, [r3, #24]
      break;
 800c638:	e005      	b.n	800c646 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c63a:	7dfb      	ldrb	r3, [r7, #23]
 800c63c:	2b02      	cmp	r3, #2
 800c63e:	d102      	bne.n	800c646 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2201      	movs	r2, #1
 800c644:	709a      	strb	r2, [r3, #2]
      break;
 800c646:	bf00      	nop
  }
  return status;
 800c648:	7dfb      	ldrb	r3, [r7, #23]
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3718      	adds	r7, #24
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
	...

0800c654 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b086      	sub	sp, #24
 800c658:	af02      	add	r7, sp, #8
 800c65a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c65c:	2301      	movs	r3, #1
 800c65e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c660:	2300      	movs	r3, #0
 800c662:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	7e1b      	ldrb	r3, [r3, #24]
 800c668:	3b01      	subs	r3, #1
 800c66a:	2b0a      	cmp	r3, #10
 800c66c:	f200 8156 	bhi.w	800c91c <USBH_HandleControl+0x2c8>
 800c670:	a201      	add	r2, pc, #4	; (adr r2, 800c678 <USBH_HandleControl+0x24>)
 800c672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c676:	bf00      	nop
 800c678:	0800c6a5 	.word	0x0800c6a5
 800c67c:	0800c6bf 	.word	0x0800c6bf
 800c680:	0800c729 	.word	0x0800c729
 800c684:	0800c74f 	.word	0x0800c74f
 800c688:	0800c787 	.word	0x0800c787
 800c68c:	0800c7b1 	.word	0x0800c7b1
 800c690:	0800c803 	.word	0x0800c803
 800c694:	0800c825 	.word	0x0800c825
 800c698:	0800c861 	.word	0x0800c861
 800c69c:	0800c887 	.word	0x0800c887
 800c6a0:	0800c8c5 	.word	0x0800c8c5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f103 0110 	add.w	r1, r3, #16
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	795b      	ldrb	r3, [r3, #5]
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 f943 	bl	800c93c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2202      	movs	r2, #2
 800c6ba:	761a      	strb	r2, [r3, #24]
      break;
 800c6bc:	e139      	b.n	800c932 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	795b      	ldrb	r3, [r3, #5]
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f003 f853 	bl	800f770 <USBH_LL_GetURBState>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c6ce:	7bbb      	ldrb	r3, [r7, #14]
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	d11e      	bne.n	800c712 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	7c1b      	ldrb	r3, [r3, #16]
 800c6d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c6dc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	8adb      	ldrh	r3, [r3, #22]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d00a      	beq.n	800c6fc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c6e6:	7b7b      	ldrb	r3, [r7, #13]
 800c6e8:	2b80      	cmp	r3, #128	; 0x80
 800c6ea:	d103      	bne.n	800c6f4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2203      	movs	r2, #3
 800c6f0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c6f2:	e115      	b.n	800c920 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2205      	movs	r2, #5
 800c6f8:	761a      	strb	r2, [r3, #24]
      break;
 800c6fa:	e111      	b.n	800c920 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c6fc:	7b7b      	ldrb	r3, [r7, #13]
 800c6fe:	2b80      	cmp	r3, #128	; 0x80
 800c700:	d103      	bne.n	800c70a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2209      	movs	r2, #9
 800c706:	761a      	strb	r2, [r3, #24]
      break;
 800c708:	e10a      	b.n	800c920 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2207      	movs	r2, #7
 800c70e:	761a      	strb	r2, [r3, #24]
      break;
 800c710:	e106      	b.n	800c920 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c712:	7bbb      	ldrb	r3, [r7, #14]
 800c714:	2b04      	cmp	r3, #4
 800c716:	d003      	beq.n	800c720 <USBH_HandleControl+0xcc>
 800c718:	7bbb      	ldrb	r3, [r7, #14]
 800c71a:	2b02      	cmp	r3, #2
 800c71c:	f040 8100 	bne.w	800c920 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	220b      	movs	r2, #11
 800c724:	761a      	strb	r2, [r3, #24]
      break;
 800c726:	e0fb      	b.n	800c920 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c72e:	b29a      	uxth	r2, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6899      	ldr	r1, [r3, #8]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	899a      	ldrh	r2, [r3, #12]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	791b      	ldrb	r3, [r3, #4]
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 f93a 	bl	800c9ba <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2204      	movs	r2, #4
 800c74a:	761a      	strb	r2, [r3, #24]
      break;
 800c74c:	e0f1      	b.n	800c932 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	791b      	ldrb	r3, [r3, #4]
 800c752:	4619      	mov	r1, r3
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f003 f80b 	bl	800f770 <USBH_LL_GetURBState>
 800c75a:	4603      	mov	r3, r0
 800c75c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c75e:	7bbb      	ldrb	r3, [r7, #14]
 800c760:	2b01      	cmp	r3, #1
 800c762:	d102      	bne.n	800c76a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2209      	movs	r2, #9
 800c768:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c76a:	7bbb      	ldrb	r3, [r7, #14]
 800c76c:	2b05      	cmp	r3, #5
 800c76e:	d102      	bne.n	800c776 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c770:	2303      	movs	r3, #3
 800c772:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c774:	e0d6      	b.n	800c924 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c776:	7bbb      	ldrb	r3, [r7, #14]
 800c778:	2b04      	cmp	r3, #4
 800c77a:	f040 80d3 	bne.w	800c924 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	220b      	movs	r2, #11
 800c782:	761a      	strb	r2, [r3, #24]
      break;
 800c784:	e0ce      	b.n	800c924 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6899      	ldr	r1, [r3, #8]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	899a      	ldrh	r2, [r3, #12]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	795b      	ldrb	r3, [r3, #5]
 800c792:	2001      	movs	r0, #1
 800c794:	9000      	str	r0, [sp, #0]
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 f8ea 	bl	800c970 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c7a2:	b29a      	uxth	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2206      	movs	r2, #6
 800c7ac:	761a      	strb	r2, [r3, #24]
      break;
 800c7ae:	e0c0      	b.n	800c932 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	795b      	ldrb	r3, [r3, #5]
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f002 ffda 	bl	800f770 <USBH_LL_GetURBState>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c7c0:	7bbb      	ldrb	r3, [r7, #14]
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d103      	bne.n	800c7ce <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2207      	movs	r2, #7
 800c7ca:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c7cc:	e0ac      	b.n	800c928 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c7ce:	7bbb      	ldrb	r3, [r7, #14]
 800c7d0:	2b05      	cmp	r3, #5
 800c7d2:	d105      	bne.n	800c7e0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	220c      	movs	r2, #12
 800c7d8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c7da:	2303      	movs	r3, #3
 800c7dc:	73fb      	strb	r3, [r7, #15]
      break;
 800c7de:	e0a3      	b.n	800c928 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c7e0:	7bbb      	ldrb	r3, [r7, #14]
 800c7e2:	2b02      	cmp	r3, #2
 800c7e4:	d103      	bne.n	800c7ee <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2205      	movs	r2, #5
 800c7ea:	761a      	strb	r2, [r3, #24]
      break;
 800c7ec:	e09c      	b.n	800c928 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c7ee:	7bbb      	ldrb	r3, [r7, #14]
 800c7f0:	2b04      	cmp	r3, #4
 800c7f2:	f040 8099 	bne.w	800c928 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	220b      	movs	r2, #11
 800c7fa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c7fc:	2302      	movs	r3, #2
 800c7fe:	73fb      	strb	r3, [r7, #15]
      break;
 800c800:	e092      	b.n	800c928 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	791b      	ldrb	r3, [r3, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	2100      	movs	r1, #0
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 f8d5 	bl	800c9ba <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c816:	b29a      	uxth	r2, r3
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2208      	movs	r2, #8
 800c820:	761a      	strb	r2, [r3, #24]

      break;
 800c822:	e086      	b.n	800c932 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	791b      	ldrb	r3, [r3, #4]
 800c828:	4619      	mov	r1, r3
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f002 ffa0 	bl	800f770 <USBH_LL_GetURBState>
 800c830:	4603      	mov	r3, r0
 800c832:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c834:	7bbb      	ldrb	r3, [r7, #14]
 800c836:	2b01      	cmp	r3, #1
 800c838:	d105      	bne.n	800c846 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	220d      	movs	r2, #13
 800c83e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c840:	2300      	movs	r3, #0
 800c842:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c844:	e072      	b.n	800c92c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c846:	7bbb      	ldrb	r3, [r7, #14]
 800c848:	2b04      	cmp	r3, #4
 800c84a:	d103      	bne.n	800c854 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	220b      	movs	r2, #11
 800c850:	761a      	strb	r2, [r3, #24]
      break;
 800c852:	e06b      	b.n	800c92c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c854:	7bbb      	ldrb	r3, [r7, #14]
 800c856:	2b05      	cmp	r3, #5
 800c858:	d168      	bne.n	800c92c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c85a:	2303      	movs	r3, #3
 800c85c:	73fb      	strb	r3, [r7, #15]
      break;
 800c85e:	e065      	b.n	800c92c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	795b      	ldrb	r3, [r3, #5]
 800c864:	2201      	movs	r2, #1
 800c866:	9200      	str	r2, [sp, #0]
 800c868:	2200      	movs	r2, #0
 800c86a:	2100      	movs	r1, #0
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f000 f87f 	bl	800c970 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c878:	b29a      	uxth	r2, r3
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	220a      	movs	r2, #10
 800c882:	761a      	strb	r2, [r3, #24]
      break;
 800c884:	e055      	b.n	800c932 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	795b      	ldrb	r3, [r3, #5]
 800c88a:	4619      	mov	r1, r3
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f002 ff6f 	bl	800f770 <USBH_LL_GetURBState>
 800c892:	4603      	mov	r3, r0
 800c894:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c896:	7bbb      	ldrb	r3, [r7, #14]
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d105      	bne.n	800c8a8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c89c:	2300      	movs	r3, #0
 800c89e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	220d      	movs	r2, #13
 800c8a4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c8a6:	e043      	b.n	800c930 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c8a8:	7bbb      	ldrb	r3, [r7, #14]
 800c8aa:	2b02      	cmp	r3, #2
 800c8ac:	d103      	bne.n	800c8b6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2209      	movs	r2, #9
 800c8b2:	761a      	strb	r2, [r3, #24]
      break;
 800c8b4:	e03c      	b.n	800c930 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c8b6:	7bbb      	ldrb	r3, [r7, #14]
 800c8b8:	2b04      	cmp	r3, #4
 800c8ba:	d139      	bne.n	800c930 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	220b      	movs	r2, #11
 800c8c0:	761a      	strb	r2, [r3, #24]
      break;
 800c8c2:	e035      	b.n	800c930 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	7e5b      	ldrb	r3, [r3, #25]
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	b2da      	uxtb	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	765a      	strb	r2, [r3, #25]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	7e5b      	ldrb	r3, [r3, #25]
 800c8d4:	2b02      	cmp	r3, #2
 800c8d6:	d806      	bhi.n	800c8e6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2201      	movs	r2, #1
 800c8dc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c8e4:	e025      	b.n	800c932 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c8ec:	2106      	movs	r1, #6
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	795b      	ldrb	r3, [r3, #5]
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 f90c 	bl	800cb1c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	791b      	ldrb	r3, [r3, #4]
 800c908:	4619      	mov	r1, r3
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 f906 	bl	800cb1c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2200      	movs	r2, #0
 800c914:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c916:	2302      	movs	r3, #2
 800c918:	73fb      	strb	r3, [r7, #15]
      break;
 800c91a:	e00a      	b.n	800c932 <USBH_HandleControl+0x2de>

    default:
      break;
 800c91c:	bf00      	nop
 800c91e:	e008      	b.n	800c932 <USBH_HandleControl+0x2de>
      break;
 800c920:	bf00      	nop
 800c922:	e006      	b.n	800c932 <USBH_HandleControl+0x2de>
      break;
 800c924:	bf00      	nop
 800c926:	e004      	b.n	800c932 <USBH_HandleControl+0x2de>
      break;
 800c928:	bf00      	nop
 800c92a:	e002      	b.n	800c932 <USBH_HandleControl+0x2de>
      break;
 800c92c:	bf00      	nop
 800c92e:	e000      	b.n	800c932 <USBH_HandleControl+0x2de>
      break;
 800c930:	bf00      	nop
  }

  return status;
 800c932:	7bfb      	ldrb	r3, [r7, #15]
}
 800c934:	4618      	mov	r0, r3
 800c936:	3710      	adds	r7, #16
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b088      	sub	sp, #32
 800c940:	af04      	add	r7, sp, #16
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	4613      	mov	r3, r2
 800c948:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c94a:	79f9      	ldrb	r1, [r7, #7]
 800c94c:	2300      	movs	r3, #0
 800c94e:	9303      	str	r3, [sp, #12]
 800c950:	2308      	movs	r3, #8
 800c952:	9302      	str	r3, [sp, #8]
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	9301      	str	r3, [sp, #4]
 800c958:	2300      	movs	r3, #0
 800c95a:	9300      	str	r3, [sp, #0]
 800c95c:	2300      	movs	r3, #0
 800c95e:	2200      	movs	r2, #0
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	f002 fed4 	bl	800f70e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c966:	2300      	movs	r3, #0
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3710      	adds	r7, #16
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b088      	sub	sp, #32
 800c974:	af04      	add	r7, sp, #16
 800c976:	60f8      	str	r0, [r7, #12]
 800c978:	60b9      	str	r1, [r7, #8]
 800c97a:	4611      	mov	r1, r2
 800c97c:	461a      	mov	r2, r3
 800c97e:	460b      	mov	r3, r1
 800c980:	80fb      	strh	r3, [r7, #6]
 800c982:	4613      	mov	r3, r2
 800c984:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d001      	beq.n	800c994 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c990:	2300      	movs	r3, #0
 800c992:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c994:	7979      	ldrb	r1, [r7, #5]
 800c996:	7e3b      	ldrb	r3, [r7, #24]
 800c998:	9303      	str	r3, [sp, #12]
 800c99a:	88fb      	ldrh	r3, [r7, #6]
 800c99c:	9302      	str	r3, [sp, #8]
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	9301      	str	r3, [sp, #4]
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	9300      	str	r3, [sp, #0]
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	68f8      	ldr	r0, [r7, #12]
 800c9ac:	f002 feaf 	bl	800f70e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c9b0:	2300      	movs	r3, #0
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3710      	adds	r7, #16
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b088      	sub	sp, #32
 800c9be:	af04      	add	r7, sp, #16
 800c9c0:	60f8      	str	r0, [r7, #12]
 800c9c2:	60b9      	str	r1, [r7, #8]
 800c9c4:	4611      	mov	r1, r2
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	80fb      	strh	r3, [r7, #6]
 800c9cc:	4613      	mov	r3, r2
 800c9ce:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c9d0:	7979      	ldrb	r1, [r7, #5]
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	9303      	str	r3, [sp, #12]
 800c9d6:	88fb      	ldrh	r3, [r7, #6]
 800c9d8:	9302      	str	r3, [sp, #8]
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	9301      	str	r3, [sp, #4]
 800c9de:	2301      	movs	r3, #1
 800c9e0:	9300      	str	r3, [sp, #0]
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	2201      	movs	r2, #1
 800c9e6:	68f8      	ldr	r0, [r7, #12]
 800c9e8:	f002 fe91 	bl	800f70e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c9ec:	2300      	movs	r3, #0

}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3710      	adds	r7, #16
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}

0800c9f6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c9f6:	b580      	push	{r7, lr}
 800c9f8:	b088      	sub	sp, #32
 800c9fa:	af04      	add	r7, sp, #16
 800c9fc:	60f8      	str	r0, [r7, #12]
 800c9fe:	60b9      	str	r1, [r7, #8]
 800ca00:	4611      	mov	r1, r2
 800ca02:	461a      	mov	r2, r3
 800ca04:	460b      	mov	r3, r1
 800ca06:	80fb      	strh	r3, [r7, #6]
 800ca08:	4613      	mov	r3, r2
 800ca0a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d001      	beq.n	800ca1a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ca16:	2300      	movs	r3, #0
 800ca18:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ca1a:	7979      	ldrb	r1, [r7, #5]
 800ca1c:	7e3b      	ldrb	r3, [r7, #24]
 800ca1e:	9303      	str	r3, [sp, #12]
 800ca20:	88fb      	ldrh	r3, [r7, #6]
 800ca22:	9302      	str	r3, [sp, #8]
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	9301      	str	r3, [sp, #4]
 800ca28:	2301      	movs	r3, #1
 800ca2a:	9300      	str	r3, [sp, #0]
 800ca2c:	2302      	movs	r3, #2
 800ca2e:	2200      	movs	r2, #0
 800ca30:	68f8      	ldr	r0, [r7, #12]
 800ca32:	f002 fe6c 	bl	800f70e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ca36:	2300      	movs	r3, #0
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3710      	adds	r7, #16
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b088      	sub	sp, #32
 800ca44:	af04      	add	r7, sp, #16
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	4611      	mov	r1, r2
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	460b      	mov	r3, r1
 800ca50:	80fb      	strh	r3, [r7, #6]
 800ca52:	4613      	mov	r3, r2
 800ca54:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ca56:	7979      	ldrb	r1, [r7, #5]
 800ca58:	2300      	movs	r3, #0
 800ca5a:	9303      	str	r3, [sp, #12]
 800ca5c:	88fb      	ldrh	r3, [r7, #6]
 800ca5e:	9302      	str	r3, [sp, #8]
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	9301      	str	r3, [sp, #4]
 800ca64:	2301      	movs	r3, #1
 800ca66:	9300      	str	r3, [sp, #0]
 800ca68:	2302      	movs	r3, #2
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	68f8      	ldr	r0, [r7, #12]
 800ca6e:	f002 fe4e 	bl	800f70e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ca72:	2300      	movs	r3, #0
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3710      	adds	r7, #16
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b086      	sub	sp, #24
 800ca80:	af04      	add	r7, sp, #16
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	4608      	mov	r0, r1
 800ca86:	4611      	mov	r1, r2
 800ca88:	461a      	mov	r2, r3
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	70fb      	strb	r3, [r7, #3]
 800ca8e:	460b      	mov	r3, r1
 800ca90:	70bb      	strb	r3, [r7, #2]
 800ca92:	4613      	mov	r3, r2
 800ca94:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ca96:	7878      	ldrb	r0, [r7, #1]
 800ca98:	78ba      	ldrb	r2, [r7, #2]
 800ca9a:	78f9      	ldrb	r1, [r7, #3]
 800ca9c:	8b3b      	ldrh	r3, [r7, #24]
 800ca9e:	9302      	str	r3, [sp, #8]
 800caa0:	7d3b      	ldrb	r3, [r7, #20]
 800caa2:	9301      	str	r3, [sp, #4]
 800caa4:	7c3b      	ldrb	r3, [r7, #16]
 800caa6:	9300      	str	r3, [sp, #0]
 800caa8:	4603      	mov	r3, r0
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f002 fde1 	bl	800f672 <USBH_LL_OpenPipe>

  return USBH_OK;
 800cab0:	2300      	movs	r3, #0
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3708      	adds	r7, #8
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}

0800caba <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800caba:	b580      	push	{r7, lr}
 800cabc:	b082      	sub	sp, #8
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
 800cac2:	460b      	mov	r3, r1
 800cac4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800cac6:	78fb      	ldrb	r3, [r7, #3]
 800cac8:	4619      	mov	r1, r3
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f002 fe00 	bl	800f6d0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800cad0:	2300      	movs	r3, #0
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3708      	adds	r7, #8
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800cada:	b580      	push	{r7, lr}
 800cadc:	b084      	sub	sp, #16
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
 800cae2:	460b      	mov	r3, r1
 800cae4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 f836 	bl	800cb58 <USBH_GetFreePipe>
 800caec:	4603      	mov	r3, r0
 800caee:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800caf0:	89fb      	ldrh	r3, [r7, #14]
 800caf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d00a      	beq.n	800cb10 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800cafa:	78fa      	ldrb	r2, [r7, #3]
 800cafc:	89fb      	ldrh	r3, [r7, #14]
 800cafe:	f003 030f 	and.w	r3, r3, #15
 800cb02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb06:	6879      	ldr	r1, [r7, #4]
 800cb08:	33e0      	adds	r3, #224	; 0xe0
 800cb0a:	009b      	lsls	r3, r3, #2
 800cb0c:	440b      	add	r3, r1
 800cb0e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800cb10:	89fb      	ldrh	r3, [r7, #14]
 800cb12:	b2db      	uxtb	r3, r3
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3710      	adds	r7, #16
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b083      	sub	sp, #12
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	460b      	mov	r3, r1
 800cb26:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800cb28:	78fb      	ldrb	r3, [r7, #3]
 800cb2a:	2b0f      	cmp	r3, #15
 800cb2c:	d80d      	bhi.n	800cb4a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800cb2e:	78fb      	ldrb	r3, [r7, #3]
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	33e0      	adds	r3, #224	; 0xe0
 800cb34:	009b      	lsls	r3, r3, #2
 800cb36:	4413      	add	r3, r2
 800cb38:	685a      	ldr	r2, [r3, #4]
 800cb3a:	78fb      	ldrb	r3, [r7, #3]
 800cb3c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800cb40:	6879      	ldr	r1, [r7, #4]
 800cb42:	33e0      	adds	r3, #224	; 0xe0
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	440b      	add	r3, r1
 800cb48:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800cb4a:	2300      	movs	r3, #0
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	370c      	adds	r7, #12
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800cb60:	2300      	movs	r3, #0
 800cb62:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800cb64:	2300      	movs	r3, #0
 800cb66:	73fb      	strb	r3, [r7, #15]
 800cb68:	e00f      	b.n	800cb8a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800cb6a:	7bfb      	ldrb	r3, [r7, #15]
 800cb6c:	687a      	ldr	r2, [r7, #4]
 800cb6e:	33e0      	adds	r3, #224	; 0xe0
 800cb70:	009b      	lsls	r3, r3, #2
 800cb72:	4413      	add	r3, r2
 800cb74:	685b      	ldr	r3, [r3, #4]
 800cb76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d102      	bne.n	800cb84 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800cb7e:	7bfb      	ldrb	r3, [r7, #15]
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	e007      	b.n	800cb94 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800cb84:	7bfb      	ldrb	r3, [r7, #15]
 800cb86:	3301      	adds	r3, #1
 800cb88:	73fb      	strb	r3, [r7, #15]
 800cb8a:	7bfb      	ldrb	r3, [r7, #15]
 800cb8c:	2b0f      	cmp	r3, #15
 800cb8e:	d9ec      	bls.n	800cb6a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800cb90:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3714      	adds	r7, #20
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr

0800cba0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	4603      	mov	r3, r0
 800cba8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cbaa:	79fb      	ldrb	r3, [r7, #7]
 800cbac:	4a08      	ldr	r2, [pc, #32]	; (800cbd0 <disk_status+0x30>)
 800cbae:	009b      	lsls	r3, r3, #2
 800cbb0:	4413      	add	r3, r2
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	685b      	ldr	r3, [r3, #4]
 800cbb6:	79fa      	ldrb	r2, [r7, #7]
 800cbb8:	4905      	ldr	r1, [pc, #20]	; (800cbd0 <disk_status+0x30>)
 800cbba:	440a      	add	r2, r1
 800cbbc:	7a12      	ldrb	r2, [r2, #8]
 800cbbe:	4610      	mov	r0, r2
 800cbc0:	4798      	blx	r3
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cbc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3710      	adds	r7, #16
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	20001774 	.word	0x20001774

0800cbd4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b084      	sub	sp, #16
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	4603      	mov	r3, r0
 800cbdc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cbe2:	79fb      	ldrb	r3, [r7, #7]
 800cbe4:	4a0d      	ldr	r2, [pc, #52]	; (800cc1c <disk_initialize+0x48>)
 800cbe6:	5cd3      	ldrb	r3, [r2, r3]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d111      	bne.n	800cc10 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cbec:	79fb      	ldrb	r3, [r7, #7]
 800cbee:	4a0b      	ldr	r2, [pc, #44]	; (800cc1c <disk_initialize+0x48>)
 800cbf0:	2101      	movs	r1, #1
 800cbf2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cbf4:	79fb      	ldrb	r3, [r7, #7]
 800cbf6:	4a09      	ldr	r2, [pc, #36]	; (800cc1c <disk_initialize+0x48>)
 800cbf8:	009b      	lsls	r3, r3, #2
 800cbfa:	4413      	add	r3, r2
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	79fa      	ldrb	r2, [r7, #7]
 800cc02:	4906      	ldr	r1, [pc, #24]	; (800cc1c <disk_initialize+0x48>)
 800cc04:	440a      	add	r2, r1
 800cc06:	7a12      	ldrb	r2, [r2, #8]
 800cc08:	4610      	mov	r0, r2
 800cc0a:	4798      	blx	r3
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cc10:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3710      	adds	r7, #16
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	20001774 	.word	0x20001774

0800cc20 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cc20:	b590      	push	{r4, r7, lr}
 800cc22:	b087      	sub	sp, #28
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60b9      	str	r1, [r7, #8]
 800cc28:	607a      	str	r2, [r7, #4]
 800cc2a:	603b      	str	r3, [r7, #0]
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cc30:	7bfb      	ldrb	r3, [r7, #15]
 800cc32:	4a0a      	ldr	r2, [pc, #40]	; (800cc5c <disk_read+0x3c>)
 800cc34:	009b      	lsls	r3, r3, #2
 800cc36:	4413      	add	r3, r2
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	689c      	ldr	r4, [r3, #8]
 800cc3c:	7bfb      	ldrb	r3, [r7, #15]
 800cc3e:	4a07      	ldr	r2, [pc, #28]	; (800cc5c <disk_read+0x3c>)
 800cc40:	4413      	add	r3, r2
 800cc42:	7a18      	ldrb	r0, [r3, #8]
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	68b9      	ldr	r1, [r7, #8]
 800cc4a:	47a0      	blx	r4
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	75fb      	strb	r3, [r7, #23]
  return res;
 800cc50:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	371c      	adds	r7, #28
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd90      	pop	{r4, r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	20001774 	.word	0x20001774

0800cc60 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cc60:	b590      	push	{r4, r7, lr}
 800cc62:	b087      	sub	sp, #28
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	60b9      	str	r1, [r7, #8]
 800cc68:	607a      	str	r2, [r7, #4]
 800cc6a:	603b      	str	r3, [r7, #0]
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cc70:	7bfb      	ldrb	r3, [r7, #15]
 800cc72:	4a0a      	ldr	r2, [pc, #40]	; (800cc9c <disk_write+0x3c>)
 800cc74:	009b      	lsls	r3, r3, #2
 800cc76:	4413      	add	r3, r2
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	68dc      	ldr	r4, [r3, #12]
 800cc7c:	7bfb      	ldrb	r3, [r7, #15]
 800cc7e:	4a07      	ldr	r2, [pc, #28]	; (800cc9c <disk_write+0x3c>)
 800cc80:	4413      	add	r3, r2
 800cc82:	7a18      	ldrb	r0, [r3, #8]
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	687a      	ldr	r2, [r7, #4]
 800cc88:	68b9      	ldr	r1, [r7, #8]
 800cc8a:	47a0      	blx	r4
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	75fb      	strb	r3, [r7, #23]
  return res;
 800cc90:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	371c      	adds	r7, #28
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd90      	pop	{r4, r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	20001774 	.word	0x20001774

0800cca0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	4603      	mov	r3, r0
 800cca8:	603a      	str	r2, [r7, #0]
 800ccaa:	71fb      	strb	r3, [r7, #7]
 800ccac:	460b      	mov	r3, r1
 800ccae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ccb0:	79fb      	ldrb	r3, [r7, #7]
 800ccb2:	4a09      	ldr	r2, [pc, #36]	; (800ccd8 <disk_ioctl+0x38>)
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	4413      	add	r3, r2
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	691b      	ldr	r3, [r3, #16]
 800ccbc:	79fa      	ldrb	r2, [r7, #7]
 800ccbe:	4906      	ldr	r1, [pc, #24]	; (800ccd8 <disk_ioctl+0x38>)
 800ccc0:	440a      	add	r2, r1
 800ccc2:	7a10      	ldrb	r0, [r2, #8]
 800ccc4:	79b9      	ldrb	r1, [r7, #6]
 800ccc6:	683a      	ldr	r2, [r7, #0]
 800ccc8:	4798      	blx	r3
 800ccca:	4603      	mov	r3, r0
 800cccc:	73fb      	strb	r3, [r7, #15]
  return res;
 800ccce:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3710      	adds	r7, #16
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	20001774 	.word	0x20001774

0800ccdc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b085      	sub	sp, #20
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	3301      	adds	r3, #1
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ccec:	89fb      	ldrh	r3, [r7, #14]
 800ccee:	021b      	lsls	r3, r3, #8
 800ccf0:	b21a      	sxth	r2, r3
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	b21b      	sxth	r3, r3
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	b21b      	sxth	r3, r3
 800ccfc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ccfe:	89fb      	ldrh	r3, [r7, #14]
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3714      	adds	r7, #20
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr

0800cd0c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b085      	sub	sp, #20
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	3303      	adds	r3, #3
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	021b      	lsls	r3, r3, #8
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	3202      	adds	r2, #2
 800cd24:	7812      	ldrb	r2, [r2, #0]
 800cd26:	4313      	orrs	r3, r2
 800cd28:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	021b      	lsls	r3, r3, #8
 800cd2e:	687a      	ldr	r2, [r7, #4]
 800cd30:	3201      	adds	r2, #1
 800cd32:	7812      	ldrb	r2, [r2, #0]
 800cd34:	4313      	orrs	r3, r2
 800cd36:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	021b      	lsls	r3, r3, #8
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	7812      	ldrb	r2, [r2, #0]
 800cd40:	4313      	orrs	r3, r2
 800cd42:	60fb      	str	r3, [r7, #12]
	return rv;
 800cd44:	68fb      	ldr	r3, [r7, #12]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3714      	adds	r7, #20
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr

0800cd52 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cd52:	b480      	push	{r7}
 800cd54:	b083      	sub	sp, #12
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
 800cd5a:	460b      	mov	r3, r1
 800cd5c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	1c5a      	adds	r2, r3, #1
 800cd62:	607a      	str	r2, [r7, #4]
 800cd64:	887a      	ldrh	r2, [r7, #2]
 800cd66:	b2d2      	uxtb	r2, r2
 800cd68:	701a      	strb	r2, [r3, #0]
 800cd6a:	887b      	ldrh	r3, [r7, #2]
 800cd6c:	0a1b      	lsrs	r3, r3, #8
 800cd6e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	1c5a      	adds	r2, r3, #1
 800cd74:	607a      	str	r2, [r7, #4]
 800cd76:	887a      	ldrh	r2, [r7, #2]
 800cd78:	b2d2      	uxtb	r2, r2
 800cd7a:	701a      	strb	r2, [r3, #0]
}
 800cd7c:	bf00      	nop
 800cd7e:	370c      	adds	r7, #12
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr

0800cd88 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b083      	sub	sp, #12
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	1c5a      	adds	r2, r3, #1
 800cd96:	607a      	str	r2, [r7, #4]
 800cd98:	683a      	ldr	r2, [r7, #0]
 800cd9a:	b2d2      	uxtb	r2, r2
 800cd9c:	701a      	strb	r2, [r3, #0]
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	0a1b      	lsrs	r3, r3, #8
 800cda2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	1c5a      	adds	r2, r3, #1
 800cda8:	607a      	str	r2, [r7, #4]
 800cdaa:	683a      	ldr	r2, [r7, #0]
 800cdac:	b2d2      	uxtb	r2, r2
 800cdae:	701a      	strb	r2, [r3, #0]
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	0a1b      	lsrs	r3, r3, #8
 800cdb4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	1c5a      	adds	r2, r3, #1
 800cdba:	607a      	str	r2, [r7, #4]
 800cdbc:	683a      	ldr	r2, [r7, #0]
 800cdbe:	b2d2      	uxtb	r2, r2
 800cdc0:	701a      	strb	r2, [r3, #0]
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	0a1b      	lsrs	r3, r3, #8
 800cdc6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	1c5a      	adds	r2, r3, #1
 800cdcc:	607a      	str	r2, [r7, #4]
 800cdce:	683a      	ldr	r2, [r7, #0]
 800cdd0:	b2d2      	uxtb	r2, r2
 800cdd2:	701a      	strb	r2, [r3, #0]
}
 800cdd4:	bf00      	nop
 800cdd6:	370c      	adds	r7, #12
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdde:	4770      	bx	lr

0800cde0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cde0:	b480      	push	{r7}
 800cde2:	b087      	sub	sp, #28
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	60f8      	str	r0, [r7, #12]
 800cde8:	60b9      	str	r1, [r7, #8]
 800cdea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d00d      	beq.n	800ce16 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cdfa:	693a      	ldr	r2, [r7, #16]
 800cdfc:	1c53      	adds	r3, r2, #1
 800cdfe:	613b      	str	r3, [r7, #16]
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	1c59      	adds	r1, r3, #1
 800ce04:	6179      	str	r1, [r7, #20]
 800ce06:	7812      	ldrb	r2, [r2, #0]
 800ce08:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	3b01      	subs	r3, #1
 800ce0e:	607b      	str	r3, [r7, #4]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d1f1      	bne.n	800cdfa <mem_cpy+0x1a>
	}
}
 800ce16:	bf00      	nop
 800ce18:	371c      	adds	r7, #28
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr

0800ce22 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ce22:	b480      	push	{r7}
 800ce24:	b087      	sub	sp, #28
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	60f8      	str	r0, [r7, #12]
 800ce2a:	60b9      	str	r1, [r7, #8]
 800ce2c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	1c5a      	adds	r2, r3, #1
 800ce36:	617a      	str	r2, [r7, #20]
 800ce38:	68ba      	ldr	r2, [r7, #8]
 800ce3a:	b2d2      	uxtb	r2, r2
 800ce3c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	3b01      	subs	r3, #1
 800ce42:	607b      	str	r3, [r7, #4]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d1f3      	bne.n	800ce32 <mem_set+0x10>
}
 800ce4a:	bf00      	nop
 800ce4c:	bf00      	nop
 800ce4e:	371c      	adds	r7, #28
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr

0800ce58 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ce58:	b480      	push	{r7}
 800ce5a:	b089      	sub	sp, #36	; 0x24
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	61fb      	str	r3, [r7, #28]
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	1c5a      	adds	r2, r3, #1
 800ce74:	61fa      	str	r2, [r7, #28]
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	4619      	mov	r1, r3
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	1c5a      	adds	r2, r3, #1
 800ce7e:	61ba      	str	r2, [r7, #24]
 800ce80:	781b      	ldrb	r3, [r3, #0]
 800ce82:	1acb      	subs	r3, r1, r3
 800ce84:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	3b01      	subs	r3, #1
 800ce8a:	607b      	str	r3, [r7, #4]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d002      	beq.n	800ce98 <mem_cmp+0x40>
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d0eb      	beq.n	800ce70 <mem_cmp+0x18>

	return r;
 800ce98:	697b      	ldr	r3, [r7, #20]
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3724      	adds	r7, #36	; 0x24
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea4:	4770      	bx	lr

0800cea6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cea6:	b480      	push	{r7}
 800cea8:	b083      	sub	sp, #12
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6078      	str	r0, [r7, #4]
 800ceae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ceb0:	e002      	b.n	800ceb8 <chk_chr+0x12>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	607b      	str	r3, [r7, #4]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d005      	beq.n	800cecc <chk_chr+0x26>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	781b      	ldrb	r3, [r3, #0]
 800cec4:	461a      	mov	r2, r3
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d1f2      	bne.n	800ceb2 <chk_chr+0xc>
	return *str;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	781b      	ldrb	r3, [r3, #0]
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	370c      	adds	r7, #12
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr

0800cedc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cedc:	b480      	push	{r7}
 800cede:	b085      	sub	sp, #20
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cee6:	2300      	movs	r3, #0
 800cee8:	60bb      	str	r3, [r7, #8]
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	60fb      	str	r3, [r7, #12]
 800ceee:	e029      	b.n	800cf44 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cef0:	4a27      	ldr	r2, [pc, #156]	; (800cf90 <chk_lock+0xb4>)
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	011b      	lsls	r3, r3, #4
 800cef6:	4413      	add	r3, r2
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d01d      	beq.n	800cf3a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cefe:	4a24      	ldr	r2, [pc, #144]	; (800cf90 <chk_lock+0xb4>)
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	011b      	lsls	r3, r3, #4
 800cf04:	4413      	add	r3, r2
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d116      	bne.n	800cf3e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cf10:	4a1f      	ldr	r2, [pc, #124]	; (800cf90 <chk_lock+0xb4>)
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	011b      	lsls	r3, r3, #4
 800cf16:	4413      	add	r3, r2
 800cf18:	3304      	adds	r3, #4
 800cf1a:	681a      	ldr	r2, [r3, #0]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d10c      	bne.n	800cf3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cf24:	4a1a      	ldr	r2, [pc, #104]	; (800cf90 <chk_lock+0xb4>)
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	011b      	lsls	r3, r3, #4
 800cf2a:	4413      	add	r3, r2
 800cf2c:	3308      	adds	r3, #8
 800cf2e:	681a      	ldr	r2, [r3, #0]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d102      	bne.n	800cf3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cf38:	e007      	b.n	800cf4a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	3301      	adds	r3, #1
 800cf42:	60fb      	str	r3, [r7, #12]
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d9d2      	bls.n	800cef0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2b02      	cmp	r3, #2
 800cf4e:	d109      	bne.n	800cf64 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d102      	bne.n	800cf5c <chk_lock+0x80>
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	2b02      	cmp	r3, #2
 800cf5a:	d101      	bne.n	800cf60 <chk_lock+0x84>
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	e010      	b.n	800cf82 <chk_lock+0xa6>
 800cf60:	2312      	movs	r3, #18
 800cf62:	e00e      	b.n	800cf82 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d108      	bne.n	800cf7c <chk_lock+0xa0>
 800cf6a:	4a09      	ldr	r2, [pc, #36]	; (800cf90 <chk_lock+0xb4>)
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	011b      	lsls	r3, r3, #4
 800cf70:	4413      	add	r3, r2
 800cf72:	330c      	adds	r3, #12
 800cf74:	881b      	ldrh	r3, [r3, #0]
 800cf76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf7a:	d101      	bne.n	800cf80 <chk_lock+0xa4>
 800cf7c:	2310      	movs	r3, #16
 800cf7e:	e000      	b.n	800cf82 <chk_lock+0xa6>
 800cf80:	2300      	movs	r3, #0
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3714      	adds	r7, #20
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr
 800cf8e:	bf00      	nop
 800cf90:	20001754 	.word	0x20001754

0800cf94 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	607b      	str	r3, [r7, #4]
 800cf9e:	e002      	b.n	800cfa6 <enq_lock+0x12>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	607b      	str	r3, [r7, #4]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d806      	bhi.n	800cfba <enq_lock+0x26>
 800cfac:	4a09      	ldr	r2, [pc, #36]	; (800cfd4 <enq_lock+0x40>)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	011b      	lsls	r3, r3, #4
 800cfb2:	4413      	add	r3, r2
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d1f2      	bne.n	800cfa0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2b02      	cmp	r3, #2
 800cfbe:	bf14      	ite	ne
 800cfc0:	2301      	movne	r3, #1
 800cfc2:	2300      	moveq	r3, #0
 800cfc4:	b2db      	uxtb	r3, r3
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	370c      	adds	r7, #12
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr
 800cfd2:	bf00      	nop
 800cfd4:	20001754 	.word	0x20001754

0800cfd8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	60fb      	str	r3, [r7, #12]
 800cfe6:	e01f      	b.n	800d028 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cfe8:	4a41      	ldr	r2, [pc, #260]	; (800d0f0 <inc_lock+0x118>)
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	011b      	lsls	r3, r3, #4
 800cfee:	4413      	add	r3, r2
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d113      	bne.n	800d022 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cffa:	4a3d      	ldr	r2, [pc, #244]	; (800d0f0 <inc_lock+0x118>)
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	011b      	lsls	r3, r3, #4
 800d000:	4413      	add	r3, r2
 800d002:	3304      	adds	r3, #4
 800d004:	681a      	ldr	r2, [r3, #0]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d109      	bne.n	800d022 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d00e:	4a38      	ldr	r2, [pc, #224]	; (800d0f0 <inc_lock+0x118>)
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	011b      	lsls	r3, r3, #4
 800d014:	4413      	add	r3, r2
 800d016:	3308      	adds	r3, #8
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d01e:	429a      	cmp	r2, r3
 800d020:	d006      	beq.n	800d030 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	3301      	adds	r3, #1
 800d026:	60fb      	str	r3, [r7, #12]
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d9dc      	bls.n	800cfe8 <inc_lock+0x10>
 800d02e:	e000      	b.n	800d032 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d030:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2b02      	cmp	r3, #2
 800d036:	d132      	bne.n	800d09e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d038:	2300      	movs	r3, #0
 800d03a:	60fb      	str	r3, [r7, #12]
 800d03c:	e002      	b.n	800d044 <inc_lock+0x6c>
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	3301      	adds	r3, #1
 800d042:	60fb      	str	r3, [r7, #12]
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2b01      	cmp	r3, #1
 800d048:	d806      	bhi.n	800d058 <inc_lock+0x80>
 800d04a:	4a29      	ldr	r2, [pc, #164]	; (800d0f0 <inc_lock+0x118>)
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	011b      	lsls	r3, r3, #4
 800d050:	4413      	add	r3, r2
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d1f2      	bne.n	800d03e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2b02      	cmp	r3, #2
 800d05c:	d101      	bne.n	800d062 <inc_lock+0x8a>
 800d05e:	2300      	movs	r3, #0
 800d060:	e040      	b.n	800d0e4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681a      	ldr	r2, [r3, #0]
 800d066:	4922      	ldr	r1, [pc, #136]	; (800d0f0 <inc_lock+0x118>)
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	011b      	lsls	r3, r3, #4
 800d06c:	440b      	add	r3, r1
 800d06e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	689a      	ldr	r2, [r3, #8]
 800d074:	491e      	ldr	r1, [pc, #120]	; (800d0f0 <inc_lock+0x118>)
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	011b      	lsls	r3, r3, #4
 800d07a:	440b      	add	r3, r1
 800d07c:	3304      	adds	r3, #4
 800d07e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	695a      	ldr	r2, [r3, #20]
 800d084:	491a      	ldr	r1, [pc, #104]	; (800d0f0 <inc_lock+0x118>)
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	011b      	lsls	r3, r3, #4
 800d08a:	440b      	add	r3, r1
 800d08c:	3308      	adds	r3, #8
 800d08e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d090:	4a17      	ldr	r2, [pc, #92]	; (800d0f0 <inc_lock+0x118>)
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	011b      	lsls	r3, r3, #4
 800d096:	4413      	add	r3, r2
 800d098:	330c      	adds	r3, #12
 800d09a:	2200      	movs	r2, #0
 800d09c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d009      	beq.n	800d0b8 <inc_lock+0xe0>
 800d0a4:	4a12      	ldr	r2, [pc, #72]	; (800d0f0 <inc_lock+0x118>)
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	011b      	lsls	r3, r3, #4
 800d0aa:	4413      	add	r3, r2
 800d0ac:	330c      	adds	r3, #12
 800d0ae:	881b      	ldrh	r3, [r3, #0]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d001      	beq.n	800d0b8 <inc_lock+0xe0>
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	e015      	b.n	800d0e4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d108      	bne.n	800d0d0 <inc_lock+0xf8>
 800d0be:	4a0c      	ldr	r2, [pc, #48]	; (800d0f0 <inc_lock+0x118>)
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	011b      	lsls	r3, r3, #4
 800d0c4:	4413      	add	r3, r2
 800d0c6:	330c      	adds	r3, #12
 800d0c8:	881b      	ldrh	r3, [r3, #0]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	b29a      	uxth	r2, r3
 800d0ce:	e001      	b.n	800d0d4 <inc_lock+0xfc>
 800d0d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0d4:	4906      	ldr	r1, [pc, #24]	; (800d0f0 <inc_lock+0x118>)
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	011b      	lsls	r3, r3, #4
 800d0da:	440b      	add	r3, r1
 800d0dc:	330c      	adds	r3, #12
 800d0de:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	3301      	adds	r3, #1
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3714      	adds	r7, #20
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr
 800d0f0:	20001754 	.word	0x20001754

0800d0f4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b085      	sub	sp, #20
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	3b01      	subs	r3, #1
 800d100:	607b      	str	r3, [r7, #4]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2b01      	cmp	r3, #1
 800d106:	d825      	bhi.n	800d154 <dec_lock+0x60>
		n = Files[i].ctr;
 800d108:	4a17      	ldr	r2, [pc, #92]	; (800d168 <dec_lock+0x74>)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	011b      	lsls	r3, r3, #4
 800d10e:	4413      	add	r3, r2
 800d110:	330c      	adds	r3, #12
 800d112:	881b      	ldrh	r3, [r3, #0]
 800d114:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d116:	89fb      	ldrh	r3, [r7, #14]
 800d118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d11c:	d101      	bne.n	800d122 <dec_lock+0x2e>
 800d11e:	2300      	movs	r3, #0
 800d120:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d122:	89fb      	ldrh	r3, [r7, #14]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d002      	beq.n	800d12e <dec_lock+0x3a>
 800d128:	89fb      	ldrh	r3, [r7, #14]
 800d12a:	3b01      	subs	r3, #1
 800d12c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d12e:	4a0e      	ldr	r2, [pc, #56]	; (800d168 <dec_lock+0x74>)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	011b      	lsls	r3, r3, #4
 800d134:	4413      	add	r3, r2
 800d136:	330c      	adds	r3, #12
 800d138:	89fa      	ldrh	r2, [r7, #14]
 800d13a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d13c:	89fb      	ldrh	r3, [r7, #14]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d105      	bne.n	800d14e <dec_lock+0x5a>
 800d142:	4a09      	ldr	r2, [pc, #36]	; (800d168 <dec_lock+0x74>)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	011b      	lsls	r3, r3, #4
 800d148:	4413      	add	r3, r2
 800d14a:	2200      	movs	r2, #0
 800d14c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d14e:	2300      	movs	r3, #0
 800d150:	737b      	strb	r3, [r7, #13]
 800d152:	e001      	b.n	800d158 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d154:	2302      	movs	r3, #2
 800d156:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d158:	7b7b      	ldrb	r3, [r7, #13]
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3714      	adds	r7, #20
 800d15e:	46bd      	mov	sp, r7
 800d160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d164:	4770      	bx	lr
 800d166:	bf00      	nop
 800d168:	20001754 	.word	0x20001754

0800d16c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b085      	sub	sp, #20
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d174:	2300      	movs	r3, #0
 800d176:	60fb      	str	r3, [r7, #12]
 800d178:	e010      	b.n	800d19c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d17a:	4a0d      	ldr	r2, [pc, #52]	; (800d1b0 <clear_lock+0x44>)
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	011b      	lsls	r3, r3, #4
 800d180:	4413      	add	r3, r2
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	429a      	cmp	r2, r3
 800d188:	d105      	bne.n	800d196 <clear_lock+0x2a>
 800d18a:	4a09      	ldr	r2, [pc, #36]	; (800d1b0 <clear_lock+0x44>)
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	011b      	lsls	r3, r3, #4
 800d190:	4413      	add	r3, r2
 800d192:	2200      	movs	r2, #0
 800d194:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	3301      	adds	r3, #1
 800d19a:	60fb      	str	r3, [r7, #12]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2b01      	cmp	r3, #1
 800d1a0:	d9eb      	bls.n	800d17a <clear_lock+0xe>
	}
}
 800d1a2:	bf00      	nop
 800d1a4:	bf00      	nop
 800d1a6:	3714      	adds	r7, #20
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ae:	4770      	bx	lr
 800d1b0:	20001754 	.word	0x20001754

0800d1b4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b086      	sub	sp, #24
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	78db      	ldrb	r3, [r3, #3]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d034      	beq.n	800d232 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1cc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	7858      	ldrb	r0, [r3, #1]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d1d8:	2301      	movs	r3, #1
 800d1da:	697a      	ldr	r2, [r7, #20]
 800d1dc:	f7ff fd40 	bl	800cc60 <disk_write>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d002      	beq.n	800d1ec <sync_window+0x38>
			res = FR_DISK_ERR;
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	73fb      	strb	r3, [r7, #15]
 800d1ea:	e022      	b.n	800d232 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6a1b      	ldr	r3, [r3, #32]
 800d1f6:	697a      	ldr	r2, [r7, #20]
 800d1f8:	1ad2      	subs	r2, r2, r3
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	699b      	ldr	r3, [r3, #24]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d217      	bcs.n	800d232 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	789b      	ldrb	r3, [r3, #2]
 800d206:	613b      	str	r3, [r7, #16]
 800d208:	e010      	b.n	800d22c <sync_window+0x78>
					wsect += fs->fsize;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	699b      	ldr	r3, [r3, #24]
 800d20e:	697a      	ldr	r2, [r7, #20]
 800d210:	4413      	add	r3, r2
 800d212:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	7858      	ldrb	r0, [r3, #1]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d21e:	2301      	movs	r3, #1
 800d220:	697a      	ldr	r2, [r7, #20]
 800d222:	f7ff fd1d 	bl	800cc60 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	3b01      	subs	r3, #1
 800d22a:	613b      	str	r3, [r7, #16]
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d8eb      	bhi.n	800d20a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d232:	7bfb      	ldrb	r3, [r7, #15]
}
 800d234:	4618      	mov	r0, r3
 800d236:	3718      	adds	r7, #24
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d246:	2300      	movs	r3, #0
 800d248:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d24e:	683a      	ldr	r2, [r7, #0]
 800d250:	429a      	cmp	r2, r3
 800d252:	d01b      	beq.n	800d28c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f7ff ffad 	bl	800d1b4 <sync_window>
 800d25a:	4603      	mov	r3, r0
 800d25c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d25e:	7bfb      	ldrb	r3, [r7, #15]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d113      	bne.n	800d28c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	7858      	ldrb	r0, [r3, #1]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d26e:	2301      	movs	r3, #1
 800d270:	683a      	ldr	r2, [r7, #0]
 800d272:	f7ff fcd5 	bl	800cc20 <disk_read>
 800d276:	4603      	mov	r3, r0
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d004      	beq.n	800d286 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d27c:	f04f 33ff 	mov.w	r3, #4294967295
 800d280:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d282:	2301      	movs	r3, #1
 800d284:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	683a      	ldr	r2, [r7, #0]
 800d28a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800d28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3710      	adds	r7, #16
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
	...

0800d298 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b084      	sub	sp, #16
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f7ff ff87 	bl	800d1b4 <sync_window>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d2aa:	7bfb      	ldrb	r3, [r7, #15]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d158      	bne.n	800d362 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	2b03      	cmp	r3, #3
 800d2b6:	d148      	bne.n	800d34a <sync_fs+0xb2>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	791b      	ldrb	r3, [r3, #4]
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d144      	bne.n	800d34a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	3330      	adds	r3, #48	; 0x30
 800d2c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2c8:	2100      	movs	r1, #0
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f7ff fda9 	bl	800ce22 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	3330      	adds	r3, #48	; 0x30
 800d2d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d2d8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7ff fd38 	bl	800cd52 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	3330      	adds	r3, #48	; 0x30
 800d2e6:	4921      	ldr	r1, [pc, #132]	; (800d36c <sync_fs+0xd4>)
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7ff fd4d 	bl	800cd88 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	3330      	adds	r3, #48	; 0x30
 800d2f2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d2f6:	491e      	ldr	r1, [pc, #120]	; (800d370 <sync_fs+0xd8>)
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f7ff fd45 	bl	800cd88 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	3330      	adds	r3, #48	; 0x30
 800d302:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	691b      	ldr	r3, [r3, #16]
 800d30a:	4619      	mov	r1, r3
 800d30c:	4610      	mov	r0, r2
 800d30e:	f7ff fd3b 	bl	800cd88 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	3330      	adds	r3, #48	; 0x30
 800d316:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	68db      	ldr	r3, [r3, #12]
 800d31e:	4619      	mov	r1, r3
 800d320:	4610      	mov	r0, r2
 800d322:	f7ff fd31 	bl	800cd88 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	69db      	ldr	r3, [r3, #28]
 800d32a:	1c5a      	adds	r2, r3, #1
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	7858      	ldrb	r0, [r3, #1]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d33e:	2301      	movs	r3, #1
 800d340:	f7ff fc8e 	bl	800cc60 <disk_write>
			fs->fsi_flag = 0;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2200      	movs	r2, #0
 800d348:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	785b      	ldrb	r3, [r3, #1]
 800d34e:	2200      	movs	r2, #0
 800d350:	2100      	movs	r1, #0
 800d352:	4618      	mov	r0, r3
 800d354:	f7ff fca4 	bl	800cca0 <disk_ioctl>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d001      	beq.n	800d362 <sync_fs+0xca>
 800d35e:	2301      	movs	r3, #1
 800d360:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d362:	7bfb      	ldrb	r3, [r7, #15]
}
 800d364:	4618      	mov	r0, r3
 800d366:	3710      	adds	r7, #16
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}
 800d36c:	41615252 	.word	0x41615252
 800d370:	61417272 	.word	0x61417272

0800d374 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d374:	b480      	push	{r7}
 800d376:	b083      	sub	sp, #12
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	3b02      	subs	r3, #2
 800d382:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	695b      	ldr	r3, [r3, #20]
 800d388:	3b02      	subs	r3, #2
 800d38a:	683a      	ldr	r2, [r7, #0]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d301      	bcc.n	800d394 <clust2sect+0x20>
 800d390:	2300      	movs	r3, #0
 800d392:	e008      	b.n	800d3a6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	895b      	ldrh	r3, [r3, #10]
 800d398:	461a      	mov	r2, r3
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	fb03 f202 	mul.w	r2, r3, r2
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3a4:	4413      	add	r3, r2
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	370c      	adds	r7, #12
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b0:	4770      	bx	lr

0800d3b2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	b086      	sub	sp, #24
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	6078      	str	r0, [r7, #4]
 800d3ba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	d904      	bls.n	800d3d2 <get_fat+0x20>
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	695b      	ldr	r3, [r3, #20]
 800d3cc:	683a      	ldr	r2, [r7, #0]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d302      	bcc.n	800d3d8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	617b      	str	r3, [r7, #20]
 800d3d6:	e08f      	b.n	800d4f8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d3d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d3dc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	2b03      	cmp	r3, #3
 800d3e4:	d062      	beq.n	800d4ac <get_fat+0xfa>
 800d3e6:	2b03      	cmp	r3, #3
 800d3e8:	dc7c      	bgt.n	800d4e4 <get_fat+0x132>
 800d3ea:	2b01      	cmp	r3, #1
 800d3ec:	d002      	beq.n	800d3f4 <get_fat+0x42>
 800d3ee:	2b02      	cmp	r3, #2
 800d3f0:	d042      	beq.n	800d478 <get_fat+0xc6>
 800d3f2:	e077      	b.n	800d4e4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	60fb      	str	r3, [r7, #12]
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	085b      	lsrs	r3, r3, #1
 800d3fc:	68fa      	ldr	r2, [r7, #12]
 800d3fe:	4413      	add	r3, r2
 800d400:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	6a1a      	ldr	r2, [r3, #32]
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	0a5b      	lsrs	r3, r3, #9
 800d40a:	4413      	add	r3, r2
 800d40c:	4619      	mov	r1, r3
 800d40e:	6938      	ldr	r0, [r7, #16]
 800d410:	f7ff ff14 	bl	800d23c <move_window>
 800d414:	4603      	mov	r3, r0
 800d416:	2b00      	cmp	r3, #0
 800d418:	d167      	bne.n	800d4ea <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	1c5a      	adds	r2, r3, #1
 800d41e:	60fa      	str	r2, [r7, #12]
 800d420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d424:	693a      	ldr	r2, [r7, #16]
 800d426:	4413      	add	r3, r2
 800d428:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d42c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	6a1a      	ldr	r2, [r3, #32]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	0a5b      	lsrs	r3, r3, #9
 800d436:	4413      	add	r3, r2
 800d438:	4619      	mov	r1, r3
 800d43a:	6938      	ldr	r0, [r7, #16]
 800d43c:	f7ff fefe 	bl	800d23c <move_window>
 800d440:	4603      	mov	r3, r0
 800d442:	2b00      	cmp	r3, #0
 800d444:	d153      	bne.n	800d4ee <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d44c:	693a      	ldr	r2, [r7, #16]
 800d44e:	4413      	add	r3, r2
 800d450:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d454:	021b      	lsls	r3, r3, #8
 800d456:	461a      	mov	r2, r3
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	4313      	orrs	r3, r2
 800d45c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	f003 0301 	and.w	r3, r3, #1
 800d464:	2b00      	cmp	r3, #0
 800d466:	d002      	beq.n	800d46e <get_fat+0xbc>
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	091b      	lsrs	r3, r3, #4
 800d46c:	e002      	b.n	800d474 <get_fat+0xc2>
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d474:	617b      	str	r3, [r7, #20]
			break;
 800d476:	e03f      	b.n	800d4f8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	6a1a      	ldr	r2, [r3, #32]
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	0a1b      	lsrs	r3, r3, #8
 800d480:	4413      	add	r3, r2
 800d482:	4619      	mov	r1, r3
 800d484:	6938      	ldr	r0, [r7, #16]
 800d486:	f7ff fed9 	bl	800d23c <move_window>
 800d48a:	4603      	mov	r3, r0
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d130      	bne.n	800d4f2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	005b      	lsls	r3, r3, #1
 800d49a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d49e:	4413      	add	r3, r2
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7ff fc1b 	bl	800ccdc <ld_word>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	617b      	str	r3, [r7, #20]
			break;
 800d4aa:	e025      	b.n	800d4f8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	6a1a      	ldr	r2, [r3, #32]
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	09db      	lsrs	r3, r3, #7
 800d4b4:	4413      	add	r3, r2
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	6938      	ldr	r0, [r7, #16]
 800d4ba:	f7ff febf 	bl	800d23c <move_window>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d118      	bne.n	800d4f6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	009b      	lsls	r3, r3, #2
 800d4ce:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d4d2:	4413      	add	r3, r2
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7ff fc19 	bl	800cd0c <ld_dword>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d4e0:	617b      	str	r3, [r7, #20]
			break;
 800d4e2:	e009      	b.n	800d4f8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	617b      	str	r3, [r7, #20]
 800d4e8:	e006      	b.n	800d4f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4ea:	bf00      	nop
 800d4ec:	e004      	b.n	800d4f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4ee:	bf00      	nop
 800d4f0:	e002      	b.n	800d4f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d4f2:	bf00      	nop
 800d4f4:	e000      	b.n	800d4f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d4f6:	bf00      	nop
		}
	}

	return val;
 800d4f8:	697b      	ldr	r3, [r7, #20]
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3718      	adds	r7, #24
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}

0800d502 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d502:	b590      	push	{r4, r7, lr}
 800d504:	b089      	sub	sp, #36	; 0x24
 800d506:	af00      	add	r7, sp, #0
 800d508:	60f8      	str	r0, [r7, #12]
 800d50a:	60b9      	str	r1, [r7, #8]
 800d50c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d50e:	2302      	movs	r3, #2
 800d510:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	2b01      	cmp	r3, #1
 800d516:	f240 80d2 	bls.w	800d6be <put_fat+0x1bc>
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	695b      	ldr	r3, [r3, #20]
 800d51e:	68ba      	ldr	r2, [r7, #8]
 800d520:	429a      	cmp	r2, r3
 800d522:	f080 80cc 	bcs.w	800d6be <put_fat+0x1bc>
		switch (fs->fs_type) {
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	2b03      	cmp	r3, #3
 800d52c:	f000 8096 	beq.w	800d65c <put_fat+0x15a>
 800d530:	2b03      	cmp	r3, #3
 800d532:	f300 80cd 	bgt.w	800d6d0 <put_fat+0x1ce>
 800d536:	2b01      	cmp	r3, #1
 800d538:	d002      	beq.n	800d540 <put_fat+0x3e>
 800d53a:	2b02      	cmp	r3, #2
 800d53c:	d06e      	beq.n	800d61c <put_fat+0x11a>
 800d53e:	e0c7      	b.n	800d6d0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	61bb      	str	r3, [r7, #24]
 800d544:	69bb      	ldr	r3, [r7, #24]
 800d546:	085b      	lsrs	r3, r3, #1
 800d548:	69ba      	ldr	r2, [r7, #24]
 800d54a:	4413      	add	r3, r2
 800d54c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	6a1a      	ldr	r2, [r3, #32]
 800d552:	69bb      	ldr	r3, [r7, #24]
 800d554:	0a5b      	lsrs	r3, r3, #9
 800d556:	4413      	add	r3, r2
 800d558:	4619      	mov	r1, r3
 800d55a:	68f8      	ldr	r0, [r7, #12]
 800d55c:	f7ff fe6e 	bl	800d23c <move_window>
 800d560:	4603      	mov	r3, r0
 800d562:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d564:	7ffb      	ldrb	r3, [r7, #31]
 800d566:	2b00      	cmp	r3, #0
 800d568:	f040 80ab 	bne.w	800d6c2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d572:	69bb      	ldr	r3, [r7, #24]
 800d574:	1c59      	adds	r1, r3, #1
 800d576:	61b9      	str	r1, [r7, #24]
 800d578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d57c:	4413      	add	r3, r2
 800d57e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	f003 0301 	and.w	r3, r3, #1
 800d586:	2b00      	cmp	r3, #0
 800d588:	d00d      	beq.n	800d5a6 <put_fat+0xa4>
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	b25b      	sxtb	r3, r3
 800d590:	f003 030f 	and.w	r3, r3, #15
 800d594:	b25a      	sxtb	r2, r3
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	011b      	lsls	r3, r3, #4
 800d59c:	b25b      	sxtb	r3, r3
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	b25b      	sxtb	r3, r3
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	e001      	b.n	800d5aa <put_fat+0xa8>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	697a      	ldr	r2, [r7, #20]
 800d5ac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	2201      	movs	r2, #1
 800d5b2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	6a1a      	ldr	r2, [r3, #32]
 800d5b8:	69bb      	ldr	r3, [r7, #24]
 800d5ba:	0a5b      	lsrs	r3, r3, #9
 800d5bc:	4413      	add	r3, r2
 800d5be:	4619      	mov	r1, r3
 800d5c0:	68f8      	ldr	r0, [r7, #12]
 800d5c2:	f7ff fe3b 	bl	800d23c <move_window>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d5ca:	7ffb      	ldrb	r3, [r7, #31]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d17a      	bne.n	800d6c6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d5d6:	69bb      	ldr	r3, [r7, #24]
 800d5d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5dc:	4413      	add	r3, r2
 800d5de:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	f003 0301 	and.w	r3, r3, #1
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d003      	beq.n	800d5f2 <put_fat+0xf0>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	091b      	lsrs	r3, r3, #4
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	e00e      	b.n	800d610 <put_fat+0x10e>
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	b25b      	sxtb	r3, r3
 800d5f8:	f023 030f 	bic.w	r3, r3, #15
 800d5fc:	b25a      	sxtb	r2, r3
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	0a1b      	lsrs	r3, r3, #8
 800d602:	b25b      	sxtb	r3, r3
 800d604:	f003 030f 	and.w	r3, r3, #15
 800d608:	b25b      	sxtb	r3, r3
 800d60a:	4313      	orrs	r3, r2
 800d60c:	b25b      	sxtb	r3, r3
 800d60e:	b2db      	uxtb	r3, r3
 800d610:	697a      	ldr	r2, [r7, #20]
 800d612:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2201      	movs	r2, #1
 800d618:	70da      	strb	r2, [r3, #3]
			break;
 800d61a:	e059      	b.n	800d6d0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	6a1a      	ldr	r2, [r3, #32]
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	0a1b      	lsrs	r3, r3, #8
 800d624:	4413      	add	r3, r2
 800d626:	4619      	mov	r1, r3
 800d628:	68f8      	ldr	r0, [r7, #12]
 800d62a:	f7ff fe07 	bl	800d23c <move_window>
 800d62e:	4603      	mov	r3, r0
 800d630:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d632:	7ffb      	ldrb	r3, [r7, #31]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d148      	bne.n	800d6ca <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	005b      	lsls	r3, r3, #1
 800d642:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d646:	4413      	add	r3, r2
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	b292      	uxth	r2, r2
 800d64c:	4611      	mov	r1, r2
 800d64e:	4618      	mov	r0, r3
 800d650:	f7ff fb7f 	bl	800cd52 <st_word>
			fs->wflag = 1;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2201      	movs	r2, #1
 800d658:	70da      	strb	r2, [r3, #3]
			break;
 800d65a:	e039      	b.n	800d6d0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	6a1a      	ldr	r2, [r3, #32]
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	09db      	lsrs	r3, r3, #7
 800d664:	4413      	add	r3, r2
 800d666:	4619      	mov	r1, r3
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	f7ff fde7 	bl	800d23c <move_window>
 800d66e:	4603      	mov	r3, r0
 800d670:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d672:	7ffb      	ldrb	r3, [r7, #31]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d12a      	bne.n	800d6ce <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	009b      	lsls	r3, r3, #2
 800d688:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d68c:	4413      	add	r3, r2
 800d68e:	4618      	mov	r0, r3
 800d690:	f7ff fb3c 	bl	800cd0c <ld_dword>
 800d694:	4603      	mov	r3, r0
 800d696:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d69a:	4323      	orrs	r3, r4
 800d69c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d6ac:	4413      	add	r3, r2
 800d6ae:	6879      	ldr	r1, [r7, #4]
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7ff fb69 	bl	800cd88 <st_dword>
			fs->wflag = 1;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	70da      	strb	r2, [r3, #3]
			break;
 800d6bc:	e008      	b.n	800d6d0 <put_fat+0x1ce>
		}
	}
 800d6be:	bf00      	nop
 800d6c0:	e006      	b.n	800d6d0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d6c2:	bf00      	nop
 800d6c4:	e004      	b.n	800d6d0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d6c6:	bf00      	nop
 800d6c8:	e002      	b.n	800d6d0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d6ca:	bf00      	nop
 800d6cc:	e000      	b.n	800d6d0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d6ce:	bf00      	nop
	return res;
 800d6d0:	7ffb      	ldrb	r3, [r7, #31]
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3724      	adds	r7, #36	; 0x24
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd90      	pop	{r4, r7, pc}

0800d6da <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d6da:	b580      	push	{r7, lr}
 800d6dc:	b088      	sub	sp, #32
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	60f8      	str	r0, [r7, #12]
 800d6e2:	60b9      	str	r1, [r7, #8]
 800d6e4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	d904      	bls.n	800d700 <remove_chain+0x26>
 800d6f6:	69bb      	ldr	r3, [r7, #24]
 800d6f8:	695b      	ldr	r3, [r3, #20]
 800d6fa:	68ba      	ldr	r2, [r7, #8]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d301      	bcc.n	800d704 <remove_chain+0x2a>
 800d700:	2302      	movs	r3, #2
 800d702:	e04b      	b.n	800d79c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d00c      	beq.n	800d724 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d70a:	f04f 32ff 	mov.w	r2, #4294967295
 800d70e:	6879      	ldr	r1, [r7, #4]
 800d710:	69b8      	ldr	r0, [r7, #24]
 800d712:	f7ff fef6 	bl	800d502 <put_fat>
 800d716:	4603      	mov	r3, r0
 800d718:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d71a:	7ffb      	ldrb	r3, [r7, #31]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d001      	beq.n	800d724 <remove_chain+0x4a>
 800d720:	7ffb      	ldrb	r3, [r7, #31]
 800d722:	e03b      	b.n	800d79c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d724:	68b9      	ldr	r1, [r7, #8]
 800d726:	68f8      	ldr	r0, [r7, #12]
 800d728:	f7ff fe43 	bl	800d3b2 <get_fat>
 800d72c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d031      	beq.n	800d798 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	2b01      	cmp	r3, #1
 800d738:	d101      	bne.n	800d73e <remove_chain+0x64>
 800d73a:	2302      	movs	r3, #2
 800d73c:	e02e      	b.n	800d79c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d73e:	697b      	ldr	r3, [r7, #20]
 800d740:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d744:	d101      	bne.n	800d74a <remove_chain+0x70>
 800d746:	2301      	movs	r3, #1
 800d748:	e028      	b.n	800d79c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d74a:	2200      	movs	r2, #0
 800d74c:	68b9      	ldr	r1, [r7, #8]
 800d74e:	69b8      	ldr	r0, [r7, #24]
 800d750:	f7ff fed7 	bl	800d502 <put_fat>
 800d754:	4603      	mov	r3, r0
 800d756:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d758:	7ffb      	ldrb	r3, [r7, #31]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d001      	beq.n	800d762 <remove_chain+0x88>
 800d75e:	7ffb      	ldrb	r3, [r7, #31]
 800d760:	e01c      	b.n	800d79c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d762:	69bb      	ldr	r3, [r7, #24]
 800d764:	691a      	ldr	r2, [r3, #16]
 800d766:	69bb      	ldr	r3, [r7, #24]
 800d768:	695b      	ldr	r3, [r3, #20]
 800d76a:	3b02      	subs	r3, #2
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d20b      	bcs.n	800d788 <remove_chain+0xae>
			fs->free_clst++;
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	691b      	ldr	r3, [r3, #16]
 800d774:	1c5a      	adds	r2, r3, #1
 800d776:	69bb      	ldr	r3, [r7, #24]
 800d778:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	791b      	ldrb	r3, [r3, #4]
 800d77e:	f043 0301 	orr.w	r3, r3, #1
 800d782:	b2da      	uxtb	r2, r3
 800d784:	69bb      	ldr	r3, [r7, #24]
 800d786:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d78c:	69bb      	ldr	r3, [r7, #24]
 800d78e:	695b      	ldr	r3, [r3, #20]
 800d790:	68ba      	ldr	r2, [r7, #8]
 800d792:	429a      	cmp	r2, r3
 800d794:	d3c6      	bcc.n	800d724 <remove_chain+0x4a>
 800d796:	e000      	b.n	800d79a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d798:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d79a:	2300      	movs	r3, #0
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3720      	adds	r7, #32
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}

0800d7a4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b088      	sub	sp, #32
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d10d      	bne.n	800d7d6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	68db      	ldr	r3, [r3, #12]
 800d7be:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d7c0:	69bb      	ldr	r3, [r7, #24]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d004      	beq.n	800d7d0 <create_chain+0x2c>
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	695b      	ldr	r3, [r3, #20]
 800d7ca:	69ba      	ldr	r2, [r7, #24]
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d31b      	bcc.n	800d808 <create_chain+0x64>
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	61bb      	str	r3, [r7, #24]
 800d7d4:	e018      	b.n	800d808 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d7d6:	6839      	ldr	r1, [r7, #0]
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f7ff fdea 	bl	800d3b2 <get_fat>
 800d7de:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	d801      	bhi.n	800d7ea <create_chain+0x46>
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	e070      	b.n	800d8cc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7f0:	d101      	bne.n	800d7f6 <create_chain+0x52>
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	e06a      	b.n	800d8cc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	695b      	ldr	r3, [r3, #20]
 800d7fa:	68fa      	ldr	r2, [r7, #12]
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d201      	bcs.n	800d804 <create_chain+0x60>
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	e063      	b.n	800d8cc <create_chain+0x128>
		scl = clst;
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d808:	69bb      	ldr	r3, [r7, #24]
 800d80a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d80c:	69fb      	ldr	r3, [r7, #28]
 800d80e:	3301      	adds	r3, #1
 800d810:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	695b      	ldr	r3, [r3, #20]
 800d816:	69fa      	ldr	r2, [r7, #28]
 800d818:	429a      	cmp	r2, r3
 800d81a:	d307      	bcc.n	800d82c <create_chain+0x88>
				ncl = 2;
 800d81c:	2302      	movs	r3, #2
 800d81e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d820:	69fa      	ldr	r2, [r7, #28]
 800d822:	69bb      	ldr	r3, [r7, #24]
 800d824:	429a      	cmp	r2, r3
 800d826:	d901      	bls.n	800d82c <create_chain+0x88>
 800d828:	2300      	movs	r3, #0
 800d82a:	e04f      	b.n	800d8cc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d82c:	69f9      	ldr	r1, [r7, #28]
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f7ff fdbf 	bl	800d3b2 <get_fat>
 800d834:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d00e      	beq.n	800d85a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	2b01      	cmp	r3, #1
 800d840:	d003      	beq.n	800d84a <create_chain+0xa6>
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d848:	d101      	bne.n	800d84e <create_chain+0xaa>
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	e03e      	b.n	800d8cc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d84e:	69fa      	ldr	r2, [r7, #28]
 800d850:	69bb      	ldr	r3, [r7, #24]
 800d852:	429a      	cmp	r2, r3
 800d854:	d1da      	bne.n	800d80c <create_chain+0x68>
 800d856:	2300      	movs	r3, #0
 800d858:	e038      	b.n	800d8cc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d85a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d85c:	f04f 32ff 	mov.w	r2, #4294967295
 800d860:	69f9      	ldr	r1, [r7, #28]
 800d862:	6938      	ldr	r0, [r7, #16]
 800d864:	f7ff fe4d 	bl	800d502 <put_fat>
 800d868:	4603      	mov	r3, r0
 800d86a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d86c:	7dfb      	ldrb	r3, [r7, #23]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d109      	bne.n	800d886 <create_chain+0xe2>
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d006      	beq.n	800d886 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d878:	69fa      	ldr	r2, [r7, #28]
 800d87a:	6839      	ldr	r1, [r7, #0]
 800d87c:	6938      	ldr	r0, [r7, #16]
 800d87e:	f7ff fe40 	bl	800d502 <put_fat>
 800d882:	4603      	mov	r3, r0
 800d884:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d886:	7dfb      	ldrb	r3, [r7, #23]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d116      	bne.n	800d8ba <create_chain+0x116>
		fs->last_clst = ncl;
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	69fa      	ldr	r2, [r7, #28]
 800d890:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	691a      	ldr	r2, [r3, #16]
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	695b      	ldr	r3, [r3, #20]
 800d89a:	3b02      	subs	r3, #2
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d804      	bhi.n	800d8aa <create_chain+0x106>
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	691b      	ldr	r3, [r3, #16]
 800d8a4:	1e5a      	subs	r2, r3, #1
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	791b      	ldrb	r3, [r3, #4]
 800d8ae:	f043 0301 	orr.w	r3, r3, #1
 800d8b2:	b2da      	uxtb	r2, r3
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	711a      	strb	r2, [r3, #4]
 800d8b8:	e007      	b.n	800d8ca <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d8ba:	7dfb      	ldrb	r3, [r7, #23]
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	d102      	bne.n	800d8c6 <create_chain+0x122>
 800d8c0:	f04f 33ff 	mov.w	r3, #4294967295
 800d8c4:	e000      	b.n	800d8c8 <create_chain+0x124>
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d8ca:	69fb      	ldr	r3, [r7, #28]
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3720      	adds	r7, #32
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b087      	sub	sp, #28
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e8:	3304      	adds	r3, #4
 800d8ea:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	0a5b      	lsrs	r3, r3, #9
 800d8f0:	68fa      	ldr	r2, [r7, #12]
 800d8f2:	8952      	ldrh	r2, [r2, #10]
 800d8f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	1d1a      	adds	r2, r3, #4
 800d8fe:	613a      	str	r2, [r7, #16]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d101      	bne.n	800d90e <clmt_clust+0x3a>
 800d90a:	2300      	movs	r3, #0
 800d90c:	e010      	b.n	800d930 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d90e:	697a      	ldr	r2, [r7, #20]
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	429a      	cmp	r2, r3
 800d914:	d307      	bcc.n	800d926 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d916:	697a      	ldr	r2, [r7, #20]
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	1ad3      	subs	r3, r2, r3
 800d91c:	617b      	str	r3, [r7, #20]
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	3304      	adds	r3, #4
 800d922:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d924:	e7e9      	b.n	800d8fa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d926:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	4413      	add	r3, r2
}
 800d930:	4618      	mov	r0, r3
 800d932:	371c      	adds	r7, #28
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr

0800d93c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b086      	sub	sp, #24
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d952:	d204      	bcs.n	800d95e <dir_sdi+0x22>
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	f003 031f 	and.w	r3, r3, #31
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d001      	beq.n	800d962 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d95e:	2302      	movs	r3, #2
 800d960:	e063      	b.n	800da2a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	683a      	ldr	r2, [r7, #0]
 800d966:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	689b      	ldr	r3, [r3, #8]
 800d96c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d106      	bne.n	800d982 <dir_sdi+0x46>
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	2b02      	cmp	r3, #2
 800d97a:	d902      	bls.n	800d982 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d980:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d10c      	bne.n	800d9a2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	095b      	lsrs	r3, r3, #5
 800d98c:	693a      	ldr	r2, [r7, #16]
 800d98e:	8912      	ldrh	r2, [r2, #8]
 800d990:	4293      	cmp	r3, r2
 800d992:	d301      	bcc.n	800d998 <dir_sdi+0x5c>
 800d994:	2302      	movs	r3, #2
 800d996:	e048      	b.n	800da2a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	61da      	str	r2, [r3, #28]
 800d9a0:	e029      	b.n	800d9f6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	895b      	ldrh	r3, [r3, #10]
 800d9a6:	025b      	lsls	r3, r3, #9
 800d9a8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d9aa:	e019      	b.n	800d9e0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6979      	ldr	r1, [r7, #20]
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7ff fcfe 	bl	800d3b2 <get_fat>
 800d9b6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9be:	d101      	bne.n	800d9c4 <dir_sdi+0x88>
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	e032      	b.n	800da2a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	2b01      	cmp	r3, #1
 800d9c8:	d904      	bls.n	800d9d4 <dir_sdi+0x98>
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	695b      	ldr	r3, [r3, #20]
 800d9ce:	697a      	ldr	r2, [r7, #20]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d301      	bcc.n	800d9d8 <dir_sdi+0x9c>
 800d9d4:	2302      	movs	r3, #2
 800d9d6:	e028      	b.n	800da2a <dir_sdi+0xee>
			ofs -= csz;
 800d9d8:	683a      	ldr	r2, [r7, #0]
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	1ad3      	subs	r3, r2, r3
 800d9de:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d9e0:	683a      	ldr	r2, [r7, #0]
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d2e1      	bcs.n	800d9ac <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d9e8:	6979      	ldr	r1, [r7, #20]
 800d9ea:	6938      	ldr	r0, [r7, #16]
 800d9ec:	f7ff fcc2 	bl	800d374 <clust2sect>
 800d9f0:	4602      	mov	r2, r0
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	697a      	ldr	r2, [r7, #20]
 800d9fa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	69db      	ldr	r3, [r3, #28]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d101      	bne.n	800da08 <dir_sdi+0xcc>
 800da04:	2302      	movs	r3, #2
 800da06:	e010      	b.n	800da2a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	69da      	ldr	r2, [r3, #28]
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	0a5b      	lsrs	r3, r3, #9
 800da10:	441a      	add	r2, r3
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da22:	441a      	add	r2, r3
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800da28:	2300      	movs	r3, #0
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3718      	adds	r7, #24
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}

0800da32 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800da32:	b580      	push	{r7, lr}
 800da34:	b086      	sub	sp, #24
 800da36:	af00      	add	r7, sp, #0
 800da38:	6078      	str	r0, [r7, #4]
 800da3a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	695b      	ldr	r3, [r3, #20]
 800da46:	3320      	adds	r3, #32
 800da48:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	69db      	ldr	r3, [r3, #28]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d003      	beq.n	800da5a <dir_next+0x28>
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800da58:	d301      	bcc.n	800da5e <dir_next+0x2c>
 800da5a:	2304      	movs	r3, #4
 800da5c:	e0aa      	b.n	800dbb4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da64:	2b00      	cmp	r3, #0
 800da66:	f040 8098 	bne.w	800db9a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	69db      	ldr	r3, [r3, #28]
 800da6e:	1c5a      	adds	r2, r3, #1
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	699b      	ldr	r3, [r3, #24]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d10b      	bne.n	800da94 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	095b      	lsrs	r3, r3, #5
 800da80:	68fa      	ldr	r2, [r7, #12]
 800da82:	8912      	ldrh	r2, [r2, #8]
 800da84:	4293      	cmp	r3, r2
 800da86:	f0c0 8088 	bcc.w	800db9a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2200      	movs	r2, #0
 800da8e:	61da      	str	r2, [r3, #28]
 800da90:	2304      	movs	r3, #4
 800da92:	e08f      	b.n	800dbb4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	0a5b      	lsrs	r3, r3, #9
 800da98:	68fa      	ldr	r2, [r7, #12]
 800da9a:	8952      	ldrh	r2, [r2, #10]
 800da9c:	3a01      	subs	r2, #1
 800da9e:	4013      	ands	r3, r2
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d17a      	bne.n	800db9a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800daa4:	687a      	ldr	r2, [r7, #4]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	699b      	ldr	r3, [r3, #24]
 800daaa:	4619      	mov	r1, r3
 800daac:	4610      	mov	r0, r2
 800daae:	f7ff fc80 	bl	800d3b2 <get_fat>
 800dab2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	2b01      	cmp	r3, #1
 800dab8:	d801      	bhi.n	800dabe <dir_next+0x8c>
 800daba:	2302      	movs	r3, #2
 800dabc:	e07a      	b.n	800dbb4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dac4:	d101      	bne.n	800daca <dir_next+0x98>
 800dac6:	2301      	movs	r3, #1
 800dac8:	e074      	b.n	800dbb4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	695b      	ldr	r3, [r3, #20]
 800dace:	697a      	ldr	r2, [r7, #20]
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d358      	bcc.n	800db86 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d104      	bne.n	800dae4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2200      	movs	r2, #0
 800dade:	61da      	str	r2, [r3, #28]
 800dae0:	2304      	movs	r3, #4
 800dae2:	e067      	b.n	800dbb4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dae4:	687a      	ldr	r2, [r7, #4]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	699b      	ldr	r3, [r3, #24]
 800daea:	4619      	mov	r1, r3
 800daec:	4610      	mov	r0, r2
 800daee:	f7ff fe59 	bl	800d7a4 <create_chain>
 800daf2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d101      	bne.n	800dafe <dir_next+0xcc>
 800dafa:	2307      	movs	r3, #7
 800dafc:	e05a      	b.n	800dbb4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	2b01      	cmp	r3, #1
 800db02:	d101      	bne.n	800db08 <dir_next+0xd6>
 800db04:	2302      	movs	r3, #2
 800db06:	e055      	b.n	800dbb4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db0e:	d101      	bne.n	800db14 <dir_next+0xe2>
 800db10:	2301      	movs	r3, #1
 800db12:	e04f      	b.n	800dbb4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800db14:	68f8      	ldr	r0, [r7, #12]
 800db16:	f7ff fb4d 	bl	800d1b4 <sync_window>
 800db1a:	4603      	mov	r3, r0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d001      	beq.n	800db24 <dir_next+0xf2>
 800db20:	2301      	movs	r3, #1
 800db22:	e047      	b.n	800dbb4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	3330      	adds	r3, #48	; 0x30
 800db28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db2c:	2100      	movs	r1, #0
 800db2e:	4618      	mov	r0, r3
 800db30:	f7ff f977 	bl	800ce22 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db34:	2300      	movs	r3, #0
 800db36:	613b      	str	r3, [r7, #16]
 800db38:	6979      	ldr	r1, [r7, #20]
 800db3a:	68f8      	ldr	r0, [r7, #12]
 800db3c:	f7ff fc1a 	bl	800d374 <clust2sect>
 800db40:	4602      	mov	r2, r0
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	62da      	str	r2, [r3, #44]	; 0x2c
 800db46:	e012      	b.n	800db6e <dir_next+0x13c>
						fs->wflag = 1;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	2201      	movs	r2, #1
 800db4c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	f7ff fb30 	bl	800d1b4 <sync_window>
 800db54:	4603      	mov	r3, r0
 800db56:	2b00      	cmp	r3, #0
 800db58:	d001      	beq.n	800db5e <dir_next+0x12c>
 800db5a:	2301      	movs	r3, #1
 800db5c:	e02a      	b.n	800dbb4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	3301      	adds	r3, #1
 800db62:	613b      	str	r3, [r7, #16]
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db68:	1c5a      	adds	r2, r3, #1
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	62da      	str	r2, [r3, #44]	; 0x2c
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	895b      	ldrh	r3, [r3, #10]
 800db72:	461a      	mov	r2, r3
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	4293      	cmp	r3, r2
 800db78:	d3e6      	bcc.n	800db48 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	1ad2      	subs	r2, r2, r3
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	697a      	ldr	r2, [r7, #20]
 800db8a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800db8c:	6979      	ldr	r1, [r7, #20]
 800db8e:	68f8      	ldr	r0, [r7, #12]
 800db90:	f7ff fbf0 	bl	800d374 <clust2sect>
 800db94:	4602      	mov	r2, r0
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	68ba      	ldr	r2, [r7, #8]
 800db9e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbac:	441a      	add	r2, r3
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dbb2:	2300      	movs	r3, #0
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3718      	adds	r7, #24
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b086      	sub	sp, #24
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dbcc:	2100      	movs	r1, #0
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f7ff feb4 	bl	800d93c <dir_sdi>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dbd8:	7dfb      	ldrb	r3, [r7, #23]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d12b      	bne.n	800dc36 <dir_alloc+0x7a>
		n = 0;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	69db      	ldr	r3, [r3, #28]
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f7ff fb27 	bl	800d23c <move_window>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dbf2:	7dfb      	ldrb	r3, [r7, #23]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d11d      	bne.n	800dc34 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6a1b      	ldr	r3, [r3, #32]
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	2be5      	cmp	r3, #229	; 0xe5
 800dc00:	d004      	beq.n	800dc0c <dir_alloc+0x50>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6a1b      	ldr	r3, [r3, #32]
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d107      	bne.n	800dc1c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	3301      	adds	r3, #1
 800dc10:	613b      	str	r3, [r7, #16]
 800dc12:	693a      	ldr	r2, [r7, #16]
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d102      	bne.n	800dc20 <dir_alloc+0x64>
 800dc1a:	e00c      	b.n	800dc36 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dc20:	2101      	movs	r1, #1
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f7ff ff05 	bl	800da32 <dir_next>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dc2c:	7dfb      	ldrb	r3, [r7, #23]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d0d7      	beq.n	800dbe2 <dir_alloc+0x26>
 800dc32:	e000      	b.n	800dc36 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dc34:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dc36:	7dfb      	ldrb	r3, [r7, #23]
 800dc38:	2b04      	cmp	r3, #4
 800dc3a:	d101      	bne.n	800dc40 <dir_alloc+0x84>
 800dc3c:	2307      	movs	r3, #7
 800dc3e:	75fb      	strb	r3, [r7, #23]
	return res;
 800dc40:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3718      	adds	r7, #24
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}

0800dc4a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dc4a:	b580      	push	{r7, lr}
 800dc4c:	b084      	sub	sp, #16
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	6078      	str	r0, [r7, #4]
 800dc52:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	331a      	adds	r3, #26
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7ff f83f 	bl	800ccdc <ld_word>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	781b      	ldrb	r3, [r3, #0]
 800dc66:	2b03      	cmp	r3, #3
 800dc68:	d109      	bne.n	800dc7e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	3314      	adds	r3, #20
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7ff f834 	bl	800ccdc <ld_word>
 800dc74:	4603      	mov	r3, r0
 800dc76:	041b      	lsls	r3, r3, #16
 800dc78:	68fa      	ldr	r2, [r7, #12]
 800dc7a:	4313      	orrs	r3, r2
 800dc7c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3710      	adds	r7, #16
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	60f8      	str	r0, [r7, #12]
 800dc90:	60b9      	str	r1, [r7, #8]
 800dc92:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	331a      	adds	r3, #26
 800dc98:	687a      	ldr	r2, [r7, #4]
 800dc9a:	b292      	uxth	r2, r2
 800dc9c:	4611      	mov	r1, r2
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7ff f857 	bl	800cd52 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	2b03      	cmp	r3, #3
 800dcaa:	d109      	bne.n	800dcc0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	f103 0214 	add.w	r2, r3, #20
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	0c1b      	lsrs	r3, r3, #16
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	4619      	mov	r1, r3
 800dcba:	4610      	mov	r0, r2
 800dcbc:	f7ff f849 	bl	800cd52 <st_word>
	}
}
 800dcc0:	bf00      	nop
 800dcc2:	3710      	adds	r7, #16
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b086      	sub	sp, #24
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dcd6:	2100      	movs	r1, #0
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f7ff fe2f 	bl	800d93c <dir_sdi>
 800dcde:	4603      	mov	r3, r0
 800dce0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800dce2:	7dfb      	ldrb	r3, [r7, #23]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d001      	beq.n	800dcec <dir_find+0x24>
 800dce8:	7dfb      	ldrb	r3, [r7, #23]
 800dcea:	e03e      	b.n	800dd6a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	69db      	ldr	r3, [r3, #28]
 800dcf0:	4619      	mov	r1, r3
 800dcf2:	6938      	ldr	r0, [r7, #16]
 800dcf4:	f7ff faa2 	bl	800d23c <move_window>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dcfc:	7dfb      	ldrb	r3, [r7, #23]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d12f      	bne.n	800dd62 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6a1b      	ldr	r3, [r3, #32]
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dd0a:	7bfb      	ldrb	r3, [r7, #15]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d102      	bne.n	800dd16 <dir_find+0x4e>
 800dd10:	2304      	movs	r3, #4
 800dd12:	75fb      	strb	r3, [r7, #23]
 800dd14:	e028      	b.n	800dd68 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6a1b      	ldr	r3, [r3, #32]
 800dd1a:	330b      	adds	r3, #11
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd22:	b2da      	uxtb	r2, r3
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6a1b      	ldr	r3, [r3, #32]
 800dd2c:	330b      	adds	r3, #11
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	f003 0308 	and.w	r3, r3, #8
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d10a      	bne.n	800dd4e <dir_find+0x86>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6a18      	ldr	r0, [r3, #32]
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	3324      	adds	r3, #36	; 0x24
 800dd40:	220b      	movs	r2, #11
 800dd42:	4619      	mov	r1, r3
 800dd44:	f7ff f888 	bl	800ce58 <mem_cmp>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d00b      	beq.n	800dd66 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800dd4e:	2100      	movs	r1, #0
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f7ff fe6e 	bl	800da32 <dir_next>
 800dd56:	4603      	mov	r3, r0
 800dd58:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800dd5a:	7dfb      	ldrb	r3, [r7, #23]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d0c5      	beq.n	800dcec <dir_find+0x24>
 800dd60:	e002      	b.n	800dd68 <dir_find+0xa0>
		if (res != FR_OK) break;
 800dd62:	bf00      	nop
 800dd64:	e000      	b.n	800dd68 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dd66:	bf00      	nop

	return res;
 800dd68:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3718      	adds	r7, #24
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}

0800dd72 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800dd72:	b580      	push	{r7, lr}
 800dd74:	b084      	sub	sp, #16
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800dd80:	2101      	movs	r1, #1
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f7ff ff1a 	bl	800dbbc <dir_alloc>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dd8c:	7bfb      	ldrb	r3, [r7, #15]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d11c      	bne.n	800ddcc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	69db      	ldr	r3, [r3, #28]
 800dd96:	4619      	mov	r1, r3
 800dd98:	68b8      	ldr	r0, [r7, #8]
 800dd9a:	f7ff fa4f 	bl	800d23c <move_window>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dda2:	7bfb      	ldrb	r3, [r7, #15]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d111      	bne.n	800ddcc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6a1b      	ldr	r3, [r3, #32]
 800ddac:	2220      	movs	r2, #32
 800ddae:	2100      	movs	r1, #0
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7ff f836 	bl	800ce22 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6a18      	ldr	r0, [r3, #32]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	3324      	adds	r3, #36	; 0x24
 800ddbe:	220b      	movs	r2, #11
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	f7ff f80d 	bl	800cde0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	2201      	movs	r2, #1
 800ddca:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ddcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3710      	adds	r7, #16
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
	...

0800ddd8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b088      	sub	sp, #32
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	60fb      	str	r3, [r7, #12]
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	3324      	adds	r3, #36	; 0x24
 800ddec:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ddee:	220b      	movs	r2, #11
 800ddf0:	2120      	movs	r1, #32
 800ddf2:	68b8      	ldr	r0, [r7, #8]
 800ddf4:	f7ff f815 	bl	800ce22 <mem_set>
	si = i = 0; ni = 8;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	613b      	str	r3, [r7, #16]
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	61fb      	str	r3, [r7, #28]
 800de00:	2308      	movs	r3, #8
 800de02:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800de04:	69fb      	ldr	r3, [r7, #28]
 800de06:	1c5a      	adds	r2, r3, #1
 800de08:	61fa      	str	r2, [r7, #28]
 800de0a:	68fa      	ldr	r2, [r7, #12]
 800de0c:	4413      	add	r3, r2
 800de0e:	781b      	ldrb	r3, [r3, #0]
 800de10:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800de12:	7efb      	ldrb	r3, [r7, #27]
 800de14:	2b20      	cmp	r3, #32
 800de16:	d94e      	bls.n	800deb6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800de18:	7efb      	ldrb	r3, [r7, #27]
 800de1a:	2b2f      	cmp	r3, #47	; 0x2f
 800de1c:	d006      	beq.n	800de2c <create_name+0x54>
 800de1e:	7efb      	ldrb	r3, [r7, #27]
 800de20:	2b5c      	cmp	r3, #92	; 0x5c
 800de22:	d110      	bne.n	800de46 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800de24:	e002      	b.n	800de2c <create_name+0x54>
 800de26:	69fb      	ldr	r3, [r7, #28]
 800de28:	3301      	adds	r3, #1
 800de2a:	61fb      	str	r3, [r7, #28]
 800de2c:	68fa      	ldr	r2, [r7, #12]
 800de2e:	69fb      	ldr	r3, [r7, #28]
 800de30:	4413      	add	r3, r2
 800de32:	781b      	ldrb	r3, [r3, #0]
 800de34:	2b2f      	cmp	r3, #47	; 0x2f
 800de36:	d0f6      	beq.n	800de26 <create_name+0x4e>
 800de38:	68fa      	ldr	r2, [r7, #12]
 800de3a:	69fb      	ldr	r3, [r7, #28]
 800de3c:	4413      	add	r3, r2
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	2b5c      	cmp	r3, #92	; 0x5c
 800de42:	d0f0      	beq.n	800de26 <create_name+0x4e>
			break;
 800de44:	e038      	b.n	800deb8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800de46:	7efb      	ldrb	r3, [r7, #27]
 800de48:	2b2e      	cmp	r3, #46	; 0x2e
 800de4a:	d003      	beq.n	800de54 <create_name+0x7c>
 800de4c:	693a      	ldr	r2, [r7, #16]
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	429a      	cmp	r2, r3
 800de52:	d30c      	bcc.n	800de6e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	2b0b      	cmp	r3, #11
 800de58:	d002      	beq.n	800de60 <create_name+0x88>
 800de5a:	7efb      	ldrb	r3, [r7, #27]
 800de5c:	2b2e      	cmp	r3, #46	; 0x2e
 800de5e:	d001      	beq.n	800de64 <create_name+0x8c>
 800de60:	2306      	movs	r3, #6
 800de62:	e044      	b.n	800deee <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800de64:	2308      	movs	r3, #8
 800de66:	613b      	str	r3, [r7, #16]
 800de68:	230b      	movs	r3, #11
 800de6a:	617b      	str	r3, [r7, #20]
			continue;
 800de6c:	e022      	b.n	800deb4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800de6e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800de72:	2b00      	cmp	r3, #0
 800de74:	da04      	bge.n	800de80 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800de76:	7efb      	ldrb	r3, [r7, #27]
 800de78:	3b80      	subs	r3, #128	; 0x80
 800de7a:	4a1f      	ldr	r2, [pc, #124]	; (800def8 <create_name+0x120>)
 800de7c:	5cd3      	ldrb	r3, [r2, r3]
 800de7e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800de80:	7efb      	ldrb	r3, [r7, #27]
 800de82:	4619      	mov	r1, r3
 800de84:	481d      	ldr	r0, [pc, #116]	; (800defc <create_name+0x124>)
 800de86:	f7ff f80e 	bl	800cea6 <chk_chr>
 800de8a:	4603      	mov	r3, r0
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d001      	beq.n	800de94 <create_name+0xbc>
 800de90:	2306      	movs	r3, #6
 800de92:	e02c      	b.n	800deee <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800de94:	7efb      	ldrb	r3, [r7, #27]
 800de96:	2b60      	cmp	r3, #96	; 0x60
 800de98:	d905      	bls.n	800dea6 <create_name+0xce>
 800de9a:	7efb      	ldrb	r3, [r7, #27]
 800de9c:	2b7a      	cmp	r3, #122	; 0x7a
 800de9e:	d802      	bhi.n	800dea6 <create_name+0xce>
 800dea0:	7efb      	ldrb	r3, [r7, #27]
 800dea2:	3b20      	subs	r3, #32
 800dea4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	1c5a      	adds	r2, r3, #1
 800deaa:	613a      	str	r2, [r7, #16]
 800deac:	68ba      	ldr	r2, [r7, #8]
 800deae:	4413      	add	r3, r2
 800deb0:	7efa      	ldrb	r2, [r7, #27]
 800deb2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800deb4:	e7a6      	b.n	800de04 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800deb6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800deb8:	68fa      	ldr	r2, [r7, #12]
 800deba:	69fb      	ldr	r3, [r7, #28]
 800debc:	441a      	add	r2, r3
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d101      	bne.n	800decc <create_name+0xf4>
 800dec8:	2306      	movs	r3, #6
 800deca:	e010      	b.n	800deee <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	2be5      	cmp	r3, #229	; 0xe5
 800ded2:	d102      	bne.n	800deda <create_name+0x102>
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	2205      	movs	r2, #5
 800ded8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800deda:	7efb      	ldrb	r3, [r7, #27]
 800dedc:	2b20      	cmp	r3, #32
 800dede:	d801      	bhi.n	800dee4 <create_name+0x10c>
 800dee0:	2204      	movs	r2, #4
 800dee2:	e000      	b.n	800dee6 <create_name+0x10e>
 800dee4:	2200      	movs	r2, #0
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	330b      	adds	r3, #11
 800deea:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800deec:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800deee:	4618      	mov	r0, r3
 800def0:	3720      	adds	r7, #32
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
 800def6:	bf00      	nop
 800def8:	0800fc78 	.word	0x0800fc78
 800defc:	0800fba0 	.word	0x0800fba0

0800df00 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b086      	sub	sp, #24
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800df14:	e002      	b.n	800df1c <follow_path+0x1c>
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	3301      	adds	r3, #1
 800df1a:	603b      	str	r3, [r7, #0]
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	781b      	ldrb	r3, [r3, #0]
 800df20:	2b2f      	cmp	r3, #47	; 0x2f
 800df22:	d0f8      	beq.n	800df16 <follow_path+0x16>
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	2b5c      	cmp	r3, #92	; 0x5c
 800df2a:	d0f4      	beq.n	800df16 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	2200      	movs	r2, #0
 800df30:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	781b      	ldrb	r3, [r3, #0]
 800df36:	2b1f      	cmp	r3, #31
 800df38:	d80a      	bhi.n	800df50 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2280      	movs	r2, #128	; 0x80
 800df3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800df42:	2100      	movs	r1, #0
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f7ff fcf9 	bl	800d93c <dir_sdi>
 800df4a:	4603      	mov	r3, r0
 800df4c:	75fb      	strb	r3, [r7, #23]
 800df4e:	e043      	b.n	800dfd8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800df50:	463b      	mov	r3, r7
 800df52:	4619      	mov	r1, r3
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f7ff ff3f 	bl	800ddd8 <create_name>
 800df5a:	4603      	mov	r3, r0
 800df5c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800df5e:	7dfb      	ldrb	r3, [r7, #23]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d134      	bne.n	800dfce <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f7ff feaf 	bl	800dcc8 <dir_find>
 800df6a:	4603      	mov	r3, r0
 800df6c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800df74:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800df76:	7dfb      	ldrb	r3, [r7, #23]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d00a      	beq.n	800df92 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800df7c:	7dfb      	ldrb	r3, [r7, #23]
 800df7e:	2b04      	cmp	r3, #4
 800df80:	d127      	bne.n	800dfd2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800df82:	7afb      	ldrb	r3, [r7, #11]
 800df84:	f003 0304 	and.w	r3, r3, #4
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d122      	bne.n	800dfd2 <follow_path+0xd2>
 800df8c:	2305      	movs	r3, #5
 800df8e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800df90:	e01f      	b.n	800dfd2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800df92:	7afb      	ldrb	r3, [r7, #11]
 800df94:	f003 0304 	and.w	r3, r3, #4
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d11c      	bne.n	800dfd6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	799b      	ldrb	r3, [r3, #6]
 800dfa0:	f003 0310 	and.w	r3, r3, #16
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d102      	bne.n	800dfae <follow_path+0xae>
				res = FR_NO_PATH; break;
 800dfa8:	2305      	movs	r3, #5
 800dfaa:	75fb      	strb	r3, [r7, #23]
 800dfac:	e014      	b.n	800dfd8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	695b      	ldr	r3, [r3, #20]
 800dfb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfbc:	4413      	add	r3, r2
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	68f8      	ldr	r0, [r7, #12]
 800dfc2:	f7ff fe42 	bl	800dc4a <ld_clust>
 800dfc6:	4602      	mov	r2, r0
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dfcc:	e7c0      	b.n	800df50 <follow_path+0x50>
			if (res != FR_OK) break;
 800dfce:	bf00      	nop
 800dfd0:	e002      	b.n	800dfd8 <follow_path+0xd8>
				break;
 800dfd2:	bf00      	nop
 800dfd4:	e000      	b.n	800dfd8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dfd6:	bf00      	nop
			}
		}
	}

	return res;
 800dfd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3718      	adds	r7, #24
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}

0800dfe2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800dfe2:	b480      	push	{r7}
 800dfe4:	b087      	sub	sp, #28
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800dfea:	f04f 33ff 	mov.w	r3, #4294967295
 800dfee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d031      	beq.n	800e05c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	617b      	str	r3, [r7, #20]
 800dffe:	e002      	b.n	800e006 <get_ldnumber+0x24>
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	3301      	adds	r3, #1
 800e004:	617b      	str	r3, [r7, #20]
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	781b      	ldrb	r3, [r3, #0]
 800e00a:	2b20      	cmp	r3, #32
 800e00c:	d903      	bls.n	800e016 <get_ldnumber+0x34>
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	781b      	ldrb	r3, [r3, #0]
 800e012:	2b3a      	cmp	r3, #58	; 0x3a
 800e014:	d1f4      	bne.n	800e000 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	781b      	ldrb	r3, [r3, #0]
 800e01a:	2b3a      	cmp	r3, #58	; 0x3a
 800e01c:	d11c      	bne.n	800e058 <get_ldnumber+0x76>
			tp = *path;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	1c5a      	adds	r2, r3, #1
 800e028:	60fa      	str	r2, [r7, #12]
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	3b30      	subs	r3, #48	; 0x30
 800e02e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	2b09      	cmp	r3, #9
 800e034:	d80e      	bhi.n	800e054 <get_ldnumber+0x72>
 800e036:	68fa      	ldr	r2, [r7, #12]
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	429a      	cmp	r2, r3
 800e03c:	d10a      	bne.n	800e054 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d107      	bne.n	800e054 <get_ldnumber+0x72>
					vol = (int)i;
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	3301      	adds	r3, #1
 800e04c:	617b      	str	r3, [r7, #20]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	697a      	ldr	r2, [r7, #20]
 800e052:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	e002      	b.n	800e05e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e058:	2300      	movs	r3, #0
 800e05a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e05c:	693b      	ldr	r3, [r7, #16]
}
 800e05e:	4618      	mov	r0, r3
 800e060:	371c      	adds	r7, #28
 800e062:	46bd      	mov	sp, r7
 800e064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e068:	4770      	bx	lr
	...

0800e06c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b082      	sub	sp, #8
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2200      	movs	r2, #0
 800e07a:	70da      	strb	r2, [r3, #3]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f04f 32ff 	mov.w	r2, #4294967295
 800e082:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e084:	6839      	ldr	r1, [r7, #0]
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f7ff f8d8 	bl	800d23c <move_window>
 800e08c:	4603      	mov	r3, r0
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d001      	beq.n	800e096 <check_fs+0x2a>
 800e092:	2304      	movs	r3, #4
 800e094:	e038      	b.n	800e108 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	3330      	adds	r3, #48	; 0x30
 800e09a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7fe fe1c 	bl	800ccdc <ld_word>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	461a      	mov	r2, r3
 800e0a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d001      	beq.n	800e0b4 <check_fs+0x48>
 800e0b0:	2303      	movs	r3, #3
 800e0b2:	e029      	b.n	800e108 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0ba:	2be9      	cmp	r3, #233	; 0xe9
 800e0bc:	d009      	beq.n	800e0d2 <check_fs+0x66>
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0c4:	2beb      	cmp	r3, #235	; 0xeb
 800e0c6:	d11e      	bne.n	800e106 <check_fs+0x9a>
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e0ce:	2b90      	cmp	r3, #144	; 0x90
 800e0d0:	d119      	bne.n	800e106 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	3330      	adds	r3, #48	; 0x30
 800e0d6:	3336      	adds	r3, #54	; 0x36
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f7fe fe17 	bl	800cd0c <ld_dword>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e0e4:	4a0a      	ldr	r2, [pc, #40]	; (800e110 <check_fs+0xa4>)
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	d101      	bne.n	800e0ee <check_fs+0x82>
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	e00c      	b.n	800e108 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	3330      	adds	r3, #48	; 0x30
 800e0f2:	3352      	adds	r3, #82	; 0x52
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7fe fe09 	bl	800cd0c <ld_dword>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	4a05      	ldr	r2, [pc, #20]	; (800e114 <check_fs+0xa8>)
 800e0fe:	4293      	cmp	r3, r2
 800e100:	d101      	bne.n	800e106 <check_fs+0x9a>
 800e102:	2300      	movs	r3, #0
 800e104:	e000      	b.n	800e108 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e106:	2302      	movs	r3, #2
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3708      	adds	r7, #8
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}
 800e110:	00544146 	.word	0x00544146
 800e114:	33544146 	.word	0x33544146

0800e118 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b096      	sub	sp, #88	; 0x58
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	60f8      	str	r0, [r7, #12]
 800e120:	60b9      	str	r1, [r7, #8]
 800e122:	4613      	mov	r3, r2
 800e124:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	2200      	movs	r2, #0
 800e12a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e12c:	68f8      	ldr	r0, [r7, #12]
 800e12e:	f7ff ff58 	bl	800dfe2 <get_ldnumber>
 800e132:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e136:	2b00      	cmp	r3, #0
 800e138:	da01      	bge.n	800e13e <find_volume+0x26>
 800e13a:	230b      	movs	r3, #11
 800e13c:	e22d      	b.n	800e59a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e13e:	4aa1      	ldr	r2, [pc, #644]	; (800e3c4 <find_volume+0x2ac>)
 800e140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e146:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d101      	bne.n	800e152 <find_volume+0x3a>
 800e14e:	230c      	movs	r3, #12
 800e150:	e223      	b.n	800e59a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e156:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e158:	79fb      	ldrb	r3, [r7, #7]
 800e15a:	f023 0301 	bic.w	r3, r3, #1
 800e15e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d01a      	beq.n	800e19e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e16a:	785b      	ldrb	r3, [r3, #1]
 800e16c:	4618      	mov	r0, r3
 800e16e:	f7fe fd17 	bl	800cba0 <disk_status>
 800e172:	4603      	mov	r3, r0
 800e174:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e178:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e17c:	f003 0301 	and.w	r3, r3, #1
 800e180:	2b00      	cmp	r3, #0
 800e182:	d10c      	bne.n	800e19e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e184:	79fb      	ldrb	r3, [r7, #7]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d007      	beq.n	800e19a <find_volume+0x82>
 800e18a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e18e:	f003 0304 	and.w	r3, r3, #4
 800e192:	2b00      	cmp	r3, #0
 800e194:	d001      	beq.n	800e19a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e196:	230a      	movs	r3, #10
 800e198:	e1ff      	b.n	800e59a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e19a:	2300      	movs	r3, #0
 800e19c:	e1fd      	b.n	800e59a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1a6:	b2da      	uxtb	r2, r3
 800e1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ae:	785b      	ldrb	r3, [r3, #1]
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	f7fe fd0f 	bl	800cbd4 <disk_initialize>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e1bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1c0:	f003 0301 	and.w	r3, r3, #1
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d001      	beq.n	800e1cc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e1c8:	2303      	movs	r3, #3
 800e1ca:	e1e6      	b.n	800e59a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e1cc:	79fb      	ldrb	r3, [r7, #7]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d007      	beq.n	800e1e2 <find_volume+0xca>
 800e1d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1d6:	f003 0304 	and.w	r3, r3, #4
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d001      	beq.n	800e1e2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e1de:	230a      	movs	r3, #10
 800e1e0:	e1db      	b.n	800e59a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e1e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e1e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e1ea:	f7ff ff3f 	bl	800e06c <check_fs>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e1f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e1f8:	2b02      	cmp	r3, #2
 800e1fa:	d149      	bne.n	800e290 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	643b      	str	r3, [r7, #64]	; 0x40
 800e200:	e01e      	b.n	800e240 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e204:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e20a:	011b      	lsls	r3, r3, #4
 800e20c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e210:	4413      	add	r3, r2
 800e212:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e216:	3304      	adds	r3, #4
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d006      	beq.n	800e22c <find_volume+0x114>
 800e21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e220:	3308      	adds	r3, #8
 800e222:	4618      	mov	r0, r3
 800e224:	f7fe fd72 	bl	800cd0c <ld_dword>
 800e228:	4602      	mov	r2, r0
 800e22a:	e000      	b.n	800e22e <find_volume+0x116>
 800e22c:	2200      	movs	r2, #0
 800e22e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e230:	009b      	lsls	r3, r3, #2
 800e232:	3358      	adds	r3, #88	; 0x58
 800e234:	443b      	add	r3, r7
 800e236:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e23a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e23c:	3301      	adds	r3, #1
 800e23e:	643b      	str	r3, [r7, #64]	; 0x40
 800e240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e242:	2b03      	cmp	r3, #3
 800e244:	d9dd      	bls.n	800e202 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e246:	2300      	movs	r3, #0
 800e248:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e24a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d002      	beq.n	800e256 <find_volume+0x13e>
 800e250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e252:	3b01      	subs	r3, #1
 800e254:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e258:	009b      	lsls	r3, r3, #2
 800e25a:	3358      	adds	r3, #88	; 0x58
 800e25c:	443b      	add	r3, r7
 800e25e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e262:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e266:	2b00      	cmp	r3, #0
 800e268:	d005      	beq.n	800e276 <find_volume+0x15e>
 800e26a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e26c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e26e:	f7ff fefd 	bl	800e06c <check_fs>
 800e272:	4603      	mov	r3, r0
 800e274:	e000      	b.n	800e278 <find_volume+0x160>
 800e276:	2303      	movs	r3, #3
 800e278:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e27c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e280:	2b01      	cmp	r3, #1
 800e282:	d905      	bls.n	800e290 <find_volume+0x178>
 800e284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e286:	3301      	adds	r3, #1
 800e288:	643b      	str	r3, [r7, #64]	; 0x40
 800e28a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e28c:	2b03      	cmp	r3, #3
 800e28e:	d9e2      	bls.n	800e256 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e290:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e294:	2b04      	cmp	r3, #4
 800e296:	d101      	bne.n	800e29c <find_volume+0x184>
 800e298:	2301      	movs	r3, #1
 800e29a:	e17e      	b.n	800e59a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e29c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e2a0:	2b01      	cmp	r3, #1
 800e2a2:	d901      	bls.n	800e2a8 <find_volume+0x190>
 800e2a4:	230d      	movs	r3, #13
 800e2a6:	e178      	b.n	800e59a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2aa:	3330      	adds	r3, #48	; 0x30
 800e2ac:	330b      	adds	r3, #11
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f7fe fd14 	bl	800ccdc <ld_word>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2ba:	d001      	beq.n	800e2c0 <find_volume+0x1a8>
 800e2bc:	230d      	movs	r3, #13
 800e2be:	e16c      	b.n	800e59a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c2:	3330      	adds	r3, #48	; 0x30
 800e2c4:	3316      	adds	r3, #22
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7fe fd08 	bl	800ccdc <ld_word>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e2d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d106      	bne.n	800e2e4 <find_volume+0x1cc>
 800e2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d8:	3330      	adds	r3, #48	; 0x30
 800e2da:	3324      	adds	r3, #36	; 0x24
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f7fe fd15 	bl	800cd0c <ld_dword>
 800e2e2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e2e8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ec:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800e2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f6:	789b      	ldrb	r3, [r3, #2]
 800e2f8:	2b01      	cmp	r3, #1
 800e2fa:	d005      	beq.n	800e308 <find_volume+0x1f0>
 800e2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fe:	789b      	ldrb	r3, [r3, #2]
 800e300:	2b02      	cmp	r3, #2
 800e302:	d001      	beq.n	800e308 <find_volume+0x1f0>
 800e304:	230d      	movs	r3, #13
 800e306:	e148      	b.n	800e59a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30a:	789b      	ldrb	r3, [r3, #2]
 800e30c:	461a      	mov	r2, r3
 800e30e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e310:	fb02 f303 	mul.w	r3, r2, r3
 800e314:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e31c:	b29a      	uxth	r2, r3
 800e31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e320:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e324:	895b      	ldrh	r3, [r3, #10]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d008      	beq.n	800e33c <find_volume+0x224>
 800e32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e32c:	895b      	ldrh	r3, [r3, #10]
 800e32e:	461a      	mov	r2, r3
 800e330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e332:	895b      	ldrh	r3, [r3, #10]
 800e334:	3b01      	subs	r3, #1
 800e336:	4013      	ands	r3, r2
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d001      	beq.n	800e340 <find_volume+0x228>
 800e33c:	230d      	movs	r3, #13
 800e33e:	e12c      	b.n	800e59a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e342:	3330      	adds	r3, #48	; 0x30
 800e344:	3311      	adds	r3, #17
 800e346:	4618      	mov	r0, r3
 800e348:	f7fe fcc8 	bl	800ccdc <ld_word>
 800e34c:	4603      	mov	r3, r0
 800e34e:	461a      	mov	r2, r3
 800e350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e352:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e356:	891b      	ldrh	r3, [r3, #8]
 800e358:	f003 030f 	and.w	r3, r3, #15
 800e35c:	b29b      	uxth	r3, r3
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d001      	beq.n	800e366 <find_volume+0x24e>
 800e362:	230d      	movs	r3, #13
 800e364:	e119      	b.n	800e59a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e368:	3330      	adds	r3, #48	; 0x30
 800e36a:	3313      	adds	r3, #19
 800e36c:	4618      	mov	r0, r3
 800e36e:	f7fe fcb5 	bl	800ccdc <ld_word>
 800e372:	4603      	mov	r3, r0
 800e374:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d106      	bne.n	800e38a <find_volume+0x272>
 800e37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e37e:	3330      	adds	r3, #48	; 0x30
 800e380:	3320      	adds	r3, #32
 800e382:	4618      	mov	r0, r3
 800e384:	f7fe fcc2 	bl	800cd0c <ld_dword>
 800e388:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e38c:	3330      	adds	r3, #48	; 0x30
 800e38e:	330e      	adds	r3, #14
 800e390:	4618      	mov	r0, r3
 800e392:	f7fe fca3 	bl	800ccdc <ld_word>
 800e396:	4603      	mov	r3, r0
 800e398:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e39a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d101      	bne.n	800e3a4 <find_volume+0x28c>
 800e3a0:	230d      	movs	r3, #13
 800e3a2:	e0fa      	b.n	800e59a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e3a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e3a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3a8:	4413      	add	r3, r2
 800e3aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e3ac:	8912      	ldrh	r2, [r2, #8]
 800e3ae:	0912      	lsrs	r2, r2, #4
 800e3b0:	b292      	uxth	r2, r2
 800e3b2:	4413      	add	r3, r2
 800e3b4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e3b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d204      	bcs.n	800e3c8 <find_volume+0x2b0>
 800e3be:	230d      	movs	r3, #13
 800e3c0:	e0eb      	b.n	800e59a <find_volume+0x482>
 800e3c2:	bf00      	nop
 800e3c4:	2000174c 	.word	0x2000174c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e3c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3cc:	1ad3      	subs	r3, r2, r3
 800e3ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e3d0:	8952      	ldrh	r2, [r2, #10]
 800e3d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3d6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d101      	bne.n	800e3e2 <find_volume+0x2ca>
 800e3de:	230d      	movs	r3, #13
 800e3e0:	e0db      	b.n	800e59a <find_volume+0x482>
		fmt = FS_FAT32;
 800e3e2:	2303      	movs	r3, #3
 800e3e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ea:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	d802      	bhi.n	800e3f8 <find_volume+0x2e0>
 800e3f2:	2302      	movs	r3, #2
 800e3f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fa:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e3fe:	4293      	cmp	r3, r2
 800e400:	d802      	bhi.n	800e408 <find_volume+0x2f0>
 800e402:	2301      	movs	r3, #1
 800e404:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40a:	1c9a      	adds	r2, r3, #2
 800e40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e40e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e412:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e414:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e416:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e41a:	441a      	add	r2, r3
 800e41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e420:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e424:	441a      	add	r2, r3
 800e426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e428:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800e42a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e42e:	2b03      	cmp	r3, #3
 800e430:	d11e      	bne.n	800e470 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e434:	3330      	adds	r3, #48	; 0x30
 800e436:	332a      	adds	r3, #42	; 0x2a
 800e438:	4618      	mov	r0, r3
 800e43a:	f7fe fc4f 	bl	800ccdc <ld_word>
 800e43e:	4603      	mov	r3, r0
 800e440:	2b00      	cmp	r3, #0
 800e442:	d001      	beq.n	800e448 <find_volume+0x330>
 800e444:	230d      	movs	r3, #13
 800e446:	e0a8      	b.n	800e59a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e44a:	891b      	ldrh	r3, [r3, #8]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d001      	beq.n	800e454 <find_volume+0x33c>
 800e450:	230d      	movs	r3, #13
 800e452:	e0a2      	b.n	800e59a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e456:	3330      	adds	r3, #48	; 0x30
 800e458:	332c      	adds	r3, #44	; 0x2c
 800e45a:	4618      	mov	r0, r3
 800e45c:	f7fe fc56 	bl	800cd0c <ld_dword>
 800e460:	4602      	mov	r2, r0
 800e462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e464:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e468:	695b      	ldr	r3, [r3, #20]
 800e46a:	009b      	lsls	r3, r3, #2
 800e46c:	647b      	str	r3, [r7, #68]	; 0x44
 800e46e:	e01f      	b.n	800e4b0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e472:	891b      	ldrh	r3, [r3, #8]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d101      	bne.n	800e47c <find_volume+0x364>
 800e478:	230d      	movs	r3, #13
 800e47a:	e08e      	b.n	800e59a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47e:	6a1a      	ldr	r2, [r3, #32]
 800e480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e482:	441a      	add	r2, r3
 800e484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e486:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e488:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e48c:	2b02      	cmp	r3, #2
 800e48e:	d103      	bne.n	800e498 <find_volume+0x380>
 800e490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e492:	695b      	ldr	r3, [r3, #20]
 800e494:	005b      	lsls	r3, r3, #1
 800e496:	e00a      	b.n	800e4ae <find_volume+0x396>
 800e498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e49a:	695a      	ldr	r2, [r3, #20]
 800e49c:	4613      	mov	r3, r2
 800e49e:	005b      	lsls	r3, r3, #1
 800e4a0:	4413      	add	r3, r2
 800e4a2:	085a      	lsrs	r2, r3, #1
 800e4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a6:	695b      	ldr	r3, [r3, #20]
 800e4a8:	f003 0301 	and.w	r3, r3, #1
 800e4ac:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e4ae:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b2:	699a      	ldr	r2, [r3, #24]
 800e4b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4b6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e4ba:	0a5b      	lsrs	r3, r3, #9
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d201      	bcs.n	800e4c4 <find_volume+0x3ac>
 800e4c0:	230d      	movs	r3, #13
 800e4c2:	e06a      	b.n	800e59a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c6:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ca:	611a      	str	r2, [r3, #16]
 800e4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ce:	691a      	ldr	r2, [r3, #16]
 800e4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d6:	2280      	movs	r2, #128	; 0x80
 800e4d8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e4da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e4de:	2b03      	cmp	r3, #3
 800e4e0:	d149      	bne.n	800e576 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e4:	3330      	adds	r3, #48	; 0x30
 800e4e6:	3330      	adds	r3, #48	; 0x30
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f7fe fbf7 	bl	800ccdc <ld_word>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	2b01      	cmp	r3, #1
 800e4f2:	d140      	bne.n	800e576 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e4f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4f6:	3301      	adds	r3, #1
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e4fc:	f7fe fe9e 	bl	800d23c <move_window>
 800e500:	4603      	mov	r3, r0
 800e502:	2b00      	cmp	r3, #0
 800e504:	d137      	bne.n	800e576 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e508:	2200      	movs	r2, #0
 800e50a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e50e:	3330      	adds	r3, #48	; 0x30
 800e510:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e514:	4618      	mov	r0, r3
 800e516:	f7fe fbe1 	bl	800ccdc <ld_word>
 800e51a:	4603      	mov	r3, r0
 800e51c:	461a      	mov	r2, r3
 800e51e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e522:	429a      	cmp	r2, r3
 800e524:	d127      	bne.n	800e576 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e528:	3330      	adds	r3, #48	; 0x30
 800e52a:	4618      	mov	r0, r3
 800e52c:	f7fe fbee 	bl	800cd0c <ld_dword>
 800e530:	4603      	mov	r3, r0
 800e532:	4a1c      	ldr	r2, [pc, #112]	; (800e5a4 <find_volume+0x48c>)
 800e534:	4293      	cmp	r3, r2
 800e536:	d11e      	bne.n	800e576 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e53a:	3330      	adds	r3, #48	; 0x30
 800e53c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e540:	4618      	mov	r0, r3
 800e542:	f7fe fbe3 	bl	800cd0c <ld_dword>
 800e546:	4603      	mov	r3, r0
 800e548:	4a17      	ldr	r2, [pc, #92]	; (800e5a8 <find_volume+0x490>)
 800e54a:	4293      	cmp	r3, r2
 800e54c:	d113      	bne.n	800e576 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e550:	3330      	adds	r3, #48	; 0x30
 800e552:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e556:	4618      	mov	r0, r3
 800e558:	f7fe fbd8 	bl	800cd0c <ld_dword>
 800e55c:	4602      	mov	r2, r0
 800e55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e560:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e564:	3330      	adds	r3, #48	; 0x30
 800e566:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e56a:	4618      	mov	r0, r3
 800e56c:	f7fe fbce 	bl	800cd0c <ld_dword>
 800e570:	4602      	mov	r2, r0
 800e572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e574:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e578:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e57c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e57e:	4b0b      	ldr	r3, [pc, #44]	; (800e5ac <find_volume+0x494>)
 800e580:	881b      	ldrh	r3, [r3, #0]
 800e582:	3301      	adds	r3, #1
 800e584:	b29a      	uxth	r2, r3
 800e586:	4b09      	ldr	r3, [pc, #36]	; (800e5ac <find_volume+0x494>)
 800e588:	801a      	strh	r2, [r3, #0]
 800e58a:	4b08      	ldr	r3, [pc, #32]	; (800e5ac <find_volume+0x494>)
 800e58c:	881a      	ldrh	r2, [r3, #0]
 800e58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e590:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e592:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e594:	f7fe fdea 	bl	800d16c <clear_lock>
#endif
	return FR_OK;
 800e598:	2300      	movs	r3, #0
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3758      	adds	r7, #88	; 0x58
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}
 800e5a2:	bf00      	nop
 800e5a4:	41615252 	.word	0x41615252
 800e5a8:	61417272 	.word	0x61417272
 800e5ac:	20001750 	.word	0x20001750

0800e5b0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b084      	sub	sp, #16
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
 800e5b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e5ba:	2309      	movs	r3, #9
 800e5bc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d01c      	beq.n	800e5fe <validate+0x4e>
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d018      	beq.n	800e5fe <validate+0x4e>
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	781b      	ldrb	r3, [r3, #0]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d013      	beq.n	800e5fe <validate+0x4e>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	889a      	ldrh	r2, [r3, #4]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	88db      	ldrh	r3, [r3, #6]
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d10c      	bne.n	800e5fe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	785b      	ldrb	r3, [r3, #1]
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f7fe fad8 	bl	800cba0 <disk_status>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	f003 0301 	and.w	r3, r3, #1
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d101      	bne.n	800e5fe <validate+0x4e>
			res = FR_OK;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e5fe:	7bfb      	ldrb	r3, [r7, #15]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d102      	bne.n	800e60a <validate+0x5a>
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	e000      	b.n	800e60c <validate+0x5c>
 800e60a:	2300      	movs	r3, #0
 800e60c:	683a      	ldr	r2, [r7, #0]
 800e60e:	6013      	str	r3, [r2, #0]
	return res;
 800e610:	7bfb      	ldrb	r3, [r7, #15]
}
 800e612:	4618      	mov	r0, r3
 800e614:	3710      	adds	r7, #16
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
	...

0800e61c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b088      	sub	sp, #32
 800e620:	af00      	add	r7, sp, #0
 800e622:	60f8      	str	r0, [r7, #12]
 800e624:	60b9      	str	r1, [r7, #8]
 800e626:	4613      	mov	r3, r2
 800e628:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e62e:	f107 0310 	add.w	r3, r7, #16
 800e632:	4618      	mov	r0, r3
 800e634:	f7ff fcd5 	bl	800dfe2 <get_ldnumber>
 800e638:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e63a:	69fb      	ldr	r3, [r7, #28]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	da01      	bge.n	800e644 <f_mount+0x28>
 800e640:	230b      	movs	r3, #11
 800e642:	e02b      	b.n	800e69c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e644:	4a17      	ldr	r2, [pc, #92]	; (800e6a4 <f_mount+0x88>)
 800e646:	69fb      	ldr	r3, [r7, #28]
 800e648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e64c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e64e:	69bb      	ldr	r3, [r7, #24]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d005      	beq.n	800e660 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e654:	69b8      	ldr	r0, [r7, #24]
 800e656:	f7fe fd89 	bl	800d16c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e65a:	69bb      	ldr	r3, [r7, #24]
 800e65c:	2200      	movs	r2, #0
 800e65e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d002      	beq.n	800e66c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2200      	movs	r2, #0
 800e66a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e66c:	68fa      	ldr	r2, [r7, #12]
 800e66e:	490d      	ldr	r1, [pc, #52]	; (800e6a4 <f_mount+0x88>)
 800e670:	69fb      	ldr	r3, [r7, #28]
 800e672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d002      	beq.n	800e682 <f_mount+0x66>
 800e67c:	79fb      	ldrb	r3, [r7, #7]
 800e67e:	2b01      	cmp	r3, #1
 800e680:	d001      	beq.n	800e686 <f_mount+0x6a>
 800e682:	2300      	movs	r3, #0
 800e684:	e00a      	b.n	800e69c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e686:	f107 010c 	add.w	r1, r7, #12
 800e68a:	f107 0308 	add.w	r3, r7, #8
 800e68e:	2200      	movs	r2, #0
 800e690:	4618      	mov	r0, r3
 800e692:	f7ff fd41 	bl	800e118 <find_volume>
 800e696:	4603      	mov	r3, r0
 800e698:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e69a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3720      	adds	r7, #32
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}
 800e6a4:	2000174c 	.word	0x2000174c

0800e6a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b098      	sub	sp, #96	; 0x60
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	60f8      	str	r0, [r7, #12]
 800e6b0:	60b9      	str	r1, [r7, #8]
 800e6b2:	4613      	mov	r3, r2
 800e6b4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d101      	bne.n	800e6c0 <f_open+0x18>
 800e6bc:	2309      	movs	r3, #9
 800e6be:	e1ad      	b.n	800ea1c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e6c0:	79fb      	ldrb	r3, [r7, #7]
 800e6c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e6c6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e6c8:	79fa      	ldrb	r2, [r7, #7]
 800e6ca:	f107 0110 	add.w	r1, r7, #16
 800e6ce:	f107 0308 	add.w	r3, r7, #8
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7ff fd20 	bl	800e118 <find_volume>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800e6de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	f040 8191 	bne.w	800ea0a <f_open+0x362>
		dj.obj.fs = fs;
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e6ec:	68ba      	ldr	r2, [r7, #8]
 800e6ee:	f107 0314 	add.w	r3, r7, #20
 800e6f2:	4611      	mov	r1, r2
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f7ff fc03 	bl	800df00 <follow_path>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e700:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e704:	2b00      	cmp	r3, #0
 800e706:	d11a      	bne.n	800e73e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e708:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e70c:	b25b      	sxtb	r3, r3
 800e70e:	2b00      	cmp	r3, #0
 800e710:	da03      	bge.n	800e71a <f_open+0x72>
				res = FR_INVALID_NAME;
 800e712:	2306      	movs	r3, #6
 800e714:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e718:	e011      	b.n	800e73e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e71a:	79fb      	ldrb	r3, [r7, #7]
 800e71c:	f023 0301 	bic.w	r3, r3, #1
 800e720:	2b00      	cmp	r3, #0
 800e722:	bf14      	ite	ne
 800e724:	2301      	movne	r3, #1
 800e726:	2300      	moveq	r3, #0
 800e728:	b2db      	uxtb	r3, r3
 800e72a:	461a      	mov	r2, r3
 800e72c:	f107 0314 	add.w	r3, r7, #20
 800e730:	4611      	mov	r1, r2
 800e732:	4618      	mov	r0, r3
 800e734:	f7fe fbd2 	bl	800cedc <chk_lock>
 800e738:	4603      	mov	r3, r0
 800e73a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e73e:	79fb      	ldrb	r3, [r7, #7]
 800e740:	f003 031c 	and.w	r3, r3, #28
 800e744:	2b00      	cmp	r3, #0
 800e746:	d07f      	beq.n	800e848 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e748:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d017      	beq.n	800e780 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e750:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e754:	2b04      	cmp	r3, #4
 800e756:	d10e      	bne.n	800e776 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e758:	f7fe fc1c 	bl	800cf94 <enq_lock>
 800e75c:	4603      	mov	r3, r0
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d006      	beq.n	800e770 <f_open+0xc8>
 800e762:	f107 0314 	add.w	r3, r7, #20
 800e766:	4618      	mov	r0, r3
 800e768:	f7ff fb03 	bl	800dd72 <dir_register>
 800e76c:	4603      	mov	r3, r0
 800e76e:	e000      	b.n	800e772 <f_open+0xca>
 800e770:	2312      	movs	r3, #18
 800e772:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e776:	79fb      	ldrb	r3, [r7, #7]
 800e778:	f043 0308 	orr.w	r3, r3, #8
 800e77c:	71fb      	strb	r3, [r7, #7]
 800e77e:	e010      	b.n	800e7a2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e780:	7ebb      	ldrb	r3, [r7, #26]
 800e782:	f003 0311 	and.w	r3, r3, #17
 800e786:	2b00      	cmp	r3, #0
 800e788:	d003      	beq.n	800e792 <f_open+0xea>
					res = FR_DENIED;
 800e78a:	2307      	movs	r3, #7
 800e78c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e790:	e007      	b.n	800e7a2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e792:	79fb      	ldrb	r3, [r7, #7]
 800e794:	f003 0304 	and.w	r3, r3, #4
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d002      	beq.n	800e7a2 <f_open+0xfa>
 800e79c:	2308      	movs	r3, #8
 800e79e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e7a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d168      	bne.n	800e87c <f_open+0x1d4>
 800e7aa:	79fb      	ldrb	r3, [r7, #7]
 800e7ac:	f003 0308 	and.w	r3, r3, #8
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d063      	beq.n	800e87c <f_open+0x1d4>
				dw = GET_FATTIME();
 800e7b4:	f7fb f8e6 	bl	8009984 <get_fattime>
 800e7b8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7bc:	330e      	adds	r3, #14
 800e7be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7fe fae1 	bl	800cd88 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e7c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7c8:	3316      	adds	r3, #22
 800e7ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7fe fadb 	bl	800cd88 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e7d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7d4:	330b      	adds	r3, #11
 800e7d6:	2220      	movs	r2, #32
 800e7d8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e7da:	693b      	ldr	r3, [r7, #16]
 800e7dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7de:	4611      	mov	r1, r2
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7ff fa32 	bl	800dc4a <ld_clust>
 800e7e6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7ff fa4a 	bl	800dc88 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e7f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7f6:	331c      	adds	r3, #28
 800e7f8:	2100      	movs	r1, #0
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f7fe fac4 	bl	800cd88 <st_dword>
					fs->wflag = 1;
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	2201      	movs	r2, #1
 800e804:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d037      	beq.n	800e87c <f_open+0x1d4>
						dw = fs->winsect;
 800e80c:	693b      	ldr	r3, [r7, #16]
 800e80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e810:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e812:	f107 0314 	add.w	r3, r7, #20
 800e816:	2200      	movs	r2, #0
 800e818:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7fe ff5d 	bl	800d6da <remove_chain>
 800e820:	4603      	mov	r3, r0
 800e822:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800e826:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d126      	bne.n	800e87c <f_open+0x1d4>
							res = move_window(fs, dw);
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e832:	4618      	mov	r0, r3
 800e834:	f7fe fd02 	bl	800d23c <move_window>
 800e838:	4603      	mov	r3, r0
 800e83a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e83e:	693b      	ldr	r3, [r7, #16]
 800e840:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e842:	3a01      	subs	r2, #1
 800e844:	60da      	str	r2, [r3, #12]
 800e846:	e019      	b.n	800e87c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e848:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d115      	bne.n	800e87c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e850:	7ebb      	ldrb	r3, [r7, #26]
 800e852:	f003 0310 	and.w	r3, r3, #16
 800e856:	2b00      	cmp	r3, #0
 800e858:	d003      	beq.n	800e862 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e85a:	2304      	movs	r3, #4
 800e85c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e860:	e00c      	b.n	800e87c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e862:	79fb      	ldrb	r3, [r7, #7]
 800e864:	f003 0302 	and.w	r3, r3, #2
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d007      	beq.n	800e87c <f_open+0x1d4>
 800e86c:	7ebb      	ldrb	r3, [r7, #26]
 800e86e:	f003 0301 	and.w	r3, r3, #1
 800e872:	2b00      	cmp	r3, #0
 800e874:	d002      	beq.n	800e87c <f_open+0x1d4>
						res = FR_DENIED;
 800e876:	2307      	movs	r3, #7
 800e878:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e87c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e880:	2b00      	cmp	r3, #0
 800e882:	d128      	bne.n	800e8d6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e884:	79fb      	ldrb	r3, [r7, #7]
 800e886:	f003 0308 	and.w	r3, r3, #8
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d003      	beq.n	800e896 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e88e:	79fb      	ldrb	r3, [r7, #7]
 800e890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e894:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e89e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e8a4:	79fb      	ldrb	r3, [r7, #7]
 800e8a6:	f023 0301 	bic.w	r3, r3, #1
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	bf14      	ite	ne
 800e8ae:	2301      	movne	r3, #1
 800e8b0:	2300      	moveq	r3, #0
 800e8b2:	b2db      	uxtb	r3, r3
 800e8b4:	461a      	mov	r2, r3
 800e8b6:	f107 0314 	add.w	r3, r7, #20
 800e8ba:	4611      	mov	r1, r2
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7fe fb8b 	bl	800cfd8 <inc_lock>
 800e8c2:	4602      	mov	r2, r0
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	691b      	ldr	r3, [r3, #16]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d102      	bne.n	800e8d6 <f_open+0x22e>
 800e8d0:	2302      	movs	r3, #2
 800e8d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e8d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	f040 8095 	bne.w	800ea0a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8e4:	4611      	mov	r1, r2
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7ff f9af 	bl	800dc4a <ld_clust>
 800e8ec:	4602      	mov	r2, r0
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8f4:	331c      	adds	r3, #28
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f7fe fa08 	bl	800cd0c <ld_dword>
 800e8fc:	4602      	mov	r2, r0
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	2200      	movs	r2, #0
 800e906:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e908:	693a      	ldr	r2, [r7, #16]
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	88da      	ldrh	r2, [r3, #6]
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	79fa      	ldrb	r2, [r7, #7]
 800e91a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	2200      	movs	r2, #0
 800e920:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	2200      	movs	r2, #0
 800e926:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	2200      	movs	r2, #0
 800e92c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	3330      	adds	r3, #48	; 0x30
 800e932:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e936:	2100      	movs	r1, #0
 800e938:	4618      	mov	r0, r3
 800e93a:	f7fe fa72 	bl	800ce22 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e93e:	79fb      	ldrb	r3, [r7, #7]
 800e940:	f003 0320 	and.w	r3, r3, #32
 800e944:	2b00      	cmp	r3, #0
 800e946:	d060      	beq.n	800ea0a <f_open+0x362>
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	68db      	ldr	r3, [r3, #12]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d05c      	beq.n	800ea0a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	68da      	ldr	r2, [r3, #12]
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	895b      	ldrh	r3, [r3, #10]
 800e95c:	025b      	lsls	r3, r3, #9
 800e95e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	689b      	ldr	r3, [r3, #8]
 800e964:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	68db      	ldr	r3, [r3, #12]
 800e96a:	657b      	str	r3, [r7, #84]	; 0x54
 800e96c:	e016      	b.n	800e99c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e972:	4618      	mov	r0, r3
 800e974:	f7fe fd1d 	bl	800d3b2 <get_fat>
 800e978:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e97a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e97c:	2b01      	cmp	r3, #1
 800e97e:	d802      	bhi.n	800e986 <f_open+0x2de>
 800e980:	2302      	movs	r3, #2
 800e982:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e98c:	d102      	bne.n	800e994 <f_open+0x2ec>
 800e98e:	2301      	movs	r3, #1
 800e990:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e994:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e998:	1ad3      	subs	r3, r2, r3
 800e99a:	657b      	str	r3, [r7, #84]	; 0x54
 800e99c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d103      	bne.n	800e9ac <f_open+0x304>
 800e9a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e9a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d8e0      	bhi.n	800e96e <f_open+0x2c6>
				}
				fp->clust = clst;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e9b0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e9b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d127      	bne.n	800ea0a <f_open+0x362>
 800e9ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d022      	beq.n	800ea0a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f7fe fcd3 	bl	800d374 <clust2sect>
 800e9ce:	6478      	str	r0, [r7, #68]	; 0x44
 800e9d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d103      	bne.n	800e9de <f_open+0x336>
						res = FR_INT_ERR;
 800e9d6:	2302      	movs	r3, #2
 800e9d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e9dc:	e015      	b.n	800ea0a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e9de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9e0:	0a5a      	lsrs	r2, r3, #9
 800e9e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9e4:	441a      	add	r2, r3
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	7858      	ldrb	r0, [r3, #1]
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	6a1a      	ldr	r2, [r3, #32]
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	f7fe f911 	bl	800cc20 <disk_read>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d002      	beq.n	800ea0a <f_open+0x362>
 800ea04:	2301      	movs	r3, #1
 800ea06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ea0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d002      	beq.n	800ea18 <f_open+0x370>
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	2200      	movs	r2, #0
 800ea16:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ea18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3760      	adds	r7, #96	; 0x60
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}

0800ea24 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b08e      	sub	sp, #56	; 0x38
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	60f8      	str	r0, [r7, #12]
 800ea2c:	60b9      	str	r1, [r7, #8]
 800ea2e:	607a      	str	r2, [r7, #4]
 800ea30:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	2200      	movs	r2, #0
 800ea3a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	f107 0214 	add.w	r2, r7, #20
 800ea42:	4611      	mov	r1, r2
 800ea44:	4618      	mov	r0, r3
 800ea46:	f7ff fdb3 	bl	800e5b0 <validate>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ea50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d107      	bne.n	800ea68 <f_read+0x44>
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	7d5b      	ldrb	r3, [r3, #21]
 800ea5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ea60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d002      	beq.n	800ea6e <f_read+0x4a>
 800ea68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ea6c:	e115      	b.n	800ec9a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	7d1b      	ldrb	r3, [r3, #20]
 800ea72:	f003 0301 	and.w	r3, r3, #1
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d101      	bne.n	800ea7e <f_read+0x5a>
 800ea7a:	2307      	movs	r3, #7
 800ea7c:	e10d      	b.n	800ec9a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	68da      	ldr	r2, [r3, #12]
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	699b      	ldr	r3, [r3, #24]
 800ea86:	1ad3      	subs	r3, r2, r3
 800ea88:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ea8a:	687a      	ldr	r2, [r7, #4]
 800ea8c:	6a3b      	ldr	r3, [r7, #32]
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	f240 80fe 	bls.w	800ec90 <f_read+0x26c>
 800ea94:	6a3b      	ldr	r3, [r7, #32]
 800ea96:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ea98:	e0fa      	b.n	800ec90 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	699b      	ldr	r3, [r3, #24]
 800ea9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	f040 80c6 	bne.w	800ec34 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	699b      	ldr	r3, [r3, #24]
 800eaac:	0a5b      	lsrs	r3, r3, #9
 800eaae:	697a      	ldr	r2, [r7, #20]
 800eab0:	8952      	ldrh	r2, [r2, #10]
 800eab2:	3a01      	subs	r2, #1
 800eab4:	4013      	ands	r3, r2
 800eab6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d12f      	bne.n	800eb1e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	699b      	ldr	r3, [r3, #24]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d103      	bne.n	800eace <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	689b      	ldr	r3, [r3, #8]
 800eaca:	633b      	str	r3, [r7, #48]	; 0x30
 800eacc:	e013      	b.n	800eaf6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d007      	beq.n	800eae6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	699b      	ldr	r3, [r3, #24]
 800eada:	4619      	mov	r1, r3
 800eadc:	68f8      	ldr	r0, [r7, #12]
 800eade:	f7fe fef9 	bl	800d8d4 <clmt_clust>
 800eae2:	6338      	str	r0, [r7, #48]	; 0x30
 800eae4:	e007      	b.n	800eaf6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800eae6:	68fa      	ldr	r2, [r7, #12]
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	69db      	ldr	r3, [r3, #28]
 800eaec:	4619      	mov	r1, r3
 800eaee:	4610      	mov	r0, r2
 800eaf0:	f7fe fc5f 	bl	800d3b2 <get_fat>
 800eaf4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800eaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	d804      	bhi.n	800eb06 <f_read+0xe2>
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2202      	movs	r2, #2
 800eb00:	755a      	strb	r2, [r3, #21]
 800eb02:	2302      	movs	r3, #2
 800eb04:	e0c9      	b.n	800ec9a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb0c:	d104      	bne.n	800eb18 <f_read+0xf4>
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2201      	movs	r2, #1
 800eb12:	755a      	strb	r2, [r3, #21]
 800eb14:	2301      	movs	r3, #1
 800eb16:	e0c0      	b.n	800ec9a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb1c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800eb1e:	697a      	ldr	r2, [r7, #20]
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	69db      	ldr	r3, [r3, #28]
 800eb24:	4619      	mov	r1, r3
 800eb26:	4610      	mov	r0, r2
 800eb28:	f7fe fc24 	bl	800d374 <clust2sect>
 800eb2c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800eb2e:	69bb      	ldr	r3, [r7, #24]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d104      	bne.n	800eb3e <f_read+0x11a>
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	2202      	movs	r2, #2
 800eb38:	755a      	strb	r2, [r3, #21]
 800eb3a:	2302      	movs	r3, #2
 800eb3c:	e0ad      	b.n	800ec9a <f_read+0x276>
			sect += csect;
 800eb3e:	69ba      	ldr	r2, [r7, #24]
 800eb40:	69fb      	ldr	r3, [r7, #28]
 800eb42:	4413      	add	r3, r2
 800eb44:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	0a5b      	lsrs	r3, r3, #9
 800eb4a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800eb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d039      	beq.n	800ebc6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800eb52:	69fa      	ldr	r2, [r7, #28]
 800eb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb56:	4413      	add	r3, r2
 800eb58:	697a      	ldr	r2, [r7, #20]
 800eb5a:	8952      	ldrh	r2, [r2, #10]
 800eb5c:	4293      	cmp	r3, r2
 800eb5e:	d905      	bls.n	800eb6c <f_read+0x148>
					cc = fs->csize - csect;
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	895b      	ldrh	r3, [r3, #10]
 800eb64:	461a      	mov	r2, r3
 800eb66:	69fb      	ldr	r3, [r7, #28]
 800eb68:	1ad3      	subs	r3, r2, r3
 800eb6a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	7858      	ldrb	r0, [r3, #1]
 800eb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb72:	69ba      	ldr	r2, [r7, #24]
 800eb74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eb76:	f7fe f853 	bl	800cc20 <disk_read>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d004      	beq.n	800eb8a <f_read+0x166>
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	2201      	movs	r2, #1
 800eb84:	755a      	strb	r2, [r3, #21]
 800eb86:	2301      	movs	r3, #1
 800eb88:	e087      	b.n	800ec9a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	7d1b      	ldrb	r3, [r3, #20]
 800eb8e:	b25b      	sxtb	r3, r3
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	da14      	bge.n	800ebbe <f_read+0x19a>
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	6a1a      	ldr	r2, [r3, #32]
 800eb98:	69bb      	ldr	r3, [r7, #24]
 800eb9a:	1ad3      	subs	r3, r2, r3
 800eb9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d90d      	bls.n	800ebbe <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	6a1a      	ldr	r2, [r3, #32]
 800eba6:	69bb      	ldr	r3, [r7, #24]
 800eba8:	1ad3      	subs	r3, r2, r3
 800ebaa:	025b      	lsls	r3, r3, #9
 800ebac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebae:	18d0      	adds	r0, r2, r3
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	3330      	adds	r3, #48	; 0x30
 800ebb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ebb8:	4619      	mov	r1, r3
 800ebba:	f7fe f911 	bl	800cde0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ebbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc0:	025b      	lsls	r3, r3, #9
 800ebc2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ebc4:	e050      	b.n	800ec68 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	6a1b      	ldr	r3, [r3, #32]
 800ebca:	69ba      	ldr	r2, [r7, #24]
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d02e      	beq.n	800ec2e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	7d1b      	ldrb	r3, [r3, #20]
 800ebd4:	b25b      	sxtb	r3, r3
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	da18      	bge.n	800ec0c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	7858      	ldrb	r0, [r3, #1]
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	6a1a      	ldr	r2, [r3, #32]
 800ebe8:	2301      	movs	r3, #1
 800ebea:	f7fe f839 	bl	800cc60 <disk_write>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d004      	beq.n	800ebfe <f_read+0x1da>
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	2201      	movs	r2, #1
 800ebf8:	755a      	strb	r2, [r3, #21]
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	e04d      	b.n	800ec9a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	7d1b      	ldrb	r3, [r3, #20]
 800ec02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec06:	b2da      	uxtb	r2, r3
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	7858      	ldrb	r0, [r3, #1]
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ec16:	2301      	movs	r3, #1
 800ec18:	69ba      	ldr	r2, [r7, #24]
 800ec1a:	f7fe f801 	bl	800cc20 <disk_read>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d004      	beq.n	800ec2e <f_read+0x20a>
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2201      	movs	r2, #1
 800ec28:	755a      	strb	r2, [r3, #21]
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	e035      	b.n	800ec9a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	69ba      	ldr	r2, [r7, #24]
 800ec32:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	699b      	ldr	r3, [r3, #24]
 800ec38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec3c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ec40:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ec42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d901      	bls.n	800ec4e <f_read+0x22a>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	699b      	ldr	r3, [r3, #24]
 800ec58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec5c:	4413      	add	r3, r2
 800ec5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec60:	4619      	mov	r1, r3
 800ec62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec64:	f7fe f8bc 	bl	800cde0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ec68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec6c:	4413      	add	r3, r2
 800ec6e:	627b      	str	r3, [r7, #36]	; 0x24
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	699a      	ldr	r2, [r3, #24]
 800ec74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec76:	441a      	add	r2, r3
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	619a      	str	r2, [r3, #24]
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	681a      	ldr	r2, [r3, #0]
 800ec80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec82:	441a      	add	r2, r3
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	601a      	str	r2, [r3, #0]
 800ec88:	687a      	ldr	r2, [r7, #4]
 800ec8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec8c:	1ad3      	subs	r3, r2, r3
 800ec8e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	f47f af01 	bne.w	800ea9a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ec98:	2300      	movs	r3, #0
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3738      	adds	r7, #56	; 0x38
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}

0800eca2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800eca2:	b580      	push	{r7, lr}
 800eca4:	b086      	sub	sp, #24
 800eca6:	af00      	add	r7, sp, #0
 800eca8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f107 0208 	add.w	r2, r7, #8
 800ecb0:	4611      	mov	r1, r2
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7ff fc7c 	bl	800e5b0 <validate>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ecbc:	7dfb      	ldrb	r3, [r7, #23]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d168      	bne.n	800ed94 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	7d1b      	ldrb	r3, [r3, #20]
 800ecc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d062      	beq.n	800ed94 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	7d1b      	ldrb	r3, [r3, #20]
 800ecd2:	b25b      	sxtb	r3, r3
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	da15      	bge.n	800ed04 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	7858      	ldrb	r0, [r3, #1]
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6a1a      	ldr	r2, [r3, #32]
 800ece6:	2301      	movs	r3, #1
 800ece8:	f7fd ffba 	bl	800cc60 <disk_write>
 800ecec:	4603      	mov	r3, r0
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d001      	beq.n	800ecf6 <f_sync+0x54>
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	e04f      	b.n	800ed96 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	7d1b      	ldrb	r3, [r3, #20]
 800ecfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecfe:	b2da      	uxtb	r2, r3
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ed04:	f7fa fe3e 	bl	8009984 <get_fattime>
 800ed08:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ed0a:	68ba      	ldr	r2, [r7, #8]
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed10:	4619      	mov	r1, r3
 800ed12:	4610      	mov	r0, r2
 800ed14:	f7fe fa92 	bl	800d23c <move_window>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ed1c:	7dfb      	ldrb	r3, [r7, #23]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d138      	bne.n	800ed94 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed26:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	330b      	adds	r3, #11
 800ed2c:	781a      	ldrb	r2, [r3, #0]
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	330b      	adds	r3, #11
 800ed32:	f042 0220 	orr.w	r2, r2, #32
 800ed36:	b2d2      	uxtb	r2, r2
 800ed38:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6818      	ldr	r0, [r3, #0]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	689b      	ldr	r3, [r3, #8]
 800ed42:	461a      	mov	r2, r3
 800ed44:	68f9      	ldr	r1, [r7, #12]
 800ed46:	f7fe ff9f 	bl	800dc88 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	f103 021c 	add.w	r2, r3, #28
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	68db      	ldr	r3, [r3, #12]
 800ed54:	4619      	mov	r1, r3
 800ed56:	4610      	mov	r0, r2
 800ed58:	f7fe f816 	bl	800cd88 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	3316      	adds	r3, #22
 800ed60:	6939      	ldr	r1, [r7, #16]
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7fe f810 	bl	800cd88 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	3312      	adds	r3, #18
 800ed6c:	2100      	movs	r1, #0
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f7fd ffef 	bl	800cd52 <st_word>
					fs->wflag = 1;
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	2201      	movs	r2, #1
 800ed78:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7fe fa8b 	bl	800d298 <sync_fs>
 800ed82:	4603      	mov	r3, r0
 800ed84:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	7d1b      	ldrb	r3, [r3, #20]
 800ed8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed8e:	b2da      	uxtb	r2, r3
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ed94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3718      	adds	r7, #24
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}

0800ed9e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ed9e:	b580      	push	{r7, lr}
 800eda0:	b084      	sub	sp, #16
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f7ff ff7b 	bl	800eca2 <f_sync>
 800edac:	4603      	mov	r3, r0
 800edae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800edb0:	7bfb      	ldrb	r3, [r7, #15]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d118      	bne.n	800ede8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f107 0208 	add.w	r2, r7, #8
 800edbc:	4611      	mov	r1, r2
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7ff fbf6 	bl	800e5b0 <validate>
 800edc4:	4603      	mov	r3, r0
 800edc6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800edc8:	7bfb      	ldrb	r3, [r7, #15]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d10c      	bne.n	800ede8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	691b      	ldr	r3, [r3, #16]
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7fe f98e 	bl	800d0f4 <dec_lock>
 800edd8:	4603      	mov	r3, r0
 800edda:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800eddc:	7bfb      	ldrb	r3, [r7, #15]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d102      	bne.n	800ede8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2200      	movs	r2, #0
 800ede6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ede8:	7bfb      	ldrb	r3, [r7, #15]
}
 800edea:	4618      	mov	r0, r3
 800edec:	3710      	adds	r7, #16
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}

0800edf2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800edf2:	b580      	push	{r7, lr}
 800edf4:	b090      	sub	sp, #64	; 0x40
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	6078      	str	r0, [r7, #4]
 800edfa:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	f107 0208 	add.w	r2, r7, #8
 800ee02:	4611      	mov	r1, r2
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7ff fbd3 	bl	800e5b0 <validate>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ee10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d103      	bne.n	800ee20 <f_lseek+0x2e>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	7d5b      	ldrb	r3, [r3, #21]
 800ee1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ee20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d002      	beq.n	800ee2e <f_lseek+0x3c>
 800ee28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ee2c:	e1e6      	b.n	800f1fc <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	f000 80d1 	beq.w	800efda <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee3e:	d15a      	bne.n	800eef6 <f_lseek+0x104>
			tbl = fp->cltbl;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee44:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ee46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee48:	1d1a      	adds	r2, r3, #4
 800ee4a:	627a      	str	r2, [r7, #36]	; 0x24
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	617b      	str	r3, [r7, #20]
 800ee50:	2302      	movs	r3, #2
 800ee52:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	689b      	ldr	r3, [r3, #8]
 800ee58:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800ee5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d03a      	beq.n	800eed6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ee60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee62:	613b      	str	r3, [r7, #16]
 800ee64:	2300      	movs	r3, #0
 800ee66:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee6a:	3302      	adds	r3, #2
 800ee6c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800ee6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee70:	60fb      	str	r3, [r7, #12]
 800ee72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee74:	3301      	adds	r3, #1
 800ee76:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7fe fa98 	bl	800d3b2 <get_fat>
 800ee82:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ee84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee86:	2b01      	cmp	r3, #1
 800ee88:	d804      	bhi.n	800ee94 <f_lseek+0xa2>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2202      	movs	r2, #2
 800ee8e:	755a      	strb	r2, [r3, #21]
 800ee90:	2302      	movs	r3, #2
 800ee92:	e1b3      	b.n	800f1fc <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ee94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee9a:	d104      	bne.n	800eea6 <f_lseek+0xb4>
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2201      	movs	r2, #1
 800eea0:	755a      	strb	r2, [r3, #21]
 800eea2:	2301      	movs	r3, #1
 800eea4:	e1aa      	b.n	800f1fc <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	3301      	adds	r3, #1
 800eeaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d0de      	beq.n	800ee6e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800eeb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d809      	bhi.n	800eecc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800eeb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeba:	1d1a      	adds	r2, r3, #4
 800eebc:	627a      	str	r2, [r7, #36]	; 0x24
 800eebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eec0:	601a      	str	r2, [r3, #0]
 800eec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec4:	1d1a      	adds	r2, r3, #4
 800eec6:	627a      	str	r2, [r7, #36]	; 0x24
 800eec8:	693a      	ldr	r2, [r7, #16]
 800eeca:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	695b      	ldr	r3, [r3, #20]
 800eed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d3c4      	bcc.n	800ee60 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eedc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800eede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d803      	bhi.n	800eeee <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800eee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee8:	2200      	movs	r2, #0
 800eeea:	601a      	str	r2, [r3, #0]
 800eeec:	e184      	b.n	800f1f8 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800eeee:	2311      	movs	r3, #17
 800eef0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800eef4:	e180      	b.n	800f1f8 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	68db      	ldr	r3, [r3, #12]
 800eefa:	683a      	ldr	r2, [r7, #0]
 800eefc:	429a      	cmp	r2, r3
 800eefe:	d902      	bls.n	800ef06 <f_lseek+0x114>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	68db      	ldr	r3, [r3, #12]
 800ef04:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	683a      	ldr	r2, [r7, #0]
 800ef0a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	f000 8172 	beq.w	800f1f8 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	3b01      	subs	r3, #1
 800ef18:	4619      	mov	r1, r3
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f7fe fcda 	bl	800d8d4 <clmt_clust>
 800ef20:	4602      	mov	r2, r0
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ef26:	68ba      	ldr	r2, [r7, #8]
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	69db      	ldr	r3, [r3, #28]
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	4610      	mov	r0, r2
 800ef30:	f7fe fa20 	bl	800d374 <clust2sect>
 800ef34:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ef36:	69bb      	ldr	r3, [r7, #24]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d104      	bne.n	800ef46 <f_lseek+0x154>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2202      	movs	r2, #2
 800ef40:	755a      	strb	r2, [r3, #21]
 800ef42:	2302      	movs	r3, #2
 800ef44:	e15a      	b.n	800f1fc <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	3b01      	subs	r3, #1
 800ef4a:	0a5b      	lsrs	r3, r3, #9
 800ef4c:	68ba      	ldr	r2, [r7, #8]
 800ef4e:	8952      	ldrh	r2, [r2, #10]
 800ef50:	3a01      	subs	r2, #1
 800ef52:	4013      	ands	r3, r2
 800ef54:	69ba      	ldr	r2, [r7, #24]
 800ef56:	4413      	add	r3, r2
 800ef58:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	699b      	ldr	r3, [r3, #24]
 800ef5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	f000 8148 	beq.w	800f1f8 <f_lseek+0x406>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	6a1b      	ldr	r3, [r3, #32]
 800ef6c:	69ba      	ldr	r2, [r7, #24]
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	f000 8142 	beq.w	800f1f8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	7d1b      	ldrb	r3, [r3, #20]
 800ef78:	b25b      	sxtb	r3, r3
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	da18      	bge.n	800efb0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef7e:	68bb      	ldr	r3, [r7, #8]
 800ef80:	7858      	ldrb	r0, [r3, #1]
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6a1a      	ldr	r2, [r3, #32]
 800ef8c:	2301      	movs	r3, #1
 800ef8e:	f7fd fe67 	bl	800cc60 <disk_write>
 800ef92:	4603      	mov	r3, r0
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d004      	beq.n	800efa2 <f_lseek+0x1b0>
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2201      	movs	r2, #1
 800ef9c:	755a      	strb	r2, [r3, #21]
 800ef9e:	2301      	movs	r3, #1
 800efa0:	e12c      	b.n	800f1fc <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	7d1b      	ldrb	r3, [r3, #20]
 800efa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efaa:	b2da      	uxtb	r2, r3
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	7858      	ldrb	r0, [r3, #1]
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800efba:	2301      	movs	r3, #1
 800efbc:	69ba      	ldr	r2, [r7, #24]
 800efbe:	f7fd fe2f 	bl	800cc20 <disk_read>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d004      	beq.n	800efd2 <f_lseek+0x1e0>
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2201      	movs	r2, #1
 800efcc:	755a      	strb	r2, [r3, #21]
 800efce:	2301      	movs	r3, #1
 800efd0:	e114      	b.n	800f1fc <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	69ba      	ldr	r2, [r7, #24]
 800efd6:	621a      	str	r2, [r3, #32]
 800efd8:	e10e      	b.n	800f1f8 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	68db      	ldr	r3, [r3, #12]
 800efde:	683a      	ldr	r2, [r7, #0]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d908      	bls.n	800eff6 <f_lseek+0x204>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	7d1b      	ldrb	r3, [r3, #20]
 800efe8:	f003 0302 	and.w	r3, r3, #2
 800efec:	2b00      	cmp	r3, #0
 800efee:	d102      	bne.n	800eff6 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	68db      	ldr	r3, [r3, #12]
 800eff4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	699b      	ldr	r3, [r3, #24]
 800effa:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800effc:	2300      	movs	r3, #0
 800effe:	637b      	str	r3, [r7, #52]	; 0x34
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f004:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	f000 80a7 	beq.w	800f15c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	895b      	ldrh	r3, [r3, #10]
 800f012:	025b      	lsls	r3, r3, #9
 800f014:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f016:	6a3b      	ldr	r3, [r7, #32]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d01b      	beq.n	800f054 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	1e5a      	subs	r2, r3, #1
 800f020:	69fb      	ldr	r3, [r7, #28]
 800f022:	fbb2 f2f3 	udiv	r2, r2, r3
 800f026:	6a3b      	ldr	r3, [r7, #32]
 800f028:	1e59      	subs	r1, r3, #1
 800f02a:	69fb      	ldr	r3, [r7, #28]
 800f02c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f030:	429a      	cmp	r2, r3
 800f032:	d30f      	bcc.n	800f054 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f034:	6a3b      	ldr	r3, [r7, #32]
 800f036:	1e5a      	subs	r2, r3, #1
 800f038:	69fb      	ldr	r3, [r7, #28]
 800f03a:	425b      	negs	r3, r3
 800f03c:	401a      	ands	r2, r3
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	699b      	ldr	r3, [r3, #24]
 800f046:	683a      	ldr	r2, [r7, #0]
 800f048:	1ad3      	subs	r3, r2, r3
 800f04a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	69db      	ldr	r3, [r3, #28]
 800f050:	63bb      	str	r3, [r7, #56]	; 0x38
 800f052:	e022      	b.n	800f09a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	689b      	ldr	r3, [r3, #8]
 800f058:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d119      	bne.n	800f094 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2100      	movs	r1, #0
 800f064:	4618      	mov	r0, r3
 800f066:	f7fe fb9d 	bl	800d7a4 <create_chain>
 800f06a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f06e:	2b01      	cmp	r3, #1
 800f070:	d104      	bne.n	800f07c <f_lseek+0x28a>
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	2202      	movs	r2, #2
 800f076:	755a      	strb	r2, [r3, #21]
 800f078:	2302      	movs	r3, #2
 800f07a:	e0bf      	b.n	800f1fc <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f082:	d104      	bne.n	800f08e <f_lseek+0x29c>
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2201      	movs	r2, #1
 800f088:	755a      	strb	r2, [r3, #21]
 800f08a:	2301      	movs	r3, #1
 800f08c:	e0b6      	b.n	800f1fc <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f092:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f098:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d05d      	beq.n	800f15c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800f0a0:	e03a      	b.n	800f118 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800f0a2:	683a      	ldr	r2, [r7, #0]
 800f0a4:	69fb      	ldr	r3, [r7, #28]
 800f0a6:	1ad3      	subs	r3, r2, r3
 800f0a8:	603b      	str	r3, [r7, #0]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	699a      	ldr	r2, [r3, #24]
 800f0ae:	69fb      	ldr	r3, [r7, #28]
 800f0b0:	441a      	add	r2, r3
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	7d1b      	ldrb	r3, [r3, #20]
 800f0ba:	f003 0302 	and.w	r3, r3, #2
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d00b      	beq.n	800f0da <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7fe fb6c 	bl	800d7a4 <create_chain>
 800f0cc:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d108      	bne.n	800f0e6 <f_lseek+0x2f4>
							ofs = 0; break;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	603b      	str	r3, [r7, #0]
 800f0d8:	e022      	b.n	800f120 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7fe f967 	bl	800d3b2 <get_fat>
 800f0e4:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0ec:	d104      	bne.n	800f0f8 <f_lseek+0x306>
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2201      	movs	r2, #1
 800f0f2:	755a      	strb	r2, [r3, #21]
 800f0f4:	2301      	movs	r3, #1
 800f0f6:	e081      	b.n	800f1fc <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0fa:	2b01      	cmp	r3, #1
 800f0fc:	d904      	bls.n	800f108 <f_lseek+0x316>
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	695b      	ldr	r3, [r3, #20]
 800f102:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f104:	429a      	cmp	r2, r3
 800f106:	d304      	bcc.n	800f112 <f_lseek+0x320>
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2202      	movs	r2, #2
 800f10c:	755a      	strb	r2, [r3, #21]
 800f10e:	2302      	movs	r3, #2
 800f110:	e074      	b.n	800f1fc <f_lseek+0x40a>
					fp->clust = clst;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f116:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f118:	683a      	ldr	r2, [r7, #0]
 800f11a:	69fb      	ldr	r3, [r7, #28]
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d8c0      	bhi.n	800f0a2 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	699a      	ldr	r2, [r3, #24]
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	441a      	add	r2, r3
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f132:	2b00      	cmp	r3, #0
 800f134:	d012      	beq.n	800f15c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f13a:	4618      	mov	r0, r3
 800f13c:	f7fe f91a 	bl	800d374 <clust2sect>
 800f140:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f144:	2b00      	cmp	r3, #0
 800f146:	d104      	bne.n	800f152 <f_lseek+0x360>
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2202      	movs	r2, #2
 800f14c:	755a      	strb	r2, [r3, #21]
 800f14e:	2302      	movs	r3, #2
 800f150:	e054      	b.n	800f1fc <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	0a5b      	lsrs	r3, r3, #9
 800f156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f158:	4413      	add	r3, r2
 800f15a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	699a      	ldr	r2, [r3, #24]
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	68db      	ldr	r3, [r3, #12]
 800f164:	429a      	cmp	r2, r3
 800f166:	d90a      	bls.n	800f17e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	699a      	ldr	r2, [r3, #24]
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	7d1b      	ldrb	r3, [r3, #20]
 800f174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f178:	b2da      	uxtb	r2, r3
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	699b      	ldr	r3, [r3, #24]
 800f182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f186:	2b00      	cmp	r3, #0
 800f188:	d036      	beq.n	800f1f8 <f_lseek+0x406>
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	6a1b      	ldr	r3, [r3, #32]
 800f18e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f190:	429a      	cmp	r2, r3
 800f192:	d031      	beq.n	800f1f8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	7d1b      	ldrb	r3, [r3, #20]
 800f198:	b25b      	sxtb	r3, r3
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	da18      	bge.n	800f1d0 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	7858      	ldrb	r0, [r3, #1]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	6a1a      	ldr	r2, [r3, #32]
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	f7fd fd57 	bl	800cc60 <disk_write>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d004      	beq.n	800f1c2 <f_lseek+0x3d0>
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2201      	movs	r2, #1
 800f1bc:	755a      	strb	r2, [r3, #21]
 800f1be:	2301      	movs	r3, #1
 800f1c0:	e01c      	b.n	800f1fc <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	7d1b      	ldrb	r3, [r3, #20]
 800f1c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1ca:	b2da      	uxtb	r2, r3
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	7858      	ldrb	r0, [r3, #1]
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f1da:	2301      	movs	r3, #1
 800f1dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1de:	f7fd fd1f 	bl	800cc20 <disk_read>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d004      	beq.n	800f1f2 <f_lseek+0x400>
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2201      	movs	r2, #1
 800f1ec:	755a      	strb	r2, [r3, #21]
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	e004      	b.n	800f1fc <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1f6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f1f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	3740      	adds	r7, #64	; 0x40
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}

0800f204 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f204:	b480      	push	{r7}
 800f206:	b087      	sub	sp, #28
 800f208:	af00      	add	r7, sp, #0
 800f20a:	60f8      	str	r0, [r7, #12]
 800f20c:	60b9      	str	r1, [r7, #8]
 800f20e:	4613      	mov	r3, r2
 800f210:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f212:	2301      	movs	r3, #1
 800f214:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f216:	2300      	movs	r3, #0
 800f218:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f21a:	4b1f      	ldr	r3, [pc, #124]	; (800f298 <FATFS_LinkDriverEx+0x94>)
 800f21c:	7a5b      	ldrb	r3, [r3, #9]
 800f21e:	b2db      	uxtb	r3, r3
 800f220:	2b00      	cmp	r3, #0
 800f222:	d131      	bne.n	800f288 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f224:	4b1c      	ldr	r3, [pc, #112]	; (800f298 <FATFS_LinkDriverEx+0x94>)
 800f226:	7a5b      	ldrb	r3, [r3, #9]
 800f228:	b2db      	uxtb	r3, r3
 800f22a:	461a      	mov	r2, r3
 800f22c:	4b1a      	ldr	r3, [pc, #104]	; (800f298 <FATFS_LinkDriverEx+0x94>)
 800f22e:	2100      	movs	r1, #0
 800f230:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f232:	4b19      	ldr	r3, [pc, #100]	; (800f298 <FATFS_LinkDriverEx+0x94>)
 800f234:	7a5b      	ldrb	r3, [r3, #9]
 800f236:	b2db      	uxtb	r3, r3
 800f238:	4a17      	ldr	r2, [pc, #92]	; (800f298 <FATFS_LinkDriverEx+0x94>)
 800f23a:	009b      	lsls	r3, r3, #2
 800f23c:	4413      	add	r3, r2
 800f23e:	68fa      	ldr	r2, [r7, #12]
 800f240:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f242:	4b15      	ldr	r3, [pc, #84]	; (800f298 <FATFS_LinkDriverEx+0x94>)
 800f244:	7a5b      	ldrb	r3, [r3, #9]
 800f246:	b2db      	uxtb	r3, r3
 800f248:	461a      	mov	r2, r3
 800f24a:	4b13      	ldr	r3, [pc, #76]	; (800f298 <FATFS_LinkDriverEx+0x94>)
 800f24c:	4413      	add	r3, r2
 800f24e:	79fa      	ldrb	r2, [r7, #7]
 800f250:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f252:	4b11      	ldr	r3, [pc, #68]	; (800f298 <FATFS_LinkDriverEx+0x94>)
 800f254:	7a5b      	ldrb	r3, [r3, #9]
 800f256:	b2db      	uxtb	r3, r3
 800f258:	1c5a      	adds	r2, r3, #1
 800f25a:	b2d1      	uxtb	r1, r2
 800f25c:	4a0e      	ldr	r2, [pc, #56]	; (800f298 <FATFS_LinkDriverEx+0x94>)
 800f25e:	7251      	strb	r1, [r2, #9]
 800f260:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f262:	7dbb      	ldrb	r3, [r7, #22]
 800f264:	3330      	adds	r3, #48	; 0x30
 800f266:	b2da      	uxtb	r2, r3
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	3301      	adds	r3, #1
 800f270:	223a      	movs	r2, #58	; 0x3a
 800f272:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	3302      	adds	r3, #2
 800f278:	222f      	movs	r2, #47	; 0x2f
 800f27a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	3303      	adds	r3, #3
 800f280:	2200      	movs	r2, #0
 800f282:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f284:	2300      	movs	r3, #0
 800f286:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f288:	7dfb      	ldrb	r3, [r7, #23]
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	371c      	adds	r7, #28
 800f28e:	46bd      	mov	sp, r7
 800f290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f294:	4770      	bx	lr
 800f296:	bf00      	nop
 800f298:	20001774 	.word	0x20001774

0800f29c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b082      	sub	sp, #8
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	6839      	ldr	r1, [r7, #0]
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f7ff ffaa 	bl	800f204 <FATFS_LinkDriverEx>
 800f2b0:	4603      	mov	r3, r0
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3708      	adds	r7, #8
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
	...

0800f2bc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f2c0:	2201      	movs	r2, #1
 800f2c2:	490e      	ldr	r1, [pc, #56]	; (800f2fc <MX_USB_HOST_Init+0x40>)
 800f2c4:	480e      	ldr	r0, [pc, #56]	; (800f300 <MX_USB_HOST_Init+0x44>)
 800f2c6:	f7fc f819 	bl	800b2fc <USBH_Init>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d001      	beq.n	800f2d4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f2d0:	f7f2 fce4 	bl	8001c9c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800f2d4:	490b      	ldr	r1, [pc, #44]	; (800f304 <MX_USB_HOST_Init+0x48>)
 800f2d6:	480a      	ldr	r0, [pc, #40]	; (800f300 <MX_USB_HOST_Init+0x44>)
 800f2d8:	f7fc f89e 	bl	800b418 <USBH_RegisterClass>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d001      	beq.n	800f2e6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f2e2:	f7f2 fcdb 	bl	8001c9c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f2e6:	4806      	ldr	r0, [pc, #24]	; (800f300 <MX_USB_HOST_Init+0x44>)
 800f2e8:	f7fc f922 	bl	800b530 <USBH_Start>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d001      	beq.n	800f2f6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f2f2:	f7f2 fcd3 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f2f6:	bf00      	nop
 800f2f8:	bd80      	pop	{r7, pc}
 800f2fa:	bf00      	nop
 800f2fc:	0800f31d 	.word	0x0800f31d
 800f300:	20001780 	.word	0x20001780
 800f304:	20000078 	.word	0x20000078

0800f308 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800f30c:	4802      	ldr	r0, [pc, #8]	; (800f318 <MX_USB_HOST_Process+0x10>)
 800f30e:	f7fc f91f 	bl	800b550 <USBH_Process>
}
 800f312:	bf00      	nop
 800f314:	bd80      	pop	{r7, pc}
 800f316:	bf00      	nop
 800f318:	20001780 	.word	0x20001780

0800f31c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f31c:	b480      	push	{r7}
 800f31e:	b083      	sub	sp, #12
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	460b      	mov	r3, r1
 800f326:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f328:	78fb      	ldrb	r3, [r7, #3]
 800f32a:	3b01      	subs	r3, #1
 800f32c:	2b04      	cmp	r3, #4
 800f32e:	d819      	bhi.n	800f364 <USBH_UserProcess+0x48>
 800f330:	a201      	add	r2, pc, #4	; (adr r2, 800f338 <USBH_UserProcess+0x1c>)
 800f332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f336:	bf00      	nop
 800f338:	0800f365 	.word	0x0800f365
 800f33c:	0800f355 	.word	0x0800f355
 800f340:	0800f365 	.word	0x0800f365
 800f344:	0800f35d 	.word	0x0800f35d
 800f348:	0800f34d 	.word	0x0800f34d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f34c:	4b09      	ldr	r3, [pc, #36]	; (800f374 <USBH_UserProcess+0x58>)
 800f34e:	2203      	movs	r2, #3
 800f350:	701a      	strb	r2, [r3, #0]
  break;
 800f352:	e008      	b.n	800f366 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f354:	4b07      	ldr	r3, [pc, #28]	; (800f374 <USBH_UserProcess+0x58>)
 800f356:	2202      	movs	r2, #2
 800f358:	701a      	strb	r2, [r3, #0]
  break;
 800f35a:	e004      	b.n	800f366 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f35c:	4b05      	ldr	r3, [pc, #20]	; (800f374 <USBH_UserProcess+0x58>)
 800f35e:	2201      	movs	r2, #1
 800f360:	701a      	strb	r2, [r3, #0]
  break;
 800f362:	e000      	b.n	800f366 <USBH_UserProcess+0x4a>

  default:
  break;
 800f364:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f366:	bf00      	nop
 800f368:	370c      	adds	r7, #12
 800f36a:	46bd      	mov	sp, r7
 800f36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f370:	4770      	bx	lr
 800f372:	bf00      	nop
 800f374:	20001b58 	.word	0x20001b58

0800f378 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b08a      	sub	sp, #40	; 0x28
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f380:	f107 0314 	add.w	r3, r7, #20
 800f384:	2200      	movs	r2, #0
 800f386:	601a      	str	r2, [r3, #0]
 800f388:	605a      	str	r2, [r3, #4]
 800f38a:	609a      	str	r2, [r3, #8]
 800f38c:	60da      	str	r2, [r3, #12]
 800f38e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f398:	d147      	bne.n	800f42a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f39a:	2300      	movs	r3, #0
 800f39c:	613b      	str	r3, [r7, #16]
 800f39e:	4b25      	ldr	r3, [pc, #148]	; (800f434 <HAL_HCD_MspInit+0xbc>)
 800f3a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3a2:	4a24      	ldr	r2, [pc, #144]	; (800f434 <HAL_HCD_MspInit+0xbc>)
 800f3a4:	f043 0301 	orr.w	r3, r3, #1
 800f3a8:	6313      	str	r3, [r2, #48]	; 0x30
 800f3aa:	4b22      	ldr	r3, [pc, #136]	; (800f434 <HAL_HCD_MspInit+0xbc>)
 800f3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3ae:	f003 0301 	and.w	r3, r3, #1
 800f3b2:	613b      	str	r3, [r7, #16]
 800f3b4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800f3b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f3ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f3bc:	2300      	movs	r3, #0
 800f3be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800f3c4:	f107 0314 	add.w	r3, r7, #20
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	481b      	ldr	r0, [pc, #108]	; (800f438 <HAL_HCD_MspInit+0xc0>)
 800f3cc:	f7f4 fa04 	bl	80037d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800f3d0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800f3d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f3d6:	2302      	movs	r3, #2
 800f3d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f3de:	2303      	movs	r3, #3
 800f3e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f3e2:	230a      	movs	r3, #10
 800f3e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f3e6:	f107 0314 	add.w	r3, r7, #20
 800f3ea:	4619      	mov	r1, r3
 800f3ec:	4812      	ldr	r0, [pc, #72]	; (800f438 <HAL_HCD_MspInit+0xc0>)
 800f3ee:	f7f4 f9f3 	bl	80037d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f3f2:	4b10      	ldr	r3, [pc, #64]	; (800f434 <HAL_HCD_MspInit+0xbc>)
 800f3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3f6:	4a0f      	ldr	r2, [pc, #60]	; (800f434 <HAL_HCD_MspInit+0xbc>)
 800f3f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3fc:	6353      	str	r3, [r2, #52]	; 0x34
 800f3fe:	2300      	movs	r3, #0
 800f400:	60fb      	str	r3, [r7, #12]
 800f402:	4b0c      	ldr	r3, [pc, #48]	; (800f434 <HAL_HCD_MspInit+0xbc>)
 800f404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f406:	4a0b      	ldr	r2, [pc, #44]	; (800f434 <HAL_HCD_MspInit+0xbc>)
 800f408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f40c:	6453      	str	r3, [r2, #68]	; 0x44
 800f40e:	4b09      	ldr	r3, [pc, #36]	; (800f434 <HAL_HCD_MspInit+0xbc>)
 800f410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f416:	60fb      	str	r3, [r7, #12]
 800f418:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f41a:	2200      	movs	r2, #0
 800f41c:	2100      	movs	r1, #0
 800f41e:	2043      	movs	r0, #67	; 0x43
 800f420:	f7f3 fdc3 	bl	8002faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f424:	2043      	movs	r0, #67	; 0x43
 800f426:	f7f3 fddc 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f42a:	bf00      	nop
 800f42c:	3728      	adds	r7, #40	; 0x28
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}
 800f432:	bf00      	nop
 800f434:	40023800 	.word	0x40023800
 800f438:	40020000 	.word	0x40020000

0800f43c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b082      	sub	sp, #8
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f44a:	4618      	mov	r0, r3
 800f44c:	f7fc fc5f 	bl	800bd0e <USBH_LL_IncTimer>
}
 800f450:	bf00      	nop
 800f452:	3708      	adds	r7, #8
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}

0800f458 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b082      	sub	sp, #8
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f466:	4618      	mov	r0, r3
 800f468:	f7fc fc97 	bl	800bd9a <USBH_LL_Connect>
}
 800f46c:	bf00      	nop
 800f46e:	3708      	adds	r7, #8
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}

0800f474 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b082      	sub	sp, #8
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f482:	4618      	mov	r0, r3
 800f484:	f7fc fca0 	bl	800bdc8 <USBH_LL_Disconnect>
}
 800f488:	bf00      	nop
 800f48a:	3708      	adds	r7, #8
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}

0800f490 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f490:	b480      	push	{r7}
 800f492:	b083      	sub	sp, #12
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
 800f498:	460b      	mov	r3, r1
 800f49a:	70fb      	strb	r3, [r7, #3]
 800f49c:	4613      	mov	r3, r2
 800f49e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f4a0:	bf00      	nop
 800f4a2:	370c      	adds	r7, #12
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr

0800f4ac <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7fc fc51 	bl	800bd62 <USBH_LL_PortEnabled>
}
 800f4c0:	bf00      	nop
 800f4c2:	3708      	adds	r7, #8
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}

0800f4c8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f7fc fc51 	bl	800bd7e <USBH_LL_PortDisabled>
}
 800f4dc:	bf00      	nop
 800f4de:	3708      	adds	r7, #8
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}

0800f4e4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b082      	sub	sp, #8
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f4f2:	2b01      	cmp	r3, #1
 800f4f4:	d12a      	bne.n	800f54c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f4f6:	4a18      	ldr	r2, [pc, #96]	; (800f558 <USBH_LL_Init+0x74>)
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	4a15      	ldr	r2, [pc, #84]	; (800f558 <USBH_LL_Init+0x74>)
 800f502:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f506:	4b14      	ldr	r3, [pc, #80]	; (800f558 <USBH_LL_Init+0x74>)
 800f508:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f50c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f50e:	4b12      	ldr	r3, [pc, #72]	; (800f558 <USBH_LL_Init+0x74>)
 800f510:	2208      	movs	r2, #8
 800f512:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f514:	4b10      	ldr	r3, [pc, #64]	; (800f558 <USBH_LL_Init+0x74>)
 800f516:	2201      	movs	r2, #1
 800f518:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f51a:	4b0f      	ldr	r3, [pc, #60]	; (800f558 <USBH_LL_Init+0x74>)
 800f51c:	2200      	movs	r2, #0
 800f51e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f520:	4b0d      	ldr	r3, [pc, #52]	; (800f558 <USBH_LL_Init+0x74>)
 800f522:	2202      	movs	r2, #2
 800f524:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f526:	4b0c      	ldr	r3, [pc, #48]	; (800f558 <USBH_LL_Init+0x74>)
 800f528:	2200      	movs	r2, #0
 800f52a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f52c:	480a      	ldr	r0, [pc, #40]	; (800f558 <USBH_LL_Init+0x74>)
 800f52e:	f7f4 fbf8 	bl	8003d22 <HAL_HCD_Init>
 800f532:	4603      	mov	r3, r0
 800f534:	2b00      	cmp	r3, #0
 800f536:	d001      	beq.n	800f53c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f538:	f7f2 fbb0 	bl	8001c9c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f53c:	4806      	ldr	r0, [pc, #24]	; (800f558 <USBH_LL_Init+0x74>)
 800f53e:	f7f4 ffdc 	bl	80044fa <HAL_HCD_GetCurrentFrame>
 800f542:	4603      	mov	r3, r0
 800f544:	4619      	mov	r1, r3
 800f546:	6878      	ldr	r0, [r7, #4]
 800f548:	f7fc fbd2 	bl	800bcf0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f54c:	2300      	movs	r3, #0
}
 800f54e:	4618      	mov	r0, r3
 800f550:	3708      	adds	r7, #8
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}
 800f556:	bf00      	nop
 800f558:	20001b5c 	.word	0x20001b5c

0800f55c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b084      	sub	sp, #16
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f564:	2300      	movs	r3, #0
 800f566:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f568:	2300      	movs	r3, #0
 800f56a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f572:	4618      	mov	r0, r3
 800f574:	f7f4 ff4b 	bl	800440e <HAL_HCD_Start>
 800f578:	4603      	mov	r3, r0
 800f57a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f57c:	7bfb      	ldrb	r3, [r7, #15]
 800f57e:	4618      	mov	r0, r3
 800f580:	f000 f982 	bl	800f888 <USBH_Get_USB_Status>
 800f584:	4603      	mov	r3, r0
 800f586:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f588:	7bbb      	ldrb	r3, [r7, #14]
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3710      	adds	r7, #16
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}

0800f592 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f592:	b580      	push	{r7, lr}
 800f594:	b084      	sub	sp, #16
 800f596:	af00      	add	r7, sp, #0
 800f598:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f59a:	2300      	movs	r3, #0
 800f59c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f7f4 ff53 	bl	8004454 <HAL_HCD_Stop>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f5b2:	7bfb      	ldrb	r3, [r7, #15]
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f000 f967 	bl	800f888 <USBH_Get_USB_Status>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5be:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	3710      	adds	r7, #16
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}

0800f5c8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b084      	sub	sp, #16
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f5d0:	2301      	movs	r3, #1
 800f5d2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f7f4 ff9b 	bl	8004516 <HAL_HCD_GetCurrentSpeed>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	2b02      	cmp	r3, #2
 800f5e4:	d00c      	beq.n	800f600 <USBH_LL_GetSpeed+0x38>
 800f5e6:	2b02      	cmp	r3, #2
 800f5e8:	d80d      	bhi.n	800f606 <USBH_LL_GetSpeed+0x3e>
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d002      	beq.n	800f5f4 <USBH_LL_GetSpeed+0x2c>
 800f5ee:	2b01      	cmp	r3, #1
 800f5f0:	d003      	beq.n	800f5fa <USBH_LL_GetSpeed+0x32>
 800f5f2:	e008      	b.n	800f606 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	73fb      	strb	r3, [r7, #15]
    break;
 800f5f8:	e008      	b.n	800f60c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	73fb      	strb	r3, [r7, #15]
    break;
 800f5fe:	e005      	b.n	800f60c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f600:	2302      	movs	r3, #2
 800f602:	73fb      	strb	r3, [r7, #15]
    break;
 800f604:	e002      	b.n	800f60c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f606:	2301      	movs	r3, #1
 800f608:	73fb      	strb	r3, [r7, #15]
    break;
 800f60a:	bf00      	nop
  }
  return  speed;
 800f60c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3710      	adds	r7, #16
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}

0800f616 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f616:	b580      	push	{r7, lr}
 800f618:	b084      	sub	sp, #16
 800f61a:	af00      	add	r7, sp, #0
 800f61c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f61e:	2300      	movs	r3, #0
 800f620:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f622:	2300      	movs	r3, #0
 800f624:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f62c:	4618      	mov	r0, r3
 800f62e:	f7f4 ff2e 	bl	800448e <HAL_HCD_ResetPort>
 800f632:	4603      	mov	r3, r0
 800f634:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f636:	7bfb      	ldrb	r3, [r7, #15]
 800f638:	4618      	mov	r0, r3
 800f63a:	f000 f925 	bl	800f888 <USBH_Get_USB_Status>
 800f63e:	4603      	mov	r3, r0
 800f640:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f642:	7bbb      	ldrb	r3, [r7, #14]
}
 800f644:	4618      	mov	r0, r3
 800f646:	3710      	adds	r7, #16
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}

0800f64c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b082      	sub	sp, #8
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
 800f654:	460b      	mov	r3, r1
 800f656:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f65e:	78fa      	ldrb	r2, [r7, #3]
 800f660:	4611      	mov	r1, r2
 800f662:	4618      	mov	r0, r3
 800f664:	f7f4 ff35 	bl	80044d2 <HAL_HCD_HC_GetXferCount>
 800f668:	4603      	mov	r3, r0
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3708      	adds	r7, #8
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}

0800f672 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f672:	b590      	push	{r4, r7, lr}
 800f674:	b089      	sub	sp, #36	; 0x24
 800f676:	af04      	add	r7, sp, #16
 800f678:	6078      	str	r0, [r7, #4]
 800f67a:	4608      	mov	r0, r1
 800f67c:	4611      	mov	r1, r2
 800f67e:	461a      	mov	r2, r3
 800f680:	4603      	mov	r3, r0
 800f682:	70fb      	strb	r3, [r7, #3]
 800f684:	460b      	mov	r3, r1
 800f686:	70bb      	strb	r3, [r7, #2]
 800f688:	4613      	mov	r3, r2
 800f68a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f68c:	2300      	movs	r3, #0
 800f68e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f690:	2300      	movs	r3, #0
 800f692:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f69a:	787c      	ldrb	r4, [r7, #1]
 800f69c:	78ba      	ldrb	r2, [r7, #2]
 800f69e:	78f9      	ldrb	r1, [r7, #3]
 800f6a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f6a2:	9302      	str	r3, [sp, #8]
 800f6a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f6a8:	9301      	str	r3, [sp, #4]
 800f6aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f6ae:	9300      	str	r3, [sp, #0]
 800f6b0:	4623      	mov	r3, r4
 800f6b2:	f7f4 fb98 	bl	8003de6 <HAL_HCD_HC_Init>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f6ba:	7bfb      	ldrb	r3, [r7, #15]
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f000 f8e3 	bl	800f888 <USBH_Get_USB_Status>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	3714      	adds	r7, #20
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd90      	pop	{r4, r7, pc}

0800f6d0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b084      	sub	sp, #16
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	460b      	mov	r3, r1
 800f6da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f6ea:	78fa      	ldrb	r2, [r7, #3]
 800f6ec:	4611      	mov	r1, r2
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f7f4 fc08 	bl	8003f04 <HAL_HCD_HC_Halt>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f6f8:	7bfb      	ldrb	r3, [r7, #15]
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f000 f8c4 	bl	800f888 <USBH_Get_USB_Status>
 800f700:	4603      	mov	r3, r0
 800f702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f704:	7bbb      	ldrb	r3, [r7, #14]
}
 800f706:	4618      	mov	r0, r3
 800f708:	3710      	adds	r7, #16
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}

0800f70e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f70e:	b590      	push	{r4, r7, lr}
 800f710:	b089      	sub	sp, #36	; 0x24
 800f712:	af04      	add	r7, sp, #16
 800f714:	6078      	str	r0, [r7, #4]
 800f716:	4608      	mov	r0, r1
 800f718:	4611      	mov	r1, r2
 800f71a:	461a      	mov	r2, r3
 800f71c:	4603      	mov	r3, r0
 800f71e:	70fb      	strb	r3, [r7, #3]
 800f720:	460b      	mov	r3, r1
 800f722:	70bb      	strb	r3, [r7, #2]
 800f724:	4613      	mov	r3, r2
 800f726:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f728:	2300      	movs	r3, #0
 800f72a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f72c:	2300      	movs	r3, #0
 800f72e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f736:	787c      	ldrb	r4, [r7, #1]
 800f738:	78ba      	ldrb	r2, [r7, #2]
 800f73a:	78f9      	ldrb	r1, [r7, #3]
 800f73c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f740:	9303      	str	r3, [sp, #12]
 800f742:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f744:	9302      	str	r3, [sp, #8]
 800f746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f748:	9301      	str	r3, [sp, #4]
 800f74a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f74e:	9300      	str	r3, [sp, #0]
 800f750:	4623      	mov	r3, r4
 800f752:	f7f4 fbfb 	bl	8003f4c <HAL_HCD_HC_SubmitRequest>
 800f756:	4603      	mov	r3, r0
 800f758:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f75a:	7bfb      	ldrb	r3, [r7, #15]
 800f75c:	4618      	mov	r0, r3
 800f75e:	f000 f893 	bl	800f888 <USBH_Get_USB_Status>
 800f762:	4603      	mov	r3, r0
 800f764:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f766:	7bbb      	ldrb	r3, [r7, #14]
}
 800f768:	4618      	mov	r0, r3
 800f76a:	3714      	adds	r7, #20
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd90      	pop	{r4, r7, pc}

0800f770 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b082      	sub	sp, #8
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	460b      	mov	r3, r1
 800f77a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f782:	78fa      	ldrb	r2, [r7, #3]
 800f784:	4611      	mov	r1, r2
 800f786:	4618      	mov	r0, r3
 800f788:	f7f4 fe8f 	bl	80044aa <HAL_HCD_HC_GetURBState>
 800f78c:	4603      	mov	r3, r0
}
 800f78e:	4618      	mov	r0, r3
 800f790:	3708      	adds	r7, #8
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}

0800f796 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f796:	b580      	push	{r7, lr}
 800f798:	b082      	sub	sp, #8
 800f79a:	af00      	add	r7, sp, #0
 800f79c:	6078      	str	r0, [r7, #4]
 800f79e:	460b      	mov	r3, r1
 800f7a0:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800f7a2:	20c8      	movs	r0, #200	; 0xc8
 800f7a4:	f7f3 fb02 	bl	8002dac <HAL_Delay>
  return USBH_OK;
 800f7a8:	2300      	movs	r3, #0
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3708      	adds	r7, #8
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}

0800f7b2 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f7b2:	b480      	push	{r7}
 800f7b4:	b085      	sub	sp, #20
 800f7b6:	af00      	add	r7, sp, #0
 800f7b8:	6078      	str	r0, [r7, #4]
 800f7ba:	460b      	mov	r3, r1
 800f7bc:	70fb      	strb	r3, [r7, #3]
 800f7be:	4613      	mov	r3, r2
 800f7c0:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f7c8:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f7ca:	78fb      	ldrb	r3, [r7, #3]
 800f7cc:	68fa      	ldr	r2, [r7, #12]
 800f7ce:	212c      	movs	r1, #44	; 0x2c
 800f7d0:	fb01 f303 	mul.w	r3, r1, r3
 800f7d4:	4413      	add	r3, r2
 800f7d6:	333b      	adds	r3, #59	; 0x3b
 800f7d8:	781b      	ldrb	r3, [r3, #0]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d009      	beq.n	800f7f2 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f7de:	78fb      	ldrb	r3, [r7, #3]
 800f7e0:	68fa      	ldr	r2, [r7, #12]
 800f7e2:	212c      	movs	r1, #44	; 0x2c
 800f7e4:	fb01 f303 	mul.w	r3, r1, r3
 800f7e8:	4413      	add	r3, r2
 800f7ea:	3354      	adds	r3, #84	; 0x54
 800f7ec:	78ba      	ldrb	r2, [r7, #2]
 800f7ee:	701a      	strb	r2, [r3, #0]
 800f7f0:	e008      	b.n	800f804 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f7f2:	78fb      	ldrb	r3, [r7, #3]
 800f7f4:	68fa      	ldr	r2, [r7, #12]
 800f7f6:	212c      	movs	r1, #44	; 0x2c
 800f7f8:	fb01 f303 	mul.w	r3, r1, r3
 800f7fc:	4413      	add	r3, r2
 800f7fe:	3355      	adds	r3, #85	; 0x55
 800f800:	78ba      	ldrb	r2, [r7, #2]
 800f802:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f804:	2300      	movs	r3, #0
}
 800f806:	4618      	mov	r0, r3
 800f808:	3714      	adds	r7, #20
 800f80a:	46bd      	mov	sp, r7
 800f80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f810:	4770      	bx	lr

0800f812 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f812:	b480      	push	{r7}
 800f814:	b085      	sub	sp, #20
 800f816:	af00      	add	r7, sp, #0
 800f818:	6078      	str	r0, [r7, #4]
 800f81a:	460b      	mov	r3, r1
 800f81c:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800f81e:	2300      	movs	r3, #0
 800f820:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f828:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800f82a:	78fb      	ldrb	r3, [r7, #3]
 800f82c:	68ba      	ldr	r2, [r7, #8]
 800f82e:	212c      	movs	r1, #44	; 0x2c
 800f830:	fb01 f303 	mul.w	r3, r1, r3
 800f834:	4413      	add	r3, r2
 800f836:	333b      	adds	r3, #59	; 0x3b
 800f838:	781b      	ldrb	r3, [r3, #0]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d009      	beq.n	800f852 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800f83e:	78fb      	ldrb	r3, [r7, #3]
 800f840:	68ba      	ldr	r2, [r7, #8]
 800f842:	212c      	movs	r1, #44	; 0x2c
 800f844:	fb01 f303 	mul.w	r3, r1, r3
 800f848:	4413      	add	r3, r2
 800f84a:	3354      	adds	r3, #84	; 0x54
 800f84c:	781b      	ldrb	r3, [r3, #0]
 800f84e:	73fb      	strb	r3, [r7, #15]
 800f850:	e008      	b.n	800f864 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800f852:	78fb      	ldrb	r3, [r7, #3]
 800f854:	68ba      	ldr	r2, [r7, #8]
 800f856:	212c      	movs	r1, #44	; 0x2c
 800f858:	fb01 f303 	mul.w	r3, r1, r3
 800f85c:	4413      	add	r3, r2
 800f85e:	3355      	adds	r3, #85	; 0x55
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800f864:	7bfb      	ldrb	r3, [r7, #15]
}
 800f866:	4618      	mov	r0, r3
 800f868:	3714      	adds	r7, #20
 800f86a:	46bd      	mov	sp, r7
 800f86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f870:	4770      	bx	lr

0800f872 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f872:	b580      	push	{r7, lr}
 800f874:	b082      	sub	sp, #8
 800f876:	af00      	add	r7, sp, #0
 800f878:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f7f3 fa96 	bl	8002dac <HAL_Delay>
}
 800f880:	bf00      	nop
 800f882:	3708      	adds	r7, #8
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}

0800f888 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f888:	b480      	push	{r7}
 800f88a:	b085      	sub	sp, #20
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	4603      	mov	r3, r0
 800f890:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f892:	2300      	movs	r3, #0
 800f894:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f896:	79fb      	ldrb	r3, [r7, #7]
 800f898:	2b03      	cmp	r3, #3
 800f89a:	d817      	bhi.n	800f8cc <USBH_Get_USB_Status+0x44>
 800f89c:	a201      	add	r2, pc, #4	; (adr r2, 800f8a4 <USBH_Get_USB_Status+0x1c>)
 800f89e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8a2:	bf00      	nop
 800f8a4:	0800f8b5 	.word	0x0800f8b5
 800f8a8:	0800f8bb 	.word	0x0800f8bb
 800f8ac:	0800f8c1 	.word	0x0800f8c1
 800f8b0:	0800f8c7 	.word	0x0800f8c7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	73fb      	strb	r3, [r7, #15]
    break;
 800f8b8:	e00b      	b.n	800f8d2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f8ba:	2302      	movs	r3, #2
 800f8bc:	73fb      	strb	r3, [r7, #15]
    break;
 800f8be:	e008      	b.n	800f8d2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f8c0:	2301      	movs	r3, #1
 800f8c2:	73fb      	strb	r3, [r7, #15]
    break;
 800f8c4:	e005      	b.n	800f8d2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f8c6:	2302      	movs	r3, #2
 800f8c8:	73fb      	strb	r3, [r7, #15]
    break;
 800f8ca:	e002      	b.n	800f8d2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f8cc:	2302      	movs	r3, #2
 800f8ce:	73fb      	strb	r3, [r7, #15]
    break;
 800f8d0:	bf00      	nop
  }
  return usb_status;
 800f8d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3714      	adds	r7, #20
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8de:	4770      	bx	lr

0800f8e0 <__errno>:
 800f8e0:	4b01      	ldr	r3, [pc, #4]	; (800f8e8 <__errno+0x8>)
 800f8e2:	6818      	ldr	r0, [r3, #0]
 800f8e4:	4770      	bx	lr
 800f8e6:	bf00      	nop
 800f8e8:	20000098 	.word	0x20000098

0800f8ec <__libc_init_array>:
 800f8ec:	b570      	push	{r4, r5, r6, lr}
 800f8ee:	4d0d      	ldr	r5, [pc, #52]	; (800f924 <__libc_init_array+0x38>)
 800f8f0:	4c0d      	ldr	r4, [pc, #52]	; (800f928 <__libc_init_array+0x3c>)
 800f8f2:	1b64      	subs	r4, r4, r5
 800f8f4:	10a4      	asrs	r4, r4, #2
 800f8f6:	2600      	movs	r6, #0
 800f8f8:	42a6      	cmp	r6, r4
 800f8fa:	d109      	bne.n	800f910 <__libc_init_array+0x24>
 800f8fc:	4d0b      	ldr	r5, [pc, #44]	; (800f92c <__libc_init_array+0x40>)
 800f8fe:	4c0c      	ldr	r4, [pc, #48]	; (800f930 <__libc_init_array+0x44>)
 800f900:	f000 f93c 	bl	800fb7c <_init>
 800f904:	1b64      	subs	r4, r4, r5
 800f906:	10a4      	asrs	r4, r4, #2
 800f908:	2600      	movs	r6, #0
 800f90a:	42a6      	cmp	r6, r4
 800f90c:	d105      	bne.n	800f91a <__libc_init_array+0x2e>
 800f90e:	bd70      	pop	{r4, r5, r6, pc}
 800f910:	f855 3b04 	ldr.w	r3, [r5], #4
 800f914:	4798      	blx	r3
 800f916:	3601      	adds	r6, #1
 800f918:	e7ee      	b.n	800f8f8 <__libc_init_array+0xc>
 800f91a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f91e:	4798      	blx	r3
 800f920:	3601      	adds	r6, #1
 800f922:	e7f2      	b.n	800f90a <__libc_init_array+0x1e>
 800f924:	0800fd00 	.word	0x0800fd00
 800f928:	0800fd00 	.word	0x0800fd00
 800f92c:	0800fd00 	.word	0x0800fd00
 800f930:	0800fd04 	.word	0x0800fd04

0800f934 <malloc>:
 800f934:	4b02      	ldr	r3, [pc, #8]	; (800f940 <malloc+0xc>)
 800f936:	4601      	mov	r1, r0
 800f938:	6818      	ldr	r0, [r3, #0]
 800f93a:	f000 b88d 	b.w	800fa58 <_malloc_r>
 800f93e:	bf00      	nop
 800f940:	20000098 	.word	0x20000098

0800f944 <free>:
 800f944:	4b02      	ldr	r3, [pc, #8]	; (800f950 <free+0xc>)
 800f946:	4601      	mov	r1, r0
 800f948:	6818      	ldr	r0, [r3, #0]
 800f94a:	f000 b819 	b.w	800f980 <_free_r>
 800f94e:	bf00      	nop
 800f950:	20000098 	.word	0x20000098

0800f954 <memcpy>:
 800f954:	440a      	add	r2, r1
 800f956:	4291      	cmp	r1, r2
 800f958:	f100 33ff 	add.w	r3, r0, #4294967295
 800f95c:	d100      	bne.n	800f960 <memcpy+0xc>
 800f95e:	4770      	bx	lr
 800f960:	b510      	push	{r4, lr}
 800f962:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f966:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f96a:	4291      	cmp	r1, r2
 800f96c:	d1f9      	bne.n	800f962 <memcpy+0xe>
 800f96e:	bd10      	pop	{r4, pc}

0800f970 <memset>:
 800f970:	4402      	add	r2, r0
 800f972:	4603      	mov	r3, r0
 800f974:	4293      	cmp	r3, r2
 800f976:	d100      	bne.n	800f97a <memset+0xa>
 800f978:	4770      	bx	lr
 800f97a:	f803 1b01 	strb.w	r1, [r3], #1
 800f97e:	e7f9      	b.n	800f974 <memset+0x4>

0800f980 <_free_r>:
 800f980:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f982:	2900      	cmp	r1, #0
 800f984:	d044      	beq.n	800fa10 <_free_r+0x90>
 800f986:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f98a:	9001      	str	r0, [sp, #4]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	f1a1 0404 	sub.w	r4, r1, #4
 800f992:	bfb8      	it	lt
 800f994:	18e4      	addlt	r4, r4, r3
 800f996:	f000 f8e3 	bl	800fb60 <__malloc_lock>
 800f99a:	4a1e      	ldr	r2, [pc, #120]	; (800fa14 <_free_r+0x94>)
 800f99c:	9801      	ldr	r0, [sp, #4]
 800f99e:	6813      	ldr	r3, [r2, #0]
 800f9a0:	b933      	cbnz	r3, 800f9b0 <_free_r+0x30>
 800f9a2:	6063      	str	r3, [r4, #4]
 800f9a4:	6014      	str	r4, [r2, #0]
 800f9a6:	b003      	add	sp, #12
 800f9a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f9ac:	f000 b8de 	b.w	800fb6c <__malloc_unlock>
 800f9b0:	42a3      	cmp	r3, r4
 800f9b2:	d908      	bls.n	800f9c6 <_free_r+0x46>
 800f9b4:	6825      	ldr	r5, [r4, #0]
 800f9b6:	1961      	adds	r1, r4, r5
 800f9b8:	428b      	cmp	r3, r1
 800f9ba:	bf01      	itttt	eq
 800f9bc:	6819      	ldreq	r1, [r3, #0]
 800f9be:	685b      	ldreq	r3, [r3, #4]
 800f9c0:	1949      	addeq	r1, r1, r5
 800f9c2:	6021      	streq	r1, [r4, #0]
 800f9c4:	e7ed      	b.n	800f9a2 <_free_r+0x22>
 800f9c6:	461a      	mov	r2, r3
 800f9c8:	685b      	ldr	r3, [r3, #4]
 800f9ca:	b10b      	cbz	r3, 800f9d0 <_free_r+0x50>
 800f9cc:	42a3      	cmp	r3, r4
 800f9ce:	d9fa      	bls.n	800f9c6 <_free_r+0x46>
 800f9d0:	6811      	ldr	r1, [r2, #0]
 800f9d2:	1855      	adds	r5, r2, r1
 800f9d4:	42a5      	cmp	r5, r4
 800f9d6:	d10b      	bne.n	800f9f0 <_free_r+0x70>
 800f9d8:	6824      	ldr	r4, [r4, #0]
 800f9da:	4421      	add	r1, r4
 800f9dc:	1854      	adds	r4, r2, r1
 800f9de:	42a3      	cmp	r3, r4
 800f9e0:	6011      	str	r1, [r2, #0]
 800f9e2:	d1e0      	bne.n	800f9a6 <_free_r+0x26>
 800f9e4:	681c      	ldr	r4, [r3, #0]
 800f9e6:	685b      	ldr	r3, [r3, #4]
 800f9e8:	6053      	str	r3, [r2, #4]
 800f9ea:	4421      	add	r1, r4
 800f9ec:	6011      	str	r1, [r2, #0]
 800f9ee:	e7da      	b.n	800f9a6 <_free_r+0x26>
 800f9f0:	d902      	bls.n	800f9f8 <_free_r+0x78>
 800f9f2:	230c      	movs	r3, #12
 800f9f4:	6003      	str	r3, [r0, #0]
 800f9f6:	e7d6      	b.n	800f9a6 <_free_r+0x26>
 800f9f8:	6825      	ldr	r5, [r4, #0]
 800f9fa:	1961      	adds	r1, r4, r5
 800f9fc:	428b      	cmp	r3, r1
 800f9fe:	bf04      	itt	eq
 800fa00:	6819      	ldreq	r1, [r3, #0]
 800fa02:	685b      	ldreq	r3, [r3, #4]
 800fa04:	6063      	str	r3, [r4, #4]
 800fa06:	bf04      	itt	eq
 800fa08:	1949      	addeq	r1, r1, r5
 800fa0a:	6021      	streq	r1, [r4, #0]
 800fa0c:	6054      	str	r4, [r2, #4]
 800fa0e:	e7ca      	b.n	800f9a6 <_free_r+0x26>
 800fa10:	b003      	add	sp, #12
 800fa12:	bd30      	pop	{r4, r5, pc}
 800fa14:	20001e60 	.word	0x20001e60

0800fa18 <sbrk_aligned>:
 800fa18:	b570      	push	{r4, r5, r6, lr}
 800fa1a:	4e0e      	ldr	r6, [pc, #56]	; (800fa54 <sbrk_aligned+0x3c>)
 800fa1c:	460c      	mov	r4, r1
 800fa1e:	6831      	ldr	r1, [r6, #0]
 800fa20:	4605      	mov	r5, r0
 800fa22:	b911      	cbnz	r1, 800fa2a <sbrk_aligned+0x12>
 800fa24:	f000 f88c 	bl	800fb40 <_sbrk_r>
 800fa28:	6030      	str	r0, [r6, #0]
 800fa2a:	4621      	mov	r1, r4
 800fa2c:	4628      	mov	r0, r5
 800fa2e:	f000 f887 	bl	800fb40 <_sbrk_r>
 800fa32:	1c43      	adds	r3, r0, #1
 800fa34:	d00a      	beq.n	800fa4c <sbrk_aligned+0x34>
 800fa36:	1cc4      	adds	r4, r0, #3
 800fa38:	f024 0403 	bic.w	r4, r4, #3
 800fa3c:	42a0      	cmp	r0, r4
 800fa3e:	d007      	beq.n	800fa50 <sbrk_aligned+0x38>
 800fa40:	1a21      	subs	r1, r4, r0
 800fa42:	4628      	mov	r0, r5
 800fa44:	f000 f87c 	bl	800fb40 <_sbrk_r>
 800fa48:	3001      	adds	r0, #1
 800fa4a:	d101      	bne.n	800fa50 <sbrk_aligned+0x38>
 800fa4c:	f04f 34ff 	mov.w	r4, #4294967295
 800fa50:	4620      	mov	r0, r4
 800fa52:	bd70      	pop	{r4, r5, r6, pc}
 800fa54:	20001e64 	.word	0x20001e64

0800fa58 <_malloc_r>:
 800fa58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa5c:	1ccd      	adds	r5, r1, #3
 800fa5e:	f025 0503 	bic.w	r5, r5, #3
 800fa62:	3508      	adds	r5, #8
 800fa64:	2d0c      	cmp	r5, #12
 800fa66:	bf38      	it	cc
 800fa68:	250c      	movcc	r5, #12
 800fa6a:	2d00      	cmp	r5, #0
 800fa6c:	4607      	mov	r7, r0
 800fa6e:	db01      	blt.n	800fa74 <_malloc_r+0x1c>
 800fa70:	42a9      	cmp	r1, r5
 800fa72:	d905      	bls.n	800fa80 <_malloc_r+0x28>
 800fa74:	230c      	movs	r3, #12
 800fa76:	603b      	str	r3, [r7, #0]
 800fa78:	2600      	movs	r6, #0
 800fa7a:	4630      	mov	r0, r6
 800fa7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa80:	4e2e      	ldr	r6, [pc, #184]	; (800fb3c <_malloc_r+0xe4>)
 800fa82:	f000 f86d 	bl	800fb60 <__malloc_lock>
 800fa86:	6833      	ldr	r3, [r6, #0]
 800fa88:	461c      	mov	r4, r3
 800fa8a:	bb34      	cbnz	r4, 800fada <_malloc_r+0x82>
 800fa8c:	4629      	mov	r1, r5
 800fa8e:	4638      	mov	r0, r7
 800fa90:	f7ff ffc2 	bl	800fa18 <sbrk_aligned>
 800fa94:	1c43      	adds	r3, r0, #1
 800fa96:	4604      	mov	r4, r0
 800fa98:	d14d      	bne.n	800fb36 <_malloc_r+0xde>
 800fa9a:	6834      	ldr	r4, [r6, #0]
 800fa9c:	4626      	mov	r6, r4
 800fa9e:	2e00      	cmp	r6, #0
 800faa0:	d140      	bne.n	800fb24 <_malloc_r+0xcc>
 800faa2:	6823      	ldr	r3, [r4, #0]
 800faa4:	4631      	mov	r1, r6
 800faa6:	4638      	mov	r0, r7
 800faa8:	eb04 0803 	add.w	r8, r4, r3
 800faac:	f000 f848 	bl	800fb40 <_sbrk_r>
 800fab0:	4580      	cmp	r8, r0
 800fab2:	d13a      	bne.n	800fb2a <_malloc_r+0xd2>
 800fab4:	6821      	ldr	r1, [r4, #0]
 800fab6:	3503      	adds	r5, #3
 800fab8:	1a6d      	subs	r5, r5, r1
 800faba:	f025 0503 	bic.w	r5, r5, #3
 800fabe:	3508      	adds	r5, #8
 800fac0:	2d0c      	cmp	r5, #12
 800fac2:	bf38      	it	cc
 800fac4:	250c      	movcc	r5, #12
 800fac6:	4629      	mov	r1, r5
 800fac8:	4638      	mov	r0, r7
 800faca:	f7ff ffa5 	bl	800fa18 <sbrk_aligned>
 800face:	3001      	adds	r0, #1
 800fad0:	d02b      	beq.n	800fb2a <_malloc_r+0xd2>
 800fad2:	6823      	ldr	r3, [r4, #0]
 800fad4:	442b      	add	r3, r5
 800fad6:	6023      	str	r3, [r4, #0]
 800fad8:	e00e      	b.n	800faf8 <_malloc_r+0xa0>
 800fada:	6822      	ldr	r2, [r4, #0]
 800fadc:	1b52      	subs	r2, r2, r5
 800fade:	d41e      	bmi.n	800fb1e <_malloc_r+0xc6>
 800fae0:	2a0b      	cmp	r2, #11
 800fae2:	d916      	bls.n	800fb12 <_malloc_r+0xba>
 800fae4:	1961      	adds	r1, r4, r5
 800fae6:	42a3      	cmp	r3, r4
 800fae8:	6025      	str	r5, [r4, #0]
 800faea:	bf18      	it	ne
 800faec:	6059      	strne	r1, [r3, #4]
 800faee:	6863      	ldr	r3, [r4, #4]
 800faf0:	bf08      	it	eq
 800faf2:	6031      	streq	r1, [r6, #0]
 800faf4:	5162      	str	r2, [r4, r5]
 800faf6:	604b      	str	r3, [r1, #4]
 800faf8:	4638      	mov	r0, r7
 800fafa:	f104 060b 	add.w	r6, r4, #11
 800fafe:	f000 f835 	bl	800fb6c <__malloc_unlock>
 800fb02:	f026 0607 	bic.w	r6, r6, #7
 800fb06:	1d23      	adds	r3, r4, #4
 800fb08:	1af2      	subs	r2, r6, r3
 800fb0a:	d0b6      	beq.n	800fa7a <_malloc_r+0x22>
 800fb0c:	1b9b      	subs	r3, r3, r6
 800fb0e:	50a3      	str	r3, [r4, r2]
 800fb10:	e7b3      	b.n	800fa7a <_malloc_r+0x22>
 800fb12:	6862      	ldr	r2, [r4, #4]
 800fb14:	42a3      	cmp	r3, r4
 800fb16:	bf0c      	ite	eq
 800fb18:	6032      	streq	r2, [r6, #0]
 800fb1a:	605a      	strne	r2, [r3, #4]
 800fb1c:	e7ec      	b.n	800faf8 <_malloc_r+0xa0>
 800fb1e:	4623      	mov	r3, r4
 800fb20:	6864      	ldr	r4, [r4, #4]
 800fb22:	e7b2      	b.n	800fa8a <_malloc_r+0x32>
 800fb24:	4634      	mov	r4, r6
 800fb26:	6876      	ldr	r6, [r6, #4]
 800fb28:	e7b9      	b.n	800fa9e <_malloc_r+0x46>
 800fb2a:	230c      	movs	r3, #12
 800fb2c:	603b      	str	r3, [r7, #0]
 800fb2e:	4638      	mov	r0, r7
 800fb30:	f000 f81c 	bl	800fb6c <__malloc_unlock>
 800fb34:	e7a1      	b.n	800fa7a <_malloc_r+0x22>
 800fb36:	6025      	str	r5, [r4, #0]
 800fb38:	e7de      	b.n	800faf8 <_malloc_r+0xa0>
 800fb3a:	bf00      	nop
 800fb3c:	20001e60 	.word	0x20001e60

0800fb40 <_sbrk_r>:
 800fb40:	b538      	push	{r3, r4, r5, lr}
 800fb42:	4d06      	ldr	r5, [pc, #24]	; (800fb5c <_sbrk_r+0x1c>)
 800fb44:	2300      	movs	r3, #0
 800fb46:	4604      	mov	r4, r0
 800fb48:	4608      	mov	r0, r1
 800fb4a:	602b      	str	r3, [r5, #0]
 800fb4c:	f7f2 fa54 	bl	8001ff8 <_sbrk>
 800fb50:	1c43      	adds	r3, r0, #1
 800fb52:	d102      	bne.n	800fb5a <_sbrk_r+0x1a>
 800fb54:	682b      	ldr	r3, [r5, #0]
 800fb56:	b103      	cbz	r3, 800fb5a <_sbrk_r+0x1a>
 800fb58:	6023      	str	r3, [r4, #0]
 800fb5a:	bd38      	pop	{r3, r4, r5, pc}
 800fb5c:	20001e68 	.word	0x20001e68

0800fb60 <__malloc_lock>:
 800fb60:	4801      	ldr	r0, [pc, #4]	; (800fb68 <__malloc_lock+0x8>)
 800fb62:	f000 b809 	b.w	800fb78 <__retarget_lock_acquire_recursive>
 800fb66:	bf00      	nop
 800fb68:	20001e6c 	.word	0x20001e6c

0800fb6c <__malloc_unlock>:
 800fb6c:	4801      	ldr	r0, [pc, #4]	; (800fb74 <__malloc_unlock+0x8>)
 800fb6e:	f000 b804 	b.w	800fb7a <__retarget_lock_release_recursive>
 800fb72:	bf00      	nop
 800fb74:	20001e6c 	.word	0x20001e6c

0800fb78 <__retarget_lock_acquire_recursive>:
 800fb78:	4770      	bx	lr

0800fb7a <__retarget_lock_release_recursive>:
 800fb7a:	4770      	bx	lr

0800fb7c <_init>:
 800fb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb7e:	bf00      	nop
 800fb80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb82:	bc08      	pop	{r3}
 800fb84:	469e      	mov	lr, r3
 800fb86:	4770      	bx	lr

0800fb88 <_fini>:
 800fb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb8a:	bf00      	nop
 800fb8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb8e:	bc08      	pop	{r3}
 800fb90:	469e      	mov	lr, r3
 800fb92:	4770      	bx	lr
